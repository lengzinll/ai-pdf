// @bun
var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};

// node_modules/lodash.clonedeep/index.js
var require_lodash = __commonJS((exports, module) => {
  function addMapEntry(map3, pair) {
    map3.set(pair[0], pair[1]);
    return map3;
  }
  function addSetEntry(set2, value15) {
    set2.add(value15);
    return set2;
  }
  function arrayEach(array5, iteratee) {
    var index = -1, length = array5 ? array5.length : 0;
    while (++index < length) {
      if (iteratee(array5[index], index, array5) === false) {
        break;
      }
    }
    return array5;
  }
  function arrayPush(array5, values) {
    var index = -1, length = values.length, offset = array5.length;
    while (++index < length) {
      array5[offset + index] = values[index];
    }
    return array5;
  }
  function arrayReduce(array5, iteratee, accumulator, initAccum) {
    var index = -1, length = array5 ? array5.length : 0;
    if (initAccum && length) {
      accumulator = array5[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array5[index], index, array5);
    }
    return accumulator;
  }
  function baseTimes(n3, iteratee) {
    var index = -1, result = Array(n3);
    while (++index < n3) {
      result[index] = iteratee(index);
    }
    return result;
  }
  function getValue(object13, key) {
    return object13 == null ? undefined : object13[key];
  }
  function isHostObject(value15) {
    var result = false;
    if (value15 != null && typeof value15.toString != "function") {
      try {
        result = !!(value15 + "");
      } catch (e) {
      }
    }
    return result;
  }
  function mapToArray(map3) {
    var index = -1, result = Array(map3.size);
    map3.forEach(function(value15, key) {
      result[++index] = [key, value15];
    });
    return result;
  }
  function overArg(func, transform7) {
    return function(arg) {
      return func(transform7(arg));
    };
  }
  function setToArray(set2) {
    var index = -1, result = Array(set2.size);
    set2.forEach(function(value15) {
      result[++index] = value15;
    });
    return result;
  }
  function Hash3(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }
  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }
  function hashSet(key, value15) {
    var data = this.__data__;
    data[key] = nativeCreate && value15 === undefined ? HASH_UNDEFINED : value15;
    return this;
  }
  function ListCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function listCacheClear() {
    this.__data__ = [];
  }
  function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    return true;
  }
  function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }
  function listCacheSet(key, value15) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      data.push([key, value15]);
    } else {
      data[index][1] = value15;
    }
    return this;
  }
  function MapCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function mapCacheClear() {
    this.__data__ = {
      hash: new Hash3,
      map: new (Map2 || ListCache),
      string: new Hash3
    };
  }
  function mapCacheDelete(key) {
    return getMapData(this, key)["delete"](key);
  }
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }
  function mapCacheSet(key, value15) {
    getMapData(this, key).set(key, value15);
    return this;
  }
  function Stack(entries) {
    this.__data__ = new ListCache(entries);
  }
  function stackClear() {
    this.__data__ = new ListCache;
  }
  function stackDelete(key) {
    return this.__data__["delete"](key);
  }
  function stackGet(key) {
    return this.__data__.get(key);
  }
  function stackHas(key) {
    return this.__data__.has(key);
  }
  function stackSet(key, value15) {
    var cache = this.__data__;
    if (cache instanceof ListCache) {
      var pairs = cache.__data__;
      if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value15]);
        return this;
      }
      cache = this.__data__ = new MapCache(pairs);
    }
    cache.set(key, value15);
    return this;
  }
  function arrayLikeKeys(value15, inherited) {
    var result = isArray(value15) || isArguments(value15) ? baseTimes(value15.length, String) : [];
    var length = result.length, skipIndexes = !!length;
    for (var key in value15) {
      if ((inherited || hasOwnProperty.call(value15, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  function assignValue(object13, key, value15) {
    var objValue = object13[key];
    if (!(hasOwnProperty.call(object13, key) && eq(objValue, value15)) || value15 === undefined && !(key in object13)) {
      object13[key] = value15;
    }
  }
  function assocIndexOf(array5, key) {
    var length = array5.length;
    while (length--) {
      if (eq(array5[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  function baseAssign(object13, source) {
    return object13 && copyObject(source, keys(source), object13);
  }
  function baseClone(value15, isDeep, isFull, customizer, key, object13, stack) {
    var result;
    if (customizer) {
      result = object13 ? customizer(value15, key, object13, stack) : customizer(value15);
    }
    if (result !== undefined) {
      return result;
    }
    if (!isObject(value15)) {
      return value15;
    }
    var isArr = isArray(value15);
    if (isArr) {
      result = initCloneArray(value15);
      if (!isDeep) {
        return copyArray(value15, result);
      }
    } else {
      var tag = getTag(value15), isFunc = tag == funcTag || tag == genTag;
      if (isBuffer(value15)) {
        return cloneBuffer(value15, isDeep);
      }
      if (tag == objectTag || tag == argsTag || isFunc && !object13) {
        if (isHostObject(value15)) {
          return object13 ? value15 : {};
        }
        result = initCloneObject(isFunc ? {} : value15);
        if (!isDeep) {
          return copySymbols(value15, baseAssign(result, value15));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object13 ? value15 : {};
        }
        result = initCloneByTag(value15, tag, baseClone, isDeep);
      }
    }
    stack || (stack = new Stack);
    var stacked = stack.get(value15);
    if (stacked) {
      return stacked;
    }
    stack.set(value15, result);
    if (!isArr) {
      var props = isFull ? getAllKeys(value15) : keys(value15);
    }
    arrayEach(props || value15, function(subValue, key2) {
      if (props) {
        key2 = subValue;
        subValue = value15[key2];
      }
      assignValue(result, key2, baseClone(subValue, isDeep, isFull, customizer, key2, value15, stack));
    });
    return result;
  }
  function baseCreate(proto) {
    return isObject(proto) ? objectCreate(proto) : {};
  }
  function baseGetAllKeys(object13, keysFunc, symbolsFunc) {
    var result = keysFunc(object13);
    return isArray(object13) ? result : arrayPush(result, symbolsFunc(object13));
  }
  function baseGetTag(value15) {
    return objectToString.call(value15);
  }
  function baseIsNative(value15) {
    if (!isObject(value15) || isMasked(value15)) {
      return false;
    }
    var pattern3 = isFunction(value15) || isHostObject(value15) ? reIsNative : reIsHostCtor;
    return pattern3.test(toSource(value15));
  }
  function baseKeys(object13) {
    if (!isPrototype(object13)) {
      return nativeKeys(object13);
    }
    var result = [];
    for (var key in Object(object13)) {
      if (hasOwnProperty.call(object13, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var result = new buffer.constructor(buffer.length);
    buffer.copy(result);
    return result;
  }
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array3(result).set(new Uint8Array3(arrayBuffer));
    return result;
  }
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }
  function cloneMap(map3, isDeep, cloneFunc) {
    var array5 = isDeep ? cloneFunc(mapToArray(map3), true) : mapToArray(map3);
    return arrayReduce(array5, addMapEntry, new map3.constructor);
  }
  function cloneRegExp(regexp4) {
    var result = new regexp4.constructor(regexp4.source, reFlags.exec(regexp4));
    result.lastIndex = regexp4.lastIndex;
    return result;
  }
  function cloneSet(set2, isDeep, cloneFunc) {
    var array5 = isDeep ? cloneFunc(setToArray(set2), true) : setToArray(set2);
    return arrayReduce(array5, addSetEntry, new set2.constructor);
  }
  function cloneSymbol(symbol5) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol5)) : {};
  }
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  function copyArray(source, array5) {
    var index = -1, length = source.length;
    array5 || (array5 = Array(length));
    while (++index < length) {
      array5[index] = source[index];
    }
    return array5;
  }
  function copyObject(source, props, object13, customizer) {
    object13 || (object13 = {});
    var index = -1, length = props.length;
    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object13[key], source[key], key, object13, source) : undefined;
      assignValue(object13, key, newValue === undefined ? source[key] : newValue);
    }
    return object13;
  }
  function copySymbols(source, object13) {
    return copyObject(source, getSymbols(source), object13);
  }
  function getAllKeys(object13) {
    return baseGetAllKeys(object13, keys, getSymbols);
  }
  function getMapData(map3, key) {
    var data = map3.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  function getNative(object13, key) {
    var value15 = getValue(object13, key);
    return baseIsNative(value15) ? value15 : undefined;
  }
  function initCloneArray(array5) {
    var length = array5.length, result = array5.constructor(length);
    if (length && typeof array5[0] == "string" && hasOwnProperty.call(array5, "index")) {
      result.index = array5.index;
      result.input = array5.input;
    }
    return result;
  }
  function initCloneObject(object13) {
    return typeof object13.constructor == "function" && !isPrototype(object13) ? baseCreate(getPrototype(object13)) : {};
  }
  function initCloneByTag(object13, tag, cloneFunc, isDeep) {
    var Ctor = object13.constructor;
    switch (tag) {
      case arrayBufferTag:
        return cloneArrayBuffer(object13);
      case boolTag:
      case dateTag:
        return new Ctor(+object13);
      case dataViewTag:
        return cloneDataView(object13, isDeep);
      case float32Tag:
      case float64Tag:
      case int8Tag:
      case int16Tag:
      case int32Tag:
      case uint8Tag:
      case uint8ClampedTag:
      case uint16Tag:
      case uint32Tag:
        return cloneTypedArray(object13, isDeep);
      case mapTag:
        return cloneMap(object13, isDeep, cloneFunc);
      case numberTag:
      case stringTag:
        return new Ctor(object13);
      case regexpTag:
        return cloneRegExp(object13);
      case setTag:
        return cloneSet(object13, isDeep, cloneFunc);
      case symbolTag:
        return cloneSymbol(object13);
    }
  }
  function isIndex(value15, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value15 == "number" || reIsUint.test(value15)) && (value15 > -1 && value15 % 1 == 0 && value15 < length);
  }
  function isKeyable(value15) {
    var type47 = typeof value15;
    return type47 == "string" || type47 == "number" || type47 == "symbol" || type47 == "boolean" ? value15 !== "__proto__" : value15 === null;
  }
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  function isPrototype(value15) {
    var Ctor = value15 && value15.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value15 === proto;
  }
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  function cloneDeep(value15) {
    return baseClone(value15, true, true);
  }
  function eq(value15, other) {
    return value15 === other || value15 !== value15 && other !== other;
  }
  function isArguments(value15) {
    return isArrayLikeObject(value15) && hasOwnProperty.call(value15, "callee") && (!propertyIsEnumerable.call(value15, "callee") || objectToString.call(value15) == argsTag);
  }
  function isArrayLike(value15) {
    return value15 != null && isLength(value15.length) && !isFunction(value15);
  }
  function isArrayLikeObject(value15) {
    return isObjectLike(value15) && isArrayLike(value15);
  }
  function isFunction(value15) {
    var tag = isObject(value15) ? objectToString.call(value15) : "";
    return tag == funcTag || tag == genTag;
  }
  function isLength(value15) {
    return typeof value15 == "number" && value15 > -1 && value15 % 1 == 0 && value15 <= MAX_SAFE_INTEGER;
  }
  function isObject(value15) {
    var type47 = typeof value15;
    return !!value15 && (type47 == "object" || type47 == "function");
  }
  function isObjectLike(value15) {
    return !!value15 && typeof value15 == "object";
  }
  function keys(object13) {
    return isArrayLike(object13) ? arrayLikeKeys(object13) : baseKeys(object13);
  }
  function stubArray() {
    return [];
  }
  function stubFalse() {
    return false;
  }
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]";
  var arrayTag = "[object Array]";
  var boolTag = "[object Boolean]";
  var dateTag = "[object Date]";
  var errorTag = "[object Error]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var mapTag = "[object Map]";
  var numberTag = "[object Number]";
  var objectTag = "[object Object]";
  var promiseTag = "[object Promise]";
  var regexpTag = "[object RegExp]";
  var setTag = "[object Set]";
  var stringTag = "[object String]";
  var symbolTag = "[object Symbol]";
  var weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]";
  var dataViewTag = "[object DataView]";
  var float32Tag = "[object Float32Array]";
  var float64Tag = "[object Float64Array]";
  var int8Tag = "[object Int8Array]";
  var int16Tag = "[object Int16Array]";
  var int32Tag = "[object Int32Array]";
  var uint8Tag = "[object Uint8Array]";
  var uint8ClampedTag = "[object Uint8ClampedArray]";
  var uint16Tag = "[object Uint16Array]";
  var uint32Tag = "[object Uint32Array]";
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reFlags = /\w*$/;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var arrayProto = Array.prototype;
  var funcProto = Function.prototype;
  var objectProto = Object.prototype;
  var coreJsData = root["__core-js_shared__"];
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  var Buffer2 = moduleExports ? root.Buffer : undefined;
  var Symbol3 = root.Symbol;
  var Uint8Array3 = root.Uint8Array;
  var getPrototype = overArg(Object.getPrototypeOf, Object);
  var objectCreate = Object.create;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var splice = arrayProto.splice;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined;
  var nativeKeys = overArg(Object.keys, Object);
  var DataView2 = getNative(root, "DataView");
  var Map2 = getNative(root, "Map");
  var Promise3 = getNative(root, "Promise");
  var Set5 = getNative(root, "Set");
  var WeakMap2 = getNative(root, "WeakMap");
  var nativeCreate = getNative(Object, "create");
  var dataViewCtorString = toSource(DataView2);
  var mapCtorString = toSource(Map2);
  var promiseCtorString = toSource(Promise3);
  var setCtorString = toSource(Set5);
  var weakMapCtorString = toSource(WeakMap2);
  var symbolProto = Symbol3 ? Symbol3.prototype : undefined;
  var symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
  Hash3.prototype.clear = hashClear;
  Hash3.prototype["delete"] = hashDelete;
  Hash3.prototype.get = hashGet;
  Hash3.prototype.has = hashHas;
  Hash3.prototype.set = hashSet;
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  Stack.prototype.clear = stackClear;
  Stack.prototype["delete"] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
  var getTag = baseGetTag;
  if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2) != mapTag || Promise3 && getTag(Promise3.resolve()) != promiseTag || Set5 && getTag(new Set5) != setTag || WeakMap2 && getTag(new WeakMap2) != weakMapTag) {
    getTag = function(value15) {
      var result = objectToString.call(value15), Ctor = result == objectTag ? value15.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : undefined;
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;
          case mapCtorString:
            return mapTag;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag;
          case weakMapCtorString:
            return weakMapTag;
        }
      }
      return result;
    };
  }
  var isArray = Array.isArray;
  var isBuffer = nativeIsBuffer || stubFalse;
  module.exports = cloneDeep;
});

// node_modules/clone/clone.js
var require_clone = __commonJS((exports, module) => {
  var clone13 = function() {
    function _instanceof(obj, type47) {
      return type47 != null && obj instanceof type47;
    }
    var nativeMap;
    try {
      nativeMap = Map;
    } catch (_) {
      nativeMap = function() {
      };
    }
    var nativeSet;
    try {
      nativeSet = Set;
    } catch (_) {
      nativeSet = function() {
      };
    }
    var nativePromise;
    try {
      nativePromise = Promise;
    } catch (_) {
      nativePromise = function() {
      };
    }
    function clone14(parent, circular, depth, prototype, includeNonEnumerable) {
      if (typeof circular === "object") {
        depth = circular.depth;
        prototype = circular.prototype;
        includeNonEnumerable = circular.includeNonEnumerable;
        circular = circular.circular;
      }
      var allParents = [];
      var allChildren = [];
      var useBuffer = typeof Buffer != "undefined";
      if (typeof circular == "undefined")
        circular = true;
      if (typeof depth == "undefined")
        depth = Infinity;
      function _clone(parent2, depth2) {
        if (parent2 === null)
          return null;
        if (depth2 === 0)
          return parent2;
        var child;
        var proto;
        if (typeof parent2 != "object") {
          return parent2;
        }
        if (_instanceof(parent2, nativeMap)) {
          child = new nativeMap;
        } else if (_instanceof(parent2, nativeSet)) {
          child = new nativeSet;
        } else if (_instanceof(parent2, nativePromise)) {
          child = new nativePromise(function(resolve, reject) {
            parent2.then(function(value15) {
              resolve(_clone(value15, depth2 - 1));
            }, function(err) {
              reject(_clone(err, depth2 - 1));
            });
          });
        } else if (clone14.__isArray(parent2)) {
          child = [];
        } else if (clone14.__isRegExp(parent2)) {
          child = new RegExp(parent2.source, __getRegExpFlags(parent2));
          if (parent2.lastIndex)
            child.lastIndex = parent2.lastIndex;
        } else if (clone14.__isDate(parent2)) {
          child = new Date(parent2.getTime());
        } else if (useBuffer && Buffer.isBuffer(parent2)) {
          if (Buffer.allocUnsafe) {
            child = Buffer.allocUnsafe(parent2.length);
          } else {
            child = new Buffer(parent2.length);
          }
          parent2.copy(child);
          return child;
        } else if (_instanceof(parent2, Error)) {
          child = Object.create(parent2);
        } else {
          if (typeof prototype == "undefined") {
            proto = Object.getPrototypeOf(parent2);
            child = Object.create(proto);
          } else {
            child = Object.create(prototype);
            proto = prototype;
          }
        }
        if (circular) {
          var index = allParents.indexOf(parent2);
          if (index != -1) {
            return allChildren[index];
          }
          allParents.push(parent2);
          allChildren.push(child);
        }
        if (_instanceof(parent2, nativeMap)) {
          parent2.forEach(function(value15, key) {
            var keyChild = _clone(key, depth2 - 1);
            var valueChild = _clone(value15, depth2 - 1);
            child.set(keyChild, valueChild);
          });
        }
        if (_instanceof(parent2, nativeSet)) {
          parent2.forEach(function(value15) {
            var entryChild = _clone(value15, depth2 - 1);
            child.add(entryChild);
          });
        }
        for (var i3 in parent2) {
          var attrs;
          if (proto) {
            attrs = Object.getOwnPropertyDescriptor(proto, i3);
          }
          if (attrs && attrs.set == null) {
            continue;
          }
          child[i3] = _clone(parent2[i3], depth2 - 1);
        }
        if (Object.getOwnPropertySymbols) {
          var symbols70 = Object.getOwnPropertySymbols(parent2);
          for (var i3 = 0;i3 < symbols70.length; i3++) {
            var symbol5 = symbols70[i3];
            var descriptor = Object.getOwnPropertyDescriptor(parent2, symbol5);
            if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
              continue;
            }
            child[symbol5] = _clone(parent2[symbol5], depth2 - 1);
            if (!descriptor.enumerable) {
              Object.defineProperty(child, symbol5, {
                enumerable: false
              });
            }
          }
        }
        if (includeNonEnumerable) {
          var allPropertyNames = Object.getOwnPropertyNames(parent2);
          for (var i3 = 0;i3 < allPropertyNames.length; i3++) {
            var propertyName = allPropertyNames[i3];
            var descriptor = Object.getOwnPropertyDescriptor(parent2, propertyName);
            if (descriptor && descriptor.enumerable) {
              continue;
            }
            child[propertyName] = _clone(parent2[propertyName], depth2 - 1);
            Object.defineProperty(child, propertyName, {
              enumerable: false
            });
          }
        }
        return child;
      }
      return _clone(parent, depth);
    }
    clone14.clonePrototype = function clonePrototype(parent) {
      if (parent === null)
        return null;
      var c3 = function() {
      };
      c3.prototype = parent;
      return new c3;
    };
    function __objToStr(o2) {
      return Object.prototype.toString.call(o2);
    }
    clone14.__objToStr = __objToStr;
    function __isDate(o2) {
      return typeof o2 === "object" && __objToStr(o2) === "[object Date]";
    }
    clone14.__isDate = __isDate;
    function __isArray(o2) {
      return typeof o2 === "object" && __objToStr(o2) === "[object Array]";
    }
    clone14.__isArray = __isArray;
    function __isRegExp(o2) {
      return typeof o2 === "object" && __objToStr(o2) === "[object RegExp]";
    }
    clone14.__isRegExp = __isRegExp;
    function __getRegExpFlags(re) {
      var flags = "";
      if (re.global)
        flags += "g";
      if (re.ignoreCase)
        flags += "i";
      if (re.multiline)
        flags += "m";
      return flags;
    }
    clone14.__getRegExpFlags = __getRegExpFlags;
    return clone14;
  }();
  if (typeof module === "object" && module.exports) {
    module.exports = clone13;
  }
});

// node_modules/node-cache/lib/node_cache.js
var require_node_cache = __commonJS((exports, module) => {
  (function() {
    var EventEmitter, NodeCache, clone13, splice = [].splice, boundMethodCheck = function(instance, Constructor2) {
      if (!(instance instanceof Constructor2)) {
        throw new Error("Bound instance method accessed before binding");
      }
    }, indexOf = [].indexOf;
    clone13 = require_clone();
    EventEmitter = import.meta.require("events").EventEmitter;
    module.exports = NodeCache = function() {

      class NodeCache2 extends EventEmitter {
        constructor(options = {}) {
          super();
          this.get = this.get.bind(this);
          this.mget = this.mget.bind(this);
          this.set = this.set.bind(this);
          this.mset = this.mset.bind(this);
          this.del = this.del.bind(this);
          this.take = this.take.bind(this);
          this.ttl = this.ttl.bind(this);
          this.getTtl = this.getTtl.bind(this);
          this.keys = this.keys.bind(this);
          this.has = this.has.bind(this);
          this.getStats = this.getStats.bind(this);
          this.flushAll = this.flushAll.bind(this);
          this.flushStats = this.flushStats.bind(this);
          this.close = this.close.bind(this);
          this._checkData = this._checkData.bind(this);
          this._check = this._check.bind(this);
          this._isInvalidKey = this._isInvalidKey.bind(this);
          this._wrap = this._wrap.bind(this);
          this._getValLength = this._getValLength.bind(this);
          this._error = this._error.bind(this);
          this._initErrors = this._initErrors.bind(this);
          this.options = options;
          this._initErrors();
          this.data = {};
          this.options = Object.assign({
            forceString: false,
            objectValueSize: 80,
            promiseValueSize: 80,
            arrayValueSize: 40,
            stdTTL: 0,
            checkperiod: 600,
            useClones: true,
            deleteOnExpire: true,
            enableLegacyCallbacks: false,
            maxKeys: -1
          }, this.options);
          if (this.options.enableLegacyCallbacks) {
            console.warn("WARNING! node-cache legacy callback support will drop in v6.x");
            ["get", "mget", "set", "del", "ttl", "getTtl", "keys", "has"].forEach((methodKey) => {
              var oldMethod;
              oldMethod = this[methodKey];
              this[methodKey] = function(...args) {
                var cb, err, ref4, res;
                ref4 = args, [...args] = ref4, [cb] = splice.call(args, -1);
                if (typeof cb === "function") {
                  try {
                    res = oldMethod(...args);
                    cb(null, res);
                  } catch (error1) {
                    err = error1;
                    cb(err);
                  }
                } else {
                  return oldMethod(...args, cb);
                }
              };
            });
          }
          this.stats = {
            hits: 0,
            misses: 0,
            keys: 0,
            ksize: 0,
            vsize: 0
          };
          this.validKeyTypes = ["string", "number"];
          this._checkData();
          return;
        }
        get(key) {
          var _ret, err;
          boundMethodCheck(this, NodeCache2);
          if ((err = this._isInvalidKey(key)) != null) {
            throw err;
          }
          if (this.data[key] != null && this._check(key, this.data[key])) {
            this.stats.hits++;
            _ret = this._unwrap(this.data[key]);
            return _ret;
          } else {
            this.stats.misses++;
            return;
          }
        }
        mget(keys) {
          var _err, err, i3, key, len, oRet;
          boundMethodCheck(this, NodeCache2);
          if (!Array.isArray(keys)) {
            _err = this._error("EKEYSTYPE");
            throw _err;
          }
          oRet = {};
          for (i3 = 0, len = keys.length;i3 < len; i3++) {
            key = keys[i3];
            if ((err = this._isInvalidKey(key)) != null) {
              throw err;
            }
            if (this.data[key] != null && this._check(key, this.data[key])) {
              this.stats.hits++;
              oRet[key] = this._unwrap(this.data[key]);
            } else {
              this.stats.misses++;
            }
          }
          return oRet;
        }
        set(key, value15, ttl) {
          var _err, err, existent;
          boundMethodCheck(this, NodeCache2);
          if (this.options.maxKeys > -1 && this.stats.keys >= this.options.maxKeys) {
            _err = this._error("ECACHEFULL");
            throw _err;
          }
          if (this.options.forceString && false === "string") {
            value15 = JSON.stringify(value15);
          }
          if (ttl == null) {
            ttl = this.options.stdTTL;
          }
          if ((err = this._isInvalidKey(key)) != null) {
            throw err;
          }
          existent = false;
          if (this.data[key]) {
            existent = true;
            this.stats.vsize -= this._getValLength(this._unwrap(this.data[key], false));
          }
          this.data[key] = this._wrap(value15, ttl);
          this.stats.vsize += this._getValLength(value15);
          if (!existent) {
            this.stats.ksize += this._getKeyLength(key);
            this.stats.keys++;
          }
          this.emit("set", key, value15);
          return true;
        }
        mset(keyValueSet) {
          var _err, err, i3, j, key, keyValuePair, len, len1, ttl, val;
          boundMethodCheck(this, NodeCache2);
          if (this.options.maxKeys > -1 && this.stats.keys + keyValueSet.length >= this.options.maxKeys) {
            _err = this._error("ECACHEFULL");
            throw _err;
          }
          for (i3 = 0, len = keyValueSet.length;i3 < len; i3++) {
            keyValuePair = keyValueSet[i3];
            ({ key, val, ttl } = keyValuePair);
            if (ttl && typeof ttl !== "number") {
              _err = this._error("ETTLTYPE");
              throw _err;
            }
            if ((err = this._isInvalidKey(key)) != null) {
              throw err;
            }
          }
          for (j = 0, len1 = keyValueSet.length;j < len1; j++) {
            keyValuePair = keyValueSet[j];
            ({ key, val, ttl } = keyValuePair);
            this.set(key, val, ttl);
          }
          return true;
        }
        del(keys) {
          var delCount, err, i3, key, len, oldVal;
          boundMethodCheck(this, NodeCache2);
          if (!Array.isArray(keys)) {
            keys = [keys];
          }
          delCount = 0;
          for (i3 = 0, len = keys.length;i3 < len; i3++) {
            key = keys[i3];
            if ((err = this._isInvalidKey(key)) != null) {
              throw err;
            }
            if (this.data[key] != null) {
              this.stats.vsize -= this._getValLength(this._unwrap(this.data[key], false));
              this.stats.ksize -= this._getKeyLength(key);
              this.stats.keys--;
              delCount++;
              oldVal = this.data[key];
              delete this.data[key];
              this.emit("del", key, oldVal.v);
            }
          }
          return delCount;
        }
        take(key) {
          var _ret;
          boundMethodCheck(this, NodeCache2);
          _ret = this.get(key);
          if (_ret != null) {
            this.del(key);
          }
          return _ret;
        }
        ttl(key, ttl) {
          var err;
          boundMethodCheck(this, NodeCache2);
          ttl || (ttl = this.options.stdTTL);
          if (!key) {
            return false;
          }
          if ((err = this._isInvalidKey(key)) != null) {
            throw err;
          }
          if (this.data[key] != null && this._check(key, this.data[key])) {
            if (ttl >= 0) {
              this.data[key] = this._wrap(this.data[key].v, ttl, false);
            } else {
              this.del(key);
            }
            return true;
          } else {
            return false;
          }
        }
        getTtl(key) {
          var _ttl, err;
          boundMethodCheck(this, NodeCache2);
          if (!key) {
            return;
          }
          if ((err = this._isInvalidKey(key)) != null) {
            throw err;
          }
          if (this.data[key] != null && this._check(key, this.data[key])) {
            _ttl = this.data[key].t;
            return _ttl;
          } else {
            return;
          }
        }
        keys() {
          var _keys;
          boundMethodCheck(this, NodeCache2);
          _keys = Object.keys(this.data);
          return _keys;
        }
        has(key) {
          var _exists;
          boundMethodCheck(this, NodeCache2);
          _exists = this.data[key] != null && this._check(key, this.data[key]);
          return _exists;
        }
        getStats() {
          boundMethodCheck(this, NodeCache2);
          return this.stats;
        }
        flushAll(_startPeriod = true) {
          boundMethodCheck(this, NodeCache2);
          this.data = {};
          this.stats = {
            hits: 0,
            misses: 0,
            keys: 0,
            ksize: 0,
            vsize: 0
          };
          this._killCheckPeriod();
          this._checkData(_startPeriod);
          this.emit("flush");
        }
        flushStats() {
          boundMethodCheck(this, NodeCache2);
          this.stats = {
            hits: 0,
            misses: 0,
            keys: 0,
            ksize: 0,
            vsize: 0
          };
          this.emit("flush_stats");
        }
        close() {
          boundMethodCheck(this, NodeCache2);
          this._killCheckPeriod();
        }
        _checkData(startPeriod = true) {
          var key, ref4, value15;
          boundMethodCheck(this, NodeCache2);
          ref4 = this.data;
          for (key in ref4) {
            value15 = ref4[key];
            this._check(key, value15);
          }
          if (startPeriod && this.options.checkperiod > 0) {
            this.checkTimeout = setTimeout(this._checkData, this.options.checkperiod * 1000, startPeriod);
            if (this.checkTimeout != null && this.checkTimeout.unref != null) {
              this.checkTimeout.unref();
            }
          }
        }
        _killCheckPeriod() {
          if (this.checkTimeout != null) {
            return clearTimeout(this.checkTimeout);
          }
        }
        _check(key, data) {
          var _retval;
          boundMethodCheck(this, NodeCache2);
          _retval = true;
          if (data.t !== 0 && data.t < Date.now()) {
            if (this.options.deleteOnExpire) {
              _retval = false;
              this.del(key);
            }
            this.emit("expired", key, this._unwrap(data));
          }
          return _retval;
        }
        _isInvalidKey(key) {
          var ref4;
          boundMethodCheck(this, NodeCache2);
          if (ref4 = typeof key, indexOf.call(this.validKeyTypes, ref4) < 0) {
            return this._error("EKEYTYPE", {
              type: typeof key
            });
          }
        }
        _wrap(value15, ttl, asClone = true) {
          var livetime, now, oReturn, ttlMultiplicator;
          boundMethodCheck(this, NodeCache2);
          if (!this.options.useClones) {
            asClone = false;
          }
          now = Date.now();
          livetime = 0;
          ttlMultiplicator = 1000;
          if (ttl === 0) {
            livetime = 0;
          } else if (ttl) {
            livetime = now + ttl * ttlMultiplicator;
          } else {
            if (this.options.stdTTL === 0) {
              livetime = this.options.stdTTL;
            } else {
              livetime = now + this.options.stdTTL * ttlMultiplicator;
            }
          }
          return oReturn = {
            t: livetime,
            v: asClone ? clone13(value15) : value15
          };
        }
        _unwrap(value15, asClone = true) {
          if (!this.options.useClones) {
            asClone = false;
          }
          if (value15.v != null) {
            if (asClone) {
              return clone13(value15.v);
            } else {
              return value15.v;
            }
          }
          return null;
        }
        _getKeyLength(key) {
          return key.toString().length;
        }
        _getValLength(value15) {
          boundMethodCheck(this, NodeCache2);
          if (typeof value15 === "string") {
            return value15.length;
          } else if (this.options.forceString) {
            return JSON.stringify(value15).length;
          } else if (Array.isArray(value15)) {
            return this.options.arrayValueSize * value15.length;
          } else if (typeof value15 === "number") {
            return 8;
          } else if (typeof (value15 != null ? value15.then : undefined) === "function") {
            return this.options.promiseValueSize;
          } else if (typeof Buffer !== "undefined" && Buffer !== null ? Buffer.isBuffer(value15) : undefined) {
            return value15.length;
          } else if (value15 != null && typeof value15 === "object") {
            return this.options.objectValueSize * Object.keys(value15).length;
          } else if (typeof value15 === "boolean") {
            return 8;
          } else {
            return 0;
          }
        }
        _error(type47, data = {}) {
          var error22;
          boundMethodCheck(this, NodeCache2);
          error22 = new Error;
          error22.name = type47;
          error22.errorcode = type47;
          error22.message = this.ERRORS[type47] != null ? this.ERRORS[type47](data) : "-";
          error22.data = data;
          return error22;
        }
        _initErrors() {
          var _errMsg, _errT, ref4;
          boundMethodCheck(this, NodeCache2);
          this.ERRORS = {};
          ref4 = this._ERRORS;
          for (_errT in ref4) {
            _errMsg = ref4[_errT];
            this.ERRORS[_errT] = this.createErrorMessage(_errMsg);
          }
        }
        createErrorMessage(errMsg) {
          return function(args) {
            return errMsg.replace("__key", args.type);
          };
        }
      }
      NodeCache2.prototype._ERRORS = {
        ENOTFOUND: "Key `__key` not found",
        ECACHEFULL: "Cache max keys amount exceeded",
        EKEYTYPE: "The key argument has to be of type `string` or `number`. Found: `__key`",
        EKEYSTYPE: "The keys argument has to be an array.",
        ETTLTYPE: "The ttl argument has to be a number."
      };
      return NodeCache2;
    }.call(this);
  }).call(exports);
});

// node_modules/node-cache/index.js
var require_node_cache2 = __commonJS((exports, module) => {
  (function() {
    var exports2;
    exports2 = module.exports = require_node_cache();
    exports2.version = "5.1.2";
  }).call(exports);
});

// node_modules/crypto-js/core.js
var require_core = __commonJS((exports, module) => {
  (function(root, factory) {
    if (typeof exports === "object") {
      module.exports = exports = factory();
    } else if (typeof define === "function" && define.amd) {
      define([], factory);
    } else {
      root.CryptoJS = factory();
    }
  })(exports, function() {
    var CryptoJS = CryptoJS || function(Math2, undefined6) {
      var crypto2;
      if (typeof window !== "undefined" && window.crypto) {
        crypto2 = window.crypto;
      }
      if (typeof self !== "undefined" && self.crypto) {
        crypto2 = self.crypto;
      }
      if (typeof globalThis !== "undefined" && globalThis.crypto) {
        crypto2 = globalThis.crypto;
      }
      if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
        crypto2 = window.msCrypto;
      }
      if (!crypto2 && typeof global !== "undefined" && global.crypto) {
        crypto2 = global.crypto;
      }
      if (!crypto2 && true) {
        try {
          crypto2 = import.meta.require("crypto");
        } catch (err) {
        }
      }
      var cryptoSecureRandomInt = function() {
        if (crypto2) {
          if (typeof crypto2.getRandomValues === "function") {
            try {
              return crypto2.getRandomValues(new Uint32Array(1))[0];
            } catch (err) {
            }
          }
          if (typeof crypto2.randomBytes === "function") {
            try {
              return crypto2.randomBytes(4).readInt32LE();
            } catch (err) {
            }
          }
        }
        throw new Error("Native crypto module could not be used to get secure random number.");
      };
      var create5 = Object.create || function() {
        function F() {
        }
        return function(obj) {
          var subtype;
          F.prototype = obj;
          subtype = new F;
          F.prototype = null;
          return subtype;
        };
      }();
      var C = {};
      var C_lib = C.lib = {};
      var Base = C_lib.Base = function() {
        return {
          extend: function(overrides) {
            var subtype = create5(this);
            if (overrides) {
              subtype.mixIn(overrides);
            }
            if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
              subtype.init = function() {
                subtype.$super.init.apply(this, arguments);
              };
            }
            subtype.init.prototype = subtype;
            subtype.$super = this;
            return subtype;
          },
          create: function() {
            var instance = this.extend();
            instance.init.apply(instance, arguments);
            return instance;
          },
          init: function() {
          },
          mixIn: function(properties) {
            for (var propertyName in properties) {
              if (properties.hasOwnProperty(propertyName)) {
                this[propertyName] = properties[propertyName];
              }
            }
            if (properties.hasOwnProperty("toString")) {
              this.toString = properties.toString;
            }
          },
          clone: function() {
            return this.init.prototype.extend(this);
          }
        };
      }();
      var WordArray = C_lib.WordArray = Base.extend({
        init: function(words, sigBytes) {
          words = this.words = words || [];
          if (sigBytes != undefined6) {
            this.sigBytes = sigBytes;
          } else {
            this.sigBytes = words.length * 4;
          }
        },
        toString: function(encoder) {
          return (encoder || Hex).stringify(this);
        },
        concat: function(wordArray) {
          var thisWords = this.words;
          var thatWords = wordArray.words;
          var thisSigBytes = this.sigBytes;
          var thatSigBytes = wordArray.sigBytes;
          this.clamp();
          if (thisSigBytes % 4) {
            for (var i3 = 0;i3 < thatSigBytes; i3++) {
              var thatByte = thatWords[i3 >>> 2] >>> 24 - i3 % 4 * 8 & 255;
              thisWords[thisSigBytes + i3 >>> 2] |= thatByte << 24 - (thisSigBytes + i3) % 4 * 8;
            }
          } else {
            for (var j = 0;j < thatSigBytes; j += 4) {
              thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
            }
          }
          this.sigBytes += thatSigBytes;
          return this;
        },
        clamp: function() {
          var words = this.words;
          var sigBytes = this.sigBytes;
          words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
          words.length = Math2.ceil(sigBytes / 4);
        },
        clone: function() {
          var clone13 = Base.clone.call(this);
          clone13.words = this.words.slice(0);
          return clone13;
        },
        random: function(nBytes) {
          var words = [];
          for (var i3 = 0;i3 < nBytes; i3 += 4) {
            words.push(cryptoSecureRandomInt());
          }
          return new WordArray.init(words, nBytes);
        }
      });
      var C_enc = C.enc = {};
      var Hex = C_enc.Hex = {
        stringify: function(wordArray) {
          var words = wordArray.words;
          var sigBytes = wordArray.sigBytes;
          var hexChars = [];
          for (var i3 = 0;i3 < sigBytes; i3++) {
            var bite = words[i3 >>> 2] >>> 24 - i3 % 4 * 8 & 255;
            hexChars.push((bite >>> 4).toString(16));
            hexChars.push((bite & 15).toString(16));
          }
          return hexChars.join("");
        },
        parse: function(hexStr) {
          var hexStrLength = hexStr.length;
          var words = [];
          for (var i3 = 0;i3 < hexStrLength; i3 += 2) {
            words[i3 >>> 3] |= parseInt(hexStr.substr(i3, 2), 16) << 24 - i3 % 8 * 4;
          }
          return new WordArray.init(words, hexStrLength / 2);
        }
      };
      var Latin1 = C_enc.Latin1 = {
        stringify: function(wordArray) {
          var words = wordArray.words;
          var sigBytes = wordArray.sigBytes;
          var latin1Chars = [];
          for (var i3 = 0;i3 < sigBytes; i3++) {
            var bite = words[i3 >>> 2] >>> 24 - i3 % 4 * 8 & 255;
            latin1Chars.push(String.fromCharCode(bite));
          }
          return latin1Chars.join("");
        },
        parse: function(latin1Str) {
          var latin1StrLength = latin1Str.length;
          var words = [];
          for (var i3 = 0;i3 < latin1StrLength; i3++) {
            words[i3 >>> 2] |= (latin1Str.charCodeAt(i3) & 255) << 24 - i3 % 4 * 8;
          }
          return new WordArray.init(words, latin1StrLength);
        }
      };
      var Utf8 = C_enc.Utf8 = {
        stringify: function(wordArray) {
          try {
            return decodeURIComponent(escape(Latin1.stringify(wordArray)));
          } catch (e) {
            throw new Error("Malformed UTF-8 data");
          }
        },
        parse: function(utf8Str) {
          return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
        }
      };
      var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
        reset: function() {
          this._data = new WordArray.init;
          this._nDataBytes = 0;
        },
        _append: function(data) {
          if (typeof data == "string") {
            data = Utf8.parse(data);
          }
          this._data.concat(data);
          this._nDataBytes += data.sigBytes;
        },
        _process: function(doFlush) {
          var processedWords;
          var data = this._data;
          var dataWords = data.words;
          var dataSigBytes = data.sigBytes;
          var blockSize = this.blockSize;
          var blockSizeBytes = blockSize * 4;
          var nBlocksReady = dataSigBytes / blockSizeBytes;
          if (doFlush) {
            nBlocksReady = Math2.ceil(nBlocksReady);
          } else {
            nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
          }
          var nWordsReady = nBlocksReady * blockSize;
          var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
          if (nWordsReady) {
            for (var offset = 0;offset < nWordsReady; offset += blockSize) {
              this._doProcessBlock(dataWords, offset);
            }
            processedWords = dataWords.splice(0, nWordsReady);
            data.sigBytes -= nBytesReady;
          }
          return new WordArray.init(processedWords, nBytesReady);
        },
        clone: function() {
          var clone13 = Base.clone.call(this);
          clone13._data = this._data.clone();
          return clone13;
        },
        _minBufferSize: 0
      });
      var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
        cfg: Base.extend(),
        init: function(cfg) {
          this.cfg = this.cfg.extend(cfg);
          this.reset();
        },
        reset: function() {
          BufferedBlockAlgorithm.reset.call(this);
          this._doReset();
        },
        update: function(messageUpdate) {
          this._append(messageUpdate);
          this._process();
          return this;
        },
        finalize: function(messageUpdate) {
          if (messageUpdate) {
            this._append(messageUpdate);
          }
          var hash7 = this._doFinalize();
          return hash7;
        },
        blockSize: 512 / 32,
        _createHelper: function(hasher) {
          return function(message, cfg) {
            return new hasher.init(cfg).finalize(message);
          };
        },
        _createHmacHelper: function(hasher) {
          return function(message, key) {
            return new C_algo.HMAC.init(hasher, key).finalize(message);
          };
        }
      });
      var C_algo = C.algo = {};
      return C;
    }(Math);
    return CryptoJS;
  });
});

// node_modules/crypto-js/x64-core.js
var require_x64_core = __commonJS((exports, module) => {
  (function(root, factory) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function(undefined6) {
      var C = CryptoJS;
      var C_lib = C.lib;
      var Base = C_lib.Base;
      var X32WordArray = C_lib.WordArray;
      var C_x64 = C.x64 = {};
      var X64Word = C_x64.Word = Base.extend({
        init: function(high, low) {
          this.high = high;
          this.low = low;
        }
      });
      var X64WordArray = C_x64.WordArray = Base.extend({
        init: function(words, sigBytes) {
          words = this.words = words || [];
          if (sigBytes != undefined6) {
            this.sigBytes = sigBytes;
          } else {
            this.sigBytes = words.length * 8;
          }
        },
        toX32: function() {
          var x64Words = this.words;
          var x64WordsLength = x64Words.length;
          var x32Words = [];
          for (var i3 = 0;i3 < x64WordsLength; i3++) {
            var x64Word = x64Words[i3];
            x32Words.push(x64Word.high);
            x32Words.push(x64Word.low);
          }
          return X32WordArray.create(x32Words, this.sigBytes);
        },
        clone: function() {
          var clone13 = Base.clone.call(this);
          var words = clone13.words = this.words.slice(0);
          var wordsLength = words.length;
          for (var i3 = 0;i3 < wordsLength; i3++) {
            words[i3] = words[i3].clone();
          }
          return clone13;
        }
      });
    })();
    return CryptoJS;
  });
});

// node_modules/crypto-js/lib-typedarrays.js
var require_lib_typedarrays = __commonJS((exports, module) => {
  (function(root, factory) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      if (typeof ArrayBuffer != "function") {
        return;
      }
      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var superInit = WordArray.init;
      var subInit = WordArray.init = function(typedArray) {
        if (typedArray instanceof ArrayBuffer) {
          typedArray = new Uint8Array(typedArray);
        }
        if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
          typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
        }
        if (typedArray instanceof Uint8Array) {
          var typedArrayByteLength = typedArray.byteLength;
          var words = [];
          for (var i3 = 0;i3 < typedArrayByteLength; i3++) {
            words[i3 >>> 2] |= typedArray[i3] << 24 - i3 % 4 * 8;
          }
          superInit.call(this, words, typedArrayByteLength);
        } else {
          superInit.apply(this, arguments);
        }
      };
      subInit.prototype = WordArray;
    })();
    return CryptoJS.lib.WordArray;
  });
});

// node_modules/crypto-js/enc-utf16.js
var require_enc_utf16 = __commonJS((exports, module) => {
  (function(root, factory) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var C_enc = C.enc;
      var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
        stringify: function(wordArray) {
          var words = wordArray.words;
          var sigBytes = wordArray.sigBytes;
          var utf16Chars = [];
          for (var i3 = 0;i3 < sigBytes; i3 += 2) {
            var codePoint = words[i3 >>> 2] >>> 16 - i3 % 4 * 8 & 65535;
            utf16Chars.push(String.fromCharCode(codePoint));
          }
          return utf16Chars.join("");
        },
        parse: function(utf16Str) {
          var utf16StrLength = utf16Str.length;
          var words = [];
          for (var i3 = 0;i3 < utf16StrLength; i3++) {
            words[i3 >>> 1] |= utf16Str.charCodeAt(i3) << 16 - i3 % 2 * 16;
          }
          return WordArray.create(words, utf16StrLength * 2);
        }
      };
      C_enc.Utf16LE = {
        stringify: function(wordArray) {
          var words = wordArray.words;
          var sigBytes = wordArray.sigBytes;
          var utf16Chars = [];
          for (var i3 = 0;i3 < sigBytes; i3 += 2) {
            var codePoint = swapEndian(words[i3 >>> 2] >>> 16 - i3 % 4 * 8 & 65535);
            utf16Chars.push(String.fromCharCode(codePoint));
          }
          return utf16Chars.join("");
        },
        parse: function(utf16Str) {
          var utf16StrLength = utf16Str.length;
          var words = [];
          for (var i3 = 0;i3 < utf16StrLength; i3++) {
            words[i3 >>> 1] |= swapEndian(utf16Str.charCodeAt(i3) << 16 - i3 % 2 * 16);
          }
          return WordArray.create(words, utf16StrLength * 2);
        }
      };
      function swapEndian(word) {
        return word << 8 & 4278255360 | word >>> 8 & 16711935;
      }
    })();
    return CryptoJS.enc.Utf16;
  });
});

// node_modules/crypto-js/enc-base64.js
var require_enc_base64 = __commonJS((exports, module) => {
  (function(root, factory) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var C_enc = C.enc;
      var Base64 = C_enc.Base64 = {
        stringify: function(wordArray) {
          var words = wordArray.words;
          var sigBytes = wordArray.sigBytes;
          var map3 = this._map;
          wordArray.clamp();
          var base64Chars = [];
          for (var i3 = 0;i3 < sigBytes; i3 += 3) {
            var byte1 = words[i3 >>> 2] >>> 24 - i3 % 4 * 8 & 255;
            var byte2 = words[i3 + 1 >>> 2] >>> 24 - (i3 + 1) % 4 * 8 & 255;
            var byte3 = words[i3 + 2 >>> 2] >>> 24 - (i3 + 2) % 4 * 8 & 255;
            var triplet = byte1 << 16 | byte2 << 8 | byte3;
            for (var j = 0;j < 4 && i3 + j * 0.75 < sigBytes; j++) {
              base64Chars.push(map3.charAt(triplet >>> 6 * (3 - j) & 63));
            }
          }
          var paddingChar = map3.charAt(64);
          if (paddingChar) {
            while (base64Chars.length % 4) {
              base64Chars.push(paddingChar);
            }
          }
          return base64Chars.join("");
        },
        parse: function(base64Str) {
          var base64StrLength = base64Str.length;
          var map3 = this._map;
          var reverseMap = this._reverseMap;
          if (!reverseMap) {
            reverseMap = this._reverseMap = [];
            for (var j = 0;j < map3.length; j++) {
              reverseMap[map3.charCodeAt(j)] = j;
            }
          }
          var paddingChar = map3.charAt(64);
          if (paddingChar) {
            var paddingIndex = base64Str.indexOf(paddingChar);
            if (paddingIndex !== -1) {
              base64StrLength = paddingIndex;
            }
          }
          return parseLoop(base64Str, base64StrLength, reverseMap);
        },
        _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
      };
      function parseLoop(base64Str, base64StrLength, reverseMap) {
        var words = [];
        var nBytes = 0;
        for (var i3 = 0;i3 < base64StrLength; i3++) {
          if (i3 % 4) {
            var bits1 = reverseMap[base64Str.charCodeAt(i3 - 1)] << i3 % 4 * 2;
            var bits2 = reverseMap[base64Str.charCodeAt(i3)] >>> 6 - i3 % 4 * 2;
            var bitsCombined = bits1 | bits2;
            words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
            nBytes++;
          }
        }
        return WordArray.create(words, nBytes);
      }
    })();
    return CryptoJS.enc.Base64;
  });
});

// node_modules/crypto-js/enc-base64url.js
var require_enc_base64url = __commonJS((exports, module) => {
  (function(root, factory) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var C_enc = C.enc;
      var Base64url = C_enc.Base64url = {
        stringify: function(wordArray, urlSafe) {
          if (urlSafe === undefined) {
            urlSafe = true;
          }
          var words = wordArray.words;
          var sigBytes = wordArray.sigBytes;
          var map3 = urlSafe ? this._safe_map : this._map;
          wordArray.clamp();
          var base64Chars = [];
          for (var i3 = 0;i3 < sigBytes; i3 += 3) {
            var byte1 = words[i3 >>> 2] >>> 24 - i3 % 4 * 8 & 255;
            var byte2 = words[i3 + 1 >>> 2] >>> 24 - (i3 + 1) % 4 * 8 & 255;
            var byte3 = words[i3 + 2 >>> 2] >>> 24 - (i3 + 2) % 4 * 8 & 255;
            var triplet = byte1 << 16 | byte2 << 8 | byte3;
            for (var j = 0;j < 4 && i3 + j * 0.75 < sigBytes; j++) {
              base64Chars.push(map3.charAt(triplet >>> 6 * (3 - j) & 63));
            }
          }
          var paddingChar = map3.charAt(64);
          if (paddingChar) {
            while (base64Chars.length % 4) {
              base64Chars.push(paddingChar);
            }
          }
          return base64Chars.join("");
        },
        parse: function(base64Str, urlSafe) {
          if (urlSafe === undefined) {
            urlSafe = true;
          }
          var base64StrLength = base64Str.length;
          var map3 = urlSafe ? this._safe_map : this._map;
          var reverseMap = this._reverseMap;
          if (!reverseMap) {
            reverseMap = this._reverseMap = [];
            for (var j = 0;j < map3.length; j++) {
              reverseMap[map3.charCodeAt(j)] = j;
            }
          }
          var paddingChar = map3.charAt(64);
          if (paddingChar) {
            var paddingIndex = base64Str.indexOf(paddingChar);
            if (paddingIndex !== -1) {
              base64StrLength = paddingIndex;
            }
          }
          return parseLoop(base64Str, base64StrLength, reverseMap);
        },
        _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
        _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
      };
      function parseLoop(base64Str, base64StrLength, reverseMap) {
        var words = [];
        var nBytes = 0;
        for (var i3 = 0;i3 < base64StrLength; i3++) {
          if (i3 % 4) {
            var bits1 = reverseMap[base64Str.charCodeAt(i3 - 1)] << i3 % 4 * 2;
            var bits2 = reverseMap[base64Str.charCodeAt(i3)] >>> 6 - i3 % 4 * 2;
            var bitsCombined = bits1 | bits2;
            words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
            nBytes++;
          }
        }
        return WordArray.create(words, nBytes);
      }
    })();
    return CryptoJS.enc.Base64url;
  });
});

// node_modules/crypto-js/md5.js
var require_md5 = __commonJS((exports, module) => {
  (function(root, factory) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function(Math2) {
      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_algo = C.algo;
      var T3 = [];
      (function() {
        for (var i3 = 0;i3 < 64; i3++) {
          T3[i3] = Math2.abs(Math2.sin(i3 + 1)) * 4294967296 | 0;
        }
      })();
      var MD5 = C_algo.MD5 = Hasher.extend({
        _doReset: function() {
          this._hash = new WordArray.init([
            1732584193,
            4023233417,
            2562383102,
            271733878
          ]);
        },
        _doProcessBlock: function(M, offset) {
          for (var i3 = 0;i3 < 16; i3++) {
            var offset_i = offset + i3;
            var M_offset_i = M[offset_i];
            M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
          }
          var H = this._hash.words;
          var M_offset_0 = M[offset + 0];
          var M_offset_1 = M[offset + 1];
          var M_offset_2 = M[offset + 2];
          var M_offset_3 = M[offset + 3];
          var M_offset_4 = M[offset + 4];
          var M_offset_5 = M[offset + 5];
          var M_offset_6 = M[offset + 6];
          var M_offset_7 = M[offset + 7];
          var M_offset_8 = M[offset + 8];
          var M_offset_9 = M[offset + 9];
          var M_offset_10 = M[offset + 10];
          var M_offset_11 = M[offset + 11];
          var M_offset_12 = M[offset + 12];
          var M_offset_13 = M[offset + 13];
          var M_offset_14 = M[offset + 14];
          var M_offset_15 = M[offset + 15];
          var a = H[0];
          var b = H[1];
          var c3 = H[2];
          var d3 = H[3];
          a = FF(a, b, c3, d3, M_offset_0, 7, T3[0]);
          d3 = FF(d3, a, b, c3, M_offset_1, 12, T3[1]);
          c3 = FF(c3, d3, a, b, M_offset_2, 17, T3[2]);
          b = FF(b, c3, d3, a, M_offset_3, 22, T3[3]);
          a = FF(a, b, c3, d3, M_offset_4, 7, T3[4]);
          d3 = FF(d3, a, b, c3, M_offset_5, 12, T3[5]);
          c3 = FF(c3, d3, a, b, M_offset_6, 17, T3[6]);
          b = FF(b, c3, d3, a, M_offset_7, 22, T3[7]);
          a = FF(a, b, c3, d3, M_offset_8, 7, T3[8]);
          d3 = FF(d3, a, b, c3, M_offset_9, 12, T3[9]);
          c3 = FF(c3, d3, a, b, M_offset_10, 17, T3[10]);
          b = FF(b, c3, d3, a, M_offset_11, 22, T3[11]);
          a = FF(a, b, c3, d3, M_offset_12, 7, T3[12]);
          d3 = FF(d3, a, b, c3, M_offset_13, 12, T3[13]);
          c3 = FF(c3, d3, a, b, M_offset_14, 17, T3[14]);
          b = FF(b, c3, d3, a, M_offset_15, 22, T3[15]);
          a = GG(a, b, c3, d3, M_offset_1, 5, T3[16]);
          d3 = GG(d3, a, b, c3, M_offset_6, 9, T3[17]);
          c3 = GG(c3, d3, a, b, M_offset_11, 14, T3[18]);
          b = GG(b, c3, d3, a, M_offset_0, 20, T3[19]);
          a = GG(a, b, c3, d3, M_offset_5, 5, T3[20]);
          d3 = GG(d3, a, b, c3, M_offset_10, 9, T3[21]);
          c3 = GG(c3, d3, a, b, M_offset_15, 14, T3[22]);
          b = GG(b, c3, d3, a, M_offset_4, 20, T3[23]);
          a = GG(a, b, c3, d3, M_offset_9, 5, T3[24]);
          d3 = GG(d3, a, b, c3, M_offset_14, 9, T3[25]);
          c3 = GG(c3, d3, a, b, M_offset_3, 14, T3[26]);
          b = GG(b, c3, d3, a, M_offset_8, 20, T3[27]);
          a = GG(a, b, c3, d3, M_offset_13, 5, T3[28]);
          d3 = GG(d3, a, b, c3, M_offset_2, 9, T3[29]);
          c3 = GG(c3, d3, a, b, M_offset_7, 14, T3[30]);
          b = GG(b, c3, d3, a, M_offset_12, 20, T3[31]);
          a = HH(a, b, c3, d3, M_offset_5, 4, T3[32]);
          d3 = HH(d3, a, b, c3, M_offset_8, 11, T3[33]);
          c3 = HH(c3, d3, a, b, M_offset_11, 16, T3[34]);
          b = HH(b, c3, d3, a, M_offset_14, 23, T3[35]);
          a = HH(a, b, c3, d3, M_offset_1, 4, T3[36]);
          d3 = HH(d3, a, b, c3, M_offset_4, 11, T3[37]);
          c3 = HH(c3, d3, a, b, M_offset_7, 16, T3[38]);
          b = HH(b, c3, d3, a, M_offset_10, 23, T3[39]);
          a = HH(a, b, c3, d3, M_offset_13, 4, T3[40]);
          d3 = HH(d3, a, b, c3, M_offset_0, 11, T3[41]);
          c3 = HH(c3, d3, a, b, M_offset_3, 16, T3[42]);
          b = HH(b, c3, d3, a, M_offset_6, 23, T3[43]);
          a = HH(a, b, c3, d3, M_offset_9, 4, T3[44]);
          d3 = HH(d3, a, b, c3, M_offset_12, 11, T3[45]);
          c3 = HH(c3, d3, a, b, M_offset_15, 16, T3[46]);
          b = HH(b, c3, d3, a, M_offset_2, 23, T3[47]);
          a = II(a, b, c3, d3, M_offset_0, 6, T3[48]);
          d3 = II(d3, a, b, c3, M_offset_7, 10, T3[49]);
          c3 = II(c3, d3, a, b, M_offset_14, 15, T3[50]);
          b = II(b, c3, d3, a, M_offset_5, 21, T3[51]);
          a = II(a, b, c3, d3, M_offset_12, 6, T3[52]);
          d3 = II(d3, a, b, c3, M_offset_3, 10, T3[53]);
          c3 = II(c3, d3, a, b, M_offset_10, 15, T3[54]);
          b = II(b, c3, d3, a, M_offset_1, 21, T3[55]);
          a = II(a, b, c3, d3, M_offset_8, 6, T3[56]);
          d3 = II(d3, a, b, c3, M_offset_15, 10, T3[57]);
          c3 = II(c3, d3, a, b, M_offset_6, 15, T3[58]);
          b = II(b, c3, d3, a, M_offset_13, 21, T3[59]);
          a = II(a, b, c3, d3, M_offset_4, 6, T3[60]);
          d3 = II(d3, a, b, c3, M_offset_11, 10, T3[61]);
          c3 = II(c3, d3, a, b, M_offset_2, 15, T3[62]);
          b = II(b, c3, d3, a, M_offset_9, 21, T3[63]);
          H[0] = H[0] + a | 0;
          H[1] = H[1] + b | 0;
          H[2] = H[2] + c3 | 0;
          H[3] = H[3] + d3 | 0;
        },
        _doFinalize: function() {
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8;
          dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
          var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
          var nBitsTotalL = nBitsTotal;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
          data.sigBytes = (dataWords.length + 1) * 4;
          this._process();
          var hash7 = this._hash;
          var H = hash7.words;
          for (var i3 = 0;i3 < 4; i3++) {
            var H_i = H[i3];
            H[i3] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
          }
          return hash7;
        },
        clone: function() {
          var clone13 = Hasher.clone.call(this);
          clone13._hash = this._hash.clone();
          return clone13;
        }
      });
      function FF(a, b, c3, d3, x3, s3, t3) {
        var n3 = a + (b & c3 | ~b & d3) + x3 + t3;
        return (n3 << s3 | n3 >>> 32 - s3) + b;
      }
      function GG(a, b, c3, d3, x3, s3, t3) {
        var n3 = a + (b & d3 | c3 & ~d3) + x3 + t3;
        return (n3 << s3 | n3 >>> 32 - s3) + b;
      }
      function HH(a, b, c3, d3, x3, s3, t3) {
        var n3 = a + (b ^ c3 ^ d3) + x3 + t3;
        return (n3 << s3 | n3 >>> 32 - s3) + b;
      }
      function II(a, b, c3, d3, x3, s3, t3) {
        var n3 = a + (c3 ^ (b | ~d3)) + x3 + t3;
        return (n3 << s3 | n3 >>> 32 - s3) + b;
      }
      C.MD5 = Hasher._createHelper(MD5);
      C.HmacMD5 = Hasher._createHmacHelper(MD5);
    })(Math);
    return CryptoJS.MD5;
  });
});

// node_modules/crypto-js/sha1.js
var require_sha1 = __commonJS((exports, module) => {
  (function(root, factory) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_algo = C.algo;
      var W = [];
      var SHA1 = C_algo.SHA1 = Hasher.extend({
        _doReset: function() {
          this._hash = new WordArray.init([
            1732584193,
            4023233417,
            2562383102,
            271733878,
            3285377520
          ]);
        },
        _doProcessBlock: function(M, offset) {
          var H = this._hash.words;
          var a = H[0];
          var b = H[1];
          var c3 = H[2];
          var d3 = H[3];
          var e = H[4];
          for (var i3 = 0;i3 < 80; i3++) {
            if (i3 < 16) {
              W[i3] = M[offset + i3] | 0;
            } else {
              var n3 = W[i3 - 3] ^ W[i3 - 8] ^ W[i3 - 14] ^ W[i3 - 16];
              W[i3] = n3 << 1 | n3 >>> 31;
            }
            var t3 = (a << 5 | a >>> 27) + e + W[i3];
            if (i3 < 20) {
              t3 += (b & c3 | ~b & d3) + 1518500249;
            } else if (i3 < 40) {
              t3 += (b ^ c3 ^ d3) + 1859775393;
            } else if (i3 < 60) {
              t3 += (b & c3 | b & d3 | c3 & d3) - 1894007588;
            } else {
              t3 += (b ^ c3 ^ d3) - 899497514;
            }
            e = d3;
            d3 = c3;
            c3 = b << 30 | b >>> 2;
            b = a;
            a = t3;
          }
          H[0] = H[0] + a | 0;
          H[1] = H[1] + b | 0;
          H[2] = H[2] + c3 | 0;
          H[3] = H[3] + d3 | 0;
          H[4] = H[4] + e | 0;
        },
        _doFinalize: function() {
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8;
          dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
          data.sigBytes = dataWords.length * 4;
          this._process();
          return this._hash;
        },
        clone: function() {
          var clone13 = Hasher.clone.call(this);
          clone13._hash = this._hash.clone();
          return clone13;
        }
      });
      C.SHA1 = Hasher._createHelper(SHA1);
      C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
    })();
    return CryptoJS.SHA1;
  });
});

// node_modules/crypto-js/sha256.js
var require_sha256 = __commonJS((exports, module) => {
  (function(root, factory) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function(Math2) {
      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_algo = C.algo;
      var H = [];
      var K = [];
      (function() {
        function isPrime(n4) {
          var sqrtN = Math2.sqrt(n4);
          for (var factor = 2;factor <= sqrtN; factor++) {
            if (!(n4 % factor)) {
              return false;
            }
          }
          return true;
        }
        function getFractionalBits(n4) {
          return (n4 - (n4 | 0)) * 4294967296 | 0;
        }
        var n3 = 2;
        var nPrime = 0;
        while (nPrime < 64) {
          if (isPrime(n3)) {
            if (nPrime < 8) {
              H[nPrime] = getFractionalBits(Math2.pow(n3, 1 / 2));
            }
            K[nPrime] = getFractionalBits(Math2.pow(n3, 1 / 3));
            nPrime++;
          }
          n3++;
        }
      })();
      var W = [];
      var SHA256 = C_algo.SHA256 = Hasher.extend({
        _doReset: function() {
          this._hash = new WordArray.init(H.slice(0));
        },
        _doProcessBlock: function(M, offset) {
          var H3 = this._hash.words;
          var a = H3[0];
          var b = H3[1];
          var c3 = H3[2];
          var d3 = H3[3];
          var e = H3[4];
          var f3 = H3[5];
          var g = H3[6];
          var h = H3[7];
          for (var i3 = 0;i3 < 64; i3++) {
            if (i3 < 16) {
              W[i3] = M[offset + i3] | 0;
            } else {
              var gamma0x = W[i3 - 15];
              var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
              var gamma1x = W[i3 - 2];
              var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
              W[i3] = gamma0 + W[i3 - 7] + gamma1 + W[i3 - 16];
            }
            var ch = e & f3 ^ ~e & g;
            var maj = a & b ^ a & c3 ^ b & c3;
            var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
            var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
            var t12 = h + sigma1 + ch + K[i3] + W[i3];
            var t22 = sigma0 + maj;
            h = g;
            g = f3;
            f3 = e;
            e = d3 + t12 | 0;
            d3 = c3;
            c3 = b;
            b = a;
            a = t12 + t22 | 0;
          }
          H3[0] = H3[0] + a | 0;
          H3[1] = H3[1] + b | 0;
          H3[2] = H3[2] + c3 | 0;
          H3[3] = H3[3] + d3 | 0;
          H3[4] = H3[4] + e | 0;
          H3[5] = H3[5] + f3 | 0;
          H3[6] = H3[6] + g | 0;
          H3[7] = H3[7] + h | 0;
        },
        _doFinalize: function() {
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8;
          dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
          data.sigBytes = dataWords.length * 4;
          this._process();
          return this._hash;
        },
        clone: function() {
          var clone13 = Hasher.clone.call(this);
          clone13._hash = this._hash.clone();
          return clone13;
        }
      });
      C.SHA256 = Hasher._createHelper(SHA256);
      C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
    })(Math);
    return CryptoJS.SHA256;
  });
});

// node_modules/crypto-js/sha224.js
var require_sha224 = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_sha256());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./sha256"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var C_algo = C.algo;
      var SHA256 = C_algo.SHA256;
      var SHA224 = C_algo.SHA224 = SHA256.extend({
        _doReset: function() {
          this._hash = new WordArray.init([
            3238371032,
            914150663,
            812702999,
            4144912697,
            4290775857,
            1750603025,
            1694076839,
            3204075428
          ]);
        },
        _doFinalize: function() {
          var hash7 = SHA256._doFinalize.call(this);
          hash7.sigBytes -= 4;
          return hash7;
        }
      });
      C.SHA224 = SHA256._createHelper(SHA224);
      C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
    })();
    return CryptoJS.SHA224;
  });
});

// node_modules/crypto-js/sha512.js
var require_sha512 = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_x64_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./x64-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var Hasher = C_lib.Hasher;
      var C_x64 = C.x64;
      var X64Word = C_x64.Word;
      var X64WordArray = C_x64.WordArray;
      var C_algo = C.algo;
      function X64Word_create() {
        return X64Word.create.apply(X64Word, arguments);
      }
      var K = [
        X64Word_create(1116352408, 3609767458),
        X64Word_create(1899447441, 602891725),
        X64Word_create(3049323471, 3964484399),
        X64Word_create(3921009573, 2173295548),
        X64Word_create(961987163, 4081628472),
        X64Word_create(1508970993, 3053834265),
        X64Word_create(2453635748, 2937671579),
        X64Word_create(2870763221, 3664609560),
        X64Word_create(3624381080, 2734883394),
        X64Word_create(310598401, 1164996542),
        X64Word_create(607225278, 1323610764),
        X64Word_create(1426881987, 3590304994),
        X64Word_create(1925078388, 4068182383),
        X64Word_create(2162078206, 991336113),
        X64Word_create(2614888103, 633803317),
        X64Word_create(3248222580, 3479774868),
        X64Word_create(3835390401, 2666613458),
        X64Word_create(4022224774, 944711139),
        X64Word_create(264347078, 2341262773),
        X64Word_create(604807628, 2007800933),
        X64Word_create(770255983, 1495990901),
        X64Word_create(1249150122, 1856431235),
        X64Word_create(1555081692, 3175218132),
        X64Word_create(1996064986, 2198950837),
        X64Word_create(2554220882, 3999719339),
        X64Word_create(2821834349, 766784016),
        X64Word_create(2952996808, 2566594879),
        X64Word_create(3210313671, 3203337956),
        X64Word_create(3336571891, 1034457026),
        X64Word_create(3584528711, 2466948901),
        X64Word_create(113926993, 3758326383),
        X64Word_create(338241895, 168717936),
        X64Word_create(666307205, 1188179964),
        X64Word_create(773529912, 1546045734),
        X64Word_create(1294757372, 1522805485),
        X64Word_create(1396182291, 2643833823),
        X64Word_create(1695183700, 2343527390),
        X64Word_create(1986661051, 1014477480),
        X64Word_create(2177026350, 1206759142),
        X64Word_create(2456956037, 344077627),
        X64Word_create(2730485921, 1290863460),
        X64Word_create(2820302411, 3158454273),
        X64Word_create(3259730800, 3505952657),
        X64Word_create(3345764771, 106217008),
        X64Word_create(3516065817, 3606008344),
        X64Word_create(3600352804, 1432725776),
        X64Word_create(4094571909, 1467031594),
        X64Word_create(275423344, 851169720),
        X64Word_create(430227734, 3100823752),
        X64Word_create(506948616, 1363258195),
        X64Word_create(659060556, 3750685593),
        X64Word_create(883997877, 3785050280),
        X64Word_create(958139571, 3318307427),
        X64Word_create(1322822218, 3812723403),
        X64Word_create(1537002063, 2003034995),
        X64Word_create(1747873779, 3602036899),
        X64Word_create(1955562222, 1575990012),
        X64Word_create(2024104815, 1125592928),
        X64Word_create(2227730452, 2716904306),
        X64Word_create(2361852424, 442776044),
        X64Word_create(2428436474, 593698344),
        X64Word_create(2756734187, 3733110249),
        X64Word_create(3204031479, 2999351573),
        X64Word_create(3329325298, 3815920427),
        X64Word_create(3391569614, 3928383900),
        X64Word_create(3515267271, 566280711),
        X64Word_create(3940187606, 3454069534),
        X64Word_create(4118630271, 4000239992),
        X64Word_create(116418474, 1914138554),
        X64Word_create(174292421, 2731055270),
        X64Word_create(289380356, 3203993006),
        X64Word_create(460393269, 320620315),
        X64Word_create(685471733, 587496836),
        X64Word_create(852142971, 1086792851),
        X64Word_create(1017036298, 365543100),
        X64Word_create(1126000580, 2618297676),
        X64Word_create(1288033470, 3409855158),
        X64Word_create(1501505948, 4234509866),
        X64Word_create(1607167915, 987167468),
        X64Word_create(1816402316, 1246189591)
      ];
      var W = [];
      (function() {
        for (var i3 = 0;i3 < 80; i3++) {
          W[i3] = X64Word_create();
        }
      })();
      var SHA512 = C_algo.SHA512 = Hasher.extend({
        _doReset: function() {
          this._hash = new X64WordArray.init([
            new X64Word.init(1779033703, 4089235720),
            new X64Word.init(3144134277, 2227873595),
            new X64Word.init(1013904242, 4271175723),
            new X64Word.init(2773480762, 1595750129),
            new X64Word.init(1359893119, 2917565137),
            new X64Word.init(2600822924, 725511199),
            new X64Word.init(528734635, 4215389547),
            new X64Word.init(1541459225, 327033209)
          ]);
        },
        _doProcessBlock: function(M, offset) {
          var H = this._hash.words;
          var H0 = H[0];
          var H12 = H[1];
          var H22 = H[2];
          var H3 = H[3];
          var H4 = H[4];
          var H5 = H[5];
          var H6 = H[6];
          var H7 = H[7];
          var H0h = H0.high;
          var H0l = H0.low;
          var H1h = H12.high;
          var H1l = H12.low;
          var H2h = H22.high;
          var H2l = H22.low;
          var H3h = H3.high;
          var H3l = H3.low;
          var H4h = H4.high;
          var H4l = H4.low;
          var H5h = H5.high;
          var H5l = H5.low;
          var H6h = H6.high;
          var H6l = H6.low;
          var H7h = H7.high;
          var H7l = H7.low;
          var ah = H0h;
          var al = H0l;
          var bh = H1h;
          var bl = H1l;
          var ch = H2h;
          var cl = H2l;
          var dh = H3h;
          var dl = H3l;
          var eh = H4h;
          var el = H4l;
          var fh = H5h;
          var fl = H5l;
          var gh = H6h;
          var gl = H6l;
          var hh = H7h;
          var hl = H7l;
          for (var i3 = 0;i3 < 80; i3++) {
            var Wil;
            var Wih;
            var Wi = W[i3];
            if (i3 < 16) {
              Wih = Wi.high = M[offset + i3 * 2] | 0;
              Wil = Wi.low = M[offset + i3 * 2 + 1] | 0;
            } else {
              var gamma0x = W[i3 - 15];
              var gamma0xh = gamma0x.high;
              var gamma0xl = gamma0x.low;
              var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
              var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
              var gamma1x = W[i3 - 2];
              var gamma1xh = gamma1x.high;
              var gamma1xl = gamma1x.low;
              var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
              var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
              var Wi7 = W[i3 - 7];
              var Wi7h = Wi7.high;
              var Wi7l = Wi7.low;
              var Wi16 = W[i3 - 16];
              var Wi16h = Wi16.high;
              var Wi16l = Wi16.low;
              Wil = gamma0l + Wi7l;
              Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
              Wil = Wil + gamma1l;
              Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
              Wil = Wil + Wi16l;
              Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
              Wi.high = Wih;
              Wi.low = Wil;
            }
            var chh = eh & fh ^ ~eh & gh;
            var chl = el & fl ^ ~el & gl;
            var majh = ah & bh ^ ah & ch ^ bh & ch;
            var majl = al & bl ^ al & cl ^ bl & cl;
            var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
            var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
            var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
            var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
            var Ki = K[i3];
            var Kih = Ki.high;
            var Kil = Ki.low;
            var t1l = hl + sigma1l;
            var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
            var t1l = t1l + chl;
            var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
            var t1l = t1l + Kil;
            var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
            var t1l = t1l + Wil;
            var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
            var t2l = sigma0l + majl;
            var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
            hh = gh;
            hl = gl;
            gh = fh;
            gl = fl;
            fh = eh;
            fl = el;
            el = dl + t1l | 0;
            eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
            dh = ch;
            dl = cl;
            ch = bh;
            cl = bl;
            bh = ah;
            bl = al;
            al = t1l + t2l | 0;
            ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
          }
          H0l = H0.low = H0l + al;
          H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
          H1l = H12.low = H1l + bl;
          H12.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
          H2l = H22.low = H2l + cl;
          H22.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
          H3l = H3.low = H3l + dl;
          H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
          H4l = H4.low = H4l + el;
          H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
          H5l = H5.low = H5l + fl;
          H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
          H6l = H6.low = H6l + gl;
          H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
          H7l = H7.low = H7l + hl;
          H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
        },
        _doFinalize: function() {
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8;
          dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
          dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
          dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
          data.sigBytes = dataWords.length * 4;
          this._process();
          var hash7 = this._hash.toX32();
          return hash7;
        },
        clone: function() {
          var clone13 = Hasher.clone.call(this);
          clone13._hash = this._hash.clone();
          return clone13;
        },
        blockSize: 1024 / 32
      });
      C.SHA512 = Hasher._createHelper(SHA512);
      C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
    })();
    return CryptoJS.SHA512;
  });
});

// node_modules/crypto-js/sha384.js
var require_sha384 = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_x64_core(), require_sha512());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./x64-core", "./sha512"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_x64 = C.x64;
      var X64Word = C_x64.Word;
      var X64WordArray = C_x64.WordArray;
      var C_algo = C.algo;
      var SHA512 = C_algo.SHA512;
      var SHA384 = C_algo.SHA384 = SHA512.extend({
        _doReset: function() {
          this._hash = new X64WordArray.init([
            new X64Word.init(3418070365, 3238371032),
            new X64Word.init(1654270250, 914150663),
            new X64Word.init(2438529370, 812702999),
            new X64Word.init(355462360, 4144912697),
            new X64Word.init(1731405415, 4290775857),
            new X64Word.init(2394180231, 1750603025),
            new X64Word.init(3675008525, 1694076839),
            new X64Word.init(1203062813, 3204075428)
          ]);
        },
        _doFinalize: function() {
          var hash7 = SHA512._doFinalize.call(this);
          hash7.sigBytes -= 16;
          return hash7;
        }
      });
      C.SHA384 = SHA512._createHelper(SHA384);
      C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
    })();
    return CryptoJS.SHA384;
  });
});

// node_modules/crypto-js/sha3.js
var require_sha3 = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_x64_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./x64-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function(Math2) {
      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_x64 = C.x64;
      var X64Word = C_x64.Word;
      var C_algo = C.algo;
      var RHO_OFFSETS = [];
      var PI_INDEXES = [];
      var ROUND_CONSTANTS = [];
      (function() {
        var x3 = 1, y3 = 0;
        for (var t3 = 0;t3 < 24; t3++) {
          RHO_OFFSETS[x3 + 5 * y3] = (t3 + 1) * (t3 + 2) / 2 % 64;
          var newX = y3 % 5;
          var newY = (2 * x3 + 3 * y3) % 5;
          x3 = newX;
          y3 = newY;
        }
        for (var x3 = 0;x3 < 5; x3++) {
          for (var y3 = 0;y3 < 5; y3++) {
            PI_INDEXES[x3 + 5 * y3] = y3 + (2 * x3 + 3 * y3) % 5 * 5;
          }
        }
        var LFSR = 1;
        for (var i3 = 0;i3 < 24; i3++) {
          var roundConstantMsw = 0;
          var roundConstantLsw = 0;
          for (var j = 0;j < 7; j++) {
            if (LFSR & 1) {
              var bitPosition = (1 << j) - 1;
              if (bitPosition < 32) {
                roundConstantLsw ^= 1 << bitPosition;
              } else {
                roundConstantMsw ^= 1 << bitPosition - 32;
              }
            }
            if (LFSR & 128) {
              LFSR = LFSR << 1 ^ 113;
            } else {
              LFSR <<= 1;
            }
          }
          ROUND_CONSTANTS[i3] = X64Word.create(roundConstantMsw, roundConstantLsw);
        }
      })();
      var T3 = [];
      (function() {
        for (var i3 = 0;i3 < 25; i3++) {
          T3[i3] = X64Word.create();
        }
      })();
      var SHA3 = C_algo.SHA3 = Hasher.extend({
        cfg: Hasher.cfg.extend({
          outputLength: 512
        }),
        _doReset: function() {
          var state = this._state = [];
          for (var i3 = 0;i3 < 25; i3++) {
            state[i3] = new X64Word.init;
          }
          this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
        },
        _doProcessBlock: function(M, offset) {
          var state = this._state;
          var nBlockSizeLanes = this.blockSize / 2;
          for (var i3 = 0;i3 < nBlockSizeLanes; i3++) {
            var M2i = M[offset + 2 * i3];
            var M2i1 = M[offset + 2 * i3 + 1];
            M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
            M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
            var lane = state[i3];
            lane.high ^= M2i1;
            lane.low ^= M2i;
          }
          for (var round = 0;round < 24; round++) {
            for (var x3 = 0;x3 < 5; x3++) {
              var tMsw = 0, tLsw = 0;
              for (var y3 = 0;y3 < 5; y3++) {
                var lane = state[x3 + 5 * y3];
                tMsw ^= lane.high;
                tLsw ^= lane.low;
              }
              var Tx = T3[x3];
              Tx.high = tMsw;
              Tx.low = tLsw;
            }
            for (var x3 = 0;x3 < 5; x3++) {
              var Tx4 = T3[(x3 + 4) % 5];
              var Tx1 = T3[(x3 + 1) % 5];
              var Tx1Msw = Tx1.high;
              var Tx1Lsw = Tx1.low;
              var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
              var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
              for (var y3 = 0;y3 < 5; y3++) {
                var lane = state[x3 + 5 * y3];
                lane.high ^= tMsw;
                lane.low ^= tLsw;
              }
            }
            for (var laneIndex = 1;laneIndex < 25; laneIndex++) {
              var tMsw;
              var tLsw;
              var lane = state[laneIndex];
              var laneMsw = lane.high;
              var laneLsw = lane.low;
              var rhoOffset = RHO_OFFSETS[laneIndex];
              if (rhoOffset < 32) {
                tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
              } else {
                tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
              }
              var TPiLane = T3[PI_INDEXES[laneIndex]];
              TPiLane.high = tMsw;
              TPiLane.low = tLsw;
            }
            var T0 = T3[0];
            var state0 = state[0];
            T0.high = state0.high;
            T0.low = state0.low;
            for (var x3 = 0;x3 < 5; x3++) {
              for (var y3 = 0;y3 < 5; y3++) {
                var laneIndex = x3 + 5 * y3;
                var lane = state[laneIndex];
                var TLane = T3[laneIndex];
                var Tx1Lane = T3[(x3 + 1) % 5 + 5 * y3];
                var Tx2Lane = T3[(x3 + 2) % 5 + 5 * y3];
                lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
              }
            }
            var lane = state[0];
            var roundConstant = ROUND_CONSTANTS[round];
            lane.high ^= roundConstant.high;
            lane.low ^= roundConstant.low;
          }
        },
        _doFinalize: function() {
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8;
          var blockSizeBits = this.blockSize * 32;
          dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
          dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
          data.sigBytes = dataWords.length * 4;
          this._process();
          var state = this._state;
          var outputLengthBytes = this.cfg.outputLength / 8;
          var outputLengthLanes = outputLengthBytes / 8;
          var hashWords = [];
          for (var i3 = 0;i3 < outputLengthLanes; i3++) {
            var lane = state[i3];
            var laneMsw = lane.high;
            var laneLsw = lane.low;
            laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
            laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
            hashWords.push(laneLsw);
            hashWords.push(laneMsw);
          }
          return new WordArray.init(hashWords, outputLengthBytes);
        },
        clone: function() {
          var clone13 = Hasher.clone.call(this);
          var state = clone13._state = this._state.slice(0);
          for (var i3 = 0;i3 < 25; i3++) {
            state[i3] = state[i3].clone();
          }
          return clone13;
        }
      });
      C.SHA3 = Hasher._createHelper(SHA3);
      C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
    })(Math);
    return CryptoJS.SHA3;
  });
});

// node_modules/crypto-js/ripemd160.js
var require_ripemd160 = __commonJS((exports, module) => {
  (function(root, factory) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function(Math2) {
      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_algo = C.algo;
      var _zl = WordArray.create([
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        7,
        4,
        13,
        1,
        10,
        6,
        15,
        3,
        12,
        0,
        9,
        5,
        2,
        14,
        11,
        8,
        3,
        10,
        14,
        4,
        9,
        15,
        8,
        1,
        2,
        7,
        0,
        6,
        13,
        11,
        5,
        12,
        1,
        9,
        11,
        10,
        0,
        8,
        12,
        4,
        13,
        3,
        7,
        15,
        14,
        5,
        6,
        2,
        4,
        0,
        5,
        9,
        7,
        12,
        2,
        10,
        14,
        1,
        3,
        8,
        11,
        6,
        15,
        13
      ]);
      var _zr = WordArray.create([
        5,
        14,
        7,
        0,
        9,
        2,
        11,
        4,
        13,
        6,
        15,
        8,
        1,
        10,
        3,
        12,
        6,
        11,
        3,
        7,
        0,
        13,
        5,
        10,
        14,
        15,
        8,
        12,
        4,
        9,
        1,
        2,
        15,
        5,
        1,
        3,
        7,
        14,
        6,
        9,
        11,
        8,
        12,
        2,
        10,
        0,
        4,
        13,
        8,
        6,
        4,
        1,
        3,
        11,
        15,
        0,
        5,
        12,
        2,
        13,
        9,
        7,
        10,
        14,
        12,
        15,
        10,
        4,
        1,
        5,
        8,
        7,
        6,
        2,
        13,
        14,
        0,
        3,
        9,
        11
      ]);
      var _sl = WordArray.create([
        11,
        14,
        15,
        12,
        5,
        8,
        7,
        9,
        11,
        13,
        14,
        15,
        6,
        7,
        9,
        8,
        7,
        6,
        8,
        13,
        11,
        9,
        7,
        15,
        7,
        12,
        15,
        9,
        11,
        7,
        13,
        12,
        11,
        13,
        6,
        7,
        14,
        9,
        13,
        15,
        14,
        8,
        13,
        6,
        5,
        12,
        7,
        5,
        11,
        12,
        14,
        15,
        14,
        15,
        9,
        8,
        9,
        14,
        5,
        6,
        8,
        6,
        5,
        12,
        9,
        15,
        5,
        11,
        6,
        8,
        13,
        12,
        5,
        12,
        13,
        14,
        11,
        8,
        5,
        6
      ]);
      var _sr = WordArray.create([
        8,
        9,
        9,
        11,
        13,
        15,
        15,
        5,
        7,
        7,
        8,
        11,
        14,
        14,
        12,
        6,
        9,
        13,
        15,
        7,
        12,
        8,
        9,
        11,
        7,
        7,
        12,
        7,
        6,
        15,
        13,
        11,
        9,
        7,
        15,
        11,
        8,
        6,
        6,
        14,
        12,
        13,
        5,
        14,
        13,
        13,
        7,
        5,
        15,
        5,
        8,
        11,
        14,
        14,
        6,
        14,
        6,
        9,
        12,
        9,
        12,
        5,
        15,
        8,
        8,
        5,
        12,
        9,
        12,
        5,
        14,
        6,
        8,
        13,
        6,
        5,
        15,
        13,
        11,
        11
      ]);
      var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
      var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
      var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
        _doReset: function() {
          this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
        },
        _doProcessBlock: function(M, offset) {
          for (var i3 = 0;i3 < 16; i3++) {
            var offset_i = offset + i3;
            var M_offset_i = M[offset_i];
            M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
          }
          var H = this._hash.words;
          var hl = _hl.words;
          var hr = _hr.words;
          var zl = _zl.words;
          var zr = _zr.words;
          var sl = _sl.words;
          var sr = _sr.words;
          var al, bl, cl, dl, el;
          var ar, br, cr, dr, er;
          ar = al = H[0];
          br = bl = H[1];
          cr = cl = H[2];
          dr = dl = H[3];
          er = el = H[4];
          var t3;
          for (var i3 = 0;i3 < 80; i3 += 1) {
            t3 = al + M[offset + zl[i3]] | 0;
            if (i3 < 16) {
              t3 += f12(bl, cl, dl) + hl[0];
            } else if (i3 < 32) {
              t3 += f22(bl, cl, dl) + hl[1];
            } else if (i3 < 48) {
              t3 += f3(bl, cl, dl) + hl[2];
            } else if (i3 < 64) {
              t3 += f4(bl, cl, dl) + hl[3];
            } else {
              t3 += f5(bl, cl, dl) + hl[4];
            }
            t3 = t3 | 0;
            t3 = rotl(t3, sl[i3]);
            t3 = t3 + el | 0;
            al = el;
            el = dl;
            dl = rotl(cl, 10);
            cl = bl;
            bl = t3;
            t3 = ar + M[offset + zr[i3]] | 0;
            if (i3 < 16) {
              t3 += f5(br, cr, dr) + hr[0];
            } else if (i3 < 32) {
              t3 += f4(br, cr, dr) + hr[1];
            } else if (i3 < 48) {
              t3 += f3(br, cr, dr) + hr[2];
            } else if (i3 < 64) {
              t3 += f22(br, cr, dr) + hr[3];
            } else {
              t3 += f12(br, cr, dr) + hr[4];
            }
            t3 = t3 | 0;
            t3 = rotl(t3, sr[i3]);
            t3 = t3 + er | 0;
            ar = er;
            er = dr;
            dr = rotl(cr, 10);
            cr = br;
            br = t3;
          }
          t3 = H[1] + cl + dr | 0;
          H[1] = H[2] + dl + er | 0;
          H[2] = H[3] + el + ar | 0;
          H[3] = H[4] + al + br | 0;
          H[4] = H[0] + bl + cr | 0;
          H[0] = t3;
        },
        _doFinalize: function() {
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8;
          dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
          data.sigBytes = (dataWords.length + 1) * 4;
          this._process();
          var hash7 = this._hash;
          var H = hash7.words;
          for (var i3 = 0;i3 < 5; i3++) {
            var H_i = H[i3];
            H[i3] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
          }
          return hash7;
        },
        clone: function() {
          var clone13 = Hasher.clone.call(this);
          clone13._hash = this._hash.clone();
          return clone13;
        }
      });
      function f12(x3, y3, z) {
        return x3 ^ y3 ^ z;
      }
      function f22(x3, y3, z) {
        return x3 & y3 | ~x3 & z;
      }
      function f3(x3, y3, z) {
        return (x3 | ~y3) ^ z;
      }
      function f4(x3, y3, z) {
        return x3 & z | y3 & ~z;
      }
      function f5(x3, y3, z) {
        return x3 ^ (y3 | ~z);
      }
      function rotl(x3, n3) {
        return x3 << n3 | x3 >>> 32 - n3;
      }
      C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
      C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
    })(Math);
    return CryptoJS.RIPEMD160;
  });
});

// node_modules/crypto-js/hmac.js
var require_hmac = __commonJS((exports, module) => {
  (function(root, factory) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var Base = C_lib.Base;
      var C_enc = C.enc;
      var Utf8 = C_enc.Utf8;
      var C_algo = C.algo;
      var HMAC = C_algo.HMAC = Base.extend({
        init: function(hasher, key) {
          hasher = this._hasher = new hasher.init;
          if (typeof key == "string") {
            key = Utf8.parse(key);
          }
          var hasherBlockSize = hasher.blockSize;
          var hasherBlockSizeBytes = hasherBlockSize * 4;
          if (key.sigBytes > hasherBlockSizeBytes) {
            key = hasher.finalize(key);
          }
          key.clamp();
          var oKey = this._oKey = key.clone();
          var iKey = this._iKey = key.clone();
          var oKeyWords = oKey.words;
          var iKeyWords = iKey.words;
          for (var i3 = 0;i3 < hasherBlockSize; i3++) {
            oKeyWords[i3] ^= 1549556828;
            iKeyWords[i3] ^= 909522486;
          }
          oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
          this.reset();
        },
        reset: function() {
          var hasher = this._hasher;
          hasher.reset();
          hasher.update(this._iKey);
        },
        update: function(messageUpdate) {
          this._hasher.update(messageUpdate);
          return this;
        },
        finalize: function(messageUpdate) {
          var hasher = this._hasher;
          var innerHash = hasher.finalize(messageUpdate);
          hasher.reset();
          var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
          return hmac;
        }
      });
    })();
  });
});

// node_modules/crypto-js/pbkdf2.js
var require_pbkdf2 = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_sha256(), require_hmac());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./sha256", "./hmac"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var Base = C_lib.Base;
      var WordArray = C_lib.WordArray;
      var C_algo = C.algo;
      var SHA256 = C_algo.SHA256;
      var HMAC = C_algo.HMAC;
      var PBKDF2 = C_algo.PBKDF2 = Base.extend({
        cfg: Base.extend({
          keySize: 128 / 32,
          hasher: SHA256,
          iterations: 250000
        }),
        init: function(cfg) {
          this.cfg = this.cfg.extend(cfg);
        },
        compute: function(password, salt) {
          var cfg = this.cfg;
          var hmac = HMAC.create(cfg.hasher, password);
          var derivedKey = WordArray.create();
          var blockIndex = WordArray.create([1]);
          var derivedKeyWords = derivedKey.words;
          var blockIndexWords = blockIndex.words;
          var keySize = cfg.keySize;
          var iterations = cfg.iterations;
          while (derivedKeyWords.length < keySize) {
            var block = hmac.update(salt).finalize(blockIndex);
            hmac.reset();
            var blockWords = block.words;
            var blockWordsLength = blockWords.length;
            var intermediate = block;
            for (var i3 = 1;i3 < iterations; i3++) {
              intermediate = hmac.finalize(intermediate);
              hmac.reset();
              var intermediateWords = intermediate.words;
              for (var j = 0;j < blockWordsLength; j++) {
                blockWords[j] ^= intermediateWords[j];
              }
            }
            derivedKey.concat(block);
            blockIndexWords[0]++;
          }
          derivedKey.sigBytes = keySize * 4;
          return derivedKey;
        }
      });
      C.PBKDF2 = function(password, salt, cfg) {
        return PBKDF2.create(cfg).compute(password, salt);
      };
    })();
    return CryptoJS.PBKDF2;
  });
});

// node_modules/crypto-js/evpkdf.js
var require_evpkdf = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_sha1(), require_hmac());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./sha1", "./hmac"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var Base = C_lib.Base;
      var WordArray = C_lib.WordArray;
      var C_algo = C.algo;
      var MD5 = C_algo.MD5;
      var EvpKDF = C_algo.EvpKDF = Base.extend({
        cfg: Base.extend({
          keySize: 128 / 32,
          hasher: MD5,
          iterations: 1
        }),
        init: function(cfg) {
          this.cfg = this.cfg.extend(cfg);
        },
        compute: function(password, salt) {
          var block;
          var cfg = this.cfg;
          var hasher = cfg.hasher.create();
          var derivedKey = WordArray.create();
          var derivedKeyWords = derivedKey.words;
          var keySize = cfg.keySize;
          var iterations = cfg.iterations;
          while (derivedKeyWords.length < keySize) {
            if (block) {
              hasher.update(block);
            }
            block = hasher.update(password).finalize(salt);
            hasher.reset();
            for (var i3 = 1;i3 < iterations; i3++) {
              block = hasher.finalize(block);
              hasher.reset();
            }
            derivedKey.concat(block);
          }
          derivedKey.sigBytes = keySize * 4;
          return derivedKey;
        }
      });
      C.EvpKDF = function(password, salt, cfg) {
        return EvpKDF.create(cfg).compute(password, salt);
      };
    })();
    return CryptoJS.EvpKDF;
  });
});

// node_modules/crypto-js/cipher-core.js
var require_cipher_core = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_evpkdf());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./evpkdf"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    CryptoJS.lib.Cipher || function(undefined6) {
      var C = CryptoJS;
      var C_lib = C.lib;
      var Base = C_lib.Base;
      var WordArray = C_lib.WordArray;
      var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
      var C_enc = C.enc;
      var Utf8 = C_enc.Utf8;
      var Base64 = C_enc.Base64;
      var C_algo = C.algo;
      var EvpKDF = C_algo.EvpKDF;
      var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
        cfg: Base.extend(),
        createEncryptor: function(key, cfg) {
          return this.create(this._ENC_XFORM_MODE, key, cfg);
        },
        createDecryptor: function(key, cfg) {
          return this.create(this._DEC_XFORM_MODE, key, cfg);
        },
        init: function(xformMode, key, cfg) {
          this.cfg = this.cfg.extend(cfg);
          this._xformMode = xformMode;
          this._key = key;
          this.reset();
        },
        reset: function() {
          BufferedBlockAlgorithm.reset.call(this);
          this._doReset();
        },
        process: function(dataUpdate) {
          this._append(dataUpdate);
          return this._process();
        },
        finalize: function(dataUpdate) {
          if (dataUpdate) {
            this._append(dataUpdate);
          }
          var finalProcessedData = this._doFinalize();
          return finalProcessedData;
        },
        keySize: 128 / 32,
        ivSize: 128 / 32,
        _ENC_XFORM_MODE: 1,
        _DEC_XFORM_MODE: 2,
        _createHelper: function() {
          function selectCipherStrategy(key) {
            if (typeof key == "string") {
              return PasswordBasedCipher;
            } else {
              return SerializableCipher;
            }
          }
          return function(cipher) {
            return {
              encrypt: function(message, key, cfg) {
                return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
              },
              decrypt: function(ciphertext, key, cfg) {
                return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
              }
            };
          };
        }()
      });
      var StreamCipher = C_lib.StreamCipher = Cipher.extend({
        _doFinalize: function() {
          var finalProcessedBlocks = this._process(true);
          return finalProcessedBlocks;
        },
        blockSize: 1
      });
      var C_mode = C.mode = {};
      var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
        createEncryptor: function(cipher, iv) {
          return this.Encryptor.create(cipher, iv);
        },
        createDecryptor: function(cipher, iv) {
          return this.Decryptor.create(cipher, iv);
        },
        init: function(cipher, iv) {
          this._cipher = cipher;
          this._iv = iv;
        }
      });
      var CBC = C_mode.CBC = function() {
        var CBC2 = BlockCipherMode.extend();
        CBC2.Encryptor = CBC2.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            xorBlock.call(this, words, offset, blockSize);
            cipher.encryptBlock(words, offset);
            this._prevBlock = words.slice(offset, offset + blockSize);
          }
        });
        CBC2.Decryptor = CBC2.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var thisBlock = words.slice(offset, offset + blockSize);
            cipher.decryptBlock(words, offset);
            xorBlock.call(this, words, offset, blockSize);
            this._prevBlock = thisBlock;
          }
        });
        function xorBlock(words, offset, blockSize) {
          var block;
          var iv = this._iv;
          if (iv) {
            block = iv;
            this._iv = undefined6;
          } else {
            block = this._prevBlock;
          }
          for (var i3 = 0;i3 < blockSize; i3++) {
            words[offset + i3] ^= block[i3];
          }
        }
        return CBC2;
      }();
      var C_pad = C.pad = {};
      var Pkcs7 = C_pad.Pkcs7 = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
          var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
          var paddingWords = [];
          for (var i3 = 0;i3 < nPaddingBytes; i3 += 4) {
            paddingWords.push(paddingWord);
          }
          var padding = WordArray.create(paddingWords, nPaddingBytes);
          data.concat(padding);
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      var BlockCipher = C_lib.BlockCipher = Cipher.extend({
        cfg: Cipher.cfg.extend({
          mode: CBC,
          padding: Pkcs7
        }),
        reset: function() {
          var modeCreator;
          Cipher.reset.call(this);
          var cfg = this.cfg;
          var iv = cfg.iv;
          var mode = cfg.mode;
          if (this._xformMode == this._ENC_XFORM_MODE) {
            modeCreator = mode.createEncryptor;
          } else {
            modeCreator = mode.createDecryptor;
            this._minBufferSize = 1;
          }
          if (this._mode && this._mode.__creator == modeCreator) {
            this._mode.init(this, iv && iv.words);
          } else {
            this._mode = modeCreator.call(mode, this, iv && iv.words);
            this._mode.__creator = modeCreator;
          }
        },
        _doProcessBlock: function(words, offset) {
          this._mode.processBlock(words, offset);
        },
        _doFinalize: function() {
          var finalProcessedBlocks;
          var padding = this.cfg.padding;
          if (this._xformMode == this._ENC_XFORM_MODE) {
            padding.pad(this._data, this.blockSize);
            finalProcessedBlocks = this._process(true);
          } else {
            finalProcessedBlocks = this._process(true);
            padding.unpad(finalProcessedBlocks);
          }
          return finalProcessedBlocks;
        },
        blockSize: 128 / 32
      });
      var CipherParams = C_lib.CipherParams = Base.extend({
        init: function(cipherParams) {
          this.mixIn(cipherParams);
        },
        toString: function(formatter) {
          return (formatter || this.formatter).stringify(this);
        }
      });
      var C_format = C.format = {};
      var OpenSSLFormatter = C_format.OpenSSL = {
        stringify: function(cipherParams) {
          var wordArray;
          var ciphertext = cipherParams.ciphertext;
          var salt = cipherParams.salt;
          if (salt) {
            wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
          } else {
            wordArray = ciphertext;
          }
          return wordArray.toString(Base64);
        },
        parse: function(openSSLStr) {
          var salt;
          var ciphertext = Base64.parse(openSSLStr);
          var ciphertextWords = ciphertext.words;
          if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
            salt = WordArray.create(ciphertextWords.slice(2, 4));
            ciphertextWords.splice(0, 4);
            ciphertext.sigBytes -= 16;
          }
          return CipherParams.create({ ciphertext, salt });
        }
      };
      var SerializableCipher = C_lib.SerializableCipher = Base.extend({
        cfg: Base.extend({
          format: OpenSSLFormatter
        }),
        encrypt: function(cipher, message, key, cfg) {
          cfg = this.cfg.extend(cfg);
          var encryptor = cipher.createEncryptor(key, cfg);
          var ciphertext = encryptor.finalize(message);
          var cipherCfg = encryptor.cfg;
          return CipherParams.create({
            ciphertext,
            key,
            iv: cipherCfg.iv,
            algorithm: cipher,
            mode: cipherCfg.mode,
            padding: cipherCfg.padding,
            blockSize: cipher.blockSize,
            formatter: cfg.format
          });
        },
        decrypt: function(cipher, ciphertext, key, cfg) {
          cfg = this.cfg.extend(cfg);
          ciphertext = this._parse(ciphertext, cfg.format);
          var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
          return plaintext;
        },
        _parse: function(ciphertext, format) {
          if (typeof ciphertext == "string") {
            return format.parse(ciphertext, this);
          } else {
            return ciphertext;
          }
        }
      });
      var C_kdf = C.kdf = {};
      var OpenSSLKdf = C_kdf.OpenSSL = {
        execute: function(password, keySize, ivSize, salt, hasher) {
          if (!salt) {
            salt = WordArray.random(64 / 8);
          }
          if (!hasher) {
            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
          } else {
            var key = EvpKDF.create({ keySize: keySize + ivSize, hasher }).compute(password, salt);
          }
          var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
          key.sigBytes = keySize * 4;
          return CipherParams.create({ key, iv, salt });
        }
      };
      var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
        cfg: SerializableCipher.cfg.extend({
          kdf: OpenSSLKdf
        }),
        encrypt: function(cipher, message, password, cfg) {
          cfg = this.cfg.extend(cfg);
          var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);
          cfg.iv = derivedParams.iv;
          var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
          ciphertext.mixIn(derivedParams);
          return ciphertext;
        },
        decrypt: function(cipher, ciphertext, password, cfg) {
          cfg = this.cfg.extend(cfg);
          ciphertext = this._parse(ciphertext, cfg.format);
          var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);
          cfg.iv = derivedParams.iv;
          var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
          return plaintext;
        }
      });
    }();
  });
});

// node_modules/crypto-js/mode-cfb.js
var require_mode_cfb = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    CryptoJS.mode.CFB = function() {
      var CFB = CryptoJS.lib.BlockCipherMode.extend();
      CFB.Encryptor = CFB.extend({
        processBlock: function(words, offset) {
          var cipher = this._cipher;
          var blockSize = cipher.blockSize;
          generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
          this._prevBlock = words.slice(offset, offset + blockSize);
        }
      });
      CFB.Decryptor = CFB.extend({
        processBlock: function(words, offset) {
          var cipher = this._cipher;
          var blockSize = cipher.blockSize;
          var thisBlock = words.slice(offset, offset + blockSize);
          generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
          this._prevBlock = thisBlock;
        }
      });
      function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
        var keystream;
        var iv = this._iv;
        if (iv) {
          keystream = iv.slice(0);
          this._iv = undefined;
        } else {
          keystream = this._prevBlock;
        }
        cipher.encryptBlock(keystream, 0);
        for (var i3 = 0;i3 < blockSize; i3++) {
          words[offset + i3] ^= keystream[i3];
        }
      }
      return CFB;
    }();
    return CryptoJS.mode.CFB;
  });
});

// node_modules/crypto-js/mode-ctr.js
var require_mode_ctr = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    CryptoJS.mode.CTR = function() {
      var CTR = CryptoJS.lib.BlockCipherMode.extend();
      var Encryptor = CTR.Encryptor = CTR.extend({
        processBlock: function(words, offset) {
          var cipher = this._cipher;
          var blockSize = cipher.blockSize;
          var iv = this._iv;
          var counter = this._counter;
          if (iv) {
            counter = this._counter = iv.slice(0);
            this._iv = undefined;
          }
          var keystream = counter.slice(0);
          cipher.encryptBlock(keystream, 0);
          counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
          for (var i3 = 0;i3 < blockSize; i3++) {
            words[offset + i3] ^= keystream[i3];
          }
        }
      });
      CTR.Decryptor = Encryptor;
      return CTR;
    }();
    return CryptoJS.mode.CTR;
  });
});

// node_modules/crypto-js/mode-ctr-gladman.js
var require_mode_ctr_gladman = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    CryptoJS.mode.CTRGladman = function() {
      var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
      function incWord(word) {
        if ((word >> 24 & 255) === 255) {
          var b12 = word >> 16 & 255;
          var b22 = word >> 8 & 255;
          var b3 = word & 255;
          if (b12 === 255) {
            b12 = 0;
            if (b22 === 255) {
              b22 = 0;
              if (b3 === 255) {
                b3 = 0;
              } else {
                ++b3;
              }
            } else {
              ++b22;
            }
          } else {
            ++b12;
          }
          word = 0;
          word += b12 << 16;
          word += b22 << 8;
          word += b3;
        } else {
          word += 1 << 24;
        }
        return word;
      }
      function incCounter(counter) {
        if ((counter[0] = incWord(counter[0])) === 0) {
          counter[1] = incWord(counter[1]);
        }
        return counter;
      }
      var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
        processBlock: function(words, offset) {
          var cipher = this._cipher;
          var blockSize = cipher.blockSize;
          var iv = this._iv;
          var counter = this._counter;
          if (iv) {
            counter = this._counter = iv.slice(0);
            this._iv = undefined;
          }
          incCounter(counter);
          var keystream = counter.slice(0);
          cipher.encryptBlock(keystream, 0);
          for (var i3 = 0;i3 < blockSize; i3++) {
            words[offset + i3] ^= keystream[i3];
          }
        }
      });
      CTRGladman.Decryptor = Encryptor;
      return CTRGladman;
    }();
    return CryptoJS.mode.CTRGladman;
  });
});

// node_modules/crypto-js/mode-ofb.js
var require_mode_ofb = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    CryptoJS.mode.OFB = function() {
      var OFB = CryptoJS.lib.BlockCipherMode.extend();
      var Encryptor = OFB.Encryptor = OFB.extend({
        processBlock: function(words, offset) {
          var cipher = this._cipher;
          var blockSize = cipher.blockSize;
          var iv = this._iv;
          var keystream = this._keystream;
          if (iv) {
            keystream = this._keystream = iv.slice(0);
            this._iv = undefined;
          }
          cipher.encryptBlock(keystream, 0);
          for (var i3 = 0;i3 < blockSize; i3++) {
            words[offset + i3] ^= keystream[i3];
          }
        }
      });
      OFB.Decryptor = Encryptor;
      return OFB;
    }();
    return CryptoJS.mode.OFB;
  });
});

// node_modules/crypto-js/mode-ecb.js
var require_mode_ecb = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    CryptoJS.mode.ECB = function() {
      var ECB = CryptoJS.lib.BlockCipherMode.extend();
      ECB.Encryptor = ECB.extend({
        processBlock: function(words, offset) {
          this._cipher.encryptBlock(words, offset);
        }
      });
      ECB.Decryptor = ECB.extend({
        processBlock: function(words, offset) {
          this._cipher.decryptBlock(words, offset);
        }
      });
      return ECB;
    }();
    return CryptoJS.mode.ECB;
  });
});

// node_modules/crypto-js/pad-ansix923.js
var require_pad_ansix923 = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    CryptoJS.pad.AnsiX923 = {
      pad: function(data, blockSize) {
        var dataSigBytes = data.sigBytes;
        var blockSizeBytes = blockSize * 4;
        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
        var lastBytePos = dataSigBytes + nPaddingBytes - 1;
        data.clamp();
        data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
        data.sigBytes += nPaddingBytes;
      },
      unpad: function(data) {
        var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
        data.sigBytes -= nPaddingBytes;
      }
    };
    return CryptoJS.pad.Ansix923;
  });
});

// node_modules/crypto-js/pad-iso10126.js
var require_pad_iso10126 = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    CryptoJS.pad.Iso10126 = {
      pad: function(data, blockSize) {
        var blockSizeBytes = blockSize * 4;
        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
      },
      unpad: function(data) {
        var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
        data.sigBytes -= nPaddingBytes;
      }
    };
    return CryptoJS.pad.Iso10126;
  });
});

// node_modules/crypto-js/pad-iso97971.js
var require_pad_iso97971 = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    CryptoJS.pad.Iso97971 = {
      pad: function(data, blockSize) {
        data.concat(CryptoJS.lib.WordArray.create([2147483648], 1));
        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
      },
      unpad: function(data) {
        CryptoJS.pad.ZeroPadding.unpad(data);
        data.sigBytes--;
      }
    };
    return CryptoJS.pad.Iso97971;
  });
});

// node_modules/crypto-js/pad-zeropadding.js
var require_pad_zeropadding = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    CryptoJS.pad.ZeroPadding = {
      pad: function(data, blockSize) {
        var blockSizeBytes = blockSize * 4;
        data.clamp();
        data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
      },
      unpad: function(data) {
        var dataWords = data.words;
        var i3 = data.sigBytes - 1;
        for (var i3 = data.sigBytes - 1;i3 >= 0; i3--) {
          if (dataWords[i3 >>> 2] >>> 24 - i3 % 4 * 8 & 255) {
            data.sigBytes = i3 + 1;
            break;
          }
        }
      }
    };
    return CryptoJS.pad.ZeroPadding;
  });
});

// node_modules/crypto-js/pad-nopadding.js
var require_pad_nopadding = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    CryptoJS.pad.NoPadding = {
      pad: function() {
      },
      unpad: function() {
      }
    };
    return CryptoJS.pad.NoPadding;
  });
});

// node_modules/crypto-js/format-hex.js
var require_format_hex = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function(undefined6) {
      var C = CryptoJS;
      var C_lib = C.lib;
      var CipherParams = C_lib.CipherParams;
      var C_enc = C.enc;
      var Hex = C_enc.Hex;
      var C_format = C.format;
      var HexFormatter = C_format.Hex = {
        stringify: function(cipherParams) {
          return cipherParams.ciphertext.toString(Hex);
        },
        parse: function(input) {
          var ciphertext = Hex.parse(input);
          return CipherParams.create({ ciphertext });
        }
      };
    })();
    return CryptoJS.format.Hex;
  });
});

// node_modules/crypto-js/aes.js
var require_aes = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var BlockCipher = C_lib.BlockCipher;
      var C_algo = C.algo;
      var SBOX = [];
      var INV_SBOX = [];
      var SUB_MIX_0 = [];
      var SUB_MIX_1 = [];
      var SUB_MIX_2 = [];
      var SUB_MIX_3 = [];
      var INV_SUB_MIX_0 = [];
      var INV_SUB_MIX_1 = [];
      var INV_SUB_MIX_2 = [];
      var INV_SUB_MIX_3 = [];
      (function() {
        var d3 = [];
        for (var i3 = 0;i3 < 256; i3++) {
          if (i3 < 128) {
            d3[i3] = i3 << 1;
          } else {
            d3[i3] = i3 << 1 ^ 283;
          }
        }
        var x3 = 0;
        var xi = 0;
        for (var i3 = 0;i3 < 256; i3++) {
          var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
          sx = sx >>> 8 ^ sx & 255 ^ 99;
          SBOX[x3] = sx;
          INV_SBOX[sx] = x3;
          var x22 = d3[x3];
          var x4 = d3[x22];
          var x8 = d3[x4];
          var t3 = d3[sx] * 257 ^ sx * 16843008;
          SUB_MIX_0[x3] = t3 << 24 | t3 >>> 8;
          SUB_MIX_1[x3] = t3 << 16 | t3 >>> 16;
          SUB_MIX_2[x3] = t3 << 8 | t3 >>> 24;
          SUB_MIX_3[x3] = t3;
          var t3 = x8 * 16843009 ^ x4 * 65537 ^ x22 * 257 ^ x3 * 16843008;
          INV_SUB_MIX_0[sx] = t3 << 24 | t3 >>> 8;
          INV_SUB_MIX_1[sx] = t3 << 16 | t3 >>> 16;
          INV_SUB_MIX_2[sx] = t3 << 8 | t3 >>> 24;
          INV_SUB_MIX_3[sx] = t3;
          if (!x3) {
            x3 = xi = 1;
          } else {
            x3 = x22 ^ d3[d3[d3[x8 ^ x22]]];
            xi ^= d3[d3[xi]];
          }
        }
      })();
      var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
      var AES = C_algo.AES = BlockCipher.extend({
        _doReset: function() {
          var t3;
          if (this._nRounds && this._keyPriorReset === this._key) {
            return;
          }
          var key = this._keyPriorReset = this._key;
          var keyWords = key.words;
          var keySize = key.sigBytes / 4;
          var nRounds = this._nRounds = keySize + 6;
          var ksRows = (nRounds + 1) * 4;
          var keySchedule = this._keySchedule = [];
          for (var ksRow = 0;ksRow < ksRows; ksRow++) {
            if (ksRow < keySize) {
              keySchedule[ksRow] = keyWords[ksRow];
            } else {
              t3 = keySchedule[ksRow - 1];
              if (!(ksRow % keySize)) {
                t3 = t3 << 8 | t3 >>> 24;
                t3 = SBOX[t3 >>> 24] << 24 | SBOX[t3 >>> 16 & 255] << 16 | SBOX[t3 >>> 8 & 255] << 8 | SBOX[t3 & 255];
                t3 ^= RCON[ksRow / keySize | 0] << 24;
              } else if (keySize > 6 && ksRow % keySize == 4) {
                t3 = SBOX[t3 >>> 24] << 24 | SBOX[t3 >>> 16 & 255] << 16 | SBOX[t3 >>> 8 & 255] << 8 | SBOX[t3 & 255];
              }
              keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t3;
            }
          }
          var invKeySchedule = this._invKeySchedule = [];
          for (var invKsRow = 0;invKsRow < ksRows; invKsRow++) {
            var ksRow = ksRows - invKsRow;
            if (invKsRow % 4) {
              var t3 = keySchedule[ksRow];
            } else {
              var t3 = keySchedule[ksRow - 4];
            }
            if (invKsRow < 4 || ksRow <= 4) {
              invKeySchedule[invKsRow] = t3;
            } else {
              invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t3 >>> 24]] ^ INV_SUB_MIX_1[SBOX[t3 >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t3 >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t3 & 255]];
            }
          }
        },
        encryptBlock: function(M, offset) {
          this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
        },
        decryptBlock: function(M, offset) {
          var t3 = M[offset + 1];
          M[offset + 1] = M[offset + 3];
          M[offset + 3] = t3;
          this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
          var t3 = M[offset + 1];
          M[offset + 1] = M[offset + 3];
          M[offset + 3] = t3;
        },
        _doCryptBlock: function(M, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
          var nRounds = this._nRounds;
          var s0 = M[offset] ^ keySchedule[0];
          var s12 = M[offset + 1] ^ keySchedule[1];
          var s22 = M[offset + 2] ^ keySchedule[2];
          var s3 = M[offset + 3] ^ keySchedule[3];
          var ksRow = 4;
          for (var round = 1;round < nRounds; round++) {
            var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s12 >>> 16 & 255] ^ SUB_MIX_22[s22 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
            var t12 = SUB_MIX_02[s12 >>> 24] ^ SUB_MIX_12[s22 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
            var t22 = SUB_MIX_02[s22 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s12 & 255] ^ keySchedule[ksRow++];
            var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s12 >>> 8 & 255] ^ SUB_MIX_32[s22 & 255] ^ keySchedule[ksRow++];
            s0 = t0;
            s12 = t12;
            s22 = t22;
            s3 = t3;
          }
          var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s12 >>> 16 & 255] << 16 | SBOX2[s22 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
          var t12 = (SBOX2[s12 >>> 24] << 24 | SBOX2[s22 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
          var t22 = (SBOX2[s22 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s12 & 255]) ^ keySchedule[ksRow++];
          var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s12 >>> 8 & 255] << 8 | SBOX2[s22 & 255]) ^ keySchedule[ksRow++];
          M[offset] = t0;
          M[offset + 1] = t12;
          M[offset + 2] = t22;
          M[offset + 3] = t3;
        },
        keySize: 256 / 32
      });
      C.AES = BlockCipher._createHelper(AES);
    })();
    return CryptoJS.AES;
  });
});

// node_modules/crypto-js/tripledes.js
var require_tripledes = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var BlockCipher = C_lib.BlockCipher;
      var C_algo = C.algo;
      var PC1 = [
        57,
        49,
        41,
        33,
        25,
        17,
        9,
        1,
        58,
        50,
        42,
        34,
        26,
        18,
        10,
        2,
        59,
        51,
        43,
        35,
        27,
        19,
        11,
        3,
        60,
        52,
        44,
        36,
        63,
        55,
        47,
        39,
        31,
        23,
        15,
        7,
        62,
        54,
        46,
        38,
        30,
        22,
        14,
        6,
        61,
        53,
        45,
        37,
        29,
        21,
        13,
        5,
        28,
        20,
        12,
        4
      ];
      var PC2 = [
        14,
        17,
        11,
        24,
        1,
        5,
        3,
        28,
        15,
        6,
        21,
        10,
        23,
        19,
        12,
        4,
        26,
        8,
        16,
        7,
        27,
        20,
        13,
        2,
        41,
        52,
        31,
        37,
        47,
        55,
        30,
        40,
        51,
        45,
        33,
        48,
        44,
        49,
        39,
        56,
        34,
        53,
        46,
        42,
        50,
        36,
        29,
        32
      ];
      var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
      var SBOX_P = [
        {
          0: 8421888,
          268435456: 32768,
          536870912: 8421378,
          805306368: 2,
          1073741824: 512,
          1342177280: 8421890,
          1610612736: 8389122,
          1879048192: 8388608,
          2147483648: 514,
          2415919104: 8389120,
          2684354560: 33280,
          2952790016: 8421376,
          3221225472: 32770,
          3489660928: 8388610,
          3758096384: 0,
          4026531840: 33282,
          134217728: 0,
          402653184: 8421890,
          671088640: 33282,
          939524096: 32768,
          1207959552: 8421888,
          1476395008: 512,
          1744830464: 8421378,
          2013265920: 2,
          2281701376: 8389120,
          2550136832: 33280,
          2818572288: 8421376,
          3087007744: 8389122,
          3355443200: 8388610,
          3623878656: 32770,
          3892314112: 514,
          4160749568: 8388608,
          1: 32768,
          268435457: 2,
          536870913: 8421888,
          805306369: 8388608,
          1073741825: 8421378,
          1342177281: 33280,
          1610612737: 512,
          1879048193: 8389122,
          2147483649: 8421890,
          2415919105: 8421376,
          2684354561: 8388610,
          2952790017: 33282,
          3221225473: 514,
          3489660929: 8389120,
          3758096385: 32770,
          4026531841: 0,
          134217729: 8421890,
          402653185: 8421376,
          671088641: 8388608,
          939524097: 512,
          1207959553: 32768,
          1476395009: 8388610,
          1744830465: 2,
          2013265921: 33282,
          2281701377: 32770,
          2550136833: 8389122,
          2818572289: 514,
          3087007745: 8421888,
          3355443201: 8389120,
          3623878657: 0,
          3892314113: 33280,
          4160749569: 8421378
        },
        {
          0: 1074282512,
          16777216: 16384,
          33554432: 524288,
          50331648: 1074266128,
          67108864: 1073741840,
          83886080: 1074282496,
          100663296: 1073758208,
          117440512: 16,
          134217728: 540672,
          150994944: 1073758224,
          167772160: 1073741824,
          184549376: 540688,
          201326592: 524304,
          218103808: 0,
          234881024: 16400,
          251658240: 1074266112,
          8388608: 1073758208,
          25165824: 540688,
          41943040: 16,
          58720256: 1073758224,
          75497472: 1074282512,
          92274688: 1073741824,
          109051904: 524288,
          125829120: 1074266128,
          142606336: 524304,
          159383552: 0,
          176160768: 16384,
          192937984: 1074266112,
          209715200: 1073741840,
          226492416: 540672,
          243269632: 1074282496,
          260046848: 16400,
          268435456: 0,
          285212672: 1074266128,
          301989888: 1073758224,
          318767104: 1074282496,
          335544320: 1074266112,
          352321536: 16,
          369098752: 540688,
          385875968: 16384,
          402653184: 16400,
          419430400: 524288,
          436207616: 524304,
          452984832: 1073741840,
          469762048: 540672,
          486539264: 1073758208,
          503316480: 1073741824,
          520093696: 1074282512,
          276824064: 540688,
          293601280: 524288,
          310378496: 1074266112,
          327155712: 16384,
          343932928: 1073758208,
          360710144: 1074282512,
          377487360: 16,
          394264576: 1073741824,
          411041792: 1074282496,
          427819008: 1073741840,
          444596224: 1073758224,
          461373440: 524304,
          478150656: 0,
          494927872: 16400,
          511705088: 1074266128,
          528482304: 540672
        },
        {
          0: 260,
          1048576: 0,
          2097152: 67109120,
          3145728: 65796,
          4194304: 65540,
          5242880: 67108868,
          6291456: 67174660,
          7340032: 67174400,
          8388608: 67108864,
          9437184: 67174656,
          10485760: 65792,
          11534336: 67174404,
          12582912: 67109124,
          13631488: 65536,
          14680064: 4,
          15728640: 256,
          524288: 67174656,
          1572864: 67174404,
          2621440: 0,
          3670016: 67109120,
          4718592: 67108868,
          5767168: 65536,
          6815744: 65540,
          7864320: 260,
          8912896: 4,
          9961472: 256,
          11010048: 67174400,
          12058624: 65796,
          13107200: 65792,
          14155776: 67109124,
          15204352: 67174660,
          16252928: 67108864,
          16777216: 67174656,
          17825792: 65540,
          18874368: 65536,
          19922944: 67109120,
          20971520: 256,
          22020096: 67174660,
          23068672: 67108868,
          24117248: 0,
          25165824: 67109124,
          26214400: 67108864,
          27262976: 4,
          28311552: 65792,
          29360128: 67174400,
          30408704: 260,
          31457280: 65796,
          32505856: 67174404,
          17301504: 67108864,
          18350080: 260,
          19398656: 67174656,
          20447232: 0,
          21495808: 65540,
          22544384: 67109120,
          23592960: 256,
          24641536: 67174404,
          25690112: 65536,
          26738688: 67174660,
          27787264: 65796,
          28835840: 67108868,
          29884416: 67109124,
          30932992: 67174400,
          31981568: 4,
          33030144: 65792
        },
        {
          0: 2151682048,
          65536: 2147487808,
          131072: 4198464,
          196608: 2151677952,
          262144: 0,
          327680: 4198400,
          393216: 2147483712,
          458752: 4194368,
          524288: 2147483648,
          589824: 4194304,
          655360: 64,
          720896: 2147487744,
          786432: 2151678016,
          851968: 4160,
          917504: 4096,
          983040: 2151682112,
          32768: 2147487808,
          98304: 64,
          163840: 2151678016,
          229376: 2147487744,
          294912: 4198400,
          360448: 2151682112,
          425984: 0,
          491520: 2151677952,
          557056: 4096,
          622592: 2151682048,
          688128: 4194304,
          753664: 4160,
          819200: 2147483648,
          884736: 4194368,
          950272: 4198464,
          1015808: 2147483712,
          1048576: 4194368,
          1114112: 4198400,
          1179648: 2147483712,
          1245184: 0,
          1310720: 4160,
          1376256: 2151678016,
          1441792: 2151682048,
          1507328: 2147487808,
          1572864: 2151682112,
          1638400: 2147483648,
          1703936: 2151677952,
          1769472: 4198464,
          1835008: 2147487744,
          1900544: 4194304,
          1966080: 64,
          2031616: 4096,
          1081344: 2151677952,
          1146880: 2151682112,
          1212416: 0,
          1277952: 4198400,
          1343488: 4194368,
          1409024: 2147483648,
          1474560: 2147487808,
          1540096: 64,
          1605632: 2147483712,
          1671168: 4096,
          1736704: 2147487744,
          1802240: 2151678016,
          1867776: 4160,
          1933312: 2151682048,
          1998848: 4194304,
          2064384: 4198464
        },
        {
          0: 128,
          4096: 17039360,
          8192: 262144,
          12288: 536870912,
          16384: 537133184,
          20480: 16777344,
          24576: 553648256,
          28672: 262272,
          32768: 16777216,
          36864: 537133056,
          40960: 536871040,
          45056: 553910400,
          49152: 553910272,
          53248: 0,
          57344: 17039488,
          61440: 553648128,
          2048: 17039488,
          6144: 553648256,
          10240: 128,
          14336: 17039360,
          18432: 262144,
          22528: 537133184,
          26624: 553910272,
          30720: 536870912,
          34816: 537133056,
          38912: 0,
          43008: 553910400,
          47104: 16777344,
          51200: 536871040,
          55296: 553648128,
          59392: 16777216,
          63488: 262272,
          65536: 262144,
          69632: 128,
          73728: 536870912,
          77824: 553648256,
          81920: 16777344,
          86016: 553910272,
          90112: 537133184,
          94208: 16777216,
          98304: 553910400,
          102400: 553648128,
          106496: 17039360,
          110592: 537133056,
          114688: 262272,
          118784: 536871040,
          122880: 0,
          126976: 17039488,
          67584: 553648256,
          71680: 16777216,
          75776: 17039360,
          79872: 537133184,
          83968: 536870912,
          88064: 17039488,
          92160: 128,
          96256: 553910272,
          100352: 262272,
          104448: 553910400,
          108544: 0,
          112640: 553648128,
          116736: 16777344,
          120832: 262144,
          124928: 537133056,
          129024: 536871040
        },
        {
          0: 268435464,
          256: 8192,
          512: 270532608,
          768: 270540808,
          1024: 268443648,
          1280: 2097152,
          1536: 2097160,
          1792: 268435456,
          2048: 0,
          2304: 268443656,
          2560: 2105344,
          2816: 8,
          3072: 270532616,
          3328: 2105352,
          3584: 8200,
          3840: 270540800,
          128: 270532608,
          384: 270540808,
          640: 8,
          896: 2097152,
          1152: 2105352,
          1408: 268435464,
          1664: 268443648,
          1920: 8200,
          2176: 2097160,
          2432: 8192,
          2688: 268443656,
          2944: 270532616,
          3200: 0,
          3456: 270540800,
          3712: 2105344,
          3968: 268435456,
          4096: 268443648,
          4352: 270532616,
          4608: 270540808,
          4864: 8200,
          5120: 2097152,
          5376: 268435456,
          5632: 268435464,
          5888: 2105344,
          6144: 2105352,
          6400: 0,
          6656: 8,
          6912: 270532608,
          7168: 8192,
          7424: 268443656,
          7680: 270540800,
          7936: 2097160,
          4224: 8,
          4480: 2105344,
          4736: 2097152,
          4992: 268435464,
          5248: 268443648,
          5504: 8200,
          5760: 270540808,
          6016: 270532608,
          6272: 270540800,
          6528: 270532616,
          6784: 8192,
          7040: 2105352,
          7296: 2097160,
          7552: 0,
          7808: 268435456,
          8064: 268443656
        },
        {
          0: 1048576,
          16: 33555457,
          32: 1024,
          48: 1049601,
          64: 34604033,
          80: 0,
          96: 1,
          112: 34603009,
          128: 33555456,
          144: 1048577,
          160: 33554433,
          176: 34604032,
          192: 34603008,
          208: 1025,
          224: 1049600,
          240: 33554432,
          8: 34603009,
          24: 0,
          40: 33555457,
          56: 34604032,
          72: 1048576,
          88: 33554433,
          104: 33554432,
          120: 1025,
          136: 1049601,
          152: 33555456,
          168: 34603008,
          184: 1048577,
          200: 1024,
          216: 34604033,
          232: 1,
          248: 1049600,
          256: 33554432,
          272: 1048576,
          288: 33555457,
          304: 34603009,
          320: 1048577,
          336: 33555456,
          352: 34604032,
          368: 1049601,
          384: 1025,
          400: 34604033,
          416: 1049600,
          432: 1,
          448: 0,
          464: 34603008,
          480: 33554433,
          496: 1024,
          264: 1049600,
          280: 33555457,
          296: 34603009,
          312: 1,
          328: 33554432,
          344: 1048576,
          360: 1025,
          376: 34604032,
          392: 33554433,
          408: 34603008,
          424: 0,
          440: 34604033,
          456: 1049601,
          472: 1024,
          488: 33555456,
          504: 1048577
        },
        {
          0: 134219808,
          1: 131072,
          2: 134217728,
          3: 32,
          4: 131104,
          5: 134350880,
          6: 134350848,
          7: 2048,
          8: 134348800,
          9: 134219776,
          10: 133120,
          11: 134348832,
          12: 2080,
          13: 0,
          14: 134217760,
          15: 133152,
          2147483648: 2048,
          2147483649: 134350880,
          2147483650: 134219808,
          2147483651: 134217728,
          2147483652: 134348800,
          2147483653: 133120,
          2147483654: 133152,
          2147483655: 32,
          2147483656: 134217760,
          2147483657: 2080,
          2147483658: 131104,
          2147483659: 134350848,
          2147483660: 0,
          2147483661: 134348832,
          2147483662: 134219776,
          2147483663: 131072,
          16: 133152,
          17: 134350848,
          18: 32,
          19: 2048,
          20: 134219776,
          21: 134217760,
          22: 134348832,
          23: 131072,
          24: 0,
          25: 131104,
          26: 134348800,
          27: 134219808,
          28: 134350880,
          29: 133120,
          30: 2080,
          31: 134217728,
          2147483664: 131072,
          2147483665: 2048,
          2147483666: 134348832,
          2147483667: 133152,
          2147483668: 32,
          2147483669: 134348800,
          2147483670: 134217728,
          2147483671: 134219808,
          2147483672: 134350880,
          2147483673: 134217760,
          2147483674: 134219776,
          2147483675: 0,
          2147483676: 133120,
          2147483677: 2080,
          2147483678: 131104,
          2147483679: 134350848
        }
      ];
      var SBOX_MASK = [
        4160749569,
        528482304,
        33030144,
        2064384,
        129024,
        8064,
        504,
        2147483679
      ];
      var DES = C_algo.DES = BlockCipher.extend({
        _doReset: function() {
          var key = this._key;
          var keyWords = key.words;
          var keyBits = [];
          for (var i3 = 0;i3 < 56; i3++) {
            var keyBitPos = PC1[i3] - 1;
            keyBits[i3] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
          }
          var subKeys = this._subKeys = [];
          for (var nSubKey = 0;nSubKey < 16; nSubKey++) {
            var subKey = subKeys[nSubKey] = [];
            var bitShift = BIT_SHIFTS[nSubKey];
            for (var i3 = 0;i3 < 24; i3++) {
              subKey[i3 / 6 | 0] |= keyBits[(PC2[i3] - 1 + bitShift) % 28] << 31 - i3 % 6;
              subKey[4 + (i3 / 6 | 0)] |= keyBits[28 + (PC2[i3 + 24] - 1 + bitShift) % 28] << 31 - i3 % 6;
            }
            subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
            for (var i3 = 1;i3 < 7; i3++) {
              subKey[i3] = subKey[i3] >>> (i3 - 1) * 4 + 3;
            }
            subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
          }
          var invSubKeys = this._invSubKeys = [];
          for (var i3 = 0;i3 < 16; i3++) {
            invSubKeys[i3] = subKeys[15 - i3];
          }
        },
        encryptBlock: function(M, offset) {
          this._doCryptBlock(M, offset, this._subKeys);
        },
        decryptBlock: function(M, offset) {
          this._doCryptBlock(M, offset, this._invSubKeys);
        },
        _doCryptBlock: function(M, offset, subKeys) {
          this._lBlock = M[offset];
          this._rBlock = M[offset + 1];
          exchangeLR.call(this, 4, 252645135);
          exchangeLR.call(this, 16, 65535);
          exchangeRL.call(this, 2, 858993459);
          exchangeRL.call(this, 8, 16711935);
          exchangeLR.call(this, 1, 1431655765);
          for (var round = 0;round < 16; round++) {
            var subKey = subKeys[round];
            var lBlock = this._lBlock;
            var rBlock = this._rBlock;
            var f3 = 0;
            for (var i3 = 0;i3 < 8; i3++) {
              f3 |= SBOX_P[i3][((rBlock ^ subKey[i3]) & SBOX_MASK[i3]) >>> 0];
            }
            this._lBlock = rBlock;
            this._rBlock = lBlock ^ f3;
          }
          var t3 = this._lBlock;
          this._lBlock = this._rBlock;
          this._rBlock = t3;
          exchangeLR.call(this, 1, 1431655765);
          exchangeRL.call(this, 8, 16711935);
          exchangeRL.call(this, 2, 858993459);
          exchangeLR.call(this, 16, 65535);
          exchangeLR.call(this, 4, 252645135);
          M[offset] = this._lBlock;
          M[offset + 1] = this._rBlock;
        },
        keySize: 64 / 32,
        ivSize: 64 / 32,
        blockSize: 64 / 32
      });
      function exchangeLR(offset, mask) {
        var t3 = (this._lBlock >>> offset ^ this._rBlock) & mask;
        this._rBlock ^= t3;
        this._lBlock ^= t3 << offset;
      }
      function exchangeRL(offset, mask) {
        var t3 = (this._rBlock >>> offset ^ this._lBlock) & mask;
        this._lBlock ^= t3;
        this._rBlock ^= t3 << offset;
      }
      C.DES = BlockCipher._createHelper(DES);
      var TripleDES = C_algo.TripleDES = BlockCipher.extend({
        _doReset: function() {
          var key = this._key;
          var keyWords = key.words;
          if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
            throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
          }
          var key1 = keyWords.slice(0, 2);
          var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
          var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
          this._des1 = DES.createEncryptor(WordArray.create(key1));
          this._des2 = DES.createEncryptor(WordArray.create(key2));
          this._des3 = DES.createEncryptor(WordArray.create(key3));
        },
        encryptBlock: function(M, offset) {
          this._des1.encryptBlock(M, offset);
          this._des2.decryptBlock(M, offset);
          this._des3.encryptBlock(M, offset);
        },
        decryptBlock: function(M, offset) {
          this._des3.decryptBlock(M, offset);
          this._des2.encryptBlock(M, offset);
          this._des1.decryptBlock(M, offset);
        },
        keySize: 192 / 32,
        ivSize: 64 / 32,
        blockSize: 64 / 32
      });
      C.TripleDES = BlockCipher._createHelper(TripleDES);
    })();
    return CryptoJS.TripleDES;
  });
});

// node_modules/crypto-js/rc4.js
var require_rc4 = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var StreamCipher = C_lib.StreamCipher;
      var C_algo = C.algo;
      var RC4 = C_algo.RC4 = StreamCipher.extend({
        _doReset: function() {
          var key = this._key;
          var keyWords = key.words;
          var keySigBytes = key.sigBytes;
          var S = this._S = [];
          for (var i3 = 0;i3 < 256; i3++) {
            S[i3] = i3;
          }
          for (var i3 = 0, j = 0;i3 < 256; i3++) {
            var keyByteIndex = i3 % keySigBytes;
            var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
            j = (j + S[i3] + keyByte) % 256;
            var t3 = S[i3];
            S[i3] = S[j];
            S[j] = t3;
          }
          this._i = this._j = 0;
        },
        _doProcessBlock: function(M, offset) {
          M[offset] ^= generateKeystreamWord.call(this);
        },
        keySize: 256 / 32,
        ivSize: 0
      });
      function generateKeystreamWord() {
        var S = this._S;
        var i3 = this._i;
        var j = this._j;
        var keystreamWord = 0;
        for (var n3 = 0;n3 < 4; n3++) {
          i3 = (i3 + 1) % 256;
          j = (j + S[i3]) % 256;
          var t3 = S[i3];
          S[i3] = S[j];
          S[j] = t3;
          keystreamWord |= S[(S[i3] + S[j]) % 256] << 24 - n3 * 8;
        }
        this._i = i3;
        this._j = j;
        return keystreamWord;
      }
      C.RC4 = StreamCipher._createHelper(RC4);
      var RC4Drop = C_algo.RC4Drop = RC4.extend({
        cfg: RC4.cfg.extend({
          drop: 192
        }),
        _doReset: function() {
          RC4._doReset.call(this);
          for (var i3 = this.cfg.drop;i3 > 0; i3--) {
            generateKeystreamWord.call(this);
          }
        }
      });
      C.RC4Drop = StreamCipher._createHelper(RC4Drop);
    })();
    return CryptoJS.RC4;
  });
});

// node_modules/crypto-js/rabbit.js
var require_rabbit = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var StreamCipher = C_lib.StreamCipher;
      var C_algo = C.algo;
      var S = [];
      var C_ = [];
      var G = [];
      var Rabbit = C_algo.Rabbit = StreamCipher.extend({
        _doReset: function() {
          var K = this._key.words;
          var iv = this.cfg.iv;
          for (var i3 = 0;i3 < 4; i3++) {
            K[i3] = (K[i3] << 8 | K[i3] >>> 24) & 16711935 | (K[i3] << 24 | K[i3] >>> 8) & 4278255360;
          }
          var X = this._X = [
            K[0],
            K[3] << 16 | K[2] >>> 16,
            K[1],
            K[0] << 16 | K[3] >>> 16,
            K[2],
            K[1] << 16 | K[0] >>> 16,
            K[3],
            K[2] << 16 | K[1] >>> 16
          ];
          var C4 = this._C = [
            K[2] << 16 | K[2] >>> 16,
            K[0] & 4294901760 | K[1] & 65535,
            K[3] << 16 | K[3] >>> 16,
            K[1] & 4294901760 | K[2] & 65535,
            K[0] << 16 | K[0] >>> 16,
            K[2] & 4294901760 | K[3] & 65535,
            K[1] << 16 | K[1] >>> 16,
            K[3] & 4294901760 | K[0] & 65535
          ];
          this._b = 0;
          for (var i3 = 0;i3 < 4; i3++) {
            nextState.call(this);
          }
          for (var i3 = 0;i3 < 8; i3++) {
            C4[i3] ^= X[i3 + 4 & 7];
          }
          if (iv) {
            var IV = iv.words;
            var IV_0 = IV[0];
            var IV_1 = IV[1];
            var i02 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
            var i22 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
            var i12 = i02 >>> 16 | i22 & 4294901760;
            var i32 = i22 << 16 | i02 & 65535;
            C4[0] ^= i02;
            C4[1] ^= i12;
            C4[2] ^= i22;
            C4[3] ^= i32;
            C4[4] ^= i02;
            C4[5] ^= i12;
            C4[6] ^= i22;
            C4[7] ^= i32;
            for (var i3 = 0;i3 < 4; i3++) {
              nextState.call(this);
            }
          }
        },
        _doProcessBlock: function(M, offset) {
          var X = this._X;
          nextState.call(this);
          S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
          S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
          S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
          S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
          for (var i3 = 0;i3 < 4; i3++) {
            S[i3] = (S[i3] << 8 | S[i3] >>> 24) & 16711935 | (S[i3] << 24 | S[i3] >>> 8) & 4278255360;
            M[offset + i3] ^= S[i3];
          }
        },
        blockSize: 128 / 32,
        ivSize: 64 / 32
      });
      function nextState() {
        var X = this._X;
        var C4 = this._C;
        for (var i3 = 0;i3 < 8; i3++) {
          C_[i3] = C4[i3];
        }
        C4[0] = C4[0] + 1295307597 + this._b | 0;
        C4[1] = C4[1] + 3545052371 + (C4[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
        C4[2] = C4[2] + 886263092 + (C4[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
        C4[3] = C4[3] + 1295307597 + (C4[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
        C4[4] = C4[4] + 3545052371 + (C4[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
        C4[5] = C4[5] + 886263092 + (C4[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
        C4[6] = C4[6] + 1295307597 + (C4[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
        C4[7] = C4[7] + 3545052371 + (C4[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
        this._b = C4[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
        for (var i3 = 0;i3 < 8; i3++) {
          var gx = X[i3] + C4[i3];
          var ga = gx & 65535;
          var gb = gx >>> 16;
          var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
          var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
          G[i3] = gh ^ gl;
        }
        X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
        X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
        X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
        X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
        X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
        X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
        X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
        X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
      }
      C.Rabbit = StreamCipher._createHelper(Rabbit);
    })();
    return CryptoJS.Rabbit;
  });
});

// node_modules/crypto-js/rabbit-legacy.js
var require_rabbit_legacy = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var StreamCipher = C_lib.StreamCipher;
      var C_algo = C.algo;
      var S = [];
      var C_ = [];
      var G = [];
      var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
        _doReset: function() {
          var K = this._key.words;
          var iv = this.cfg.iv;
          var X = this._X = [
            K[0],
            K[3] << 16 | K[2] >>> 16,
            K[1],
            K[0] << 16 | K[3] >>> 16,
            K[2],
            K[1] << 16 | K[0] >>> 16,
            K[3],
            K[2] << 16 | K[1] >>> 16
          ];
          var C4 = this._C = [
            K[2] << 16 | K[2] >>> 16,
            K[0] & 4294901760 | K[1] & 65535,
            K[3] << 16 | K[3] >>> 16,
            K[1] & 4294901760 | K[2] & 65535,
            K[0] << 16 | K[0] >>> 16,
            K[2] & 4294901760 | K[3] & 65535,
            K[1] << 16 | K[1] >>> 16,
            K[3] & 4294901760 | K[0] & 65535
          ];
          this._b = 0;
          for (var i3 = 0;i3 < 4; i3++) {
            nextState.call(this);
          }
          for (var i3 = 0;i3 < 8; i3++) {
            C4[i3] ^= X[i3 + 4 & 7];
          }
          if (iv) {
            var IV = iv.words;
            var IV_0 = IV[0];
            var IV_1 = IV[1];
            var i02 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
            var i22 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
            var i12 = i02 >>> 16 | i22 & 4294901760;
            var i32 = i22 << 16 | i02 & 65535;
            C4[0] ^= i02;
            C4[1] ^= i12;
            C4[2] ^= i22;
            C4[3] ^= i32;
            C4[4] ^= i02;
            C4[5] ^= i12;
            C4[6] ^= i22;
            C4[7] ^= i32;
            for (var i3 = 0;i3 < 4; i3++) {
              nextState.call(this);
            }
          }
        },
        _doProcessBlock: function(M, offset) {
          var X = this._X;
          nextState.call(this);
          S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
          S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
          S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
          S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
          for (var i3 = 0;i3 < 4; i3++) {
            S[i3] = (S[i3] << 8 | S[i3] >>> 24) & 16711935 | (S[i3] << 24 | S[i3] >>> 8) & 4278255360;
            M[offset + i3] ^= S[i3];
          }
        },
        blockSize: 128 / 32,
        ivSize: 64 / 32
      });
      function nextState() {
        var X = this._X;
        var C4 = this._C;
        for (var i3 = 0;i3 < 8; i3++) {
          C_[i3] = C4[i3];
        }
        C4[0] = C4[0] + 1295307597 + this._b | 0;
        C4[1] = C4[1] + 3545052371 + (C4[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
        C4[2] = C4[2] + 886263092 + (C4[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
        C4[3] = C4[3] + 1295307597 + (C4[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
        C4[4] = C4[4] + 3545052371 + (C4[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
        C4[5] = C4[5] + 886263092 + (C4[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
        C4[6] = C4[6] + 1295307597 + (C4[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
        C4[7] = C4[7] + 3545052371 + (C4[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
        this._b = C4[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
        for (var i3 = 0;i3 < 8; i3++) {
          var gx = X[i3] + C4[i3];
          var ga = gx & 65535;
          var gb = gx >>> 16;
          var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
          var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
          G[i3] = gh ^ gl;
        }
        X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
        X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
        X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
        X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
        X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
        X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
        X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
        X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
      }
      C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
    })();
    return CryptoJS.RabbitLegacy;
  });
});

// node_modules/crypto-js/blowfish.js
var require_blowfish = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
    } else {
      factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var BlockCipher = C_lib.BlockCipher;
      var C_algo = C.algo;
      const N = 16;
      const ORIG_P = [
        608135816,
        2242054355,
        320440878,
        57701188,
        2752067618,
        698298832,
        137296536,
        3964562569,
        1160258022,
        953160567,
        3193202383,
        887688300,
        3232508343,
        3380367581,
        1065670069,
        3041331479,
        2450970073,
        2306472731
      ];
      const ORIG_S = [
        [
          3509652390,
          2564797868,
          805139163,
          3491422135,
          3101798381,
          1780907670,
          3128725573,
          4046225305,
          614570311,
          3012652279,
          134345442,
          2240740374,
          1667834072,
          1901547113,
          2757295779,
          4103290238,
          227898511,
          1921955416,
          1904987480,
          2182433518,
          2069144605,
          3260701109,
          2620446009,
          720527379,
          3318853667,
          677414384,
          3393288472,
          3101374703,
          2390351024,
          1614419982,
          1822297739,
          2954791486,
          3608508353,
          3174124327,
          2024746970,
          1432378464,
          3864339955,
          2857741204,
          1464375394,
          1676153920,
          1439316330,
          715854006,
          3033291828,
          289532110,
          2706671279,
          2087905683,
          3018724369,
          1668267050,
          732546397,
          1947742710,
          3462151702,
          2609353502,
          2950085171,
          1814351708,
          2050118529,
          680887927,
          999245976,
          1800124847,
          3300911131,
          1713906067,
          1641548236,
          4213287313,
          1216130144,
          1575780402,
          4018429277,
          3917837745,
          3693486850,
          3949271944,
          596196993,
          3549867205,
          258830323,
          2213823033,
          772490370,
          2760122372,
          1774776394,
          2652871518,
          566650946,
          4142492826,
          1728879713,
          2882767088,
          1783734482,
          3629395816,
          2517608232,
          2874225571,
          1861159788,
          326777828,
          3124490320,
          2130389656,
          2716951837,
          967770486,
          1724537150,
          2185432712,
          2364442137,
          1164943284,
          2105845187,
          998989502,
          3765401048,
          2244026483,
          1075463327,
          1455516326,
          1322494562,
          910128902,
          469688178,
          1117454909,
          936433444,
          3490320968,
          3675253459,
          1240580251,
          122909385,
          2157517691,
          634681816,
          4142456567,
          3825094682,
          3061402683,
          2540495037,
          79693498,
          3249098678,
          1084186820,
          1583128258,
          426386531,
          1761308591,
          1047286709,
          322548459,
          995290223,
          1845252383,
          2603652396,
          3431023940,
          2942221577,
          3202600964,
          3727903485,
          1712269319,
          422464435,
          3234572375,
          1170764815,
          3523960633,
          3117677531,
          1434042557,
          442511882,
          3600875718,
          1076654713,
          1738483198,
          4213154764,
          2393238008,
          3677496056,
          1014306527,
          4251020053,
          793779912,
          2902807211,
          842905082,
          4246964064,
          1395751752,
          1040244610,
          2656851899,
          3396308128,
          445077038,
          3742853595,
          3577915638,
          679411651,
          2892444358,
          2354009459,
          1767581616,
          3150600392,
          3791627101,
          3102740896,
          284835224,
          4246832056,
          1258075500,
          768725851,
          2589189241,
          3069724005,
          3532540348,
          1274779536,
          3789419226,
          2764799539,
          1660621633,
          3471099624,
          4011903706,
          913787905,
          3497959166,
          737222580,
          2514213453,
          2928710040,
          3937242737,
          1804850592,
          3499020752,
          2949064160,
          2386320175,
          2390070455,
          2415321851,
          4061277028,
          2290661394,
          2416832540,
          1336762016,
          1754252060,
          3520065937,
          3014181293,
          791618072,
          3188594551,
          3933548030,
          2332172193,
          3852520463,
          3043980520,
          413987798,
          3465142937,
          3030929376,
          4245938359,
          2093235073,
          3534596313,
          375366246,
          2157278981,
          2479649556,
          555357303,
          3870105701,
          2008414854,
          3344188149,
          4221384143,
          3956125452,
          2067696032,
          3594591187,
          2921233993,
          2428461,
          544322398,
          577241275,
          1471733935,
          610547355,
          4027169054,
          1432588573,
          1507829418,
          2025931657,
          3646575487,
          545086370,
          48609733,
          2200306550,
          1653985193,
          298326376,
          1316178497,
          3007786442,
          2064951626,
          458293330,
          2589141269,
          3591329599,
          3164325604,
          727753846,
          2179363840,
          146436021,
          1461446943,
          4069977195,
          705550613,
          3059967265,
          3887724982,
          4281599278,
          3313849956,
          1404054877,
          2845806497,
          146425753,
          1854211946
        ],
        [
          1266315497,
          3048417604,
          3681880366,
          3289982499,
          2909710000,
          1235738493,
          2632868024,
          2414719590,
          3970600049,
          1771706367,
          1449415276,
          3266420449,
          422970021,
          1963543593,
          2690192192,
          3826793022,
          1062508698,
          1531092325,
          1804592342,
          2583117782,
          2714934279,
          4024971509,
          1294809318,
          4028980673,
          1289560198,
          2221992742,
          1669523910,
          35572830,
          157838143,
          1052438473,
          1016535060,
          1802137761,
          1753167236,
          1386275462,
          3080475397,
          2857371447,
          1040679964,
          2145300060,
          2390574316,
          1461121720,
          2956646967,
          4031777805,
          4028374788,
          33600511,
          2920084762,
          1018524850,
          629373528,
          3691585981,
          3515945977,
          2091462646,
          2486323059,
          586499841,
          988145025,
          935516892,
          3367335476,
          2599673255,
          2839830854,
          265290510,
          3972581182,
          2759138881,
          3795373465,
          1005194799,
          847297441,
          406762289,
          1314163512,
          1332590856,
          1866599683,
          4127851711,
          750260880,
          613907577,
          1450815602,
          3165620655,
          3734664991,
          3650291728,
          3012275730,
          3704569646,
          1427272223,
          778793252,
          1343938022,
          2676280711,
          2052605720,
          1946737175,
          3164576444,
          3914038668,
          3967478842,
          3682934266,
          1661551462,
          3294938066,
          4011595847,
          840292616,
          3712170807,
          616741398,
          312560963,
          711312465,
          1351876610,
          322626781,
          1910503582,
          271666773,
          2175563734,
          1594956187,
          70604529,
          3617834859,
          1007753275,
          1495573769,
          4069517037,
          2549218298,
          2663038764,
          504708206,
          2263041392,
          3941167025,
          2249088522,
          1514023603,
          1998579484,
          1312622330,
          694541497,
          2582060303,
          2151582166,
          1382467621,
          776784248,
          2618340202,
          3323268794,
          2497899128,
          2784771155,
          503983604,
          4076293799,
          907881277,
          423175695,
          432175456,
          1378068232,
          4145222326,
          3954048622,
          3938656102,
          3820766613,
          2793130115,
          2977904593,
          26017576,
          3274890735,
          3194772133,
          1700274565,
          1756076034,
          4006520079,
          3677328699,
          720338349,
          1533947780,
          354530856,
          688349552,
          3973924725,
          1637815568,
          332179504,
          3949051286,
          53804574,
          2852348879,
          3044236432,
          1282449977,
          3583942155,
          3416972820,
          4006381244,
          1617046695,
          2628476075,
          3002303598,
          1686838959,
          431878346,
          2686675385,
          1700445008,
          1080580658,
          1009431731,
          832498133,
          3223435511,
          2605976345,
          2271191193,
          2516031870,
          1648197032,
          4164389018,
          2548247927,
          300782431,
          375919233,
          238389289,
          3353747414,
          2531188641,
          2019080857,
          1475708069,
          455242339,
          2609103871,
          448939670,
          3451063019,
          1395535956,
          2413381860,
          1841049896,
          1491858159,
          885456874,
          4264095073,
          4001119347,
          1565136089,
          3898914787,
          1108368660,
          540939232,
          1173283510,
          2745871338,
          3681308437,
          4207628240,
          3343053890,
          4016749493,
          1699691293,
          1103962373,
          3625875870,
          2256883143,
          3830138730,
          1031889488,
          3479347698,
          1535977030,
          4236805024,
          3251091107,
          2132092099,
          1774941330,
          1199868427,
          1452454533,
          157007616,
          2904115357,
          342012276,
          595725824,
          1480756522,
          206960106,
          497939518,
          591360097,
          863170706,
          2375253569,
          3596610801,
          1814182875,
          2094937945,
          3421402208,
          1082520231,
          3463918190,
          2785509508,
          435703966,
          3908032597,
          1641649973,
          2842273706,
          3305899714,
          1510255612,
          2148256476,
          2655287854,
          3276092548,
          4258621189,
          236887753,
          3681803219,
          274041037,
          1734335097,
          3815195456,
          3317970021,
          1899903192,
          1026095262,
          4050517792,
          356393447,
          2410691914,
          3873677099,
          3682840055
        ],
        [
          3913112168,
          2491498743,
          4132185628,
          2489919796,
          1091903735,
          1979897079,
          3170134830,
          3567386728,
          3557303409,
          857797738,
          1136121015,
          1342202287,
          507115054,
          2535736646,
          337727348,
          3213592640,
          1301675037,
          2528481711,
          1895095763,
          1721773893,
          3216771564,
          62756741,
          2142006736,
          835421444,
          2531993523,
          1442658625,
          3659876326,
          2882144922,
          676362277,
          1392781812,
          170690266,
          3921047035,
          1759253602,
          3611846912,
          1745797284,
          664899054,
          1329594018,
          3901205900,
          3045908486,
          2062866102,
          2865634940,
          3543621612,
          3464012697,
          1080764994,
          553557557,
          3656615353,
          3996768171,
          991055499,
          499776247,
          1265440854,
          648242737,
          3940784050,
          980351604,
          3713745714,
          1749149687,
          3396870395,
          4211799374,
          3640570775,
          1161844396,
          3125318951,
          1431517754,
          545492359,
          4268468663,
          3499529547,
          1437099964,
          2702547544,
          3433638243,
          2581715763,
          2787789398,
          1060185593,
          1593081372,
          2418618748,
          4260947970,
          69676912,
          2159744348,
          86519011,
          2512459080,
          3838209314,
          1220612927,
          3339683548,
          133810670,
          1090789135,
          1078426020,
          1569222167,
          845107691,
          3583754449,
          4072456591,
          1091646820,
          628848692,
          1613405280,
          3757631651,
          526609435,
          236106946,
          48312990,
          2942717905,
          3402727701,
          1797494240,
          859738849,
          992217954,
          4005476642,
          2243076622,
          3870952857,
          3732016268,
          765654824,
          3490871365,
          2511836413,
          1685915746,
          3888969200,
          1414112111,
          2273134842,
          3281911079,
          4080962846,
          172450625,
          2569994100,
          980381355,
          4109958455,
          2819808352,
          2716589560,
          2568741196,
          3681446669,
          3329971472,
          1835478071,
          660984891,
          3704678404,
          4045999559,
          3422617507,
          3040415634,
          1762651403,
          1719377915,
          3470491036,
          2693910283,
          3642056355,
          3138596744,
          1364962596,
          2073328063,
          1983633131,
          926494387,
          3423689081,
          2150032023,
          4096667949,
          1749200295,
          3328846651,
          309677260,
          2016342300,
          1779581495,
          3079819751,
          111262694,
          1274766160,
          443224088,
          298511866,
          1025883608,
          3806446537,
          1145181785,
          168956806,
          3641502830,
          3584813610,
          1689216846,
          3666258015,
          3200248200,
          1692713982,
          2646376535,
          4042768518,
          1618508792,
          1610833997,
          3523052358,
          4130873264,
          2001055236,
          3610705100,
          2202168115,
          4028541809,
          2961195399,
          1006657119,
          2006996926,
          3186142756,
          1430667929,
          3210227297,
          1314452623,
          4074634658,
          4101304120,
          2273951170,
          1399257539,
          3367210612,
          3027628629,
          1190975929,
          2062231137,
          2333990788,
          2221543033,
          2438960610,
          1181637006,
          548689776,
          2362791313,
          3372408396,
          3104550113,
          3145860560,
          296247880,
          1970579870,
          3078560182,
          3769228297,
          1714227617,
          3291629107,
          3898220290,
          166772364,
          1251581989,
          493813264,
          448347421,
          195405023,
          2709975567,
          677966185,
          3703036547,
          1463355134,
          2715995803,
          1338867538,
          1343315457,
          2802222074,
          2684532164,
          233230375,
          2599980071,
          2000651841,
          3277868038,
          1638401717,
          4028070440,
          3237316320,
          6314154,
          819756386,
          300326615,
          590932579,
          1405279636,
          3267499572,
          3150704214,
          2428286686,
          3959192993,
          3461946742,
          1862657033,
          1266418056,
          963775037,
          2089974820,
          2263052895,
          1917689273,
          448879540,
          3550394620,
          3981727096,
          150775221,
          3627908307,
          1303187396,
          508620638,
          2975983352,
          2726630617,
          1817252668,
          1876281319,
          1457606340,
          908771278,
          3720792119,
          3617206836,
          2455994898,
          1729034894,
          1080033504
        ],
        [
          976866871,
          3556439503,
          2881648439,
          1522871579,
          1555064734,
          1336096578,
          3548522304,
          2579274686,
          3574697629,
          3205460757,
          3593280638,
          3338716283,
          3079412587,
          564236357,
          2993598910,
          1781952180,
          1464380207,
          3163844217,
          3332601554,
          1699332808,
          1393555694,
          1183702653,
          3581086237,
          1288719814,
          691649499,
          2847557200,
          2895455976,
          3193889540,
          2717570544,
          1781354906,
          1676643554,
          2592534050,
          3230253752,
          1126444790,
          2770207658,
          2633158820,
          2210423226,
          2615765581,
          2414155088,
          3127139286,
          673620729,
          2805611233,
          1269405062,
          4015350505,
          3341807571,
          4149409754,
          1057255273,
          2012875353,
          2162469141,
          2276492801,
          2601117357,
          993977747,
          3918593370,
          2654263191,
          753973209,
          36408145,
          2530585658,
          25011837,
          3520020182,
          2088578344,
          530523599,
          2918365339,
          1524020338,
          1518925132,
          3760827505,
          3759777254,
          1202760957,
          3985898139,
          3906192525,
          674977740,
          4174734889,
          2031300136,
          2019492241,
          3983892565,
          4153806404,
          3822280332,
          352677332,
          2297720250,
          60907813,
          90501309,
          3286998549,
          1016092578,
          2535922412,
          2839152426,
          457141659,
          509813237,
          4120667899,
          652014361,
          1966332200,
          2975202805,
          55981186,
          2327461051,
          676427537,
          3255491064,
          2882294119,
          3433927263,
          1307055953,
          942726286,
          933058658,
          2468411793,
          3933900994,
          4215176142,
          1361170020,
          2001714738,
          2830558078,
          3274259782,
          1222529897,
          1679025792,
          2729314320,
          3714953764,
          1770335741,
          151462246,
          3013232138,
          1682292957,
          1483529935,
          471910574,
          1539241949,
          458788160,
          3436315007,
          1807016891,
          3718408830,
          978976581,
          1043663428,
          3165965781,
          1927990952,
          4200891579,
          2372276910,
          3208408903,
          3533431907,
          1412390302,
          2931980059,
          4132332400,
          1947078029,
          3881505623,
          4168226417,
          2941484381,
          1077988104,
          1320477388,
          886195818,
          18198404,
          3786409000,
          2509781533,
          112762804,
          3463356488,
          1866414978,
          891333506,
          18488651,
          661792760,
          1628790961,
          3885187036,
          3141171499,
          876946877,
          2693282273,
          1372485963,
          791857591,
          2686433993,
          3759982718,
          3167212022,
          3472953795,
          2716379847,
          445679433,
          3561995674,
          3504004811,
          3574258232,
          54117162,
          3331405415,
          2381918588,
          3769707343,
          4154350007,
          1140177722,
          4074052095,
          668550556,
          3214352940,
          367459370,
          261225585,
          2610173221,
          4209349473,
          3468074219,
          3265815641,
          314222801,
          3066103646,
          3808782860,
          282218597,
          3406013506,
          3773591054,
          379116347,
          1285071038,
          846784868,
          2669647154,
          3771962079,
          3550491691,
          2305946142,
          453669953,
          1268987020,
          3317592352,
          3279303384,
          3744833421,
          2610507566,
          3859509063,
          266596637,
          3847019092,
          517658769,
          3462560207,
          3443424879,
          370717030,
          4247526661,
          2224018117,
          4143653529,
          4112773975,
          2788324899,
          2477274417,
          1456262402,
          2901442914,
          1517677493,
          1846949527,
          2295493580,
          3734397586,
          2176403920,
          1280348187,
          1908823572,
          3871786941,
          846861322,
          1172426758,
          3287448474,
          3383383037,
          1655181056,
          3139813346,
          901632758,
          1897031941,
          2986607138,
          3066810236,
          3447102507,
          1393639104,
          373351379,
          950779232,
          625454576,
          3124240540,
          4148612726,
          2007998917,
          544563296,
          2244738638,
          2330496472,
          2058025392,
          1291430526,
          424198748,
          50039436,
          29584100,
          3605783033,
          2429876329,
          2791104160,
          1057563949,
          3255363231,
          3075367218,
          3463963227,
          1469046755,
          985887462
        ]
      ];
      var BLOWFISH_CTX = {
        pbox: [],
        sbox: []
      };
      function F(ctx, x3) {
        let a = x3 >> 24 & 255;
        let b = x3 >> 16 & 255;
        let c3 = x3 >> 8 & 255;
        let d3 = x3 & 255;
        let y3 = ctx.sbox[0][a] + ctx.sbox[1][b];
        y3 = y3 ^ ctx.sbox[2][c3];
        y3 = y3 + ctx.sbox[3][d3];
        return y3;
      }
      function BlowFish_Encrypt(ctx, left, right) {
        let Xl = left;
        let Xr = right;
        let temp;
        for (let i3 = 0;i3 < N; ++i3) {
          Xl = Xl ^ ctx.pbox[i3];
          Xr = F(ctx, Xl) ^ Xr;
          temp = Xl;
          Xl = Xr;
          Xr = temp;
        }
        temp = Xl;
        Xl = Xr;
        Xr = temp;
        Xr = Xr ^ ctx.pbox[N];
        Xl = Xl ^ ctx.pbox[N + 1];
        return { left: Xl, right: Xr };
      }
      function BlowFish_Decrypt(ctx, left, right) {
        let Xl = left;
        let Xr = right;
        let temp;
        for (let i3 = N + 1;i3 > 1; --i3) {
          Xl = Xl ^ ctx.pbox[i3];
          Xr = F(ctx, Xl) ^ Xr;
          temp = Xl;
          Xl = Xr;
          Xr = temp;
        }
        temp = Xl;
        Xl = Xr;
        Xr = temp;
        Xr = Xr ^ ctx.pbox[1];
        Xl = Xl ^ ctx.pbox[0];
        return { left: Xl, right: Xr };
      }
      function BlowFishInit(ctx, key, keysize) {
        for (let Row = 0;Row < 4; Row++) {
          ctx.sbox[Row] = [];
          for (let Col = 0;Col < 256; Col++) {
            ctx.sbox[Row][Col] = ORIG_S[Row][Col];
          }
        }
        let keyIndex = 0;
        for (let index = 0;index < N + 2; index++) {
          ctx.pbox[index] = ORIG_P[index] ^ key[keyIndex];
          keyIndex++;
          if (keyIndex >= keysize) {
            keyIndex = 0;
          }
        }
        let Data1 = 0;
        let Data2 = 0;
        let res = 0;
        for (let i3 = 0;i3 < N + 2; i3 += 2) {
          res = BlowFish_Encrypt(ctx, Data1, Data2);
          Data1 = res.left;
          Data2 = res.right;
          ctx.pbox[i3] = Data1;
          ctx.pbox[i3 + 1] = Data2;
        }
        for (let i3 = 0;i3 < 4; i3++) {
          for (let j = 0;j < 256; j += 2) {
            res = BlowFish_Encrypt(ctx, Data1, Data2);
            Data1 = res.left;
            Data2 = res.right;
            ctx.sbox[i3][j] = Data1;
            ctx.sbox[i3][j + 1] = Data2;
          }
        }
        return true;
      }
      var Blowfish = C_algo.Blowfish = BlockCipher.extend({
        _doReset: function() {
          if (this._keyPriorReset === this._key) {
            return;
          }
          var key = this._keyPriorReset = this._key;
          var keyWords = key.words;
          var keySize = key.sigBytes / 4;
          BlowFishInit(BLOWFISH_CTX, keyWords, keySize);
        },
        encryptBlock: function(M, offset) {
          var res = BlowFish_Encrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
          M[offset] = res.left;
          M[offset + 1] = res.right;
        },
        decryptBlock: function(M, offset) {
          var res = BlowFish_Decrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
          M[offset] = res.left;
          M[offset + 1] = res.right;
        },
        blockSize: 64 / 32,
        keySize: 128 / 32,
        ivSize: 64 / 32
      });
      C.Blowfish = BlockCipher._createHelper(Blowfish);
    })();
    return CryptoJS.Blowfish;
  });
});

// node_modules/crypto-js/index.js
var require_crypto_js = __commonJS((exports, module) => {
  (function(root, factory, undef) {
    if (typeof exports === "object") {
      module.exports = exports = factory(require_core(), require_x64_core(), require_lib_typedarrays(), require_enc_utf16(), require_enc_base64(), require_enc_base64url(), require_md5(), require_sha1(), require_sha256(), require_sha224(), require_sha512(), require_sha384(), require_sha3(), require_ripemd160(), require_hmac(), require_pbkdf2(), require_evpkdf(), require_cipher_core(), require_mode_cfb(), require_mode_ctr(), require_mode_ctr_gladman(), require_mode_ofb(), require_mode_ecb(), require_pad_ansix923(), require_pad_iso10126(), require_pad_iso97971(), require_pad_zeropadding(), require_pad_nopadding(), require_format_hex(), require_aes(), require_tripledes(), require_rc4(), require_rabbit(), require_rabbit_legacy(), require_blowfish());
    } else if (typeof define === "function" && define.amd) {
      define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./enc-base64url", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy", "./blowfish"], factory);
    } else {
      root.CryptoJS = factory(root.CryptoJS);
    }
  })(exports, function(CryptoJS) {
    return CryptoJS;
  });
});

// node_modules/safer-buffer/safer.js
var require_safer = __commonJS((exports, module) => {
  var buffer = import.meta.require("buffer");
  var Buffer2 = buffer.Buffer;
  var safer = {};
  var key;
  for (key in buffer) {
    if (!buffer.hasOwnProperty(key))
      continue;
    if (key === "SlowBuffer" || key === "Buffer")
      continue;
    safer[key] = buffer[key];
  }
  var Safer = safer.Buffer = {};
  for (key in Buffer2) {
    if (!Buffer2.hasOwnProperty(key))
      continue;
    if (key === "allocUnsafe" || key === "allocUnsafeSlow")
      continue;
    Safer[key] = Buffer2[key];
  }
  safer.Buffer.prototype = Buffer2.prototype;
  if (!Safer.from || Safer.from === Uint8Array.from) {
    Safer.from = function(value15, encodingOrOffset, length) {
      if (typeof value15 === "number") {
        throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value15);
      }
      if (value15 && typeof value15.length === "undefined") {
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value15);
      }
      return Buffer2(value15, encodingOrOffset, length);
    };
  }
  if (!Safer.alloc) {
    Safer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
      }
      if (size < 0 || size >= 2 * (1 << 30)) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
      var buf = Buffer2(size);
      if (!fill || fill.length === 0) {
        buf.fill(0);
      } else if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
      return buf;
    };
  }
  if (!safer.kStringMaxLength) {
    try {
      safer.kStringMaxLength = process.binding("buffer").kStringMaxLength;
    } catch (e) {
    }
  }
  if (!safer.constants) {
    safer.constants = {
      MAX_LENGTH: safer.kMaxLength
    };
    if (safer.kStringMaxLength) {
      safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
    }
  }
  module.exports = safer;
});

// node_modules/iconv-lite/lib/bom-handling.js
var require_bom_handling = __commonJS((exports) => {
  function PrependBOMWrapper(encoder, options) {
    this.encoder = encoder;
    this.addBOM = true;
  }
  function StripBOMWrapper(decoder, options) {
    this.decoder = decoder;
    this.pass = false;
    this.options = options || {};
  }
  var BOMChar = "\uFEFF";
  exports.PrependBOM = PrependBOMWrapper;
  PrependBOMWrapper.prototype.write = function(str) {
    if (this.addBOM) {
      str = BOMChar + str;
      this.addBOM = false;
    }
    return this.encoder.write(str);
  };
  PrependBOMWrapper.prototype.end = function() {
    return this.encoder.end();
  };
  exports.StripBOM = StripBOMWrapper;
  StripBOMWrapper.prototype.write = function(buf) {
    var res = this.decoder.write(buf);
    if (this.pass || !res)
      return res;
    if (res[0] === BOMChar) {
      res = res.slice(1);
      if (typeof this.options.stripBOM === "function")
        this.options.stripBOM();
    }
    this.pass = true;
    return res;
  };
  StripBOMWrapper.prototype.end = function() {
    return this.decoder.end();
  };
});

// node_modules/iconv-lite/encodings/internal.js
var require_internal = __commonJS((exports, module) => {
  function InternalCodec(codecOptions, iconv) {
    this.enc = codecOptions.encodingName;
    this.bomAware = codecOptions.bomAware;
    if (this.enc === "base64")
      this.encoder = InternalEncoderBase64;
    else if (this.enc === "cesu8") {
      this.enc = "utf8";
      this.encoder = InternalEncoderCesu8;
      if (Buffer2.from("eda0bdedb2a9", "hex").toString() !== "\uD83D\uDCA9") {
        this.decoder = InternalDecoderCesu8;
        this.defaultCharUnicode = iconv.defaultCharUnicode;
      }
    }
  }
  function InternalDecoder(options, codec) {
    this.decoder = new StringDecoder(codec.enc);
  }
  function InternalEncoder(options, codec) {
    this.enc = codec.enc;
  }
  function InternalEncoderBase64(options, codec) {
    this.prevStr = "";
  }
  function InternalEncoderCesu8(options, codec) {
  }
  function InternalDecoderCesu8(options, codec) {
    this.acc = 0;
    this.contBytes = 0;
    this.accBytes = 0;
    this.defaultCharUnicode = codec.defaultCharUnicode;
  }
  var Buffer2 = require_safer().Buffer;
  module.exports = {
    utf8: { type: "_internal", bomAware: true },
    cesu8: { type: "_internal", bomAware: true },
    unicode11utf8: "utf8",
    ucs2: { type: "_internal", bomAware: true },
    utf16le: "ucs2",
    binary: { type: "_internal" },
    base64: { type: "_internal" },
    hex: { type: "_internal" },
    _internal: InternalCodec
  };
  InternalCodec.prototype.encoder = InternalEncoder;
  InternalCodec.prototype.decoder = InternalDecoder;
  var StringDecoder = import.meta.require("string_decoder").StringDecoder;
  if (!StringDecoder.prototype.end)
    StringDecoder.prototype.end = function() {
    };
  InternalDecoder.prototype.write = function(buf) {
    if (!Buffer2.isBuffer(buf)) {
      buf = Buffer2.from(buf);
    }
    return this.decoder.write(buf);
  };
  InternalDecoder.prototype.end = function() {
    return this.decoder.end();
  };
  InternalEncoder.prototype.write = function(str) {
    return Buffer2.from(str, this.enc);
  };
  InternalEncoder.prototype.end = function() {
  };
  InternalEncoderBase64.prototype.write = function(str) {
    str = this.prevStr + str;
    var completeQuads = str.length - str.length % 4;
    this.prevStr = str.slice(completeQuads);
    str = str.slice(0, completeQuads);
    return Buffer2.from(str, "base64");
  };
  InternalEncoderBase64.prototype.end = function() {
    return Buffer2.from(this.prevStr, "base64");
  };
  InternalEncoderCesu8.prototype.write = function(str) {
    var buf = Buffer2.alloc(str.length * 3), bufIdx = 0;
    for (var i3 = 0;i3 < str.length; i3++) {
      var charCode = str.charCodeAt(i3);
      if (charCode < 128)
        buf[bufIdx++] = charCode;
      else if (charCode < 2048) {
        buf[bufIdx++] = 192 + (charCode >>> 6);
        buf[bufIdx++] = 128 + (charCode & 63);
      } else {
        buf[bufIdx++] = 224 + (charCode >>> 12);
        buf[bufIdx++] = 128 + (charCode >>> 6 & 63);
        buf[bufIdx++] = 128 + (charCode & 63);
      }
    }
    return buf.slice(0, bufIdx);
  };
  InternalEncoderCesu8.prototype.end = function() {
  };
  InternalDecoderCesu8.prototype.write = function(buf) {
    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, res = "";
    for (var i3 = 0;i3 < buf.length; i3++) {
      var curByte = buf[i3];
      if ((curByte & 192) !== 128) {
        if (contBytes > 0) {
          res += this.defaultCharUnicode;
          contBytes = 0;
        }
        if (curByte < 128) {
          res += String.fromCharCode(curByte);
        } else if (curByte < 224) {
          acc = curByte & 31;
          contBytes = 1;
          accBytes = 1;
        } else if (curByte < 240) {
          acc = curByte & 15;
          contBytes = 2;
          accBytes = 1;
        } else {
          res += this.defaultCharUnicode;
        }
      } else {
        if (contBytes > 0) {
          acc = acc << 6 | curByte & 63;
          contBytes--;
          accBytes++;
          if (contBytes === 0) {
            if (accBytes === 2 && acc < 128 && acc > 0)
              res += this.defaultCharUnicode;
            else if (accBytes === 3 && acc < 2048)
              res += this.defaultCharUnicode;
            else
              res += String.fromCharCode(acc);
          }
        } else {
          res += this.defaultCharUnicode;
        }
      }
    }
    this.acc = acc;
    this.contBytes = contBytes;
    this.accBytes = accBytes;
    return res;
  };
  InternalDecoderCesu8.prototype.end = function() {
    var res = 0;
    if (this.contBytes > 0)
      res += this.defaultCharUnicode;
    return res;
  };
});

// node_modules/iconv-lite/encodings/utf32.js
var require_utf32 = __commonJS((exports) => {
  function Utf32Codec(codecOptions, iconv) {
    this.iconv = iconv;
    this.bomAware = true;
    this.isLE = codecOptions.isLE;
  }
  function Utf32Encoder(options, codec) {
    this.isLE = codec.isLE;
    this.highSurrogate = 0;
  }
  function Utf32Decoder(options, codec) {
    this.isLE = codec.isLE;
    this.badChar = codec.iconv.defaultCharUnicode.charCodeAt(0);
    this.overflow = [];
  }
  function _writeCodepoint(dst, offset, codepoint, badChar) {
    if (codepoint < 0 || codepoint > 1114111) {
      codepoint = badChar;
    }
    if (codepoint >= 65536) {
      codepoint -= 65536;
      var high = 55296 | codepoint >> 10;
      dst[offset++] = high & 255;
      dst[offset++] = high >> 8;
      var codepoint = 56320 | codepoint & 1023;
    }
    dst[offset++] = codepoint & 255;
    dst[offset++] = codepoint >> 8;
    return offset;
  }
  function Utf32AutoCodec(options, iconv) {
    this.iconv = iconv;
  }
  function Utf32AutoEncoder(options, codec) {
    options = options || {};
    if (options.addBOM === undefined)
      options.addBOM = true;
    this.encoder = codec.iconv.getEncoder(options.defaultEncoding || "utf-32le", options);
  }
  function Utf32AutoDecoder(options, codec) {
    this.decoder = null;
    this.initialBufs = [];
    this.initialBufsLen = 0;
    this.options = options || {};
    this.iconv = codec.iconv;
  }
  function detectEncoding(bufs, defaultEncoding) {
    var b = [];
    var charsProcessed = 0;
    var invalidLE = 0, invalidBE = 0;
    var bmpCharsLE = 0, bmpCharsBE = 0;
    outer_loop:
      for (var i3 = 0;i3 < bufs.length; i3++) {
        var buf = bufs[i3];
        for (var j = 0;j < buf.length; j++) {
          b.push(buf[j]);
          if (b.length === 4) {
            if (charsProcessed === 0) {
              if (b[0] === 255 && b[1] === 254 && b[2] === 0 && b[3] === 0) {
                return "utf-32le";
              }
              if (b[0] === 0 && b[1] === 0 && b[2] === 254 && b[3] === 255) {
                return "utf-32be";
              }
            }
            if (b[0] !== 0 || b[1] > 16)
              invalidBE++;
            if (b[3] !== 0 || b[2] > 16)
              invalidLE++;
            if (b[0] === 0 && b[1] === 0 && (b[2] !== 0 || b[3] !== 0))
              bmpCharsBE++;
            if ((b[0] !== 0 || b[1] !== 0) && b[2] === 0 && b[3] === 0)
              bmpCharsLE++;
            b.length = 0;
            charsProcessed++;
            if (charsProcessed >= 100) {
              break outer_loop;
            }
          }
        }
      }
    if (bmpCharsBE - invalidBE > bmpCharsLE - invalidLE)
      return "utf-32be";
    if (bmpCharsBE - invalidBE < bmpCharsLE - invalidLE)
      return "utf-32le";
    return defaultEncoding || "utf-32le";
  }
  var Buffer2 = require_safer().Buffer;
  exports._utf32 = Utf32Codec;
  exports.utf32le = { type: "_utf32", isLE: true };
  exports.utf32be = { type: "_utf32", isLE: false };
  exports.ucs4le = "utf32le";
  exports.ucs4be = "utf32be";
  Utf32Codec.prototype.encoder = Utf32Encoder;
  Utf32Codec.prototype.decoder = Utf32Decoder;
  Utf32Encoder.prototype.write = function(str) {
    var src = Buffer2.from(str, "ucs2");
    var dst = Buffer2.alloc(src.length * 2);
    var write32 = this.isLE ? dst.writeUInt32LE : dst.writeUInt32BE;
    var offset = 0;
    for (var i3 = 0;i3 < src.length; i3 += 2) {
      var code = src.readUInt16LE(i3);
      var isHighSurrogate = 55296 <= code && code < 56320;
      var isLowSurrogate = 56320 <= code && code < 57344;
      if (this.highSurrogate) {
        if (isHighSurrogate || !isLowSurrogate) {
          write32.call(dst, this.highSurrogate, offset);
          offset += 4;
        } else {
          var codepoint = (this.highSurrogate - 55296 << 10 | code - 56320) + 65536;
          write32.call(dst, codepoint, offset);
          offset += 4;
          this.highSurrogate = 0;
          continue;
        }
      }
      if (isHighSurrogate)
        this.highSurrogate = code;
      else {
        write32.call(dst, code, offset);
        offset += 4;
        this.highSurrogate = 0;
      }
    }
    if (offset < dst.length)
      dst = dst.slice(0, offset);
    return dst;
  };
  Utf32Encoder.prototype.end = function() {
    if (!this.highSurrogate)
      return;
    var buf = Buffer2.alloc(4);
    if (this.isLE)
      buf.writeUInt32LE(this.highSurrogate, 0);
    else
      buf.writeUInt32BE(this.highSurrogate, 0);
    this.highSurrogate = 0;
    return buf;
  };
  Utf32Decoder.prototype.write = function(src) {
    if (src.length === 0)
      return "";
    var i3 = 0;
    var codepoint = 0;
    var dst = Buffer2.alloc(src.length + 4);
    var offset = 0;
    var isLE = this.isLE;
    var overflow = this.overflow;
    var badChar = this.badChar;
    if (overflow.length > 0) {
      for (;i3 < src.length && overflow.length < 4; i3++)
        overflow.push(src[i3]);
      if (overflow.length === 4) {
        if (isLE) {
          codepoint = overflow[i3] | overflow[i3 + 1] << 8 | overflow[i3 + 2] << 16 | overflow[i3 + 3] << 24;
        } else {
          codepoint = overflow[i3 + 3] | overflow[i3 + 2] << 8 | overflow[i3 + 1] << 16 | overflow[i3] << 24;
        }
        overflow.length = 0;
        offset = _writeCodepoint(dst, offset, codepoint, badChar);
      }
    }
    for (;i3 < src.length - 3; i3 += 4) {
      if (isLE) {
        codepoint = src[i3] | src[i3 + 1] << 8 | src[i3 + 2] << 16 | src[i3 + 3] << 24;
      } else {
        codepoint = src[i3 + 3] | src[i3 + 2] << 8 | src[i3 + 1] << 16 | src[i3] << 24;
      }
      offset = _writeCodepoint(dst, offset, codepoint, badChar);
    }
    for (;i3 < src.length; i3++) {
      overflow.push(src[i3]);
    }
    return dst.slice(0, offset).toString("ucs2");
  };
  Utf32Decoder.prototype.end = function() {
    this.overflow.length = 0;
  };
  exports.utf32 = Utf32AutoCodec;
  exports.ucs4 = "utf32";
  Utf32AutoCodec.prototype.encoder = Utf32AutoEncoder;
  Utf32AutoCodec.prototype.decoder = Utf32AutoDecoder;
  Utf32AutoEncoder.prototype.write = function(str) {
    return this.encoder.write(str);
  };
  Utf32AutoEncoder.prototype.end = function() {
    return this.encoder.end();
  };
  Utf32AutoDecoder.prototype.write = function(buf) {
    if (!this.decoder) {
      this.initialBufs.push(buf);
      this.initialBufsLen += buf.length;
      if (this.initialBufsLen < 32)
        return "";
      var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      var resStr = "";
      for (var i3 = 0;i3 < this.initialBufs.length; i3++)
        resStr += this.decoder.write(this.initialBufs[i3]);
      this.initialBufs.length = this.initialBufsLen = 0;
      return resStr;
    }
    return this.decoder.write(buf);
  };
  Utf32AutoDecoder.prototype.end = function() {
    if (!this.decoder) {
      var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      var resStr = "";
      for (var i3 = 0;i3 < this.initialBufs.length; i3++)
        resStr += this.decoder.write(this.initialBufs[i3]);
      var trail = this.decoder.end();
      if (trail)
        resStr += trail;
      this.initialBufs.length = this.initialBufsLen = 0;
      return resStr;
    }
    return this.decoder.end();
  };
});

// node_modules/iconv-lite/encodings/utf16.js
var require_utf16 = __commonJS((exports) => {
  function Utf16BECodec() {
  }
  function Utf16BEEncoder() {
  }
  function Utf16BEDecoder() {
    this.overflowByte = -1;
  }
  function Utf16Codec(codecOptions, iconv) {
    this.iconv = iconv;
  }
  function Utf16Encoder(options, codec) {
    options = options || {};
    if (options.addBOM === undefined)
      options.addBOM = true;
    this.encoder = codec.iconv.getEncoder("utf-16le", options);
  }
  function Utf16Decoder(options, codec) {
    this.decoder = null;
    this.initialBufs = [];
    this.initialBufsLen = 0;
    this.options = options || {};
    this.iconv = codec.iconv;
  }
  function detectEncoding(bufs, defaultEncoding) {
    var b = [];
    var charsProcessed = 0;
    var asciiCharsLE = 0, asciiCharsBE = 0;
    outer_loop:
      for (var i3 = 0;i3 < bufs.length; i3++) {
        var buf = bufs[i3];
        for (var j = 0;j < buf.length; j++) {
          b.push(buf[j]);
          if (b.length === 2) {
            if (charsProcessed === 0) {
              if (b[0] === 255 && b[1] === 254)
                return "utf-16le";
              if (b[0] === 254 && b[1] === 255)
                return "utf-16be";
            }
            if (b[0] === 0 && b[1] !== 0)
              asciiCharsBE++;
            if (b[0] !== 0 && b[1] === 0)
              asciiCharsLE++;
            b.length = 0;
            charsProcessed++;
            if (charsProcessed >= 100) {
              break outer_loop;
            }
          }
        }
      }
    if (asciiCharsBE > asciiCharsLE)
      return "utf-16be";
    if (asciiCharsBE < asciiCharsLE)
      return "utf-16le";
    return defaultEncoding || "utf-16le";
  }
  var Buffer2 = require_safer().Buffer;
  exports.utf16be = Utf16BECodec;
  Utf16BECodec.prototype.encoder = Utf16BEEncoder;
  Utf16BECodec.prototype.decoder = Utf16BEDecoder;
  Utf16BECodec.prototype.bomAware = true;
  Utf16BEEncoder.prototype.write = function(str) {
    var buf = Buffer2.from(str, "ucs2");
    for (var i3 = 0;i3 < buf.length; i3 += 2) {
      var tmp = buf[i3];
      buf[i3] = buf[i3 + 1];
      buf[i3 + 1] = tmp;
    }
    return buf;
  };
  Utf16BEEncoder.prototype.end = function() {
  };
  Utf16BEDecoder.prototype.write = function(buf) {
    if (buf.length == 0)
      return "";
    var buf2 = Buffer2.alloc(buf.length + 1), i3 = 0, j = 0;
    if (this.overflowByte !== -1) {
      buf2[0] = buf[0];
      buf2[1] = this.overflowByte;
      i3 = 1;
      j = 2;
    }
    for (;i3 < buf.length - 1; i3 += 2, j += 2) {
      buf2[j] = buf[i3 + 1];
      buf2[j + 1] = buf[i3];
    }
    this.overflowByte = i3 == buf.length - 1 ? buf[buf.length - 1] : -1;
    return buf2.slice(0, j).toString("ucs2");
  };
  Utf16BEDecoder.prototype.end = function() {
    this.overflowByte = -1;
  };
  exports.utf16 = Utf16Codec;
  Utf16Codec.prototype.encoder = Utf16Encoder;
  Utf16Codec.prototype.decoder = Utf16Decoder;
  Utf16Encoder.prototype.write = function(str) {
    return this.encoder.write(str);
  };
  Utf16Encoder.prototype.end = function() {
    return this.encoder.end();
  };
  Utf16Decoder.prototype.write = function(buf) {
    if (!this.decoder) {
      this.initialBufs.push(buf);
      this.initialBufsLen += buf.length;
      if (this.initialBufsLen < 16)
        return "";
      var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      var resStr = "";
      for (var i3 = 0;i3 < this.initialBufs.length; i3++)
        resStr += this.decoder.write(this.initialBufs[i3]);
      this.initialBufs.length = this.initialBufsLen = 0;
      return resStr;
    }
    return this.decoder.write(buf);
  };
  Utf16Decoder.prototype.end = function() {
    if (!this.decoder) {
      var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      var resStr = "";
      for (var i3 = 0;i3 < this.initialBufs.length; i3++)
        resStr += this.decoder.write(this.initialBufs[i3]);
      var trail = this.decoder.end();
      if (trail)
        resStr += trail;
      this.initialBufs.length = this.initialBufsLen = 0;
      return resStr;
    }
    return this.decoder.end();
  };
});

// node_modules/iconv-lite/encodings/utf7.js
var require_utf7 = __commonJS((exports) => {
  function Utf7Codec(codecOptions, iconv) {
    this.iconv = iconv;
  }
  function Utf7Encoder(options, codec) {
    this.iconv = codec.iconv;
  }
  function Utf7Decoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = "";
  }
  function Utf7IMAPCodec(codecOptions, iconv) {
    this.iconv = iconv;
  }
  function Utf7IMAPEncoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = Buffer2.alloc(6);
    this.base64AccumIdx = 0;
  }
  function Utf7IMAPDecoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = "";
  }
  var Buffer2 = require_safer().Buffer;
  exports.utf7 = Utf7Codec;
  exports.unicode11utf7 = "utf7";
  Utf7Codec.prototype.encoder = Utf7Encoder;
  Utf7Codec.prototype.decoder = Utf7Decoder;
  Utf7Codec.prototype.bomAware = true;
  var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;
  Utf7Encoder.prototype.write = function(str) {
    return Buffer2.from(str.replace(nonDirectChars, function(chunk) {
      return "+" + (chunk === "+" ? "" : this.iconv.encode(chunk, "utf16-be").toString("base64").replace(/=+$/, "")) + "-";
    }.bind(this)));
  };
  Utf7Encoder.prototype.end = function() {
  };
  var base64Regex = /[A-Za-z0-9\/+]/;
  var base64Chars = [];
  for (i3 = 0;i3 < 256; i3++)
    base64Chars[i3] = base64Regex.test(String.fromCharCode(i3));
  var i3;
  var plusChar = "+".charCodeAt(0);
  var minusChar = "-".charCodeAt(0);
  var andChar = "&".charCodeAt(0);
  Utf7Decoder.prototype.write = function(buf) {
    var res = "", lastI = 0, inBase64 = this.inBase64, base64Accum = this.base64Accum;
    for (var i4 = 0;i4 < buf.length; i4++) {
      if (!inBase64) {
        if (buf[i4] == plusChar) {
          res += this.iconv.decode(buf.slice(lastI, i4), "ascii");
          lastI = i4 + 1;
          inBase64 = true;
        }
      } else {
        if (!base64Chars[buf[i4]]) {
          if (i4 == lastI && buf[i4] == minusChar) {
            res += "+";
          } else {
            var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i4), "ascii");
            res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
          }
          if (buf[i4] != minusChar)
            i4--;
          lastI = i4 + 1;
          inBase64 = false;
          base64Accum = "";
        }
      }
    }
    if (!inBase64) {
      res += this.iconv.decode(buf.slice(lastI), "ascii");
    } else {
      var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii");
      var canBeDecoded = b64str.length - b64str.length % 8;
      base64Accum = b64str.slice(canBeDecoded);
      b64str = b64str.slice(0, canBeDecoded);
      res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
    }
    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;
    return res;
  };
  Utf7Decoder.prototype.end = function() {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0)
      res = this.iconv.decode(Buffer2.from(this.base64Accum, "base64"), "utf16-be");
    this.inBase64 = false;
    this.base64Accum = "";
    return res;
  };
  exports.utf7imap = Utf7IMAPCodec;
  Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
  Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
  Utf7IMAPCodec.prototype.bomAware = true;
  Utf7IMAPEncoder.prototype.write = function(str) {
    var inBase64 = this.inBase64, base64Accum = this.base64Accum, base64AccumIdx = this.base64AccumIdx, buf = Buffer2.alloc(str.length * 5 + 10), bufIdx = 0;
    for (var i4 = 0;i4 < str.length; i4++) {
      var uChar = str.charCodeAt(i4);
      if (32 <= uChar && uChar <= 126) {
        if (inBase64) {
          if (base64AccumIdx > 0) {
            bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString("base64").replace(/\//g, ",").replace(/=+$/, ""), bufIdx);
            base64AccumIdx = 0;
          }
          buf[bufIdx++] = minusChar;
          inBase64 = false;
        }
        if (!inBase64) {
          buf[bufIdx++] = uChar;
          if (uChar === andChar)
            buf[bufIdx++] = minusChar;
        }
      } else {
        if (!inBase64) {
          buf[bufIdx++] = andChar;
          inBase64 = true;
        }
        if (inBase64) {
          base64Accum[base64AccumIdx++] = uChar >> 8;
          base64Accum[base64AccumIdx++] = uChar & 255;
          if (base64AccumIdx == base64Accum.length) {
            bufIdx += buf.write(base64Accum.toString("base64").replace(/\//g, ","), bufIdx);
            base64AccumIdx = 0;
          }
        }
      }
    }
    this.inBase64 = inBase64;
    this.base64AccumIdx = base64AccumIdx;
    return buf.slice(0, bufIdx);
  };
  Utf7IMAPEncoder.prototype.end = function() {
    var buf = Buffer2.alloc(10), bufIdx = 0;
    if (this.inBase64) {
      if (this.base64AccumIdx > 0) {
        bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString("base64").replace(/\//g, ",").replace(/=+$/, ""), bufIdx);
        this.base64AccumIdx = 0;
      }
      buf[bufIdx++] = minusChar;
      this.inBase64 = false;
    }
    return buf.slice(0, bufIdx);
  };
  var base64IMAPChars = base64Chars.slice();
  base64IMAPChars[",".charCodeAt(0)] = true;
  Utf7IMAPDecoder.prototype.write = function(buf) {
    var res = "", lastI = 0, inBase64 = this.inBase64, base64Accum = this.base64Accum;
    for (var i4 = 0;i4 < buf.length; i4++) {
      if (!inBase64) {
        if (buf[i4] == andChar) {
          res += this.iconv.decode(buf.slice(lastI, i4), "ascii");
          lastI = i4 + 1;
          inBase64 = true;
        }
      } else {
        if (!base64IMAPChars[buf[i4]]) {
          if (i4 == lastI && buf[i4] == minusChar) {
            res += "&";
          } else {
            var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i4), "ascii").replace(/,/g, "/");
            res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
          }
          if (buf[i4] != minusChar)
            i4--;
          lastI = i4 + 1;
          inBase64 = false;
          base64Accum = "";
        }
      }
    }
    if (!inBase64) {
      res += this.iconv.decode(buf.slice(lastI), "ascii");
    } else {
      var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii").replace(/,/g, "/");
      var canBeDecoded = b64str.length - b64str.length % 8;
      base64Accum = b64str.slice(canBeDecoded);
      b64str = b64str.slice(0, canBeDecoded);
      res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
    }
    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;
    return res;
  };
  Utf7IMAPDecoder.prototype.end = function() {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0)
      res = this.iconv.decode(Buffer2.from(this.base64Accum, "base64"), "utf16-be");
    this.inBase64 = false;
    this.base64Accum = "";
    return res;
  };
});

// node_modules/iconv-lite/encodings/sbcs-codec.js
var require_sbcs_codec = __commonJS((exports) => {
  function SBCSCodec(codecOptions, iconv) {
    if (!codecOptions)
      throw new Error("SBCS codec is called without the data.");
    if (!codecOptions.chars || codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256)
      throw new Error("Encoding '" + codecOptions.type + "' has incorrect 'chars' (must be of len 128 or 256)");
    if (codecOptions.chars.length === 128) {
      var asciiString = "";
      for (var i3 = 0;i3 < 128; i3++)
        asciiString += String.fromCharCode(i3);
      codecOptions.chars = asciiString + codecOptions.chars;
    }
    this.decodeBuf = Buffer2.from(codecOptions.chars, "ucs2");
    var encodeBuf = Buffer2.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));
    for (var i3 = 0;i3 < codecOptions.chars.length; i3++)
      encodeBuf[codecOptions.chars.charCodeAt(i3)] = i3;
    this.encodeBuf = encodeBuf;
  }
  function SBCSEncoder(options, codec) {
    this.encodeBuf = codec.encodeBuf;
  }
  function SBCSDecoder(options, codec) {
    this.decodeBuf = codec.decodeBuf;
  }
  var Buffer2 = require_safer().Buffer;
  exports._sbcs = SBCSCodec;
  SBCSCodec.prototype.encoder = SBCSEncoder;
  SBCSCodec.prototype.decoder = SBCSDecoder;
  SBCSEncoder.prototype.write = function(str) {
    var buf = Buffer2.alloc(str.length);
    for (var i3 = 0;i3 < str.length; i3++)
      buf[i3] = this.encodeBuf[str.charCodeAt(i3)];
    return buf;
  };
  SBCSEncoder.prototype.end = function() {
  };
  SBCSDecoder.prototype.write = function(buf) {
    var decodeBuf = this.decodeBuf;
    var newBuf = Buffer2.alloc(buf.length * 2);
    var idx1 = 0, idx2 = 0;
    for (var i3 = 0;i3 < buf.length; i3++) {
      idx1 = buf[i3] * 2;
      idx2 = i3 * 2;
      newBuf[idx2] = decodeBuf[idx1];
      newBuf[idx2 + 1] = decodeBuf[idx1 + 1];
    }
    return newBuf.toString("ucs2");
  };
  SBCSDecoder.prototype.end = function() {
  };
});

// node_modules/iconv-lite/encodings/sbcs-data.js
var require_sbcs_data = __commonJS((exports, module) => {
  module.exports = {
    "10029": "maccenteuro",
    maccenteuro: {
      type: "_sbcs",
      chars: "\xC4\u0100\u0101\xC9\u0104\xD6\xDC\xE1\u0105\u010C\xE4\u010D\u0106\u0107\xE9\u0179\u017A\u010E\xED\u010F\u0112\u0113\u0116\xF3\u0117\xF4\xF6\xF5\xFA\u011A\u011B\xFC\u2020\xB0\u0118\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\u0119\xA8\u2260\u0123\u012E\u012F\u012A\u2264\u2265\u012B\u0136\u2202\u2211\u0142\u013B\u013C\u013D\u013E\u0139\u013A\u0145\u0146\u0143\xAC\u221A\u0144\u0147\u2206\xAB\xBB\u2026\xA0\u0148\u0150\xD5\u0151\u014C\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\u014D\u0154\u0155\u0158\u2039\u203A\u0159\u0156\u0157\u0160\u201A\u201E\u0161\u015A\u015B\xC1\u0164\u0165\xCD\u017D\u017E\u016A\xD3\xD4\u016B\u016E\xDA\u016F\u0170\u0171\u0172\u0173\xDD\xFD\u0137\u017B\u0141\u017C\u0122\u02C7"
    },
    "808": "cp808",
    ibm808: "cp808",
    cp808: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0404\u0454\u0407\u0457\u040E\u045E\xB0\u2219\xB7\u221A\u2116\u20AC\u25A0\xA0"
    },
    mik: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u2514\u2534\u252C\u251C\u2500\u253C\u2563\u2551\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2510\u2591\u2592\u2593\u2502\u2524\u2116\xA7\u2557\u255D\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    cp720: {
      type: "_sbcs",
      chars: "\x80\x81\xE9\xE2\x84\xE0\x86\xE7\xEA\xEB\xE8\xEF\xEE\x8D\x8E\x8F\x90\u0651\u0652\xF4\xA4\u0640\xFB\xF9\u0621\u0622\u0623\u0624\xA3\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0636\u0637\u0638\u0639\u063A\u0641\xB5\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u2261\u064B\u064C\u064D\u064E\u064F\u0650\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ascii8bit: "ascii",
    usascii: "ascii",
    ansix34: "ascii",
    ansix341968: "ascii",
    ansix341986: "ascii",
    csascii: "ascii",
    cp367: "ascii",
    ibm367: "ascii",
    isoir6: "ascii",
    iso646us: "ascii",
    iso646irv: "ascii",
    us: "ascii",
    latin1: "iso88591",
    latin2: "iso88592",
    latin3: "iso88593",
    latin4: "iso88594",
    latin5: "iso88599",
    latin6: "iso885910",
    latin7: "iso885913",
    latin8: "iso885914",
    latin9: "iso885915",
    latin10: "iso885916",
    csisolatin1: "iso88591",
    csisolatin2: "iso88592",
    csisolatin3: "iso88593",
    csisolatin4: "iso88594",
    csisolatincyrillic: "iso88595",
    csisolatinarabic: "iso88596",
    csisolatingreek: "iso88597",
    csisolatinhebrew: "iso88598",
    csisolatin5: "iso88599",
    csisolatin6: "iso885910",
    l1: "iso88591",
    l2: "iso88592",
    l3: "iso88593",
    l4: "iso88594",
    l5: "iso88599",
    l6: "iso885910",
    l7: "iso885913",
    l8: "iso885914",
    l9: "iso885915",
    l10: "iso885916",
    isoir14: "iso646jp",
    isoir57: "iso646cn",
    isoir100: "iso88591",
    isoir101: "iso88592",
    isoir109: "iso88593",
    isoir110: "iso88594",
    isoir144: "iso88595",
    isoir127: "iso88596",
    isoir126: "iso88597",
    isoir138: "iso88598",
    isoir148: "iso88599",
    isoir157: "iso885910",
    isoir166: "tis620",
    isoir179: "iso885913",
    isoir199: "iso885914",
    isoir203: "iso885915",
    isoir226: "iso885916",
    cp819: "iso88591",
    ibm819: "iso88591",
    cyrillic: "iso88595",
    arabic: "iso88596",
    arabic8: "iso88596",
    ecma114: "iso88596",
    asmo708: "iso88596",
    greek: "iso88597",
    greek8: "iso88597",
    ecma118: "iso88597",
    elot928: "iso88597",
    hebrew: "iso88598",
    hebrew8: "iso88598",
    turkish: "iso88599",
    turkish8: "iso88599",
    thai: "iso885911",
    thai8: "iso885911",
    celtic: "iso885914",
    celtic8: "iso885914",
    isoceltic: "iso885914",
    tis6200: "tis620",
    tis62025291: "tis620",
    tis62025330: "tis620",
    "10000": "macroman",
    "10006": "macgreek",
    "10007": "maccyrillic",
    "10079": "maciceland",
    "10081": "macturkish",
    cspc8codepage437: "cp437",
    cspc775baltic: "cp775",
    cspc850multilingual: "cp850",
    cspcp852: "cp852",
    cspc862latinhebrew: "cp862",
    cpgr: "cp869",
    msee: "cp1250",
    mscyrl: "cp1251",
    msansi: "cp1252",
    msgreek: "cp1253",
    msturk: "cp1254",
    mshebr: "cp1255",
    msarab: "cp1256",
    winbaltrim: "cp1257",
    cp20866: "koi8r",
    "20866": "koi8r",
    ibm878: "koi8r",
    cskoi8r: "koi8r",
    cp21866: "koi8u",
    "21866": "koi8u",
    ibm1168: "koi8u",
    strk10482002: "rk1048",
    tcvn5712: "tcvn",
    tcvn57121: "tcvn",
    gb198880: "iso646cn",
    cn: "iso646cn",
    csiso14jisc6220ro: "iso646jp",
    jisc62201969ro: "iso646jp",
    jp: "iso646jp",
    cshproman8: "hproman8",
    r8: "hproman8",
    roman8: "hproman8",
    xroman8: "hproman8",
    ibm1051: "hproman8",
    mac: "macintosh",
    csmacintosh: "macintosh"
  };
});

// node_modules/iconv-lite/encodings/sbcs-data-generated.js
var require_sbcs_data_generated = __commonJS((exports, module) => {
  module.exports = {
    "437": "cp437",
    "737": "cp737",
    "775": "cp775",
    "850": "cp850",
    "852": "cp852",
    "855": "cp855",
    "856": "cp856",
    "857": "cp857",
    "858": "cp858",
    "860": "cp860",
    "861": "cp861",
    "862": "cp862",
    "863": "cp863",
    "864": "cp864",
    "865": "cp865",
    "866": "cp866",
    "869": "cp869",
    "874": "windows874",
    "922": "cp922",
    "1046": "cp1046",
    "1124": "cp1124",
    "1125": "cp1125",
    "1129": "cp1129",
    "1133": "cp1133",
    "1161": "cp1161",
    "1162": "cp1162",
    "1163": "cp1163",
    "1250": "windows1250",
    "1251": "windows1251",
    "1252": "windows1252",
    "1253": "windows1253",
    "1254": "windows1254",
    "1255": "windows1255",
    "1256": "windows1256",
    "1257": "windows1257",
    "1258": "windows1258",
    "28591": "iso88591",
    "28592": "iso88592",
    "28593": "iso88593",
    "28594": "iso88594",
    "28595": "iso88595",
    "28596": "iso88596",
    "28597": "iso88597",
    "28598": "iso88598",
    "28599": "iso88599",
    "28600": "iso885910",
    "28601": "iso885911",
    "28603": "iso885913",
    "28604": "iso885914",
    "28605": "iso885915",
    "28606": "iso885916",
    windows874: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\u2026\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    win874: "windows874",
    cp874: "windows874",
    windows1250: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\u0160\u2039\u015A\u0164\u017D\u0179\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0161\u203A\u015B\u0165\u017E\u017A\xA0\u02C7\u02D8\u0141\xA4\u0104\xA6\xA7\xA8\xA9\u015E\xAB\xAC\xAD\xAE\u017B\xB0\xB1\u02DB\u0142\xB4\xB5\xB6\xB7\xB8\u0105\u015F\xBB\u013D\u02DD\u013E\u017C\u0154\xC1\xC2\u0102\xC4\u0139\u0106\xC7\u010C\xC9\u0118\xCB\u011A\xCD\xCE\u010E\u0110\u0143\u0147\xD3\xD4\u0150\xD6\xD7\u0158\u016E\xDA\u0170\xDC\xDD\u0162\xDF\u0155\xE1\xE2\u0103\xE4\u013A\u0107\xE7\u010D\xE9\u0119\xEB\u011B\xED\xEE\u010F\u0111\u0144\u0148\xF3\xF4\u0151\xF6\xF7\u0159\u016F\xFA\u0171\xFC\xFD\u0163\u02D9"
    },
    win1250: "windows1250",
    cp1250: "windows1250",
    windows1251: {
      type: "_sbcs",
      chars: "\u0402\u0403\u201A\u0453\u201E\u2026\u2020\u2021\u20AC\u2030\u0409\u2039\u040A\u040C\u040B\u040F\u0452\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0459\u203A\u045A\u045C\u045B\u045F\xA0\u040E\u045E\u0408\xA4\u0490\xA6\xA7\u0401\xA9\u0404\xAB\xAC\xAD\xAE\u0407\xB0\xB1\u0406\u0456\u0491\xB5\xB6\xB7\u0451\u2116\u0454\xBB\u0458\u0405\u0455\u0457\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F"
    },
    win1251: "windows1251",
    cp1251: "windows1251",
    windows1252: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\u017D\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\u017E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
    },
    win1252: "windows1252",
    cp1252: "windows1252",
    windows1253: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0385\u0386\xA3\xA4\xA5\xA6\xA7\xA8\xA9\uFFFD\xAB\xAC\xAD\xAE\u2015\xB0\xB1\xB2\xB3\u0384\xB5\xB6\xB7\u0388\u0389\u038A\xBB\u038C\xBD\u038E\u038F\u0390\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\uFFFD\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\uFFFD"
    },
    win1253: "windows1253",
    cp1253: "windows1253",
    windows1254: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u011E\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u0130\u015E\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u011F\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u0131\u015F\xFF"
    },
    win1254: "windows1254",
    cp1254: "windows1254",
    windows1255: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\xA1\xA2\xA3\u20AA\xA5\xA6\xA7\xA8\xA9\xD7\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xF7\xBB\xBC\xBD\xBE\xBF\u05B0\u05B1\u05B2\u05B3\u05B4\u05B5\u05B6\u05B7\u05B8\u05B9\u05BA\u05BB\u05BC\u05BD\u05BE\u05BF\u05C0\u05C1\u05C2\u05C3\u05F0\u05F1\u05F2\u05F3\u05F4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\uFFFD\u200E\u200F\uFFFD"
    },
    win1255: "windows1255",
    cp1255: "windows1255",
    windows1256: {
      type: "_sbcs",
      chars: "\u20AC\u067E\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0679\u2039\u0152\u0686\u0698\u0688\u06AF\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u06A9\u2122\u0691\u203A\u0153\u200C\u200D\u06BA\xA0\u060C\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\u06BE\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\u061B\xBB\xBC\xBD\xBE\u061F\u06C1\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\xD7\u0637\u0638\u0639\u063A\u0640\u0641\u0642\u0643\xE0\u0644\xE2\u0645\u0646\u0647\u0648\xE7\xE8\xE9\xEA\xEB\u0649\u064A\xEE\xEF\u064B\u064C\u064D\u064E\xF4\u064F\u0650\xF7\u0651\xF9\u0652\xFB\xFC\u200E\u200F\u06D2"
    },
    win1256: "windows1256",
    cp1256: "windows1256",
    windows1257: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\xA8\u02C7\xB8\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\xAF\u02DB\uFFFD\xA0\uFFFD\xA2\xA3\xA4\uFFFD\xA6\xA7\xD8\xA9\u0156\xAB\xAC\xAD\xAE\xC6\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xF8\xB9\u0157\xBB\xBC\xBD\xBE\xE6\u0104\u012E\u0100\u0106\xC4\xC5\u0118\u0112\u010C\xC9\u0179\u0116\u0122\u0136\u012A\u013B\u0160\u0143\u0145\xD3\u014C\xD5\xD6\xD7\u0172\u0141\u015A\u016A\xDC\u017B\u017D\xDF\u0105\u012F\u0101\u0107\xE4\xE5\u0119\u0113\u010D\xE9\u017A\u0117\u0123\u0137\u012B\u013C\u0161\u0144\u0146\xF3\u014D\xF5\xF6\xF7\u0173\u0142\u015B\u016B\xFC\u017C\u017E\u02D9"
    },
    win1257: "windows1257",
    cp1257: "windows1257",
    windows1258: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF"
    },
    win1258: "windows1258",
    cp1258: "windows1258",
    iso88591: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
    },
    cp28591: "iso88591",
    iso88592: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u02D8\u0141\xA4\u013D\u015A\xA7\xA8\u0160\u015E\u0164\u0179\xAD\u017D\u017B\xB0\u0105\u02DB\u0142\xB4\u013E\u015B\u02C7\xB8\u0161\u015F\u0165\u017A\u02DD\u017E\u017C\u0154\xC1\xC2\u0102\xC4\u0139\u0106\xC7\u010C\xC9\u0118\xCB\u011A\xCD\xCE\u010E\u0110\u0143\u0147\xD3\xD4\u0150\xD6\xD7\u0158\u016E\xDA\u0170\xDC\xDD\u0162\xDF\u0155\xE1\xE2\u0103\xE4\u013A\u0107\xE7\u010D\xE9\u0119\xEB\u011B\xED\xEE\u010F\u0111\u0144\u0148\xF3\xF4\u0151\xF6\xF7\u0159\u016F\xFA\u0171\xFC\xFD\u0163\u02D9"
    },
    cp28592: "iso88592",
    iso88593: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0126\u02D8\xA3\xA4\uFFFD\u0124\xA7\xA8\u0130\u015E\u011E\u0134\xAD\uFFFD\u017B\xB0\u0127\xB2\xB3\xB4\xB5\u0125\xB7\xB8\u0131\u015F\u011F\u0135\xBD\uFFFD\u017C\xC0\xC1\xC2\uFFFD\xC4\u010A\u0108\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\uFFFD\xD1\xD2\xD3\xD4\u0120\xD6\xD7\u011C\xD9\xDA\xDB\xDC\u016C\u015C\xDF\xE0\xE1\xE2\uFFFD\xE4\u010B\u0109\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\uFFFD\xF1\xF2\xF3\xF4\u0121\xF6\xF7\u011D\xF9\xFA\xFB\xFC\u016D\u015D\u02D9"
    },
    cp28593: "iso88593",
    iso88594: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u0138\u0156\xA4\u0128\u013B\xA7\xA8\u0160\u0112\u0122\u0166\xAD\u017D\xAF\xB0\u0105\u02DB\u0157\xB4\u0129\u013C\u02C7\xB8\u0161\u0113\u0123\u0167\u014A\u017E\u014B\u0100\xC1\xC2\xC3\xC4\xC5\xC6\u012E\u010C\xC9\u0118\xCB\u0116\xCD\xCE\u012A\u0110\u0145\u014C\u0136\xD4\xD5\xD6\xD7\xD8\u0172\xDA\xDB\xDC\u0168\u016A\xDF\u0101\xE1\xE2\xE3\xE4\xE5\xE6\u012F\u010D\xE9\u0119\xEB\u0117\xED\xEE\u012B\u0111\u0146\u014D\u0137\xF4\xF5\xF6\xF7\xF8\u0173\xFA\xFB\xFC\u0169\u016B\u02D9"
    },
    cp28594: "iso88594",
    iso88595: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0401\u0402\u0403\u0404\u0405\u0406\u0407\u0408\u0409\u040A\u040B\u040C\xAD\u040E\u040F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u2116\u0451\u0452\u0453\u0454\u0455\u0456\u0457\u0458\u0459\u045A\u045B\u045C\xA7\u045E\u045F"
    },
    cp28595: "iso88595",
    iso88596: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\uFFFD\uFFFD\xA4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u060C\xAD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u061B\uFFFD\uFFFD\uFFFD\u061F\uFFFD\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\u0638\u0639\u063A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0640\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    cp28596: "iso88596",
    iso88597: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u2018\u2019\xA3\u20AC\u20AF\xA6\xA7\xA8\xA9\u037A\xAB\xAC\xAD\uFFFD\u2015\xB0\xB1\xB2\xB3\u0384\u0385\u0386\xB7\u0388\u0389\u038A\xBB\u038C\xBD\u038E\u038F\u0390\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\uFFFD\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\uFFFD"
    },
    cp28597: "iso88597",
    iso88598: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xD7\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xF7\xBB\xBC\xBD\xBE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2017\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\uFFFD\u200E\u200F\uFFFD"
    },
    cp28598: "iso88598",
    iso88599: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u011E\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u0130\u015E\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u011F\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u0131\u015F\xFF"
    },
    cp28599: "iso88599",
    iso885910: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u0112\u0122\u012A\u0128\u0136\xA7\u013B\u0110\u0160\u0166\u017D\xAD\u016A\u014A\xB0\u0105\u0113\u0123\u012B\u0129\u0137\xB7\u013C\u0111\u0161\u0167\u017E\u2015\u016B\u014B\u0100\xC1\xC2\xC3\xC4\xC5\xC6\u012E\u010C\xC9\u0118\xCB\u0116\xCD\xCE\xCF\xD0\u0145\u014C\xD3\xD4\xD5\xD6\u0168\xD8\u0172\xDA\xDB\xDC\xDD\xDE\xDF\u0101\xE1\xE2\xE3\xE4\xE5\xE6\u012F\u010D\xE9\u0119\xEB\u0117\xED\xEE\xEF\xF0\u0146\u014D\xF3\xF4\xF5\xF6\u0169\xF8\u0173\xFA\xFB\xFC\xFD\xFE\u0138"
    },
    cp28600: "iso885910",
    iso885911: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    cp28601: "iso885911",
    iso885913: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u201D\xA2\xA3\xA4\u201E\xA6\xA7\xD8\xA9\u0156\xAB\xAC\xAD\xAE\xC6\xB0\xB1\xB2\xB3\u201C\xB5\xB6\xB7\xF8\xB9\u0157\xBB\xBC\xBD\xBE\xE6\u0104\u012E\u0100\u0106\xC4\xC5\u0118\u0112\u010C\xC9\u0179\u0116\u0122\u0136\u012A\u013B\u0160\u0143\u0145\xD3\u014C\xD5\xD6\xD7\u0172\u0141\u015A\u016A\xDC\u017B\u017D\xDF\u0105\u012F\u0101\u0107\xE4\xE5\u0119\u0113\u010D\xE9\u017A\u0117\u0123\u0137\u012B\u013C\u0161\u0144\u0146\xF3\u014D\xF5\xF6\xF7\u0173\u0142\u015B\u016B\xFC\u017C\u017E\u2019"
    },
    cp28603: "iso885913",
    iso885914: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u1E02\u1E03\xA3\u010A\u010B\u1E0A\xA7\u1E80\xA9\u1E82\u1E0B\u1EF2\xAD\xAE\u0178\u1E1E\u1E1F\u0120\u0121\u1E40\u1E41\xB6\u1E56\u1E81\u1E57\u1E83\u1E60\u1EF3\u1E84\u1E85\u1E61\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u0174\xD1\xD2\xD3\xD4\xD5\xD6\u1E6A\xD8\xD9\xDA\xDB\xDC\xDD\u0176\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u0175\xF1\xF2\xF3\xF4\xF5\xF6\u1E6B\xF8\xF9\xFA\xFB\xFC\xFD\u0177\xFF"
    },
    cp28604: "iso885914",
    iso885915: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\u20AC\xA5\u0160\xA7\u0161\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\u017D\xB5\xB6\xB7\u017E\xB9\xBA\xBB\u0152\u0153\u0178\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
    },
    cp28605: "iso885915",
    iso885916: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u0105\u0141\u20AC\u201E\u0160\xA7\u0161\xA9\u0218\xAB\u0179\xAD\u017A\u017B\xB0\xB1\u010C\u0142\u017D\u201D\xB6\xB7\u017E\u010D\u0219\xBB\u0152\u0153\u0178\u017C\xC0\xC1\xC2\u0102\xC4\u0106\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u0110\u0143\xD2\xD3\xD4\u0150\xD6\u015A\u0170\xD9\xDA\xDB\xDC\u0118\u021A\xDF\xE0\xE1\xE2\u0103\xE4\u0107\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u0111\u0144\xF2\xF3\xF4\u0151\xF6\u015B\u0171\xF9\xFA\xFB\xFC\u0119\u021B\xFF"
    },
    cp28606: "iso885916",
    cp437: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm437: "cp437",
    csibm437: "cp437",
    cp737: {
      type: "_sbcs",
      chars: "\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C2\u03C4\u03C5\u03C6\u03C7\u03C8\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03C9\u03AC\u03AD\u03AE\u03CA\u03AF\u03CC\u03CD\u03CB\u03CE\u0386\u0388\u0389\u038A\u038C\u038E\u038F\xB1\u2265\u2264\u03AA\u03AB\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm737: "cp737",
    csibm737: "cp737",
    cp775: {
      type: "_sbcs",
      chars: "\u0106\xFC\xE9\u0101\xE4\u0123\xE5\u0107\u0142\u0113\u0156\u0157\u012B\u0179\xC4\xC5\xC9\xE6\xC6\u014D\xF6\u0122\xA2\u015A\u015B\xD6\xDC\xF8\xA3\xD8\xD7\xA4\u0100\u012A\xF3\u017B\u017C\u017A\u201D\xA6\xA9\xAE\xAC\xBD\xBC\u0141\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u0104\u010C\u0118\u0116\u2563\u2551\u2557\u255D\u012E\u0160\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u0172\u016A\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u017D\u0105\u010D\u0119\u0117\u012F\u0161\u0173\u016B\u017E\u2518\u250C\u2588\u2584\u258C\u2590\u2580\xD3\xDF\u014C\u0143\xF5\xD5\xB5\u0144\u0136\u0137\u013B\u013C\u0146\u0112\u0145\u2019\xAD\xB1\u201C\xBE\xB6\xA7\xF7\u201E\xB0\u2219\xB7\xB9\xB3\xB2\u25A0\xA0"
    },
    ibm775: "cp775",
    csibm775: "cp775",
    cp850: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\xD7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xF0\xD0\xCA\xCB\xC8\u0131\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\xFE\xDE\xDA\xDB\xD9\xFD\xDD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
    },
    ibm850: "cp850",
    csibm850: "cp850",
    cp852: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\u016F\u0107\xE7\u0142\xEB\u0150\u0151\xEE\u0179\xC4\u0106\xC9\u0139\u013A\xF4\xF6\u013D\u013E\u015A\u015B\xD6\xDC\u0164\u0165\u0141\xD7\u010D\xE1\xED\xF3\xFA\u0104\u0105\u017D\u017E\u0118\u0119\xAC\u017A\u010C\u015F\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\u011A\u015E\u2563\u2551\u2557\u255D\u017B\u017C\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u0102\u0103\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\u0111\u0110\u010E\xCB\u010F\u0147\xCD\xCE\u011B\u2518\u250C\u2588\u2584\u0162\u016E\u2580\xD3\xDF\xD4\u0143\u0144\u0148\u0160\u0161\u0154\xDA\u0155\u0170\xFD\xDD\u0163\xB4\xAD\u02DD\u02DB\u02C7\u02D8\xA7\xF7\xB8\xB0\xA8\u02D9\u0171\u0158\u0159\u25A0\xA0"
    },
    ibm852: "cp852",
    csibm852: "cp852",
    cp855: {
      type: "_sbcs",
      chars: "\u0452\u0402\u0453\u0403\u0451\u0401\u0454\u0404\u0455\u0405\u0456\u0406\u0457\u0407\u0458\u0408\u0459\u0409\u045A\u040A\u045B\u040B\u045C\u040C\u045E\u040E\u045F\u040F\u044E\u042E\u044A\u042A\u0430\u0410\u0431\u0411\u0446\u0426\u0434\u0414\u0435\u0415\u0444\u0424\u0433\u0413\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u0445\u0425\u0438\u0418\u2563\u2551\u2557\u255D\u0439\u0419\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u043A\u041A\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\u043B\u041B\u043C\u041C\u043D\u041D\u043E\u041E\u043F\u2518\u250C\u2588\u2584\u041F\u044F\u2580\u042F\u0440\u0420\u0441\u0421\u0442\u0422\u0443\u0423\u0436\u0416\u0432\u0412\u044C\u042C\u2116\xAD\u044B\u042B\u0437\u0417\u0448\u0428\u044D\u042D\u0449\u0429\u0447\u0427\xA7\u25A0\xA0"
    },
    ibm855: "cp855",
    csibm855: "cp855",
    cp856: {
      type: "_sbcs",
      chars: "\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\xA3\uFFFD\xD7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xAE\xAC\xBD\xBC\uFFFD\xAB\xBB\u2591\u2592\u2593\u2502\u2524\uFFFD\uFFFD\uFFFD\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\uFFFD\uFFFD\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2518\u250C\u2588\u2584\xA6\uFFFD\u2580\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xB5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
    },
    ibm856: "cp856",
    csibm856: "cp856",
    cp857: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\u0131\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\u0130\xD6\xDC\xF8\xA3\xD8\u015E\u015F\xE1\xED\xF3\xFA\xF1\xD1\u011E\u011F\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xBA\xAA\xCA\xCB\xC8\uFFFD\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\uFFFD\xD7\xDA\xDB\xD9\xEC\xFF\xAF\xB4\xAD\xB1\uFFFD\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
    },
    ibm857: "cp857",
    csibm857: "cp857",
    cp858: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\xD7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xF0\xD0\xCA\xCB\xC8\u20AC\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\xFE\xDE\xDA\xDB\xD9\xFD\xDD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
    },
    ibm858: "cp858",
    csibm858: "cp858",
    cp860: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE3\xE0\xC1\xE7\xEA\xCA\xE8\xCD\xD4\xEC\xC3\xC2\xC9\xC0\xC8\xF4\xF5\xF2\xDA\xF9\xCC\xD5\xDC\xA2\xA3\xD9\u20A7\xD3\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xD2\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm860: "cp860",
    csibm860: "cp860",
    cp861: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xD0\xF0\xDE\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xFE\xFB\xDD\xFD\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xC1\xCD\xD3\xDA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm861: "cp861",
    csibm861: "cp861",
    cp862: {
      type: "_sbcs",
      chars: "\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm862: "cp862",
    csibm862: "cp862",
    cp863: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xC2\xE0\xB6\xE7\xEA\xEB\xE8\xEF\xEE\u2017\xC0\xA7\xC9\xC8\xCA\xF4\xCB\xCF\xFB\xF9\xA4\xD4\xDC\xA2\xA3\xD9\xDB\u0192\xA6\xB4\xF3\xFA\xA8\xB8\xB3\xAF\xCE\u2310\xAC\xBD\xBC\xBE\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm863: "cp863",
    csibm863: "cp863",
    cp864: {
      type: "_sbcs",
      chars: `\0\x01\x02\x03\x04\x05\x06\x07	
\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#$\u066A&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xB0\xB7\u2219\u221A\u2592\u2500\u2502\u253C\u2524\u252C\u251C\u2534\u2510\u250C\u2514\u2518\u03B2\u221E\u03C6\xB1\xBD\xBC\u2248\xAB\xBB\uFEF7\uFEF8\uFFFD\uFFFD\uFEFB\uFEFC\uFFFD\xA0\xAD\uFE82\xA3\xA4\uFE84\uFFFD\uFFFD\uFE8E\uFE8F\uFE95\uFE99\u060C\uFE9D\uFEA1\uFEA5\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\uFED1\u061B\uFEB1\uFEB5\uFEB9\u061F\xA2\uFE80\uFE81\uFE83\uFE85\uFECA\uFE8B\uFE8D\uFE91\uFE93\uFE97\uFE9B\uFE9F\uFEA3\uFEA7\uFEA9\uFEAB\uFEAD\uFEAF\uFEB3\uFEB7\uFEBB\uFEBF\uFEC1\uFEC5\uFECB\uFECF\xA6\xAC\xF7\xD7\uFEC9\u0640\uFED3\uFED7\uFEDB\uFEDF\uFEE3\uFEE7\uFEEB\uFEED\uFEEF\uFEF3\uFEBD\uFECC\uFECE\uFECD\uFEE1\uFE7D\u0651\uFEE5\uFEE9\uFEEC\uFEF0\uFEF2\uFED0\uFED5\uFEF5\uFEF6\uFEDD\uFED9\uFEF1\u25A0\uFFFD`
    },
    ibm864: "cp864",
    csibm864: "cp864",
    cp865: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xA4\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm865: "cp865",
    csibm865: "cp865",
    cp866: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0404\u0454\u0407\u0457\u040E\u045E\xB0\u2219\xB7\u221A\u2116\xA4\u25A0\xA0"
    },
    ibm866: "cp866",
    csibm866: "cp866",
    cp869: {
      type: "_sbcs",
      chars: "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0386\uFFFD\xB7\xAC\xA6\u2018\u2019\u0388\u2015\u0389\u038A\u03AA\u038C\uFFFD\uFFFD\u038E\u03AB\xA9\u038F\xB2\xB3\u03AC\xA3\u03AD\u03AE\u03AF\u03CA\u0390\u03CC\u03CD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\xBD\u0398\u0399\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u039A\u039B\u039C\u039D\u2563\u2551\u2557\u255D\u039E\u039F\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u03A0\u03A1\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u2518\u250C\u2588\u2584\u03B4\u03B5\u2580\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C2\u03C4\u0384\xAD\xB1\u03C5\u03C6\u03C7\xA7\u03C8\u0385\xB0\xA8\u03C9\u03CB\u03B0\u03CE\u25A0\xA0"
    },
    ibm869: "cp869",
    csibm869: "cp869",
    cp922: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\u203E\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u0160\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\u017D\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u0161\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\u017E\xFF"
    },
    ibm922: "cp922",
    csibm922: "cp922",
    cp1046: {
      type: "_sbcs",
      chars: "\uFE88\xD7\xF7\uF8F6\uF8F5\uF8F4\uF8F7\uFE71\x88\u25A0\u2502\u2500\u2510\u250C\u2514\u2518\uFE79\uFE7B\uFE7D\uFE7F\uFE77\uFE8A\uFEF0\uFEF3\uFEF2\uFECE\uFECF\uFED0\uFEF6\uFEF8\uFEFA\uFEFC\xA0\uF8FA\uF8F9\uF8F8\xA4\uF8FB\uFE8B\uFE91\uFE97\uFE9B\uFE9F\uFEA3\u060C\xAD\uFEA7\uFEB3\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\uFEB7\u061B\uFEBB\uFEBF\uFECA\u061F\uFECB\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\uFEC7\u0639\u063A\uFECC\uFE82\uFE84\uFE8E\uFED3\u0640\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652\uFED7\uFEDB\uFEDF\uF8FC\uFEF5\uFEF7\uFEF9\uFEFB\uFEE3\uFEE7\uFEEC\uFEE9\uFFFD"
    },
    ibm1046: "cp1046",
    csibm1046: "cp1046",
    cp1124: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0401\u0402\u0490\u0404\u0405\u0406\u0407\u0408\u0409\u040A\u040B\u040C\xAD\u040E\u040F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u2116\u0451\u0452\u0491\u0454\u0455\u0456\u0457\u0458\u0459\u045A\u045B\u045C\xA7\u045E\u045F"
    },
    ibm1124: "cp1124",
    csibm1124: "cp1124",
    cp1125: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0490\u0491\u0404\u0454\u0406\u0456\u0407\u0457\xB7\u221A\u2116\xA4\u25A0\xA0"
    },
    ibm1125: "cp1125",
    csibm1125: "cp1125",
    cp1129: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\u0153\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\u0178\xB5\xB6\xB7\u0152\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF"
    },
    ibm1129: "cp1129",
    csibm1129: "cp1129",
    cp1133: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0E81\u0E82\u0E84\u0E87\u0E88\u0EAA\u0E8A\u0E8D\u0E94\u0E95\u0E96\u0E97\u0E99\u0E9A\u0E9B\u0E9C\u0E9D\u0E9E\u0E9F\u0EA1\u0EA2\u0EA3\u0EA5\u0EA7\u0EAB\u0EAD\u0EAE\uFFFD\uFFFD\uFFFD\u0EAF\u0EB0\u0EB2\u0EB3\u0EB4\u0EB5\u0EB6\u0EB7\u0EB8\u0EB9\u0EBC\u0EB1\u0EBB\u0EBD\uFFFD\uFFFD\uFFFD\u0EC0\u0EC1\u0EC2\u0EC3\u0EC4\u0EC8\u0EC9\u0ECA\u0ECB\u0ECC\u0ECD\u0EC6\uFFFD\u0EDC\u0EDD\u20AD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0ED0\u0ED1\u0ED2\u0ED3\u0ED4\u0ED5\u0ED6\u0ED7\u0ED8\u0ED9\uFFFD\uFFFD\xA2\xAC\xA6\uFFFD"
    },
    ibm1133: "cp1133",
    csibm1133: "cp1133",
    cp1161: {
      type: "_sbcs",
      chars: "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0E48\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\u0E49\u0E4A\u0E4B\u20AC\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\xA2\xAC\xA6\xA0"
    },
    ibm1161: "cp1161",
    csibm1161: "cp1161",
    cp1162: {
      type: "_sbcs",
      chars: "\u20AC\x81\x82\x83\x84\u2026\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    ibm1162: "cp1162",
    csibm1162: "cp1162",
    cp1163: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\u20AC\xA5\xA6\xA7\u0153\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\u0178\xB5\xB6\xB7\u0152\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF"
    },
    ibm1163: "cp1163",
    csibm1163: "cp1163",
    maccroatian: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\u0160\u2122\xB4\xA8\u2260\u017D\xD8\u221E\xB1\u2264\u2265\u2206\xB5\u2202\u2211\u220F\u0161\u222B\xAA\xBA\u2126\u017E\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u0106\xAB\u010C\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u0110\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\uFFFD\xA9\u2044\xA4\u2039\u203A\xC6\xBB\u2013\xB7\u201A\u201E\u2030\xC2\u0107\xC1\u010D\xC8\xCD\xCE\xCF\xCC\xD3\xD4\u0111\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u03C0\xCB\u02DA\xB8\xCA\xE6\u02C7"
    },
    maccyrillic: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u2020\xB0\xA2\xA3\xA7\u2022\xB6\u0406\xAE\xA9\u2122\u0402\u0452\u2260\u0403\u0453\u221E\xB1\u2264\u2265\u0456\xB5\u2202\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040A\u045A\u0458\u0405\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\u040B\u045B\u040C\u045C\u0455\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201E\u040E\u045E\u040F\u045F\u2116\u0401\u0451\u044F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\xA4"
    },
    macgreek: {
      type: "_sbcs",
      chars: "\xC4\xB9\xB2\xC9\xB3\xD6\xDC\u0385\xE0\xE2\xE4\u0384\xA8\xE7\xE9\xE8\xEA\xEB\xA3\u2122\xEE\xEF\u2022\xBD\u2030\xF4\xF6\xA6\xAD\xF9\xFB\xFC\u2020\u0393\u0394\u0398\u039B\u039E\u03A0\xDF\xAE\xA9\u03A3\u03AA\xA7\u2260\xB0\u0387\u0391\xB1\u2264\u2265\xA5\u0392\u0395\u0396\u0397\u0399\u039A\u039C\u03A6\u03AB\u03A8\u03A9\u03AC\u039D\xAC\u039F\u03A1\u2248\u03A4\xAB\xBB\u2026\xA0\u03A5\u03A7\u0386\u0388\u0153\u2013\u2015\u201C\u201D\u2018\u2019\xF7\u0389\u038A\u038C\u038E\u03AD\u03AE\u03AF\u03CC\u038F\u03CD\u03B1\u03B2\u03C8\u03B4\u03B5\u03C6\u03B3\u03B7\u03B9\u03BE\u03BA\u03BB\u03BC\u03BD\u03BF\u03C0\u03CE\u03C1\u03C3\u03C4\u03B8\u03C9\u03C2\u03C7\u03C5\u03B6\u03CA\u03CB\u0390\u03B0\uFFFD"
    },
    maciceland: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\xDD\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\xD0\xF0\xDE\xFE\xFD\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
    },
    macroman: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\uFB01\uFB02\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
    },
    macromania: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\u0102\u015E\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\u0103\u015F\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\u0162\u0163\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
    },
    macthai: {
      type: "_sbcs",
      chars: "\xAB\xBB\u2026\uF88C\uF88F\uF892\uF895\uF898\uF88B\uF88E\uF891\uF894\uF897\u201C\u201D\uF899\uFFFD\u2022\uF884\uF889\uF885\uF886\uF887\uF888\uF88A\uF88D\uF890\uF893\uF896\u2018\u2019\uFFFD\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFEFF\u200B\u2013\u2014\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u2122\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\xAE\xA9\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    macturkish: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u011E\u011F\u0130\u0131\u015E\u015F\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\uFFFD\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
    },
    macukraine: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u2020\xB0\u0490\xA3\xA7\u2022\xB6\u0406\xAE\xA9\u2122\u0402\u0452\u2260\u0403\u0453\u221E\xB1\u2264\u2265\u0456\xB5\u0491\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040A\u045A\u0458\u0405\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\u040B\u045B\u040C\u045C\u0455\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201E\u040E\u045E\u040F\u045F\u2116\u0401\u0451\u044F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\xA4"
    },
    koi8r: {
      type: "_sbcs",
      chars: "\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552\u0451\u2553\u2554\u2555\u2556\u2557\u2558\u2559\u255A\u255B\u255C\u255D\u255E\u255F\u2560\u2561\u0401\u2562\u2563\u2564\u2565\u2566\u2567\u2568\u2569\u256A\u256B\u256C\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
    },
    koi8u: {
      type: "_sbcs",
      chars: "\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552\u0451\u0454\u2554\u0456\u0457\u2557\u2558\u2559\u255A\u255B\u0491\u255D\u255E\u255F\u2560\u2561\u0401\u0404\u2563\u0406\u0407\u2566\u2567\u2568\u2569\u256A\u0490\u256C\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
    },
    koi8ru: {
      type: "_sbcs",
      chars: "\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552\u0451\u0454\u2554\u0456\u0457\u2557\u2558\u2559\u255A\u255B\u0491\u045E\u255E\u255F\u2560\u2561\u0401\u0404\u2563\u0406\u0407\u2566\u2567\u2568\u2569\u256A\u0490\u040E\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
    },
    koi8t: {
      type: "_sbcs",
      chars: "\u049B\u0493\u201A\u0492\u201E\u2026\u2020\u2021\uFFFD\u2030\u04B3\u2039\u04B2\u04B7\u04B6\uFFFD\u049A\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u04EF\u04EE\u0451\xA4\u04E3\xA6\xA7\uFFFD\uFFFD\uFFFD\xAB\xAC\xAD\xAE\uFFFD\xB0\xB1\xB2\u0401\uFFFD\u04E2\xB6\xB7\uFFFD\u2116\uFFFD\xBB\uFFFD\uFFFD\uFFFD\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
    },
    armscii8: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\u0587\u0589)(\xBB\xAB\u2014.\u055D,-\u058A\u2026\u055C\u055B\u055E\u0531\u0561\u0532\u0562\u0533\u0563\u0534\u0564\u0535\u0565\u0536\u0566\u0537\u0567\u0538\u0568\u0539\u0569\u053A\u056A\u053B\u056B\u053C\u056C\u053D\u056D\u053E\u056E\u053F\u056F\u0540\u0570\u0541\u0571\u0542\u0572\u0543\u0573\u0544\u0574\u0545\u0575\u0546\u0576\u0547\u0577\u0548\u0578\u0549\u0579\u054A\u057A\u054B\u057B\u054C\u057C\u054D\u057D\u054E\u057E\u054F\u057F\u0550\u0580\u0551\u0581\u0552\u0582\u0553\u0583\u0554\u0584\u0555\u0585\u0556\u0586\u055A\uFFFD"
    },
    rk1048: {
      type: "_sbcs",
      chars: "\u0402\u0403\u201A\u0453\u201E\u2026\u2020\u2021\u20AC\u2030\u0409\u2039\u040A\u049A\u04BA\u040F\u0452\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0459\u203A\u045A\u049B\u04BB\u045F\xA0\u04B0\u04B1\u04D8\xA4\u04E8\xA6\xA7\u0401\xA9\u0492\xAB\xAC\xAD\xAE\u04AE\xB0\xB1\u0406\u0456\u04E9\xB5\xB6\xB7\u0451\u2116\u0493\xBB\u04D9\u04A2\u04A3\u04AF\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F"
    },
    tcvn: {
      type: "_sbcs",
      chars: `\0\xDA\u1EE4\x03\u1EEA\u1EEC\u1EEE\x07	
\r\x0E\x0F\x10\u1EE8\u1EF0\u1EF2\u1EF6\u1EF8\xDD\u1EF4\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC0\u1EA2\xC3\xC1\u1EA0\u1EB6\u1EAC\xC8\u1EBA\u1EBC\xC9\u1EB8\u1EC6\xCC\u1EC8\u0128\xCD\u1ECA\xD2\u1ECE\xD5\xD3\u1ECC\u1ED8\u1EDC\u1EDE\u1EE0\u1EDA\u1EE2\xD9\u1EE6\u0168\xA0\u0102\xC2\xCA\xD4\u01A0\u01AF\u0110\u0103\xE2\xEA\xF4\u01A1\u01B0\u0111\u1EB0\u0300\u0309\u0303\u0301\u0323\xE0\u1EA3\xE3\xE1\u1EA1\u1EB2\u1EB1\u1EB3\u1EB5\u1EAF\u1EB4\u1EAE\u1EA6\u1EA8\u1EAA\u1EA4\u1EC0\u1EB7\u1EA7\u1EA9\u1EAB\u1EA5\u1EAD\xE8\u1EC2\u1EBB\u1EBD\xE9\u1EB9\u1EC1\u1EC3\u1EC5\u1EBF\u1EC7\xEC\u1EC9\u1EC4\u1EBE\u1ED2\u0129\xED\u1ECB\xF2\u1ED4\u1ECF\xF5\xF3\u1ECD\u1ED3\u1ED5\u1ED7\u1ED1\u1ED9\u1EDD\u1EDF\u1EE1\u1EDB\u1EE3\xF9\u1ED6\u1EE7\u0169\xFA\u1EE5\u1EEB\u1EED\u1EEF\u1EE9\u1EF1\u1EF3\u1EF7\u1EF9\xFD\u1EF5\u1ED0`
    },
    georgianacademy: {
      type: "_sbcs",
      chars: "\x80\x81\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\x9D\x9E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\u10D0\u10D1\u10D2\u10D3\u10D4\u10D5\u10D6\u10D7\u10D8\u10D9\u10DA\u10DB\u10DC\u10DD\u10DE\u10DF\u10E0\u10E1\u10E2\u10E3\u10E4\u10E5\u10E6\u10E7\u10E8\u10E9\u10EA\u10EB\u10EC\u10ED\u10EE\u10EF\u10F0\u10F1\u10F2\u10F3\u10F4\u10F5\u10F6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
    },
    georgianps: {
      type: "_sbcs",
      chars: "\x80\x81\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\x9D\x9E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\u10D0\u10D1\u10D2\u10D3\u10D4\u10D5\u10D6\u10F1\u10D7\u10D8\u10D9\u10DA\u10DB\u10DC\u10F2\u10DD\u10DE\u10DF\u10E0\u10E1\u10E2\u10F3\u10E3\u10E4\u10E5\u10E6\u10E7\u10E8\u10E9\u10EA\u10EB\u10EC\u10ED\u10EE\u10F4\u10EF\u10F0\u10F5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
    },
    pt154: {
      type: "_sbcs",
      chars: "\u0496\u0492\u04EE\u0493\u201E\u2026\u04B6\u04AE\u04B2\u04AF\u04A0\u04E2\u04A2\u049A\u04BA\u04B8\u0497\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u04B3\u04B7\u04A1\u04E3\u04A3\u049B\u04BB\u04B9\xA0\u040E\u045E\u0408\u04E8\u0498\u04B0\xA7\u0401\xA9\u04D8\xAB\xAC\u04EF\xAE\u049C\xB0\u04B1\u0406\u0456\u0499\u04E9\xB6\xB7\u0451\u2116\u04D9\xBB\u0458\u04AA\u04AB\u049D\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F"
    },
    viscii: {
      type: "_sbcs",
      chars: `\0\x01\u1EB2\x03\x04\u1EB4\u1EAA\x07	
\r\x0E\x0F\x10\x11\x12\x13\u1EF6\x15\x16\x17\x18\u1EF8\x1A\x1B\x1C\x1D\u1EF4\x1F !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u1EA0\u1EAE\u1EB0\u1EB6\u1EA4\u1EA6\u1EA8\u1EAC\u1EBC\u1EB8\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EE2\u1EDA\u1EDC\u1EDE\u1ECA\u1ECE\u1ECC\u1EC8\u1EE6\u0168\u1EE4\u1EF2\xD5\u1EAF\u1EB1\u1EB7\u1EA5\u1EA7\u1EA9\u1EAD\u1EBD\u1EB9\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1ED1\u1ED3\u1ED5\u1ED7\u1EE0\u01A0\u1ED9\u1EDD\u1EDF\u1ECB\u1EF0\u1EE8\u1EEA\u1EEC\u01A1\u1EDB\u01AF\xC0\xC1\xC2\xC3\u1EA2\u0102\u1EB3\u1EB5\xC8\xC9\xCA\u1EBA\xCC\xCD\u0128\u1EF3\u0110\u1EE9\xD2\xD3\xD4\u1EA1\u1EF7\u1EEB\u1EED\xD9\xDA\u1EF9\u1EF5\xDD\u1EE1\u01B0\xE0\xE1\xE2\xE3\u1EA3\u0103\u1EEF\u1EAB\xE8\xE9\xEA\u1EBB\xEC\xED\u0129\u1EC9\u0111\u1EF1\xF2\xF3\xF4\xF5\u1ECF\u1ECD\u1EE5\xF9\xFA\u0169\u1EE7\xFD\u1EE3\u1EEE`
    },
    iso646cn: {
      type: "_sbcs",
      chars: `\0\x01\x02\x03\x04\x05\x06\x07	
\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#\xA5%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}\u203E\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD`
    },
    iso646jp: {
      type: "_sbcs",
      chars: `\0\x01\x02\x03\x04\x05\x06\x07	
\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\xA5]^_\`abcdefghijklmnopqrstuvwxyz{|}\u203E\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD`
    },
    hproman8: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xC0\xC2\xC8\xCA\xCB\xCE\xCF\xB4\u02CB\u02C6\xA8\u02DC\xD9\xDB\u20A4\xAF\xDD\xFD\xB0\xC7\xE7\xD1\xF1\xA1\xBF\xA4\xA3\xA5\xA7\u0192\xA2\xE2\xEA\xF4\xFB\xE1\xE9\xF3\xFA\xE0\xE8\xF2\xF9\xE4\xEB\xF6\xFC\xC5\xEE\xD8\xC6\xE5\xED\xF8\xE6\xC4\xEC\xD6\xDC\xC9\xEF\xDF\xD4\xC1\xC3\xE3\xD0\xF0\xCD\xCC\xD3\xD2\xD5\xF5\u0160\u0161\xDA\u0178\xFF\xDE\xFE\xB7\xB5\xB6\xBE\u2014\xBC\xBD\xAA\xBA\xAB\u25A0\xBB\xB1\uFFFD"
    },
    macintosh: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\uFB01\uFB02\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
    },
    ascii: {
      type: "_sbcs",
      chars: "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    tis620: {
      type: "_sbcs",
      chars: "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
    }
  };
});

// node_modules/iconv-lite/encodings/dbcs-codec.js
var require_dbcs_codec = __commonJS((exports) => {
  function DBCSCodec(codecOptions, iconv) {
    this.encodingName = codecOptions.encodingName;
    if (!codecOptions)
      throw new Error("DBCS codec is called without the data.");
    if (!codecOptions.table)
      throw new Error("Encoding '" + this.encodingName + "' has no data.");
    var mappingTable = codecOptions.table();
    this.decodeTables = [];
    this.decodeTables[0] = UNASSIGNED_NODE.slice(0);
    this.decodeTableSeq = [];
    for (var i4 = 0;i4 < mappingTable.length; i4++)
      this._addDecodeChunk(mappingTable[i4]);
    if (typeof codecOptions.gb18030 === "function") {
      this.gb18030 = codecOptions.gb18030();
      var commonThirdByteNodeIdx = this.decodeTables.length;
      this.decodeTables.push(UNASSIGNED_NODE.slice(0));
      var commonFourthByteNodeIdx = this.decodeTables.length;
      this.decodeTables.push(UNASSIGNED_NODE.slice(0));
      var firstByteNode = this.decodeTables[0];
      for (var i4 = 129;i4 <= 254; i4++) {
        var secondByteNode = this.decodeTables[NODE_START - firstByteNode[i4]];
        for (var j = 48;j <= 57; j++) {
          if (secondByteNode[j] === UNASSIGNED) {
            secondByteNode[j] = NODE_START - commonThirdByteNodeIdx;
          } else if (secondByteNode[j] > NODE_START) {
            throw new Error("gb18030 decode tables conflict at byte 2");
          }
          var thirdByteNode = this.decodeTables[NODE_START - secondByteNode[j]];
          for (var k = 129;k <= 254; k++) {
            if (thirdByteNode[k] === UNASSIGNED) {
              thirdByteNode[k] = NODE_START - commonFourthByteNodeIdx;
            } else if (thirdByteNode[k] === NODE_START - commonFourthByteNodeIdx) {
              continue;
            } else if (thirdByteNode[k] > NODE_START) {
              throw new Error("gb18030 decode tables conflict at byte 3");
            }
            var fourthByteNode = this.decodeTables[NODE_START - thirdByteNode[k]];
            for (var l = 48;l <= 57; l++) {
              if (fourthByteNode[l] === UNASSIGNED)
                fourthByteNode[l] = GB18030_CODE;
            }
          }
        }
      }
    }
    this.defaultCharUnicode = iconv.defaultCharUnicode;
    this.encodeTable = [];
    this.encodeTableSeq = [];
    var skipEncodeChars = {};
    if (codecOptions.encodeSkipVals)
      for (var i4 = 0;i4 < codecOptions.encodeSkipVals.length; i4++) {
        var val = codecOptions.encodeSkipVals[i4];
        if (typeof val === "number")
          skipEncodeChars[val] = true;
        else
          for (var j = val.from;j <= val.to; j++)
            skipEncodeChars[j] = true;
      }
    this._fillEncodeTable(0, 0, skipEncodeChars);
    if (codecOptions.encodeAdd) {
      for (var uChar in codecOptions.encodeAdd)
        if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
          this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
    }
    this.defCharSB = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
    if (this.defCharSB === UNASSIGNED)
      this.defCharSB = this.encodeTable[0]["?"];
    if (this.defCharSB === UNASSIGNED)
      this.defCharSB = "?".charCodeAt(0);
  }
  function DBCSEncoder(options, codec) {
    this.leadSurrogate = -1;
    this.seqObj = undefined;
    this.encodeTable = codec.encodeTable;
    this.encodeTableSeq = codec.encodeTableSeq;
    this.defaultCharSingleByte = codec.defCharSB;
    this.gb18030 = codec.gb18030;
  }
  function DBCSDecoder(options, codec) {
    this.nodeIdx = 0;
    this.prevBytes = [];
    this.decodeTables = codec.decodeTables;
    this.decodeTableSeq = codec.decodeTableSeq;
    this.defaultCharUnicode = codec.defaultCharUnicode;
    this.gb18030 = codec.gb18030;
  }
  function findIdx(table, val) {
    if (table[0] > val)
      return -1;
    var l = 0, r = table.length;
    while (l < r - 1) {
      var mid = l + (r - l + 1 >> 1);
      if (table[mid] <= val)
        l = mid;
      else
        r = mid;
    }
    return l;
  }
  var Buffer2 = require_safer().Buffer;
  exports._dbcs = DBCSCodec;
  var UNASSIGNED = -1;
  var GB18030_CODE = -2;
  var SEQ_START = -10;
  var NODE_START = -1000;
  var UNASSIGNED_NODE = new Array(256);
  var DEF_CHAR = -1;
  for (i3 = 0;i3 < 256; i3++)
    UNASSIGNED_NODE[i3] = UNASSIGNED;
  var i3;
  DBCSCodec.prototype.encoder = DBCSEncoder;
  DBCSCodec.prototype.decoder = DBCSDecoder;
  DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
    var bytes = [];
    for (;addr > 0; addr >>>= 8)
      bytes.push(addr & 255);
    if (bytes.length == 0)
      bytes.push(0);
    var node = this.decodeTables[0];
    for (var i4 = bytes.length - 1;i4 > 0; i4--) {
      var val = node[bytes[i4]];
      if (val == UNASSIGNED) {
        node[bytes[i4]] = NODE_START - this.decodeTables.length;
        this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
      } else if (val <= NODE_START) {
        node = this.decodeTables[NODE_START - val];
      } else
        throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
    }
    return node;
  };
  DBCSCodec.prototype._addDecodeChunk = function(chunk) {
    var curAddr = parseInt(chunk[0], 16);
    var writeTable = this._getDecodeTrieNode(curAddr);
    curAddr = curAddr & 255;
    for (var k = 1;k < chunk.length; k++) {
      var part = chunk[k];
      if (typeof part === "string") {
        for (var l = 0;l < part.length; ) {
          var code = part.charCodeAt(l++);
          if (55296 <= code && code < 56320) {
            var codeTrail = part.charCodeAt(l++);
            if (56320 <= codeTrail && codeTrail < 57344)
              writeTable[curAddr++] = 65536 + (code - 55296) * 1024 + (codeTrail - 56320);
            else
              throw new Error("Incorrect surrogate pair in " + this.encodingName + " at chunk " + chunk[0]);
          } else if (4080 < code && code <= 4095) {
            var len = 4095 - code + 2;
            var seq = [];
            for (var m3 = 0;m3 < len; m3++)
              seq.push(part.charCodeAt(l++));
            writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
            this.decodeTableSeq.push(seq);
          } else
            writeTable[curAddr++] = code;
        }
      } else if (typeof part === "number") {
        var charCode = writeTable[curAddr - 1] + 1;
        for (var l = 0;l < part; l++)
          writeTable[curAddr++] = charCode++;
      } else
        throw new Error("Incorrect type '" + typeof part + "' given in " + this.encodingName + " at chunk " + chunk[0]);
    }
    if (curAddr > 255)
      throw new Error("Incorrect chunk in " + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
  };
  DBCSCodec.prototype._getEncodeBucket = function(uCode) {
    var high = uCode >> 8;
    if (this.encodeTable[high] === undefined)
      this.encodeTable[high] = UNASSIGNED_NODE.slice(0);
    return this.encodeTable[high];
  };
  DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 255;
    if (bucket[low] <= SEQ_START)
      this.encodeTableSeq[SEQ_START - bucket[low]][DEF_CHAR] = dbcsCode;
    else if (bucket[low] == UNASSIGNED)
      bucket[low] = dbcsCode;
  };
  DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {
    var uCode = seq[0];
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 255;
    var node;
    if (bucket[low] <= SEQ_START) {
      node = this.encodeTableSeq[SEQ_START - bucket[low]];
    } else {
      node = {};
      if (bucket[low] !== UNASSIGNED)
        node[DEF_CHAR] = bucket[low];
      bucket[low] = SEQ_START - this.encodeTableSeq.length;
      this.encodeTableSeq.push(node);
    }
    for (var j = 1;j < seq.length - 1; j++) {
      var oldVal = node[uCode];
      if (typeof oldVal === "object")
        node = oldVal;
      else {
        node = node[uCode] = {};
        if (oldVal !== undefined)
          node[DEF_CHAR] = oldVal;
      }
    }
    uCode = seq[seq.length - 1];
    node[uCode] = dbcsCode;
  };
  DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
    var node = this.decodeTables[nodeIdx];
    var hasValues = false;
    var subNodeEmpty = {};
    for (var i4 = 0;i4 < 256; i4++) {
      var uCode = node[i4];
      var mbCode = prefix + i4;
      if (skipEncodeChars[mbCode])
        continue;
      if (uCode >= 0) {
        this._setEncodeChar(uCode, mbCode);
        hasValues = true;
      } else if (uCode <= NODE_START) {
        var subNodeIdx = NODE_START - uCode;
        if (!subNodeEmpty[subNodeIdx]) {
          var newPrefix = mbCode << 8 >>> 0;
          if (this._fillEncodeTable(subNodeIdx, newPrefix, skipEncodeChars))
            hasValues = true;
          else
            subNodeEmpty[subNodeIdx] = true;
        }
      } else if (uCode <= SEQ_START) {
        this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
        hasValues = true;
      }
    }
    return hasValues;
  };
  DBCSEncoder.prototype.write = function(str) {
    var newBuf = Buffer2.alloc(str.length * (this.gb18030 ? 4 : 3)), leadSurrogate = this.leadSurrogate, seqObj = this.seqObj, nextChar = -1, i4 = 0, j = 0;
    while (true) {
      if (nextChar === -1) {
        if (i4 == str.length)
          break;
        var uCode = str.charCodeAt(i4++);
      } else {
        var uCode = nextChar;
        nextChar = -1;
      }
      if (55296 <= uCode && uCode < 57344) {
        if (uCode < 56320) {
          if (leadSurrogate === -1) {
            leadSurrogate = uCode;
            continue;
          } else {
            leadSurrogate = uCode;
            uCode = UNASSIGNED;
          }
        } else {
          if (leadSurrogate !== -1) {
            uCode = 65536 + (leadSurrogate - 55296) * 1024 + (uCode - 56320);
            leadSurrogate = -1;
          } else {
            uCode = UNASSIGNED;
          }
        }
      } else if (leadSurrogate !== -1) {
        nextChar = uCode;
        uCode = UNASSIGNED;
        leadSurrogate = -1;
      }
      var dbcsCode = UNASSIGNED;
      if (seqObj !== undefined && uCode != UNASSIGNED) {
        var resCode = seqObj[uCode];
        if (typeof resCode === "object") {
          seqObj = resCode;
          continue;
        } else if (typeof resCode == "number") {
          dbcsCode = resCode;
        } else if (resCode == undefined) {
          resCode = seqObj[DEF_CHAR];
          if (resCode !== undefined) {
            dbcsCode = resCode;
            nextChar = uCode;
          } else {
          }
        }
        seqObj = undefined;
      } else if (uCode >= 0) {
        var subtable = this.encodeTable[uCode >> 8];
        if (subtable !== undefined)
          dbcsCode = subtable[uCode & 255];
        if (dbcsCode <= SEQ_START) {
          seqObj = this.encodeTableSeq[SEQ_START - dbcsCode];
          continue;
        }
        if (dbcsCode == UNASSIGNED && this.gb18030) {
          var idx = findIdx(this.gb18030.uChars, uCode);
          if (idx != -1) {
            var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
            newBuf[j++] = 129 + Math.floor(dbcsCode / 12600);
            dbcsCode = dbcsCode % 12600;
            newBuf[j++] = 48 + Math.floor(dbcsCode / 1260);
            dbcsCode = dbcsCode % 1260;
            newBuf[j++] = 129 + Math.floor(dbcsCode / 10);
            dbcsCode = dbcsCode % 10;
            newBuf[j++] = 48 + dbcsCode;
            continue;
          }
        }
      }
      if (dbcsCode === UNASSIGNED)
        dbcsCode = this.defaultCharSingleByte;
      if (dbcsCode < 256) {
        newBuf[j++] = dbcsCode;
      } else if (dbcsCode < 65536) {
        newBuf[j++] = dbcsCode >> 8;
        newBuf[j++] = dbcsCode & 255;
      } else if (dbcsCode < 16777216) {
        newBuf[j++] = dbcsCode >> 16;
        newBuf[j++] = dbcsCode >> 8 & 255;
        newBuf[j++] = dbcsCode & 255;
      } else {
        newBuf[j++] = dbcsCode >>> 24;
        newBuf[j++] = dbcsCode >>> 16 & 255;
        newBuf[j++] = dbcsCode >>> 8 & 255;
        newBuf[j++] = dbcsCode & 255;
      }
    }
    this.seqObj = seqObj;
    this.leadSurrogate = leadSurrogate;
    return newBuf.slice(0, j);
  };
  DBCSEncoder.prototype.end = function() {
    if (this.leadSurrogate === -1 && this.seqObj === undefined)
      return;
    var newBuf = Buffer2.alloc(10), j = 0;
    if (this.seqObj) {
      var dbcsCode = this.seqObj[DEF_CHAR];
      if (dbcsCode !== undefined) {
        if (dbcsCode < 256) {
          newBuf[j++] = dbcsCode;
        } else {
          newBuf[j++] = dbcsCode >> 8;
          newBuf[j++] = dbcsCode & 255;
        }
      } else {
      }
      this.seqObj = undefined;
    }
    if (this.leadSurrogate !== -1) {
      newBuf[j++] = this.defaultCharSingleByte;
      this.leadSurrogate = -1;
    }
    return newBuf.slice(0, j);
  };
  DBCSEncoder.prototype.findIdx = findIdx;
  DBCSDecoder.prototype.write = function(buf) {
    var newBuf = Buffer2.alloc(buf.length * 2), nodeIdx = this.nodeIdx, prevBytes = this.prevBytes, prevOffset = this.prevBytes.length, seqStart = -this.prevBytes.length, uCode;
    for (var i4 = 0, j = 0;i4 < buf.length; i4++) {
      var curByte = i4 >= 0 ? buf[i4] : prevBytes[i4 + prevOffset];
      var uCode = this.decodeTables[nodeIdx][curByte];
      if (uCode >= 0) {
      } else if (uCode === UNASSIGNED) {
        uCode = this.defaultCharUnicode.charCodeAt(0);
        i4 = seqStart;
      } else if (uCode === GB18030_CODE) {
        if (i4 >= 3) {
          var ptr = (buf[i4 - 3] - 129) * 12600 + (buf[i4 - 2] - 48) * 1260 + (buf[i4 - 1] - 129) * 10 + (curByte - 48);
        } else {
          var ptr = (prevBytes[i4 - 3 + prevOffset] - 129) * 12600 + ((i4 - 2 >= 0 ? buf[i4 - 2] : prevBytes[i4 - 2 + prevOffset]) - 48) * 1260 + ((i4 - 1 >= 0 ? buf[i4 - 1] : prevBytes[i4 - 1 + prevOffset]) - 129) * 10 + (curByte - 48);
        }
        var idx = findIdx(this.gb18030.gbChars, ptr);
        uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
      } else if (uCode <= NODE_START) {
        nodeIdx = NODE_START - uCode;
        continue;
      } else if (uCode <= SEQ_START) {
        var seq = this.decodeTableSeq[SEQ_START - uCode];
        for (var k = 0;k < seq.length - 1; k++) {
          uCode = seq[k];
          newBuf[j++] = uCode & 255;
          newBuf[j++] = uCode >> 8;
        }
        uCode = seq[seq.length - 1];
      } else
        throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);
      if (uCode >= 65536) {
        uCode -= 65536;
        var uCodeLead = 55296 | uCode >> 10;
        newBuf[j++] = uCodeLead & 255;
        newBuf[j++] = uCodeLead >> 8;
        uCode = 56320 | uCode & 1023;
      }
      newBuf[j++] = uCode & 255;
      newBuf[j++] = uCode >> 8;
      nodeIdx = 0;
      seqStart = i4 + 1;
    }
    this.nodeIdx = nodeIdx;
    this.prevBytes = seqStart >= 0 ? Array.prototype.slice.call(buf, seqStart) : prevBytes.slice(seqStart + prevOffset).concat(Array.prototype.slice.call(buf));
    return newBuf.slice(0, j).toString("ucs2");
  };
  DBCSDecoder.prototype.end = function() {
    var ret = "";
    while (this.prevBytes.length > 0) {
      ret += this.defaultCharUnicode;
      var bytesArr = this.prevBytes.slice(1);
      this.prevBytes = [];
      this.nodeIdx = 0;
      if (bytesArr.length > 0)
        ret += this.write(bytesArr);
    }
    this.prevBytes = [];
    this.nodeIdx = 0;
    return ret;
  };
});

// node_modules/iconv-lite/encodings/tables/shiftjis.json
var require_shiftjis = __commonJS((exports, module) => {
  module.exports = [
    ["0", " ", 128],
    ["a1", "｡", 62],
    ["8140", "　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈", 9, "＋－±×"],
    ["8180", "÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"],
    ["81b8", "∈∋⊆⊇⊂⊃∪∩"],
    ["81c8", "∧∨￢⇒⇔∀∃"],
    ["81da", "∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],
    ["81f0", "Å‰♯♭♪†‡¶"],
    ["81fc", "◯"],
    ["824f", "０", 9],
    ["8260", "Ａ", 25],
    ["8281", "ａ", 25],
    ["829f", "ぁ", 82],
    ["8340", "ァ", 62],
    ["8380", "ム", 22],
    ["839f", "Α", 16, "Σ", 6],
    ["83bf", "α", 16, "σ", 6],
    ["8440", "А", 5, "ЁЖ", 25],
    ["8470", "а", 5, "ёж", 7],
    ["8480", "о", 17],
    ["849f", "─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],
    ["8740", "①", 19, "Ⅰ", 9],
    ["875f", "㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],
    ["877e", "㍻"],
    ["8780", "〝〟№㏍℡㊤", 4, "㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],
    ["889f", "亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],
    ["8940", "院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"],
    ["8980", "園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],
    ["8a40", "魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"],
    ["8a80", "橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],
    ["8b40", "機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"],
    ["8b80", "朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],
    ["8c40", "掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"],
    ["8c80", "劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],
    ["8d40", "后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"],
    ["8d80", "項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],
    ["8e40", "察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"],
    ["8e80", "死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],
    ["8f40", "宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"],
    ["8f80", "準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],
    ["9040", "拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"],
    ["9080", "逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],
    ["9140", "繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"],
    ["9180", "操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],
    ["9240", "叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"],
    ["9280", "逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],
    ["9340", "邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"],
    ["9380", "凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],
    ["9440", "如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"],
    ["9480", "楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],
    ["9540", "鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"],
    ["9580", "斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],
    ["9640", "法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"],
    ["9680", "摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],
    ["9740", "諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"],
    ["9780", "沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],
    ["9840", "蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],
    ["989f", "弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],
    ["9940", "僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"],
    ["9980", "凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],
    ["9a40", "咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"],
    ["9a80", "噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],
    ["9b40", "奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"],
    ["9b80", "它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],
    ["9c40", "廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"],
    ["9c80", "怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],
    ["9d40", "戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"],
    ["9d80", "捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],
    ["9e40", "曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"],
    ["9e80", "梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],
    ["9f40", "檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"],
    ["9f80", "麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],
    ["e040", "漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"],
    ["e080", "烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],
    ["e140", "瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"],
    ["e180", "痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],
    ["e240", "磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"],
    ["e280", "窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],
    ["e340", "紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"],
    ["e380", "縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],
    ["e440", "隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"],
    ["e480", "艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],
    ["e540", "蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"],
    ["e580", "蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],
    ["e640", "襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"],
    ["e680", "諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],
    ["e740", "蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"],
    ["e780", "轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],
    ["e840", "錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"],
    ["e880", "閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],
    ["e940", "顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"],
    ["e980", "騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],
    ["ea40", "鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"],
    ["ea80", "黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"],
    ["ed40", "纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"],
    ["ed80", "塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],
    ["ee40", "犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"],
    ["ee80", "蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],
    ["eeef", "ⅰ", 9, "￢￤＇＂"],
    ["f040", "", 62],
    ["f080", "", 124],
    ["f140", "", 62],
    ["f180", "", 124],
    ["f240", "", 62],
    ["f280", "", 124],
    ["f340", "", 62],
    ["f380", "", 124],
    ["f440", "", 62],
    ["f480", "", 124],
    ["f540", "", 62],
    ["f580", "", 124],
    ["f640", "", 62],
    ["f680", "", 124],
    ["f740", "", 62],
    ["f780", "", 124],
    ["f840", "", 62],
    ["f880", "", 124],
    ["f940", ""],
    ["fa40", "ⅰ", 9, "Ⅰ", 9, "￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"],
    ["fa80", "兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"],
    ["fb40", "涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"],
    ["fb80", "祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"],
    ["fc40", "髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"]
  ];
});

// node_modules/iconv-lite/encodings/tables/eucjp.json
var require_eucjp = __commonJS((exports, module) => {
  module.exports = [
    ["0", " ", 127],
    ["8ea1", "｡", 62],
    ["a1a1", "　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈", 9, "＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"],
    ["a2a1", "◆□■△▲▽▼※〒→←↑↓〓"],
    ["a2ba", "∈∋⊆⊇⊂⊃∪∩"],
    ["a2ca", "∧∨￢⇒⇔∀∃"],
    ["a2dc", "∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],
    ["a2f2", "Å‰♯♭♪†‡¶"],
    ["a2fe", "◯"],
    ["a3b0", "０", 9],
    ["a3c1", "Ａ", 25],
    ["a3e1", "ａ", 25],
    ["a4a1", "ぁ", 82],
    ["a5a1", "ァ", 85],
    ["a6a1", "Α", 16, "Σ", 6],
    ["a6c1", "α", 16, "σ", 6],
    ["a7a1", "А", 5, "ЁЖ", 25],
    ["a7d1", "а", 5, "ёж", 25],
    ["a8a1", "─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],
    ["ada1", "①", 19, "Ⅰ", 9],
    ["adc0", "㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],
    ["addf", "㍻〝〟№㏍℡㊤", 4, "㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],
    ["b0a1", "亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],
    ["b1a1", "院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"],
    ["b2a1", "押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],
    ["b3a1", "魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"],
    ["b4a1", "粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],
    ["b5a1", "機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"],
    ["b6a1", "供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],
    ["b7a1", "掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"],
    ["b8a1", "検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],
    ["b9a1", "后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"],
    ["baa1", "此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],
    ["bba1", "察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"],
    ["bca1", "次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],
    ["bda1", "宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"],
    ["bea1", "勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],
    ["bfa1", "拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"],
    ["c0a1", "澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],
    ["c1a1", "繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"],
    ["c2a1", "臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],
    ["c3a1", "叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"],
    ["c4a1", "帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],
    ["c5a1", "邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"],
    ["c6a1", "董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],
    ["c7a1", "如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"],
    ["c8a1", "函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],
    ["c9a1", "鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"],
    ["caa1", "福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],
    ["cba1", "法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"],
    ["cca1", "漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],
    ["cda1", "諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"],
    ["cea1", "痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],
    ["cfa1", "蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],
    ["d0a1", "弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],
    ["d1a1", "僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"],
    ["d2a1", "辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],
    ["d3a1", "咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"],
    ["d4a1", "圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],
    ["d5a1", "奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"],
    ["d6a1", "屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],
    ["d7a1", "廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"],
    ["d8a1", "悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],
    ["d9a1", "戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"],
    ["daa1", "據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],
    ["dba1", "曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"],
    ["dca1", "棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],
    ["dda1", "檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"],
    ["dea1", "沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],
    ["dfa1", "漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"],
    ["e0a1", "燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],
    ["e1a1", "瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"],
    ["e2a1", "癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],
    ["e3a1", "磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"],
    ["e4a1", "筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],
    ["e5a1", "紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"],
    ["e6a1", "罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],
    ["e7a1", "隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"],
    ["e8a1", "茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],
    ["e9a1", "蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"],
    ["eaa1", "蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],
    ["eba1", "襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"],
    ["eca1", "譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],
    ["eda1", "蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"],
    ["eea1", "遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],
    ["efa1", "錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"],
    ["f0a1", "陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],
    ["f1a1", "顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"],
    ["f2a1", "髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],
    ["f3a1", "鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"],
    ["f4a1", "堯槇遙瑤凜熙"],
    ["f9a1", "纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"],
    ["faa1", "忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],
    ["fba1", "犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"],
    ["fca1", "釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],
    ["fcf1", "ⅰ", 9, "￢￤＇＂"],
    ["8fa2af", "˘ˇ¸˙˝¯˛˚～΄΅"],
    ["8fa2c2", "¡¦¿"],
    ["8fa2eb", "ºª©®™¤№"],
    ["8fa6e1", "ΆΈΉΊΪ"],
    ["8fa6e7", "Ό"],
    ["8fa6e9", "ΎΫ"],
    ["8fa6ec", "Ώ"],
    ["8fa6f1", "άέήίϊΐόςύϋΰώ"],
    ["8fa7c2", "Ђ", 10, "ЎЏ"],
    ["8fa7f2", "ђ", 10, "ўџ"],
    ["8fa9a1", "ÆĐ"],
    ["8fa9a4", "Ħ"],
    ["8fa9a6", "Ĳ"],
    ["8fa9a8", "ŁĿ"],
    ["8fa9ab", "ŊØŒ"],
    ["8fa9af", "ŦÞ"],
    ["8fa9c1", "æđðħıĳĸłŀŉŋøœßŧþ"],
    ["8faaa1", "ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"],
    ["8faaba", "ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"],
    ["8faba1", "áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"],
    ["8fabbd", "ġĥíìïîǐ"],
    ["8fabc5", "īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"],
    ["8fb0a1", "丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"],
    ["8fb1a1", "侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"],
    ["8fb2a1", "傒傓傔傖傛傜傞", 4, "傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"],
    ["8fb3a1", "凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"],
    ["8fb4a1", "匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"],
    ["8fb5a1", "咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"],
    ["8fb6a1", "嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍", 5, "嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤", 4, "囱囫园"],
    ["8fb7a1", "囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭", 4, "坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"],
    ["8fb8a1", "堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"],
    ["8fb9a1", "奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"],
    ["8fbaa1", "嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖", 4, "寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"],
    ["8fbba1", "屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"],
    ["8fbca1", "巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪", 4, "幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"],
    ["8fbda1", "彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐", 4, "忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"],
    ["8fbea1", "悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐", 4, "愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"],
    ["8fbfa1", "懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"],
    ["8fc0a1", "捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"],
    ["8fc1a1", "擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"],
    ["8fc2a1", "昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"],
    ["8fc3a1", "杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮", 4, "桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"],
    ["8fc4a1", "棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"],
    ["8fc5a1", "樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"],
    ["8fc6a1", "歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"],
    ["8fc7a1", "泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"],
    ["8fc8a1", "湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"],
    ["8fc9a1", "濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔", 4, "炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃", 4, "焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"],
    ["8fcaa1", "煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"],
    ["8fcba1", "狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"],
    ["8fcca1", "珿琀琁琄琇琊琑琚琛琤琦琨", 9, "琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"],
    ["8fcda1", "甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹", 5, "疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"],
    ["8fcea1", "瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢", 6, "皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"],
    ["8fcfa1", "睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"],
    ["8fd0a1", "碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"],
    ["8fd1a1", "秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"],
    ["8fd2a1", "笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙", 5],
    ["8fd3a1", "籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"],
    ["8fd4a1", "綞綦綧綪綳綶綷綹緂", 4, "緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"],
    ["8fd5a1", "罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"],
    ["8fd6a1", "胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"],
    ["8fd7a1", "艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"],
    ["8fd8a1", "荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"],
    ["8fd9a1", "蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏", 4, "蕖蕙蕜", 6, "蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"],
    ["8fdaa1", "藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠", 4, "虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"],
    ["8fdba1", "蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃", 6, "螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"],
    ["8fdca1", "蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊", 4, "裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"],
    ["8fdda1", "襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔", 4, "觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"],
    ["8fdea1", "誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂", 4, "譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"],
    ["8fdfa1", "貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"],
    ["8fe0a1", "踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"],
    ["8fe1a1", "轃轇轏轑", 4, "轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"],
    ["8fe2a1", "郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"],
    ["8fe3a1", "釂釃釅釓釔釗釙釚釞釤釥釩釪釬", 5, "釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵", 4, "鉻鉼鉽鉿銈銉銊銍銎銒銗"],
    ["8fe4a1", "銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿", 4, "鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"],
    ["8fe5a1", "鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉", 4, "鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"],
    ["8fe6a1", "镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"],
    ["8fe7a1", "霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"],
    ["8fe8a1", "頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱", 4, "餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"],
    ["8fe9a1", "馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿", 4],
    ["8feaa1", "鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪", 4, "魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"],
    ["8feba1", "鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦", 4, "鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"],
    ["8feca1", "鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"],
    ["8feda1", "黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃", 4, "齓齕齖齗齘齚齝齞齨齩齭", 4, "齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"]
  ];
});

// node_modules/iconv-lite/encodings/tables/cp936.json
var require_cp936 = __commonJS((exports, module) => {
  module.exports = [
    ["0", " ", 127, "€"],
    ["8140", "丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪", 5, "乲乴", 9, "乿", 6, "亇亊"],
    ["8180", "亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂", 6, "伋伌伒", 4, "伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾", 4, "佄佅佇", 5, "佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"],
    ["8240", "侤侫侭侰", 4, "侶", 8, "俀俁係俆俇俈俉俋俌俍俒", 4, "俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿", 11],
    ["8280", "個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯", 10, "倻倽倿偀偁偂偄偅偆偉偊偋偍偐", 4, "偖偗偘偙偛偝", 7, "偦", 5, "偭", 8, "偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎", 20, "傤傦傪傫傭", 4, "傳", 6, "傼"],
    ["8340", "傽", 17, "僐", 5, "僗僘僙僛", 10, "僨僩僪僫僯僰僱僲僴僶", 4, "僼", 9, "儈"],
    ["8380", "儉儊儌", 5, "儓", 13, "儢", 28, "兂兇兊兌兎兏児兒兓兗兘兙兛兝", 4, "兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦", 4, "冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒", 5],
    ["8440", "凘凙凚凜凞凟凢凣凥", 5, "凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄", 5, "剋剎剏剒剓剕剗剘"],
    ["8480", "剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳", 9, "剾劀劃", 4, "劉", 6, "劑劒劔", 6, "劜劤劥劦劧劮劯劰労", 9, "勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務", 5, "勠勡勢勣勥", 10, "勱", 7, "勻勼勽匁匂匃匄匇匉匊匋匌匎"],
    ["8540", "匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯", 9, "匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"],
    ["8580", "厐", 4, "厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯", 6, "厷厸厹厺厼厽厾叀參", 4, "収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝", 4, "呣呥呧呩", 7, "呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"],
    ["8640", "咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠", 4, "哫哬哯哰哱哴", 5, "哻哾唀唂唃唄唅唈唊", 4, "唒唓唕", 5, "唜唝唞唟唡唥唦"],
    ["8680", "唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋", 4, "啑啒啓啔啗", 4, "啝啞啟啠啢啣啨啩啫啯", 5, "啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠", 6, "喨", 8, "喲喴営喸喺喼喿", 4, "嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗", 4, "嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸", 4, "嗿嘂嘃嘄嘅"],
    ["8740", "嘆嘇嘊嘋嘍嘐", 7, "嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀", 11, "噏", 4, "噕噖噚噛噝", 4],
    ["8780", "噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽", 7, "嚇", 6, "嚐嚑嚒嚔", 14, "嚤", 10, "嚰", 6, "嚸嚹嚺嚻嚽", 12, "囋", 8, "囕囖囘囙囜団囥", 5, "囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國", 6],
    ["8840", "園", 9, "圝圞圠圡圢圤圥圦圧圫圱圲圴", 4, "圼圽圿坁坃坄坅坆坈坉坋坒", 4, "坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"],
    ["8880", "垁垇垈垉垊垍", 4, "垔", 6, "垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹", 8, "埄", 6, "埌埍埐埑埓埖埗埛埜埞埡埢埣埥", 7, "埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥", 4, "堫", 4, "報堲堳場堶", 7],
    ["8940", "堾", 5, "塅", 6, "塎塏塐塒塓塕塖塗塙", 4, "塟", 5, "塦", 4, "塭", 16, "塿墂墄墆墇墈墊墋墌"],
    ["8980", "墍", 4, "墔", 4, "墛墜墝墠", 7, "墪", 17, "墽墾墿壀壂壃壄壆", 10, "壒壓壔壖", 13, "壥", 5, "壭壯壱売壴壵壷壸壺", 7, "夃夅夆夈", 4, "夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"],
    ["8a40", "夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛", 4, "奡奣奤奦", 12, "奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"],
    ["8a80", "妧妬妭妰妱妳", 5, "妺妼妽妿", 6, "姇姈姉姌姍姎姏姕姖姙姛姞", 4, "姤姦姧姩姪姫姭", 11, "姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪", 6, "娳娵娷", 4, "娽娾娿婁", 4, "婇婈婋", 9, "婖婗婘婙婛", 5],
    ["8b40", "婡婣婤婥婦婨婩婫", 8, "婸婹婻婼婽婾媀", 17, "媓", 6, "媜", 13, "媫媬"],
    ["8b80", "媭", 4, "媴媶媷媹", 4, "媿嫀嫃", 5, "嫊嫋嫍", 4, "嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬", 4, "嫲", 22, "嬊", 11, "嬘", 25, "嬳嬵嬶嬸", 7, "孁", 6],
    ["8c40", "孈", 7, "孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"],
    ["8c80", "寑寔", 8, "寠寢寣實寧審", 4, "寯寱", 6, "寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧", 6, "屰屲", 6, "屻屼屽屾岀岃", 4, "岉岊岋岎岏岒岓岕岝", 4, "岤", 4],
    ["8d40", "岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅", 5, "峌", 5, "峓", 5, "峚", 6, "峢峣峧峩峫峬峮峯峱", 9, "峼", 4],
    ["8d80", "崁崄崅崈", 5, "崏", 4, "崕崗崘崙崚崜崝崟", 4, "崥崨崪崫崬崯", 4, "崵", 7, "崿", 7, "嵈嵉嵍", 10, "嵙嵚嵜嵞", 10, "嵪嵭嵮嵰嵱嵲嵳嵵", 12, "嶃", 21, "嶚嶛嶜嶞嶟嶠"],
    ["8e40", "嶡", 21, "嶸", 12, "巆", 6, "巎", 12, "巜巟巠巣巤巪巬巭"],
    ["8e80", "巰巵巶巸", 4, "巿帀帄帇帉帊帋帍帎帒帓帗帞", 7, "帨", 4, "帯帰帲", 4, "帹帺帾帿幀幁幃幆", 5, "幍", 6, "幖", 4, "幜幝幟幠幣", 14, "幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨", 4, "庮", 4, "庴庺庻庼庽庿", 6],
    ["8f40", "廆廇廈廋", 5, "廔廕廗廘廙廚廜", 11, "廩廫", 8, "廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"],
    ["8f80", "弨弫弬弮弰弲", 6, "弻弽弾弿彁", 14, "彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢", 5, "復徫徬徯", 5, "徶徸徹徺徻徾", 4, "忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"],
    ["9040", "怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰", 4, "怶", 4, "怽怾恀恄", 6, "恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"],
    ["9080", "悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽", 7, "惇惈惉惌", 4, "惒惓惔惖惗惙惛惞惡", 4, "惪惱惲惵惷惸惻", 4, "愂愃愄愅愇愊愋愌愐", 4, "愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬", 18, "慀", 6],
    ["9140", "慇慉態慍慏慐慒慓慔慖", 6, "慞慟慠慡慣慤慥慦慩", 6, "慱慲慳慴慶慸", 18, "憌憍憏", 4, "憕"],
    ["9180", "憖", 6, "憞", 8, "憪憫憭", 9, "憸", 5, "憿懀懁懃", 4, "應懌", 4, "懓懕", 16, "懧", 13, "懶", 8, "戀", 5, "戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸", 4, "扂扄扅扆扊"],
    ["9240", "扏扐払扖扗扙扚扜", 6, "扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋", 5, "抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"],
    ["9280", "拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳", 5, "挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖", 7, "捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙", 6, "採掤掦掫掯掱掲掵掶掹掻掽掿揀"],
    ["9340", "揁揂揃揅揇揈揊揋揌揑揓揔揕揗", 6, "揟揢揤", 4, "揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆", 4, "損搎搑搒搕", 5, "搝搟搢搣搤"],
    ["9380", "搥搧搨搩搫搮", 5, "搵", 4, "搻搼搾摀摂摃摉摋", 6, "摓摕摖摗摙", 4, "摟", 7, "摨摪摫摬摮", 9, "摻", 6, "撃撆撈", 8, "撓撔撗撘撚撛撜撝撟", 4, "撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆", 6, "擏擑擓擔擕擖擙據"],
    ["9440", "擛擜擝擟擠擡擣擥擧", 24, "攁", 7, "攊", 7, "攓", 4, "攙", 8],
    ["9480", "攢攣攤攦", 4, "攬攭攰攱攲攳攷攺攼攽敀", 4, "敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數", 14, "斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱", 7, "斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘", 7, "旡旣旤旪旫"],
    ["9540", "旲旳旴旵旸旹旻", 4, "昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷", 4, "昽昿晀時晄", 6, "晍晎晐晑晘"],
    ["9580", "晙晛晜晝晞晠晢晣晥晧晩", 4, "晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘", 4, "暞", 8, "暩", 4, "暯", 4, "暵暶暷暸暺暻暼暽暿", 25, "曚曞", 7, "曧曨曪", 5, "曱曵曶書曺曻曽朁朂會"],
    ["9640", "朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠", 5, "朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗", 4, "杝杢杣杤杦杧杫杬杮東杴杶"],
    ["9680", "杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹", 7, "柂柅", 9, "柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵", 7, "柾栁栂栃栄栆栍栐栒栔栕栘", 4, "栞栟栠栢", 6, "栫", 6, "栴栵栶栺栻栿桇桋桍桏桒桖", 5],
    ["9740", "桜桝桞桟桪桬", 7, "桵桸", 8, "梂梄梇", 7, "梐梑梒梔梕梖梘", 9, "梣梤梥梩梪梫梬梮梱梲梴梶梷梸"],
    ["9780", "梹", 6, "棁棃", 5, "棊棌棎棏棐棑棓棔棖棗棙棛", 4, "棡棢棤", 9, "棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆", 4, "椌椏椑椓", 11, "椡椢椣椥", 7, "椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃", 16, "楕楖楘楙楛楜楟"],
    ["9840", "楡楢楤楥楧楨楩楪楬業楯楰楲", 4, "楺楻楽楾楿榁榃榅榊榋榌榎", 5, "榖榗榙榚榝", 9, "榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"],
    ["9880", "榾榿槀槂", 7, "構槍槏槑槒槓槕", 5, "槜槝槞槡", 11, "槮槯槰槱槳", 9, "槾樀", 9, "樋", 11, "標", 5, "樠樢", 5, "権樫樬樭樮樰樲樳樴樶", 6, "樿", 4, "橅橆橈", 7, "橑", 6, "橚"],
    ["9940", "橜", 4, "橢橣橤橦", 10, "橲", 6, "橺橻橽橾橿檁檂檃檅", 8, "檏檒", 4, "檘", 7, "檡", 5],
    ["9980", "檧檨檪檭", 114, "欥欦欨", 6],
    ["9a40", "欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍", 11, "歚", 7, "歨歩歫", 13, "歺歽歾歿殀殅殈"],
    ["9a80", "殌殎殏殐殑殔殕殗殘殙殜", 4, "殢", 7, "殫", 7, "殶殸", 6, "毀毃毄毆", 4, "毌毎毐毑毘毚毜", 4, "毢", 7, "毬毭毮毰毱毲毴毶毷毸毺毻毼毾", 6, "氈", 4, "氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋", 4, "汑汒汓汖汘"],
    ["9b40", "汙汚汢汣汥汦汧汫", 4, "汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"],
    ["9b80", "泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟", 5, "洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽", 4, "涃涄涆涇涊涋涍涏涐涒涖", 4, "涜涢涥涬涭涰涱涳涴涶涷涹", 5, "淁淂淃淈淉淊"],
    ["9c40", "淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽", 7, "渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"],
    ["9c80", "渶渷渹渻", 7, "湅", 7, "湏湐湑湒湕湗湙湚湜湝湞湠", 10, "湬湭湯", 14, "満溁溂溄溇溈溊", 4, "溑", 6, "溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪", 5],
    ["9d40", "滰滱滲滳滵滶滷滸滺", 7, "漃漄漅漇漈漊", 4, "漐漑漒漖", 9, "漡漢漣漥漦漧漨漬漮漰漲漴漵漷", 6, "漿潀潁潂"],
    ["9d80", "潃潄潅潈潉潊潌潎", 9, "潙潚潛潝潟潠潡潣潤潥潧", 5, "潯潰潱潳潵潶潷潹潻潽", 6, "澅澆澇澊澋澏", 12, "澝澞澟澠澢", 4, "澨", 10, "澴澵澷澸澺", 5, "濁濃", 5, "濊", 6, "濓", 10, "濟濢濣濤濥"],
    ["9e40", "濦", 7, "濰", 32, "瀒", 7, "瀜", 6, "瀤", 6],
    ["9e80", "瀫", 9, "瀶瀷瀸瀺", 17, "灍灎灐", 13, "灟", 11, "灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞", 12, "炰炲炴炵炶為炾炿烄烅烆烇烉烋", 12, "烚"],
    ["9f40", "烜烝烞烠烡烢烣烥烪烮烰", 6, "烸烺烻烼烾", 10, "焋", 4, "焑焒焔焗焛", 10, "焧", 7, "焲焳焴"],
    ["9f80", "焵焷", 13, "煆煇煈煉煋煍煏", 12, "煝煟", 4, "煥煩", 4, "煯煰煱煴煵煶煷煹煻煼煾", 5, "熅", 4, "熋熌熍熎熐熑熒熓熕熖熗熚", 4, "熡", 6, "熩熪熫熭", 5, "熴熶熷熸熺", 8, "燄", 9, "燏", 4],
    ["a040", "燖", 9, "燡燢燣燤燦燨", 5, "燯", 9, "燺", 11, "爇", 19],
    ["a080", "爛爜爞", 9, "爩爫爭爮爯爲爳爴爺爼爾牀", 6, "牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅", 4, "犌犎犐犑犓", 11, "犠", 11, "犮犱犲犳犵犺", 6, "狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"],
    ["a1a1", "　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈", 7, "〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"],
    ["a2a1", "ⅰ", 9],
    ["a2b1", "⒈", 19, "⑴", 19, "①", 9],
    ["a2e5", "㈠", 9],
    ["a2f1", "Ⅰ", 11],
    ["a3a1", "！＂＃￥％", 88, "￣"],
    ["a4a1", "ぁ", 82],
    ["a5a1", "ァ", 85],
    ["a6a1", "Α", 16, "Σ", 6],
    ["a6c1", "α", 16, "σ", 6],
    ["a6e0", "︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"],
    ["a6ee", "︻︼︷︸︱"],
    ["a6f4", "︳︴"],
    ["a7a1", "А", 5, "ЁЖ", 25],
    ["a7d1", "а", 5, "ёж", 25],
    ["a840", "ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═", 35, "▁", 6],
    ["a880", "█", 7, "▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"],
    ["a8a1", "āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"],
    ["a8bd", "ńň"],
    ["a8c0", "ɡ"],
    ["a8c5", "ㄅ", 36],
    ["a940", "〡", 8, "㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"],
    ["a959", "℡㈱"],
    ["a95c", "‐"],
    ["a960", "ー゛゜ヽヾ〆ゝゞ﹉", 9, "﹔﹕﹖﹗﹙", 8],
    ["a980", "﹢", 4, "﹨﹩﹪﹫"],
    ["a996", "〇"],
    ["a9a4", "─", 75],
    ["aa40", "狜狝狟狢", 5, "狪狫狵狶狹狽狾狿猀猂猄", 5, "猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀", 8],
    ["aa80", "獉獊獋獌獎獏獑獓獔獕獖獘", 7, "獡", 10, "獮獰獱"],
    ["ab40", "獲", 11, "獿", 4, "玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣", 5, "玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃", 4],
    ["ab80", "珋珌珎珒", 6, "珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳", 4],
    ["ac40", "珸", 10, "琄琇琈琋琌琍琎琑", 8, "琜", 5, "琣琤琧琩琫琭琯琱琲琷", 4, "琽琾琿瑀瑂", 11],
    ["ac80", "瑎", 6, "瑖瑘瑝瑠", 12, "瑮瑯瑱", 4, "瑸瑹瑺"],
    ["ad40", "瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑", 10, "璝璟", 7, "璪", 15, "璻", 12],
    ["ad80", "瓈", 9, "瓓", 8, "瓝瓟瓡瓥瓧", 6, "瓰瓱瓲"],
    ["ae40", "瓳瓵瓸", 6, "甀甁甂甃甅", 7, "甎甐甒甔甕甖甗甛甝甞甠", 4, "甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"],
    ["ae80", "畝", 7, "畧畨畩畫", 6, "畳畵當畷畺", 4, "疀疁疂疄疅疇"],
    ["af40", "疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦", 4, "疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"],
    ["af80", "瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"],
    ["b040", "癅", 6, "癎", 5, "癕癗", 4, "癝癟癠癡癢癤", 6, "癬癭癮癰", 7, "癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"],
    ["b080", "皜", 7, "皥", 8, "皯皰皳皵", 9, "盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"],
    ["b140", "盄盇盉盋盌盓盕盙盚盜盝盞盠", 4, "盦", 7, "盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎", 10, "眛眜眝眞眡眣眤眥眧眪眫"],
    ["b180", "眬眮眰", 4, "眹眻眽眾眿睂睄睅睆睈", 7, "睒", 7, "睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"],
    ["b240", "睝睞睟睠睤睧睩睪睭", 11, "睺睻睼瞁瞂瞃瞆", 5, "瞏瞐瞓", 11, "瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶", 4],
    ["b280", "瞼瞾矀", 12, "矎", 8, "矘矙矚矝", 4, "矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"],
    ["b340", "矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃", 5, "砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"],
    ["b380", "硛硜硞", 11, "硯", 7, "硸硹硺硻硽", 6, "场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"],
    ["b440", "碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨", 7, "碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚", 9],
    ["b480", "磤磥磦磧磩磪磫磭", 4, "磳磵磶磸磹磻", 5, "礂礃礄礆", 6, "础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"],
    ["b540", "礍", 5, "礔", 9, "礟", 4, "礥", 14, "礵", 4, "礽礿祂祃祄祅祇祊", 8, "祔祕祘祙祡祣"],
    ["b580", "祤祦祩祪祫祬祮祰", 6, "祹祻", 4, "禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"],
    ["b640", "禓", 6, "禛", 11, "禨", 10, "禴", 4, "禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙", 5, "秠秡秢秥秨秪"],
    ["b680", "秬秮秱", 6, "秹秺秼秾秿稁稄稅稇稈稉稊稌稏", 4, "稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"],
    ["b740", "稝稟稡稢稤", 14, "稴稵稶稸稺稾穀", 5, "穇", 9, "穒", 4, "穘", 16],
    ["b780", "穩", 6, "穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"],
    ["b840", "窣窤窧窩窪窫窮", 4, "窴", 10, "竀", 10, "竌", 9, "竗竘竚竛竜竝竡竢竤竧", 5, "竮竰竱竲竳"],
    ["b880", "竴", 4, "竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"],
    ["b940", "笯笰笲笴笵笶笷笹笻笽笿", 5, "筆筈筊筍筎筓筕筗筙筜筞筟筡筣", 10, "筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆", 6, "箎箏"],
    ["b980", "箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹", 7, "篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"],
    ["ba40", "篅篈築篊篋篍篎篏篐篒篔", 4, "篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲", 4, "篸篹篺篻篽篿", 7, "簈簉簊簍簎簐", 5, "簗簘簙"],
    ["ba80", "簚", 4, "簠", 5, "簨簩簫", 12, "簹", 5, "籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"],
    ["bb40", "籃", 9, "籎", 36, "籵", 5, "籾", 9],
    ["bb80", "粈粊", 6, "粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴", 4, "粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"],
    ["bc40", "粿糀糂糃糄糆糉糋糎", 6, "糘糚糛糝糞糡", 6, "糩", 5, "糰", 7, "糹糺糼", 13, "紋", 5],
    ["bc80", "紑", 14, "紡紣紤紥紦紨紩紪紬紭紮細", 6, "肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"],
    ["bd40", "紷", 54, "絯", 7],
    ["bd80", "絸", 32, "健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"],
    ["be40", "継", 12, "綧", 6, "綯", 42],
    ["be80", "線", 32, "尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"],
    ["bf40", "緻", 62],
    ["bf80", "縺縼", 4, "繂", 4, "繈", 21, "俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"],
    ["c040", "繞", 35, "纃", 23, "纜纝纞"],
    ["c080", "纮纴纻纼绖绤绬绹缊缐缞缷缹缻", 6, "罃罆", 9, "罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"],
    ["c140", "罖罙罛罜罝罞罠罣", 4, "罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂", 7, "羋羍羏", 4, "羕", 4, "羛羜羠羢羣羥羦羨", 6, "羱"],
    ["c180", "羳", 4, "羺羻羾翀翂翃翄翆翇翈翉翋翍翏", 4, "翖翗翙", 5, "翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"],
    ["c240", "翤翧翨翪翫翬翭翯翲翴", 6, "翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫", 5, "耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"],
    ["c280", "聙聛", 13, "聫", 5, "聲", 11, "隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"],
    ["c340", "聾肁肂肅肈肊肍", 5, "肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇", 4, "胏", 6, "胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"],
    ["c380", "脌脕脗脙脛脜脝脟", 12, "脭脮脰脳脴脵脷脹", 4, "脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"],
    ["c440", "腀", 5, "腇腉腍腎腏腒腖腗腘腛", 4, "腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃", 4, "膉膋膌膍膎膐膒", 5, "膙膚膞", 4, "膤膥"],
    ["c480", "膧膩膫", 7, "膴", 5, "膼膽膾膿臄臅臇臈臉臋臍", 6, "摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"],
    ["c540", "臔", 14, "臤臥臦臨臩臫臮", 4, "臵", 5, "臽臿舃與", 4, "舎舏舑舓舕", 5, "舝舠舤舥舦舧舩舮舲舺舼舽舿"],
    ["c580", "艀艁艂艃艅艆艈艊艌艍艎艐", 7, "艙艛艜艝艞艠", 7, "艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"],
    ["c640", "艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"],
    ["c680", "苺苼", 4, "茊茋茍茐茒茓茖茘茙茝", 9, "茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"],
    ["c740", "茾茿荁荂荄荅荈荊", 4, "荓荕", 4, "荝荢荰", 6, "荹荺荾", 6, "莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡", 6, "莬莭莮"],
    ["c780", "莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"],
    ["c840", "菮華菳", 4, "菺菻菼菾菿萀萂萅萇萈萉萊萐萒", 5, "萙萚萛萞", 5, "萩", 7, "萲", 5, "萹萺萻萾", 7, "葇葈葉"],
    ["c880", "葊", 6, "葒", 4, "葘葝葞葟葠葢葤", 4, "葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"],
    ["c940", "葽", 4, "蒃蒄蒅蒆蒊蒍蒏", 7, "蒘蒚蒛蒝蒞蒟蒠蒢", 12, "蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"],
    ["c980", "蓘", 4, "蓞蓡蓢蓤蓧", 4, "蓭蓮蓯蓱", 10, "蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"],
    ["ca40", "蔃", 8, "蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢", 8, "蔭", 9, "蔾", 4, "蕄蕅蕆蕇蕋", 10],
    ["ca80", "蕗蕘蕚蕛蕜蕝蕟", 4, "蕥蕦蕧蕩", 8, "蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"],
    ["cb40", "薂薃薆薈", 6, "薐", 10, "薝", 6, "薥薦薧薩薫薬薭薱", 5, "薸薺", 6, "藂", 6, "藊", 4, "藑藒"],
    ["cb80", "藔藖", 5, "藝", 6, "藥藦藧藨藪", 14, "恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"],
    ["cc40", "藹藺藼藽藾蘀", 4, "蘆", 10, "蘒蘓蘔蘕蘗", 15, "蘨蘪", 13, "蘹蘺蘻蘽蘾蘿虀"],
    ["cc80", "虁", 11, "虒虓處", 4, "虛虜虝號虠虡虣", 7, "獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"],
    ["cd40", "虭虯虰虲", 6, "蚃", 6, "蚎", 4, "蚔蚖", 5, "蚞", 4, "蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻", 4, "蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"],
    ["cd80", "蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"],
    ["ce40", "蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀", 6, "蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚", 5, "蝡蝢蝦", 7, "蝯蝱蝲蝳蝵"],
    ["ce80", "蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎", 4, "螔螕螖螘", 6, "螠", 4, "巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"],
    ["cf40", "螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁", 4, "蟇蟈蟉蟌", 4, "蟔", 6, "蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯", 9],
    ["cf80", "蟺蟻蟼蟽蟿蠀蠁蠂蠄", 5, "蠋", 7, "蠔蠗蠘蠙蠚蠜", 4, "蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"],
    ["d040", "蠤", 13, "蠳", 5, "蠺蠻蠽蠾蠿衁衂衃衆", 5, "衎", 5, "衕衖衘衚", 6, "衦衧衪衭衯衱衳衴衵衶衸衹衺"],
    ["d080", "衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗", 4, "袝", 4, "袣袥", 5, "小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"],
    ["d140", "袬袮袯袰袲", 4, "袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚", 4, "裠裡裦裧裩", 6, "裲裵裶裷裺裻製裿褀褁褃", 5],
    ["d180", "褉褋", 4, "褑褔", 4, "褜", 4, "褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"],
    ["d240", "褸", 8, "襂襃襅", 24, "襠", 5, "襧", 19, "襼"],
    ["d280", "襽襾覀覂覄覅覇", 26, "摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"],
    ["d340", "覢", 30, "觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴", 6],
    ["d380", "觻", 4, "訁", 5, "計", 21, "印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"],
    ["d440", "訞", 31, "訿", 8, "詉", 21],
    ["d480", "詟", 25, "詺", 6, "浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"],
    ["d540", "誁", 7, "誋", 7, "誔", 46],
    ["d580", "諃", 32, "铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"],
    ["d640", "諤", 34, "謈", 27],
    ["d680", "謤謥謧", 30, "帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"],
    ["d740", "譆", 31, "譧", 4, "譭", 25],
    ["d780", "讇", 24, "讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"],
    ["d840", "谸", 8, "豂豃豄豅豈豊豋豍", 7, "豖豗豘豙豛", 5, "豣", 6, "豬", 6, "豴豵豶豷豻", 6, "貃貄貆貇"],
    ["d880", "貈貋貍", 6, "貕貖貗貙", 20, "亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"],
    ["d940", "貮", 62],
    ["d980", "賭", 32, "佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"],
    ["da40", "贎", 14, "贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸", 8, "趂趃趆趇趈趉趌", 4, "趒趓趕", 9, "趠趡"],
    ["da80", "趢趤", 12, "趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"],
    ["db40", "跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾", 6, "踆踇踈踋踍踎踐踑踒踓踕", 7, "踠踡踤", 4, "踫踭踰踲踳踴踶踷踸踻踼踾"],
    ["db80", "踿蹃蹅蹆蹌", 4, "蹓", 5, "蹚", 11, "蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"],
    ["dc40", "蹳蹵蹷", 4, "蹽蹾躀躂躃躄躆躈", 6, "躑躒躓躕", 6, "躝躟", 11, "躭躮躰躱躳", 6, "躻", 7],
    ["dc80", "軃", 10, "軏", 21, "堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"],
    ["dd40", "軥", 62],
    ["dd80", "輤", 32, "荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"],
    ["de40", "轅", 32, "轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"],
    ["de80", "迉", 4, "迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"],
    ["df40", "這逜連逤逥逧", 5, "逰", 4, "逷逹逺逽逿遀遃遅遆遈", 4, "過達違遖遙遚遜", 5, "遤遦遧適遪遫遬遯", 4, "遶", 6, "遾邁"],
    ["df80", "還邅邆邇邉邊邌", 4, "邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"],
    ["e040", "郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅", 19, "鄚鄛鄜"],
    ["e080", "鄝鄟鄠鄡鄤", 10, "鄰鄲", 6, "鄺", 8, "酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"],
    ["e140", "酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀", 4, "醆醈醊醎醏醓", 6, "醜", 5, "醤", 5, "醫醬醰醱醲醳醶醷醸醹醻"],
    ["e180", "醼", 10, "釈釋釐釒", 9, "針", 8, "帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"],
    ["e240", "釦", 62],
    ["e280", "鈥", 32, "狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧", 5, "饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"],
    ["e340", "鉆", 45, "鉵", 16],
    ["e380", "銆", 7, "銏", 24, "恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"],
    ["e440", "銨", 5, "銯", 24, "鋉", 31],
    ["e480", "鋩", 32, "洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"],
    ["e540", "錊", 51, "錿", 10],
    ["e580", "鍊", 31, "鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"],
    ["e640", "鍬", 34, "鎐", 27],
    ["e680", "鎬", 29, "鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"],
    ["e740", "鏎", 7, "鏗", 54],
    ["e780", "鐎", 32, "纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡", 6, "缪缫缬缭缯", 4, "缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"],
    ["e840", "鐯", 14, "鐿", 43, "鑬鑭鑮鑯"],
    ["e880", "鑰", 20, "钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"],
    ["e940", "锧锳锽镃镈镋镕镚镠镮镴镵長", 7, "門", 42],
    ["e980", "閫", 32, "椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"],
    ["ea40", "闌", 27, "闬闿阇阓阘阛阞阠阣", 6, "阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"],
    ["ea80", "陘陙陚陜陝陞陠陣陥陦陫陭", 4, "陳陸", 12, "隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"],
    ["eb40", "隌階隑隒隓隕隖隚際隝", 9, "隨", 7, "隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖", 9, "雡", 6, "雫"],
    ["eb80", "雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗", 4, "霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"],
    ["ec40", "霡", 8, "霫霬霮霯霱霳", 4, "霺霻霼霽霿", 18, "靔靕靗靘靚靜靝靟靣靤靦靧靨靪", 7],
    ["ec80", "靲靵靷", 4, "靽", 7, "鞆", 4, "鞌鞎鞏鞐鞓鞕鞖鞗鞙", 4, "臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"],
    ["ed40", "鞞鞟鞡鞢鞤", 6, "鞬鞮鞰鞱鞳鞵", 46],
    ["ed80", "韤韥韨韮", 4, "韴韷", 23, "怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"],
    ["ee40", "頏", 62],
    ["ee80", "顎", 32, "睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶", 4, "钼钽钿铄铈", 6, "铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"],
    ["ef40", "顯", 5, "颋颎颒颕颙颣風", 37, "飏飐飔飖飗飛飜飝飠", 4],
    ["ef80", "飥飦飩", 30, "铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒", 4, "锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤", 8, "镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"],
    ["f040", "餈", 4, "餎餏餑", 28, "餯", 26],
    ["f080", "饊", 9, "饖", 12, "饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨", 4, "鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦", 6, "鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"],
    ["f140", "馌馎馚", 10, "馦馧馩", 47],
    ["f180", "駙", 32, "瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"],
    ["f240", "駺", 62],
    ["f280", "騹", 32, "颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"],
    ["f340", "驚", 17, "驲骃骉骍骎骔骕骙骦骩", 6, "骲骳骴骵骹骻骽骾骿髃髄髆", 4, "髍髎髏髐髒體髕髖髗髙髚髛髜"],
    ["f380", "髝髞髠髢髣髤髥髧髨髩髪髬髮髰", 8, "髺髼", 6, "鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"],
    ["f440", "鬇鬉", 5, "鬐鬑鬒鬔", 10, "鬠鬡鬢鬤", 10, "鬰鬱鬳", 7, "鬽鬾鬿魀魆魊魋魌魎魐魒魓魕", 5],
    ["f480", "魛", 32, "簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"],
    ["f540", "魼", 62],
    ["f580", "鮻", 32, "酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"],
    ["f640", "鯜", 62],
    ["f680", "鰛", 32, "觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅", 5, "龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞", 5, "鲥", 4, "鲫鲭鲮鲰", 7, "鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"],
    ["f740", "鰼", 62],
    ["f780", "鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾", 4, "鳈鳉鳑鳒鳚鳛鳠鳡鳌", 4, "鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"],
    ["f840", "鳣", 62],
    ["f880", "鴢", 32],
    ["f940", "鵃", 62],
    ["f980", "鶂", 32],
    ["fa40", "鶣", 62],
    ["fa80", "鷢", 32],
    ["fb40", "鸃", 27, "鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴", 9, "麀"],
    ["fb80", "麁麃麄麅麆麉麊麌", 5, "麔", 8, "麞麠", 5, "麧麨麩麪"],
    ["fc40", "麫", 8, "麵麶麷麹麺麼麿", 4, "黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰", 8, "黺黽黿", 6],
    ["fc80", "鼆", 4, "鼌鼏鼑鼒鼔鼕鼖鼘鼚", 5, "鼡鼣", 8, "鼭鼮鼰鼱"],
    ["fd40", "鼲", 4, "鼸鼺鼼鼿", 4, "齅", 10, "齒", 38],
    ["fd80", "齹", 5, "龁龂龍", 11, "龜龝龞龡", 4, "郎凉秊裏隣"],
    ["fe40", "兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"]
  ];
});

// node_modules/iconv-lite/encodings/tables/gbk-added.json
var require_gbk_added = __commonJS((exports, module) => {
  module.exports = [
    ["a140", "", 62],
    ["a180", "", 32],
    ["a240", "", 62],
    ["a280", "", 32],
    ["a2ab", "", 5],
    ["a2e3", "€"],
    ["a2ef", ""],
    ["a2fd", ""],
    ["a340", "", 62],
    ["a380", "", 31, "　"],
    ["a440", "", 62],
    ["a480", "", 32],
    ["a4f4", "", 10],
    ["a540", "", 62],
    ["a580", "", 32],
    ["a5f7", "", 7],
    ["a640", "", 62],
    ["a680", "", 32],
    ["a6b9", "", 7],
    ["a6d9", "", 6],
    ["a6ec", ""],
    ["a6f3", ""],
    ["a6f6", "", 8],
    ["a740", "", 62],
    ["a780", "", 32],
    ["a7c2", "", 14],
    ["a7f2", "", 12],
    ["a896", "", 10],
    ["a8bc", "ḿ"],
    ["a8bf", "ǹ"],
    ["a8c1", ""],
    ["a8ea", "", 20],
    ["a958", ""],
    ["a95b", ""],
    ["a95d", ""],
    ["a989", "〾⿰", 11],
    ["a997", "", 12],
    ["a9f0", "", 14],
    ["aaa1", "", 93],
    ["aba1", "", 93],
    ["aca1", "", 93],
    ["ada1", "", 93],
    ["aea1", "", 93],
    ["afa1", "", 93],
    ["d7fa", "", 4],
    ["f8a1", "", 93],
    ["f9a1", "", 93],
    ["faa1", "", 93],
    ["fba1", "", 93],
    ["fca1", "", 93],
    ["fda1", "", 93],
    ["fe50", "⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"],
    ["fe80", "䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓", 6, "䶮", 93],
    ["8135f437", ""]
  ];
});

// node_modules/iconv-lite/encodings/tables/gb18030-ranges.json
var require_gb18030_ranges = __commonJS((exports, module) => {
  module.exports = { uChars: [128, 165, 169, 178, 184, 216, 226, 235, 238, 244, 248, 251, 253, 258, 276, 284, 300, 325, 329, 334, 364, 463, 465, 467, 469, 471, 473, 475, 477, 506, 594, 610, 712, 716, 730, 930, 938, 962, 970, 1026, 1104, 1106, 8209, 8215, 8218, 8222, 8231, 8241, 8244, 8246, 8252, 8365, 8452, 8454, 8458, 8471, 8482, 8556, 8570, 8596, 8602, 8713, 8720, 8722, 8726, 8731, 8737, 8740, 8742, 8748, 8751, 8760, 8766, 8777, 8781, 8787, 8802, 8808, 8816, 8854, 8858, 8870, 8896, 8979, 9322, 9372, 9548, 9588, 9616, 9622, 9634, 9652, 9662, 9672, 9676, 9680, 9702, 9735, 9738, 9793, 9795, 11906, 11909, 11913, 11917, 11928, 11944, 11947, 11951, 11956, 11960, 11964, 11979, 12284, 12292, 12312, 12319, 12330, 12351, 12436, 12447, 12535, 12543, 12586, 12842, 12850, 12964, 13200, 13215, 13218, 13253, 13263, 13267, 13270, 13384, 13428, 13727, 13839, 13851, 14617, 14703, 14801, 14816, 14964, 15183, 15471, 15585, 16471, 16736, 17208, 17325, 17330, 17374, 17623, 17997, 18018, 18212, 18218, 18301, 18318, 18760, 18811, 18814, 18820, 18823, 18844, 18848, 18872, 19576, 19620, 19738, 19887, 40870, 59244, 59336, 59367, 59413, 59417, 59423, 59431, 59437, 59443, 59452, 59460, 59478, 59493, 63789, 63866, 63894, 63976, 63986, 64016, 64018, 64021, 64025, 64034, 64037, 64042, 65074, 65093, 65107, 65112, 65127, 65132, 65375, 65510, 65536], gbChars: [0, 36, 38, 45, 50, 81, 89, 95, 96, 100, 103, 104, 105, 109, 126, 133, 148, 172, 175, 179, 208, 306, 307, 308, 309, 310, 311, 312, 313, 341, 428, 443, 544, 545, 558, 741, 742, 749, 750, 805, 819, 820, 7922, 7924, 7925, 7927, 7934, 7943, 7944, 7945, 7950, 8062, 8148, 8149, 8152, 8164, 8174, 8236, 8240, 8262, 8264, 8374, 8380, 8381, 8384, 8388, 8390, 8392, 8393, 8394, 8396, 8401, 8406, 8416, 8419, 8424, 8437, 8439, 8445, 8482, 8485, 8496, 8521, 8603, 8936, 8946, 9046, 9050, 9063, 9066, 9076, 9092, 9100, 9108, 9111, 9113, 9131, 9162, 9164, 9218, 9219, 11329, 11331, 11334, 11336, 11346, 11361, 11363, 11366, 11370, 11372, 11375, 11389, 11682, 11686, 11687, 11692, 11694, 11714, 11716, 11723, 11725, 11730, 11736, 11982, 11989, 12102, 12336, 12348, 12350, 12384, 12393, 12395, 12397, 12510, 12553, 12851, 12962, 12973, 13738, 13823, 13919, 13933, 14080, 14298, 14585, 14698, 15583, 15847, 16318, 16434, 16438, 16481, 16729, 17102, 17122, 17315, 17320, 17402, 17418, 17859, 17909, 17911, 17915, 17916, 17936, 17939, 17961, 18664, 18703, 18814, 18962, 19043, 33469, 33470, 33471, 33484, 33485, 33490, 33497, 33501, 33505, 33513, 33520, 33536, 33550, 37845, 37921, 37948, 38029, 38038, 38064, 38065, 38066, 38069, 38075, 38076, 38078, 39108, 39109, 39113, 39114, 39115, 39116, 39265, 39394, 189000] };
});

// node_modules/iconv-lite/encodings/tables/cp949.json
var require_cp949 = __commonJS((exports, module) => {
  module.exports = [
    ["0", " ", 127],
    ["8141", "갂갃갅갆갋", 4, "갘갞갟갡갢갣갥", 6, "갮갲갳갴"],
    ["8161", "갵갶갷갺갻갽갾갿걁", 9, "걌걎", 5, "걕"],
    ["8181", "걖걗걙걚걛걝", 18, "걲걳걵걶걹걻", 4, "겂겇겈겍겎겏겑겒겓겕", 6, "겞겢", 5, "겫겭겮겱", 6, "겺겾겿곀곂곃곅곆곇곉곊곋곍", 7, "곖곘", 7, "곢곣곥곦곩곫곭곮곲곴곷", 4, "곾곿괁괂괃괅괇", 4, "괎괐괒괓"],
    ["8241", "괔괕괖괗괙괚괛괝괞괟괡", 7, "괪괫괮", 5],
    ["8261", "괶괷괹괺괻괽", 6, "굆굈굊", 5, "굑굒굓굕굖굗"],
    ["8281", "굙", 7, "굢굤", 7, "굮굯굱굲굷굸굹굺굾궀궃", 4, "궊궋궍궎궏궑", 10, "궞", 5, "궥", 17, "궸", 7, "귂귃귅귆귇귉", 6, "귒귔", 7, "귝귞귟귡귢귣귥", 18],
    ["8341", "귺귻귽귾긂", 5, "긊긌긎", 5, "긕", 7],
    ["8361", "긝", 18, "긲긳긵긶긹긻긼"],
    ["8381", "긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗", 4, "깞깢깣깤깦깧깪깫깭깮깯깱", 6, "깺깾", 5, "꺆", 5, "꺍", 46, "꺿껁껂껃껅", 6, "껎껒", 5, "껚껛껝", 8],
    ["8441", "껦껧껩껪껬껮", 5, "껵껶껷껹껺껻껽", 8],
    ["8461", "꼆꼉꼊꼋꼌꼎꼏꼑", 18],
    ["8481", "꼤", 7, "꼮꼯꼱꼳꼵", 6, "꼾꽀꽄꽅꽆꽇꽊", 5, "꽑", 10, "꽞", 5, "꽦", 18, "꽺", 5, "꾁꾂꾃꾅꾆꾇꾉", 6, "꾒꾓꾔꾖", 5, "꾝", 26, "꾺꾻꾽꾾"],
    ["8541", "꾿꿁", 5, "꿊꿌꿏", 4, "꿕", 6, "꿝", 4],
    ["8561", "꿢", 5, "꿪", 5, "꿲꿳꿵꿶꿷꿹", 6, "뀂뀃"],
    ["8581", "뀅", 6, "뀍뀎뀏뀑뀒뀓뀕", 6, "뀞", 9, "뀩", 26, "끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞", 29, "끾끿낁낂낃낅", 6, "낎낐낒", 5, "낛낝낞낣낤"],
    ["8641", "낥낦낧낪낰낲낶낷낹낺낻낽", 6, "냆냊", 5, "냒"],
    ["8661", "냓냕냖냗냙", 6, "냡냢냣냤냦", 10],
    ["8681", "냱", 22, "넊넍넎넏넑넔넕넖넗넚넞", 4, "넦넧넩넪넫넭", 6, "넶넺", 5, "녂녃녅녆녇녉", 6, "녒녓녖녗녙녚녛녝녞녟녡", 22, "녺녻녽녾녿놁놃", 4, "놊놌놎놏놐놑놕놖놗놙놚놛놝"],
    ["8741", "놞", 9, "놩", 15],
    ["8761", "놹", 18, "뇍뇎뇏뇑뇒뇓뇕"],
    ["8781", "뇖", 5, "뇞뇠", 7, "뇪뇫뇭뇮뇯뇱", 7, "뇺뇼뇾", 5, "눆눇눉눊눍", 6, "눖눘눚", 5, "눡", 18, "눵", 6, "눽", 26, "뉙뉚뉛뉝뉞뉟뉡", 6, "뉪", 4],
    ["8841", "뉯", 4, "뉶", 5, "뉽", 6, "늆늇늈늊", 4],
    ["8861", "늏늒늓늕늖늗늛", 4, "늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"],
    ["8881", "늸", 15, "닊닋닍닎닏닑닓", 4, "닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉", 6, "댒댖", 5, "댝", 54, "덗덙덚덝덠덡덢덣"],
    ["8941", "덦덨덪덬덭덯덲덳덵덶덷덹", 6, "뎂뎆", 5, "뎍"],
    ["8961", "뎎뎏뎑뎒뎓뎕", 10, "뎢", 5, "뎩뎪뎫뎭"],
    ["8981", "뎮", 21, "돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩", 18, "돽", 18, "됑", 6, "됙됚됛됝됞됟됡", 6, "됪됬", 7, "됵", 15],
    ["8a41", "둅", 10, "둒둓둕둖둗둙", 6, "둢둤둦"],
    ["8a61", "둧", 4, "둭", 18, "뒁뒂"],
    ["8a81", "뒃", 4, "뒉", 19, "뒞", 5, "뒥뒦뒧뒩뒪뒫뒭", 7, "뒶뒸뒺", 5, "듁듂듃듅듆듇듉", 6, "듑듒듓듔듖", 5, "듞듟듡듢듥듧", 4, "듮듰듲", 5, "듹", 26, "딖딗딙딚딝"],
    ["8b41", "딞", 5, "딦딫", 4, "딲딳딵딶딷딹", 6, "땂땆"],
    ["8b61", "땇땈땉땊땎땏땑땒땓땕", 6, "땞땢", 8],
    ["8b81", "땫", 52, "떢떣떥떦떧떩떬떭떮떯떲떶", 4, "떾떿뗁뗂뗃뗅", 6, "뗎뗒", 5, "뗙", 18, "뗭", 18],
    ["8c41", "똀", 15, "똒똓똕똖똗똙", 4],
    ["8c61", "똞", 6, "똦", 5, "똭", 6, "똵", 5],
    ["8c81", "똻", 12, "뙉", 26, "뙥뙦뙧뙩", 50, "뚞뚟뚡뚢뚣뚥", 5, "뚭뚮뚯뚰뚲", 16],
    ["8d41", "뛃", 16, "뛕", 8],
    ["8d61", "뛞", 17, "뛱뛲뛳뛵뛶뛷뛹뛺"],
    ["8d81", "뛻", 4, "뜂뜃뜄뜆", 33, "뜪뜫뜭뜮뜱", 6, "뜺뜼", 7, "띅띆띇띉띊띋띍", 6, "띖", 9, "띡띢띣띥띦띧띩", 6, "띲띴띶", 5, "띾띿랁랂랃랅", 6, "랎랓랔랕랚랛랝랞"],
    ["8e41", "랟랡", 6, "랪랮", 5, "랶랷랹", 8],
    ["8e61", "럂", 4, "럈럊", 19],
    ["8e81", "럞", 13, "럮럯럱럲럳럵", 6, "럾렂", 4, "렊렋렍렎렏렑", 6, "렚렜렞", 5, "렦렧렩렪렫렭", 6, "렶렺", 5, "롁롂롃롅", 11, "롒롔", 7, "롞롟롡롢롣롥", 6, "롮롰롲", 5, "롹롺롻롽", 7],
    ["8f41", "뢅", 7, "뢎", 17],
    ["8f61", "뢠", 7, "뢩", 6, "뢱뢲뢳뢵뢶뢷뢹", 4],
    ["8f81", "뢾뢿룂룄룆", 5, "룍룎룏룑룒룓룕", 7, "룞룠룢", 5, "룪룫룭룮룯룱", 6, "룺룼룾", 5, "뤅", 18, "뤙", 6, "뤡", 26, "뤾뤿륁륂륃륅", 6, "륍륎륐륒", 5],
    ["9041", "륚륛륝륞륟륡", 6, "륪륬륮", 5, "륶륷륹륺륻륽"],
    ["9061", "륾", 5, "릆릈릋릌릏", 15],
    ["9081", "릟", 12, "릮릯릱릲릳릵", 6, "릾맀맂", 5, "맊맋맍맓", 4, "맚맜맟맠맢맦맧맩맪맫맭", 6, "맶맻", 4, "먂", 5, "먉", 11, "먖", 33, "먺먻먽먾먿멁멃멄멅멆"],
    ["9141", "멇멊멌멏멐멑멒멖멗멙멚멛멝", 6, "멦멪", 5],
    ["9161", "멲멳멵멶멷멹", 9, "몆몈몉몊몋몍", 5],
    ["9181", "몓", 20, "몪몭몮몯몱몳", 4, "몺몼몾", 5, "뫅뫆뫇뫉", 14, "뫚", 33, "뫽뫾뫿묁묂묃묅", 7, "묎묐묒", 5, "묙묚묛묝묞묟묡", 6],
    ["9241", "묨묪묬", 7, "묷묹묺묿", 4, "뭆뭈뭊뭋뭌뭎뭑뭒"],
    ["9261", "뭓뭕뭖뭗뭙", 7, "뭢뭤", 7, "뭭", 4],
    ["9281", "뭲", 21, "뮉뮊뮋뮍뮎뮏뮑", 18, "뮥뮦뮧뮩뮪뮫뮭", 6, "뮵뮶뮸", 7, "믁믂믃믅믆믇믉", 6, "믑믒믔", 35, "믺믻믽믾밁"],
    ["9341", "밃", 4, "밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"],
    ["9361", "밶밷밹", 6, "뱂뱆뱇뱈뱊뱋뱎뱏뱑", 8],
    ["9381", "뱚뱛뱜뱞", 37, "벆벇벉벊벍벏", 4, "벖벘벛", 4, "벢벣벥벦벩", 6, "벲벶", 5, "벾벿볁볂볃볅", 7, "볎볒볓볔볖볗볙볚볛볝", 22, "볷볹볺볻볽"],
    ["9441", "볾", 5, "봆봈봊", 5, "봑봒봓봕", 8],
    ["9461", "봞", 5, "봥", 6, "봭", 12],
    ["9481", "봺", 5, "뵁", 6, "뵊뵋뵍뵎뵏뵑", 6, "뵚", 9, "뵥뵦뵧뵩", 22, "붂붃붅붆붋", 4, "붒붔붖붗붘붛붝", 6, "붥", 10, "붱", 6, "붹", 24],
    ["9541", "뷒뷓뷖뷗뷙뷚뷛뷝", 11, "뷪", 5, "뷱"],
    ["9561", "뷲뷳뷵뷶뷷뷹", 6, "븁븂븄븆", 5, "븎븏븑븒븓"],
    ["9581", "븕", 6, "븞븠", 35, "빆빇빉빊빋빍빏", 4, "빖빘빜빝빞빟빢빣빥빦빧빩빫", 4, "빲빶", 4, "빾빿뺁뺂뺃뺅", 6, "뺎뺒", 5, "뺚", 13, "뺩", 14],
    ["9641", "뺸", 23, "뻒뻓"],
    ["9661", "뻕뻖뻙", 6, "뻡뻢뻦", 5, "뻭", 8],
    ["9681", "뻶", 10, "뼂", 5, "뼊", 13, "뼚뼞", 33, "뽂뽃뽅뽆뽇뽉", 6, "뽒뽓뽔뽖", 44],
    ["9741", "뾃", 16, "뾕", 8],
    ["9761", "뾞", 17, "뾱", 7],
    ["9781", "뾹", 11, "뿆", 5, "뿎뿏뿑뿒뿓뿕", 6, "뿝뿞뿠뿢", 89, "쀽쀾쀿"],
    ["9841", "쁀", 16, "쁒", 5, "쁙쁚쁛"],
    ["9861", "쁝쁞쁟쁡", 6, "쁪", 15],
    ["9881", "쁺", 21, "삒삓삕삖삗삙", 6, "삢삤삦", 5, "삮삱삲삷", 4, "삾샂샃샄샆샇샊샋샍샎샏샑", 6, "샚샞", 5, "샦샧샩샪샫샭", 6, "샶샸샺", 5, "섁섂섃섅섆섇섉", 6, "섑섒섓섔섖", 5, "섡섢섥섨섩섪섫섮"],
    ["9941", "섲섳섴섵섷섺섻섽섾섿셁", 6, "셊셎", 5, "셖셗"],
    ["9961", "셙셚셛셝", 6, "셦셪", 5, "셱셲셳셵셶셷셹셺셻"],
    ["9981", "셼", 8, "솆", 5, "솏솑솒솓솕솗", 4, "솞솠솢솣솤솦솧솪솫솭솮솯솱", 11, "솾", 5, "쇅쇆쇇쇉쇊쇋쇍", 6, "쇕쇖쇙", 6, "쇡쇢쇣쇥쇦쇧쇩", 6, "쇲쇴", 7, "쇾쇿숁숂숃숅", 6, "숎숐숒", 5, "숚숛숝숞숡숢숣"],
    ["9a41", "숤숥숦숧숪숬숮숰숳숵", 16],
    ["9a61", "쉆쉇쉉", 6, "쉒쉓쉕쉖쉗쉙", 6, "쉡쉢쉣쉤쉦"],
    ["9a81", "쉧", 4, "쉮쉯쉱쉲쉳쉵", 6, "쉾슀슂", 5, "슊", 5, "슑", 6, "슙슚슜슞", 5, "슦슧슩슪슫슮", 5, "슶슸슺", 33, "싞싟싡싢싥", 5, "싮싰싲싳싴싵싷싺싽싾싿쌁", 6, "쌊쌋쌎쌏"],
    ["9b41", "쌐쌑쌒쌖쌗쌙쌚쌛쌝", 6, "쌦쌧쌪", 8],
    ["9b61", "쌳", 17, "썆", 7],
    ["9b81", "썎", 25, "썪썫썭썮썯썱썳", 4, "썺썻썾", 5, "쎅쎆쎇쎉쎊쎋쎍", 50, "쏁", 22, "쏚"],
    ["9c41", "쏛쏝쏞쏡쏣", 4, "쏪쏫쏬쏮", 5, "쏶쏷쏹", 5],
    ["9c61", "쏿", 8, "쐉", 6, "쐑", 9],
    ["9c81", "쐛", 8, "쐥", 6, "쐭쐮쐯쐱쐲쐳쐵", 6, "쐾", 9, "쑉", 26, "쑦쑧쑩쑪쑫쑭", 6, "쑶쑷쑸쑺", 5, "쒁", 18, "쒕", 6, "쒝", 12],
    ["9d41", "쒪", 13, "쒹쒺쒻쒽", 8],
    ["9d61", "쓆", 25],
    ["9d81", "쓠", 8, "쓪", 5, "쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂", 9, "씍씎씏씑씒씓씕", 6, "씝", 10, "씪씫씭씮씯씱", 6, "씺씼씾", 5, "앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩", 6, "앲앶", 5, "앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"],
    ["9e41", "얖얙얚얛얝얞얟얡", 7, "얪", 9, "얶"],
    ["9e61", "얷얺얿", 4, "엋엍엏엒엓엕엖엗엙", 6, "엢엤엦엧"],
    ["9e81", "엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑", 6, "옚옝", 6, "옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉", 6, "왒왖", 5, "왞왟왡", 10, "왭왮왰왲", 5, "왺왻왽왾왿욁", 6, "욊욌욎", 5, "욖욗욙욚욛욝", 6, "욦"],
    ["9f41", "욨욪", 5, "욲욳욵욶욷욻", 4, "웂웄웆", 5, "웎"],
    ["9f61", "웏웑웒웓웕", 6, "웞웟웢", 5, "웪웫웭웮웯웱웲"],
    ["9f81", "웳", 4, "웺웻웼웾", 5, "윆윇윉윊윋윍", 6, "윖윘윚", 5, "윢윣윥윦윧윩", 6, "윲윴윶윸윹윺윻윾윿읁읂읃읅", 4, "읋읎읐읙읚읛읝읞읟읡", 6, "읩읪읬", 7, "읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛", 4, "잢잧", 4, "잮잯잱잲잳잵잶잷"],
    ["a041", "잸잹잺잻잾쟂", 5, "쟊쟋쟍쟏쟑", 6, "쟙쟚쟛쟜"],
    ["a061", "쟞", 5, "쟥쟦쟧쟩쟪쟫쟭", 13],
    ["a081", "쟻", 4, "젂젃젅젆젇젉젋", 4, "젒젔젗", 4, "젞젟젡젢젣젥", 6, "젮젰젲", 5, "젹젺젻젽젾젿졁", 6, "졊졋졎", 5, "졕", 26, "졲졳졵졶졷졹졻", 4, "좂좄좈좉좊좎", 5, "좕", 7, "좞좠좢좣좤"],
    ["a141", "좥좦좧좩", 18, "좾좿죀죁"],
    ["a161", "죂죃죅죆죇죉죊죋죍", 6, "죖죘죚", 5, "죢죣죥"],
    ["a181", "죦", 14, "죶", 5, "죾죿줁줂줃줇", 4, "줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈", 9, "±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"],
    ["a241", "줐줒", 5, "줙", 18],
    ["a261", "줭", 6, "줵", 18],
    ["a281", "쥈", 7, "쥒쥓쥕쥖쥗쥙", 6, "쥢쥤", 7, "쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"],
    ["a341", "쥱쥲쥳쥵", 6, "쥽", 10, "즊즋즍즎즏"],
    ["a361", "즑", 6, "즚즜즞", 16],
    ["a381", "즯", 16, "짂짃짅짆짉짋", 4, "짒짔짗짘짛！", 58, "￦］", 32, "￣"],
    ["a441", "짞짟짡짣짥짦짨짩짪짫짮짲", 5, "짺짻짽짾짿쨁쨂쨃쨄"],
    ["a461", "쨅쨆쨇쨊쨎", 5, "쨕쨖쨗쨙", 12],
    ["a481", "쨦쨧쨨쨪", 28, "ㄱ", 93],
    ["a541", "쩇", 4, "쩎쩏쩑쩒쩓쩕", 6, "쩞쩢", 5, "쩩쩪"],
    ["a561", "쩫", 17, "쩾", 5, "쪅쪆"],
    ["a581", "쪇", 16, "쪙", 14, "ⅰ", 9],
    ["a5b0", "Ⅰ", 9],
    ["a5c1", "Α", 16, "Σ", 6],
    ["a5e1", "α", 16, "σ", 6],
    ["a641", "쪨", 19, "쪾쪿쫁쫂쫃쫅"],
    ["a661", "쫆", 5, "쫎쫐쫒쫔쫕쫖쫗쫚", 5, "쫡", 6],
    ["a681", "쫨쫩쫪쫫쫭", 6, "쫵", 18, "쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃", 7],
    ["a741", "쬋", 4, "쬑쬒쬓쬕쬖쬗쬙", 6, "쬢", 7],
    ["a761", "쬪", 22, "쭂쭃쭄"],
    ["a781", "쭅쭆쭇쭊쭋쭍쭎쭏쭑", 6, "쭚쭛쭜쭞", 5, "쭥", 7, "㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙", 9, "㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰", 9, "㎀", 4, "㎺", 5, "㎐", 4, "Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"],
    ["a841", "쭭", 10, "쭺", 14],
    ["a861", "쮉", 18, "쮝", 6],
    ["a881", "쮤", 19, "쮹", 11, "ÆÐªĦ"],
    ["a8a6", "Ĳ"],
    ["a8a8", "ĿŁØŒºÞŦŊ"],
    ["a8b1", "㉠", 27, "ⓐ", 25, "①", 14, "½⅓⅔¼¾⅛⅜⅝⅞"],
    ["a941", "쯅", 14, "쯕", 10],
    ["a961", "쯠쯡쯢쯣쯥쯦쯨쯪", 18],
    ["a981", "쯽", 14, "찎찏찑찒찓찕", 6, "찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀", 27, "⒜", 25, "⑴", 14, "¹²³⁴ⁿ₁₂₃₄"],
    ["aa41", "찥찦찪찫찭찯찱", 6, "찺찿", 4, "챆챇챉챊챋챍챎"],
    ["aa61", "챏", 4, "챖챚", 5, "챡챢챣챥챧챩", 6, "챱챲"],
    ["aa81", "챳챴챶", 29, "ぁ", 82],
    ["ab41", "첔첕첖첗첚첛첝첞첟첡", 6, "첪첮", 5, "첶첷첹"],
    ["ab61", "첺첻첽", 6, "쳆쳈쳊", 5, "쳑쳒쳓쳕", 5],
    ["ab81", "쳛", 8, "쳥", 6, "쳭쳮쳯쳱", 12, "ァ", 85],
    ["ac41", "쳾쳿촀촂", 5, "촊촋촍촎촏촑", 6, "촚촜촞촟촠"],
    ["ac61", "촡촢촣촥촦촧촩촪촫촭", 11, "촺", 4],
    ["ac81", "촿", 28, "쵝쵞쵟А", 5, "ЁЖ", 25],
    ["acd1", "а", 5, "ёж", 25],
    ["ad41", "쵡쵢쵣쵥", 6, "쵮쵰쵲", 5, "쵹", 7],
    ["ad61", "춁", 6, "춉", 10, "춖춗춙춚춛춝춞춟"],
    ["ad81", "춠춡춢춣춦춨춪", 5, "춱", 18, "췅"],
    ["ae41", "췆", 5, "췍췎췏췑", 16],
    ["ae61", "췢", 5, "췩췪췫췭췮췯췱", 6, "췺췼췾", 4],
    ["ae81", "츃츅츆츇츉츊츋츍", 6, "츕츖츗츘츚", 5, "츢츣츥츦츧츩츪츫"],
    ["af41", "츬츭츮츯츲츴츶", 19],
    ["af61", "칊", 13, "칚칛칝칞칢", 5, "칪칬"],
    ["af81", "칮", 5, "칶칷칹칺칻칽", 6, "캆캈캊", 5, "캒캓캕캖캗캙"],
    ["b041", "캚", 5, "캢캦", 5, "캮", 12],
    ["b061", "캻", 5, "컂", 19],
    ["b081", "컖", 13, "컦컧컩컪컭", 6, "컶컺", 5, "가각간갇갈갉갊감", 7, "같", 4, "갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"],
    ["b141", "켂켃켅켆켇켉", 6, "켒켔켖", 5, "켝켞켟켡켢켣"],
    ["b161", "켥", 6, "켮켲", 5, "켹", 11],
    ["b181", "콅", 14, "콖콗콙콚콛콝", 6, "콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"],
    ["b241", "콭콮콯콲콳콵콶콷콹", 6, "쾁쾂쾃쾄쾆", 5, "쾍"],
    ["b261", "쾎", 18, "쾢", 5, "쾩"],
    ["b281", "쾪", 5, "쾱", 18, "쿅", 6, "깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"],
    ["b341", "쿌", 19, "쿢쿣쿥쿦쿧쿩"],
    ["b361", "쿪", 5, "쿲쿴쿶", 5, "쿽쿾쿿퀁퀂퀃퀅", 5],
    ["b381", "퀋", 5, "퀒", 5, "퀙", 19, "끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫", 4, "낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"],
    ["b441", "퀮", 5, "퀶퀷퀹퀺퀻퀽", 6, "큆큈큊", 5],
    ["b461", "큑큒큓큕큖큗큙", 6, "큡", 10, "큮큯"],
    ["b481", "큱큲큳큵", 6, "큾큿킀킂", 18, "뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫", 4, "닳담답닷", 4, "닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"],
    ["b541", "킕", 14, "킦킧킩킪킫킭", 5],
    ["b561", "킳킶킸킺", 5, "탂탃탅탆탇탊", 5, "탒탖", 4],
    ["b581", "탛탞탟탡탢탣탥", 6, "탮탲", 5, "탹", 11, "덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"],
    ["b641", "턅", 7, "턎", 17],
    ["b661", "턠", 15, "턲턳턵턶턷턹턻턼턽턾"],
    ["b681", "턿텂텆", 5, "텎텏텑텒텓텕", 6, "텞텠텢", 5, "텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"],
    ["b741", "텮", 13, "텽", 6, "톅톆톇톉톊"],
    ["b761", "톋", 20, "톢톣톥톦톧"],
    ["b781", "톩", 6, "톲톴톶톷톸톹톻톽톾톿퇁", 14, "래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"],
    ["b841", "퇐", 7, "퇙", 17],
    ["b861", "퇫", 8, "퇵퇶퇷퇹", 13],
    ["b881", "툈툊", 5, "툑", 24, "륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많", 4, "맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"],
    ["b941", "툪툫툮툯툱툲툳툵", 6, "툾퉀퉂", 5, "퉉퉊퉋퉌"],
    ["b961", "퉍", 14, "퉝", 6, "퉥퉦퉧퉨"],
    ["b981", "퉩", 22, "튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바", 4, "받", 4, "밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"],
    ["ba41", "튍튎튏튒튓튔튖", 5, "튝튞튟튡튢튣튥", 6, "튭"],
    ["ba61", "튮튯튰튲", 5, "튺튻튽튾틁틃", 4, "틊틌", 5],
    ["ba81", "틒틓틕틖틗틙틚틛틝", 6, "틦", 9, "틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"],
    ["bb41", "틻", 4, "팂팄팆", 5, "팏팑팒팓팕팗", 4, "팞팢팣"],
    ["bb61", "팤팦팧팪팫팭팮팯팱", 6, "팺팾", 5, "퍆퍇퍈퍉"],
    ["bb81", "퍊", 31, "빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"],
    ["bc41", "퍪", 17, "퍾퍿펁펂펃펅펆펇"],
    ["bc61", "펈펉펊펋펎펒", 5, "펚펛펝펞펟펡", 6, "펪펬펮"],
    ["bc81", "펯", 4, "펵펶펷펹펺펻펽", 6, "폆폇폊", 5, "폑", 5, "샥샨샬샴샵샷샹섀섄섈섐섕서", 4, "섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"],
    ["bd41", "폗폙", 7, "폢폤", 7, "폮폯폱폲폳폵폶폷"],
    ["bd61", "폸폹폺폻폾퐀퐂", 5, "퐉", 13],
    ["bd81", "퐗", 5, "퐞", 25, "숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"],
    ["be41", "퐸", 7, "푁푂푃푅", 14],
    ["be61", "푔", 7, "푝푞푟푡푢푣푥", 7, "푮푰푱푲"],
    ["be81", "푳", 4, "푺푻푽푾풁풃", 4, "풊풌풎", 5, "풕", 8, "쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄", 6, "엌엎"],
    ["bf41", "풞", 10, "풪", 14],
    ["bf61", "풹", 18, "퓍퓎퓏퓑퓒퓓퓕"],
    ["bf81", "퓖", 5, "퓝퓞퓠", 7, "퓩퓪퓫퓭퓮퓯퓱", 6, "퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염", 5, "옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"],
    ["c041", "퓾", 5, "픅픆픇픉픊픋픍", 6, "픖픘", 5],
    ["c061", "픞", 25],
    ["c081", "픸픹픺픻픾픿핁핂핃핅", 6, "핎핐핒", 5, "핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응", 7, "읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"],
    ["c141", "핤핦핧핪핬핮", 5, "핶핷핹핺핻핽", 6, "햆햊햋"],
    ["c161", "햌햍햎햏햑", 19, "햦햧"],
    ["c181", "햨", 31, "점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"],
    ["c241", "헊헋헍헎헏헑헓", 4, "헚헜헞", 5, "헦헧헩헪헫헭헮"],
    ["c261", "헯", 4, "헶헸헺", 5, "혂혃혅혆혇혉", 6, "혒"],
    ["c281", "혖", 5, "혝혞혟혡혢혣혥", 7, "혮", 9, "혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"],
    ["c341", "혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝", 4],
    ["c361", "홢", 4, "홨홪", 5, "홲홳홵", 11],
    ["c381", "횁횂횄횆", 5, "횎횏횑횒횓횕", 7, "횞횠횢", 5, "횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"],
    ["c441", "횫횭횮횯횱", 7, "횺횼", 7, "훆훇훉훊훋"],
    ["c461", "훍훎훏훐훒훓훕훖훘훚", 5, "훡훢훣훥훦훧훩", 4],
    ["c481", "훮훯훱훲훳훴훶", 5, "훾훿휁휂휃휅", 11, "휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"],
    ["c541", "휕휖휗휚휛휝휞휟휡", 6, "휪휬휮", 5, "휶휷휹"],
    ["c561", "휺휻휽", 6, "흅흆흈흊", 5, "흒흓흕흚", 4],
    ["c581", "흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵", 6, "흾흿힀힂", 5, "힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"],
    ["c641", "힍힎힏힑", 6, "힚힜힞", 5],
    ["c6a1", "퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"],
    ["c7a1", "퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"],
    ["c8a1", "혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"],
    ["caa1", "伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"],
    ["cba1", "匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"],
    ["cca1", "瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"],
    ["cda1", "棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"],
    ["cea1", "科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"],
    ["cfa1", "區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"],
    ["d0a1", "鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"],
    ["d1a1", "朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩", 5, "那樂", 4, "諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"],
    ["d2a1", "納臘蠟衲囊娘廊", 4, "乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧", 5, "駑魯", 10, "濃籠聾膿農惱牢磊腦賂雷尿壘", 7, "嫩訥杻紐勒", 5, "能菱陵尼泥匿溺多茶"],
    ["d3a1", "丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"],
    ["d4a1", "棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"],
    ["d5a1", "蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"],
    ["d6a1", "煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"],
    ["d7a1", "遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"],
    ["d8a1", "立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"],
    ["d9a1", "蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"],
    ["daa1", "汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"],
    ["dba1", "發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"],
    ["dca1", "碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"],
    ["dda1", "孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"],
    ["dea1", "脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"],
    ["dfa1", "傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"],
    ["e0a1", "胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"],
    ["e1a1", "聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"],
    ["e2a1", "戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"],
    ["e3a1", "嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"],
    ["e4a1", "沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"],
    ["e5a1", "櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"],
    ["e6a1", "旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"],
    ["e7a1", "簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"],
    ["e8a1", "烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"],
    ["e9a1", "窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"],
    ["eaa1", "運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"],
    ["eba1", "濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"],
    ["eca1", "議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"],
    ["eda1", "立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"],
    ["eea1", "障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"],
    ["efa1", "煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"],
    ["f0a1", "靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"],
    ["f1a1", "踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"],
    ["f2a1", "咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"],
    ["f3a1", "鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"],
    ["f4a1", "責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"],
    ["f5a1", "椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"],
    ["f6a1", "贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"],
    ["f7a1", "鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"],
    ["f8a1", "阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"],
    ["f9a1", "品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"],
    ["faa1", "行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"],
    ["fba1", "形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"],
    ["fca1", "禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"],
    ["fda1", "爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"]
  ];
});

// node_modules/iconv-lite/encodings/tables/cp950.json
var require_cp950 = __commonJS((exports, module) => {
  module.exports = [
    ["0", " ", 127],
    ["a140", "　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"],
    ["a1a1", "﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢", 4, "～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"],
    ["a240", "＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁", 7, "▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"],
    ["a2a1", "╮╰╯═╞╪╡◢◣◥◤╱╲╳０", 9, "Ⅰ", 9, "〡", 8, "十卄卅Ａ", 25, "ａ", 21],
    ["a340", "ｗｘｙｚΑ", 16, "Σ", 6, "α", 16, "σ", 6, "ㄅ", 10],
    ["a3a1", "ㄐ", 25, "˙ˉˊˇˋ"],
    ["a3e1", "€"],
    ["a440", "一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"],
    ["a4a1", "丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"],
    ["a540", "世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"],
    ["a5a1", "央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"],
    ["a640", "共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"],
    ["a6a1", "式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"],
    ["a740", "作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"],
    ["a7a1", "均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"],
    ["a840", "杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"],
    ["a8a1", "芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"],
    ["a940", "咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"],
    ["a9a1", "屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"],
    ["aa40", "昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"],
    ["aaa1", "炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"],
    ["ab40", "陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"],
    ["aba1", "哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"],
    ["ac40", "拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"],
    ["aca1", "活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"],
    ["ad40", "耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"],
    ["ada1", "迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"],
    ["ae40", "哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"],
    ["aea1", "恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"],
    ["af40", "浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"],
    ["afa1", "砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"],
    ["b040", "虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"],
    ["b0a1", "陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"],
    ["b140", "娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"],
    ["b1a1", "情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"],
    ["b240", "毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"],
    ["b2a1", "瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"],
    ["b340", "莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"],
    ["b3a1", "部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"],
    ["b440", "婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"],
    ["b4a1", "插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"],
    ["b540", "溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"],
    ["b5a1", "窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"],
    ["b640", "詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"],
    ["b6a1", "間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"],
    ["b740", "媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"],
    ["b7a1", "楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"],
    ["b840", "睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"],
    ["b8a1", "腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"],
    ["b940", "辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"],
    ["b9a1", "飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"],
    ["ba40", "愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"],
    ["baa1", "滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"],
    ["bb40", "罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"],
    ["bba1", "說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"],
    ["bc40", "劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"],
    ["bca1", "慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"],
    ["bd40", "瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"],
    ["bda1", "翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"],
    ["be40", "輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"],
    ["bea1", "鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"],
    ["bf40", "濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"],
    ["bfa1", "縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"],
    ["c040", "錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"],
    ["c0a1", "嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"],
    ["c140", "瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"],
    ["c1a1", "薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"],
    ["c240", "駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"],
    ["c2a1", "癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"],
    ["c340", "鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"],
    ["c3a1", "獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"],
    ["c440", "願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"],
    ["c4a1", "纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"],
    ["c540", "護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"],
    ["c5a1", "禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"],
    ["c640", "讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"],
    ["c940", "乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"],
    ["c9a1", "氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"],
    ["ca40", "汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"],
    ["caa1", "吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"],
    ["cb40", "杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"],
    ["cba1", "芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"],
    ["cc40", "坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"],
    ["cca1", "怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"],
    ["cd40", "泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"],
    ["cda1", "矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"],
    ["ce40", "哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"],
    ["cea1", "峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"],
    ["cf40", "柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"],
    ["cfa1", "洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"],
    ["d040", "穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"],
    ["d0a1", "苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"],
    ["d140", "唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"],
    ["d1a1", "恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"],
    ["d240", "毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"],
    ["d2a1", "牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"],
    ["d340", "笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"],
    ["d3a1", "荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"],
    ["d440", "酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"],
    ["d4a1", "唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"],
    ["d540", "崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"],
    ["d5a1", "捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"],
    ["d640", "淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"],
    ["d6a1", "痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"],
    ["d740", "耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"],
    ["d7a1", "蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"],
    ["d840", "釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"],
    ["d8a1", "堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"],
    ["d940", "惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"],
    ["d9a1", "晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"],
    ["da40", "湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"],
    ["daa1", "琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"],
    ["db40", "罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"],
    ["dba1", "菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"],
    ["dc40", "軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"],
    ["dca1", "隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"],
    ["dd40", "媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"],
    ["dda1", "搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"],
    ["de40", "毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"],
    ["dea1", "煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"],
    ["df40", "稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"],
    ["dfa1", "腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"],
    ["e040", "觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"],
    ["e0a1", "遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"],
    ["e140", "凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"],
    ["e1a1", "寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"],
    ["e240", "榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"],
    ["e2a1", "漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"],
    ["e340", "禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"],
    ["e3a1", "耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"],
    ["e440", "裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"],
    ["e4a1", "銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"],
    ["e540", "噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"],
    ["e5a1", "憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"],
    ["e640", "澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"],
    ["e6a1", "獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"],
    ["e740", "膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"],
    ["e7a1", "蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"],
    ["e840", "踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"],
    ["e8a1", "銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"],
    ["e940", "噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"],
    ["e9a1", "憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"],
    ["ea40", "澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"],
    ["eaa1", "瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"],
    ["eb40", "蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"],
    ["eba1", "諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"],
    ["ec40", "錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"],
    ["eca1", "魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"],
    ["ed40", "檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"],
    ["eda1", "瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"],
    ["ee40", "蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"],
    ["eea1", "謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"],
    ["ef40", "鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"],
    ["efa1", "鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"],
    ["f040", "璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"],
    ["f0a1", "臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"],
    ["f140", "蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"],
    ["f1a1", "鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"],
    ["f240", "徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"],
    ["f2a1", "礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"],
    ["f340", "譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"],
    ["f3a1", "鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"],
    ["f440", "嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"],
    ["f4a1", "禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"],
    ["f540", "鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"],
    ["f5a1", "鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"],
    ["f640", "蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"],
    ["f6a1", "騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"],
    ["f740", "糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"],
    ["f7a1", "驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"],
    ["f840", "讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"],
    ["f8a1", "齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"],
    ["f940", "纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"],
    ["f9a1", "龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"]
  ];
});

// node_modules/iconv-lite/encodings/tables/big5-added.json
var require_big5_added = __commonJS((exports, module) => {
  module.exports = [
    ["8740", "䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"],
    ["8767", "綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"],
    ["87a1", "𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"],
    ["8840", "㇀", 4, "𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"],
    ["88a1", "ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"],
    ["8940", "𪎩𡅅"],
    ["8943", "攊"],
    ["8946", "丽滝鵎釟"],
    ["894c", "𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"],
    ["89a1", "琑糼緍楆竉刧"],
    ["89ab", "醌碸酞肼"],
    ["89b0", "贋胶𠧧"],
    ["89b5", "肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"],
    ["89c1", "溚舾甙"],
    ["89c5", "䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"],
    ["8a40", "𧶄唥"],
    ["8a43", "𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"],
    ["8a64", "𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"],
    ["8a76", "䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"],
    ["8aa1", "𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"],
    ["8aac", "䠋𠆩㿺塳𢶍"],
    ["8ab2", "𤗈𠓼𦂗𠽌𠶖啹䂻䎺"],
    ["8abb", "䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"],
    ["8ac9", "𪘁𠸉𢫏𢳉"],
    ["8ace", "𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"],
    ["8adf", "𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"],
    ["8af6", "𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"],
    ["8b40", "𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"],
    ["8b55", "𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"],
    ["8ba1", "𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"],
    ["8bde", "𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"],
    ["8c40", "倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"],
    ["8ca1", "𣏹椙橃𣱣泿"],
    ["8ca7", "爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"],
    ["8cc9", "顨杫䉶圽"],
    ["8cce", "藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"],
    ["8ce6", "峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"],
    ["8d40", "𠮟"],
    ["8d42", "𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"],
    ["8da1", "㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"],
    ["8e40", "𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"],
    ["8ea1", "繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"],
    ["8f40", "蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"],
    ["8fa1", "𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"],
    ["9040", "趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"],
    ["90a1", "𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"],
    ["9140", "𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"],
    ["91a1", "鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"],
    ["9240", "𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"],
    ["92a1", "働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"],
    ["9340", "媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"],
    ["93a1", "摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"],
    ["9440", "銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"],
    ["94a1", "㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"],
    ["9540", "𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"],
    ["95a1", "衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"],
    ["9640", "桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"],
    ["96a1", "𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"],
    ["9740", "愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"],
    ["97a1", "𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"],
    ["9840", "𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"],
    ["98a1", "咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"],
    ["9940", "䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"],
    ["99a1", "䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"],
    ["9a40", "鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"],
    ["9aa1", "黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"],
    ["9b40", "𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"],
    ["9b62", "𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"],
    ["9ba1", "椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"],
    ["9c40", "嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"],
    ["9ca1", "㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"],
    ["9d40", "𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"],
    ["9da1", "辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"],
    ["9e40", "𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"],
    ["9ea1", "鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"],
    ["9ead", "𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"],
    ["9ec5", "㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"],
    ["9ef5", "噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"],
    ["9f40", "籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"],
    ["9f4f", "凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"],
    ["9fa1", "椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"],
    ["9fae", "酙隁酜"],
    ["9fb2", "酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"],
    ["9fc1", "𤤙盖鮝个𠳔莾衂"],
    ["9fc9", "届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"],
    ["9fdb", "歒酼龥鮗頮颴骺麨麄煺笔"],
    ["9fe7", "毺蠘罸"],
    ["9feb", "嘠𪙊蹷齓"],
    ["9ff0", "跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"],
    ["a040", "𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"],
    ["a055", "𡠻𦸅"],
    ["a058", "詾𢔛"],
    ["a05b", "惽癧髗鵄鍮鮏蟵"],
    ["a063", "蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"],
    ["a073", "坟慯抦戹拎㩜懢厪𣏵捤栂㗒"],
    ["a0a1", "嵗𨯂迚𨸹"],
    ["a0a6", "僙𡵆礆匲阸𠼻䁥"],
    ["a0ae", "矾"],
    ["a0b0", "糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"],
    ["a0d4", "覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"],
    ["a0e2", "罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"],
    ["a3c0", "␀", 31, "␡"],
    ["c6a1", "①", 9, "⑴", 9, "ⅰ", 9, "丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ", 23],
    ["c740", "す", 58, "ァアィイ"],
    ["c7a1", "ゥ", 81, "А", 5, "ЁЖ", 4],
    ["c840", "Л", 26, "ёж", 25, "⇧↸↹㇏𠃌乚𠂊刂䒑"],
    ["c8a1", "龰冈龱𧘇"],
    ["c8cd", "￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"],
    ["c8f5", "ʃɐɛɔɵœøŋʊɪ"],
    ["f9fe", "￭"],
    ["fa40", "𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"],
    ["faa1", "鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"],
    ["fb40", "𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"],
    ["fba1", "𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"],
    ["fc40", "廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"],
    ["fca1", "𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"],
    ["fd40", "𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"],
    ["fda1", "𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"],
    ["fe40", "鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"],
    ["fea1", "𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"]
  ];
});

// node_modules/iconv-lite/encodings/dbcs-data.js
var require_dbcs_data = __commonJS((exports, module) => {
  module.exports = {
    shiftjis: {
      type: "_dbcs",
      table: function() {
        return require_shiftjis();
      },
      encodeAdd: { "\xA5": 92, "\u203E": 126 },
      encodeSkipVals: [{ from: 60736, to: 63808 }]
    },
    csshiftjis: "shiftjis",
    mskanji: "shiftjis",
    sjis: "shiftjis",
    windows31j: "shiftjis",
    ms31j: "shiftjis",
    xsjis: "shiftjis",
    windows932: "shiftjis",
    ms932: "shiftjis",
    "932": "shiftjis",
    cp932: "shiftjis",
    eucjp: {
      type: "_dbcs",
      table: function() {
        return require_eucjp();
      },
      encodeAdd: { "\xA5": 92, "\u203E": 126 }
    },
    gb2312: "cp936",
    gb231280: "cp936",
    gb23121980: "cp936",
    csgb2312: "cp936",
    csiso58gb231280: "cp936",
    euccn: "cp936",
    windows936: "cp936",
    ms936: "cp936",
    "936": "cp936",
    cp936: {
      type: "_dbcs",
      table: function() {
        return require_cp936();
      }
    },
    gbk: {
      type: "_dbcs",
      table: function() {
        return require_cp936().concat(require_gbk_added());
      }
    },
    xgbk: "gbk",
    isoir58: "gbk",
    gb18030: {
      type: "_dbcs",
      table: function() {
        return require_cp936().concat(require_gbk_added());
      },
      gb18030: function() {
        return require_gb18030_ranges();
      },
      encodeSkipVals: [128],
      encodeAdd: { "\u20AC": 41699 }
    },
    chinese: "gb18030",
    windows949: "cp949",
    ms949: "cp949",
    "949": "cp949",
    cp949: {
      type: "_dbcs",
      table: function() {
        return require_cp949();
      }
    },
    cseuckr: "cp949",
    csksc56011987: "cp949",
    euckr: "cp949",
    isoir149: "cp949",
    korean: "cp949",
    ksc56011987: "cp949",
    ksc56011989: "cp949",
    ksc5601: "cp949",
    windows950: "cp950",
    ms950: "cp950",
    "950": "cp950",
    cp950: {
      type: "_dbcs",
      table: function() {
        return require_cp950();
      }
    },
    big5: "big5hkscs",
    big5hkscs: {
      type: "_dbcs",
      table: function() {
        return require_cp950().concat(require_big5_added());
      },
      encodeSkipVals: [
        36457,
        36463,
        36478,
        36523,
        36532,
        36557,
        36560,
        36695,
        36713,
        36718,
        36811,
        36862,
        36973,
        36986,
        37060,
        37084,
        37105,
        37311,
        37551,
        37552,
        37553,
        37554,
        37585,
        37959,
        38090,
        38361,
        38652,
        39285,
        39798,
        39800,
        39803,
        39878,
        39902,
        39916,
        39926,
        40002,
        40019,
        40034,
        40040,
        40043,
        40055,
        40124,
        40125,
        40144,
        40279,
        40282,
        40388,
        40431,
        40443,
        40617,
        40687,
        40701,
        40800,
        40907,
        41079,
        41180,
        41183,
        36812,
        37576,
        38468,
        38637,
        41636,
        41637,
        41639,
        41638,
        41676,
        41678
      ]
    },
    cnbig5: "big5hkscs",
    csbig5: "big5hkscs",
    xxbig5: "big5hkscs"
  };
});

// node_modules/iconv-lite/encodings/index.js
var require_encodings = __commonJS((exports, module) => {
  var modules = [
    require_internal(),
    require_utf32(),
    require_utf16(),
    require_utf7(),
    require_sbcs_codec(),
    require_sbcs_data(),
    require_sbcs_data_generated(),
    require_dbcs_codec(),
    require_dbcs_data()
  ];
  for (i3 = 0;i3 < modules.length; i3++) {
    module = modules[i3];
    for (enc in module)
      if (Object.prototype.hasOwnProperty.call(module, enc))
        exports[enc] = module[enc];
  }
  var module;
  var enc;
  var i3;
});

// node_modules/iconv-lite/lib/streams.js
var require_streams = __commonJS((exports, module) => {
  var Buffer2 = require_safer().Buffer;
  module.exports = function(stream_module) {
    var Transform2 = stream_module.Transform;
    function IconvLiteEncoderStream(conv, options) {
      this.conv = conv;
      options = options || {};
      options.decodeStrings = false;
      Transform2.call(this, options);
    }
    IconvLiteEncoderStream.prototype = Object.create(Transform2.prototype, {
      constructor: { value: IconvLiteEncoderStream }
    });
    IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {
      if (typeof chunk != "string")
        return done(new Error("Iconv encoding stream needs strings as its input."));
      try {
        var res = this.conv.write(chunk);
        if (res && res.length)
          this.push(res);
        done();
      } catch (e) {
        done(e);
      }
    };
    IconvLiteEncoderStream.prototype._flush = function(done) {
      try {
        var res = this.conv.end();
        if (res && res.length)
          this.push(res);
        done();
      } catch (e) {
        done(e);
      }
    };
    IconvLiteEncoderStream.prototype.collect = function(cb) {
      var chunks = [];
      this.on("error", cb);
      this.on("data", function(chunk) {
        chunks.push(chunk);
      });
      this.on("end", function() {
        cb(null, Buffer2.concat(chunks));
      });
      return this;
    };
    function IconvLiteDecoderStream(conv, options) {
      this.conv = conv;
      options = options || {};
      options.encoding = this.encoding = "utf8";
      Transform2.call(this, options);
    }
    IconvLiteDecoderStream.prototype = Object.create(Transform2.prototype, {
      constructor: { value: IconvLiteDecoderStream }
    });
    IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {
      if (!Buffer2.isBuffer(chunk) && !(chunk instanceof Uint8Array))
        return done(new Error("Iconv decoding stream needs buffers as its input."));
      try {
        var res = this.conv.write(chunk);
        if (res && res.length)
          this.push(res, this.encoding);
        done();
      } catch (e) {
        done(e);
      }
    };
    IconvLiteDecoderStream.prototype._flush = function(done) {
      try {
        var res = this.conv.end();
        if (res && res.length)
          this.push(res, this.encoding);
        done();
      } catch (e) {
        done(e);
      }
    };
    IconvLiteDecoderStream.prototype.collect = function(cb) {
      var res = "";
      this.on("error", cb);
      this.on("data", function(chunk) {
        res += chunk;
      });
      this.on("end", function() {
        cb(null, res);
      });
      return this;
    };
    return {
      IconvLiteEncoderStream,
      IconvLiteDecoderStream
    };
  };
});

// node_modules/iconv-lite/lib/index.js
var require_lib = __commonJS((exports, module) => {
  var Buffer2 = require_safer().Buffer;
  var bomHandling = require_bom_handling();
  var iconv = exports;
  iconv.encodings = null;
  iconv.defaultCharUnicode = "\uFFFD";
  iconv.defaultCharSingleByte = "?";
  iconv.encode = function encode(str, encoding, options) {
    str = "" + (str || "");
    var encoder = iconv.getEncoder(encoding, options);
    var res = encoder.write(str);
    var trail = encoder.end();
    return trail && trail.length > 0 ? Buffer2.concat([res, trail]) : res;
  };
  iconv.decode = function decode(buf, encoding, options) {
    if (typeof buf === "string") {
      if (!iconv.skipDecodeWarning) {
        console.error("Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding");
        iconv.skipDecodeWarning = true;
      }
      buf = Buffer2.from("" + (buf || ""), "binary");
    }
    var decoder = iconv.getDecoder(encoding, options);
    var res = decoder.write(buf);
    var trail = decoder.end();
    return trail ? res + trail : res;
  };
  iconv.encodingExists = function encodingExists(enc) {
    try {
      iconv.getCodec(enc);
      return true;
    } catch (e) {
      return false;
    }
  };
  iconv.toEncoding = iconv.encode;
  iconv.fromEncoding = iconv.decode;
  iconv._codecDataCache = {};
  iconv.getCodec = function getCodec(encoding) {
    if (!iconv.encodings)
      iconv.encodings = require_encodings();
    var enc = iconv._canonicalizeEncoding(encoding);
    var codecOptions = {};
    while (true) {
      var codec = iconv._codecDataCache[enc];
      if (codec)
        return codec;
      var codecDef = iconv.encodings[enc];
      switch (typeof codecDef) {
        case "string":
          enc = codecDef;
          break;
        case "object":
          for (var key in codecDef)
            codecOptions[key] = codecDef[key];
          if (!codecOptions.encodingName)
            codecOptions.encodingName = enc;
          enc = codecDef.type;
          break;
        case "function":
          if (!codecOptions.encodingName)
            codecOptions.encodingName = enc;
          codec = new codecDef(codecOptions, iconv);
          iconv._codecDataCache[codecOptions.encodingName] = codec;
          return codec;
        default:
          throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '" + enc + "')");
      }
    }
  };
  iconv._canonicalizeEncoding = function(encoding) {
    return ("" + encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
  };
  iconv.getEncoder = function getEncoder(encoding, options) {
    var codec = iconv.getCodec(encoding), encoder = new codec.encoder(options, codec);
    if (codec.bomAware && options && options.addBOM)
      encoder = new bomHandling.PrependBOM(encoder, options);
    return encoder;
  };
  iconv.getDecoder = function getDecoder(encoding, options) {
    var codec = iconv.getCodec(encoding), decoder = new codec.decoder(options, codec);
    if (codec.bomAware && !(options && options.stripBOM === false))
      decoder = new bomHandling.StripBOM(decoder, options);
    return decoder;
  };
  iconv.enableStreamingAPI = function enableStreamingAPI(stream_module2) {
    if (iconv.supportsStreams)
      return;
    var streams = require_streams()(stream_module2);
    iconv.IconvLiteEncoderStream = streams.IconvLiteEncoderStream;
    iconv.IconvLiteDecoderStream = streams.IconvLiteDecoderStream;
    iconv.encodeStream = function encodeStream(encoding, options) {
      return new iconv.IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
    };
    iconv.decodeStream = function decodeStream(encoding, options) {
      return new iconv.IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
    };
    iconv.supportsStreams = true;
  };
  var stream_module;
  try {
    stream_module = import.meta.require("stream");
  } catch (e) {
  }
  if (stream_module && stream_module.Transform) {
    iconv.enableStreamingAPI(stream_module);
  } else {
    iconv.encodeStream = iconv.decodeStream = function() {
      throw new Error("iconv-lite Streaming API is not enabled. Use iconv.enableStreamingAPI(require('stream')); to enable it.");
    };
  }
  if (false) {
  }
});

// node_modules/restructure/src/DecodeStream.js
var require_DecodeStream = __commonJS((exports, module) => {
  var iconv;
  try {
    iconv = require_lib();
  } catch (error22) {
  }

  class DecodeStream {
    constructor(buffer) {
      this.buffer = buffer;
      this.pos = 0;
      this.length = this.buffer.length;
    }
    readString(length, encoding = "ascii") {
      switch (encoding) {
        case "utf16le":
        case "ucs2":
        case "utf8":
        case "ascii":
          return this.buffer.toString(encoding, this.pos, this.pos += length);
        case "utf16be":
          var buf = Buffer.from(this.readBuffer(length));
          for (let i3 = 0, end = buf.length - 1;i3 < end; i3 += 2) {
            const byte = buf[i3];
            buf[i3] = buf[i3 + 1];
            buf[i3 + 1] = byte;
          }
          return buf.toString("utf16le");
        default:
          buf = this.readBuffer(length);
          if (iconv) {
            try {
              return iconv.decode(buf, encoding);
            } catch (error1) {
            }
          }
          return buf;
      }
    }
    readBuffer(length) {
      return this.buffer.slice(this.pos, this.pos += length);
    }
    readUInt24BE() {
      return (this.readUInt16BE() << 8) + this.readUInt8();
    }
    readUInt24LE() {
      return this.readUInt16LE() + (this.readUInt8() << 16);
    }
    readInt24BE() {
      return (this.readInt16BE() << 8) + this.readUInt8();
    }
    readInt24LE() {
      return this.readUInt16LE() + (this.readInt8() << 16);
    }
  }
  DecodeStream.TYPES = {
    UInt8: 1,
    UInt16: 2,
    UInt24: 3,
    UInt32: 4,
    Int8: 1,
    Int16: 2,
    Int24: 3,
    Int32: 4,
    Float: 4,
    Double: 8
  };
  for (let key in Buffer.prototype) {
    if (key.slice(0, 4) === "read") {
      const bytes = DecodeStream.TYPES[key.replace(/read|[BL]E/g, "")];
      DecodeStream.prototype[key] = function() {
        const ret = this.buffer[key](this.pos);
        this.pos += bytes;
        return ret;
      };
    }
  }
  module.exports = DecodeStream;
});

// node_modules/restructure/src/EncodeStream.js
var require_EncodeStream = __commonJS((exports, module) => {
  var iconv;
  var stream = import.meta.require("stream");
  var DecodeStream = require_DecodeStream();
  try {
    iconv = require_lib();
  } catch (error22) {
  }

  class EncodeStream extends stream.Readable {
    constructor(bufferSize = 65536) {
      super(...arguments);
      this.buffer = Buffer.alloc(bufferSize);
      this.bufferOffset = 0;
      this.pos = 0;
    }
    _read() {
    }
    ensure(bytes) {
      if (this.bufferOffset + bytes > this.buffer.length) {
        return this.flush();
      }
    }
    flush() {
      if (this.bufferOffset > 0) {
        this.push(Buffer.from(this.buffer.slice(0, this.bufferOffset)));
        return this.bufferOffset = 0;
      }
    }
    writeBuffer(buffer) {
      this.flush();
      this.push(buffer);
      return this.pos += buffer.length;
    }
    writeString(string7, encoding = "ascii") {
      switch (encoding) {
        case "utf16le":
        case "ucs2":
        case "utf8":
        case "ascii":
          return this.writeBuffer(Buffer.from(string7, encoding));
        case "utf16be":
          var buf = Buffer.from(string7, "utf16le");
          for (let i3 = 0, end = buf.length - 1;i3 < end; i3 += 2) {
            const byte = buf[i3];
            buf[i3] = buf[i3 + 1];
            buf[i3 + 1] = byte;
          }
          return this.writeBuffer(buf);
        default:
          if (iconv) {
            return this.writeBuffer(iconv.encode(string7, encoding));
          } else {
            throw new Error("Install iconv-lite to enable additional string encodings.");
          }
      }
    }
    writeUInt24BE(val) {
      this.ensure(3);
      this.buffer[this.bufferOffset++] = val >>> 16 & 255;
      this.buffer[this.bufferOffset++] = val >>> 8 & 255;
      this.buffer[this.bufferOffset++] = val & 255;
      return this.pos += 3;
    }
    writeUInt24LE(val) {
      this.ensure(3);
      this.buffer[this.bufferOffset++] = val & 255;
      this.buffer[this.bufferOffset++] = val >>> 8 & 255;
      this.buffer[this.bufferOffset++] = val >>> 16 & 255;
      return this.pos += 3;
    }
    writeInt24BE(val) {
      if (val >= 0) {
        return this.writeUInt24BE(val);
      } else {
        return this.writeUInt24BE(val + 16777215 + 1);
      }
    }
    writeInt24LE(val) {
      if (val >= 0) {
        return this.writeUInt24LE(val);
      } else {
        return this.writeUInt24LE(val + 16777215 + 1);
      }
    }
    fill(val, length) {
      if (length < this.buffer.length) {
        this.ensure(length);
        this.buffer.fill(val, this.bufferOffset, this.bufferOffset + length);
        this.bufferOffset += length;
        return this.pos += length;
      } else {
        const buf = Buffer.alloc(length);
        buf.fill(val);
        return this.writeBuffer(buf);
      }
    }
    end() {
      this.flush();
      return this.push(null);
    }
  }
  for (let key in Buffer.prototype) {
    if (key.slice(0, 5) === "write") {
      const bytes = +DecodeStream.TYPES[key.replace(/write|[BL]E/g, "")];
      EncodeStream.prototype[key] = function(value15) {
        this.ensure(bytes);
        this.buffer[key](value15, this.bufferOffset);
        this.bufferOffset += bytes;
        return this.pos += bytes;
      };
    }
  }
  module.exports = EncodeStream;
});

// node_modules/restructure/src/Number.js
var require_Number = __commonJS((exports) => {
  var DecodeStream = require_DecodeStream();

  class NumberT {
    constructor(type47, endian = "BE") {
      this.type = type47;
      this.endian = endian;
      this.fn = this.type;
      if (this.type[this.type.length - 1] !== "8") {
        this.fn += this.endian;
      }
    }
    size() {
      return DecodeStream.TYPES[this.type];
    }
    decode(stream) {
      return stream[`read${this.fn}`]();
    }
    encode(stream, val) {
      return stream[`write${this.fn}`](val);
    }
  }
  exports.Number = NumberT;
  exports.uint8 = new NumberT("UInt8");
  exports.uint16be = exports.uint16 = new NumberT("UInt16", "BE");
  exports.uint16le = new NumberT("UInt16", "LE");
  exports.uint24be = exports.uint24 = new NumberT("UInt24", "BE");
  exports.uint24le = new NumberT("UInt24", "LE");
  exports.uint32be = exports.uint32 = new NumberT("UInt32", "BE");
  exports.uint32le = new NumberT("UInt32", "LE");
  exports.int8 = new NumberT("Int8");
  exports.int16be = exports.int16 = new NumberT("Int16", "BE");
  exports.int16le = new NumberT("Int16", "LE");
  exports.int24be = exports.int24 = new NumberT("Int24", "BE");
  exports.int24le = new NumberT("Int24", "LE");
  exports.int32be = exports.int32 = new NumberT("Int32", "BE");
  exports.int32le = new NumberT("Int32", "LE");
  exports.floatbe = exports.float = new NumberT("Float", "BE");
  exports.floatle = new NumberT("Float", "LE");
  exports.doublebe = exports.double = new NumberT("Double", "BE");
  exports.doublele = new NumberT("Double", "LE");

  class Fixed extends NumberT {
    constructor(size, endian, fracBits = size >> 1) {
      super(`Int${size}`, endian);
      this._point = 1 << fracBits;
    }
    decode(stream) {
      return super.decode(stream) / this._point;
    }
    encode(stream, val) {
      return super.encode(stream, val * this._point | 0);
    }
  }
  exports.Fixed = Fixed;
  exports.fixed16be = exports.fixed16 = new Fixed(16, "BE");
  exports.fixed16le = new Fixed(16, "LE");
  exports.fixed32be = exports.fixed32 = new Fixed(32, "BE");
  exports.fixed32le = new Fixed(32, "LE");
});

// node_modules/restructure/src/utils.js
var require_utils = __commonJS((exports) => {
  var { Number: NumberT } = require_Number();
  exports.resolveLength = function(length, stream, parent) {
    let res;
    if (typeof length === "number") {
      res = length;
    } else if (typeof length === "function") {
      res = length.call(parent, parent);
    } else if (parent && typeof length === "string") {
      res = parent[length];
    } else if (stream && length instanceof NumberT) {
      res = length.decode(stream);
    }
    if (isNaN(res)) {
      throw new Error("Not a fixed size");
    }
    return res;
  };

  class PropertyDescriptor {
    constructor(opts = {}) {
      this.enumerable = true;
      this.configurable = true;
      for (let key in opts) {
        const val = opts[key];
        this[key] = val;
      }
    }
  }
  exports.PropertyDescriptor = PropertyDescriptor;
});

// node_modules/restructure/src/Array.js
var require_Array = __commonJS((exports, module) => {
  var { Number: NumberT } = require_Number();
  var utils = require_utils();

  class ArrayT {
    constructor(type47, length, lengthType = "count") {
      this.type = type47;
      this.length = length;
      this.lengthType = lengthType;
    }
    decode(stream, parent) {
      let length;
      const { pos } = stream;
      const res = [];
      let ctx = parent;
      if (this.length != null) {
        length = utils.resolveLength(this.length, stream, parent);
      }
      if (this.length instanceof NumberT) {
        Object.defineProperties(res, {
          parent: { value: parent },
          _startOffset: { value: pos },
          _currentOffset: { value: 0, writable: true },
          _length: { value: length }
        });
        ctx = res;
      }
      if (length == null || this.lengthType === "bytes") {
        const target = length != null ? stream.pos + length : (parent != null ? parent._length : undefined) ? parent._startOffset + parent._length : stream.length;
        while (stream.pos < target) {
          res.push(this.type.decode(stream, ctx));
        }
      } else {
        for (let i3 = 0, end = length;i3 < end; i3++) {
          res.push(this.type.decode(stream, ctx));
        }
      }
      return res;
    }
    size(array5, ctx) {
      if (!array5) {
        return this.type.size(null, ctx) * utils.resolveLength(this.length, null, ctx);
      }
      let size = 0;
      if (this.length instanceof NumberT) {
        size += this.length.size();
        ctx = { parent: ctx };
      }
      for (let item of array5) {
        size += this.type.size(item, ctx);
      }
      return size;
    }
    encode(stream, array5, parent) {
      let ctx = parent;
      if (this.length instanceof NumberT) {
        ctx = {
          pointers: [],
          startOffset: stream.pos,
          parent
        };
        ctx.pointerOffset = stream.pos + this.size(array5, ctx);
        this.length.encode(stream, array5.length);
      }
      for (let item of array5) {
        this.type.encode(stream, item, ctx);
      }
      if (this.length instanceof NumberT) {
        let i3 = 0;
        while (i3 < ctx.pointers.length) {
          const ptr = ctx.pointers[i3++];
          ptr.type.encode(stream, ptr.val);
        }
      }
    }
  }
  module.exports = ArrayT;
});

// node_modules/restructure/src/LazyArray.js
var require_LazyArray = __commonJS((exports, module) => {
  var ArrayT = require_Array();
  var { Number: NumberT } = require_Number();
  var utils = require_utils();
  var { inspect } = import.meta.require("util");

  class LazyArrayT extends ArrayT {
    decode(stream, parent) {
      const { pos } = stream;
      const length = utils.resolveLength(this.length, stream, parent);
      if (this.length instanceof NumberT) {
        parent = {
          parent,
          _startOffset: pos,
          _currentOffset: 0,
          _length: length
        };
      }
      const res = new LazyArray(this.type, length, stream, parent);
      stream.pos += length * this.type.size(null, parent);
      return res;
    }
    size(val, ctx) {
      if (val instanceof LazyArray) {
        val = val.toArray();
      }
      return super.size(val, ctx);
    }
    encode(stream, val, ctx) {
      if (val instanceof LazyArray) {
        val = val.toArray();
      }
      return super.encode(stream, val, ctx);
    }
  }

  class LazyArray {
    constructor(type47, length, stream, ctx) {
      this.type = type47;
      this.length = length;
      this.stream = stream;
      this.ctx = ctx;
      this.base = this.stream.pos;
      this.items = [];
    }
    get(index) {
      if (index < 0 || index >= this.length) {
        return;
      }
      if (this.items[index] == null) {
        const { pos } = this.stream;
        this.stream.pos = this.base + this.type.size(null, this.ctx) * index;
        this.items[index] = this.type.decode(this.stream, this.ctx);
        this.stream.pos = pos;
      }
      return this.items[index];
    }
    toArray() {
      const result = [];
      for (let i3 = 0, end = this.length;i3 < end; i3++) {
        result.push(this.get(i3));
      }
      return result;
    }
    inspect() {
      return inspect(this.toArray());
    }
  }
  module.exports = LazyArrayT;
});

// node_modules/restructure/src/Bitfield.js
var require_Bitfield = __commonJS((exports, module) => {
  class Bitfield {
    constructor(type47, flags = []) {
      this.type = type47;
      this.flags = flags;
    }
    decode(stream) {
      const val = this.type.decode(stream);
      const res = {};
      for (let i3 = 0;i3 < this.flags.length; i3++) {
        const flag = this.flags[i3];
        if (flag != null) {
          res[flag] = !!(val & 1 << i3);
        }
      }
      return res;
    }
    size() {
      return this.type.size();
    }
    encode(stream, keys) {
      let val = 0;
      for (let i3 = 0;i3 < this.flags.length; i3++) {
        const flag = this.flags[i3];
        if (flag != null) {
          if (keys[flag]) {
            val |= 1 << i3;
          }
        }
      }
      return this.type.encode(stream, val);
    }
  }
  module.exports = Bitfield;
});

// node_modules/restructure/src/Boolean.js
var require_Boolean = __commonJS((exports, module) => {
  class BooleanT {
    constructor(type47) {
      this.type = type47;
    }
    decode(stream, parent) {
      return !!this.type.decode(stream, parent);
    }
    size(val, parent) {
      return this.type.size(val, parent);
    }
    encode(stream, val, parent) {
      return this.type.encode(stream, +val, parent);
    }
  }
  module.exports = BooleanT;
});

// node_modules/restructure/src/Buffer.js
var require_Buffer = __commonJS((exports, module) => {
  var utils = require_utils();
  var { Number: NumberT } = require_Number();

  class BufferT {
    constructor(length) {
      this.length = length;
    }
    decode(stream, parent) {
      const length = utils.resolveLength(this.length, stream, parent);
      return stream.readBuffer(length);
    }
    size(val, parent) {
      if (!val) {
        return utils.resolveLength(this.length, null, parent);
      }
      return val.length;
    }
    encode(stream, buf, parent) {
      if (this.length instanceof NumberT) {
        this.length.encode(stream, buf.length);
      }
      return stream.writeBuffer(buf);
    }
  }
  module.exports = BufferT;
});

// node_modules/restructure/src/Enum.js
var require_Enum = __commonJS((exports, module) => {
  class Enum2 {
    constructor(type47, options = []) {
      this.type = type47;
      this.options = options;
    }
    decode(stream) {
      const index = this.type.decode(stream);
      return this.options[index] || index;
    }
    size() {
      return this.type.size();
    }
    encode(stream, val) {
      const index = this.options.indexOf(val);
      if (index === -1) {
        throw new Error(`Unknown option in enum: ${val}`);
      }
      return this.type.encode(stream, index);
    }
  }
  module.exports = Enum2;
});

// node_modules/restructure/src/Optional.js
var require_Optional = __commonJS((exports, module) => {
  class Optional2 {
    constructor(type47, condition = true) {
      this.type = type47;
      this.condition = condition;
    }
    decode(stream, parent) {
      let { condition } = this;
      if (typeof condition === "function") {
        condition = condition.call(parent, parent);
      }
      if (condition) {
        return this.type.decode(stream, parent);
      }
    }
    size(val, parent) {
      let { condition } = this;
      if (typeof condition === "function") {
        condition = condition.call(parent, parent);
      }
      if (condition) {
        return this.type.size(val, parent);
      } else {
        return 0;
      }
    }
    encode(stream, val, parent) {
      let { condition } = this;
      if (typeof condition === "function") {
        condition = condition.call(parent, parent);
      }
      if (condition) {
        return this.type.encode(stream, val, parent);
      }
    }
  }
  module.exports = Optional2;
});

// node_modules/restructure/src/Reserved.js
var require_Reserved = __commonJS((exports, module) => {
  var utils = require_utils();

  class Reserved {
    constructor(type47, count = 1) {
      this.type = type47;
      this.count = count;
    }
    decode(stream, parent) {
      stream.pos += this.size(null, parent);
      return;
    }
    size(data, parent) {
      const count = utils.resolveLength(this.count, null, parent);
      return this.type.size() * count;
    }
    encode(stream, val, parent) {
      return stream.fill(0, this.size(val, parent));
    }
  }
  module.exports = Reserved;
});

// node_modules/restructure/src/String.js
var require_String = __commonJS((exports, module) => {
  var { Number: NumberT } = require_Number();
  var utils = require_utils();

  class StringT {
    constructor(length, encoding = "ascii") {
      this.length = length;
      this.encoding = encoding;
    }
    decode(stream, parent) {
      let length, pos;
      if (this.length != null) {
        length = utils.resolveLength(this.length, stream, parent);
      } else {
        let buffer;
        ({ buffer, length, pos } = stream);
        while (pos < length && buffer[pos] !== 0) {
          ++pos;
        }
        length = pos - stream.pos;
      }
      let { encoding } = this;
      if (typeof encoding === "function") {
        encoding = encoding.call(parent, parent) || "ascii";
      }
      const string7 = stream.readString(length, encoding);
      if (this.length == null && stream.pos < stream.length) {
        stream.pos++;
      }
      return string7;
    }
    size(val, parent) {
      if (!val) {
        return utils.resolveLength(this.length, null, parent);
      }
      let { encoding } = this;
      if (typeof encoding === "function") {
        encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || "ascii";
      }
      if (encoding === "utf16be") {
        encoding = "utf16le";
      }
      let size = Buffer.byteLength(val, encoding);
      if (this.length instanceof NumberT) {
        size += this.length.size();
      }
      if (this.length == null) {
        size++;
      }
      return size;
    }
    encode(stream, val, parent) {
      let { encoding } = this;
      if (typeof encoding === "function") {
        encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || "ascii";
      }
      if (this.length instanceof NumberT) {
        this.length.encode(stream, Buffer.byteLength(val, encoding));
      }
      stream.writeString(val, encoding);
      if (this.length == null) {
        return stream.writeUInt8(0);
      }
    }
  }
  module.exports = StringT;
});

// node_modules/restructure/src/Struct.js
var require_Struct = __commonJS((exports, module) => {
  var utils = require_utils();

  class Struct {
    constructor(fields = {}) {
      this.fields = fields;
    }
    decode(stream, parent, length = 0) {
      const res = this._setup(stream, parent, length);
      this._parseFields(stream, res, this.fields);
      if (this.process != null) {
        this.process.call(res, stream);
      }
      return res;
    }
    _setup(stream, parent, length) {
      const res = {};
      Object.defineProperties(res, {
        parent: { value: parent },
        _startOffset: { value: stream.pos },
        _currentOffset: { value: 0, writable: true },
        _length: { value: length }
      });
      return res;
    }
    _parseFields(stream, res, fields) {
      for (let key in fields) {
        var val;
        const type47 = fields[key];
        if (typeof type47 === "function") {
          val = type47.call(res, res);
        } else {
          val = type47.decode(stream, res);
        }
        if (val !== undefined) {
          if (val instanceof utils.PropertyDescriptor) {
            Object.defineProperty(res, key, val);
          } else {
            res[key] = val;
          }
        }
        res._currentOffset = stream.pos - res._startOffset;
      }
    }
    size(val, parent, includePointers) {
      if (val == null) {
        val = {};
      }
      if (includePointers == null) {
        includePointers = true;
      }
      const ctx = {
        parent,
        val,
        pointerSize: 0
      };
      let size = 0;
      for (let key in this.fields) {
        const type47 = this.fields[key];
        if (type47.size != null) {
          size += type47.size(val[key], ctx);
        }
      }
      if (includePointers) {
        size += ctx.pointerSize;
      }
      return size;
    }
    encode(stream, val, parent) {
      let type47;
      if (this.preEncode != null) {
        this.preEncode.call(val, stream);
      }
      const ctx = {
        pointers: [],
        startOffset: stream.pos,
        parent,
        val,
        pointerSize: 0
      };
      ctx.pointerOffset = stream.pos + this.size(val, ctx, false);
      for (let key in this.fields) {
        type47 = this.fields[key];
        if (type47.encode != null) {
          type47.encode(stream, val[key], ctx);
        }
      }
      let i3 = 0;
      while (i3 < ctx.pointers.length) {
        const ptr = ctx.pointers[i3++];
        ptr.type.encode(stream, ptr.val, ptr.parent);
      }
    }
  }
  module.exports = Struct;
});

// node_modules/restructure/src/VersionedStruct.js
var require_VersionedStruct = __commonJS((exports, module) => {
  var Struct = require_Struct();
  var getPath = (object13, pathArray) => {
    return pathArray.reduce((prevObj, key) => prevObj && prevObj[key], object13);
  };

  class VersionedStruct extends Struct {
    constructor(type47, versions = {}) {
      super();
      this.type = type47;
      this.versions = versions;
      if (typeof type47 === "string") {
        this.versionPath = type47.split(".");
      }
    }
    decode(stream, parent, length = 0) {
      const res = this._setup(stream, parent, length);
      if (typeof this.type === "string") {
        res.version = getPath(parent, this.versionPath);
      } else {
        res.version = this.type.decode(stream);
      }
      if (this.versions.header) {
        this._parseFields(stream, res, this.versions.header);
      }
      const fields = this.versions[res.version];
      if (fields == null) {
        throw new Error(`Unknown version ${res.version}`);
      }
      if (fields instanceof VersionedStruct) {
        return fields.decode(stream, parent);
      }
      this._parseFields(stream, res, fields);
      if (this.process != null) {
        this.process.call(res, stream);
      }
      return res;
    }
    size(val, parent, includePointers = true) {
      let key, type47;
      if (!val) {
        throw new Error("Not a fixed size");
      }
      const ctx = {
        parent,
        val,
        pointerSize: 0
      };
      let size = 0;
      if (typeof this.type !== "string") {
        size += this.type.size(val.version, ctx);
      }
      if (this.versions.header) {
        for (key in this.versions.header) {
          type47 = this.versions.header[key];
          if (type47.size != null) {
            size += type47.size(val[key], ctx);
          }
        }
      }
      const fields = this.versions[val.version];
      if (fields == null) {
        throw new Error(`Unknown version ${val.version}`);
      }
      for (key in fields) {
        type47 = fields[key];
        if (type47.size != null) {
          size += type47.size(val[key], ctx);
        }
      }
      if (includePointers) {
        size += ctx.pointerSize;
      }
      return size;
    }
    encode(stream, val, parent) {
      let key, type47;
      if (this.preEncode != null) {
        this.preEncode.call(val, stream);
      }
      const ctx = {
        pointers: [],
        startOffset: stream.pos,
        parent,
        val,
        pointerSize: 0
      };
      ctx.pointerOffset = stream.pos + this.size(val, ctx, false);
      if (typeof this.type !== "string") {
        this.type.encode(stream, val.version);
      }
      if (this.versions.header) {
        for (key in this.versions.header) {
          type47 = this.versions.header[key];
          if (type47.encode != null) {
            type47.encode(stream, val[key], ctx);
          }
        }
      }
      const fields = this.versions[val.version];
      for (key in fields) {
        type47 = fields[key];
        if (type47.encode != null) {
          type47.encode(stream, val[key], ctx);
        }
      }
      let i3 = 0;
      while (i3 < ctx.pointers.length) {
        const ptr = ctx.pointers[i3++];
        ptr.type.encode(stream, ptr.val, ptr.parent);
      }
    }
  }
  module.exports = VersionedStruct;
});

// node_modules/restructure/src/Pointer.js
var require_Pointer = __commonJS((exports) => {
  var utils = require_utils();

  class Pointer {
    constructor(offsetType, type47, options = {}) {
      this.offsetType = offsetType;
      this.type = type47;
      this.options = options;
      if (this.type === "void") {
        this.type = null;
      }
      if (this.options.type == null) {
        this.options.type = "local";
      }
      if (this.options.allowNull == null) {
        this.options.allowNull = true;
      }
      if (this.options.nullValue == null) {
        this.options.nullValue = 0;
      }
      if (this.options.lazy == null) {
        this.options.lazy = false;
      }
      if (this.options.relativeTo) {
        if (typeof this.options.relativeTo !== "function") {
          throw new Error("relativeTo option must be a function");
        }
        this.relativeToGetter = options.relativeTo;
      }
    }
    decode(stream, ctx) {
      const offset = this.offsetType.decode(stream, ctx);
      if (offset === this.options.nullValue && this.options.allowNull) {
        return null;
      }
      let relative;
      switch (this.options.type) {
        case "local":
          relative = ctx._startOffset;
          break;
        case "immediate":
          relative = stream.pos - this.offsetType.size();
          break;
        case "parent":
          relative = ctx.parent._startOffset;
          break;
        default:
          var c3 = ctx;
          while (c3.parent) {
            c3 = c3.parent;
          }
          relative = c3._startOffset || 0;
      }
      if (this.options.relativeTo) {
        relative += this.relativeToGetter(ctx);
      }
      const ptr = offset + relative;
      if (this.type != null) {
        let val = null;
        const decodeValue = () => {
          if (val != null) {
            return val;
          }
          const { pos } = stream;
          stream.pos = ptr;
          val = this.type.decode(stream, ctx);
          stream.pos = pos;
          return val;
        };
        if (this.options.lazy) {
          return new utils.PropertyDescriptor({
            get: decodeValue
          });
        }
        return decodeValue();
      } else {
        return ptr;
      }
    }
    size(val, ctx) {
      const parent = ctx;
      switch (this.options.type) {
        case "local":
        case "immediate":
          break;
        case "parent":
          ctx = ctx.parent;
          break;
        default:
          while (ctx.parent) {
            ctx = ctx.parent;
          }
      }
      let { type: type47 } = this;
      if (type47 == null) {
        if (!(val instanceof VoidPointer)) {
          throw new Error("Must be a VoidPointer");
        }
        ({ type: type47 } = val);
        val = val.value;
      }
      if (val && ctx) {
        ctx.pointerSize += type47.size(val, parent);
      }
      return this.offsetType.size();
    }
    encode(stream, val, ctx) {
      let relative;
      const parent = ctx;
      if (val == null) {
        this.offsetType.encode(stream, this.options.nullValue);
        return;
      }
      switch (this.options.type) {
        case "local":
          relative = ctx.startOffset;
          break;
        case "immediate":
          relative = stream.pos + this.offsetType.size(val, parent);
          break;
        case "parent":
          ctx = ctx.parent;
          relative = ctx.startOffset;
          break;
        default:
          relative = 0;
          while (ctx.parent) {
            ctx = ctx.parent;
          }
      }
      if (this.options.relativeTo) {
        relative += this.relativeToGetter(parent.val);
      }
      this.offsetType.encode(stream, ctx.pointerOffset - relative);
      let { type: type47 } = this;
      if (type47 == null) {
        if (!(val instanceof VoidPointer)) {
          throw new Error("Must be a VoidPointer");
        }
        ({ type: type47 } = val);
        val = val.value;
      }
      ctx.pointers.push({
        type: type47,
        val,
        parent
      });
      return ctx.pointerOffset += type47.size(val, parent);
    }
  }

  class VoidPointer {
    constructor(type47, value15) {
      this.type = type47;
      this.value = value15;
    }
  }
  exports.Pointer = Pointer;
  exports.VoidPointer = VoidPointer;
});

// node_modules/restructure/index.js
var require_restructure = __commonJS((exports) => {
  exports.EncodeStream = require_EncodeStream();
  exports.DecodeStream = require_DecodeStream();
  exports.Array = require_Array();
  exports.LazyArray = require_LazyArray();
  exports.Bitfield = require_Bitfield();
  exports.Boolean = require_Boolean();
  exports.Buffer = require_Buffer();
  exports.Enum = require_Enum();
  exports.Optional = require_Optional();
  exports.Reserved = require_Reserved();
  exports.String = require_String();
  exports.Struct = require_Struct();
  exports.VersionedStruct = require_VersionedStruct();
  var utils = require_utils();
  var NumberT = require_Number();
  var Pointer = require_Pointer();
  Object.assign(exports, utils, NumberT, Pointer);
});

// node_modules/object-keys/isArguments.js
var require_isArguments = __commonJS((exports, module) => {
  var toStr = Object.prototype.toString;
  module.exports = function isArguments(value15) {
    var str = toStr.call(value15);
    var isArgs = str === "[object Arguments]";
    if (!isArgs) {
      isArgs = str !== "[object Array]" && value15 !== null && typeof value15 === "object" && typeof value15.length === "number" && value15.length >= 0 && toStr.call(value15.callee) === "[object Function]";
    }
    return isArgs;
  };
});

// node_modules/object-keys/implementation.js
var require_implementation = __commonJS((exports, module) => {
  var keysShim;
  if (!Object.keys) {
    has2 = Object.prototype.hasOwnProperty;
    toStr = Object.prototype.toString;
    isArgs = require_isArguments();
    isEnumerable = Object.prototype.propertyIsEnumerable;
    hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
    hasProtoEnumBug = isEnumerable.call(function() {
    }, "prototype");
    dontEnums = [
      "toString",
      "toLocaleString",
      "valueOf",
      "hasOwnProperty",
      "isPrototypeOf",
      "propertyIsEnumerable",
      "constructor"
    ];
    equalsConstructorPrototype = function(o2) {
      var ctor = o2.constructor;
      return ctor && ctor.prototype === o2;
    };
    excludedKeys = {
      $applicationCache: true,
      $console: true,
      $external: true,
      $frame: true,
      $frameElement: true,
      $frames: true,
      $innerHeight: true,
      $innerWidth: true,
      $onmozfullscreenchange: true,
      $onmozfullscreenerror: true,
      $outerHeight: true,
      $outerWidth: true,
      $pageXOffset: true,
      $pageYOffset: true,
      $parent: true,
      $scrollLeft: true,
      $scrollTop: true,
      $scrollX: true,
      $scrollY: true,
      $self: true,
      $webkitIndexedDB: true,
      $webkitStorageInfo: true,
      $window: true
    };
    hasAutomationEqualityBug = function() {
      if (typeof window === "undefined") {
        return false;
      }
      for (var k in window) {
        try {
          if (!excludedKeys["$" + k] && has2.call(window, k) && window[k] !== null && typeof window[k] === "object") {
            try {
              equalsConstructorPrototype(window[k]);
            } catch (e) {
              return true;
            }
          }
        } catch (e) {
          return true;
        }
      }
      return false;
    }();
    equalsConstructorPrototypeIfNotBuggy = function(o2) {
      if (typeof window === "undefined" || !hasAutomationEqualityBug) {
        return equalsConstructorPrototype(o2);
      }
      try {
        return equalsConstructorPrototype(o2);
      } catch (e) {
        return false;
      }
    };
    keysShim = function keys(object13) {
      var isObject = object13 !== null && typeof object13 === "object";
      var isFunction = toStr.call(object13) === "[object Function]";
      var isArguments = isArgs(object13);
      var isString = isObject && toStr.call(object13) === "[object String]";
      var theKeys = [];
      if (!isObject && !isFunction && !isArguments) {
        throw new TypeError("Object.keys called on a non-object");
      }
      var skipProto = hasProtoEnumBug && isFunction;
      if (isString && object13.length > 0 && !has2.call(object13, 0)) {
        for (var i3 = 0;i3 < object13.length; ++i3) {
          theKeys.push(String(i3));
        }
      }
      if (isArguments && object13.length > 0) {
        for (var j = 0;j < object13.length; ++j) {
          theKeys.push(String(j));
        }
      } else {
        for (var name in object13) {
          if (!(skipProto && name === "prototype") && has2.call(object13, name)) {
            theKeys.push(String(name));
          }
        }
      }
      if (hasDontEnumBug) {
        var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object13);
        for (var k = 0;k < dontEnums.length; ++k) {
          if (!(skipConstructor && dontEnums[k] === "constructor") && has2.call(object13, dontEnums[k])) {
            theKeys.push(dontEnums[k]);
          }
        }
      }
      return theKeys;
    };
  }
  var has2;
  var toStr;
  var isArgs;
  var isEnumerable;
  var hasDontEnumBug;
  var hasProtoEnumBug;
  var dontEnums;
  var equalsConstructorPrototype;
  var excludedKeys;
  var hasAutomationEqualityBug;
  var equalsConstructorPrototypeIfNotBuggy;
  module.exports = keysShim;
});

// node_modules/object-keys/index.js
var require_object_keys = __commonJS((exports, module) => {
  var slice = Array.prototype.slice;
  var isArgs = require_isArguments();
  var origKeys = Object.keys;
  var keysShim = origKeys ? function keys(o2) {
    return origKeys(o2);
  } : require_implementation();
  var originalKeys = Object.keys;
  keysShim.shim = function shimObjectKeys() {
    if (Object.keys) {
      var keysWorksWithArguments = function() {
        var args = Object.keys(arguments);
        return args && args.length === arguments.length;
      }(1, 2);
      if (!keysWorksWithArguments) {
        Object.keys = function keys(object13) {
          if (isArgs(object13)) {
            return originalKeys(slice.call(object13));
          }
          return originalKeys(object13);
        };
      }
    } else {
      Object.keys = keysShim;
    }
    return Object.keys || keysShim;
  };
  module.exports = keysShim;
});

// node_modules/es-errors/index.js
var require_es_errors = __commonJS((exports, module) => {
  module.exports = Error;
});

// node_modules/es-errors/eval.js
var require_eval = __commonJS((exports, module) => {
  module.exports = EvalError;
});

// node_modules/es-errors/range.js
var require_range = __commonJS((exports, module) => {
  module.exports = RangeError;
});

// node_modules/es-errors/ref.js
var require_ref = __commonJS((exports, module) => {
  module.exports = ReferenceError;
});

// node_modules/es-errors/syntax.js
var require_syntax = __commonJS((exports, module) => {
  module.exports = SyntaxError;
});

// node_modules/es-errors/type.js
var require_type = __commonJS((exports, module) => {
  module.exports = TypeError;
});

// node_modules/es-errors/uri.js
var require_uri = __commonJS((exports, module) => {
  module.exports = URIError;
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS((exports, module) => {
  module.exports = function hasSymbols() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
      return false;
    }
    if (typeof Symbol.iterator === "symbol") {
      return true;
    }
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") {
      return false;
    }
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
      return false;
    }
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
      return false;
    }
    var symVal = 42;
    obj[sym] = symVal;
    for (sym in obj) {
      return false;
    }
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
      return false;
    }
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }
    return true;
  };
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS((exports, module) => {
  var origSymbol = typeof Symbol !== "undefined" && Symbol;
  var hasSymbolSham = require_shams();
  module.exports = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") {
      return false;
    }
    if (typeof Symbol !== "function") {
      return false;
    }
    if (typeof origSymbol("foo") !== "symbol") {
      return false;
    }
    if (typeof Symbol("bar") !== "symbol") {
      return false;
    }
    return hasSymbolSham();
  };
});

// node_modules/has-proto/index.js
var require_has_proto = __commonJS((exports, module) => {
  var test = {
    __proto__: null,
    foo: {}
  };
  var $Object = Object;
  module.exports = function hasProto() {
    return { __proto__: test }.foo === test.foo && !(test instanceof $Object);
  };
});

// node_modules/function-bind/implementation.js
var require_implementation2 = __commonJS((exports, module) => {
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var toStr = Object.prototype.toString;
  var max = Math.max;
  var funcType = "[object Function]";
  var concatty = function concatty(a, b) {
    var arr = [];
    for (var i3 = 0;i3 < a.length; i3 += 1) {
      arr[i3] = a[i3];
    }
    for (var j = 0;j < b.length; j += 1) {
      arr[j + a.length] = b[j];
    }
    return arr;
  };
  var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i3 = offset || 0, j = 0;i3 < arrLike.length; i3 += 1, j += 1) {
      arr[j] = arrLike[i3];
    }
    return arr;
  };
  var joiny = function(arr, joiner) {
    var str = "";
    for (var i3 = 0;i3 < arr.length; i3 += 1) {
      str += arr[i3];
      if (i3 + 1 < arr.length) {
        str += joiner;
      }
    }
    return str;
  };
  module.exports = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.apply(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(this, concatty(args, arguments));
        if (Object(result) === result) {
          return result;
        }
        return this;
      }
      return target.apply(that, concatty(args, arguments));
    };
    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i3 = 0;i3 < boundLength; i3++) {
      boundArgs[i3] = "$" + i3;
    }
    bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty() {
      };
      Empty.prototype = target.prototype;
      bound.prototype = new Empty;
      Empty.prototype = null;
    }
    return bound;
  };
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS((exports, module) => {
  var implementation = require_implementation2();
  module.exports = Function.prototype.bind || implementation;
});

// node_modules/hasown/index.js
var require_hasown = __commonJS((exports, module) => {
  var call = Function.prototype.call;
  var $hasOwn = Object.prototype.hasOwnProperty;
  var bind = require_function_bind();
  module.exports = bind.call(call, $hasOwn);
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS((exports, module) => {
  var undefined6;
  var $Error = require_es_errors();
  var $EvalError = require_eval();
  var $RangeError = require_range();
  var $ReferenceError = require_ref();
  var $SyntaxError = require_syntax();
  var $TypeError = require_type();
  var $URIError = require_uri();
  var $Function = Function;
  var getEvalledConstructor = function(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {
    }
  };
  var $gOPD = Object.getOwnPropertyDescriptor;
  if ($gOPD) {
    try {
      $gOPD({}, "");
    } catch (e) {
      $gOPD = null;
    }
  }
  var throwTypeError = function() {
    throw new $TypeError;
  };
  var ThrowTypeError = $gOPD ? function() {
    try {
      arguments.callee;
      return throwTypeError;
    } catch (calleeThrows) {
      try {
        return $gOPD(arguments, "callee").get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  var hasSymbols = require_has_symbols()();
  var hasProto = require_has_proto()();
  var getProto = Object.getPrototypeOf || (hasProto ? function(x3) {
    return x3.__proto__;
  } : null);
  var needsEval = {};
  var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined6 : getProto(Uint8Array);
  var INTRINSICS = {
    __proto__: null,
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined6 : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined6 : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined6,
    "%AsyncFromSyncIteratorPrototype%": undefined6,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined6 : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined6 : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined6 : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined6 : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined6 : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": $Error,
    "%eval%": eval,
    "%EvalError%": $EvalError,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined6 : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined6 : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined6 : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined6 : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined6 : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined6 : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined6,
    "%JSON%": typeof JSON === "object" ? JSON : undefined6,
    "%Map%": typeof Map === "undefined" ? undefined6 : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined6 : getProto(new Map()[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined6 : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined6 : Proxy,
    "%RangeError%": $RangeError,
    "%ReferenceError%": $ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined6 : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined6 : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined6 : getProto(new Set()[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined6 : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined6,
    "%Symbol%": hasSymbols ? Symbol : undefined6,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined6 : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined6 : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined6 : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined6 : Uint32Array,
    "%URIError%": $URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined6 : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined6 : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined6 : WeakSet
  };
  if (getProto) {
    try {
      null.error;
    } catch (e) {
      errorProto = getProto(getProto(e));
      INTRINSICS["%Error.prototype%"] = errorProto;
    }
  }
  var errorProto;
  var doEval = function doEval(name) {
    var value15;
    if (name === "%AsyncFunction%") {
      value15 = getEvalledConstructor("async function () {}");
    } else if (name === "%GeneratorFunction%") {
      value15 = getEvalledConstructor("function* () {}");
    } else if (name === "%AsyncGeneratorFunction%") {
      value15 = getEvalledConstructor("async function* () {}");
    } else if (name === "%AsyncGenerator%") {
      var fn = doEval("%AsyncGeneratorFunction%");
      if (fn) {
        value15 = fn.prototype;
      }
    } else if (name === "%AsyncIteratorPrototype%") {
      var gen = doEval("%AsyncGenerator%");
      if (gen && getProto) {
        value15 = getProto(gen.prototype);
      }
    }
    INTRINSICS[name] = value15;
    return value15;
  };
  var LEGACY_ALIASES = {
    __proto__: null,
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  };
  var bind = require_function_bind();
  var hasOwn = require_hasown();
  var $concat = bind.call(Function.call, Array.prototype.concat);
  var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
  var $replace = bind.call(Function.call, String.prototype.replace);
  var $strSlice = bind.call(Function.call, String.prototype.slice);
  var $exec = bind.call(Function.call, RegExp.prototype.exec);
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = function stringToPath(string7) {
    var first = $strSlice(string7, 0, 1);
    var last = $strSlice(string7, -1);
    if (first === "%" && last !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    } else if (last === "%" && first !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    }
    var result = [];
    $replace(string7, rePropName, function(match, number7, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number7 || match;
    });
    return result;
  };
  var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
      var value15 = INTRINSICS[intrinsicName];
      if (value15 === needsEval) {
        value15 = doEval(intrinsicName);
      }
      if (typeof value15 === "undefined" && !allowMissing) {
        throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
      }
      return {
        alias,
        name: intrinsicName,
        value: value15
      };
    }
    throw new $SyntaxError("intrinsic " + name + " does not exist!");
  };
  module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== "string" || name.length === 0) {
      throw new $TypeError("intrinsic name must be a non-empty string");
    }
    if (arguments.length > 1 && typeof allowMissing !== "boolean") {
      throw new $TypeError('"allowMissing" argument must be a boolean');
    }
    if ($exec(/^%?[^%]*%?$/, name) === null) {
      throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    }
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic9 = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic9.name;
    var value15 = intrinsic9.value;
    var skipFurtherCaching = false;
    var alias = intrinsic9.alias;
    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat([0, 1], alias));
    }
    for (var i3 = 1, isOwn = true;i3 < parts.length; i3 += 1) {
      var part = parts[i3];
      var first = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);
      if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
        throw new $SyntaxError("property names with quotes must have matching quotes");
      }
      if (part === "constructor" || !isOwn) {
        skipFurtherCaching = true;
      }
      intrinsicBaseName += "." + part;
      intrinsicRealName = "%" + intrinsicBaseName + "%";
      if (hasOwn(INTRINSICS, intrinsicRealName)) {
        value15 = INTRINSICS[intrinsicRealName];
      } else if (value15 != null) {
        if (!(part in value15)) {
          if (!allowMissing) {
            throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
          }
          return;
        }
        if ($gOPD && i3 + 1 >= parts.length) {
          var desc = $gOPD(value15, part);
          isOwn = !!desc;
          if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
            value15 = desc.get;
          } else {
            value15 = value15[part];
          }
        } else {
          isOwn = hasOwn(value15, part);
          value15 = value15[part];
        }
        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value15;
        }
      }
    }
    return value15;
  };
});

// node_modules/es-define-property/index.js
var require_es_define_property = __commonJS((exports, module) => {
  var GetIntrinsic = require_get_intrinsic();
  var $defineProperty = GetIntrinsic("%Object.defineProperty%", true) || false;
  if ($defineProperty) {
    try {
      $defineProperty({}, "a", { value: 1 });
    } catch (e) {
      $defineProperty = false;
    }
  }
  module.exports = $defineProperty;
});

// node_modules/gopd/index.js
var require_gopd = __commonJS((exports, module) => {
  var GetIntrinsic = require_get_intrinsic();
  var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
  if ($gOPD) {
    try {
      $gOPD([], "length");
    } catch (e) {
      $gOPD = null;
    }
  }
  module.exports = $gOPD;
});

// node_modules/define-data-property/index.js
var require_define_data_property = __commonJS((exports, module) => {
  var $defineProperty = require_es_define_property();
  var $SyntaxError = require_syntax();
  var $TypeError = require_type();
  var gopd = require_gopd();
  module.exports = function defineDataProperty(obj, property, value15) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") {
      throw new $TypeError("`obj` must be an object or a function`");
    }
    if (typeof property !== "string" && typeof property !== "symbol") {
      throw new $TypeError("`property` must be a string or a symbol`");
    }
    if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
      throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
      throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
      throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
      throw new $TypeError("`loose`, if provided, must be a boolean");
    }
    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
    var nonWritable = arguments.length > 4 ? arguments[4] : null;
    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
    var loose = arguments.length > 6 ? arguments[6] : false;
    var desc = !!gopd && gopd(obj, property);
    if ($defineProperty) {
      $defineProperty(obj, property, {
        configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
        enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
        value: value15,
        writable: nonWritable === null && desc ? desc.writable : !nonWritable
      });
    } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
      obj[property] = value15;
    } else {
      throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
    }
  };
});

// node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS((exports, module) => {
  var $defineProperty = require_es_define_property();
  var hasPropertyDescriptors = function hasPropertyDescriptors() {
    return !!$defineProperty;
  };
  hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    if (!$defineProperty) {
      return null;
    }
    try {
      return $defineProperty([], "length", { value: 1 }).length !== 1;
    } catch (e) {
      return true;
    }
  };
  module.exports = hasPropertyDescriptors;
});

// node_modules/define-properties/index.js
var require_define_properties = __commonJS((exports, module) => {
  var keys = require_object_keys();
  var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
  var toStr = Object.prototype.toString;
  var concat = Array.prototype.concat;
  var defineDataProperty = require_define_data_property();
  var isFunction = function(fn) {
    return typeof fn === "function" && toStr.call(fn) === "[object Function]";
  };
  var supportsDescriptors = require_has_property_descriptors()();
  var defineProperty = function(object13, name, value15, predicate) {
    if (name in object13) {
      if (predicate === true) {
        if (object13[name] === value15) {
          return;
        }
      } else if (!isFunction(predicate) || !predicate()) {
        return;
      }
    }
    if (supportsDescriptors) {
      defineDataProperty(object13, name, value15, true);
    } else {
      defineDataProperty(object13, name, value15);
    }
  };
  var defineProperties = function(object13, map3) {
    var predicates = arguments.length > 2 ? arguments[2] : {};
    var props = keys(map3);
    if (hasSymbols) {
      props = concat.call(props, Object.getOwnPropertySymbols(map3));
    }
    for (var i3 = 0;i3 < props.length; i3 += 1) {
      defineProperty(object13, props[i3], map3[props[i3]], predicates[props[i3]]);
    }
  };
  defineProperties.supportsDescriptors = !!supportsDescriptors;
  module.exports = defineProperties;
});

// node_modules/set-function-length/index.js
var require_set_function_length = __commonJS((exports, module) => {
  var GetIntrinsic = require_get_intrinsic();
  var define2 = require_define_data_property();
  var hasDescriptors = require_has_property_descriptors()();
  var gOPD = require_gopd();
  var $TypeError = require_type();
  var $floor = GetIntrinsic("%Math.floor%");
  module.exports = function setFunctionLength(fn, length) {
    if (typeof fn !== "function") {
      throw new $TypeError("`fn` is not a function");
    }
    if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
      throw new $TypeError("`length` must be a positive 32-bit integer");
    }
    var loose = arguments.length > 2 && !!arguments[2];
    var functionLengthIsConfigurable = true;
    var functionLengthIsWritable = true;
    if ("length" in fn && gOPD) {
      var desc = gOPD(fn, "length");
      if (desc && !desc.configurable) {
        functionLengthIsConfigurable = false;
      }
      if (desc && !desc.writable) {
        functionLengthIsWritable = false;
      }
    }
    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
      if (hasDescriptors) {
        define2(fn, "length", length, true, true);
      } else {
        define2(fn, "length", length);
      }
    }
    return fn;
  };
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS((exports, module) => {
  var bind = require_function_bind();
  var GetIntrinsic = require_get_intrinsic();
  var setFunctionLength = require_set_function_length();
  var $TypeError = require_type();
  var $apply = GetIntrinsic("%Function.prototype.apply%");
  var $call = GetIntrinsic("%Function.prototype.call%");
  var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
  var $defineProperty = require_es_define_property();
  var $max = GetIntrinsic("%Math.max%");
  module.exports = function callBind(originalFunction) {
    if (typeof originalFunction !== "function") {
      throw new $TypeError("a function is required");
    }
    var func = $reflectApply(bind, $call, arguments);
    return setFunctionLength(func, 1 + $max(0, originalFunction.length - (arguments.length - 1)), true);
  };
  var applyBind = function applyBind() {
    return $reflectApply(bind, $apply, arguments);
  };
  if ($defineProperty) {
    $defineProperty(module.exports, "apply", { value: applyBind });
  } else {
    module.exports.apply = applyBind;
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS((exports, module) => {
  var GetIntrinsic = require_get_intrinsic();
  var callBind = require_call_bind();
  var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
  module.exports = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic9 = GetIntrinsic(name, !!allowMissing);
    if (typeof intrinsic9 === "function" && $indexOf(name, ".prototype.") > -1) {
      return callBind(intrinsic9);
    }
    return intrinsic9;
  };
});

// node_modules/object.assign/implementation.js
var require_implementation3 = __commonJS((exports, module) => {
  var objectKeys = require_object_keys();
  var hasSymbols = require_shams()();
  var callBound = require_callBound();
  var toObject = Object;
  var $push = callBound("Array.prototype.push");
  var $propIsEnumerable = callBound("Object.prototype.propertyIsEnumerable");
  var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;
  module.exports = function assign(target, source1) {
    if (target == null) {
      throw new TypeError("target must be an object");
    }
    var to = toObject(target);
    if (arguments.length === 1) {
      return to;
    }
    for (var s3 = 1;s3 < arguments.length; ++s3) {
      var from = toObject(arguments[s3]);
      var keys = objectKeys(from);
      var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
      if (getSymbols) {
        var syms = getSymbols(from);
        for (var j = 0;j < syms.length; ++j) {
          var key = syms[j];
          if ($propIsEnumerable(from, key)) {
            $push(keys, key);
          }
        }
      }
      for (var i3 = 0;i3 < keys.length; ++i3) {
        var nextKey = keys[i3];
        if ($propIsEnumerable(from, nextKey)) {
          var propValue = from[nextKey];
          to[nextKey] = propValue;
        }
      }
    }
    return to;
  };
});

// node_modules/object.assign/polyfill.js
var require_polyfill = __commonJS((exports, module) => {
  var implementation = require_implementation3();
  var lacksProperEnumerationOrder = function() {
    if (!Object.assign) {
      return false;
    }
    var str = "abcdefghijklmnopqrst";
    var letters = str.split("");
    var map3 = {};
    for (var i3 = 0;i3 < letters.length; ++i3) {
      map3[letters[i3]] = letters[i3];
    }
    var obj = Object.assign({}, map3);
    var actual = "";
    for (var k in obj) {
      actual += k;
    }
    return str !== actual;
  };
  var assignHasPendingExceptions = function() {
    if (!Object.assign || !Object.preventExtensions) {
      return false;
    }
    var thrower = Object.preventExtensions({ 1: 2 });
    try {
      Object.assign(thrower, "xy");
    } catch (e) {
      return thrower[1] === "y";
    }
    return false;
  };
  module.exports = function getPolyfill() {
    if (!Object.assign) {
      return implementation;
    }
    if (lacksProperEnumerationOrder()) {
      return implementation;
    }
    if (assignHasPendingExceptions()) {
      return implementation;
    }
    return Object.assign;
  };
});

// node_modules/object.assign/shim.js
var require_shim = __commonJS((exports, module) => {
  var define2 = require_define_properties();
  var getPolyfill = require_polyfill();
  module.exports = function shimAssign() {
    var polyfill = getPolyfill();
    define2(Object, { assign: polyfill }, { assign: function() {
      return Object.assign !== polyfill;
    } });
    return polyfill;
  };
});

// node_modules/object.assign/index.js
var require_object = __commonJS((exports, module) => {
  var defineProperties = require_define_properties();
  var callBind = require_call_bind();
  var implementation = require_implementation3();
  var getPolyfill = require_polyfill();
  var shim = require_shim();
  var polyfill = callBind.apply(getPolyfill());
  var bound = function assign(target, source1) {
    return polyfill(Object, arguments);
  };
  defineProperties(bound, {
    getPolyfill,
    implementation,
    shim
  });
  module.exports = bound;
});

// node_modules/functions-have-names/index.js
var require_functions_have_names = __commonJS((exports, module) => {
  var functionsHaveNames = function functionsHaveNames() {
    return typeof function f() {
    }.name === "string";
  };
  var gOPD = Object.getOwnPropertyDescriptor;
  if (gOPD) {
    try {
      gOPD([], "length");
    } catch (e) {
      gOPD = null;
    }
  }
  functionsHaveNames.functionsHaveConfigurableNames = function functionsHaveConfigurableNames() {
    if (!functionsHaveNames() || !gOPD) {
      return false;
    }
    var desc = gOPD(function() {
    }, "name");
    return !!desc && !!desc.configurable;
  };
  var $bind = Function.prototype.bind;
  functionsHaveNames.boundFunctionsHaveNames = function boundFunctionsHaveNames() {
    return functionsHaveNames() && typeof $bind === "function" && function f() {
    }.bind().name !== "";
  };
  module.exports = functionsHaveNames;
});

// node_modules/set-function-name/index.js
var require_set_function_name = __commonJS((exports, module) => {
  var define2 = require_define_data_property();
  var hasDescriptors = require_has_property_descriptors()();
  var functionsHaveConfigurableNames = require_functions_have_names().functionsHaveConfigurableNames();
  var $TypeError = require_type();
  module.exports = function setFunctionName(fn, name) {
    if (typeof fn !== "function") {
      throw new $TypeError("`fn` is not a function");
    }
    var loose = arguments.length > 2 && !!arguments[2];
    if (!loose || functionsHaveConfigurableNames) {
      if (hasDescriptors) {
        define2(fn, "name", name, true, true);
      } else {
        define2(fn, "name", name);
      }
    }
    return fn;
  };
});

// node_modules/regexp.prototype.flags/implementation.js
var require_implementation4 = __commonJS((exports, module) => {
  var setFunctionName = require_set_function_name();
  var $TypeError = require_type();
  var $Object = Object;
  module.exports = setFunctionName(function flags() {
    if (this == null || this !== $Object(this)) {
      throw new $TypeError("RegExp.prototype.flags getter called on non-object");
    }
    var result = "";
    if (this.hasIndices) {
      result += "d";
    }
    if (this.global) {
      result += "g";
    }
    if (this.ignoreCase) {
      result += "i";
    }
    if (this.multiline) {
      result += "m";
    }
    if (this.dotAll) {
      result += "s";
    }
    if (this.unicode) {
      result += "u";
    }
    if (this.unicodeSets) {
      result += "v";
    }
    if (this.sticky) {
      result += "y";
    }
    return result;
  }, "get flags", true);
});

// node_modules/regexp.prototype.flags/polyfill.js
var require_polyfill2 = __commonJS((exports, module) => {
  var implementation = require_implementation4();
  var supportsDescriptors = require_define_properties().supportsDescriptors;
  var $gOPD = Object.getOwnPropertyDescriptor;
  module.exports = function getPolyfill() {
    if (supportsDescriptors && /a/mig.flags === "gim") {
      var descriptor = $gOPD(RegExp.prototype, "flags");
      if (descriptor && typeof descriptor.get === "function" && typeof RegExp.prototype.dotAll === "boolean" && typeof RegExp.prototype.hasIndices === "boolean") {
        var calls = "";
        var o2 = {};
        Object.defineProperty(o2, "hasIndices", {
          get: function() {
            calls += "d";
          }
        });
        Object.defineProperty(o2, "sticky", {
          get: function() {
            calls += "y";
          }
        });
        if (calls === "dy") {
          return descriptor.get;
        }
      }
    }
    return implementation;
  };
});

// node_modules/regexp.prototype.flags/shim.js
var require_shim2 = __commonJS((exports, module) => {
  var supportsDescriptors = require_define_properties().supportsDescriptors;
  var getPolyfill = require_polyfill2();
  var gOPD = Object.getOwnPropertyDescriptor;
  var defineProperty = Object.defineProperty;
  var TypeErr = TypeError;
  var getProto = Object.getPrototypeOf;
  var regex = /a/;
  module.exports = function shimFlags() {
    if (!supportsDescriptors || !getProto) {
      throw new TypeErr("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");
    }
    var polyfill = getPolyfill();
    var proto = getProto(regex);
    var descriptor = gOPD(proto, "flags");
    if (!descriptor || descriptor.get !== polyfill) {
      defineProperty(proto, "flags", {
        configurable: true,
        enumerable: false,
        get: polyfill
      });
    }
    return polyfill;
  };
});

// node_modules/regexp.prototype.flags/index.js
var require_regexp_prototype = __commonJS((exports, module) => {
  var define2 = require_define_properties();
  var callBind = require_call_bind();
  var implementation = require_implementation4();
  var getPolyfill = require_polyfill2();
  var shim = require_shim2();
  var flagsBound = callBind(getPolyfill());
  define2(flagsBound, {
    getPolyfill,
    implementation,
    shim
  });
  module.exports = flagsBound;
});

// node_modules/es-get-iterator/node.js
var require_node = __commonJS((exports, module) => {
  var $iterator = Symbol.iterator;
  module.exports = function getIterator(iterable) {
    if (iterable != null && typeof iterable[$iterator] !== "undefined") {
      return iterable[$iterator]();
    }
  };
});

// node_modules/object-inspect/util.inspect.js
var require_util_inspect = __commonJS((exports, module) => {
  module.exports = import.meta.require("util").inspect;
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS((exports, module) => {
  function addNumericSeparator(num, str) {
    if (num === Infinity || num === -Infinity || num !== num || num && num > -1000 && num < 1000 || $test.call(/e/, str)) {
      return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === "number") {
      var int = num < 0 ? -$floor(-num) : $floor(num);
      if (int !== num) {
        var intStr = String(int);
        var dec = $slice.call(str, intStr.length + 1);
        return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
      }
    }
    return $replace.call(str, sepRegex, "$&_");
  }
  function wrapQuotes(s3, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
    return quoteChar + s3 + quoteChar;
  }
  function quote(s3) {
    return $replace.call(String(s3), /"/g, "&quot;");
  }
  function isArray(obj) {
    return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  }
  function isDate(obj) {
    return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  }
  function isRegExp(obj) {
    return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  }
  function isError(obj) {
    return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  }
  function isString(obj) {
    return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  }
  function isNumber(obj) {
    return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  }
  function isBoolean(obj) {
    return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  }
  function isSymbol(obj) {
    if (hasShammedSymbols) {
      return obj && typeof obj === "object" && obj instanceof Symbol;
    }
    if (typeof obj === "symbol") {
      return true;
    }
    if (!obj || typeof obj !== "object" || !symToString) {
      return false;
    }
    try {
      symToString.call(obj);
      return true;
    } catch (e) {
    }
    return false;
  }
  function isBigInt(obj) {
    if (!obj || typeof obj !== "object" || !bigIntValueOf) {
      return false;
    }
    try {
      bigIntValueOf.call(obj);
      return true;
    } catch (e) {
    }
    return false;
  }
  function has2(obj, key) {
    return hasOwn.call(obj, key);
  }
  function toStr(obj) {
    return objectToString.call(obj);
  }
  function nameOf(f3) {
    if (f3.name) {
      return f3.name;
    }
    var m3 = $match.call(functionToString.call(f3), /^function\s*([\w$]+)/);
    if (m3) {
      return m3[1];
    }
    return null;
  }
  function indexOf(xs, x3) {
    if (xs.indexOf) {
      return xs.indexOf(x3);
    }
    for (var i3 = 0, l = xs.length;i3 < l; i3++) {
      if (xs[i3] === x3) {
        return i3;
      }
    }
    return -1;
  }
  function isMap(x3) {
    if (!mapSize || !x3 || typeof x3 !== "object") {
      return false;
    }
    try {
      mapSize.call(x3);
      try {
        setSize.call(x3);
      } catch (s3) {
        return true;
      }
      return x3 instanceof Map;
    } catch (e) {
    }
    return false;
  }
  function isWeakMap(x3) {
    if (!weakMapHas || !x3 || typeof x3 !== "object") {
      return false;
    }
    try {
      weakMapHas.call(x3, weakMapHas);
      try {
        weakSetHas.call(x3, weakSetHas);
      } catch (s3) {
        return true;
      }
      return x3 instanceof WeakMap;
    } catch (e) {
    }
    return false;
  }
  function isWeakRef(x3) {
    if (!weakRefDeref || !x3 || typeof x3 !== "object") {
      return false;
    }
    try {
      weakRefDeref.call(x3);
      return true;
    } catch (e) {
    }
    return false;
  }
  function isSet(x3) {
    if (!setSize || !x3 || typeof x3 !== "object") {
      return false;
    }
    try {
      setSize.call(x3);
      try {
        mapSize.call(x3);
      } catch (m3) {
        return true;
      }
      return x3 instanceof Set;
    } catch (e) {
    }
    return false;
  }
  function isWeakSet(x3) {
    if (!weakSetHas || !x3 || typeof x3 !== "object") {
      return false;
    }
    try {
      weakSetHas.call(x3, weakSetHas);
      try {
        weakMapHas.call(x3, weakMapHas);
      } catch (s3) {
        return true;
      }
      return x3 instanceof WeakSet;
    } catch (e) {
    }
    return false;
  }
  function isElement(x3) {
    if (!x3 || typeof x3 !== "object") {
      return false;
    }
    if (typeof HTMLElement !== "undefined" && x3 instanceof HTMLElement) {
      return true;
    }
    return typeof x3.nodeName === "string" && typeof x3.getAttribute === "function";
  }
  function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
      var remaining = str.length - opts.maxStringLength;
      var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
      return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    var s3 = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s3, "single", opts);
  }
  function lowbyte(c3) {
    var n3 = c3.charCodeAt(0);
    var x3 = {
      8: "b",
      9: "t",
      10: "n",
      12: "f",
      13: "r"
    }[n3];
    if (x3) {
      return "\\" + x3;
    }
    return "\\x" + (n3 < 16 ? "0" : "") + $toUpperCase.call(n3.toString(16));
  }
  function markBoxed(str) {
    return "Object(" + str + ")";
  }
  function weakCollectionOf(type47) {
    return type47 + " { ? }";
  }
  function collectionOf(type47, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
    return type47 + " (" + size + ") {" + joinedEntries + "}";
  }
  function singleLineValues(xs) {
    for (var i3 = 0;i3 < xs.length; i3++) {
      if (indexOf(xs[i3], "\n") >= 0) {
        return false;
      }
    }
    return true;
  }
  function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === "\t") {
      baseIndent = "\t";
    } else if (typeof opts.indent === "number" && opts.indent > 0) {
      baseIndent = $join.call(Array(opts.indent + 1), " ");
    } else {
      return null;
    }
    return {
      base: baseIndent,
      prev: $join.call(Array(depth + 1), baseIndent)
    };
  }
  function indentedJoin(xs, indent) {
    if (xs.length === 0) {
      return "";
    }
    var lineJoiner = "\n" + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
  }
  function arrObjKeys(obj, inspect) {
    var isArr = isArray(obj);
    var xs = [];
    if (isArr) {
      xs.length = obj.length;
      for (var i3 = 0;i3 < obj.length; i3++) {
        xs[i3] = has2(obj, i3) ? inspect(obj[i3], obj) : "";
      }
    }
    var syms = typeof gOPS === "function" ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
      symMap = {};
      for (var k = 0;k < syms.length; k++) {
        symMap["$" + syms[k]] = syms[k];
      }
    }
    for (var key in obj) {
      if (!has2(obj, key)) {
        continue;
      }
      if (isArr && String(Number(key)) === key && key < obj.length) {
        continue;
      }
      if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
        continue;
      } else if ($test.call(/[^\w$]/, key)) {
        xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
      } else {
        xs.push(key + ": " + inspect(obj[key], obj));
      }
    }
    if (typeof gOPS === "function") {
      for (var j = 0;j < syms.length; j++) {
        if (isEnumerable.call(obj, syms[j])) {
          xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
        }
      }
    }
    return xs;
  }
  var hasMap = typeof Map === "function" && Map.prototype;
  var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
  var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
  var mapForEach = hasMap && Map.prototype.forEach;
  var hasSet = typeof Set === "function" && Set.prototype;
  var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
  var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
  var setForEach = hasSet && Set.prototype.forEach;
  var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
  var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
  var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
  var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
  var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
  var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
  var booleanValueOf = Boolean.prototype.valueOf;
  var objectToString = Object.prototype.toString;
  var functionToString = Function.prototype.toString;
  var $match = String.prototype.match;
  var $slice = String.prototype.slice;
  var $replace = String.prototype.replace;
  var $toUpperCase = String.prototype.toUpperCase;
  var $toLowerCase = String.prototype.toLowerCase;
  var $test = RegExp.prototype.test;
  var $concat = Array.prototype.concat;
  var $join = Array.prototype.join;
  var $arrSlice = Array.prototype.slice;
  var $floor = Math.floor;
  var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
  var gOPS = Object.getOwnPropertySymbols;
  var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
  var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
  var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
  var isEnumerable = Object.prototype.propertyIsEnumerable;
  var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
    return O.__proto__;
  } : null);
  var utilInspect = require_util_inspect();
  var inspectCustom = utilInspect.custom;
  var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
  module.exports = function inspect_(obj, options, depth, seen) {
    var opts = options || {};
    if (has2(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
      throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (has2(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
      throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has2(opts, "customInspect") ? opts.customInspect : true;
    if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
      throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
    }
    if (has2(opts, "indent") && opts.indent !== null && opts.indent !== "\t" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
      throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has2(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
      throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;
    if (typeof obj === "undefined") {
      return "undefined";
    }
    if (obj === null) {
      return "null";
    }
    if (typeof obj === "boolean") {
      return obj ? "true" : "false";
    }
    if (typeof obj === "string") {
      return inspectString(obj, opts);
    }
    if (typeof obj === "number") {
      if (obj === 0) {
        return Infinity / obj > 0 ? "0" : "-0";
      }
      var str = String(obj);
      return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === "bigint") {
      var bigIntStr = String(obj) + "n";
      return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }
    var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
    if (typeof depth === "undefined") {
      depth = 0;
    }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
      return isArray(obj) ? "[Array]" : "[Object]";
    }
    var indent = getIndent(opts, depth);
    if (typeof seen === "undefined") {
      seen = [];
    } else if (indexOf(seen, obj) >= 0) {
      return "[Circular]";
    }
    function inspect(value15, from, noIndent) {
      if (from) {
        seen = $arrSlice.call(seen);
        seen.push(from);
      }
      if (noIndent) {
        var newOpts = {
          depth: opts.depth
        };
        if (has2(opts, "quoteStyle")) {
          newOpts.quoteStyle = opts.quoteStyle;
        }
        return inspect_(value15, newOpts, depth + 1, seen);
      }
      return inspect_(value15, opts, depth + 1, seen);
    }
    if (typeof obj === "function" && !isRegExp(obj)) {
      var name = nameOf(obj);
      var keys = arrObjKeys(obj, inspect);
      return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
    }
    if (isSymbol(obj)) {
      var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
      return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
      var s3 = "<" + $toLowerCase.call(String(obj.nodeName));
      var attrs = obj.attributes || [];
      for (var i3 = 0;i3 < attrs.length; i3++) {
        s3 += " " + attrs[i3].name + "=" + wrapQuotes(quote(attrs[i3].value), "double", opts);
      }
      s3 += ">";
      if (obj.childNodes && obj.childNodes.length) {
        s3 += "...";
      }
      s3 += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
      return s3;
    }
    if (isArray(obj)) {
      if (obj.length === 0) {
        return "[]";
      }
      var xs = arrObjKeys(obj, inspect);
      if (indent && !singleLineValues(xs)) {
        return "[" + indentedJoin(xs, indent) + "]";
      }
      return "[ " + $join.call(xs, ", ") + " ]";
    }
    if (isError(obj)) {
      var parts = arrObjKeys(obj, inspect);
      if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
        return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
      }
      if (parts.length === 0) {
        return "[" + String(obj) + "]";
      }
      return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
    }
    if (typeof obj === "object" && customInspect) {
      if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
        return utilInspect(obj, { depth: maxDepth - depth });
      } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
        return obj.inspect();
      }
    }
    if (isMap(obj)) {
      var mapParts = [];
      if (mapForEach) {
        mapForEach.call(obj, function(value15, key) {
          mapParts.push(inspect(key, obj, true) + " => " + inspect(value15, obj));
        });
      }
      return collectionOf("Map", mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
      var setParts = [];
      if (setForEach) {
        setForEach.call(obj, function(value15) {
          setParts.push(inspect(value15, obj));
        });
      }
      return collectionOf("Set", setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) {
      return weakCollectionOf("WeakMap");
    }
    if (isWeakSet(obj)) {
      return weakCollectionOf("WeakSet");
    }
    if (isWeakRef(obj)) {
      return weakCollectionOf("WeakRef");
    }
    if (isNumber(obj)) {
      return markBoxed(inspect(Number(obj)));
    }
    if (isBigInt(obj)) {
      return markBoxed(inspect(bigIntValueOf.call(obj)));
    }
    if (isBoolean(obj)) {
      return markBoxed(booleanValueOf.call(obj));
    }
    if (isString(obj)) {
      return markBoxed(inspect(String(obj)));
    }
    if (typeof window !== "undefined" && obj === window) {
      return "{ [object Window] }";
    }
    if (typeof globalThis !== "undefined" && obj === globalThis || typeof global !== "undefined" && obj === global) {
      return "{ [object globalThis] }";
    }
    if (!isDate(obj) && !isRegExp(obj)) {
      var ys = arrObjKeys(obj, inspect);
      var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
      var protoTag = obj instanceof Object ? "" : "null prototype";
      var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
      var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
      var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
      if (ys.length === 0) {
        return tag + "{}";
      }
      if (indent) {
        return tag + "{" + indentedJoin(ys, indent) + "}";
      }
      return tag + "{ " + $join.call(ys, ", ") + " }";
    }
    return String(obj);
  };
  var hasOwn = Object.prototype.hasOwnProperty || function(key) {
    return key in this;
  };
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS((exports, module) => {
  var GetIntrinsic = require_get_intrinsic();
  var callBound = require_callBound();
  var inspect = require_object_inspect();
  var $TypeError = require_type();
  var $WeakMap = GetIntrinsic("%WeakMap%", true);
  var $Map = GetIntrinsic("%Map%", true);
  var $weakMapGet = callBound("WeakMap.prototype.get", true);
  var $weakMapSet = callBound("WeakMap.prototype.set", true);
  var $weakMapHas = callBound("WeakMap.prototype.has", true);
  var $mapGet = callBound("Map.prototype.get", true);
  var $mapSet = callBound("Map.prototype.set", true);
  var $mapHas = callBound("Map.prototype.has", true);
  var listGetNode = function(list, key) {
    var prev = list;
    var curr;
    for (;(curr = prev.next) !== null; prev = curr) {
      if (curr.key === key) {
        prev.next = curr.next;
        curr.next = list.next;
        list.next = curr;
        return curr;
      }
    }
  };
  var listGet = function(objects, key) {
    var node = listGetNode(objects, key);
    return node && node.value;
  };
  var listSet = function(objects, key, value15) {
    var node = listGetNode(objects, key);
    if (node) {
      node.value = value15;
    } else {
      objects.next = {
        key,
        next: objects.next,
        value: value15
      };
    }
  };
  var listHas = function(objects, key) {
    return !!listGetNode(objects, key);
  };
  module.exports = function getSideChannel() {
    var $wm;
    var $m;
    var $o;
    var channel = {
      assert: function(key) {
        if (!channel.has(key)) {
          throw new $TypeError("Side channel does not contain " + inspect(key));
        }
      },
      get: function(key) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if ($wm) {
            return $weakMapGet($wm, key);
          }
        } else if ($Map) {
          if ($m) {
            return $mapGet($m, key);
          }
        } else {
          if ($o) {
            return listGet($o, key);
          }
        }
      },
      has: function(key) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if ($wm) {
            return $weakMapHas($wm, key);
          }
        } else if ($Map) {
          if ($m) {
            return $mapHas($m, key);
          }
        } else {
          if ($o) {
            return listHas($o, key);
          }
        }
        return false;
      },
      set: function(key, value15) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if (!$wm) {
            $wm = new $WeakMap;
          }
          $weakMapSet($wm, key, value15);
        } else if ($Map) {
          if (!$m) {
            $m = new $Map;
          }
          $mapSet($m, key, value15);
        } else {
          if (!$o) {
            $o = { key: {}, next: null };
          }
          listSet($o, key, value15);
        }
      }
    };
    return channel;
  };
});

// node_modules/object-is/implementation.js
var require_implementation5 = __commonJS((exports, module) => {
  var numberIsNaN = function(value15) {
    return value15 !== value15;
  };
  module.exports = function is(a, b) {
    if (a === 0 && b === 0) {
      return 1 / a === 1 / b;
    }
    if (a === b) {
      return true;
    }
    if (numberIsNaN(a) && numberIsNaN(b)) {
      return true;
    }
    return false;
  };
});

// node_modules/object-is/polyfill.js
var require_polyfill3 = __commonJS((exports, module) => {
  var implementation = require_implementation5();
  module.exports = function getPolyfill() {
    return typeof Object.is === "function" ? Object.is : implementation;
  };
});

// node_modules/object-is/shim.js
var require_shim3 = __commonJS((exports, module) => {
  var getPolyfill = require_polyfill3();
  var define2 = require_define_properties();
  module.exports = function shimObjectIs() {
    var polyfill = getPolyfill();
    define2(Object, { is: polyfill }, {
      is: function testObjectIs() {
        return Object.is !== polyfill;
      }
    });
    return polyfill;
  };
});

// node_modules/object-is/index.js
var require_object_is = __commonJS((exports, module) => {
  var define2 = require_define_properties();
  var callBind = require_call_bind();
  var implementation = require_implementation5();
  var getPolyfill = require_polyfill3();
  var shim = require_shim3();
  var polyfill = callBind(getPolyfill(), Object);
  define2(polyfill, {
    getPolyfill,
    implementation,
    shim
  });
  module.exports = polyfill;
});

// node_modules/has-tostringtag/shams.js
var require_shams2 = __commonJS((exports, module) => {
  var hasSymbols = require_shams();
  module.exports = function hasToStringTagShams() {
    return hasSymbols() && !!Symbol.toStringTag;
  };
});

// node_modules/is-arguments/index.js
var require_is_arguments = __commonJS((exports, module) => {
  var hasToStringTag = require_shams2()();
  var callBound = require_callBound();
  var $toString = callBound("Object.prototype.toString");
  var isStandardArguments = function isArguments(value15) {
    if (hasToStringTag && value15 && typeof value15 === "object" && Symbol.toStringTag in value15) {
      return false;
    }
    return $toString(value15) === "[object Arguments]";
  };
  var isLegacyArguments = function isArguments(value15) {
    if (isStandardArguments(value15)) {
      return true;
    }
    return value15 !== null && typeof value15 === "object" && typeof value15.length === "number" && value15.length >= 0 && $toString(value15) !== "[object Array]" && $toString(value15.callee) === "[object Function]";
  };
  var supportsStandardArguments = function() {
    return isStandardArguments(arguments);
  }();
  isStandardArguments.isLegacyArguments = isLegacyArguments;
  module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
});

// node_modules/isarray/index.js
var require_isarray = __commonJS((exports, module) => {
  var toString = {}.toString;
  module.exports = Array.isArray || function(arr) {
    return toString.call(arr) == "[object Array]";
  };
});

// node_modules/is-array-buffer/index.js
var require_is_array_buffer = __commonJS((exports, module) => {
  var callBind = require_call_bind();
  var callBound = require_callBound();
  var GetIntrinsic = require_get_intrinsic();
  var $ArrayBuffer = GetIntrinsic("%ArrayBuffer%", true);
  var $byteLength = callBound("ArrayBuffer.prototype.byteLength", true);
  var $toString = callBound("Object.prototype.toString");
  var abSlice = !!$ArrayBuffer && !$byteLength && new $ArrayBuffer(0).slice;
  var $abSlice = !!abSlice && callBind(abSlice);
  module.exports = $byteLength || $abSlice ? function isArrayBuffer(obj) {
    if (!obj || typeof obj !== "object") {
      return false;
    }
    try {
      if ($byteLength) {
        $byteLength(obj);
      } else {
        $abSlice(obj, 0);
      }
      return true;
    } catch (e) {
      return false;
    }
  } : $ArrayBuffer ? function isArrayBuffer(obj) {
    return $toString(obj) === "[object ArrayBuffer]";
  } : function isArrayBuffer(obj) {
    return false;
  };
});

// node_modules/is-date-object/index.js
var require_is_date_object = __commonJS((exports, module) => {
  var getDay = Date.prototype.getDay;
  var tryDateObject = function tryDateGetDayCall(value15) {
    try {
      getDay.call(value15);
      return true;
    } catch (e) {
      return false;
    }
  };
  var toStr = Object.prototype.toString;
  var dateClass = "[object Date]";
  var hasToStringTag = require_shams2()();
  module.exports = function isDateObject(value15) {
    if (typeof value15 !== "object" || value15 === null) {
      return false;
    }
    return hasToStringTag ? tryDateObject(value15) : toStr.call(value15) === dateClass;
  };
});

// node_modules/is-regex/index.js
var require_is_regex = __commonJS((exports, module) => {
  var callBound = require_callBound();
  var hasToStringTag = require_shams2()();
  var has2;
  var $exec;
  var isRegexMarker;
  var badStringifier;
  if (hasToStringTag) {
    has2 = callBound("Object.prototype.hasOwnProperty");
    $exec = callBound("RegExp.prototype.exec");
    isRegexMarker = {};
    throwRegexMarker = function() {
      throw isRegexMarker;
    };
    badStringifier = {
      toString: throwRegexMarker,
      valueOf: throwRegexMarker
    };
    if (typeof Symbol.toPrimitive === "symbol") {
      badStringifier[Symbol.toPrimitive] = throwRegexMarker;
    }
  }
  var throwRegexMarker;
  var $toString = callBound("Object.prototype.toString");
  var gOPD = Object.getOwnPropertyDescriptor;
  var regexClass = "[object RegExp]";
  module.exports = hasToStringTag ? function isRegex(value15) {
    if (!value15 || typeof value15 !== "object") {
      return false;
    }
    var descriptor = gOPD(value15, "lastIndex");
    var hasLastIndexDataProperty = descriptor && has2(descriptor, "value");
    if (!hasLastIndexDataProperty) {
      return false;
    }
    try {
      $exec(value15, badStringifier);
    } catch (e) {
      return e === isRegexMarker;
    }
  } : function isRegex(value15) {
    if (!value15 || typeof value15 !== "object" && typeof value15 !== "function") {
      return false;
    }
    return $toString(value15) === regexClass;
  };
});

// node_modules/is-shared-array-buffer/index.js
var require_is_shared_array_buffer = __commonJS((exports, module) => {
  var callBound = require_callBound();
  var $byteLength = callBound("SharedArrayBuffer.prototype.byteLength", true);
  module.exports = $byteLength ? function isSharedArrayBuffer(obj) {
    if (!obj || typeof obj !== "object") {
      return false;
    }
    try {
      $byteLength(obj);
      return true;
    } catch (e) {
      return false;
    }
  } : function isSharedArrayBuffer(obj) {
    return false;
  };
});

// node_modules/is-string/index.js
var require_is_string = __commonJS((exports, module) => {
  var strValue = String.prototype.valueOf;
  var tryStringObject = function tryStringObject(value15) {
    try {
      strValue.call(value15);
      return true;
    } catch (e) {
      return false;
    }
  };
  var toStr = Object.prototype.toString;
  var strClass = "[object String]";
  var hasToStringTag = require_shams2()();
  module.exports = function isString(value15) {
    if (typeof value15 === "string") {
      return true;
    }
    if (typeof value15 !== "object") {
      return false;
    }
    return hasToStringTag ? tryStringObject(value15) : toStr.call(value15) === strClass;
  };
});

// node_modules/is-number-object/index.js
var require_is_number_object = __commonJS((exports, module) => {
  var numToStr = Number.prototype.toString;
  var tryNumberObject = function tryNumberObject(value15) {
    try {
      numToStr.call(value15);
      return true;
    } catch (e) {
      return false;
    }
  };
  var toStr = Object.prototype.toString;
  var numClass = "[object Number]";
  var hasToStringTag = require_shams2()();
  module.exports = function isNumberObject(value15) {
    if (typeof value15 === "number") {
      return true;
    }
    if (typeof value15 !== "object") {
      return false;
    }
    return hasToStringTag ? tryNumberObject(value15) : toStr.call(value15) === numClass;
  };
});

// node_modules/is-boolean-object/index.js
var require_is_boolean_object = __commonJS((exports, module) => {
  var callBound = require_callBound();
  var $boolToStr = callBound("Boolean.prototype.toString");
  var $toString = callBound("Object.prototype.toString");
  var tryBooleanObject = function booleanBrandCheck(value15) {
    try {
      $boolToStr(value15);
      return true;
    } catch (e) {
      return false;
    }
  };
  var boolClass = "[object Boolean]";
  var hasToStringTag = require_shams2()();
  module.exports = function isBoolean(value15) {
    if (typeof value15 === "boolean") {
      return true;
    }
    if (value15 === null || typeof value15 !== "object") {
      return false;
    }
    return hasToStringTag && Symbol.toStringTag in value15 ? tryBooleanObject(value15) : $toString(value15) === boolClass;
  };
});

// node_modules/is-symbol/index.js
var require_is_symbol = __commonJS((exports, module) => {
  var toStr = Object.prototype.toString;
  var hasSymbols = require_has_symbols()();
  if (hasSymbols) {
    symToStr = Symbol.prototype.toString;
    symStringRegex = /^Symbol\(.*\)$/;
    isSymbolObject = function isRealSymbolObject(value15) {
      if (typeof value15.valueOf() !== "symbol") {
        return false;
      }
      return symStringRegex.test(symToStr.call(value15));
    };
    module.exports = function isSymbol(value15) {
      if (typeof value15 === "symbol") {
        return true;
      }
      if (toStr.call(value15) !== "[object Symbol]") {
        return false;
      }
      try {
        return isSymbolObject(value15);
      } catch (e) {
        return false;
      }
    };
  } else {
    module.exports = function isSymbol(value15) {
      return false;
    };
  }
  var symToStr;
  var symStringRegex;
  var isSymbolObject;
});

// node_modules/has-bigints/index.js
var require_has_bigints = __commonJS((exports, module) => {
  var $BigInt = typeof BigInt !== "undefined" && BigInt;
  module.exports = function hasNativeBigInts() {
    return typeof $BigInt === "function" && typeof BigInt === "function" && typeof $BigInt(42) === "bigint" && typeof BigInt(42) === "bigint";
  };
});

// node_modules/is-bigint/index.js
var require_is_bigint = __commonJS((exports, module) => {
  var hasBigInts = require_has_bigints()();
  if (hasBigInts) {
    bigIntValueOf = BigInt.prototype.valueOf;
    tryBigInt = function tryBigIntObject(value15) {
      try {
        bigIntValueOf.call(value15);
        return true;
      } catch (e) {
      }
      return false;
    };
    module.exports = function isBigInt(value15) {
      if (value15 === null || typeof value15 === "undefined" || typeof value15 === "boolean" || typeof value15 === "string" || typeof value15 === "number" || typeof value15 === "symbol" || typeof value15 === "function") {
        return false;
      }
      if (typeof value15 === "bigint") {
        return true;
      }
      return tryBigInt(value15);
    };
  } else {
    module.exports = function isBigInt(value15) {
      return false;
    };
  }
  var bigIntValueOf;
  var tryBigInt;
});

// node_modules/which-boxed-primitive/index.js
var require_which_boxed_primitive = __commonJS((exports, module) => {
  var isString = require_is_string();
  var isNumber = require_is_number_object();
  var isBoolean = require_is_boolean_object();
  var isSymbol = require_is_symbol();
  var isBigInt = require_is_bigint();
  module.exports = function whichBoxedPrimitive(value15) {
    if (value15 == null || typeof value15 !== "object" && typeof value15 !== "function") {
      return null;
    }
    if (isString(value15)) {
      return "String";
    }
    if (isNumber(value15)) {
      return "Number";
    }
    if (isBoolean(value15)) {
      return "Boolean";
    }
    if (isSymbol(value15)) {
      return "Symbol";
    }
    if (isBigInt(value15)) {
      return "BigInt";
    }
  };
});

// node_modules/is-map/index.js
var require_is_map = __commonJS((exports, module) => {
  var $Map = typeof Map === "function" && Map.prototype ? Map : null;
  var $Set = typeof Set === "function" && Set.prototype ? Set : null;
  var exported;
  if (!$Map) {
    exported = function isMap(x3) {
      return false;
    };
  }
  var $mapHas = $Map ? Map.prototype.has : null;
  var $setHas = $Set ? Set.prototype.has : null;
  if (!exported && !$mapHas) {
    exported = function isMap(x3) {
      return false;
    };
  }
  module.exports = exported || function isMap(x3) {
    if (!x3 || typeof x3 !== "object") {
      return false;
    }
    try {
      $mapHas.call(x3);
      if ($setHas) {
        try {
          $setHas.call(x3);
        } catch (e) {
          return true;
        }
      }
      return x3 instanceof $Map;
    } catch (e) {
    }
    return false;
  };
});

// node_modules/is-set/index.js
var require_is_set = __commonJS((exports, module) => {
  var $Map = typeof Map === "function" && Map.prototype ? Map : null;
  var $Set = typeof Set === "function" && Set.prototype ? Set : null;
  var exported;
  if (!$Set) {
    exported = function isSet(x3) {
      return false;
    };
  }
  var $mapHas = $Map ? Map.prototype.has : null;
  var $setHas = $Set ? Set.prototype.has : null;
  if (!exported && !$setHas) {
    exported = function isSet(x3) {
      return false;
    };
  }
  module.exports = exported || function isSet(x3) {
    if (!x3 || typeof x3 !== "object") {
      return false;
    }
    try {
      $setHas.call(x3);
      if ($mapHas) {
        try {
          $mapHas.call(x3);
        } catch (e) {
          return true;
        }
      }
      return x3 instanceof $Set;
    } catch (e) {
    }
    return false;
  };
});

// node_modules/is-weakmap/index.js
var require_is_weakmap = __commonJS((exports, module) => {
  var $WeakMap = typeof WeakMap === "function" && WeakMap.prototype ? WeakMap : null;
  var $WeakSet = typeof WeakSet === "function" && WeakSet.prototype ? WeakSet : null;
  var exported;
  if (!$WeakMap) {
    exported = function isWeakMap(x3) {
      return false;
    };
  }
  var $mapHas = $WeakMap ? $WeakMap.prototype.has : null;
  var $setHas = $WeakSet ? $WeakSet.prototype.has : null;
  if (!exported && !$mapHas) {
    exported = function isWeakMap(x3) {
      return false;
    };
  }
  module.exports = exported || function isWeakMap(x3) {
    if (!x3 || typeof x3 !== "object") {
      return false;
    }
    try {
      $mapHas.call(x3, $mapHas);
      if ($setHas) {
        try {
          $setHas.call(x3, $setHas);
        } catch (e) {
          return true;
        }
      }
      return x3 instanceof $WeakMap;
    } catch (e) {
    }
    return false;
  };
});

// node_modules/is-weakset/index.js
var require_is_weakset = __commonJS((exports, module) => {
  var GetIntrinsic = require_get_intrinsic();
  var callBound = require_callBound();
  var $WeakSet = GetIntrinsic("%WeakSet%", true);
  var $setHas = callBound("WeakSet.prototype.has", true);
  if ($setHas) {
    $mapHas = callBound("WeakMap.prototype.has", true);
    module.exports = function isWeakSet(x3) {
      if (!x3 || typeof x3 !== "object") {
        return false;
      }
      try {
        $setHas(x3, $setHas);
        if ($mapHas) {
          try {
            $mapHas(x3, $mapHas);
          } catch (e) {
            return true;
          }
        }
        return x3 instanceof $WeakSet;
      } catch (e) {
      }
      return false;
    };
  } else {
    module.exports = function isWeakSet(x3) {
      return false;
    };
  }
  var $mapHas;
});

// node_modules/which-collection/index.js
var require_which_collection = __commonJS((exports, module) => {
  var isMap = require_is_map();
  var isSet = require_is_set();
  var isWeakMap = require_is_weakmap();
  var isWeakSet = require_is_weakset();
  module.exports = function whichCollection(value15) {
    if (value15 && typeof value15 === "object") {
      if (isMap(value15)) {
        return "Map";
      }
      if (isSet(value15)) {
        return "Set";
      }
      if (isWeakMap(value15)) {
        return "WeakMap";
      }
      if (isWeakSet(value15)) {
        return "WeakSet";
      }
    }
    return false;
  };
});

// node_modules/is-callable/index.js
var require_is_callable = __commonJS((exports, module) => {
  var fnToStr = Function.prototype.toString;
  var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
  var badArrayLike;
  var isCallableMarker;
  if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
    try {
      badArrayLike = Object.defineProperty({}, "length", {
        get: function() {
          throw isCallableMarker;
        }
      });
      isCallableMarker = {};
      reflectApply(function() {
        throw 42;
      }, null, badArrayLike);
    } catch (_) {
      if (_ !== isCallableMarker) {
        reflectApply = null;
      }
    }
  } else {
    reflectApply = null;
  }
  var constructorRegex = /^\s*class\b/;
  var isES6ClassFn = function isES6ClassFunction(value15) {
    try {
      var fnStr = fnToStr.call(value15);
      return constructorRegex.test(fnStr);
    } catch (e) {
      return false;
    }
  };
  var tryFunctionObject = function tryFunctionToStr(value15) {
    try {
      if (isES6ClassFn(value15)) {
        return false;
      }
      fnToStr.call(value15);
      return true;
    } catch (e) {
      return false;
    }
  };
  var toStr = Object.prototype.toString;
  var objectClass = "[object Object]";
  var fnClass = "[object Function]";
  var genClass = "[object GeneratorFunction]";
  var ddaClass = "[object HTMLAllCollection]";
  var ddaClass2 = "[object HTML document.all class]";
  var ddaClass3 = "[object HTMLCollection]";
  var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
  var isIE68 = !(0 in [,]);
  var isDDA = function isDocumentDotAll() {
    return false;
  };
  if (typeof document === "object") {
    all = document.all;
    if (toStr.call(all) === toStr.call(document.all)) {
      isDDA = function isDocumentDotAll(value15) {
        if ((isIE68 || !value15) && (typeof value15 === "undefined" || typeof value15 === "object")) {
          try {
            var str = toStr.call(value15);
            return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value15("") == null;
          } catch (e) {
          }
        }
        return false;
      };
    }
  }
  var all;
  module.exports = reflectApply ? function isCallable(value15) {
    if (isDDA(value15)) {
      return true;
    }
    if (!value15) {
      return false;
    }
    if (typeof value15 !== "function" && typeof value15 !== "object") {
      return false;
    }
    try {
      reflectApply(value15, null, badArrayLike);
    } catch (e) {
      if (e !== isCallableMarker) {
        return false;
      }
    }
    return !isES6ClassFn(value15) && tryFunctionObject(value15);
  } : function isCallable(value15) {
    if (isDDA(value15)) {
      return true;
    }
    if (!value15) {
      return false;
    }
    if (typeof value15 !== "function" && typeof value15 !== "object") {
      return false;
    }
    if (hasToStringTag) {
      return tryFunctionObject(value15);
    }
    if (isES6ClassFn(value15)) {
      return false;
    }
    var strClass = toStr.call(value15);
    if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
      return false;
    }
    return tryFunctionObject(value15);
  };
});

// node_modules/for-each/index.js
var require_for_each = __commonJS((exports, module) => {
  var isCallable = require_is_callable();
  var toStr = Object.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var forEachArray = function forEachArray(array5, iterator5, receiver) {
    for (var i3 = 0, len = array5.length;i3 < len; i3++) {
      if (hasOwnProperty.call(array5, i3)) {
        if (receiver == null) {
          iterator5(array5[i3], i3, array5);
        } else {
          iterator5.call(receiver, array5[i3], i3, array5);
        }
      }
    }
  };
  var forEachString = function forEachString(string7, iterator5, receiver) {
    for (var i3 = 0, len = string7.length;i3 < len; i3++) {
      if (receiver == null) {
        iterator5(string7.charAt(i3), i3, string7);
      } else {
        iterator5.call(receiver, string7.charAt(i3), i3, string7);
      }
    }
  };
  var forEachObject = function forEachObject(object13, iterator5, receiver) {
    for (var k in object13) {
      if (hasOwnProperty.call(object13, k)) {
        if (receiver == null) {
          iterator5(object13[k], k, object13);
        } else {
          iterator5.call(receiver, object13[k], k, object13);
        }
      }
    }
  };
  var forEach = function forEach(list, iterator5, thisArg) {
    if (!isCallable(iterator5)) {
      throw new TypeError("iterator must be a function");
    }
    var receiver;
    if (arguments.length >= 3) {
      receiver = thisArg;
    }
    if (toStr.call(list) === "[object Array]") {
      forEachArray(list, iterator5, receiver);
    } else if (typeof list === "string") {
      forEachString(list, iterator5, receiver);
    } else {
      forEachObject(list, iterator5, receiver);
    }
  };
  module.exports = forEach;
});

// node_modules/possible-typed-array-names/index.js
var require_possible_typed_array_names = __commonJS((exports, module) => {
  module.exports = [
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Int16Array",
    "Int32Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array"
  ];
});

// node_modules/available-typed-arrays/index.js
var require_available_typed_arrays = __commonJS((exports, module) => {
  var possibleNames = require_possible_typed_array_names();
  var g = typeof globalThis === "undefined" ? global : globalThis;
  module.exports = function availableTypedArrays() {
    var out = [];
    for (var i3 = 0;i3 < possibleNames.length; i3++) {
      if (typeof g[possibleNames[i3]] === "function") {
        out[out.length] = possibleNames[i3];
      }
    }
    return out;
  };
});

// node_modules/which-typed-array/index.js
var require_which_typed_array = __commonJS((exports, module) => {
  var forEach = require_for_each();
  var availableTypedArrays = require_available_typed_arrays();
  var callBind = require_call_bind();
  var callBound = require_callBound();
  var gOPD = require_gopd();
  var $toString = callBound("Object.prototype.toString");
  var hasToStringTag = require_shams2()();
  var g = typeof globalThis === "undefined" ? global : globalThis;
  var typedArrays = availableTypedArrays();
  var $slice = callBound("String.prototype.slice");
  var getPrototypeOf = Object.getPrototypeOf;
  var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf(array5, value15) {
    for (var i3 = 0;i3 < array5.length; i3 += 1) {
      if (array5[i3] === value15) {
        return i3;
      }
    }
    return -1;
  };
  var cache = { __proto__: null };
  if (hasToStringTag && gOPD && getPrototypeOf) {
    forEach(typedArrays, function(typedArray) {
      var arr = new g[typedArray];
      if (Symbol.toStringTag in arr) {
        var proto = getPrototypeOf(arr);
        var descriptor = gOPD(proto, Symbol.toStringTag);
        if (!descriptor) {
          var superProto = getPrototypeOf(proto);
          descriptor = gOPD(superProto, Symbol.toStringTag);
        }
        cache["$" + typedArray] = callBind(descriptor.get);
      }
    });
  } else {
    forEach(typedArrays, function(typedArray) {
      var arr = new g[typedArray];
      var fn = arr.slice || arr.set;
      if (fn) {
        cache["$" + typedArray] = callBind(fn);
      }
    });
  }
  var tryTypedArrays = function tryAllTypedArrays(value15) {
    var found = false;
    forEach(cache, function(getter, typedArray) {
      if (!found) {
        try {
          if ("$" + getter(value15) === typedArray) {
            found = $slice(typedArray, 1);
          }
        } catch (e) {
        }
      }
    });
    return found;
  };
  var trySlices = function tryAllSlices(value15) {
    var found = false;
    forEach(cache, function(getter, name) {
      if (!found) {
        try {
          getter(value15);
          found = $slice(name, 1);
        } catch (e) {
        }
      }
    });
    return found;
  };
  module.exports = function whichTypedArray(value15) {
    if (!value15 || typeof value15 !== "object") {
      return false;
    }
    if (!hasToStringTag) {
      var tag = $slice($toString(value15), 8, -1);
      if ($indexOf(typedArrays, tag) > -1) {
        return tag;
      }
      if (tag !== "Object") {
        return false;
      }
      return trySlices(value15);
    }
    if (!gOPD) {
      return null;
    }
    return tryTypedArrays(value15);
  };
});

// node_modules/array-buffer-byte-length/index.js
var require_array_buffer_byte_length = __commonJS((exports, module) => {
  var callBound = require_callBound();
  var $byteLength = callBound("ArrayBuffer.prototype.byteLength", true);
  var isArrayBuffer = require_is_array_buffer();
  module.exports = function byteLength(ab) {
    if (!isArrayBuffer(ab)) {
      return NaN;
    }
    return $byteLength ? $byteLength(ab) : ab.byteLength;
  };
});

// node_modules/deep-equal/index.js
var require_deep_equal = __commonJS((exports, module) => {
  function setHasEqualElement(set2, val1, opts, channel) {
    var i3 = getIterator(set2);
    var result;
    while ((result = i3.next()) && !result.done) {
      if (internalDeepEqual(val1, result.value, opts, channel)) {
        $setDelete(set2, result.value);
        return true;
      }
    }
    return false;
  }
  function findLooseMatchingPrimitives(prim) {
    if (typeof prim === "undefined") {
      return null;
    }
    if (typeof prim === "object") {
      return;
    }
    if (typeof prim === "symbol") {
      return false;
    }
    if (typeof prim === "string" || typeof prim === "number") {
      return +prim === +prim;
    }
    return true;
  }
  function mapMightHaveLoosePrim(a, b, prim, item, opts, channel) {
    var altValue = findLooseMatchingPrimitives(prim);
    if (altValue != null) {
      return altValue;
    }
    var curB = $mapGet(b, altValue);
    var looseOpts = assign({}, opts, { strict: false });
    if (typeof curB === "undefined" && !$mapHas(b, altValue) || !internalDeepEqual(item, curB, looseOpts, channel)) {
      return false;
    }
    return !$mapHas(a, altValue) && internalDeepEqual(item, curB, looseOpts, channel);
  }
  function setMightHaveLoosePrim(a, b, prim) {
    var altValue = findLooseMatchingPrimitives(prim);
    if (altValue != null) {
      return altValue;
    }
    return $setHas(b, altValue) && !$setHas(a, altValue);
  }
  function mapHasEqualEntry(set2, map3, key1, item1, opts, channel) {
    var i3 = getIterator(set2);
    var result;
    var key2;
    while ((result = i3.next()) && !result.done) {
      key2 = result.value;
      if (internalDeepEqual(key1, key2, opts, channel) && internalDeepEqual(item1, $mapGet(map3, key2), opts, channel)) {
        $setDelete(set2, key2);
        return true;
      }
    }
    return false;
  }
  function internalDeepEqual(actual, expected, options, channel) {
    var opts = options || {};
    if (opts.strict ? is(actual, expected) : actual === expected) {
      return true;
    }
    var actualBoxed = whichBoxedPrimitive(actual);
    var expectedBoxed = whichBoxedPrimitive(expected);
    if (actualBoxed !== expectedBoxed) {
      return false;
    }
    if (!actual || !expected || typeof actual !== "object" && typeof expected !== "object") {
      return opts.strict ? is(actual, expected) : actual == expected;
    }
    var hasActual = channel.has(actual);
    var hasExpected = channel.has(expected);
    var sentinel;
    if (hasActual && hasExpected) {
      if (channel.get(actual) === channel.get(expected)) {
        return true;
      }
    } else {
      sentinel = {};
    }
    if (!hasActual) {
      channel.set(actual, sentinel);
    }
    if (!hasExpected) {
      channel.set(expected, sentinel);
    }
    return objEquiv(actual, expected, opts, channel);
  }
  function isBuffer(x3) {
    if (!x3 || typeof x3 !== "object" || typeof x3.length !== "number") {
      return false;
    }
    if (typeof x3.copy !== "function" || typeof x3.slice !== "function") {
      return false;
    }
    if (x3.length > 0 && typeof x3[0] !== "number") {
      return false;
    }
    return !!(x3.constructor && x3.constructor.isBuffer && x3.constructor.isBuffer(x3));
  }
  function setEquiv(a, b, opts, channel) {
    if ($setSize(a) !== $setSize(b)) {
      return false;
    }
    var iA = getIterator(a);
    var iB = getIterator(b);
    var resultA;
    var resultB;
    var set2;
    while ((resultA = iA.next()) && !resultA.done) {
      if (resultA.value && typeof resultA.value === "object") {
        if (!set2) {
          set2 = new $Set;
        }
        $setAdd(set2, resultA.value);
      } else if (!$setHas(b, resultA.value)) {
        if (opts.strict) {
          return false;
        }
        if (!setMightHaveLoosePrim(a, b, resultA.value)) {
          return false;
        }
        if (!set2) {
          set2 = new $Set;
        }
        $setAdd(set2, resultA.value);
      }
    }
    if (set2) {
      while ((resultB = iB.next()) && !resultB.done) {
        if (resultB.value && typeof resultB.value === "object") {
          if (!setHasEqualElement(set2, resultB.value, opts.strict, channel)) {
            return false;
          }
        } else if (!opts.strict && !$setHas(a, resultB.value) && !setHasEqualElement(set2, resultB.value, opts.strict, channel)) {
          return false;
        }
      }
      return $setSize(set2) === 0;
    }
    return true;
  }
  function mapEquiv(a, b, opts, channel) {
    if ($mapSize(a) !== $mapSize(b)) {
      return false;
    }
    var iA = getIterator(a);
    var iB = getIterator(b);
    var resultA;
    var resultB;
    var set2;
    var key;
    var item1;
    var item2;
    while ((resultA = iA.next()) && !resultA.done) {
      key = resultA.value[0];
      item1 = resultA.value[1];
      if (key && typeof key === "object") {
        if (!set2) {
          set2 = new $Set;
        }
        $setAdd(set2, key);
      } else {
        item2 = $mapGet(b, key);
        if (typeof item2 === "undefined" && !$mapHas(b, key) || !internalDeepEqual(item1, item2, opts, channel)) {
          if (opts.strict) {
            return false;
          }
          if (!mapMightHaveLoosePrim(a, b, key, item1, opts, channel)) {
            return false;
          }
          if (!set2) {
            set2 = new $Set;
          }
          $setAdd(set2, key);
        }
      }
    }
    if (set2) {
      while ((resultB = iB.next()) && !resultB.done) {
        key = resultB.value[0];
        item2 = resultB.value[1];
        if (key && typeof key === "object") {
          if (!mapHasEqualEntry(set2, a, key, item2, opts, channel)) {
            return false;
          }
        } else if (!opts.strict && (!a.has(key) || !internalDeepEqual($mapGet(a, key), item2, opts, channel)) && !mapHasEqualEntry(set2, a, key, item2, assign({}, opts, { strict: false }), channel)) {
          return false;
        }
      }
      return $setSize(set2) === 0;
    }
    return true;
  }
  function objEquiv(a, b, opts, channel) {
    var i3, key;
    if (typeof a !== typeof b) {
      return false;
    }
    if (a == null || b == null) {
      return false;
    }
    if ($objToString(a) !== $objToString(b)) {
      return false;
    }
    if (isArguments(a) !== isArguments(b)) {
      return false;
    }
    var aIsArray = isArray(a);
    var bIsArray = isArray(b);
    if (aIsArray !== bIsArray) {
      return false;
    }
    var aIsError = a instanceof Error;
    var bIsError = b instanceof Error;
    if (aIsError !== bIsError) {
      return false;
    }
    if (aIsError || bIsError) {
      if (a.name !== b.name || a.message !== b.message) {
        return false;
      }
    }
    var aIsRegex = isRegex(a);
    var bIsRegex = isRegex(b);
    if (aIsRegex !== bIsRegex) {
      return false;
    }
    if ((aIsRegex || bIsRegex) && (a.source !== b.source || flags(a) !== flags(b))) {
      return false;
    }
    var aIsDate = isDate(a);
    var bIsDate = isDate(b);
    if (aIsDate !== bIsDate) {
      return false;
    }
    if (aIsDate || bIsDate) {
      if ($getTime(a) !== $getTime(b)) {
        return false;
      }
    }
    if (opts.strict && gPO && gPO(a) !== gPO(b)) {
      return false;
    }
    var aWhich = whichTypedArray(a);
    var bWhich = whichTypedArray(b);
    if (aWhich !== bWhich) {
      return false;
    }
    if (aWhich || bWhich) {
      if (a.length !== b.length) {
        return false;
      }
      for (i3 = 0;i3 < a.length; i3++) {
        if (a[i3] !== b[i3]) {
          return false;
        }
      }
      return true;
    }
    var aIsBuffer = isBuffer(a);
    var bIsBuffer = isBuffer(b);
    if (aIsBuffer !== bIsBuffer) {
      return false;
    }
    if (aIsBuffer || bIsBuffer) {
      if (a.length !== b.length) {
        return false;
      }
      for (i3 = 0;i3 < a.length; i3++) {
        if (a[i3] !== b[i3]) {
          return false;
        }
      }
      return true;
    }
    var aIsArrayBuffer = isArrayBuffer(a);
    var bIsArrayBuffer = isArrayBuffer(b);
    if (aIsArrayBuffer !== bIsArrayBuffer) {
      return false;
    }
    if (aIsArrayBuffer || bIsArrayBuffer) {
      if (byteLength(a) !== byteLength(b)) {
        return false;
      }
      return typeof Uint8Array === "function" && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
    }
    var aIsSAB = isSharedArrayBuffer(a);
    var bIsSAB = isSharedArrayBuffer(b);
    if (aIsSAB !== bIsSAB) {
      return false;
    }
    if (aIsSAB || bIsSAB) {
      if (sabByteLength(a) !== sabByteLength(b)) {
        return false;
      }
      return typeof Uint8Array === "function" && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
    }
    if (typeof a !== typeof b) {
      return false;
    }
    var ka = objectKeys(a);
    var kb = objectKeys(b);
    if (ka.length !== kb.length) {
      return false;
    }
    ka.sort();
    kb.sort();
    for (i3 = ka.length - 1;i3 >= 0; i3--) {
      if (ka[i3] != kb[i3]) {
        return false;
      }
    }
    for (i3 = ka.length - 1;i3 >= 0; i3--) {
      key = ka[i3];
      if (!internalDeepEqual(a[key], b[key], opts, channel)) {
        return false;
      }
    }
    var aCollection = whichCollection(a);
    var bCollection = whichCollection(b);
    if (aCollection !== bCollection) {
      return false;
    }
    if (aCollection === "Set" || bCollection === "Set") {
      return setEquiv(a, b, opts, channel);
    }
    if (aCollection === "Map") {
      return mapEquiv(a, b, opts, channel);
    }
    return true;
  }
  var assign = require_object();
  var callBound = require_callBound();
  var flags = require_regexp_prototype();
  var GetIntrinsic = require_get_intrinsic();
  var getIterator = require_node();
  var getSideChannel = require_side_channel();
  var is = require_object_is();
  var isArguments = require_is_arguments();
  var isArray = require_isarray();
  var isArrayBuffer = require_is_array_buffer();
  var isDate = require_is_date_object();
  var isRegex = require_is_regex();
  var isSharedArrayBuffer = require_is_shared_array_buffer();
  var objectKeys = require_object_keys();
  var whichBoxedPrimitive = require_which_boxed_primitive();
  var whichCollection = require_which_collection();
  var whichTypedArray = require_which_typed_array();
  var byteLength = require_array_buffer_byte_length();
  var sabByteLength = callBound("SharedArrayBuffer.prototype.byteLength", true);
  var $getTime = callBound("Date.prototype.getTime");
  var gPO = Object.getPrototypeOf;
  var $objToString = callBound("Object.prototype.toString");
  var $Set = GetIntrinsic("%Set%", true);
  var $mapHas = callBound("Map.prototype.has", true);
  var $mapGet = callBound("Map.prototype.get", true);
  var $mapSize = callBound("Map.prototype.size", true);
  var $setAdd = callBound("Set.prototype.add", true);
  var $setDelete = callBound("Set.prototype.delete", true);
  var $setHas = callBound("Set.prototype.has", true);
  var $setSize = callBound("Set.prototype.size", true);
  module.exports = function deepEqual(a, b, opts) {
    return internalDeepEqual(a, b, opts, getSideChannel());
  };
});

// node_modules/fontkit/iconv-lite.cjs
var require_iconv_lite = __commonJS((exports, module) => {
  try {
    module.exports = require_lib();
  } catch (err) {
  }
});

// node_modules/unicode-properties/node_modules/base64-js/index.js
var require_base64_js = __commonJS((exports) => {
  function getLens(b64) {
    var len2 = b64.length;
    if (len2 % 4 > 0) {
      throw new Error("Invalid string. Length must be a multiple of 4");
    }
    var validLen = b64.indexOf("=");
    if (validLen === -1)
      validLen = len2;
    var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }
  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i4;
    for (i4 = 0;i4 < len2; i4 += 4) {
      tmp = revLookup[b64.charCodeAt(i4)] << 18 | revLookup[b64.charCodeAt(i4 + 1)] << 12 | revLookup[b64.charCodeAt(i4 + 2)] << 6 | revLookup[b64.charCodeAt(i4 + 3)];
      arr[curByte++] = tmp >> 16 & 255;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i4)] << 2 | revLookup[b64.charCodeAt(i4 + 1)] >> 4;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i4)] << 10 | revLookup[b64.charCodeAt(i4 + 1)] << 4 | revLookup[b64.charCodeAt(i4 + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    return arr;
  }
  function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
  }
  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for (var i4 = start;i4 < end; i4 += 3) {
      tmp = (uint8[i4] << 16 & 16711680) + (uint8[i4 + 1] << 8 & 65280) + (uint8[i4 + 2] & 255);
      output.push(tripletToBase64(tmp));
    }
    return output.join("");
  }
  function fromByteArray(uint8) {
    var tmp;
    var len2 = uint8.length;
    var extraBytes = len2 % 3;
    var parts = [];
    var maxChunkLength = 16383;
    for (var i4 = 0, len22 = len2 - extraBytes;i4 < len22; i4 += maxChunkLength) {
      parts.push(encodeChunk(uint8, i4, i4 + maxChunkLength > len22 ? len22 : i4 + maxChunkLength));
    }
    if (extraBytes === 1) {
      tmp = uint8[len2 - 1];
      parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
    } else if (extraBytes === 2) {
      tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
      parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
    }
    return parts.join("");
  }
  exports.byteLength = byteLength;
  exports.toByteArray = toByteArray;
  exports.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (i3 = 0, len = code.length;i3 < len; ++i3) {
    lookup[i3] = code[i3];
    revLookup[code.charCodeAt(i3)] = i3;
  }
  var i3;
  var len;
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
});

// node_modules/tiny-inflate/index.js
var require_tiny_inflate = __commonJS((exports, module) => {
  function Tree() {
    this.table = new Uint16Array(16);
    this.trans = new Uint16Array(288);
  }
  function Data(source, dest) {
    this.source = source;
    this.sourceIndex = 0;
    this.tag = 0;
    this.bitcount = 0;
    this.dest = dest;
    this.destLen = 0;
    this.ltree = new Tree;
    this.dtree = new Tree;
  }
  function tinf_build_bits_base(bits, base, delta4, first) {
    var i3, sum;
    for (i3 = 0;i3 < delta4; ++i3)
      bits[i3] = 0;
    for (i3 = 0;i3 < 30 - delta4; ++i3)
      bits[i3 + delta4] = i3 / delta4 | 0;
    for (sum = first, i3 = 0;i3 < 30; ++i3) {
      base[i3] = sum;
      sum += 1 << bits[i3];
    }
  }
  function tinf_build_fixed_trees(lt, dt) {
    var i3;
    for (i3 = 0;i3 < 7; ++i3)
      lt.table[i3] = 0;
    lt.table[7] = 24;
    lt.table[8] = 152;
    lt.table[9] = 112;
    for (i3 = 0;i3 < 24; ++i3)
      lt.trans[i3] = 256 + i3;
    for (i3 = 0;i3 < 144; ++i3)
      lt.trans[24 + i3] = i3;
    for (i3 = 0;i3 < 8; ++i3)
      lt.trans[24 + 144 + i3] = 280 + i3;
    for (i3 = 0;i3 < 112; ++i3)
      lt.trans[24 + 144 + 8 + i3] = 144 + i3;
    for (i3 = 0;i3 < 5; ++i3)
      dt.table[i3] = 0;
    dt.table[5] = 32;
    for (i3 = 0;i3 < 32; ++i3)
      dt.trans[i3] = i3;
  }
  function tinf_build_tree(t3, lengths2, off, num) {
    var i3, sum;
    for (i3 = 0;i3 < 16; ++i3)
      t3.table[i3] = 0;
    for (i3 = 0;i3 < num; ++i3)
      t3.table[lengths2[off + i3]]++;
    t3.table[0] = 0;
    for (sum = 0, i3 = 0;i3 < 16; ++i3) {
      offs[i3] = sum;
      sum += t3.table[i3];
    }
    for (i3 = 0;i3 < num; ++i3) {
      if (lengths2[off + i3])
        t3.trans[offs[lengths2[off + i3]]++] = i3;
    }
  }
  function tinf_getbit(d3) {
    if (!d3.bitcount--) {
      d3.tag = d3.source[d3.sourceIndex++];
      d3.bitcount = 7;
    }
    var bit = d3.tag & 1;
    d3.tag >>>= 1;
    return bit;
  }
  function tinf_read_bits(d3, num, base) {
    if (!num)
      return base;
    while (d3.bitcount < 24) {
      d3.tag |= d3.source[d3.sourceIndex++] << d3.bitcount;
      d3.bitcount += 8;
    }
    var val = d3.tag & 65535 >>> 16 - num;
    d3.tag >>>= num;
    d3.bitcount -= num;
    return val + base;
  }
  function tinf_decode_symbol(d3, t3) {
    while (d3.bitcount < 24) {
      d3.tag |= d3.source[d3.sourceIndex++] << d3.bitcount;
      d3.bitcount += 8;
    }
    var sum = 0, cur = 0, len = 0;
    var tag = d3.tag;
    do {
      cur = 2 * cur + (tag & 1);
      tag >>>= 1;
      ++len;
      sum += t3.table[len];
      cur -= t3.table[len];
    } while (cur >= 0);
    d3.tag = tag;
    d3.bitcount -= len;
    return t3.trans[sum + cur];
  }
  function tinf_decode_trees(d3, lt, dt) {
    var hlit, hdist, hclen;
    var i3, num, length;
    hlit = tinf_read_bits(d3, 5, 257);
    hdist = tinf_read_bits(d3, 5, 1);
    hclen = tinf_read_bits(d3, 4, 4);
    for (i3 = 0;i3 < 19; ++i3)
      lengths[i3] = 0;
    for (i3 = 0;i3 < hclen; ++i3) {
      var clen = tinf_read_bits(d3, 3, 0);
      lengths[clcidx[i3]] = clen;
    }
    tinf_build_tree(code_tree, lengths, 0, 19);
    for (num = 0;num < hlit + hdist; ) {
      var sym = tinf_decode_symbol(d3, code_tree);
      switch (sym) {
        case 16:
          var prev = lengths[num - 1];
          for (length = tinf_read_bits(d3, 2, 3);length; --length) {
            lengths[num++] = prev;
          }
          break;
        case 17:
          for (length = tinf_read_bits(d3, 3, 3);length; --length) {
            lengths[num++] = 0;
          }
          break;
        case 18:
          for (length = tinf_read_bits(d3, 7, 11);length; --length) {
            lengths[num++] = 0;
          }
          break;
        default:
          lengths[num++] = sym;
          break;
      }
    }
    tinf_build_tree(lt, lengths, 0, hlit);
    tinf_build_tree(dt, lengths, hlit, hdist);
  }
  function tinf_inflate_block_data(d3, lt, dt) {
    while (true) {
      var sym = tinf_decode_symbol(d3, lt);
      if (sym === 256) {
        return TINF_OK;
      }
      if (sym < 256) {
        d3.dest[d3.destLen++] = sym;
      } else {
        var length, dist, offs2;
        var i3;
        sym -= 257;
        length = tinf_read_bits(d3, length_bits[sym], length_base[sym]);
        dist = tinf_decode_symbol(d3, dt);
        offs2 = d3.destLen - tinf_read_bits(d3, dist_bits[dist], dist_base[dist]);
        for (i3 = offs2;i3 < offs2 + length; ++i3) {
          d3.dest[d3.destLen++] = d3.dest[i3];
        }
      }
    }
  }
  function tinf_inflate_uncompressed_block(d3) {
    var length, invlength;
    var i3;
    while (d3.bitcount > 8) {
      d3.sourceIndex--;
      d3.bitcount -= 8;
    }
    length = d3.source[d3.sourceIndex + 1];
    length = 256 * length + d3.source[d3.sourceIndex];
    invlength = d3.source[d3.sourceIndex + 3];
    invlength = 256 * invlength + d3.source[d3.sourceIndex + 2];
    if (length !== (~invlength & 65535))
      return TINF_DATA_ERROR;
    d3.sourceIndex += 4;
    for (i3 = length;i3; --i3)
      d3.dest[d3.destLen++] = d3.source[d3.sourceIndex++];
    d3.bitcount = 0;
    return TINF_OK;
  }
  function tinf_uncompress(source, dest) {
    var d3 = new Data(source, dest);
    var bfinal, btype, res;
    do {
      bfinal = tinf_getbit(d3);
      btype = tinf_read_bits(d3, 2, 0);
      switch (btype) {
        case 0:
          res = tinf_inflate_uncompressed_block(d3);
          break;
        case 1:
          res = tinf_inflate_block_data(d3, sltree, sdtree);
          break;
        case 2:
          tinf_decode_trees(d3, d3.ltree, d3.dtree);
          res = tinf_inflate_block_data(d3, d3.ltree, d3.dtree);
          break;
        default:
          res = TINF_DATA_ERROR;
      }
      if (res !== TINF_OK)
        throw new Error("Data error");
    } while (!bfinal);
    if (d3.destLen < d3.dest.length) {
      if (typeof d3.dest.slice === "function")
        return d3.dest.slice(0, d3.destLen);
      else
        return d3.dest.subarray(0, d3.destLen);
    }
    return d3.dest;
  }
  var TINF_OK = 0;
  var TINF_DATA_ERROR = -3;
  var sltree = new Tree;
  var sdtree = new Tree;
  var length_bits = new Uint8Array(30);
  var length_base = new Uint16Array(30);
  var dist_bits = new Uint8Array(30);
  var dist_base = new Uint16Array(30);
  var clcidx = new Uint8Array([
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15
  ]);
  var code_tree = new Tree;
  var lengths = new Uint8Array(288 + 32);
  var offs = new Uint16Array(16);
  tinf_build_fixed_trees(sltree, sdtree);
  tinf_build_bits_base(length_bits, length_base, 4, 3);
  tinf_build_bits_base(dist_bits, dist_base, 2, 1);
  length_bits[28] = 0;
  length_base[28] = 258;
  module.exports = tinf_uncompress;
});

// node_modules/unicode-trie/swap.js
var require_swap = __commonJS((exports, module) => {
  var isBigEndian = new Uint8Array(new Uint32Array([305419896]).buffer)[0] === 18;
  var swap = (b, n3, m3) => {
    let i3 = b[n3];
    b[n3] = b[m3];
    b[m3] = i3;
  };
  var swap32 = (array5) => {
    const len = array5.length;
    for (let i3 = 0;i3 < len; i3 += 4) {
      swap(array5, i3, i3 + 3);
      swap(array5, i3 + 1, i3 + 2);
    }
  };
  var swap32LE = (array5) => {
    if (isBigEndian) {
      swap32(array5);
    }
  };
  module.exports = {
    swap32LE
  };
});

// node_modules/unicode-trie/index.js
var require_unicode_trie = __commonJS((exports, module) => {
  var inflate = require_tiny_inflate();
  var { swap32LE } = require_swap();
  var SHIFT_1 = 6 + 5;
  var SHIFT_2 = 5;
  var SHIFT_1_2 = SHIFT_1 - SHIFT_2;
  var OMITTED_BMP_INDEX_1_LENGTH = 65536 >> SHIFT_1;
  var INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;
  var INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;
  var INDEX_SHIFT = 2;
  var DATA_BLOCK_LENGTH = 1 << SHIFT_2;
  var DATA_MASK = DATA_BLOCK_LENGTH - 1;
  var LSCP_INDEX_2_OFFSET = 65536 >> SHIFT_2;
  var LSCP_INDEX_2_LENGTH = 1024 >> SHIFT_2;
  var INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;
  var UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;
  var UTF8_2B_INDEX_2_LENGTH = 2048 >> 6;
  var INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;
  var DATA_GRANULARITY = 1 << INDEX_SHIFT;

  class UnicodeTrie {
    constructor(data) {
      const isBuffer = typeof data.readUInt32BE === "function" && typeof data.slice === "function";
      if (isBuffer || data instanceof Uint8Array) {
        let uncompressedLength;
        if (isBuffer) {
          this.highStart = data.readUInt32LE(0);
          this.errorValue = data.readUInt32LE(4);
          uncompressedLength = data.readUInt32LE(8);
          data = data.slice(12);
        } else {
          const view = new DataView(data.buffer);
          this.highStart = view.getUint32(0, true);
          this.errorValue = view.getUint32(4, true);
          uncompressedLength = view.getUint32(8, true);
          data = data.subarray(12);
        }
        data = inflate(data, new Uint8Array(uncompressedLength));
        data = inflate(data, new Uint8Array(uncompressedLength));
        swap32LE(data);
        this.data = new Uint32Array(data.buffer);
      } else {
        ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);
      }
    }
    get(codePoint) {
      let index;
      if (codePoint < 0 || codePoint > 1114111) {
        return this.errorValue;
      }
      if (codePoint < 55296 || codePoint > 56319 && codePoint <= 65535) {
        index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);
        return this.data[index];
      }
      if (codePoint <= 65535) {
        index = (this.data[LSCP_INDEX_2_OFFSET + (codePoint - 55296 >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);
        return this.data[index];
      }
      if (codePoint < this.highStart) {
        index = this.data[INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> SHIFT_1)];
        index = this.data[index + (codePoint >> SHIFT_2 & INDEX_2_MASK)];
        index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);
        return this.data[index];
      }
      return this.data[this.data.length - DATA_GRANULARITY];
    }
  }
  module.exports = UnicodeTrie;
});

// node_modules/dfa/index.js
var require_dfa = __commonJS((exports, module) => {
  var INITIAL_STATE = 1;
  var FAIL_STATE = 0;

  class StateMachine {
    constructor(dfa) {
      this.stateTable = dfa.stateTable;
      this.accepting = dfa.accepting;
      this.tags = dfa.tags;
    }
    match(str) {
      var self2 = this;
      return {
        *[Symbol.iterator]() {
          var state = INITIAL_STATE;
          var startRun = null;
          var lastAccepting = null;
          var lastState = null;
          for (var p3 = 0;p3 < str.length; p3++) {
            var c3 = str[p3];
            lastState = state;
            state = self2.stateTable[state][c3];
            if (state === FAIL_STATE) {
              if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {
                yield [startRun, lastAccepting, self2.tags[lastState]];
              }
              state = self2.stateTable[INITIAL_STATE][c3];
              startRun = null;
            }
            if (state !== FAIL_STATE && startRun == null) {
              startRun = p3;
            }
            if (self2.accepting[state]) {
              lastAccepting = p3;
            }
            if (state === FAIL_STATE) {
              state = INITIAL_STATE;
            }
          }
          if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {
            yield [startRun, lastAccepting, self2.tags[state]];
          }
        }
      };
    }
    apply(str, actions) {
      for (var [start, end, tags] of this.match(str)) {
        for (var tag of tags) {
          if (typeof actions[tag] === "function") {
            actions[tag](start, end, str.slice(start, end + 1));
          }
        }
      }
    }
  }
  module.exports = StateMachine;
});

// node_modules/brotli/dec/streams.js
var require_streams2 = __commonJS((exports) => {
  function BrotliInput(buffer) {
    this.buffer = buffer;
    this.pos = 0;
  }
  function BrotliOutput(buf) {
    this.buffer = buf;
    this.pos = 0;
  }
  BrotliInput.prototype.read = function(buf, i3, count) {
    if (this.pos + count > this.buffer.length) {
      count = this.buffer.length - this.pos;
    }
    for (var p3 = 0;p3 < count; p3++)
      buf[i3 + p3] = this.buffer[this.pos + p3];
    this.pos += count;
    return count;
  };
  exports.BrotliInput = BrotliInput;
  BrotliOutput.prototype.write = function(buf, count) {
    if (this.pos + count > this.buffer.length)
      throw new Error("Output buffer is not large enough");
    this.buffer.set(buf.subarray(0, count), this.pos);
    this.pos += count;
    return count;
  };
  exports.BrotliOutput = BrotliOutput;
});

// node_modules/brotli/dec/bit_reader.js
var require_bit_reader = __commonJS((exports, module) => {
  function BrotliBitReader(input) {
    this.buf_ = new Uint8Array(BROTLI_IBUF_SIZE);
    this.input_ = input;
    this.reset();
  }
  var BROTLI_READ_SIZE = 4096;
  var BROTLI_IBUF_SIZE = 2 * BROTLI_READ_SIZE + 32;
  var BROTLI_IBUF_MASK = 2 * BROTLI_READ_SIZE - 1;
  var kBitMask = new Uint32Array([
    0,
    1,
    3,
    7,
    15,
    31,
    63,
    127,
    255,
    511,
    1023,
    2047,
    4095,
    8191,
    16383,
    32767,
    65535,
    131071,
    262143,
    524287,
    1048575,
    2097151,
    4194303,
    8388607,
    16777215
  ]);
  BrotliBitReader.READ_SIZE = BROTLI_READ_SIZE;
  BrotliBitReader.IBUF_MASK = BROTLI_IBUF_MASK;
  BrotliBitReader.prototype.reset = function() {
    this.buf_ptr_ = 0;
    this.val_ = 0;
    this.pos_ = 0;
    this.bit_pos_ = 0;
    this.bit_end_pos_ = 0;
    this.eos_ = 0;
    this.readMoreInput();
    for (var i3 = 0;i3 < 4; i3++) {
      this.val_ |= this.buf_[this.pos_] << 8 * i3;
      ++this.pos_;
    }
    return this.bit_end_pos_ > 0;
  };
  BrotliBitReader.prototype.readMoreInput = function() {
    if (this.bit_end_pos_ > 256) {
      return;
    } else if (this.eos_) {
      if (this.bit_pos_ > this.bit_end_pos_)
        throw new Error("Unexpected end of input " + this.bit_pos_ + " " + this.bit_end_pos_);
    } else {
      var dst = this.buf_ptr_;
      var bytes_read = this.input_.read(this.buf_, dst, BROTLI_READ_SIZE);
      if (bytes_read < 0) {
        throw new Error("Unexpected end of input");
      }
      if (bytes_read < BROTLI_READ_SIZE) {
        this.eos_ = 1;
        for (var p3 = 0;p3 < 32; p3++)
          this.buf_[dst + bytes_read + p3] = 0;
      }
      if (dst === 0) {
        for (var p3 = 0;p3 < 32; p3++)
          this.buf_[(BROTLI_READ_SIZE << 1) + p3] = this.buf_[p3];
        this.buf_ptr_ = BROTLI_READ_SIZE;
      } else {
        this.buf_ptr_ = 0;
      }
      this.bit_end_pos_ += bytes_read << 3;
    }
  };
  BrotliBitReader.prototype.fillBitWindow = function() {
    while (this.bit_pos_ >= 8) {
      this.val_ >>>= 8;
      this.val_ |= this.buf_[this.pos_ & BROTLI_IBUF_MASK] << 24;
      ++this.pos_;
      this.bit_pos_ = this.bit_pos_ - 8 >>> 0;
      this.bit_end_pos_ = this.bit_end_pos_ - 8 >>> 0;
    }
  };
  BrotliBitReader.prototype.readBits = function(n_bits) {
    if (32 - this.bit_pos_ < n_bits) {
      this.fillBitWindow();
    }
    var val = this.val_ >>> this.bit_pos_ & kBitMask[n_bits];
    this.bit_pos_ += n_bits;
    return val;
  };
  module.exports = BrotliBitReader;
});

// node_modules/brotli/dec/dictionary-data.js
var require_dictionary_data = __commonJS((exports) => {
  exports.dictionary = new Uint8Array([
    116,
    105,
    109,
    101,
    100,
    111,
    119,
    110,
    108,
    105,
    102,
    101,
    108,
    101,
    102,
    116,
    98,
    97,
    99,
    107,
    99,
    111,
    100,
    101,
    100,
    97,
    116,
    97,
    115,
    104,
    111,
    119,
    111,
    110,
    108,
    121,
    115,
    105,
    116,
    101,
    99,
    105,
    116,
    121,
    111,
    112,
    101,
    110,
    106,
    117,
    115,
    116,
    108,
    105,
    107,
    101,
    102,
    114,
    101,
    101,
    119,
    111,
    114,
    107,
    116,
    101,
    120,
    116,
    121,
    101,
    97,
    114,
    111,
    118,
    101,
    114,
    98,
    111,
    100,
    121,
    108,
    111,
    118,
    101,
    102,
    111,
    114,
    109,
    98,
    111,
    111,
    107,
    112,
    108,
    97,
    121,
    108,
    105,
    118,
    101,
    108,
    105,
    110,
    101,
    104,
    101,
    108,
    112,
    104,
    111,
    109,
    101,
    115,
    105,
    100,
    101,
    109,
    111,
    114,
    101,
    119,
    111,
    114,
    100,
    108,
    111,
    110,
    103,
    116,
    104,
    101,
    109,
    118,
    105,
    101,
    119,
    102,
    105,
    110,
    100,
    112,
    97,
    103,
    101,
    100,
    97,
    121,
    115,
    102,
    117,
    108,
    108,
    104,
    101,
    97,
    100,
    116,
    101,
    114,
    109,
    101,
    97,
    99,
    104,
    97,
    114,
    101,
    97,
    102,
    114,
    111,
    109,
    116,
    114,
    117,
    101,
    109,
    97,
    114,
    107,
    97,
    98,
    108,
    101,
    117,
    112,
    111,
    110,
    104,
    105,
    103,
    104,
    100,
    97,
    116,
    101,
    108,
    97,
    110,
    100,
    110,
    101,
    119,
    115,
    101,
    118,
    101,
    110,
    110,
    101,
    120,
    116,
    99,
    97,
    115,
    101,
    98,
    111,
    116,
    104,
    112,
    111,
    115,
    116,
    117,
    115,
    101,
    100,
    109,
    97,
    100,
    101,
    104,
    97,
    110,
    100,
    104,
    101,
    114,
    101,
    119,
    104,
    97,
    116,
    110,
    97,
    109,
    101,
    76,
    105,
    110,
    107,
    98,
    108,
    111,
    103,
    115,
    105,
    122,
    101,
    98,
    97,
    115,
    101,
    104,
    101,
    108,
    100,
    109,
    97,
    107,
    101,
    109,
    97,
    105,
    110,
    117,
    115,
    101,
    114,
    39,
    41,
    32,
    43,
    104,
    111,
    108,
    100,
    101,
    110,
    100,
    115,
    119,
    105,
    116,
    104,
    78,
    101,
    119,
    115,
    114,
    101,
    97,
    100,
    119,
    101,
    114,
    101,
    115,
    105,
    103,
    110,
    116,
    97,
    107,
    101,
    104,
    97,
    118,
    101,
    103,
    97,
    109,
    101,
    115,
    101,
    101,
    110,
    99,
    97,
    108,
    108,
    112,
    97,
    116,
    104,
    119,
    101,
    108,
    108,
    112,
    108,
    117,
    115,
    109,
    101,
    110,
    117,
    102,
    105,
    108,
    109,
    112,
    97,
    114,
    116,
    106,
    111,
    105,
    110,
    116,
    104,
    105,
    115,
    108,
    105,
    115,
    116,
    103,
    111,
    111,
    100,
    110,
    101,
    101,
    100,
    119,
    97,
    121,
    115,
    119,
    101,
    115,
    116,
    106,
    111,
    98,
    115,
    109,
    105,
    110,
    100,
    97,
    108,
    115,
    111,
    108,
    111,
    103,
    111,
    114,
    105,
    99,
    104,
    117,
    115,
    101,
    115,
    108,
    97,
    115,
    116,
    116,
    101,
    97,
    109,
    97,
    114,
    109,
    121,
    102,
    111,
    111,
    100,
    107,
    105,
    110,
    103,
    119,
    105,
    108,
    108,
    101,
    97,
    115,
    116,
    119,
    97,
    114,
    100,
    98,
    101,
    115,
    116,
    102,
    105,
    114,
    101,
    80,
    97,
    103,
    101,
    107,
    110,
    111,
    119,
    97,
    119,
    97,
    121,
    46,
    112,
    110,
    103,
    109,
    111,
    118,
    101,
    116,
    104,
    97,
    110,
    108,
    111,
    97,
    100,
    103,
    105,
    118,
    101,
    115,
    101,
    108,
    102,
    110,
    111,
    116,
    101,
    109,
    117,
    99,
    104,
    102,
    101,
    101,
    100,
    109,
    97,
    110,
    121,
    114,
    111,
    99,
    107,
    105,
    99,
    111,
    110,
    111,
    110,
    99,
    101,
    108,
    111,
    111,
    107,
    104,
    105,
    100,
    101,
    100,
    105,
    101,
    100,
    72,
    111,
    109,
    101,
    114,
    117,
    108,
    101,
    104,
    111,
    115,
    116,
    97,
    106,
    97,
    120,
    105,
    110,
    102,
    111,
    99,
    108,
    117,
    98,
    108,
    97,
    119,
    115,
    108,
    101,
    115,
    115,
    104,
    97,
    108,
    102,
    115,
    111,
    109,
    101,
    115,
    117,
    99,
    104,
    122,
    111,
    110,
    101,
    49,
    48,
    48,
    37,
    111,
    110,
    101,
    115,
    99,
    97,
    114,
    101,
    84,
    105,
    109,
    101,
    114,
    97,
    99,
    101,
    98,
    108,
    117,
    101,
    102,
    111,
    117,
    114,
    119,
    101,
    101,
    107,
    102,
    97,
    99,
    101,
    104,
    111,
    112,
    101,
    103,
    97,
    118,
    101,
    104,
    97,
    114,
    100,
    108,
    111,
    115,
    116,
    119,
    104,
    101,
    110,
    112,
    97,
    114,
    107,
    107,
    101,
    112,
    116,
    112,
    97,
    115,
    115,
    115,
    104,
    105,
    112,
    114,
    111,
    111,
    109,
    72,
    84,
    77,
    76,
    112,
    108,
    97,
    110,
    84,
    121,
    112,
    101,
    100,
    111,
    110,
    101,
    115,
    97,
    118,
    101,
    107,
    101,
    101,
    112,
    102,
    108,
    97,
    103,
    108,
    105,
    110,
    107,
    115,
    111,
    108,
    100,
    102,
    105,
    118,
    101,
    116,
    111,
    111,
    107,
    114,
    97,
    116,
    101,
    116,
    111,
    119,
    110,
    106,
    117,
    109,
    112,
    116,
    104,
    117,
    115,
    100,
    97,
    114,
    107,
    99,
    97,
    114,
    100,
    102,
    105,
    108,
    101,
    102,
    101,
    97,
    114,
    115,
    116,
    97,
    121,
    107,
    105,
    108,
    108,
    116,
    104,
    97,
    116,
    102,
    97,
    108,
    108,
    97,
    117,
    116,
    111,
    101,
    118,
    101,
    114,
    46,
    99,
    111,
    109,
    116,
    97,
    108,
    107,
    115,
    104,
    111,
    112,
    118,
    111,
    116,
    101,
    100,
    101,
    101,
    112,
    109,
    111,
    100,
    101,
    114,
    101,
    115,
    116,
    116,
    117,
    114,
    110,
    98,
    111,
    114,
    110,
    98,
    97,
    110,
    100,
    102,
    101,
    108,
    108,
    114,
    111,
    115,
    101,
    117,
    114,
    108,
    40,
    115,
    107,
    105,
    110,
    114,
    111,
    108,
    101,
    99,
    111,
    109,
    101,
    97,
    99,
    116,
    115,
    97,
    103,
    101,
    115,
    109,
    101,
    101,
    116,
    103,
    111,
    108,
    100,
    46,
    106,
    112,
    103,
    105,
    116,
    101,
    109,
    118,
    97,
    114,
    121,
    102,
    101,
    108,
    116,
    116,
    104,
    101,
    110,
    115,
    101,
    110,
    100,
    100,
    114,
    111,
    112,
    86,
    105,
    101,
    119,
    99,
    111,
    112,
    121,
    49,
    46,
    48,
    34,
    60,
    47,
    97,
    62,
    115,
    116,
    111,
    112,
    101,
    108,
    115,
    101,
    108,
    105,
    101,
    115,
    116,
    111,
    117,
    114,
    112,
    97,
    99,
    107,
    46,
    103,
    105,
    102,
    112,
    97,
    115,
    116,
    99,
    115,
    115,
    63,
    103,
    114,
    97,
    121,
    109,
    101,
    97,
    110,
    38,
    103,
    116,
    59,
    114,
    105,
    100,
    101,
    115,
    104,
    111,
    116,
    108,
    97,
    116,
    101,
    115,
    97,
    105,
    100,
    114,
    111,
    97,
    100,
    118,
    97,
    114,
    32,
    102,
    101,
    101,
    108,
    106,
    111,
    104,
    110,
    114,
    105,
    99,
    107,
    112,
    111,
    114,
    116,
    102,
    97,
    115,
    116,
    39,
    85,
    65,
    45,
    100,
    101,
    97,
    100,
    60,
    47,
    98,
    62,
    112,
    111,
    111,
    114,
    98,
    105,
    108,
    108,
    116,
    121,
    112,
    101,
    85,
    46,
    83,
    46,
    119,
    111,
    111,
    100,
    109,
    117,
    115,
    116,
    50,
    112,
    120,
    59,
    73,
    110,
    102,
    111,
    114,
    97,
    110,
    107,
    119,
    105,
    100,
    101,
    119,
    97,
    110,
    116,
    119,
    97,
    108,
    108,
    108,
    101,
    97,
    100,
    91,
    48,
    93,
    59,
    112,
    97,
    117,
    108,
    119,
    97,
    118,
    101,
    115,
    117,
    114,
    101,
    36,
    40,
    39,
    35,
    119,
    97,
    105,
    116,
    109,
    97,
    115,
    115,
    97,
    114,
    109,
    115,
    103,
    111,
    101,
    115,
    103,
    97,
    105,
    110,
    108,
    97,
    110,
    103,
    112,
    97,
    105,
    100,
    33,
    45,
    45,
    32,
    108,
    111,
    99,
    107,
    117,
    110,
    105,
    116,
    114,
    111,
    111,
    116,
    119,
    97,
    108,
    107,
    102,
    105,
    114,
    109,
    119,
    105,
    102,
    101,
    120,
    109,
    108,
    34,
    115,
    111,
    110,
    103,
    116,
    101,
    115,
    116,
    50,
    48,
    112,
    120,
    107,
    105,
    110,
    100,
    114,
    111,
    119,
    115,
    116,
    111,
    111,
    108,
    102,
    111,
    110,
    116,
    109,
    97,
    105,
    108,
    115,
    97,
    102,
    101,
    115,
    116,
    97,
    114,
    109,
    97,
    112,
    115,
    99,
    111,
    114,
    101,
    114,
    97,
    105,
    110,
    102,
    108,
    111,
    119,
    98,
    97,
    98,
    121,
    115,
    112,
    97,
    110,
    115,
    97,
    121,
    115,
    52,
    112,
    120,
    59,
    54,
    112,
    120,
    59,
    97,
    114,
    116,
    115,
    102,
    111,
    111,
    116,
    114,
    101,
    97,
    108,
    119,
    105,
    107,
    105,
    104,
    101,
    97,
    116,
    115,
    116,
    101,
    112,
    116,
    114,
    105,
    112,
    111,
    114,
    103,
    47,
    108,
    97,
    107,
    101,
    119,
    101,
    97,
    107,
    116,
    111,
    108,
    100,
    70,
    111,
    114,
    109,
    99,
    97,
    115,
    116,
    102,
    97,
    110,
    115,
    98,
    97,
    110,
    107,
    118,
    101,
    114,
    121,
    114,
    117,
    110,
    115,
    106,
    117,
    108,
    121,
    116,
    97,
    115,
    107,
    49,
    112,
    120,
    59,
    103,
    111,
    97,
    108,
    103,
    114,
    101,
    119,
    115,
    108,
    111,
    119,
    101,
    100,
    103,
    101,
    105,
    100,
    61,
    34,
    115,
    101,
    116,
    115,
    53,
    112,
    120,
    59,
    46,
    106,
    115,
    63,
    52,
    48,
    112,
    120,
    105,
    102,
    32,
    40,
    115,
    111,
    111,
    110,
    115,
    101,
    97,
    116,
    110,
    111,
    110,
    101,
    116,
    117,
    98,
    101,
    122,
    101,
    114,
    111,
    115,
    101,
    110,
    116,
    114,
    101,
    101,
    100,
    102,
    97,
    99,
    116,
    105,
    110,
    116,
    111,
    103,
    105,
    102,
    116,
    104,
    97,
    114,
    109,
    49,
    56,
    112,
    120,
    99,
    97,
    109,
    101,
    104,
    105,
    108,
    108,
    98,
    111,
    108,
    100,
    122,
    111,
    111,
    109,
    118,
    111,
    105,
    100,
    101,
    97,
    115,
    121,
    114,
    105,
    110,
    103,
    102,
    105,
    108,
    108,
    112,
    101,
    97,
    107,
    105,
    110,
    105,
    116,
    99,
    111,
    115,
    116,
    51,
    112,
    120,
    59,
    106,
    97,
    99,
    107,
    116,
    97,
    103,
    115,
    98,
    105,
    116,
    115,
    114,
    111,
    108,
    108,
    101,
    100,
    105,
    116,
    107,
    110,
    101,
    119,
    110,
    101,
    97,
    114,
    60,
    33,
    45,
    45,
    103,
    114,
    111,
    119,
    74,
    83,
    79,
    78,
    100,
    117,
    116,
    121,
    78,
    97,
    109,
    101,
    115,
    97,
    108,
    101,
    121,
    111,
    117,
    32,
    108,
    111,
    116,
    115,
    112,
    97,
    105,
    110,
    106,
    97,
    122,
    122,
    99,
    111,
    108,
    100,
    101,
    121,
    101,
    115,
    102,
    105,
    115,
    104,
    119,
    119,
    119,
    46,
    114,
    105,
    115,
    107,
    116,
    97,
    98,
    115,
    112,
    114,
    101,
    118,
    49,
    48,
    112,
    120,
    114,
    105,
    115,
    101,
    50,
    53,
    112,
    120,
    66,
    108,
    117,
    101,
    100,
    105,
    110,
    103,
    51,
    48,
    48,
    44,
    98,
    97,
    108,
    108,
    102,
    111,
    114,
    100,
    101,
    97,
    114,
    110,
    119,
    105,
    108,
    100,
    98,
    111,
    120,
    46,
    102,
    97,
    105,
    114,
    108,
    97,
    99,
    107,
    118,
    101,
    114,
    115,
    112,
    97,
    105,
    114,
    106,
    117,
    110,
    101,
    116,
    101,
    99,
    104,
    105,
    102,
    40,
    33,
    112,
    105,
    99,
    107,
    101,
    118,
    105,
    108,
    36,
    40,
    34,
    35,
    119,
    97,
    114,
    109,
    108,
    111,
    114,
    100,
    100,
    111,
    101,
    115,
    112,
    117,
    108,
    108,
    44,
    48,
    48,
    48,
    105,
    100,
    101,
    97,
    100,
    114,
    97,
    119,
    104,
    117,
    103,
    101,
    115,
    112,
    111,
    116,
    102,
    117,
    110,
    100,
    98,
    117,
    114,
    110,
    104,
    114,
    101,
    102,
    99,
    101,
    108,
    108,
    107,
    101,
    121,
    115,
    116,
    105,
    99,
    107,
    104,
    111,
    117,
    114,
    108,
    111,
    115,
    115,
    102,
    117,
    101,
    108,
    49,
    50,
    112,
    120,
    115,
    117,
    105,
    116,
    100,
    101,
    97,
    108,
    82,
    83,
    83,
    34,
    97,
    103,
    101,
    100,
    103,
    114,
    101,
    121,
    71,
    69,
    84,
    34,
    101,
    97,
    115,
    101,
    97,
    105,
    109,
    115,
    103,
    105,
    114,
    108,
    97,
    105,
    100,
    115,
    56,
    112,
    120,
    59,
    110,
    97,
    118,
    121,
    103,
    114,
    105,
    100,
    116,
    105,
    112,
    115,
    35,
    57,
    57,
    57,
    119,
    97,
    114,
    115,
    108,
    97,
    100,
    121,
    99,
    97,
    114,
    115,
    41,
    59,
    32,
    125,
    112,
    104,
    112,
    63,
    104,
    101,
    108,
    108,
    116,
    97,
    108,
    108,
    119,
    104,
    111,
    109,
    122,
    104,
    58,
    229,
    42,
    47,
    13,
    10,
    32,
    49,
    48,
    48,
    104,
    97,
    108,
    108,
    46,
    10,
    10,
    65,
    55,
    112,
    120,
    59,
    112,
    117,
    115,
    104,
    99,
    104,
    97,
    116,
    48,
    112,
    120,
    59,
    99,
    114,
    101,
    119,
    42,
    47,
    60,
    47,
    104,
    97,
    115,
    104,
    55,
    53,
    112,
    120,
    102,
    108,
    97,
    116,
    114,
    97,
    114,
    101,
    32,
    38,
    38,
    32,
    116,
    101,
    108,
    108,
    99,
    97,
    109,
    112,
    111,
    110,
    116,
    111,
    108,
    97,
    105,
    100,
    109,
    105,
    115,
    115,
    115,
    107,
    105,
    112,
    116,
    101,
    110,
    116,
    102,
    105,
    110,
    101,
    109,
    97,
    108,
    101,
    103,
    101,
    116,
    115,
    112,
    108,
    111,
    116,
    52,
    48,
    48,
    44,
    13,
    10,
    13,
    10,
    99,
    111,
    111,
    108,
    102,
    101,
    101,
    116,
    46,
    112,
    104,
    112,
    60,
    98,
    114,
    62,
    101,
    114,
    105,
    99,
    109,
    111,
    115,
    116,
    103,
    117,
    105,
    100,
    98,
    101,
    108,
    108,
    100,
    101,
    115,
    99,
    104,
    97,
    105,
    114,
    109,
    97,
    116,
    104,
    97,
    116,
    111,
    109,
    47,
    105,
    109,
    103,
    38,
    35,
    56,
    50,
    108,
    117,
    99,
    107,
    99,
    101,
    110,
    116,
    48,
    48,
    48,
    59,
    116,
    105,
    110,
    121,
    103,
    111,
    110,
    101,
    104,
    116,
    109,
    108,
    115,
    101,
    108,
    108,
    100,
    114,
    117,
    103,
    70,
    82,
    69,
    69,
    110,
    111,
    100,
    101,
    110,
    105,
    99,
    107,
    63,
    105,
    100,
    61,
    108,
    111,
    115,
    101,
    110,
    117,
    108,
    108,
    118,
    97,
    115,
    116,
    119,
    105,
    110,
    100,
    82,
    83,
    83,
    32,
    119,
    101,
    97,
    114,
    114,
    101,
    108,
    121,
    98,
    101,
    101,
    110,
    115,
    97,
    109,
    101,
    100,
    117,
    107,
    101,
    110,
    97,
    115,
    97,
    99,
    97,
    112,
    101,
    119,
    105,
    115,
    104,
    103,
    117,
    108,
    102,
    84,
    50,
    51,
    58,
    104,
    105,
    116,
    115,
    115,
    108,
    111,
    116,
    103,
    97,
    116,
    101,
    107,
    105,
    99,
    107,
    98,
    108,
    117,
    114,
    116,
    104,
    101,
    121,
    49,
    53,
    112,
    120,
    39,
    39,
    41,
    59,
    41,
    59,
    34,
    62,
    109,
    115,
    105,
    101,
    119,
    105,
    110,
    115,
    98,
    105,
    114,
    100,
    115,
    111,
    114,
    116,
    98,
    101,
    116,
    97,
    115,
    101,
    101,
    107,
    84,
    49,
    56,
    58,
    111,
    114,
    100,
    115,
    116,
    114,
    101,
    101,
    109,
    97,
    108,
    108,
    54,
    48,
    112,
    120,
    102,
    97,
    114,
    109,
    226,
    128,
    153,
    115,
    98,
    111,
    121,
    115,
    91,
    48,
    93,
    46,
    39,
    41,
    59,
    34,
    80,
    79,
    83,
    84,
    98,
    101,
    97,
    114,
    107,
    105,
    100,
    115,
    41,
    59,
    125,
    125,
    109,
    97,
    114,
    121,
    116,
    101,
    110,
    100,
    40,
    85,
    75,
    41,
    113,
    117,
    97,
    100,
    122,
    104,
    58,
    230,
    45,
    115,
    105,
    122,
    45,
    45,
    45,
    45,
    112,
    114,
    111,
    112,
    39,
    41,
    59,
    13,
    108,
    105,
    102,
    116,
    84,
    49,
    57,
    58,
    118,
    105,
    99,
    101,
    97,
    110,
    100,
    121,
    100,
    101,
    98,
    116,
    62,
    82,
    83,
    83,
    112,
    111,
    111,
    108,
    110,
    101,
    99,
    107,
    98,
    108,
    111,
    119,
    84,
    49,
    54,
    58,
    100,
    111,
    111,
    114,
    101,
    118,
    97,
    108,
    84,
    49,
    55,
    58,
    108,
    101,
    116,
    115,
    102,
    97,
    105,
    108,
    111,
    114,
    97,
    108,
    112,
    111,
    108,
    108,
    110,
    111,
    118,
    97,
    99,
    111,
    108,
    115,
    103,
    101,
    110,
    101,
    32,
    226,
    128,
    148,
    115,
    111,
    102,
    116,
    114,
    111,
    109,
    101,
    116,
    105,
    108,
    108,
    114,
    111,
    115,
    115,
    60,
    104,
    51,
    62,
    112,
    111,
    117,
    114,
    102,
    97,
    100,
    101,
    112,
    105,
    110,
    107,
    60,
    116,
    114,
    62,
    109,
    105,
    110,
    105,
    41,
    124,
    33,
    40,
    109,
    105,
    110,
    101,
    122,
    104,
    58,
    232,
    98,
    97,
    114,
    115,
    104,
    101,
    97,
    114,
    48,
    48,
    41,
    59,
    109,
    105,
    108,
    107,
    32,
    45,
    45,
    62,
    105,
    114,
    111,
    110,
    102,
    114,
    101,
    100,
    100,
    105,
    115,
    107,
    119,
    101,
    110,
    116,
    115,
    111,
    105,
    108,
    112,
    117,
    116,
    115,
    47,
    106,
    115,
    47,
    104,
    111,
    108,
    121,
    84,
    50,
    50,
    58,
    73,
    83,
    66,
    78,
    84,
    50,
    48,
    58,
    97,
    100,
    97,
    109,
    115,
    101,
    101,
    115,
    60,
    104,
    50,
    62,
    106,
    115,
    111,
    110,
    39,
    44,
    32,
    39,
    99,
    111,
    110,
    116,
    84,
    50,
    49,
    58,
    32,
    82,
    83,
    83,
    108,
    111,
    111,
    112,
    97,
    115,
    105,
    97,
    109,
    111,
    111,
    110,
    60,
    47,
    112,
    62,
    115,
    111,
    117,
    108,
    76,
    73,
    78,
    69,
    102,
    111,
    114,
    116,
    99,
    97,
    114,
    116,
    84,
    49,
    52,
    58,
    60,
    104,
    49,
    62,
    56,
    48,
    112,
    120,
    33,
    45,
    45,
    60,
    57,
    112,
    120,
    59,
    84,
    48,
    52,
    58,
    109,
    105,
    107,
    101,
    58,
    52,
    54,
    90,
    110,
    105,
    99,
    101,
    105,
    110,
    99,
    104,
    89,
    111,
    114,
    107,
    114,
    105,
    99,
    101,
    122,
    104,
    58,
    228,
    39,
    41,
    41,
    59,
    112,
    117,
    114,
    101,
    109,
    97,
    103,
    101,
    112,
    97,
    114,
    97,
    116,
    111,
    110,
    101,
    98,
    111,
    110,
    100,
    58,
    51,
    55,
    90,
    95,
    111,
    102,
    95,
    39,
    93,
    41,
    59,
    48,
    48,
    48,
    44,
    122,
    104,
    58,
    231,
    116,
    97,
    110,
    107,
    121,
    97,
    114,
    100,
    98,
    111,
    119,
    108,
    98,
    117,
    115,
    104,
    58,
    53,
    54,
    90,
    74,
    97,
    118,
    97,
    51,
    48,
    112,
    120,
    10,
    124,
    125,
    10,
    37,
    67,
    51,
    37,
    58,
    51,
    52,
    90,
    106,
    101,
    102,
    102,
    69,
    88,
    80,
    73,
    99,
    97,
    115,
    104,
    118,
    105,
    115,
    97,
    103,
    111,
    108,
    102,
    115,
    110,
    111,
    119,
    122,
    104,
    58,
    233,
    113,
    117,
    101,
    114,
    46,
    99,
    115,
    115,
    115,
    105,
    99,
    107,
    109,
    101,
    97,
    116,
    109,
    105,
    110,
    46,
    98,
    105,
    110,
    100,
    100,
    101,
    108,
    108,
    104,
    105,
    114,
    101,
    112,
    105,
    99,
    115,
    114,
    101,
    110,
    116,
    58,
    51,
    54,
    90,
    72,
    84,
    84,
    80,
    45,
    50,
    48,
    49,
    102,
    111,
    116,
    111,
    119,
    111,
    108,
    102,
    69,
    78,
    68,
    32,
    120,
    98,
    111,
    120,
    58,
    53,
    52,
    90,
    66,
    79,
    68,
    89,
    100,
    105,
    99,
    107,
    59,
    10,
    125,
    10,
    101,
    120,
    105,
    116,
    58,
    51,
    53,
    90,
    118,
    97,
    114,
    115,
    98,
    101,
    97,
    116,
    39,
    125,
    41,
    59,
    100,
    105,
    101,
    116,
    57,
    57,
    57,
    59,
    97,
    110,
    110,
    101,
    125,
    125,
    60,
    47,
    91,
    105,
    93,
    46,
    76,
    97,
    110,
    103,
    107,
    109,
    194,
    178,
    119,
    105,
    114,
    101,
    116,
    111,
    121,
    115,
    97,
    100,
    100,
    115,
    115,
    101,
    97,
    108,
    97,
    108,
    101,
    120,
    59,
    10,
    9,
    125,
    101,
    99,
    104,
    111,
    110,
    105,
    110,
    101,
    46,
    111,
    114,
    103,
    48,
    48,
    53,
    41,
    116,
    111,
    110,
    121,
    106,
    101,
    119,
    115,
    115,
    97,
    110,
    100,
    108,
    101,
    103,
    115,
    114,
    111,
    111,
    102,
    48,
    48,
    48,
    41,
    32,
    50,
    48,
    48,
    119,
    105,
    110,
    101,
    103,
    101,
    97,
    114,
    100,
    111,
    103,
    115,
    98,
    111,
    111,
    116,
    103,
    97,
    114,
    121,
    99,
    117,
    116,
    115,
    116,
    121,
    108,
    101,
    116,
    101,
    109,
    112,
    116,
    105,
    111,
    110,
    46,
    120,
    109,
    108,
    99,
    111,
    99,
    107,
    103,
    97,
    110,
    103,
    36,
    40,
    39,
    46,
    53,
    48,
    112,
    120,
    80,
    104,
    46,
    68,
    109,
    105,
    115,
    99,
    97,
    108,
    97,
    110,
    108,
    111,
    97,
    110,
    100,
    101,
    115,
    107,
    109,
    105,
    108,
    101,
    114,
    121,
    97,
    110,
    117,
    110,
    105,
    120,
    100,
    105,
    115,
    99,
    41,
    59,
    125,
    10,
    100,
    117,
    115,
    116,
    99,
    108,
    105,
    112,
    41,
    46,
    10,
    10,
    55,
    48,
    112,
    120,
    45,
    50,
    48,
    48,
    68,
    86,
    68,
    115,
    55,
    93,
    62,
    60,
    116,
    97,
    112,
    101,
    100,
    101,
    109,
    111,
    105,
    43,
    43,
    41,
    119,
    97,
    103,
    101,
    101,
    117,
    114,
    111,
    112,
    104,
    105,
    108,
    111,
    112,
    116,
    115,
    104,
    111,
    108,
    101,
    70,
    65,
    81,
    115,
    97,
    115,
    105,
    110,
    45,
    50,
    54,
    84,
    108,
    97,
    98,
    115,
    112,
    101,
    116,
    115,
    85,
    82,
    76,
    32,
    98,
    117,
    108,
    107,
    99,
    111,
    111,
    107,
    59,
    125,
    13,
    10,
    72,
    69,
    65,
    68,
    91,
    48,
    93,
    41,
    97,
    98,
    98,
    114,
    106,
    117,
    97,
    110,
    40,
    49,
    57,
    56,
    108,
    101,
    115,
    104,
    116,
    119,
    105,
    110,
    60,
    47,
    105,
    62,
    115,
    111,
    110,
    121,
    103,
    117,
    121,
    115,
    102,
    117,
    99,
    107,
    112,
    105,
    112,
    101,
    124,
    45,
    10,
    33,
    48,
    48,
    50,
    41,
    110,
    100,
    111,
    119,
    91,
    49,
    93,
    59,
    91,
    93,
    59,
    10,
    76,
    111,
    103,
    32,
    115,
    97,
    108,
    116,
    13,
    10,
    9,
    9,
    98,
    97,
    110,
    103,
    116,
    114,
    105,
    109,
    98,
    97,
    116,
    104,
    41,
    123,
    13,
    10,
    48,
    48,
    112,
    120,
    10,
    125,
    41,
    59,
    107,
    111,
    58,
    236,
    102,
    101,
    101,
    115,
    97,
    100,
    62,
    13,
    115,
    58,
    47,
    47,
    32,
    91,
    93,
    59,
    116,
    111,
    108,
    108,
    112,
    108,
    117,
    103,
    40,
    41,
    123,
    10,
    123,
    13,
    10,
    32,
    46,
    106,
    115,
    39,
    50,
    48,
    48,
    112,
    100,
    117,
    97,
    108,
    98,
    111,
    97,
    116,
    46,
    74,
    80,
    71,
    41,
    59,
    10,
    125,
    113,
    117,
    111,
    116,
    41,
    59,
    10,
    10,
    39,
    41,
    59,
    10,
    13,
    10,
    125,
    13,
    50,
    48,
    49,
    52,
    50,
    48,
    49,
    53,
    50,
    48,
    49,
    54,
    50,
    48,
    49,
    55,
    50,
    48,
    49,
    56,
    50,
    48,
    49,
    57,
    50,
    48,
    50,
    48,
    50,
    48,
    50,
    49,
    50,
    48,
    50,
    50,
    50,
    48,
    50,
    51,
    50,
    48,
    50,
    52,
    50,
    48,
    50,
    53,
    50,
    48,
    50,
    54,
    50,
    48,
    50,
    55,
    50,
    48,
    50,
    56,
    50,
    48,
    50,
    57,
    50,
    48,
    51,
    48,
    50,
    48,
    51,
    49,
    50,
    48,
    51,
    50,
    50,
    48,
    51,
    51,
    50,
    48,
    51,
    52,
    50,
    48,
    51,
    53,
    50,
    48,
    51,
    54,
    50,
    48,
    51,
    55,
    50,
    48,
    49,
    51,
    50,
    48,
    49,
    50,
    50,
    48,
    49,
    49,
    50,
    48,
    49,
    48,
    50,
    48,
    48,
    57,
    50,
    48,
    48,
    56,
    50,
    48,
    48,
    55,
    50,
    48,
    48,
    54,
    50,
    48,
    48,
    53,
    50,
    48,
    48,
    52,
    50,
    48,
    48,
    51,
    50,
    48,
    48,
    50,
    50,
    48,
    48,
    49,
    50,
    48,
    48,
    48,
    49,
    57,
    57,
    57,
    49,
    57,
    57,
    56,
    49,
    57,
    57,
    55,
    49,
    57,
    57,
    54,
    49,
    57,
    57,
    53,
    49,
    57,
    57,
    52,
    49,
    57,
    57,
    51,
    49,
    57,
    57,
    50,
    49,
    57,
    57,
    49,
    49,
    57,
    57,
    48,
    49,
    57,
    56,
    57,
    49,
    57,
    56,
    56,
    49,
    57,
    56,
    55,
    49,
    57,
    56,
    54,
    49,
    57,
    56,
    53,
    49,
    57,
    56,
    52,
    49,
    57,
    56,
    51,
    49,
    57,
    56,
    50,
    49,
    57,
    56,
    49,
    49,
    57,
    56,
    48,
    49,
    57,
    55,
    57,
    49,
    57,
    55,
    56,
    49,
    57,
    55,
    55,
    49,
    57,
    55,
    54,
    49,
    57,
    55,
    53,
    49,
    57,
    55,
    52,
    49,
    57,
    55,
    51,
    49,
    57,
    55,
    50,
    49,
    57,
    55,
    49,
    49,
    57,
    55,
    48,
    49,
    57,
    54,
    57,
    49,
    57,
    54,
    56,
    49,
    57,
    54,
    55,
    49,
    57,
    54,
    54,
    49,
    57,
    54,
    53,
    49,
    57,
    54,
    52,
    49,
    57,
    54,
    51,
    49,
    57,
    54,
    50,
    49,
    57,
    54,
    49,
    49,
    57,
    54,
    48,
    49,
    57,
    53,
    57,
    49,
    57,
    53,
    56,
    49,
    57,
    53,
    55,
    49,
    57,
    53,
    54,
    49,
    57,
    53,
    53,
    49,
    57,
    53,
    52,
    49,
    57,
    53,
    51,
    49,
    57,
    53,
    50,
    49,
    57,
    53,
    49,
    49,
    57,
    53,
    48,
    49,
    48,
    48,
    48,
    49,
    48,
    50,
    52,
    49,
    51,
    57,
    52,
    48,
    48,
    48,
    48,
    57,
    57,
    57,
    57,
    99,
    111,
    109,
    111,
    109,
    195,
    161,
    115,
    101,
    115,
    116,
    101,
    101,
    115,
    116,
    97,
    112,
    101,
    114,
    111,
    116,
    111,
    100,
    111,
    104,
    97,
    99,
    101,
    99,
    97,
    100,
    97,
    97,
    195,
    177,
    111,
    98,
    105,
    101,
    110,
    100,
    195,
    173,
    97,
    97,
    115,
    195,
    173,
    118,
    105,
    100,
    97,
    99,
    97,
    115,
    111,
    111,
    116,
    114,
    111,
    102,
    111,
    114,
    111,
    115,
    111,
    108,
    111,
    111,
    116,
    114,
    97,
    99,
    117,
    97,
    108,
    100,
    105,
    106,
    111,
    115,
    105,
    100,
    111,
    103,
    114,
    97,
    110,
    116,
    105,
    112,
    111,
    116,
    101,
    109,
    97,
    100,
    101,
    98,
    101,
    97,
    108,
    103,
    111,
    113,
    117,
    195,
    169,
    101,
    115,
    116,
    111,
    110,
    97,
    100,
    97,
    116,
    114,
    101,
    115,
    112,
    111,
    99,
    111,
    99,
    97,
    115,
    97,
    98,
    97,
    106,
    111,
    116,
    111,
    100,
    97,
    115,
    105,
    110,
    111,
    97,
    103,
    117,
    97,
    112,
    117,
    101,
    115,
    117,
    110,
    111,
    115,
    97,
    110,
    116,
    101,
    100,
    105,
    99,
    101,
    108,
    117,
    105,
    115,
    101,
    108,
    108,
    97,
    109,
    97,
    121,
    111,
    122,
    111,
    110,
    97,
    97,
    109,
    111,
    114,
    112,
    105,
    115,
    111,
    111,
    98,
    114,
    97,
    99,
    108,
    105,
    99,
    101,
    108,
    108,
    111,
    100,
    105,
    111,
    115,
    104,
    111,
    114,
    97,
    99,
    97,
    115,
    105,
    208,
    183,
    208,
    176,
    208,
    189,
    208,
    176,
    208,
    190,
    208,
    188,
    209,
    128,
    208,
    176,
    209,
    128,
    209,
    131,
    209,
    130,
    208,
    176,
    208,
    189,
    208,
    181,
    208,
    191,
    208,
    190,
    208,
    190,
    209,
    130,
    208,
    184,
    208,
    183,
    208,
    189,
    208,
    190,
    208,
    180,
    208,
    190,
    209,
    130,
    208,
    190,
    208,
    182,
    208,
    181,
    208,
    190,
    208,
    189,
    208,
    184,
    209,
    133,
    208,
    157,
    208,
    176,
    208,
    181,
    208,
    181,
    208,
    177,
    209,
    139,
    208,
    188,
    209,
    139,
    208,
    146,
    209,
    139,
    209,
    129,
    208,
    190,
    208,
    178,
    209,
    139,
    208,
    178,
    208,
    190,
    208,
    157,
    208,
    190,
    208,
    190,
    208,
    177,
    208,
    159,
    208,
    190,
    208,
    187,
    208,
    184,
    208,
    189,
    208,
    184,
    208,
    160,
    208,
    164,
    208,
    157,
    208,
    181,
    208,
    156,
    209,
    139,
    209,
    130,
    209,
    139,
    208,
    158,
    208,
    189,
    208,
    184,
    208,
    188,
    208,
    180,
    208,
    176,
    208,
    151,
    208,
    176,
    208,
    148,
    208,
    176,
    208,
    157,
    209,
    131,
    208,
    158,
    208,
    177,
    209,
    130,
    208,
    181,
    208,
    152,
    208,
    183,
    208,
    181,
    208,
    185,
    208,
    189,
    209,
    131,
    208,
    188,
    208,
    188,
    208,
    162,
    209,
    139,
    209,
    131,
    208,
    182,
    217,
    129,
    217,
    138,
    216,
    163,
    217,
    134,
    217,
    133,
    216,
    167,
    217,
    133,
    216,
    185,
    217,
    131,
    217,
    132,
    216,
    163,
    217,
    136,
    216,
    177,
    216,
    175,
    217,
    138,
    216,
    167,
    217,
    129,
    217,
    137,
    217,
    135,
    217,
    136,
    217,
    132,
    217,
    133,
    217,
    132,
    217,
    131,
    216,
    167,
    217,
    136,
    217,
    132,
    217,
    135,
    216,
    168,
    216,
    179,
    216,
    167,
    217,
    132,
    216,
    165,
    217,
    134,
    217,
    135,
    217,
    138,
    216,
    163,
    217,
    138,
    217,
    130,
    216,
    175,
    217,
    135,
    217,
    132,
    216,
    171,
    217,
    133,
    216,
    168,
    217,
    135,
    217,
    132,
    217,
    136,
    217,
    132,
    217,
    138,
    216,
    168,
    217,
    132,
    216,
    167,
    217,
    138,
    216,
    168,
    217,
    131,
    216,
    180,
    217,
    138,
    216,
    167,
    217,
    133,
    216,
    163,
    217,
    133,
    217,
    134,
    216,
    170,
    216,
    168,
    217,
    138,
    217,
    132,
    217,
    134,
    216,
    173,
    216,
    168,
    217,
    135,
    217,
    133,
    217,
    133,
    216,
    180,
    217,
    136,
    216,
    180,
    102,
    105,
    114,
    115,
    116,
    118,
    105,
    100,
    101,
    111,
    108,
    105,
    103,
    104,
    116,
    119,
    111,
    114,
    108,
    100,
    109,
    101,
    100,
    105,
    97,
    119,
    104,
    105,
    116,
    101,
    99,
    108,
    111,
    115,
    101,
    98,
    108,
    97,
    99,
    107,
    114,
    105,
    103,
    104,
    116,
    115,
    109,
    97,
    108,
    108,
    98,
    111,
    111,
    107,
    115,
    112,
    108,
    97,
    99,
    101,
    109,
    117,
    115,
    105,
    99,
    102,
    105,
    101,
    108,
    100,
    111,
    114,
    100,
    101,
    114,
    112,
    111,
    105,
    110,
    116,
    118,
    97,
    108,
    117,
    101,
    108,
    101,
    118,
    101,
    108,
    116,
    97,
    98,
    108,
    101,
    98,
    111,
    97,
    114,
    100,
    104,
    111,
    117,
    115,
    101,
    103,
    114,
    111,
    117,
    112,
    119,
    111,
    114,
    107,
    115,
    121,
    101,
    97,
    114,
    115,
    115,
    116,
    97,
    116,
    101,
    116,
    111,
    100,
    97,
    121,
    119,
    97,
    116,
    101,
    114,
    115,
    116,
    97,
    114,
    116,
    115,
    116,
    121,
    108,
    101,
    100,
    101,
    97,
    116,
    104,
    112,
    111,
    119,
    101,
    114,
    112,
    104,
    111,
    110,
    101,
    110,
    105,
    103,
    104,
    116,
    101,
    114,
    114,
    111,
    114,
    105,
    110,
    112,
    117,
    116,
    97,
    98,
    111,
    117,
    116,
    116,
    101,
    114,
    109,
    115,
    116,
    105,
    116,
    108,
    101,
    116,
    111,
    111,
    108,
    115,
    101,
    118,
    101,
    110,
    116,
    108,
    111,
    99,
    97,
    108,
    116,
    105,
    109,
    101,
    115,
    108,
    97,
    114,
    103,
    101,
    119,
    111,
    114,
    100,
    115,
    103,
    97,
    109,
    101,
    115,
    115,
    104,
    111,
    114,
    116,
    115,
    112,
    97,
    99,
    101,
    102,
    111,
    99,
    117,
    115,
    99,
    108,
    101,
    97,
    114,
    109,
    111,
    100,
    101,
    108,
    98,
    108,
    111,
    99,
    107,
    103,
    117,
    105,
    100,
    101,
    114,
    97,
    100,
    105,
    111,
    115,
    104,
    97,
    114,
    101,
    119,
    111,
    109,
    101,
    110,
    97,
    103,
    97,
    105,
    110,
    109,
    111,
    110,
    101,
    121,
    105,
    109,
    97,
    103,
    101,
    110,
    97,
    109,
    101,
    115,
    121,
    111,
    117,
    110,
    103,
    108,
    105,
    110,
    101,
    115,
    108,
    97,
    116,
    101,
    114,
    99,
    111,
    108,
    111,
    114,
    103,
    114,
    101,
    101,
    110,
    102,
    114,
    111,
    110,
    116,
    38,
    97,
    109,
    112,
    59,
    119,
    97,
    116,
    99,
    104,
    102,
    111,
    114,
    99,
    101,
    112,
    114,
    105,
    99,
    101,
    114,
    117,
    108,
    101,
    115,
    98,
    101,
    103,
    105,
    110,
    97,
    102,
    116,
    101,
    114,
    118,
    105,
    115,
    105,
    116,
    105,
    115,
    115,
    117,
    101,
    97,
    114,
    101,
    97,
    115,
    98,
    101,
    108,
    111,
    119,
    105,
    110,
    100,
    101,
    120,
    116,
    111,
    116,
    97,
    108,
    104,
    111,
    117,
    114,
    115,
    108,
    97,
    98,
    101,
    108,
    112,
    114,
    105,
    110,
    116,
    112,
    114,
    101,
    115,
    115,
    98,
    117,
    105,
    108,
    116,
    108,
    105,
    110,
    107,
    115,
    115,
    112,
    101,
    101,
    100,
    115,
    116,
    117,
    100,
    121,
    116,
    114,
    97,
    100,
    101,
    102,
    111,
    117,
    110,
    100,
    115,
    101,
    110,
    115,
    101,
    117,
    110,
    100,
    101,
    114,
    115,
    104,
    111,
    119,
    110,
    102,
    111,
    114,
    109,
    115,
    114,
    97,
    110,
    103,
    101,
    97,
    100,
    100,
    101,
    100,
    115,
    116,
    105,
    108,
    108,
    109,
    111,
    118,
    101,
    100,
    116,
    97,
    107,
    101,
    110,
    97,
    98,
    111,
    118,
    101,
    102,
    108,
    97,
    115,
    104,
    102,
    105,
    120,
    101,
    100,
    111,
    102,
    116,
    101,
    110,
    111,
    116,
    104,
    101,
    114,
    118,
    105,
    101,
    119,
    115,
    99,
    104,
    101,
    99,
    107,
    108,
    101,
    103,
    97,
    108,
    114,
    105,
    118,
    101,
    114,
    105,
    116,
    101,
    109,
    115,
    113,
    117,
    105,
    99,
    107,
    115,
    104,
    97,
    112,
    101,
    104,
    117,
    109,
    97,
    110,
    101,
    120,
    105,
    115,
    116,
    103,
    111,
    105,
    110,
    103,
    109,
    111,
    118,
    105,
    101,
    116,
    104,
    105,
    114,
    100,
    98,
    97,
    115,
    105,
    99,
    112,
    101,
    97,
    99,
    101,
    115,
    116,
    97,
    103,
    101,
    119,
    105,
    100,
    116,
    104,
    108,
    111,
    103,
    105,
    110,
    105,
    100,
    101,
    97,
    115,
    119,
    114,
    111,
    116,
    101,
    112,
    97,
    103,
    101,
    115,
    117,
    115,
    101,
    114,
    115,
    100,
    114,
    105,
    118,
    101,
    115,
    116,
    111,
    114,
    101,
    98,
    114,
    101,
    97,
    107,
    115,
    111,
    117,
    116,
    104,
    118,
    111,
    105,
    99,
    101,
    115,
    105,
    116,
    101,
    115,
    109,
    111,
    110,
    116,
    104,
    119,
    104,
    101,
    114,
    101,
    98,
    117,
    105,
    108,
    100,
    119,
    104,
    105,
    99,
    104,
    101,
    97,
    114,
    116,
    104,
    102,
    111,
    114,
    117,
    109,
    116,
    104,
    114,
    101,
    101,
    115,
    112,
    111,
    114,
    116,
    112,
    97,
    114,
    116,
    121,
    67,
    108,
    105,
    99,
    107,
    108,
    111,
    119,
    101,
    114,
    108,
    105,
    118,
    101,
    115,
    99,
    108,
    97,
    115,
    115,
    108,
    97,
    121,
    101,
    114,
    101,
    110,
    116,
    114,
    121,
    115,
    116,
    111,
    114,
    121,
    117,
    115,
    97,
    103,
    101,
    115,
    111,
    117,
    110,
    100,
    99,
    111,
    117,
    114,
    116,
    121,
    111,
    117,
    114,
    32,
    98,
    105,
    114,
    116,
    104,
    112,
    111,
    112,
    117,
    112,
    116,
    121,
    112,
    101,
    115,
    97,
    112,
    112,
    108,
    121,
    73,
    109,
    97,
    103,
    101,
    98,
    101,
    105,
    110,
    103,
    117,
    112,
    112,
    101,
    114,
    110,
    111,
    116,
    101,
    115,
    101,
    118,
    101,
    114,
    121,
    115,
    104,
    111,
    119,
    115,
    109,
    101,
    97,
    110,
    115,
    101,
    120,
    116,
    114,
    97,
    109,
    97,
    116,
    99,
    104,
    116,
    114,
    97,
    99,
    107,
    107,
    110,
    111,
    119,
    110,
    101,
    97,
    114,
    108,
    121,
    98,
    101,
    103,
    97,
    110,
    115,
    117,
    112,
    101,
    114,
    112,
    97,
    112,
    101,
    114,
    110,
    111,
    114,
    116,
    104,
    108,
    101,
    97,
    114,
    110,
    103,
    105,
    118,
    101,
    110,
    110,
    97,
    109,
    101,
    100,
    101,
    110,
    100,
    101,
    100,
    84,
    101,
    114,
    109,
    115,
    112,
    97,
    114,
    116,
    115,
    71,
    114,
    111,
    117,
    112,
    98,
    114,
    97,
    110,
    100,
    117,
    115,
    105,
    110,
    103,
    119,
    111,
    109,
    97,
    110,
    102,
    97,
    108,
    115,
    101,
    114,
    101,
    97,
    100,
    121,
    97,
    117,
    100,
    105,
    111,
    116,
    97,
    107,
    101,
    115,
    119,
    104,
    105,
    108,
    101,
    46,
    99,
    111,
    109,
    47,
    108,
    105,
    118,
    101,
    100,
    99,
    97,
    115,
    101,
    115,
    100,
    97,
    105,
    108,
    121,
    99,
    104,
    105,
    108,
    100,
    103,
    114,
    101,
    97,
    116,
    106,
    117,
    100,
    103,
    101,
    116,
    104,
    111,
    115,
    101,
    117,
    110,
    105,
    116,
    115,
    110,
    101,
    118,
    101,
    114,
    98,
    114,
    111,
    97,
    100,
    99,
    111,
    97,
    115,
    116,
    99,
    111,
    118,
    101,
    114,
    97,
    112,
    112,
    108,
    101,
    102,
    105,
    108,
    101,
    115,
    99,
    121,
    99,
    108,
    101,
    115,
    99,
    101,
    110,
    101,
    112,
    108,
    97,
    110,
    115,
    99,
    108,
    105,
    99,
    107,
    119,
    114,
    105,
    116,
    101,
    113,
    117,
    101,
    101,
    110,
    112,
    105,
    101,
    99,
    101,
    101,
    109,
    97,
    105,
    108,
    102,
    114,
    97,
    109,
    101,
    111,
    108,
    100,
    101,
    114,
    112,
    104,
    111,
    116,
    111,
    108,
    105,
    109,
    105,
    116,
    99,
    97,
    99,
    104,
    101,
    99,
    105,
    118,
    105,
    108,
    115,
    99,
    97,
    108,
    101,
    101,
    110,
    116,
    101,
    114,
    116,
    104,
    101,
    109,
    101,
    116,
    104,
    101,
    114,
    101,
    116,
    111,
    117,
    99,
    104,
    98,
    111,
    117,
    110,
    100,
    114,
    111,
    121,
    97,
    108,
    97,
    115,
    107,
    101,
    100,
    119,
    104,
    111,
    108,
    101,
    115,
    105,
    110,
    99,
    101,
    115,
    116,
    111,
    99,
    107,
    32,
    110,
    97,
    109,
    101,
    102,
    97,
    105,
    116,
    104,
    104,
    101,
    97,
    114,
    116,
    101,
    109,
    112,
    116,
    121,
    111,
    102,
    102,
    101,
    114,
    115,
    99,
    111,
    112,
    101,
    111,
    119,
    110,
    101,
    100,
    109,
    105,
    103,
    104,
    116,
    97,
    108,
    98,
    117,
    109,
    116,
    104,
    105,
    110,
    107,
    98,
    108,
    111,
    111,
    100,
    97,
    114,
    114,
    97,
    121,
    109,
    97,
    106,
    111,
    114,
    116,
    114,
    117,
    115,
    116,
    99,
    97,
    110,
    111,
    110,
    117,
    110,
    105,
    111,
    110,
    99,
    111,
    117,
    110,
    116,
    118,
    97,
    108,
    105,
    100,
    115,
    116,
    111,
    110,
    101,
    83,
    116,
    121,
    108,
    101,
    76,
    111,
    103,
    105,
    110,
    104,
    97,
    112,
    112,
    121,
    111,
    99,
    99,
    117,
    114,
    108,
    101,
    102,
    116,
    58,
    102,
    114,
    101,
    115,
    104,
    113,
    117,
    105,
    116,
    101,
    102,
    105,
    108,
    109,
    115,
    103,
    114,
    97,
    100,
    101,
    110,
    101,
    101,
    100,
    115,
    117,
    114,
    98,
    97,
    110,
    102,
    105,
    103,
    104,
    116,
    98,
    97,
    115,
    105,
    115,
    104,
    111,
    118,
    101,
    114,
    97,
    117,
    116,
    111,
    59,
    114,
    111,
    117,
    116,
    101,
    46,
    104,
    116,
    109,
    108,
    109,
    105,
    120,
    101,
    100,
    102,
    105,
    110,
    97,
    108,
    89,
    111,
    117,
    114,
    32,
    115,
    108,
    105,
    100,
    101,
    116,
    111,
    112,
    105,
    99,
    98,
    114,
    111,
    119,
    110,
    97,
    108,
    111,
    110,
    101,
    100,
    114,
    97,
    119,
    110,
    115,
    112,
    108,
    105,
    116,
    114,
    101,
    97,
    99,
    104,
    82,
    105,
    103,
    104,
    116,
    100,
    97,
    116,
    101,
    115,
    109,
    97,
    114,
    99,
    104,
    113,
    117,
    111,
    116,
    101,
    103,
    111,
    111,
    100,
    115,
    76,
    105,
    110,
    107,
    115,
    100,
    111,
    117,
    98,
    116,
    97,
    115,
    121,
    110,
    99,
    116,
    104,
    117,
    109,
    98,
    97,
    108,
    108,
    111,
    119,
    99,
    104,
    105,
    101,
    102,
    121,
    111,
    117,
    116,
    104,
    110,
    111,
    118,
    101,
    108,
    49,
    48,
    112,
    120,
    59,
    115,
    101,
    114,
    118,
    101,
    117,
    110,
    116,
    105,
    108,
    104,
    97,
    110,
    100,
    115,
    67,
    104,
    101,
    99,
    107,
    83,
    112,
    97,
    99,
    101,
    113,
    117,
    101,
    114,
    121,
    106,
    97,
    109,
    101,
    115,
    101,
    113,
    117,
    97,
    108,
    116,
    119,
    105,
    99,
    101,
    48,
    44,
    48,
    48,
    48,
    83,
    116,
    97,
    114,
    116,
    112,
    97,
    110,
    101,
    108,
    115,
    111,
    110,
    103,
    115,
    114,
    111,
    117,
    110,
    100,
    101,
    105,
    103,
    104,
    116,
    115,
    104,
    105,
    102,
    116,
    119,
    111,
    114,
    116,
    104,
    112,
    111,
    115,
    116,
    115,
    108,
    101,
    97,
    100,
    115,
    119,
    101,
    101,
    107,
    115,
    97,
    118,
    111,
    105,
    100,
    116,
    104,
    101,
    115,
    101,
    109,
    105,
    108,
    101,
    115,
    112,
    108,
    97,
    110,
    101,
    115,
    109,
    97,
    114,
    116,
    97,
    108,
    112,
    104,
    97,
    112,
    108,
    97,
    110,
    116,
    109,
    97,
    114,
    107,
    115,
    114,
    97,
    116,
    101,
    115,
    112,
    108,
    97,
    121,
    115,
    99,
    108,
    97,
    105,
    109,
    115,
    97,
    108,
    101,
    115,
    116,
    101,
    120,
    116,
    115,
    115,
    116,
    97,
    114,
    115,
    119,
    114,
    111,
    110,
    103,
    60,
    47,
    104,
    51,
    62,
    116,
    104,
    105,
    110,
    103,
    46,
    111,
    114,
    103,
    47,
    109,
    117,
    108,
    116,
    105,
    104,
    101,
    97,
    114,
    100,
    80,
    111,
    119,
    101,
    114,
    115,
    116,
    97,
    110,
    100,
    116,
    111,
    107,
    101,
    110,
    115,
    111,
    108,
    105,
    100,
    40,
    116,
    104,
    105,
    115,
    98,
    114,
    105,
    110,
    103,
    115,
    104,
    105,
    112,
    115,
    115,
    116,
    97,
    102,
    102,
    116,
    114,
    105,
    101,
    100,
    99,
    97,
    108,
    108,
    115,
    102,
    117,
    108,
    108,
    121,
    102,
    97,
    99,
    116,
    115,
    97,
    103,
    101,
    110,
    116,
    84,
    104,
    105,
    115,
    32,
    47,
    47,
    45,
    45,
    62,
    97,
    100,
    109,
    105,
    110,
    101,
    103,
    121,
    112,
    116,
    69,
    118,
    101,
    110,
    116,
    49,
    53,
    112,
    120,
    59,
    69,
    109,
    97,
    105,
    108,
    116,
    114,
    117,
    101,
    34,
    99,
    114,
    111,
    115,
    115,
    115,
    112,
    101,
    110,
    116,
    98,
    108,
    111,
    103,
    115,
    98,
    111,
    120,
    34,
    62,
    110,
    111,
    116,
    101,
    100,
    108,
    101,
    97,
    118,
    101,
    99,
    104,
    105,
    110,
    97,
    115,
    105,
    122,
    101,
    115,
    103,
    117,
    101,
    115,
    116,
    60,
    47,
    104,
    52,
    62,
    114,
    111,
    98,
    111,
    116,
    104,
    101,
    97,
    118,
    121,
    116,
    114,
    117,
    101,
    44,
    115,
    101,
    118,
    101,
    110,
    103,
    114,
    97,
    110,
    100,
    99,
    114,
    105,
    109,
    101,
    115,
    105,
    103,
    110,
    115,
    97,
    119,
    97,
    114,
    101,
    100,
    97,
    110,
    99,
    101,
    112,
    104,
    97,
    115,
    101,
    62,
    60,
    33,
    45,
    45,
    101,
    110,
    95,
    85,
    83,
    38,
    35,
    51,
    57,
    59,
    50,
    48,
    48,
    112,
    120,
    95,
    110,
    97,
    109,
    101,
    108,
    97,
    116,
    105,
    110,
    101,
    110,
    106,
    111,
    121,
    97,
    106,
    97,
    120,
    46,
    97,
    116,
    105,
    111,
    110,
    115,
    109,
    105,
    116,
    104,
    85,
    46,
    83,
    46,
    32,
    104,
    111,
    108,
    100,
    115,
    112,
    101,
    116,
    101,
    114,
    105,
    110,
    100,
    105,
    97,
    110,
    97,
    118,
    34,
    62,
    99,
    104,
    97,
    105,
    110,
    115,
    99,
    111,
    114,
    101,
    99,
    111,
    109,
    101,
    115,
    100,
    111,
    105,
    110,
    103,
    112,
    114,
    105,
    111,
    114,
    83,
    104,
    97,
    114,
    101,
    49,
    57,
    57,
    48,
    115,
    114,
    111,
    109,
    97,
    110,
    108,
    105,
    115,
    116,
    115,
    106,
    97,
    112,
    97,
    110,
    102,
    97,
    108,
    108,
    115,
    116,
    114,
    105,
    97,
    108,
    111,
    119,
    110,
    101,
    114,
    97,
    103,
    114,
    101,
    101,
    60,
    47,
    104,
    50,
    62,
    97,
    98,
    117,
    115,
    101,
    97,
    108,
    101,
    114,
    116,
    111,
    112,
    101,
    114,
    97,
    34,
    45,
    47,
    47,
    87,
    99,
    97,
    114,
    100,
    115,
    104,
    105,
    108,
    108,
    115,
    116,
    101,
    97,
    109,
    115,
    80,
    104,
    111,
    116,
    111,
    116,
    114,
    117,
    116,
    104,
    99,
    108,
    101,
    97,
    110,
    46,
    112,
    104,
    112,
    63,
    115,
    97,
    105,
    110,
    116,
    109,
    101,
    116,
    97,
    108,
    108,
    111,
    117,
    105,
    115,
    109,
    101,
    97,
    110,
    116,
    112,
    114,
    111,
    111,
    102,
    98,
    114,
    105,
    101,
    102,
    114,
    111,
    119,
    34,
    62,
    103,
    101,
    110,
    114,
    101,
    116,
    114,
    117,
    99,
    107,
    108,
    111,
    111,
    107,
    115,
    86,
    97,
    108,
    117,
    101,
    70,
    114,
    97,
    109,
    101,
    46,
    110,
    101,
    116,
    47,
    45,
    45,
    62,
    10,
    60,
    116,
    114,
    121,
    32,
    123,
    10,
    118,
    97,
    114,
    32,
    109,
    97,
    107,
    101,
    115,
    99,
    111,
    115,
    116,
    115,
    112,
    108,
    97,
    105,
    110,
    97,
    100,
    117,
    108,
    116,
    113,
    117,
    101,
    115,
    116,
    116,
    114,
    97,
    105,
    110,
    108,
    97,
    98,
    111,
    114,
    104,
    101,
    108,
    112,
    115,
    99,
    97,
    117,
    115,
    101,
    109,
    97,
    103,
    105,
    99,
    109,
    111,
    116,
    111,
    114,
    116,
    104,
    101,
    105,
    114,
    50,
    53,
    48,
    112,
    120,
    108,
    101,
    97,
    115,
    116,
    115,
    116,
    101,
    112,
    115,
    67,
    111,
    117,
    110,
    116,
    99,
    111,
    117,
    108,
    100,
    103,
    108,
    97,
    115,
    115,
    115,
    105,
    100,
    101,
    115,
    102,
    117,
    110,
    100,
    115,
    104,
    111,
    116,
    101,
    108,
    97,
    119,
    97,
    114,
    100,
    109,
    111,
    117,
    116,
    104,
    109,
    111,
    118,
    101,
    115,
    112,
    97,
    114,
    105,
    115,
    103,
    105,
    118,
    101,
    115,
    100,
    117,
    116,
    99,
    104,
    116,
    101,
    120,
    97,
    115,
    102,
    114,
    117,
    105,
    116,
    110,
    117,
    108,
    108,
    44,
    124,
    124,
    91,
    93,
    59,
    116,
    111,
    112,
    34,
    62,
    10,
    60,
    33,
    45,
    45,
    80,
    79,
    83,
    84,
    34,
    111,
    99,
    101,
    97,
    110,
    60,
    98,
    114,
    47,
    62,
    102,
    108,
    111,
    111,
    114,
    115,
    112,
    101,
    97,
    107,
    100,
    101,
    112,
    116,
    104,
    32,
    115,
    105,
    122,
    101,
    98,
    97,
    110,
    107,
    115,
    99,
    97,
    116,
    99,
    104,
    99,
    104,
    97,
    114,
    116,
    50,
    48,
    112,
    120,
    59,
    97,
    108,
    105,
    103,
    110,
    100,
    101,
    97,
    108,
    115,
    119,
    111,
    117,
    108,
    100,
    53,
    48,
    112,
    120,
    59,
    117,
    114,
    108,
    61,
    34,
    112,
    97,
    114,
    107,
    115,
    109,
    111,
    117,
    115,
    101,
    77,
    111,
    115,
    116,
    32,
    46,
    46,
    46,
    60,
    47,
    97,
    109,
    111,
    110,
    103,
    98,
    114,
    97,
    105,
    110,
    98,
    111,
    100,
    121,
    32,
    110,
    111,
    110,
    101,
    59,
    98,
    97,
    115,
    101,
    100,
    99,
    97,
    114,
    114,
    121,
    100,
    114,
    97,
    102,
    116,
    114,
    101,
    102,
    101,
    114,
    112,
    97,
    103,
    101,
    95,
    104,
    111,
    109,
    101,
    46,
    109,
    101,
    116,
    101,
    114,
    100,
    101,
    108,
    97,
    121,
    100,
    114,
    101,
    97,
    109,
    112,
    114,
    111,
    118,
    101,
    106,
    111,
    105,
    110,
    116,
    60,
    47,
    116,
    114,
    62,
    100,
    114,
    117,
    103,
    115,
    60,
    33,
    45,
    45,
    32,
    97,
    112,
    114,
    105,
    108,
    105,
    100,
    101,
    97,
    108,
    97,
    108,
    108,
    101,
    110,
    101,
    120,
    97,
    99,
    116,
    102,
    111,
    114,
    116,
    104,
    99,
    111,
    100,
    101,
    115,
    108,
    111,
    103,
    105,
    99,
    86,
    105,
    101,
    119,
    32,
    115,
    101,
    101,
    109,
    115,
    98,
    108,
    97,
    110,
    107,
    112,
    111,
    114,
    116,
    115,
    32,
    40,
    50,
    48,
    48,
    115,
    97,
    118,
    101,
    100,
    95,
    108,
    105,
    110,
    107,
    103,
    111,
    97,
    108,
    115,
    103,
    114,
    97,
    110,
    116,
    103,
    114,
    101,
    101,
    107,
    104,
    111,
    109,
    101,
    115,
    114,
    105,
    110,
    103,
    115,
    114,
    97,
    116,
    101,
    100,
    51,
    48,
    112,
    120,
    59,
    119,
    104,
    111,
    115,
    101,
    112,
    97,
    114,
    115,
    101,
    40,
    41,
    59,
    34,
    32,
    66,
    108,
    111,
    99,
    107,
    108,
    105,
    110,
    117,
    120,
    106,
    111,
    110,
    101,
    115,
    112,
    105,
    120,
    101,
    108,
    39,
    41,
    59,
    34,
    62,
    41,
    59,
    105,
    102,
    40,
    45,
    108,
    101,
    102,
    116,
    100,
    97,
    118,
    105,
    100,
    104,
    111,
    114,
    115,
    101,
    70,
    111,
    99,
    117,
    115,
    114,
    97,
    105,
    115,
    101,
    98,
    111,
    120,
    101,
    115,
    84,
    114,
    97,
    99,
    107,
    101,
    109,
    101,
    110,
    116,
    60,
    47,
    101,
    109,
    62,
    98,
    97,
    114,
    34,
    62,
    46,
    115,
    114,
    99,
    61,
    116,
    111,
    119,
    101,
    114,
    97,
    108,
    116,
    61,
    34,
    99,
    97,
    98,
    108,
    101,
    104,
    101,
    110,
    114,
    121,
    50,
    52,
    112,
    120,
    59,
    115,
    101,
    116,
    117,
    112,
    105,
    116,
    97,
    108,
    121,
    115,
    104,
    97,
    114,
    112,
    109,
    105,
    110,
    111,
    114,
    116,
    97,
    115,
    116,
    101,
    119,
    97,
    110,
    116,
    115,
    116,
    104,
    105,
    115,
    46,
    114,
    101,
    115,
    101,
    116,
    119,
    104,
    101,
    101,
    108,
    103,
    105,
    114,
    108,
    115,
    47,
    99,
    115,
    115,
    47,
    49,
    48,
    48,
    37,
    59,
    99,
    108,
    117,
    98,
    115,
    115,
    116,
    117,
    102,
    102,
    98,
    105,
    98,
    108,
    101,
    118,
    111,
    116,
    101,
    115,
    32,
    49,
    48,
    48,
    48,
    107,
    111,
    114,
    101,
    97,
    125,
    41,
    59,
    13,
    10,
    98,
    97,
    110,
    100,
    115,
    113,
    117,
    101,
    117,
    101,
    61,
    32,
    123,
    125,
    59,
    56,
    48,
    112,
    120,
    59,
    99,
    107,
    105,
    110,
    103,
    123,
    13,
    10,
    9,
    9,
    97,
    104,
    101,
    97,
    100,
    99,
    108,
    111,
    99,
    107,
    105,
    114,
    105,
    115,
    104,
    108,
    105,
    107,
    101,
    32,
    114,
    97,
    116,
    105,
    111,
    115,
    116,
    97,
    116,
    115,
    70,
    111,
    114,
    109,
    34,
    121,
    97,
    104,
    111,
    111,
    41,
    91,
    48,
    93,
    59,
    65,
    98,
    111,
    117,
    116,
    102,
    105,
    110,
    100,
    115,
    60,
    47,
    104,
    49,
    62,
    100,
    101,
    98,
    117,
    103,
    116,
    97,
    115,
    107,
    115,
    85,
    82,
    76,
    32,
    61,
    99,
    101,
    108,
    108,
    115,
    125,
    41,
    40,
    41,
    59,
    49,
    50,
    112,
    120,
    59,
    112,
    114,
    105,
    109,
    101,
    116,
    101,
    108,
    108,
    115,
    116,
    117,
    114,
    110,
    115,
    48,
    120,
    54,
    48,
    48,
    46,
    106,
    112,
    103,
    34,
    115,
    112,
    97,
    105,
    110,
    98,
    101,
    97,
    99,
    104,
    116,
    97,
    120,
    101,
    115,
    109,
    105,
    99,
    114,
    111,
    97,
    110,
    103,
    101,
    108,
    45,
    45,
    62,
    60,
    47,
    103,
    105,
    102,
    116,
    115,
    115,
    116,
    101,
    118,
    101,
    45,
    108,
    105,
    110,
    107,
    98,
    111,
    100,
    121,
    46,
    125,
    41,
    59,
    10,
    9,
    109,
    111,
    117,
    110,
    116,
    32,
    40,
    49,
    57,
    57,
    70,
    65,
    81,
    60,
    47,
    114,
    111,
    103,
    101,
    114,
    102,
    114,
    97,
    110,
    107,
    67,
    108,
    97,
    115,
    115,
    50,
    56,
    112,
    120,
    59,
    102,
    101,
    101,
    100,
    115,
    60,
    104,
    49,
    62,
    60,
    115,
    99,
    111,
    116,
    116,
    116,
    101,
    115,
    116,
    115,
    50,
    50,
    112,
    120,
    59,
    100,
    114,
    105,
    110,
    107,
    41,
    32,
    124,
    124,
    32,
    108,
    101,
    119,
    105,
    115,
    115,
    104,
    97,
    108,
    108,
    35,
    48,
    51,
    57,
    59,
    32,
    102,
    111,
    114,
    32,
    108,
    111,
    118,
    101,
    100,
    119,
    97,
    115,
    116,
    101,
    48,
    48,
    112,
    120,
    59,
    106,
    97,
    58,
    227,
    130,
    115,
    105,
    109,
    111,
    110,
    60,
    102,
    111,
    110,
    116,
    114,
    101,
    112,
    108,
    121,
    109,
    101,
    101,
    116,
    115,
    117,
    110,
    116,
    101,
    114,
    99,
    104,
    101,
    97,
    112,
    116,
    105,
    103,
    104,
    116,
    66,
    114,
    97,
    110,
    100,
    41,
    32,
    33,
    61,
    32,
    100,
    114,
    101,
    115,
    115,
    99,
    108,
    105,
    112,
    115,
    114,
    111,
    111,
    109,
    115,
    111,
    110,
    107,
    101,
    121,
    109,
    111,
    98,
    105,
    108,
    109,
    97,
    105,
    110,
    46,
    78,
    97,
    109,
    101,
    32,
    112,
    108,
    97,
    116,
    101,
    102,
    117,
    110,
    110,
    121,
    116,
    114,
    101,
    101,
    115,
    99,
    111,
    109,
    47,
    34,
    49,
    46,
    106,
    112,
    103,
    119,
    109,
    111,
    100,
    101,
    112,
    97,
    114,
    97,
    109,
    83,
    84,
    65,
    82,
    84,
    108,
    101,
    102,
    116,
    32,
    105,
    100,
    100,
    101,
    110,
    44,
    32,
    50,
    48,
    49,
    41,
    59,
    10,
    125,
    10,
    102,
    111,
    114,
    109,
    46,
    118,
    105,
    114,
    117,
    115,
    99,
    104,
    97,
    105,
    114,
    116,
    114,
    97,
    110,
    115,
    119,
    111,
    114,
    115,
    116,
    80,
    97,
    103,
    101,
    115,
    105,
    116,
    105,
    111,
    110,
    112,
    97,
    116,
    99,
    104,
    60,
    33,
    45,
    45,
    10,
    111,
    45,
    99,
    97,
    99,
    102,
    105,
    114,
    109,
    115,
    116,
    111,
    117,
    114,
    115,
    44,
    48,
    48,
    48,
    32,
    97,
    115,
    105,
    97,
    110,
    105,
    43,
    43,
    41,
    123,
    97,
    100,
    111,
    98,
    101,
    39,
    41,
    91,
    48,
    93,
    105,
    100,
    61,
    49,
    48,
    98,
    111,
    116,
    104,
    59,
    109,
    101,
    110,
    117,
    32,
    46,
    50,
    46,
    109,
    105,
    46,
    112,
    110,
    103,
    34,
    107,
    101,
    118,
    105,
    110,
    99,
    111,
    97,
    99,
    104,
    67,
    104,
    105,
    108,
    100,
    98,
    114,
    117,
    99,
    101,
    50,
    46,
    106,
    112,
    103,
    85,
    82,
    76,
    41,
    43,
    46,
    106,
    112,
    103,
    124,
    115,
    117,
    105,
    116,
    101,
    115,
    108,
    105,
    99,
    101,
    104,
    97,
    114,
    114,
    121,
    49,
    50,
    48,
    34,
    32,
    115,
    119,
    101,
    101,
    116,
    116,
    114,
    62,
    13,
    10,
    110,
    97,
    109,
    101,
    61,
    100,
    105,
    101,
    103,
    111,
    112,
    97,
    103,
    101,
    32,
    115,
    119,
    105,
    115,
    115,
    45,
    45,
    62,
    10,
    10,
    35,
    102,
    102,
    102,
    59,
    34,
    62,
    76,
    111,
    103,
    46,
    99,
    111,
    109,
    34,
    116,
    114,
    101,
    97,
    116,
    115,
    104,
    101,
    101,
    116,
    41,
    32,
    38,
    38,
    32,
    49,
    52,
    112,
    120,
    59,
    115,
    108,
    101,
    101,
    112,
    110,
    116,
    101,
    110,
    116,
    102,
    105,
    108,
    101,
    100,
    106,
    97,
    58,
    227,
    131,
    105,
    100,
    61,
    34,
    99,
    78,
    97,
    109,
    101,
    34,
    119,
    111,
    114,
    115,
    101,
    115,
    104,
    111,
    116,
    115,
    45,
    98,
    111,
    120,
    45,
    100,
    101,
    108,
    116,
    97,
    10,
    38,
    108,
    116,
    59,
    98,
    101,
    97,
    114,
    115,
    58,
    52,
    56,
    90,
    60,
    100,
    97,
    116,
    97,
    45,
    114,
    117,
    114,
    97,
    108,
    60,
    47,
    97,
    62,
    32,
    115,
    112,
    101,
    110,
    100,
    98,
    97,
    107,
    101,
    114,
    115,
    104,
    111,
    112,
    115,
    61,
    32,
    34,
    34,
    59,
    112,
    104,
    112,
    34,
    62,
    99,
    116,
    105,
    111,
    110,
    49,
    51,
    112,
    120,
    59,
    98,
    114,
    105,
    97,
    110,
    104,
    101,
    108,
    108,
    111,
    115,
    105,
    122,
    101,
    61,
    111,
    61,
    37,
    50,
    70,
    32,
    106,
    111,
    105,
    110,
    109,
    97,
    121,
    98,
    101,
    60,
    105,
    109,
    103,
    32,
    105,
    109,
    103,
    34,
    62,
    44,
    32,
    102,
    106,
    115,
    105,
    109,
    103,
    34,
    32,
    34,
    41,
    91,
    48,
    93,
    77,
    84,
    111,
    112,
    66,
    84,
    121,
    112,
    101,
    34,
    110,
    101,
    119,
    108,
    121,
    68,
    97,
    110,
    115,
    107,
    99,
    122,
    101,
    99,
    104,
    116,
    114,
    97,
    105,
    108,
    107,
    110,
    111,
    119,
    115,
    60,
    47,
    104,
    53,
    62,
    102,
    97,
    113,
    34,
    62,
    122,
    104,
    45,
    99,
    110,
    49,
    48,
    41,
    59,
    10,
    45,
    49,
    34,
    41,
    59,
    116,
    121,
    112,
    101,
    61,
    98,
    108,
    117,
    101,
    115,
    116,
    114,
    117,
    108,
    121,
    100,
    97,
    118,
    105,
    115,
    46,
    106,
    115,
    39,
    59,
    62,
    13,
    10,
    60,
    33,
    115,
    116,
    101,
    101,
    108,
    32,
    121,
    111,
    117,
    32,
    104,
    50,
    62,
    13,
    10,
    102,
    111,
    114,
    109,
    32,
    106,
    101,
    115,
    117,
    115,
    49,
    48,
    48,
    37,
    32,
    109,
    101,
    110,
    117,
    46,
    13,
    10,
    9,
    13,
    10,
    119,
    97,
    108,
    101,
    115,
    114,
    105,
    115,
    107,
    115,
    117,
    109,
    101,
    110,
    116,
    100,
    100,
    105,
    110,
    103,
    98,
    45,
    108,
    105,
    107,
    116,
    101,
    97,
    99,
    104,
    103,
    105,
    102,
    34,
    32,
    118,
    101,
    103,
    97,
    115,
    100,
    97,
    110,
    115,
    107,
    101,
    101,
    115,
    116,
    105,
    115,
    104,
    113,
    105,
    112,
    115,
    117,
    111,
    109,
    105,
    115,
    111,
    98,
    114,
    101,
    100,
    101,
    115,
    100,
    101,
    101,
    110,
    116,
    114,
    101,
    116,
    111,
    100,
    111,
    115,
    112,
    117,
    101,
    100,
    101,
    97,
    195,
    177,
    111,
    115,
    101,
    115,
    116,
    195,
    161,
    116,
    105,
    101,
    110,
    101,
    104,
    97,
    115,
    116,
    97,
    111,
    116,
    114,
    111,
    115,
    112,
    97,
    114,
    116,
    101,
    100,
    111,
    110,
    100,
    101,
    110,
    117,
    101,
    118,
    111,
    104,
    97,
    99,
    101,
    114,
    102,
    111,
    114,
    109,
    97,
    109,
    105,
    115,
    109,
    111,
    109,
    101,
    106,
    111,
    114,
    109,
    117,
    110,
    100,
    111,
    97,
    113,
    117,
    195,
    173,
    100,
    195,
    173,
    97,
    115,
    115,
    195,
    179,
    108,
    111,
    97,
    121,
    117,
    100,
    97,
    102,
    101,
    99,
    104,
    97,
    116,
    111,
    100,
    97,
    115,
    116,
    97,
    110,
    116,
    111,
    109,
    101,
    110,
    111,
    115,
    100,
    97,
    116,
    111,
    115,
    111,
    116,
    114,
    97,
    115,
    115,
    105,
    116,
    105,
    111,
    109,
    117,
    99,
    104,
    111,
    97,
    104,
    111,
    114,
    97,
    108,
    117,
    103,
    97,
    114,
    109,
    97,
    121,
    111,
    114,
    101,
    115,
    116,
    111,
    115,
    104,
    111,
    114,
    97,
    115,
    116,
    101,
    110,
    101,
    114,
    97,
    110,
    116,
    101,
    115,
    102,
    111,
    116,
    111,
    115,
    101,
    115,
    116,
    97,
    115,
    112,
    97,
    195,
    173,
    115,
    110,
    117,
    101,
    118,
    97,
    115,
    97,
    108,
    117,
    100,
    102,
    111,
    114,
    111,
    115,
    109,
    101,
    100,
    105,
    111,
    113,
    117,
    105,
    101,
    110,
    109,
    101,
    115,
    101,
    115,
    112,
    111,
    100,
    101,
    114,
    99,
    104,
    105,
    108,
    101,
    115,
    101,
    114,
    195,
    161,
    118,
    101,
    99,
    101,
    115,
    100,
    101,
    99,
    105,
    114,
    106,
    111,
    115,
    195,
    169,
    101,
    115,
    116,
    97,
    114,
    118,
    101,
    110,
    116,
    97,
    103,
    114,
    117,
    112,
    111,
    104,
    101,
    99,
    104,
    111,
    101,
    108,
    108,
    111,
    115,
    116,
    101,
    110,
    103,
    111,
    97,
    109,
    105,
    103,
    111,
    99,
    111,
    115,
    97,
    115,
    110,
    105,
    118,
    101,
    108,
    103,
    101,
    110,
    116,
    101,
    109,
    105,
    115,
    109,
    97,
    97,
    105,
    114,
    101,
    115,
    106,
    117,
    108,
    105,
    111,
    116,
    101,
    109,
    97,
    115,
    104,
    97,
    99,
    105,
    97,
    102,
    97,
    118,
    111,
    114,
    106,
    117,
    110,
    105,
    111,
    108,
    105,
    98,
    114,
    101,
    112,
    117,
    110,
    116,
    111,
    98,
    117,
    101,
    110,
    111,
    97,
    117,
    116,
    111,
    114,
    97,
    98,
    114,
    105,
    108,
    98,
    117,
    101,
    110,
    97,
    116,
    101,
    120,
    116,
    111,
    109,
    97,
    114,
    122,
    111,
    115,
    97,
    98,
    101,
    114,
    108,
    105,
    115,
    116,
    97,
    108,
    117,
    101,
    103,
    111,
    99,
    195,
    179,
    109,
    111,
    101,
    110,
    101,
    114,
    111,
    106,
    117,
    101,
    103,
    111,
    112,
    101,
    114,
    195,
    186,
    104,
    97,
    98,
    101,
    114,
    101,
    115,
    116,
    111,
    121,
    110,
    117,
    110,
    99,
    97,
    109,
    117,
    106,
    101,
    114,
    118,
    97,
    108,
    111,
    114,
    102,
    117,
    101,
    114,
    97,
    108,
    105,
    98,
    114,
    111,
    103,
    117,
    115,
    116,
    97,
    105,
    103,
    117,
    97,
    108,
    118,
    111,
    116,
    111,
    115,
    99,
    97,
    115,
    111,
    115,
    103,
    117,
    195,
    173,
    97,
    112,
    117,
    101,
    100,
    111,
    115,
    111,
    109,
    111,
    115,
    97,
    118,
    105,
    115,
    111,
    117,
    115,
    116,
    101,
    100,
    100,
    101,
    98,
    101,
    110,
    110,
    111,
    99,
    104,
    101,
    98,
    117,
    115,
    99,
    97,
    102,
    97,
    108,
    116,
    97,
    101,
    117,
    114,
    111,
    115,
    115,
    101,
    114,
    105,
    101,
    100,
    105,
    99,
    104,
    111,
    99,
    117,
    114,
    115,
    111,
    99,
    108,
    97,
    118,
    101,
    99,
    97,
    115,
    97,
    115,
    108,
    101,
    195,
    179,
    110,
    112,
    108,
    97,
    122,
    111,
    108,
    97,
    114,
    103,
    111,
    111,
    98,
    114,
    97,
    115,
    118,
    105,
    115,
    116,
    97,
    97,
    112,
    111,
    121,
    111,
    106,
    117,
    110,
    116,
    111,
    116,
    114,
    97,
    116,
    97,
    118,
    105,
    115,
    116,
    111,
    99,
    114,
    101,
    97,
    114,
    99,
    97,
    109,
    112,
    111,
    104,
    101,
    109,
    111,
    115,
    99,
    105,
    110,
    99,
    111,
    99,
    97,
    114,
    103,
    111,
    112,
    105,
    115,
    111,
    115,
    111,
    114,
    100,
    101,
    110,
    104,
    97,
    99,
    101,
    110,
    195,
    161,
    114,
    101,
    97,
    100,
    105,
    115,
    99,
    111,
    112,
    101,
    100,
    114,
    111,
    99,
    101,
    114,
    99,
    97,
    112,
    117,
    101,
    100,
    97,
    112,
    97,
    112,
    101,
    108,
    109,
    101,
    110,
    111,
    114,
    195,
    186,
    116,
    105,
    108,
    99,
    108,
    97,
    114,
    111,
    106,
    111,
    114,
    103,
    101,
    99,
    97,
    108,
    108,
    101,
    112,
    111,
    110,
    101,
    114,
    116,
    97,
    114,
    100,
    101,
    110,
    97,
    100,
    105,
    101,
    109,
    97,
    114,
    99,
    97,
    115,
    105,
    103,
    117,
    101,
    101,
    108,
    108,
    97,
    115,
    115,
    105,
    103,
    108,
    111,
    99,
    111,
    99,
    104,
    101,
    109,
    111,
    116,
    111,
    115,
    109,
    97,
    100,
    114,
    101,
    99,
    108,
    97,
    115,
    101,
    114,
    101,
    115,
    116,
    111,
    110,
    105,
    195,
    177,
    111,
    113,
    117,
    101,
    100,
    97,
    112,
    97,
    115,
    97,
    114,
    98,
    97,
    110,
    99,
    111,
    104,
    105,
    106,
    111,
    115,
    118,
    105,
    97,
    106,
    101,
    112,
    97,
    98,
    108,
    111,
    195,
    169,
    115,
    116,
    101,
    118,
    105,
    101,
    110,
    101,
    114,
    101,
    105,
    110,
    111,
    100,
    101,
    106,
    97,
    114,
    102,
    111,
    110,
    100,
    111,
    99,
    97,
    110,
    97,
    108,
    110,
    111,
    114,
    116,
    101,
    108,
    101,
    116,
    114,
    97,
    99,
    97,
    117,
    115,
    97,
    116,
    111,
    109,
    97,
    114,
    109,
    97,
    110,
    111,
    115,
    108,
    117,
    110,
    101,
    115,
    97,
    117,
    116,
    111,
    115,
    118,
    105,
    108,
    108,
    97,
    118,
    101,
    110,
    100,
    111,
    112,
    101,
    115,
    97,
    114,
    116,
    105,
    112,
    111,
    115,
    116,
    101,
    110,
    103,
    97,
    109,
    97,
    114,
    99,
    111,
    108,
    108,
    101,
    118,
    97,
    112,
    97,
    100,
    114,
    101,
    117,
    110,
    105,
    100,
    111,
    118,
    97,
    109,
    111,
    115,
    122,
    111,
    110,
    97,
    115,
    97,
    109,
    98,
    111,
    115,
    98,
    97,
    110,
    100,
    97,
    109,
    97,
    114,
    105,
    97,
    97,
    98,
    117,
    115,
    111,
    109,
    117,
    99,
    104,
    97,
    115,
    117,
    98,
    105,
    114,
    114,
    105,
    111,
    106,
    97,
    118,
    105,
    118,
    105,
    114,
    103,
    114,
    97,
    100,
    111,
    99,
    104,
    105,
    99,
    97,
    97,
    108,
    108,
    195,
    173,
    106,
    111,
    118,
    101,
    110,
    100,
    105,
    99,
    104,
    97,
    101,
    115,
    116,
    97,
    110,
    116,
    97,
    108,
    101,
    115,
    115,
    97,
    108,
    105,
    114,
    115,
    117,
    101,
    108,
    111,
    112,
    101,
    115,
    111,
    115,
    102,
    105,
    110,
    101,
    115,
    108,
    108,
    97,
    109,
    97,
    98,
    117,
    115,
    99,
    111,
    195,
    169,
    115,
    116,
    97,
    108,
    108,
    101,
    103,
    97,
    110,
    101,
    103,
    114,
    111,
    112,
    108,
    97,
    122,
    97,
    104,
    117,
    109,
    111,
    114,
    112,
    97,
    103,
    97,
    114,
    106,
    117,
    110,
    116,
    97,
    100,
    111,
    98,
    108,
    101,
    105,
    115,
    108,
    97,
    115,
    98,
    111,
    108,
    115,
    97,
    98,
    97,
    195,
    177,
    111,
    104,
    97,
    98,
    108,
    97,
    108,
    117,
    99,
    104,
    97,
    195,
    129,
    114,
    101,
    97,
    100,
    105,
    99,
    101,
    110,
    106,
    117,
    103,
    97,
    114,
    110,
    111,
    116,
    97,
    115,
    118,
    97,
    108,
    108,
    101,
    97,
    108,
    108,
    195,
    161,
    99,
    97,
    114,
    103,
    97,
    100,
    111,
    108,
    111,
    114,
    97,
    98,
    97,
    106,
    111,
    101,
    115,
    116,
    195,
    169,
    103,
    117,
    115,
    116,
    111,
    109,
    101,
    110,
    116,
    101,
    109,
    97,
    114,
    105,
    111,
    102,
    105,
    114,
    109,
    97,
    99,
    111,
    115,
    116,
    111,
    102,
    105,
    99,
    104,
    97,
    112,
    108,
    97,
    116,
    97,
    104,
    111,
    103,
    97,
    114,
    97,
    114,
    116,
    101,
    115,
    108,
    101,
    121,
    101,
    115,
    97,
    113,
    117,
    101,
    108,
    109,
    117,
    115,
    101,
    111,
    98,
    97,
    115,
    101,
    115,
    112,
    111,
    99,
    111,
    115,
    109,
    105,
    116,
    97,
    100,
    99,
    105,
    101,
    108,
    111,
    99,
    104,
    105,
    99,
    111,
    109,
    105,
    101,
    100,
    111,
    103,
    97,
    110,
    97,
    114,
    115,
    97,
    110,
    116,
    111,
    101,
    116,
    97,
    112,
    97,
    100,
    101,
    98,
    101,
    115,
    112,
    108,
    97,
    121,
    97,
    114,
    101,
    100,
    101,
    115,
    115,
    105,
    101,
    116,
    101,
    99,
    111,
    114,
    116,
    101,
    99,
    111,
    114,
    101,
    97,
    100,
    117,
    100,
    97,
    115,
    100,
    101,
    115,
    101,
    111,
    118,
    105,
    101,
    106,
    111,
    100,
    101,
    115,
    101,
    97,
    97,
    103,
    117,
    97,
    115,
    38,
    113,
    117,
    111,
    116,
    59,
    100,
    111,
    109,
    97,
    105,
    110,
    99,
    111,
    109,
    109,
    111,
    110,
    115,
    116,
    97,
    116,
    117,
    115,
    101,
    118,
    101,
    110,
    116,
    115,
    109,
    97,
    115,
    116,
    101,
    114,
    115,
    121,
    115,
    116,
    101,
    109,
    97,
    99,
    116,
    105,
    111,
    110,
    98,
    97,
    110,
    110,
    101,
    114,
    114,
    101,
    109,
    111,
    118,
    101,
    115,
    99,
    114,
    111,
    108,
    108,
    117,
    112,
    100,
    97,
    116,
    101,
    103,
    108,
    111,
    98,
    97,
    108,
    109,
    101,
    100,
    105,
    117,
    109,
    102,
    105,
    108,
    116,
    101,
    114,
    110,
    117,
    109,
    98,
    101,
    114,
    99,
    104,
    97,
    110,
    103,
    101,
    114,
    101,
    115,
    117,
    108,
    116,
    112,
    117,
    98,
    108,
    105,
    99,
    115,
    99,
    114,
    101,
    101,
    110,
    99,
    104,
    111,
    111,
    115,
    101,
    110,
    111,
    114,
    109,
    97,
    108,
    116,
    114,
    97,
    118,
    101,
    108,
    105,
    115,
    115,
    117,
    101,
    115,
    115,
    111,
    117,
    114,
    99,
    101,
    116,
    97,
    114,
    103,
    101,
    116,
    115,
    112,
    114,
    105,
    110,
    103,
    109,
    111,
    100,
    117,
    108,
    101,
    109,
    111,
    98,
    105,
    108,
    101,
    115,
    119,
    105,
    116,
    99,
    104,
    112,
    104,
    111,
    116,
    111,
    115,
    98,
    111,
    114,
    100,
    101,
    114,
    114,
    101,
    103,
    105,
    111,
    110,
    105,
    116,
    115,
    101,
    108,
    102,
    115,
    111,
    99,
    105,
    97,
    108,
    97,
    99,
    116,
    105,
    118,
    101,
    99,
    111,
    108,
    117,
    109,
    110,
    114,
    101,
    99,
    111,
    114,
    100,
    102,
    111,
    108,
    108,
    111,
    119,
    116,
    105,
    116,
    108,
    101,
    62,
    101,
    105,
    116,
    104,
    101,
    114,
    108,
    101,
    110,
    103,
    116,
    104,
    102,
    97,
    109,
    105,
    108,
    121,
    102,
    114,
    105,
    101,
    110,
    100,
    108,
    97,
    121,
    111,
    117,
    116,
    97,
    117,
    116,
    104,
    111,
    114,
    99,
    114,
    101,
    97,
    116,
    101,
    114,
    101,
    118,
    105,
    101,
    119,
    115,
    117,
    109,
    109,
    101,
    114,
    115,
    101,
    114,
    118,
    101,
    114,
    112,
    108,
    97,
    121,
    101,
    100,
    112,
    108,
    97,
    121,
    101,
    114,
    101,
    120,
    112,
    97,
    110,
    100,
    112,
    111,
    108,
    105,
    99,
    121,
    102,
    111,
    114,
    109,
    97,
    116,
    100,
    111,
    117,
    98,
    108,
    101,
    112,
    111,
    105,
    110,
    116,
    115,
    115,
    101,
    114,
    105,
    101,
    115,
    112,
    101,
    114,
    115,
    111,
    110,
    108,
    105,
    118,
    105,
    110,
    103,
    100,
    101,
    115,
    105,
    103,
    110,
    109,
    111,
    110,
    116,
    104,
    115,
    102,
    111,
    114,
    99,
    101,
    115,
    117,
    110,
    105,
    113,
    117,
    101,
    119,
    101,
    105,
    103,
    104,
    116,
    112,
    101,
    111,
    112,
    108,
    101,
    101,
    110,
    101,
    114,
    103,
    121,
    110,
    97,
    116,
    117,
    114,
    101,
    115,
    101,
    97,
    114,
    99,
    104,
    102,
    105,
    103,
    117,
    114,
    101,
    104,
    97,
    118,
    105,
    110,
    103,
    99,
    117,
    115,
    116,
    111,
    109,
    111,
    102,
    102,
    115,
    101,
    116,
    108,
    101,
    116,
    116,
    101,
    114,
    119,
    105,
    110,
    100,
    111,
    119,
    115,
    117,
    98,
    109,
    105,
    116,
    114,
    101,
    110,
    100,
    101,
    114,
    103,
    114,
    111,
    117,
    112,
    115,
    117,
    112,
    108,
    111,
    97,
    100,
    104,
    101,
    97,
    108,
    116,
    104,
    109,
    101,
    116,
    104,
    111,
    100,
    118,
    105,
    100,
    101,
    111,
    115,
    115,
    99,
    104,
    111,
    111,
    108,
    102,
    117,
    116,
    117,
    114,
    101,
    115,
    104,
    97,
    100,
    111,
    119,
    100,
    101,
    98,
    97,
    116,
    101,
    118,
    97,
    108,
    117,
    101,
    115,
    79,
    98,
    106,
    101,
    99,
    116,
    111,
    116,
    104,
    101,
    114,
    115,
    114,
    105,
    103,
    104,
    116,
    115,
    108,
    101,
    97,
    103,
    117,
    101,
    99,
    104,
    114,
    111,
    109,
    101,
    115,
    105,
    109,
    112,
    108,
    101,
    110,
    111,
    116,
    105,
    99,
    101,
    115,
    104,
    97,
    114,
    101,
    100,
    101,
    110,
    100,
    105,
    110,
    103,
    115,
    101,
    97,
    115,
    111,
    110,
    114,
    101,
    112,
    111,
    114,
    116,
    111,
    110,
    108,
    105,
    110,
    101,
    115,
    113,
    117,
    97,
    114,
    101,
    98,
    117,
    116,
    116,
    111,
    110,
    105,
    109,
    97,
    103,
    101,
    115,
    101,
    110,
    97,
    98,
    108,
    101,
    109,
    111,
    118,
    105,
    110,
    103,
    108,
    97,
    116,
    101,
    115,
    116,
    119,
    105,
    110,
    116,
    101,
    114,
    70,
    114,
    97,
    110,
    99,
    101,
    112,
    101,
    114,
    105,
    111,
    100,
    115,
    116,
    114,
    111,
    110,
    103,
    114,
    101,
    112,
    101,
    97,
    116,
    76,
    111,
    110,
    100,
    111,
    110,
    100,
    101,
    116,
    97,
    105,
    108,
    102,
    111,
    114,
    109,
    101,
    100,
    100,
    101,
    109,
    97,
    110,
    100,
    115,
    101,
    99,
    117,
    114,
    101,
    112,
    97,
    115,
    115,
    101,
    100,
    116,
    111,
    103,
    103,
    108,
    101,
    112,
    108,
    97,
    99,
    101,
    115,
    100,
    101,
    118,
    105,
    99,
    101,
    115,
    116,
    97,
    116,
    105,
    99,
    99,
    105,
    116,
    105,
    101,
    115,
    115,
    116,
    114,
    101,
    97,
    109,
    121,
    101,
    108,
    108,
    111,
    119,
    97,
    116,
    116,
    97,
    99,
    107,
    115,
    116,
    114,
    101,
    101,
    116,
    102,
    108,
    105,
    103,
    104,
    116,
    104,
    105,
    100,
    100,
    101,
    110,
    105,
    110,
    102,
    111,
    34,
    62,
    111,
    112,
    101,
    110,
    101,
    100,
    117,
    115,
    101,
    102,
    117,
    108,
    118,
    97,
    108,
    108,
    101,
    121,
    99,
    97,
    117,
    115,
    101,
    115,
    108,
    101,
    97,
    100,
    101,
    114,
    115,
    101,
    99,
    114,
    101,
    116,
    115,
    101,
    99,
    111,
    110,
    100,
    100,
    97,
    109,
    97,
    103,
    101,
    115,
    112,
    111,
    114,
    116,
    115,
    101,
    120,
    99,
    101,
    112,
    116,
    114,
    97,
    116,
    105,
    110,
    103,
    115,
    105,
    103,
    110,
    101,
    100,
    116,
    104,
    105,
    110,
    103,
    115,
    101,
    102,
    102,
    101,
    99,
    116,
    102,
    105,
    101,
    108,
    100,
    115,
    115,
    116,
    97,
    116,
    101,
    115,
    111,
    102,
    102,
    105,
    99,
    101,
    118,
    105,
    115,
    117,
    97,
    108,
    101,
    100,
    105,
    116,
    111,
    114,
    118,
    111,
    108,
    117,
    109,
    101,
    82,
    101,
    112,
    111,
    114,
    116,
    109,
    117,
    115,
    101,
    117,
    109,
    109,
    111,
    118,
    105,
    101,
    115,
    112,
    97,
    114,
    101,
    110,
    116,
    97,
    99,
    99,
    101,
    115,
    115,
    109,
    111,
    115,
    116,
    108,
    121,
    109,
    111,
    116,
    104,
    101,
    114,
    34,
    32,
    105,
    100,
    61,
    34,
    109,
    97,
    114,
    107,
    101,
    116,
    103,
    114,
    111,
    117,
    110,
    100,
    99,
    104,
    97,
    110,
    99,
    101,
    115,
    117,
    114,
    118,
    101,
    121,
    98,
    101,
    102,
    111,
    114,
    101,
    115,
    121,
    109,
    98,
    111,
    108,
    109,
    111,
    109,
    101,
    110,
    116,
    115,
    112,
    101,
    101,
    99,
    104,
    109,
    111,
    116,
    105,
    111,
    110,
    105,
    110,
    115,
    105,
    100,
    101,
    109,
    97,
    116,
    116,
    101,
    114,
    67,
    101,
    110,
    116,
    101,
    114,
    111,
    98,
    106,
    101,
    99,
    116,
    101,
    120,
    105,
    115,
    116,
    115,
    109,
    105,
    100,
    100,
    108,
    101,
    69,
    117,
    114,
    111,
    112,
    101,
    103,
    114,
    111,
    119,
    116,
    104,
    108,
    101,
    103,
    97,
    99,
    121,
    109,
    97,
    110,
    110,
    101,
    114,
    101,
    110,
    111,
    117,
    103,
    104,
    99,
    97,
    114,
    101,
    101,
    114,
    97,
    110,
    115,
    119,
    101,
    114,
    111,
    114,
    105,
    103,
    105,
    110,
    112,
    111,
    114,
    116,
    97,
    108,
    99,
    108,
    105,
    101,
    110,
    116,
    115,
    101,
    108,
    101,
    99,
    116,
    114,
    97,
    110,
    100,
    111,
    109,
    99,
    108,
    111,
    115,
    101,
    100,
    116,
    111,
    112,
    105,
    99,
    115,
    99,
    111,
    109,
    105,
    110,
    103,
    102,
    97,
    116,
    104,
    101,
    114,
    111,
    112,
    116,
    105,
    111,
    110,
    115,
    105,
    109,
    112,
    108,
    121,
    114,
    97,
    105,
    115,
    101,
    100,
    101,
    115,
    99,
    97,
    112,
    101,
    99,
    104,
    111,
    115,
    101,
    110,
    99,
    104,
    117,
    114,
    99,
    104,
    100,
    101,
    102,
    105,
    110,
    101,
    114,
    101,
    97,
    115,
    111,
    110,
    99,
    111,
    114,
    110,
    101,
    114,
    111,
    117,
    116,
    112,
    117,
    116,
    109,
    101,
    109,
    111,
    114,
    121,
    105,
    102,
    114,
    97,
    109,
    101,
    112,
    111,
    108,
    105,
    99,
    101,
    109,
    111,
    100,
    101,
    108,
    115,
    78,
    117,
    109,
    98,
    101,
    114,
    100,
    117,
    114,
    105,
    110,
    103,
    111,
    102,
    102,
    101,
    114,
    115,
    115,
    116,
    121,
    108,
    101,
    115,
    107,
    105,
    108,
    108,
    101,
    100,
    108,
    105,
    115,
    116,
    101,
    100,
    99,
    97,
    108,
    108,
    101,
    100,
    115,
    105,
    108,
    118,
    101,
    114,
    109,
    97,
    114,
    103,
    105,
    110,
    100,
    101,
    108,
    101,
    116,
    101,
    98,
    101,
    116,
    116,
    101,
    114,
    98,
    114,
    111,
    119,
    115,
    101,
    108,
    105,
    109,
    105,
    116,
    115,
    71,
    108,
    111,
    98,
    97,
    108,
    115,
    105,
    110,
    103,
    108,
    101,
    119,
    105,
    100,
    103,
    101,
    116,
    99,
    101,
    110,
    116,
    101,
    114,
    98,
    117,
    100,
    103,
    101,
    116,
    110,
    111,
    119,
    114,
    97,
    112,
    99,
    114,
    101,
    100,
    105,
    116,
    99,
    108,
    97,
    105,
    109,
    115,
    101,
    110,
    103,
    105,
    110,
    101,
    115,
    97,
    102,
    101,
    116,
    121,
    99,
    104,
    111,
    105,
    99,
    101,
    115,
    112,
    105,
    114,
    105,
    116,
    45,
    115,
    116,
    121,
    108,
    101,
    115,
    112,
    114,
    101,
    97,
    100,
    109,
    97,
    107,
    105,
    110,
    103,
    110,
    101,
    101,
    100,
    101,
    100,
    114,
    117,
    115,
    115,
    105,
    97,
    112,
    108,
    101,
    97,
    115,
    101,
    101,
    120,
    116,
    101,
    110,
    116,
    83,
    99,
    114,
    105,
    112,
    116,
    98,
    114,
    111,
    107,
    101,
    110,
    97,
    108,
    108,
    111,
    119,
    115,
    99,
    104,
    97,
    114,
    103,
    101,
    100,
    105,
    118,
    105,
    100,
    101,
    102,
    97,
    99,
    116,
    111,
    114,
    109,
    101,
    109,
    98,
    101,
    114,
    45,
    98,
    97,
    115,
    101,
    100,
    116,
    104,
    101,
    111,
    114,
    121,
    99,
    111,
    110,
    102,
    105,
    103,
    97,
    114,
    111,
    117,
    110,
    100,
    119,
    111,
    114,
    107,
    101,
    100,
    104,
    101,
    108,
    112,
    101,
    100,
    67,
    104,
    117,
    114,
    99,
    104,
    105,
    109,
    112,
    97,
    99,
    116,
    115,
    104,
    111,
    117,
    108,
    100,
    97,
    108,
    119,
    97,
    121,
    115,
    108,
    111,
    103,
    111,
    34,
    32,
    98,
    111,
    116,
    116,
    111,
    109,
    108,
    105,
    115,
    116,
    34,
    62,
    41,
    123,
    118,
    97,
    114,
    32,
    112,
    114,
    101,
    102,
    105,
    120,
    111,
    114,
    97,
    110,
    103,
    101,
    72,
    101,
    97,
    100,
    101,
    114,
    46,
    112,
    117,
    115,
    104,
    40,
    99,
    111,
    117,
    112,
    108,
    101,
    103,
    97,
    114,
    100,
    101,
    110,
    98,
    114,
    105,
    100,
    103,
    101,
    108,
    97,
    117,
    110,
    99,
    104,
    82,
    101,
    118,
    105,
    101,
    119,
    116,
    97,
    107,
    105,
    110,
    103,
    118,
    105,
    115,
    105,
    111,
    110,
    108,
    105,
    116,
    116,
    108,
    101,
    100,
    97,
    116,
    105,
    110,
    103,
    66,
    117,
    116,
    116,
    111,
    110,
    98,
    101,
    97,
    117,
    116,
    121,
    116,
    104,
    101,
    109,
    101,
    115,
    102,
    111,
    114,
    103,
    111,
    116,
    83,
    101,
    97,
    114,
    99,
    104,
    97,
    110,
    99,
    104,
    111,
    114,
    97,
    108,
    109,
    111,
    115,
    116,
    108,
    111,
    97,
    100,
    101,
    100,
    67,
    104,
    97,
    110,
    103,
    101,
    114,
    101,
    116,
    117,
    114,
    110,
    115,
    116,
    114,
    105,
    110,
    103,
    114,
    101,
    108,
    111,
    97,
    100,
    77,
    111,
    98,
    105,
    108,
    101,
    105,
    110,
    99,
    111,
    109,
    101,
    115,
    117,
    112,
    112,
    108,
    121,
    83,
    111,
    117,
    114,
    99,
    101,
    111,
    114,
    100,
    101,
    114,
    115,
    118,
    105,
    101,
    119,
    101,
    100,
    38,
    110,
    98,
    115,
    112,
    59,
    99,
    111,
    117,
    114,
    115,
    101,
    65,
    98,
    111,
    117,
    116,
    32,
    105,
    115,
    108,
    97,
    110,
    100,
    60,
    104,
    116,
    109,
    108,
    32,
    99,
    111,
    111,
    107,
    105,
    101,
    110,
    97,
    109,
    101,
    61,
    34,
    97,
    109,
    97,
    122,
    111,
    110,
    109,
    111,
    100,
    101,
    114,
    110,
    97,
    100,
    118,
    105,
    99,
    101,
    105,
    110,
    60,
    47,
    97,
    62,
    58,
    32,
    84,
    104,
    101,
    32,
    100,
    105,
    97,
    108,
    111,
    103,
    104,
    111,
    117,
    115,
    101,
    115,
    66,
    69,
    71,
    73,
    78,
    32,
    77,
    101,
    120,
    105,
    99,
    111,
    115,
    116,
    97,
    114,
    116,
    115,
    99,
    101,
    110,
    116,
    114,
    101,
    104,
    101,
    105,
    103,
    104,
    116,
    97,
    100,
    100,
    105,
    110,
    103,
    73,
    115,
    108,
    97,
    110,
    100,
    97,
    115,
    115,
    101,
    116,
    115,
    69,
    109,
    112,
    105,
    114,
    101,
    83,
    99,
    104,
    111,
    111,
    108,
    101,
    102,
    102,
    111,
    114,
    116,
    100,
    105,
    114,
    101,
    99,
    116,
    110,
    101,
    97,
    114,
    108,
    121,
    109,
    97,
    110,
    117,
    97,
    108,
    83,
    101,
    108,
    101,
    99,
    116,
    46,
    10,
    10,
    79,
    110,
    101,
    106,
    111,
    105,
    110,
    101,
    100,
    109,
    101,
    110,
    117,
    34,
    62,
    80,
    104,
    105,
    108,
    105,
    112,
    97,
    119,
    97,
    114,
    100,
    115,
    104,
    97,
    110,
    100,
    108,
    101,
    105,
    109,
    112,
    111,
    114,
    116,
    79,
    102,
    102,
    105,
    99,
    101,
    114,
    101,
    103,
    97,
    114,
    100,
    115,
    107,
    105,
    108,
    108,
    115,
    110,
    97,
    116,
    105,
    111,
    110,
    83,
    112,
    111,
    114,
    116,
    115,
    100,
    101,
    103,
    114,
    101,
    101,
    119,
    101,
    101,
    107,
    108,
    121,
    32,
    40,
    101,
    46,
    103,
    46,
    98,
    101,
    104,
    105,
    110,
    100,
    100,
    111,
    99,
    116,
    111,
    114,
    108,
    111,
    103,
    103,
    101,
    100,
    117,
    110,
    105,
    116,
    101,
    100,
    60,
    47,
    98,
    62,
    60,
    47,
    98,
    101,
    103,
    105,
    110,
    115,
    112,
    108,
    97,
    110,
    116,
    115,
    97,
    115,
    115,
    105,
    115,
    116,
    97,
    114,
    116,
    105,
    115,
    116,
    105,
    115,
    115,
    117,
    101,
    100,
    51,
    48,
    48,
    112,
    120,
    124,
    99,
    97,
    110,
    97,
    100,
    97,
    97,
    103,
    101,
    110,
    99,
    121,
    115,
    99,
    104,
    101,
    109,
    101,
    114,
    101,
    109,
    97,
    105,
    110,
    66,
    114,
    97,
    122,
    105,
    108,
    115,
    97,
    109,
    112,
    108,
    101,
    108,
    111,
    103,
    111,
    34,
    62,
    98,
    101,
    121,
    111,
    110,
    100,
    45,
    115,
    99,
    97,
    108,
    101,
    97,
    99,
    99,
    101,
    112,
    116,
    115,
    101,
    114,
    118,
    101,
    100,
    109,
    97,
    114,
    105,
    110,
    101,
    70,
    111,
    111,
    116,
    101,
    114,
    99,
    97,
    109,
    101,
    114,
    97,
    60,
    47,
    104,
    49,
    62,
    10,
    95,
    102,
    111,
    114,
    109,
    34,
    108,
    101,
    97,
    118,
    101,
    115,
    115,
    116,
    114,
    101,
    115,
    115,
    34,
    32,
    47,
    62,
    13,
    10,
    46,
    103,
    105,
    102,
    34,
    32,
    111,
    110,
    108,
    111,
    97,
    100,
    108,
    111,
    97,
    100,
    101,
    114,
    79,
    120,
    102,
    111,
    114,
    100,
    115,
    105,
    115,
    116,
    101,
    114,
    115,
    117,
    114,
    118,
    105,
    118,
    108,
    105,
    115,
    116,
    101,
    110,
    102,
    101,
    109,
    97,
    108,
    101,
    68,
    101,
    115,
    105,
    103,
    110,
    115,
    105,
    122,
    101,
    61,
    34,
    97,
    112,
    112,
    101,
    97,
    108,
    116,
    101,
    120,
    116,
    34,
    62,
    108,
    101,
    118,
    101,
    108,
    115,
    116,
    104,
    97,
    110,
    107,
    115,
    104,
    105,
    103,
    104,
    101,
    114,
    102,
    111,
    114,
    99,
    101,
    100,
    97,
    110,
    105,
    109,
    97,
    108,
    97,
    110,
    121,
    111,
    110,
    101,
    65,
    102,
    114,
    105,
    99,
    97,
    97,
    103,
    114,
    101,
    101,
    100,
    114,
    101,
    99,
    101,
    110,
    116,
    80,
    101,
    111,
    112,
    108,
    101,
    60,
    98,
    114,
    32,
    47,
    62,
    119,
    111,
    110,
    100,
    101,
    114,
    112,
    114,
    105,
    99,
    101,
    115,
    116,
    117,
    114,
    110,
    101,
    100,
    124,
    124,
    32,
    123,
    125,
    59,
    109,
    97,
    105,
    110,
    34,
    62,
    105,
    110,
    108,
    105,
    110,
    101,
    115,
    117,
    110,
    100,
    97,
    121,
    119,
    114,
    97,
    112,
    34,
    62,
    102,
    97,
    105,
    108,
    101,
    100,
    99,
    101,
    110,
    115,
    117,
    115,
    109,
    105,
    110,
    117,
    116,
    101,
    98,
    101,
    97,
    99,
    111,
    110,
    113,
    117,
    111,
    116,
    101,
    115,
    49,
    53,
    48,
    112,
    120,
    124,
    101,
    115,
    116,
    97,
    116,
    101,
    114,
    101,
    109,
    111,
    116,
    101,
    101,
    109,
    97,
    105,
    108,
    34,
    108,
    105,
    110,
    107,
    101,
    100,
    114,
    105,
    103,
    104,
    116,
    59,
    115,
    105,
    103,
    110,
    97,
    108,
    102,
    111,
    114,
    109,
    97,
    108,
    49,
    46,
    104,
    116,
    109,
    108,
    115,
    105,
    103,
    110,
    117,
    112,
    112,
    114,
    105,
    110,
    99,
    101,
    102,
    108,
    111,
    97,
    116,
    58,
    46,
    112,
    110,
    103,
    34,
    32,
    102,
    111,
    114,
    117,
    109,
    46,
    65,
    99,
    99,
    101,
    115,
    115,
    112,
    97,
    112,
    101,
    114,
    115,
    115,
    111,
    117,
    110,
    100,
    115,
    101,
    120,
    116,
    101,
    110,
    100,
    72,
    101,
    105,
    103,
    104,
    116,
    115,
    108,
    105,
    100,
    101,
    114,
    85,
    84,
    70,
    45,
    56,
    34,
    38,
    97,
    109,
    112,
    59,
    32,
    66,
    101,
    102,
    111,
    114,
    101,
    46,
    32,
    87,
    105,
    116,
    104,
    115,
    116,
    117,
    100,
    105,
    111,
    111,
    119,
    110,
    101,
    114,
    115,
    109,
    97,
    110,
    97,
    103,
    101,
    112,
    114,
    111,
    102,
    105,
    116,
    106,
    81,
    117,
    101,
    114,
    121,
    97,
    110,
    110,
    117,
    97,
    108,
    112,
    97,
    114,
    97,
    109,
    115,
    98,
    111,
    117,
    103,
    104,
    116,
    102,
    97,
    109,
    111,
    117,
    115,
    103,
    111,
    111,
    103,
    108,
    101,
    108,
    111,
    110,
    103,
    101,
    114,
    105,
    43,
    43,
    41,
    32,
    123,
    105,
    115,
    114,
    97,
    101,
    108,
    115,
    97,
    121,
    105,
    110,
    103,
    100,
    101,
    99,
    105,
    100,
    101,
    104,
    111,
    109,
    101,
    34,
    62,
    104,
    101,
    97,
    100,
    101,
    114,
    101,
    110,
    115,
    117,
    114,
    101,
    98,
    114,
    97,
    110,
    99,
    104,
    112,
    105,
    101,
    99,
    101,
    115,
    98,
    108,
    111,
    99,
    107,
    59,
    115,
    116,
    97,
    116,
    101,
    100,
    116,
    111,
    112,
    34,
    62,
    60,
    114,
    97,
    99,
    105,
    110,
    103,
    114,
    101,
    115,
    105,
    122,
    101,
    45,
    45,
    38,
    103,
    116,
    59,
    112,
    97,
    99,
    105,
    116,
    121,
    115,
    101,
    120,
    117,
    97,
    108,
    98,
    117,
    114,
    101,
    97,
    117,
    46,
    106,
    112,
    103,
    34,
    32,
    49,
    48,
    44,
    48,
    48,
    48,
    111,
    98,
    116,
    97,
    105,
    110,
    116,
    105,
    116,
    108,
    101,
    115,
    97,
    109,
    111,
    117,
    110,
    116,
    44,
    32,
    73,
    110,
    99,
    46,
    99,
    111,
    109,
    101,
    100,
    121,
    109,
    101,
    110,
    117,
    34,
    32,
    108,
    121,
    114,
    105,
    99,
    115,
    116,
    111,
    100,
    97,
    121,
    46,
    105,
    110,
    100,
    101,
    101,
    100,
    99,
    111,
    117,
    110,
    116,
    121,
    95,
    108,
    111,
    103,
    111,
    46,
    70,
    97,
    109,
    105,
    108,
    121,
    108,
    111,
    111,
    107,
    101,
    100,
    77,
    97,
    114,
    107,
    101,
    116,
    108,
    115,
    101,
    32,
    105,
    102,
    80,
    108,
    97,
    121,
    101,
    114,
    116,
    117,
    114,
    107,
    101,
    121,
    41,
    59,
    118,
    97,
    114,
    32,
    102,
    111,
    114,
    101,
    115,
    116,
    103,
    105,
    118,
    105,
    110,
    103,
    101,
    114,
    114,
    111,
    114,
    115,
    68,
    111,
    109,
    97,
    105,
    110,
    125,
    101,
    108,
    115,
    101,
    123,
    105,
    110,
    115,
    101,
    114,
    116,
    66,
    108,
    111,
    103,
    60,
    47,
    102,
    111,
    111,
    116,
    101,
    114,
    108,
    111,
    103,
    105,
    110,
    46,
    102,
    97,
    115,
    116,
    101,
    114,
    97,
    103,
    101,
    110,
    116,
    115,
    60,
    98,
    111,
    100,
    121,
    32,
    49,
    48,
    112,
    120,
    32,
    48,
    112,
    114,
    97,
    103,
    109,
    97,
    102,
    114,
    105,
    100,
    97,
    121,
    106,
    117,
    110,
    105,
    111,
    114,
    100,
    111,
    108,
    108,
    97,
    114,
    112,
    108,
    97,
    99,
    101,
    100,
    99,
    111,
    118,
    101,
    114,
    115,
    112,
    108,
    117,
    103,
    105,
    110,
    53,
    44,
    48,
    48,
    48,
    32,
    112,
    97,
    103,
    101,
    34,
    62,
    98,
    111,
    115,
    116,
    111,
    110,
    46,
    116,
    101,
    115,
    116,
    40,
    97,
    118,
    97,
    116,
    97,
    114,
    116,
    101,
    115,
    116,
    101,
    100,
    95,
    99,
    111,
    117,
    110,
    116,
    102,
    111,
    114,
    117,
    109,
    115,
    115,
    99,
    104,
    101,
    109,
    97,
    105,
    110,
    100,
    101,
    120,
    44,
    102,
    105,
    108,
    108,
    101,
    100,
    115,
    104,
    97,
    114,
    101,
    115,
    114,
    101,
    97,
    100,
    101,
    114,
    97,
    108,
    101,
    114,
    116,
    40,
    97,
    112,
    112,
    101,
    97,
    114,
    83,
    117,
    98,
    109,
    105,
    116,
    108,
    105,
    110,
    101,
    34,
    62,
    98,
    111,
    100,
    121,
    34,
    62,
    10,
    42,
    32,
    84,
    104,
    101,
    84,
    104,
    111,
    117,
    103,
    104,
    115,
    101,
    101,
    105,
    110,
    103,
    106,
    101,
    114,
    115,
    101,
    121,
    78,
    101,
    119,
    115,
    60,
    47,
    118,
    101,
    114,
    105,
    102,
    121,
    101,
    120,
    112,
    101,
    114,
    116,
    105,
    110,
    106,
    117,
    114,
    121,
    119,
    105,
    100,
    116,
    104,
    61,
    67,
    111,
    111,
    107,
    105,
    101,
    83,
    84,
    65,
    82,
    84,
    32,
    97,
    99,
    114,
    111,
    115,
    115,
    95,
    105,
    109,
    97,
    103,
    101,
    116,
    104,
    114,
    101,
    97,
    100,
    110,
    97,
    116,
    105,
    118,
    101,
    112,
    111,
    99,
    107,
    101,
    116,
    98,
    111,
    120,
    34,
    62,
    10,
    83,
    121,
    115,
    116,
    101,
    109,
    32,
    68,
    97,
    118,
    105,
    100,
    99,
    97,
    110,
    99,
    101,
    114,
    116,
    97,
    98,
    108,
    101,
    115,
    112,
    114,
    111,
    118,
    101,
    100,
    65,
    112,
    114,
    105,
    108,
    32,
    114,
    101,
    97,
    108,
    108,
    121,
    100,
    114,
    105,
    118,
    101,
    114,
    105,
    116,
    101,
    109,
    34,
    62,
    109,
    111,
    114,
    101,
    34,
    62,
    98,
    111,
    97,
    114,
    100,
    115,
    99,
    111,
    108,
    111,
    114,
    115,
    99,
    97,
    109,
    112,
    117,
    115,
    102,
    105,
    114,
    115,
    116,
    32,
    124,
    124,
    32,
    91,
    93,
    59,
    109,
    101,
    100,
    105,
    97,
    46,
    103,
    117,
    105,
    116,
    97,
    114,
    102,
    105,
    110,
    105,
    115,
    104,
    119,
    105,
    100,
    116,
    104,
    58,
    115,
    104,
    111,
    119,
    101,
    100,
    79,
    116,
    104,
    101,
    114,
    32,
    46,
    112,
    104,
    112,
    34,
    32,
    97,
    115,
    115,
    117,
    109,
    101,
    108,
    97,
    121,
    101,
    114,
    115,
    119,
    105,
    108,
    115,
    111,
    110,
    115,
    116,
    111,
    114,
    101,
    115,
    114,
    101,
    108,
    105,
    101,
    102,
    115,
    119,
    101,
    100,
    101,
    110,
    67,
    117,
    115,
    116,
    111,
    109,
    101,
    97,
    115,
    105,
    108,
    121,
    32,
    121,
    111,
    117,
    114,
    32,
    83,
    116,
    114,
    105,
    110,
    103,
    10,
    10,
    87,
    104,
    105,
    108,
    116,
    97,
    121,
    108,
    111,
    114,
    99,
    108,
    101,
    97,
    114,
    58,
    114,
    101,
    115,
    111,
    114,
    116,
    102,
    114,
    101,
    110,
    99,
    104,
    116,
    104,
    111,
    117,
    103,
    104,
    34,
    41,
    32,
    43,
    32,
    34,
    60,
    98,
    111,
    100,
    121,
    62,
    98,
    117,
    121,
    105,
    110,
    103,
    98,
    114,
    97,
    110,
    100,
    115,
    77,
    101,
    109,
    98,
    101,
    114,
    110,
    97,
    109,
    101,
    34,
    62,
    111,
    112,
    112,
    105,
    110,
    103,
    115,
    101,
    99,
    116,
    111,
    114,
    53,
    112,
    120,
    59,
    34,
    62,
    118,
    115,
    112,
    97,
    99,
    101,
    112,
    111,
    115,
    116,
    101,
    114,
    109,
    97,
    106,
    111,
    114,
    32,
    99,
    111,
    102,
    102,
    101,
    101,
    109,
    97,
    114,
    116,
    105,
    110,
    109,
    97,
    116,
    117,
    114,
    101,
    104,
    97,
    112,
    112,
    101,
    110,
    60,
    47,
    110,
    97,
    118,
    62,
    107,
    97,
    110,
    115,
    97,
    115,
    108,
    105,
    110,
    107,
    34,
    62,
    73,
    109,
    97,
    103,
    101,
    115,
    61,
    102,
    97,
    108,
    115,
    101,
    119,
    104,
    105,
    108,
    101,
    32,
    104,
    115,
    112,
    97,
    99,
    101,
    48,
    38,
    97,
    109,
    112,
    59,
    32,
    10,
    10,
    73,
    110,
    32,
    32,
    112,
    111,
    119,
    101,
    114,
    80,
    111,
    108,
    115,
    107,
    105,
    45,
    99,
    111,
    108,
    111,
    114,
    106,
    111,
    114,
    100,
    97,
    110,
    66,
    111,
    116,
    116,
    111,
    109,
    83,
    116,
    97,
    114,
    116,
    32,
    45,
    99,
    111,
    117,
    110,
    116,
    50,
    46,
    104,
    116,
    109,
    108,
    110,
    101,
    119,
    115,
    34,
    62,
    48,
    49,
    46,
    106,
    112,
    103,
    79,
    110,
    108,
    105,
    110,
    101,
    45,
    114,
    105,
    103,
    104,
    116,
    109,
    105,
    108,
    108,
    101,
    114,
    115,
    101,
    110,
    105,
    111,
    114,
    73,
    83,
    66,
    78,
    32,
    48,
    48,
    44,
    48,
    48,
    48,
    32,
    103,
    117,
    105,
    100,
    101,
    115,
    118,
    97,
    108,
    117,
    101,
    41,
    101,
    99,
    116,
    105,
    111,
    110,
    114,
    101,
    112,
    97,
    105,
    114,
    46,
    120,
    109,
    108,
    34,
    32,
    32,
    114,
    105,
    103,
    104,
    116,
    115,
    46,
    104,
    116,
    109,
    108,
    45,
    98,
    108,
    111,
    99,
    107,
    114,
    101,
    103,
    69,
    120,
    112,
    58,
    104,
    111,
    118,
    101,
    114,
    119,
    105,
    116,
    104,
    105,
    110,
    118,
    105,
    114,
    103,
    105,
    110,
    112,
    104,
    111,
    110,
    101,
    115,
    60,
    47,
    116,
    114,
    62,
    13,
    117,
    115,
    105,
    110,
    103,
    32,
    10,
    9,
    118,
    97,
    114,
    32,
    62,
    39,
    41,
    59,
    10,
    9,
    60,
    47,
    116,
    100,
    62,
    10,
    60,
    47,
    116,
    114,
    62,
    10,
    98,
    97,
    104,
    97,
    115,
    97,
    98,
    114,
    97,
    115,
    105,
    108,
    103,
    97,
    108,
    101,
    103,
    111,
    109,
    97,
    103,
    121,
    97,
    114,
    112,
    111,
    108,
    115,
    107,
    105,
    115,
    114,
    112,
    115,
    107,
    105,
    216,
    177,
    216,
    175,
    217,
    136,
    228,
    184,
    173,
    230,
    150,
    135,
    231,
    174,
    128,
    228,
    189,
    147,
    231,
    185,
    129,
    233,
    171,
    148,
    228,
    191,
    161,
    230,
    129,
    175,
    228,
    184,
    173,
    229,
    155,
    189,
    230,
    136,
    145,
    228,
    187,
    172,
    228,
    184,
    128,
    228,
    184,
    170,
    229,
    133,
    172,
    229,
    143,
    184,
    231,
    174,
    161,
    231,
    144,
    134,
    232,
    174,
    186,
    229,
    157,
    155,
    229,
    143,
    175,
    228,
    187,
    165,
    230,
    156,
    141,
    229,
    138,
    161,
    230,
    151,
    182,
    233,
    151,
    180,
    228,
    184,
    170,
    228,
    186,
    186,
    228,
    186,
    167,
    229,
    147,
    129,
    232,
    135,
    170,
    229,
    183,
    177,
    228,
    188,
    129,
    228,
    184,
    154,
    230,
    159,
    165,
    231,
    156,
    139,
    229,
    183,
    165,
    228,
    189,
    156,
    232,
    129,
    148,
    231,
    179,
    187,
    230,
    178,
    161,
    230,
    156,
    137,
    231,
    189,
    145,
    231,
    171,
    153,
    230,
    137,
    128,
    230,
    156,
    137,
    232,
    175,
    132,
    232,
    174,
    186,
    228,
    184,
    173,
    229,
    191,
    131,
    230,
    150,
    135,
    231,
    171,
    160,
    231,
    148,
    168,
    230,
    136,
    183,
    233,
    166,
    150,
    233,
    161,
    181,
    228,
    189,
    156,
    232,
    128,
    133,
    230,
    138,
    128,
    230,
    156,
    175,
    233,
    151,
    174,
    233,
    162,
    152,
    231,
    155,
    184,
    229,
    133,
    179,
    228,
    184,
    139,
    232,
    189,
    189,
    230,
    144,
    156,
    231,
    180,
    162,
    228,
    189,
    191,
    231,
    148,
    168,
    232,
    189,
    175,
    228,
    187,
    182,
    229,
    156,
    168,
    231,
    186,
    191,
    228,
    184,
    187,
    233,
    162,
    152,
    232,
    181,
    132,
    230,
    150,
    153,
    232,
    167,
    134,
    233,
    162,
    145,
    229,
    155,
    158,
    229,
    164,
    141,
    230,
    179,
    168,
    229,
    134,
    140,
    231,
    189,
    145,
    231,
    187,
    156,
    230,
    148,
    182,
    232,
    151,
    143,
    229,
    134,
    133,
    229,
    174,
    185,
    230,
    142,
    168,
    232,
    141,
    144,
    229,
    184,
    130,
    229,
    156,
    186,
    230,
    182,
    136,
    230,
    129,
    175,
    231,
    169,
    186,
    233,
    151,
    180,
    229,
    143,
    145,
    229,
    184,
    131,
    228,
    187,
    128,
    228,
    185,
    136,
    229,
    165,
    189,
    229,
    143,
    139,
    231,
    148,
    159,
    230,
    180,
    187,
    229,
    155,
    190,
    231,
    137,
    135,
    229,
    143,
    145,
    229,
    177,
    149,
    229,
    166,
    130,
    230,
    158,
    156,
    230,
    137,
    139,
    230,
    156,
    186,
    230,
    150,
    176,
    233,
    151,
    187,
    230,
    156,
    128,
    230,
    150,
    176,
    230,
    150,
    185,
    229,
    188,
    143,
    229,
    140,
    151,
    228,
    186,
    172,
    230,
    143,
    144,
    228,
    190,
    155,
    229,
    133,
    179,
    228,
    186,
    142,
    230,
    155,
    180,
    229,
    164,
    154,
    232,
    191,
    153,
    228,
    184,
    170,
    231,
    179,
    187,
    231,
    187,
    159,
    231,
    159,
    165,
    233,
    129,
    147,
    230,
    184,
    184,
    230,
    136,
    143,
    229,
    185,
    191,
    229,
    145,
    138,
    229,
    133,
    182,
    228,
    187,
    150,
    229,
    143,
    145,
    232,
    161,
    168,
    229,
    174,
    137,
    229,
    133,
    168,
    231,
    172,
    172,
    228,
    184,
    128,
    228,
    188,
    154,
    229,
    145,
    152,
    232,
    191,
    155,
    232,
    161,
    140,
    231,
    130,
    185,
    229,
    135,
    187,
    231,
    137,
    136,
    230,
    157,
    131,
    231,
    148,
    181,
    229,
    173,
    144,
    228,
    184,
    150,
    231,
    149,
    140,
    232,
    174,
    190,
    232,
    174,
    161,
    229,
    133,
    141,
    232,
    180,
    185,
    230,
    149,
    153,
    232,
    130,
    178,
    229,
    138,
    160,
    229,
    133,
    165,
    230,
    180,
    187,
    229,
    138,
    168,
    228,
    187,
    150,
    228,
    187,
    172,
    229,
    149,
    134,
    229,
    147,
    129,
    229,
    141,
    154,
    229,
    174,
    162,
    231,
    142,
    176,
    229,
    156,
    168,
    228,
    184,
    138,
    230,
    181,
    183,
    229,
    166,
    130,
    228,
    189,
    149,
    229,
    183,
    178,
    231,
    187,
    143,
    231,
    149,
    153,
    232,
    168,
    128,
    232,
    175,
    166,
    231,
    187,
    134,
    231,
    164,
    190,
    229,
    140,
    186,
    231,
    153,
    187,
    229,
    189,
    149,
    230,
    156,
    172,
    231,
    171,
    153,
    233,
    156,
    128,
    232,
    166,
    129,
    228,
    187,
    183,
    230,
    160,
    188,
    230,
    148,
    175,
    230,
    140,
    129,
    229,
    155,
    189,
    233,
    153,
    133,
    233,
    147,
    190,
    230,
    142,
    165,
    229,
    155,
    189,
    229,
    174,
    182,
    229,
    187,
    186,
    232,
    174,
    190,
    230,
    156,
    139,
    229,
    143,
    139,
    233,
    152,
    133,
    232,
    175,
    187,
    230,
    179,
    149,
    229,
    190,
    139,
    228,
    189,
    141,
    231,
    189,
    174,
    231,
    187,
    143,
    230,
    181,
    142,
    233,
    128,
    137,
    230,
    139,
    169,
    232,
    191,
    153,
    230,
    160,
    183,
    229,
    189,
    147,
    229,
    137,
    141,
    229,
    136,
    134,
    231,
    177,
    187,
    230,
    142,
    146,
    232,
    161,
    140,
    229,
    155,
    160,
    228,
    184,
    186,
    228,
    186,
    164,
    230,
    152,
    147,
    230,
    156,
    128,
    229,
    144,
    142,
    233,
    159,
    179,
    228,
    185,
    144,
    228,
    184,
    141,
    232,
    131,
    189,
    233,
    128,
    154,
    232,
    191,
    135,
    232,
    161,
    140,
    228,
    184,
    154,
    231,
    167,
    145,
    230,
    138,
    128,
    229,
    143,
    175,
    232,
    131,
    189,
    232,
    174,
    190,
    229,
    164,
    135,
    229,
    144,
    136,
    228,
    189,
    156,
    229,
    164,
    167,
    229,
    174,
    182,
    231,
    164,
    190,
    228,
    188,
    154,
    231,
    160,
    148,
    231,
    169,
    182,
    228,
    184,
    147,
    228,
    184,
    154,
    229,
    133,
    168,
    233,
    131,
    168,
    233,
    161,
    185,
    231,
    155,
    174,
    232,
    191,
    153,
    233,
    135,
    140,
    232,
    191,
    152,
    230,
    152,
    175,
    229,
    188,
    128,
    229,
    167,
    139,
    230,
    131,
    133,
    229,
    134,
    181,
    231,
    148,
    181,
    232,
    132,
    145,
    230,
    150,
    135,
    228,
    187,
    182,
    229,
    147,
    129,
    231,
    137,
    140,
    229,
    184,
    174,
    229,
    138,
    169,
    230,
    150,
    135,
    229,
    140,
    150,
    232,
    181,
    132,
    230,
    186,
    144,
    229,
    164,
    167,
    229,
    173,
    166,
    229,
    173,
    166,
    228,
    185,
    160,
    229,
    156,
    176,
    229,
    157,
    128,
    230,
    181,
    143,
    232,
    167,
    136,
    230,
    138,
    149,
    232,
    181,
    132,
    229,
    183,
    165,
    231,
    168,
    139,
    232,
    166,
    129,
    230,
    177,
    130,
    230,
    128,
    142,
    228,
    185,
    136,
    230,
    151,
    182,
    229,
    128,
    153,
    229,
    138,
    159,
    232,
    131,
    189,
    228,
    184,
    187,
    232,
    166,
    129,
    231,
    155,
    174,
    229,
    137,
    141,
    232,
    181,
    132,
    232,
    174,
    175,
    229,
    159,
    142,
    229,
    184,
    130,
    230,
    150,
    185,
    230,
    179,
    149,
    231,
    148,
    181,
    229,
    189,
    177,
    230,
    139,
    155,
    232,
    129,
    152,
    229,
    163,
    176,
    230,
    152,
    142,
    228,
    187,
    187,
    228,
    189,
    149,
    229,
    129,
    165,
    229,
    186,
    183,
    230,
    149,
    176,
    230,
    141,
    174,
    231,
    190,
    142,
    229,
    155,
    189,
    230,
    177,
    189,
    232,
    189,
    166,
    228,
    187,
    139,
    231,
    187,
    141,
    228,
    189,
    134,
    230,
    152,
    175,
    228,
    186,
    164,
    230,
    181,
    129,
    231,
    148,
    159,
    228,
    186,
    167,
    230,
    137,
    128,
    228,
    187,
    165,
    231,
    148,
    181,
    232,
    175,
    157,
    230,
    152,
    190,
    231,
    164,
    186,
    228,
    184,
    128,
    228,
    186,
    155,
    229,
    141,
    149,
    228,
    189,
    141,
    228,
    186,
    186,
    229,
    145,
    152,
    229,
    136,
    134,
    230,
    158,
    144,
    229,
    156,
    176,
    229,
    155,
    190,
    230,
    151,
    133,
    230,
    184,
    184,
    229,
    183,
    165,
    229,
    133,
    183,
    229,
    173,
    166,
    231,
    148,
    159,
    231,
    179,
    187,
    229,
    136,
    151,
    231,
    189,
    145,
    229,
    143,
    139,
    229,
    184,
    150,
    229,
    173,
    144,
    229,
    175,
    134,
    231,
    160,
    129,
    233,
    162,
    145,
    233,
    129,
    147,
    230,
    142,
    167,
    229,
    136,
    182,
    229,
    156,
    176,
    229,
    140,
    186,
    229,
    159,
    186,
    230,
    156,
    172,
    229,
    133,
    168,
    229,
    155,
    189,
    231,
    189,
    145,
    228,
    184,
    138,
    233,
    135,
    141,
    232,
    166,
    129,
    231,
    172,
    172,
    228,
    186,
    140,
    229,
    150,
    156,
    230,
    172,
    162,
    232,
    191,
    155,
    229,
    133,
    165,
    229,
    143,
    139,
    230,
    131,
    133,
    232,
    191,
    153,
    228,
    186,
    155,
    232,
    128,
    131,
    232,
    175,
    149,
    229,
    143,
    145,
    231,
    142,
    176,
    229,
    159,
    185,
    232,
    174,
    173,
    228,
    187,
    165,
    228,
    184,
    138,
    230,
    148,
    191,
    229,
    186,
    156,
    230,
    136,
    144,
    228,
    184,
    186,
    231,
    142,
    175,
    229,
    162,
    131,
    233,
    166,
    153,
    230,
    184,
    175,
    229,
    144,
    140,
    230,
    151,
    182,
    229,
    168,
    177,
    228,
    185,
    144,
    229,
    143,
    145,
    233,
    128,
    129,
    228,
    184,
    128,
    229,
    174,
    154,
    229,
    188,
    128,
    229,
    143,
    145,
    228,
    189,
    156,
    229,
    147,
    129,
    230,
    160,
    135,
    229,
    135,
    134,
    230,
    172,
    162,
    232,
    191,
    142,
    232,
    167,
    163,
    229,
    134,
    179,
    229,
    156,
    176,
    230,
    150,
    185,
    228,
    184,
    128,
    228,
    184,
    139,
    228,
    187,
    165,
    229,
    143,
    138,
    232,
    180,
    163,
    228,
    187,
    187,
    230,
    136,
    150,
    232,
    128,
    133,
    229,
    174,
    162,
    230,
    136,
    183,
    228,
    187,
    163,
    232,
    161,
    168,
    231,
    167,
    175,
    229,
    136,
    134,
    229,
    165,
    179,
    228,
    186,
    186,
    230,
    149,
    176,
    231,
    160,
    129,
    233,
    148,
    128,
    229,
    148,
    174,
    229,
    135,
    186,
    231,
    142,
    176,
    231,
    166,
    187,
    231,
    186,
    191,
    229,
    186,
    148,
    231,
    148,
    168,
    229,
    136,
    151,
    232,
    161,
    168,
    228,
    184,
    141,
    229,
    144,
    140,
    231,
    188,
    150,
    232,
    190,
    145,
    231,
    187,
    159,
    232,
    174,
    161,
    230,
    159,
    165,
    232,
    175,
    162,
    228,
    184,
    141,
    232,
    166,
    129,
    230,
    156,
    137,
    229,
    133,
    179,
    230,
    156,
    186,
    230,
    158,
    132,
    229,
    190,
    136,
    229,
    164,
    154,
    230,
    146,
    173,
    230,
    148,
    190,
    231,
    187,
    132,
    231,
    187,
    135,
    230,
    148,
    191,
    231,
    173,
    150,
    231,
    155,
    180,
    230,
    142,
    165,
    232,
    131,
    189,
    229,
    138,
    155,
    230,
    157,
    165,
    230,
    186,
    144,
    230,
    153,
    130,
    233,
    150,
    147,
    231,
    156,
    139,
    229,
    136,
    176,
    231,
    131,
    173,
    233,
    151,
    168,
    229,
    133,
    179,
    233,
    148,
    174,
    228,
    184,
    147,
    229,
    140,
    186,
    233,
    157,
    158,
    229,
    184,
    184,
    232,
    139,
    177,
    232,
    175,
    173,
    231,
    153,
    190,
    229,
    186,
    166,
    229,
    184,
    140,
    230,
    156,
    155,
    231,
    190,
    142,
    229,
    165,
    179,
    230,
    175,
    148,
    232,
    190,
    131,
    231,
    159,
    165,
    232,
    175,
    134,
    232,
    167,
    132,
    229,
    174,
    154,
    229,
    187,
    186,
    232,
    174,
    174,
    233,
    131,
    168,
    233,
    151,
    168,
    230,
    132,
    143,
    232,
    167,
    129,
    231,
    178,
    190,
    229,
    189,
    169,
    230,
    151,
    165,
    230,
    156,
    172,
    230,
    143,
    144,
    233,
    171,
    152,
    229,
    143,
    145,
    232,
    168,
    128,
    230,
    150,
    185,
    233,
    157,
    162,
    229,
    159,
    186,
    233,
    135,
    145,
    229,
    164,
    132,
    231,
    144,
    134,
    230,
    157,
    131,
    233,
    153,
    144,
    229,
    189,
    177,
    231,
    137,
    135,
    233,
    147,
    182,
    232,
    161,
    140,
    232,
    191,
    152,
    230,
    156,
    137,
    229,
    136,
    134,
    228,
    186,
    171,
    231,
    137,
    169,
    229,
    147,
    129,
    231,
    187,
    143,
    232,
    144,
    165,
    230,
    183,
    187,
    229,
    138,
    160,
    228,
    184,
    147,
    229,
    174,
    182,
    232,
    191,
    153,
    231,
    167,
    141,
    232,
    175,
    157,
    233,
    162,
    152,
    232,
    181,
    183,
    230,
    157,
    165,
    228,
    184,
    154,
    229,
    138,
    161,
    229,
    133,
    172,
    229,
    145,
    138,
    232,
    174,
    176,
    229,
    189,
    149,
    231,
    174,
    128,
    228,
    187,
    139,
    232,
    180,
    168,
    233,
    135,
    143,
    231,
    148,
    183,
    228,
    186,
    186,
    229,
    189,
    177,
    229,
    147,
    141,
    229,
    188,
    149,
    231,
    148,
    168,
    230,
    138,
    165,
    229,
    145,
    138,
    233,
    131,
    168,
    229,
    136,
    134,
    229,
    191,
    171,
    233,
    128,
    159,
    229,
    146,
    168,
    232,
    175,
    162,
    230,
    151,
    182,
    229,
    176,
    154,
    230,
    179,
    168,
    230,
    132,
    143,
    231,
    148,
    179,
    232,
    175,
    183,
    229,
    173,
    166,
    230,
    160,
    161,
    229,
    186,
    148,
    232,
    175,
    165,
    229,
    142,
    134,
    229,
    143,
    178,
    229,
    143,
    170,
    230,
    152,
    175,
    232,
    191,
    148,
    229,
    155,
    158,
    232,
    180,
    173,
    228,
    185,
    176,
    229,
    144,
    141,
    231,
    167,
    176,
    228,
    184,
    186,
    228,
    186,
    134,
    230,
    136,
    144,
    229,
    138,
    159,
    232,
    175,
    180,
    230,
    152,
    142,
    228,
    190,
    155,
    229,
    186,
    148,
    229,
    173,
    169,
    229,
    173,
    144,
    228,
    184,
    147,
    233,
    162,
    152,
    231,
    168,
    139,
    229,
    186,
    143,
    228,
    184,
    128,
    232,
    136,
    172,
    230,
    156,
    131,
    229,
    147,
    161,
    229,
    143,
    170,
    230,
    156,
    137,
    229,
    133,
    182,
    229,
    174,
    131,
    228,
    191,
    157,
    230,
    138,
    164,
    232,
    128,
    140,
    228,
    184,
    148,
    228,
    187,
    138,
    229,
    164,
    169,
    231,
    170,
    151,
    229,
    143,
    163,
    229,
    138,
    168,
    230,
    128,
    129,
    231,
    138,
    182,
    230,
    128,
    129,
    231,
    137,
    185,
    229,
    136,
    171,
    232,
    174,
    164,
    228,
    184,
    186,
    229,
    191,
    133,
    233,
    161,
    187,
    230,
    155,
    180,
    230,
    150,
    176,
    229,
    176,
    143,
    232,
    175,
    180,
    230,
    136,
    145,
    229,
    128,
    145,
    228,
    189,
    156,
    228,
    184,
    186,
    229,
    170,
    146,
    228,
    189,
    147,
    229,
    140,
    133,
    230,
    139,
    172,
    233,
    130,
    163,
    228,
    185,
    136,
    228,
    184,
    128,
    230,
    160,
    183,
    229,
    155,
    189,
    229,
    134,
    133,
    230,
    152,
    175,
    229,
    144,
    166,
    230,
    160,
    185,
    230,
    141,
    174,
    231,
    148,
    181,
    232,
    167,
    134,
    229,
    173,
    166,
    233,
    153,
    162,
    229,
    133,
    183,
    230,
    156,
    137,
    232,
    191,
    135,
    231,
    168,
    139,
    231,
    148,
    177,
    228,
    186,
    142,
    228,
    186,
    186,
    230,
    137,
    141,
    229,
    135,
    186,
    230,
    157,
    165,
    228,
    184,
    141,
    232,
    191,
    135,
    230,
    173,
    163,
    229,
    156,
    168,
    230,
    152,
    142,
    230,
    152,
    159,
    230,
    149,
    133,
    228,
    186,
    139,
    229,
    133,
    179,
    231,
    179,
    187,
    230,
    160,
    135,
    233,
    162,
    152,
    229,
    149,
    134,
    229,
    138,
    161,
    232,
    190,
    147,
    229,
    133,
    165,
    228,
    184,
    128,
    231,
    155,
    180,
    229,
    159,
    186,
    231,
    161,
    128,
    230,
    149,
    153,
    229,
    173,
    166,
    228,
    186,
    134,
    232,
    167,
    163,
    229,
    187,
    186,
    231,
    173,
    145,
    231,
    187,
    147,
    230,
    158,
    156,
    229,
    133,
    168,
    231,
    144,
    131,
    233,
    128,
    154,
    231,
    159,
    165,
    232,
    174,
    161,
    229,
    136,
    146,
    229,
    175,
    185,
    228,
    186,
    142,
    232,
    137,
    186,
    230,
    156,
    175,
    231,
    155,
    184,
    229,
    134,
    140,
    229,
    143,
    145,
    231,
    148,
    159,
    231,
    156,
    159,
    231,
    154,
    132,
    229,
    187,
    186,
    231,
    171,
    139,
    231,
    173,
    137,
    231,
    186,
    167,
    231,
    177,
    187,
    229,
    158,
    139,
    231,
    187,
    143,
    233,
    170,
    140,
    229,
    174,
    158,
    231,
    142,
    176,
    229,
    136,
    182,
    228,
    189,
    156,
    230,
    157,
    165,
    232,
    135,
    170,
    230,
    160,
    135,
    231,
    173,
    190,
    228,
    187,
    165,
    228,
    184,
    139,
    229,
    142,
    159,
    229,
    136,
    155,
    230,
    151,
    160,
    230,
    179,
    149,
    229,
    133,
    182,
    228,
    184,
    173,
    229,
    128,
    139,
    228,
    186,
    186,
    228,
    184,
    128,
    229,
    136,
    135,
    230,
    140,
    135,
    229,
    141,
    151,
    229,
    133,
    179,
    233,
    151,
    173,
    233,
    155,
    134,
    229,
    155,
    162,
    231,
    172,
    172,
    228,
    184,
    137,
    229,
    133,
    179,
    230,
    179,
    168,
    229,
    155,
    160,
    230,
    173,
    164,
    231,
    133,
    167,
    231,
    137,
    135,
    230,
    183,
    177,
    229,
    156,
    179,
    229,
    149,
    134,
    228,
    184,
    154,
    229,
    185,
    191,
    229,
    183,
    158,
    230,
    151,
    165,
    230,
    156,
    159,
    233,
    171,
    152,
    231,
    186,
    167,
    230,
    156,
    128,
    232,
    191,
    145,
    231,
    187,
    188,
    229,
    144,
    136,
    232,
    161,
    168,
    231,
    164,
    186,
    228,
    184,
    147,
    232,
    190,
    145,
    232,
    161,
    140,
    228,
    184,
    186,
    228,
    186,
    164,
    233,
    128,
    154,
    232,
    175,
    132,
    228,
    187,
    183,
    232,
    167,
    137,
    229,
    190,
    151,
    231,
    178,
    190,
    229,
    141,
    142,
    229,
    174,
    182,
    229,
    186,
    173,
    229,
    174,
    140,
    230,
    136,
    144,
    230,
    132,
    159,
    232,
    167,
    137,
    229,
    174,
    137,
    232,
    163,
    133,
    229,
    190,
    151,
    229,
    136,
    176,
    233,
    130,
    174,
    228,
    187,
    182,
    229,
    136,
    182,
    229,
    186,
    166,
    233,
    163,
    159,
    229,
    147,
    129,
    232,
    153,
    189,
    231,
    132,
    182,
    232,
    189,
    172,
    232,
    189,
    189,
    230,
    138,
    165,
    228,
    187,
    183,
    232,
    174,
    176,
    232,
    128,
    133,
    230,
    150,
    185,
    230,
    161,
    136,
    232,
    161,
    140,
    230,
    148,
    191,
    228,
    186,
    186,
    230,
    176,
    145,
    231,
    148,
    168,
    229,
    147,
    129,
    228,
    184,
    156,
    232,
    165,
    191,
    230,
    143,
    144,
    229,
    135,
    186,
    233,
    133,
    146,
    229,
    186,
    151,
    231,
    132,
    182,
    229,
    144,
    142,
    228,
    187,
    152,
    230,
    172,
    190,
    231,
    131,
    173,
    231,
    130,
    185,
    228,
    187,
    165,
    229,
    137,
    141,
    229,
    174,
    140,
    229,
    133,
    168,
    229,
    143,
    145,
    229,
    184,
    150,
    232,
    174,
    190,
    231,
    189,
    174,
    233,
    162,
    134,
    229,
    175,
    188,
    229,
    183,
    165,
    228,
    184,
    154,
    229,
    140,
    187,
    233,
    153,
    162,
    231,
    156,
    139,
    231,
    156,
    139,
    231,
    187,
    143,
    229,
    133,
    184,
    229,
    142,
    159,
    229,
    155,
    160,
    229,
    185,
    179,
    229,
    143,
    176,
    229,
    144,
    132,
    231,
    167,
    141,
    229,
    162,
    158,
    229,
    138,
    160,
    230,
    157,
    144,
    230,
    150,
    153,
    230,
    150,
    176,
    229,
    162,
    158,
    228,
    185,
    139,
    229,
    144,
    142,
    232,
    129,
    140,
    228,
    184,
    154,
    230,
    149,
    136,
    230,
    158,
    156,
    228,
    187,
    138,
    229,
    185,
    180,
    232,
    174,
    186,
    230,
    150,
    135,
    230,
    136,
    145,
    229,
    155,
    189,
    229,
    145,
    138,
    232,
    175,
    137,
    231,
    137,
    136,
    228,
    184,
    187,
    228,
    191,
    174,
    230,
    148,
    185,
    229,
    143,
    130,
    228,
    184,
    142,
    230,
    137,
    147,
    229,
    141,
    176,
    229,
    191,
    171,
    228,
    185,
    144,
    230,
    156,
    186,
    230,
    162,
    176,
    232,
    167,
    130,
    231,
    130,
    185,
    229,
    173,
    152,
    229,
    156,
    168,
    231,
    178,
    190,
    231,
    165,
    158,
    232,
    142,
    183,
    229,
    190,
    151,
    229,
    136,
    169,
    231,
    148,
    168,
    231,
    187,
    167,
    231,
    187,
    173,
    228,
    189,
    160,
    228,
    187,
    172,
    232,
    191,
    153,
    228,
    185,
    136,
    230,
    168,
    161,
    229,
    188,
    143,
    232,
    175,
    173,
    232,
    168,
    128,
    232,
    131,
    189,
    229,
    164,
    159,
    233,
    155,
    133,
    232,
    153,
    142,
    230,
    147,
    141,
    228,
    189,
    156,
    233,
    163,
    142,
    230,
    160,
    188,
    228,
    184,
    128,
    232,
    181,
    183,
    231,
    167,
    145,
    229,
    173,
    166,
    228,
    189,
    147,
    232,
    130,
    178,
    231,
    159,
    173,
    228,
    191,
    161,
    230,
    157,
    161,
    228,
    187,
    182,
    230,
    178,
    187,
    231,
    150,
    151,
    232,
    191,
    144,
    229,
    138,
    168,
    228,
    186,
    167,
    228,
    184,
    154,
    228,
    188,
    154,
    232,
    174,
    174,
    229,
    175,
    188,
    232,
    136,
    170,
    229,
    133,
    136,
    231,
    148,
    159,
    232,
    129,
    148,
    231,
    155,
    159,
    229,
    143,
    175,
    230,
    152,
    175,
    229,
    149,
    143,
    233,
    161,
    140,
    231,
    187,
    147,
    230,
    158,
    132,
    228,
    189,
    156,
    231,
    148,
    168,
    232,
    176,
    131,
    230,
    159,
    165,
    232,
    179,
    135,
    230,
    150,
    153,
    232,
    135,
    170,
    229,
    138,
    168,
    232,
    180,
    159,
    232,
    180,
    163,
    229,
    134,
    156,
    228,
    184,
    154,
    232,
    174,
    191,
    233,
    151,
    174,
    229,
    174,
    158,
    230,
    150,
    189,
    230,
    142,
    165,
    229,
    143,
    151,
    232,
    174,
    168,
    232,
    174,
    186,
    233,
    130,
    163,
    228,
    184,
    170,
    229,
    143,
    141,
    233,
    166,
    136,
    229,
    138,
    160,
    229,
    188,
    186,
    229,
    165,
    179,
    230,
    128,
    167,
    232,
    140,
    131,
    229,
    155,
    180,
    230,
    156,
    141,
    229,
    139,
    153,
    228,
    188,
    145,
    233,
    151,
    178,
    228,
    187,
    138,
    230,
    151,
    165,
    229,
    174,
    162,
    230,
    156,
    141,
    232,
    167,
    128,
    231,
    156,
    139,
    229,
    143,
    130,
    229,
    138,
    160,
    231,
    154,
    132,
    232,
    175,
    157,
    228,
    184,
    128,
    231,
    130,
    185,
    228,
    191,
    157,
    232,
    175,
    129,
    229,
    155,
    190,
    228,
    185,
    166,
    230,
    156,
    137,
    230,
    149,
    136,
    230,
    181,
    139,
    232,
    175,
    149,
    231,
    167,
    187,
    229,
    138,
    168,
    230,
    137,
    141,
    232,
    131,
    189,
    229,
    134,
    179,
    229,
    174,
    154,
    232,
    130,
    161,
    231,
    165,
    168,
    228,
    184,
    141,
    230,
    150,
    173,
    233,
    156,
    128,
    230,
    177,
    130,
    228,
    184,
    141,
    229,
    190,
    151,
    229,
    138,
    158,
    230,
    179,
    149,
    228,
    185,
    139,
    233,
    151,
    180,
    233,
    135,
    135,
    231,
    148,
    168,
    232,
    144,
    165,
    233,
    148,
    128,
    230,
    138,
    149,
    232,
    175,
    137,
    231,
    155,
    174,
    230,
    160,
    135,
    231,
    136,
    177,
    230,
    131,
    133,
    230,
    145,
    132,
    229,
    189,
    177,
    230,
    156,
    137,
    228,
    186,
    155,
    232,
    164,
    135,
    232,
    163,
    189,
    230,
    150,
    135,
    229,
    173,
    166,
    230,
    156,
    186,
    228,
    188,
    154,
    230,
    149,
    176,
    229,
    173,
    151,
    232,
    163,
    133,
    228,
    191,
    174,
    232,
    180,
    173,
    231,
    137,
    169,
    229,
    134,
    156,
    230,
    157,
    145,
    229,
    133,
    168,
    233,
    157,
    162,
    231,
    178,
    190,
    229,
    147,
    129,
    229,
    133,
    182,
    229,
    174,
    158,
    228,
    186,
    139,
    230,
    131,
    133,
    230,
    176,
    180,
    229,
    185,
    179,
    230,
    143,
    144,
    231,
    164,
    186,
    228,
    184,
    138,
    229,
    184,
    130,
    232,
    176,
    162,
    232,
    176,
    162,
    230,
    153,
    174,
    233,
    128,
    154,
    230,
    149,
    153,
    229,
    184,
    136,
    228,
    184,
    138,
    228,
    188,
    160,
    231,
    177,
    187,
    229,
    136,
    171,
    230,
    173,
    140,
    230,
    155,
    178,
    230,
    139,
    165,
    230,
    156,
    137,
    229,
    136,
    155,
    230,
    150,
    176,
    233,
    133,
    141,
    228,
    187,
    182,
    229,
    143,
    170,
    232,
    166,
    129,
    230,
    151,
    182,
    228,
    187,
    163,
    232,
    179,
    135,
    232,
    168,
    138,
    232,
    190,
    190,
    229,
    136,
    176,
    228,
    186,
    186,
    231,
    148,
    159,
    232,
    174,
    162,
    233,
    152,
    133,
    232,
    128,
    129,
    229,
    184,
    136,
    229,
    177,
    149,
    231,
    164,
    186,
    229,
    191,
    131,
    231,
    144,
    134,
    232,
    180,
    180,
    229,
    173,
    144,
    231,
    182,
    178,
    231,
    171,
    153,
    228,
    184,
    187,
    233,
    161,
    140,
    232,
    135,
    170,
    231,
    132,
    182,
    231,
    186,
    167,
    229,
    136,
    171,
    231,
    174,
    128,
    229,
    141,
    149,
    230,
    148,
    185,
    233,
    157,
    169,
    233,
    130,
    163,
    228,
    186,
    155,
    230,
    157,
    165,
    232,
    175,
    180,
    230,
    137,
    147,
    229,
    188,
    128,
    228,
    187,
    163,
    231,
    160,
    129,
    229,
    136,
    160,
    233,
    153,
    164,
    232,
    175,
    129,
    229,
    136,
    184,
    232,
    138,
    130,
    231,
    155,
    174,
    233,
    135,
    141,
    231,
    130,
    185,
    230,
    172,
    161,
    230,
    149,
    184,
    229,
    164,
    154,
    229,
    176,
    145,
    232,
    167,
    132,
    229,
    136,
    146,
    232,
    181,
    132,
    233,
    135,
    145,
    230,
    137,
    190,
    229,
    136,
    176,
    228,
    187,
    165,
    229,
    144,
    142,
    229,
    164,
    167,
    229,
    133,
    168,
    228,
    184,
    187,
    233,
    161,
    181,
    230,
    156,
    128,
    228,
    189,
    179,
    229,
    155,
    158,
    231,
    173,
    148,
    229,
    164,
    169,
    228,
    184,
    139,
    228,
    191,
    157,
    233,
    154,
    156,
    231,
    142,
    176,
    228,
    187,
    163,
    230,
    163,
    128,
    230,
    159,
    165,
    230,
    138,
    149,
    231,
    165,
    168,
    229,
    176,
    143,
    230,
    151,
    182,
    230,
    178,
    146,
    230,
    156,
    137,
    230,
    173,
    163,
    229,
    184,
    184,
    231,
    148,
    154,
    232,
    135,
    179,
    228,
    187,
    163,
    231,
    144,
    134,
    231,
    155,
    174,
    229,
    189,
    149,
    229,
    133,
    172,
    229,
    188,
    128,
    229,
    164,
    141,
    229,
    136,
    182,
    233,
    135,
    145,
    232,
    158,
    141,
    229,
    185,
    184,
    231,
    166,
    143,
    231,
    137,
    136,
    230,
    156,
    172,
    229,
    189,
    162,
    230,
    136,
    144,
    229,
    135,
    134,
    229,
    164,
    135,
    232,
    161,
    140,
    230,
    131,
    133,
    229,
    155,
    158,
    229,
    136,
    176,
    230,
    128,
    157,
    230,
    131,
    179,
    230,
    128,
    142,
    230,
    160,
    183,
    229,
    141,
    143,
    232,
    174,
    174,
    232,
    174,
    164,
    232,
    175,
    129,
    230,
    156,
    128,
    229,
    165,
    189,
    228,
    186,
    167,
    231,
    148,
    159,
    230,
    140,
    137,
    231,
    133,
    167,
    230,
    156,
    141,
    232,
    163,
    133,
    229,
    185,
    191,
    228,
    184,
    156,
    229,
    138,
    168,
    230,
    188,
    171,
    233,
    135,
    135,
    232,
    180,
    173,
    230,
    150,
    176,
    230,
    137,
    139,
    231,
    187,
    132,
    229,
    155,
    190,
    233,
    157,
    162,
    230,
    157,
    191,
    229,
    143,
    130,
    232,
    128,
    131,
    230,
    148,
    191,
    230,
    178,
    187,
    229,
    174,
    185,
    230,
    152,
    147,
    229,
    164,
    169,
    229,
    156,
    176,
    229,
    138,
    170,
    229,
    138,
    155,
    228,
    186,
    186,
    228,
    187,
    172,
    229,
    141,
    135,
    231,
    186,
    167,
    233,
    128,
    159,
    229,
    186,
    166,
    228,
    186,
    186,
    231,
    137,
    169,
    232,
    176,
    131,
    230,
    149,
    180,
    230,
    181,
    129,
    232,
    161,
    140,
    233,
    128,
    160,
    230,
    136,
    144,
    230,
    150,
    135,
    229,
    173,
    151,
    233,
    159,
    169,
    229,
    155,
    189,
    232,
    180,
    184,
    230,
    152,
    147,
    229,
    188,
    128,
    229,
    177,
    149,
    231,
    155,
    184,
    233,
    151,
    156,
    232,
    161,
    168,
    231,
    142,
    176,
    229,
    189,
    177,
    232,
    167,
    134,
    229,
    166,
    130,
    230,
    173,
    164,
    231,
    190,
    142,
    229,
    174,
    185,
    229,
    164,
    167,
    229,
    176,
    143,
    230,
    138,
    165,
    233,
    129,
    147,
    230,
    157,
    161,
    230,
    172,
    190,
    229,
    191,
    131,
    230,
    131,
    133,
    232,
    174,
    184,
    229,
    164,
    154,
    230,
    179,
    149,
    232,
    167,
    132,
    229,
    174,
    182,
    229,
    177,
    133,
    228,
    185,
    166,
    229,
    186,
    151,
    232,
    191,
    158,
    230,
    142,
    165,
    231,
    171,
    139,
    229,
    141,
    179,
    228,
    184,
    190,
    230,
    138,
    165,
    230,
    138,
    128,
    229,
    183,
    167,
    229,
    165,
    165,
    232,
    191,
    144,
    231,
    153,
    187,
    229,
    133,
    165,
    228,
    187,
    165,
    230,
    157,
    165,
    231,
    144,
    134,
    232,
    174,
    186,
    228,
    186,
    139,
    228,
    187,
    182,
    232,
    135,
    170,
    231,
    148,
    177,
    228,
    184,
    173,
    229,
    141,
    142,
    229,
    138,
    158,
    229,
    133,
    172,
    229,
    166,
    136,
    229,
    166,
    136,
    231,
    156,
    159,
    230,
    173,
    163,
    228,
    184,
    141,
    233,
    148,
    153,
    229,
    133,
    168,
    230,
    150,
    135,
    229,
    144,
    136,
    229,
    144,
    140,
    228,
    187,
    183,
    229,
    128,
    188,
    229,
    136,
    171,
    228,
    186,
    186,
    231,
    155,
    145,
    231,
    157,
    163,
    229,
    133,
    183,
    228,
    189,
    147,
    228,
    184,
    150,
    231,
    186,
    170,
    229,
    155,
    162,
    233,
    152,
    159,
    229,
    136,
    155,
    228,
    184,
    154,
    230,
    137,
    191,
    230,
    139,
    133,
    229,
    162,
    158,
    233,
    149,
    191,
    230,
    156,
    137,
    228,
    186,
    186,
    228,
    191,
    157,
    230,
    140,
    129,
    229,
    149,
    134,
    229,
    174,
    182,
    231,
    187,
    180,
    228,
    191,
    174,
    229,
    143,
    176,
    230,
    185,
    190,
    229,
    183,
    166,
    229,
    143,
    179,
    232,
    130,
    161,
    228,
    187,
    189,
    231,
    173,
    148,
    230,
    161,
    136,
    229,
    174,
    158,
    233,
    153,
    133,
    231,
    148,
    181,
    228,
    191,
    161,
    231,
    187,
    143,
    231,
    144,
    134,
    231,
    148,
    159,
    229,
    145,
    189,
    229,
    174,
    163,
    228,
    188,
    160,
    228,
    187,
    187,
    229,
    138,
    161,
    230,
    173,
    163,
    229,
    188,
    143,
    231,
    137,
    185,
    232,
    137,
    178,
    228,
    184,
    139,
    230,
    157,
    165,
    229,
    141,
    143,
    228,
    188,
    154,
    229,
    143,
    170,
    232,
    131,
    189,
    229,
    189,
    147,
    231,
    132,
    182,
    233,
    135,
    141,
    230,
    150,
    176,
    229,
    133,
    167,
    229,
    174,
    185,
    230,
    140,
    135,
    229,
    175,
    188,
    232,
    191,
    144,
    232,
    161,
    140,
    230,
    151,
    165,
    229,
    191,
    151,
    232,
    179,
    163,
    229,
    174,
    182,
    232,
    182,
    133,
    232,
    191,
    135,
    229,
    156,
    159,
    229,
    156,
    176,
    230,
    181,
    153,
    230,
    177,
    159,
    230,
    148,
    175,
    228,
    187,
    152,
    230,
    142,
    168,
    229,
    135,
    186,
    231,
    171,
    153,
    233,
    149,
    191,
    230,
    157,
    173,
    229,
    183,
    158,
    230,
    137,
    167,
    232,
    161,
    140,
    229,
    136,
    182,
    233,
    128,
    160,
    228,
    185,
    139,
    228,
    184,
    128,
    230,
    142,
    168,
    229,
    185,
    191,
    231,
    142,
    176,
    229,
    156,
    186,
    230,
    143,
    143,
    232,
    191,
    176,
    229,
    143,
    152,
    229,
    140,
    150,
    228,
    188,
    160,
    231,
    187,
    159,
    230,
    173,
    140,
    230,
    137,
    139,
    228,
    191,
    157,
    233,
    153,
    169,
    232,
    175,
    190,
    231,
    168,
    139,
    229,
    140,
    187,
    231,
    150,
    151,
    231,
    187,
    143,
    232,
    191,
    135,
    232,
    191,
    135,
    229,
    142,
    187,
    228,
    185,
    139,
    229,
    137,
    141,
    230,
    148,
    182,
    229,
    133,
    165,
    229,
    185,
    180,
    229,
    186,
    166,
    230,
    157,
    130,
    229,
    191,
    151,
    231,
    190,
    142,
    228,
    184,
    189,
    230,
    156,
    128,
    233,
    171,
    152,
    231,
    153,
    187,
    233,
    153,
    134,
    230,
    156,
    170,
    230,
    157,
    165,
    229,
    138,
    160,
    229,
    183,
    165,
    229,
    133,
    141,
    232,
    180,
    163,
    230,
    149,
    153,
    231,
    168,
    139,
    231,
    137,
    136,
    229,
    157,
    151,
    232,
    186,
    171,
    228,
    189,
    147,
    233,
    135,
    141,
    229,
    186,
    134,
    229,
    135,
    186,
    229,
    148,
    174,
    230,
    136,
    144,
    230,
    156,
    172,
    229,
    189,
    162,
    229,
    188,
    143,
    229,
    156,
    159,
    232,
    177,
    134,
    229,
    135,
    186,
    229,
    131,
    185,
    228,
    184,
    156,
    230,
    150,
    185,
    233,
    130,
    174,
    231,
    174,
    177,
    229,
    141,
    151,
    228,
    186,
    172,
    230,
    177,
    130,
    232,
    129,
    140,
    229,
    143,
    150,
    229,
    190,
    151,
    232,
    129,
    140,
    228,
    189,
    141,
    231,
    155,
    184,
    228,
    191,
    161,
    233,
    161,
    181,
    233,
    157,
    162,
    229,
    136,
    134,
    233,
    146,
    159,
    231,
    189,
    145,
    233,
    161,
    181,
    231,
    161,
    174,
    229,
    174,
    154,
    229,
    155,
    190,
    228,
    190,
    139,
    231,
    189,
    145,
    229,
    157,
    128,
    231,
    167,
    175,
    230,
    158,
    129,
    233,
    148,
    153,
    232,
    175,
    175,
    231,
    155,
    174,
    231,
    154,
    132,
    229,
    174,
    157,
    232,
    180,
    157,
    230,
    156,
    186,
    229,
    133,
    179,
    233,
    163,
    142,
    233,
    153,
    169,
    230,
    142,
    136,
    230,
    157,
    131,
    231,
    151,
    133,
    230,
    175,
    146,
    229,
    174,
    160,
    231,
    137,
    169,
    233,
    153,
    164,
    228,
    186,
    134,
    232,
    169,
    149,
    232,
    171,
    150,
    231,
    150,
    190,
    231,
    151,
    133,
    229,
    143,
    138,
    230,
    151,
    182,
    230,
    177,
    130,
    232,
    180,
    173,
    231,
    171,
    153,
    231,
    130,
    185,
    229,
    132,
    191,
    231,
    171,
    165,
    230,
    175,
    143,
    229,
    164,
    169,
    228,
    184,
    173,
    229,
    164,
    174,
    232,
    174,
    164,
    232,
    175,
    134,
    230,
    175,
    143,
    228,
    184,
    170,
    229,
    164,
    169,
    230,
    180,
    165,
    229,
    173,
    151,
    228,
    189,
    147,
    229,
    143,
    176,
    231,
    129,
    163,
    231,
    187,
    180,
    230,
    138,
    164,
    230,
    156,
    172,
    233,
    161,
    181,
    228,
    184,
    170,
    230,
    128,
    167,
    229,
    174,
    152,
    230,
    150,
    185,
    229,
    184,
    184,
    232,
    167,
    129,
    231,
    155,
    184,
    230,
    156,
    186,
    230,
    136,
    152,
    231,
    149,
    165,
    229,
    186,
    148,
    229,
    189,
    147,
    229,
    190,
    139,
    229,
    184,
    136,
    230,
    150,
    185,
    228,
    190,
    191,
    230,
    160,
    161,
    229,
    155,
    173,
    232,
    130,
    161,
    229,
    184,
    130,
    230,
    136,
    191,
    229,
    177,
    139,
    230,
    160,
    143,
    231,
    155,
    174,
    229,
    145,
    152,
    229,
    183,
    165,
    229,
    175,
    188,
    232,
    135,
    180,
    231,
    170,
    129,
    231,
    132,
    182,
    233,
    129,
    147,
    229,
    133,
    183,
    230,
    156,
    172,
    231,
    189,
    145,
    231,
    187,
    147,
    229,
    144,
    136,
    230,
    161,
    163,
    230,
    161,
    136,
    229,
    138,
    179,
    229,
    138,
    168,
    229,
    143,
    166,
    229,
    164,
    150,
    231,
    190,
    142,
    229,
    133,
    131,
    229,
    188,
    149,
    232,
    181,
    183,
    230,
    148,
    185,
    229,
    143,
    152,
    231,
    172,
    172,
    229,
    155,
    155,
    228,
    188,
    154,
    232,
    174,
    161,
    232,
    170,
    170,
    230,
    152,
    142,
    233,
    154,
    144,
    231,
    167,
    129,
    229,
    174,
    157,
    229,
    174,
    157,
    232,
    167,
    132,
    232,
    140,
    131,
    230,
    182,
    136,
    232,
    180,
    185,
    229,
    133,
    177,
    229,
    144,
    140,
    229,
    191,
    152,
    232,
    174,
    176,
    228,
    189,
    147,
    231,
    179,
    187,
    229,
    184,
    166,
    230,
    157,
    165,
    229,
    144,
    141,
    229,
    173,
    151,
    231,
    153,
    188,
    232,
    161,
    168,
    229,
    188,
    128,
    230,
    148,
    190,
    229,
    138,
    160,
    231,
    155,
    159,
    229,
    143,
    151,
    229,
    136,
    176,
    228,
    186,
    140,
    230,
    137,
    139,
    229,
    164,
    167,
    233,
    135,
    143,
    230,
    136,
    144,
    228,
    186,
    186,
    230,
    149,
    176,
    233,
    135,
    143,
    229,
    133,
    177,
    228,
    186,
    171,
    229,
    140,
    186,
    229,
    159,
    159,
    229,
    165,
    179,
    229,
    173,
    169,
    229,
    142,
    159,
    229,
    136,
    153,
    230,
    137,
    128,
    229,
    156,
    168,
    231,
    187,
    147,
    230,
    157,
    159,
    233,
    128,
    154,
    228,
    191,
    161,
    232,
    182,
    133,
    231,
    186,
    167,
    233,
    133,
    141,
    231,
    189,
    174,
    229,
    189,
    147,
    230,
    151,
    182,
    228,
    188,
    152,
    231,
    167,
    128,
    230,
    128,
    167,
    230,
    132,
    159,
    230,
    136,
    191,
    228,
    186,
    167,
    233,
    129,
    138,
    230,
    136,
    178,
    229,
    135,
    186,
    229,
    143,
    163,
    230,
    143,
    144,
    228,
    186,
    164,
    229,
    176,
    177,
    228,
    184,
    154,
    228,
    191,
    157,
    229,
    129,
    165,
    231,
    168,
    139,
    229,
    186,
    166,
    229,
    143,
    130,
    230,
    149,
    176,
    228,
    186,
    139,
    228,
    184,
    154,
    230,
    149,
    180,
    228,
    184,
    170,
    229,
    177,
    177,
    228,
    184,
    156,
    230,
    131,
    133,
    230,
    132,
    159,
    231,
    137,
    185,
    230,
    174,
    138,
    229,
    136,
    134,
    233,
    161,
    158,
    230,
    144,
    156,
    229,
    176,
    139,
    229,
    177,
    158,
    228,
    186,
    142,
    233,
    151,
    168,
    230,
    136,
    183,
    232,
    180,
    162,
    229,
    138,
    161,
    229,
    163,
    176,
    233,
    159,
    179,
    229,
    143,
    138,
    229,
    133,
    182,
    232,
    180,
    162,
    231,
    187,
    143,
    229,
    157,
    154,
    230,
    140,
    129,
    229,
    185,
    178,
    233,
    131,
    168,
    230,
    136,
    144,
    231,
    171,
    139,
    229,
    136,
    169,
    231,
    155,
    138,
    232,
    128,
    131,
    232,
    153,
    145,
    230,
    136,
    144,
    233,
    131,
    189,
    229,
    140,
    133,
    232,
    163,
    133,
    231,
    148,
    168,
    230,
    136,
    182,
    230,
    175,
    148,
    232,
    181,
    155,
    230,
    150,
    135,
    230,
    152,
    142,
    230,
    139,
    155,
    229,
    149,
    134,
    229,
    174,
    140,
    230,
    149,
    180,
    231,
    156,
    159,
    230,
    152,
    175,
    231,
    156,
    188,
    231,
    157,
    155,
    228,
    188,
    153,
    228,
    188,
    180,
    229,
    168,
    129,
    230,
    156,
    155,
    233,
    162,
    134,
    229,
    159,
    159,
    229,
    141,
    171,
    231,
    148,
    159,
    228,
    188,
    152,
    230,
    131,
    160,
    232,
    171,
    150,
    229,
    163,
    135,
    229,
    133,
    172,
    229,
    133,
    177,
    232,
    137,
    175,
    229,
    165,
    189,
    229,
    133,
    133,
    229,
    136,
    134,
    231,
    172,
    166,
    229,
    144,
    136,
    233,
    153,
    132,
    228,
    187,
    182,
    231,
    137,
    185,
    231,
    130,
    185,
    228,
    184,
    141,
    229,
    143,
    175,
    232,
    139,
    177,
    230,
    150,
    135,
    232,
    181,
    132,
    228,
    186,
    167,
    230,
    160,
    185,
    230,
    156,
    172,
    230,
    152,
    142,
    230,
    152,
    190,
    229,
    175,
    134,
    231,
    162,
    188,
    229,
    133,
    172,
    228,
    188,
    151,
    230,
    176,
    145,
    230,
    151,
    143,
    230,
    155,
    180,
    229,
    138,
    160,
    228,
    186,
    171,
    229,
    143,
    151,
    229,
    144,
    140,
    229,
    173,
    166,
    229,
    144,
    175,
    229,
    138,
    168,
    233,
    128,
    130,
    229,
    144,
    136,
    229,
    142,
    159,
    230,
    157,
    165,
    233,
    151,
    174,
    231,
    173,
    148,
    230,
    156,
    172,
    230,
    150,
    135,
    231,
    190,
    142,
    233,
    163,
    159,
    231,
    187,
    191,
    232,
    137,
    178,
    231,
    168,
    179,
    229,
    174,
    154,
    231,
    187,
    136,
    228,
    186,
    142,
    231,
    148,
    159,
    231,
    137,
    169,
    228,
    190,
    155,
    230,
    177,
    130,
    230,
    144,
    156,
    231,
    139,
    144,
    229,
    138,
    155,
    233,
    135,
    143,
    228,
    184,
    165,
    233,
    135,
    141,
    230,
    176,
    184,
    232,
    191,
    156,
    229,
    134,
    153,
    231,
    156,
    159,
    230,
    156,
    137,
    233,
    153,
    144,
    231,
    171,
    158,
    228,
    186,
    137,
    229,
    175,
    185,
    232,
    177,
    161,
    232,
    180,
    185,
    231,
    148,
    168,
    228,
    184,
    141,
    229,
    165,
    189,
    231,
    187,
    157,
    229,
    175,
    185,
    229,
    141,
    129,
    229,
    136,
    134,
    228,
    191,
    131,
    232,
    191,
    155,
    231,
    130,
    185,
    232,
    175,
    132,
    229,
    189,
    177,
    233,
    159,
    179,
    228,
    188,
    152,
    229,
    138,
    191,
    228,
    184,
    141,
    229,
    176,
    145,
    230,
    172,
    163,
    232,
    181,
    143,
    229,
    185,
    182,
    228,
    184,
    148,
    230,
    156,
    137,
    231,
    130,
    185,
    230,
    150,
    185,
    229,
    144,
    145,
    229,
    133,
    168,
    230,
    150,
    176,
    228,
    191,
    161,
    231,
    148,
    168,
    232,
    174,
    190,
    230,
    150,
    189,
    229,
    189,
    162,
    232,
    177,
    161,
    232,
    181,
    132,
    230,
    160,
    188,
    231,
    170,
    129,
    231,
    160,
    180,
    233,
    154,
    143,
    231,
    157,
    128,
    233,
    135,
    141,
    229,
    164,
    167,
    228,
    186,
    142,
    230,
    152,
    175,
    230,
    175,
    149,
    228,
    184,
    154,
    230,
    153,
    186,
    232,
    131,
    189,
    229,
    140,
    150,
    229,
    183,
    165,
    229,
    174,
    140,
    231,
    190,
    142,
    229,
    149,
    134,
    229,
    159,
    142,
    231,
    187,
    159,
    228,
    184,
    128,
    229,
    135,
    186,
    231,
    137,
    136,
    230,
    137,
    147,
    233,
    128,
    160,
    231,
    148,
    162,
    229,
    147,
    129,
    230,
    166,
    130,
    229,
    134,
    181,
    231,
    148,
    168,
    228,
    186,
    142,
    228,
    191,
    157,
    231,
    149,
    153,
    229,
    155,
    160,
    231,
    180,
    160,
    228,
    184,
    173,
    229,
    156,
    139,
    229,
    173,
    152,
    229,
    130,
    168,
    232,
    180,
    180,
    229,
    155,
    190,
    230,
    156,
    128,
    230,
    132,
    155,
    233,
    149,
    191,
    230,
    156,
    159,
    229,
    143,
    163,
    228,
    187,
    183,
    231,
    144,
    134,
    232,
    180,
    162,
    229,
    159,
    186,
    229,
    156,
    176,
    229,
    174,
    137,
    230,
    142,
    146,
    230,
    173,
    166,
    230,
    177,
    137,
    233,
    135,
    140,
    233,
    157,
    162,
    229,
    136,
    155,
    229,
    187,
    186,
    229,
    164,
    169,
    231,
    169,
    186,
    233,
    166,
    150,
    229,
    133,
    136,
    229,
    174,
    140,
    229,
    150,
    132,
    233,
    169,
    177,
    229,
    138,
    168,
    228,
    184,
    139,
    233,
    157,
    162,
    228,
    184,
    141,
    229,
    134,
    141,
    232,
    175,
    154,
    228,
    191,
    161,
    230,
    132,
    143,
    228,
    185,
    137,
    233,
    152,
    179,
    229,
    133,
    137,
    232,
    139,
    177,
    229,
    155,
    189,
    230,
    188,
    130,
    228,
    186,
    174,
    229,
    134,
    155,
    228,
    186,
    139,
    231,
    142,
    169,
    229,
    174,
    182,
    231,
    190,
    164,
    228,
    188,
    151,
    229,
    134,
    156,
    230,
    176,
    145,
    229,
    141,
    179,
    229,
    143,
    175,
    229,
    144,
    141,
    231,
    168,
    177,
    229,
    174,
    182,
    229,
    133,
    183,
    229,
    138,
    168,
    231,
    148,
    187,
    230,
    131,
    179,
    229,
    136,
    176,
    230,
    179,
    168,
    230,
    152,
    142,
    229,
    176,
    143,
    229,
    173,
    166,
    230,
    128,
    167,
    232,
    131,
    189,
    232,
    128,
    131,
    231,
    160,
    148,
    231,
    161,
    172,
    228,
    187,
    182,
    232,
    167,
    130,
    231,
    156,
    139,
    230,
    184,
    133,
    230,
    165,
    154,
    230,
    144,
    158,
    231,
    172,
    145,
    233,
    166,
    150,
    233,
    160,
    129,
    233,
    187,
    132,
    233,
    135,
    145,
    233,
    128,
    130,
    231,
    148,
    168,
    230,
    177,
    159,
    232,
    139,
    143,
    231,
    156,
    159,
    229,
    174,
    158,
    228,
    184,
    187,
    231,
    174,
    161,
    233,
    152,
    182,
    230,
    174,
    181,
    232,
    168,
    187,
    229,
    134,
    138,
    231,
    191,
    187,
    232,
    175,
    145,
    230,
    157,
    131,
    229,
    136,
    169,
    229,
    129,
    154,
    229,
    165,
    189,
    228,
    188,
    188,
    228,
    185,
    142,
    233,
    128,
    154,
    232,
    174,
    175,
    230,
    150,
    189,
    229,
    183,
    165,
    231,
    139,
    128,
    230,
    133,
    139,
    228,
    185,
    159,
    232,
    174,
    184,
    231,
    142,
    175,
    228,
    191,
    157,
    229,
    159,
    185,
    229,
    133,
    187,
    230,
    166,
    130,
    229,
    191,
    181,
    229,
    164,
    167,
    229,
    158,
    139,
    230,
    156,
    186,
    231,
    165,
    168,
    231,
    144,
    134,
    232,
    167,
    163,
    229,
    140,
    191,
    229,
    144,
    141,
    99,
    117,
    97,
    110,
    100,
    111,
    101,
    110,
    118,
    105,
    97,
    114,
    109,
    97,
    100,
    114,
    105,
    100,
    98,
    117,
    115,
    99,
    97,
    114,
    105,
    110,
    105,
    99,
    105,
    111,
    116,
    105,
    101,
    109,
    112,
    111,
    112,
    111,
    114,
    113,
    117,
    101,
    99,
    117,
    101,
    110,
    116,
    97,
    101,
    115,
    116,
    97,
    100,
    111,
    112,
    117,
    101,
    100,
    101,
    110,
    106,
    117,
    101,
    103,
    111,
    115,
    99,
    111,
    110,
    116,
    114,
    97,
    101,
    115,
    116,
    195,
    161,
    110,
    110,
    111,
    109,
    98,
    114,
    101,
    116,
    105,
    101,
    110,
    101,
    110,
    112,
    101,
    114,
    102,
    105,
    108,
    109,
    97,
    110,
    101,
    114,
    97,
    97,
    109,
    105,
    103,
    111,
    115,
    99,
    105,
    117,
    100,
    97,
    100,
    99,
    101,
    110,
    116,
    114,
    111,
    97,
    117,
    110,
    113,
    117,
    101,
    112,
    117,
    101,
    100,
    101,
    115,
    100,
    101,
    110,
    116,
    114,
    111,
    112,
    114,
    105,
    109,
    101,
    114,
    112,
    114,
    101,
    99,
    105,
    111,
    115,
    101,
    103,
    195,
    186,
    110,
    98,
    117,
    101,
    110,
    111,
    115,
    118,
    111,
    108,
    118,
    101,
    114,
    112,
    117,
    110,
    116,
    111,
    115,
    115,
    101,
    109,
    97,
    110,
    97,
    104,
    97,
    98,
    195,
    173,
    97,
    97,
    103,
    111,
    115,
    116,
    111,
    110,
    117,
    101,
    118,
    111,
    115,
    117,
    110,
    105,
    100,
    111,
    115,
    99,
    97,
    114,
    108,
    111,
    115,
    101,
    113,
    117,
    105,
    112,
    111,
    110,
    105,
    195,
    177,
    111,
    115,
    109,
    117,
    99,
    104,
    111,
    115,
    97,
    108,
    103,
    117,
    110,
    97,
    99,
    111,
    114,
    114,
    101,
    111,
    105,
    109,
    97,
    103,
    101,
    110,
    112,
    97,
    114,
    116,
    105,
    114,
    97,
    114,
    114,
    105,
    98,
    97,
    109,
    97,
    114,
    195,
    173,
    97,
    104,
    111,
    109,
    98,
    114,
    101,
    101,
    109,
    112,
    108,
    101,
    111,
    118,
    101,
    114,
    100,
    97,
    100,
    99,
    97,
    109,
    98,
    105,
    111,
    109,
    117,
    99,
    104,
    97,
    115,
    102,
    117,
    101,
    114,
    111,
    110,
    112,
    97,
    115,
    97,
    100,
    111,
    108,
    195,
    173,
    110,
    101,
    97,
    112,
    97,
    114,
    101,
    99,
    101,
    110,
    117,
    101,
    118,
    97,
    115,
    99,
    117,
    114,
    115,
    111,
    115,
    101,
    115,
    116,
    97,
    98,
    97,
    113,
    117,
    105,
    101,
    114,
    111,
    108,
    105,
    98,
    114,
    111,
    115,
    99,
    117,
    97,
    110,
    116,
    111,
    97,
    99,
    99,
    101,
    115,
    111,
    109,
    105,
    103,
    117,
    101,
    108,
    118,
    97,
    114,
    105,
    111,
    115,
    99,
    117,
    97,
    116,
    114,
    111,
    116,
    105,
    101,
    110,
    101,
    115,
    103,
    114,
    117,
    112,
    111,
    115,
    115,
    101,
    114,
    195,
    161,
    110,
    101,
    117,
    114,
    111,
    112,
    97,
    109,
    101,
    100,
    105,
    111,
    115,
    102,
    114,
    101,
    110,
    116,
    101,
    97,
    99,
    101,
    114,
    99,
    97,
    100,
    101,
    109,
    195,
    161,
    115,
    111,
    102,
    101,
    114,
    116,
    97,
    99,
    111,
    99,
    104,
    101,
    115,
    109,
    111,
    100,
    101,
    108,
    111,
    105,
    116,
    97,
    108,
    105,
    97,
    108,
    101,
    116,
    114,
    97,
    115,
    97,
    108,
    103,
    195,
    186,
    110,
    99,
    111,
    109,
    112,
    114,
    97,
    99,
    117,
    97,
    108,
    101,
    115,
    101,
    120,
    105,
    115,
    116,
    101,
    99,
    117,
    101,
    114,
    112,
    111,
    115,
    105,
    101,
    110,
    100,
    111,
    112,
    114,
    101,
    110,
    115,
    97,
    108,
    108,
    101,
    103,
    97,
    114,
    118,
    105,
    97,
    106,
    101,
    115,
    100,
    105,
    110,
    101,
    114,
    111,
    109,
    117,
    114,
    99,
    105,
    97,
    112,
    111,
    100,
    114,
    195,
    161,
    112,
    117,
    101,
    115,
    116,
    111,
    100,
    105,
    97,
    114,
    105,
    111,
    112,
    117,
    101,
    98,
    108,
    111,
    113,
    117,
    105,
    101,
    114,
    101,
    109,
    97,
    110,
    117,
    101,
    108,
    112,
    114,
    111,
    112,
    105,
    111,
    99,
    114,
    105,
    115,
    105,
    115,
    99,
    105,
    101,
    114,
    116,
    111,
    115,
    101,
    103,
    117,
    114,
    111,
    109,
    117,
    101,
    114,
    116,
    101,
    102,
    117,
    101,
    110,
    116,
    101,
    99,
    101,
    114,
    114,
    97,
    114,
    103,
    114,
    97,
    110,
    100,
    101,
    101,
    102,
    101,
    99,
    116,
    111,
    112,
    97,
    114,
    116,
    101,
    115,
    109,
    101,
    100,
    105,
    100,
    97,
    112,
    114,
    111,
    112,
    105,
    97,
    111,
    102,
    114,
    101,
    99,
    101,
    116,
    105,
    101,
    114,
    114,
    97,
    101,
    45,
    109,
    97,
    105,
    108,
    118,
    97,
    114,
    105,
    97,
    115,
    102,
    111,
    114,
    109,
    97,
    115,
    102,
    117,
    116,
    117,
    114,
    111,
    111,
    98,
    106,
    101,
    116,
    111,
    115,
    101,
    103,
    117,
    105,
    114,
    114,
    105,
    101,
    115,
    103,
    111,
    110,
    111,
    114,
    109,
    97,
    115,
    109,
    105,
    115,
    109,
    111,
    115,
    195,
    186,
    110,
    105,
    99,
    111,
    99,
    97,
    109,
    105,
    110,
    111,
    115,
    105,
    116,
    105,
    111,
    115,
    114,
    97,
    122,
    195,
    179,
    110,
    100,
    101,
    98,
    105,
    100,
    111,
    112,
    114,
    117,
    101,
    98,
    97,
    116,
    111,
    108,
    101,
    100,
    111,
    116,
    101,
    110,
    195,
    173,
    97,
    106,
    101,
    115,
    195,
    186,
    115,
    101,
    115,
    112,
    101,
    114,
    111,
    99,
    111,
    99,
    105,
    110,
    97,
    111,
    114,
    105,
    103,
    101,
    110,
    116,
    105,
    101,
    110,
    100,
    97,
    99,
    105,
    101,
    110,
    116,
    111,
    99,
    195,
    161,
    100,
    105,
    122,
    104,
    97,
    98,
    108,
    97,
    114,
    115,
    101,
    114,
    195,
    173,
    97,
    108,
    97,
    116,
    105,
    110,
    97,
    102,
    117,
    101,
    114,
    122,
    97,
    101,
    115,
    116,
    105,
    108,
    111,
    103,
    117,
    101,
    114,
    114,
    97,
    101,
    110,
    116,
    114,
    97,
    114,
    195,
    169,
    120,
    105,
    116,
    111,
    108,
    195,
    179,
    112,
    101,
    122,
    97,
    103,
    101,
    110,
    100,
    97,
    118,
    195,
    173,
    100,
    101,
    111,
    101,
    118,
    105,
    116,
    97,
    114,
    112,
    97,
    103,
    105,
    110,
    97,
    109,
    101,
    116,
    114,
    111,
    115,
    106,
    97,
    118,
    105,
    101,
    114,
    112,
    97,
    100,
    114,
    101,
    115,
    102,
    195,
    161,
    99,
    105,
    108,
    99,
    97,
    98,
    101,
    122,
    97,
    195,
    161,
    114,
    101,
    97,
    115,
    115,
    97,
    108,
    105,
    100,
    97,
    101,
    110,
    118,
    195,
    173,
    111,
    106,
    97,
    112,
    195,
    179,
    110,
    97,
    98,
    117,
    115,
    111,
    115,
    98,
    105,
    101,
    110,
    101,
    115,
    116,
    101,
    120,
    116,
    111,
    115,
    108,
    108,
    101,
    118,
    97,
    114,
    112,
    117,
    101,
    100,
    97,
    110,
    102,
    117,
    101,
    114,
    116,
    101,
    99,
    111,
    109,
    195,
    186,
    110,
    99,
    108,
    97,
    115,
    101,
    115,
    104,
    117,
    109,
    97,
    110,
    111,
    116,
    101,
    110,
    105,
    100,
    111,
    98,
    105,
    108,
    98,
    97,
    111,
    117,
    110,
    105,
    100,
    97,
    100,
    101,
    115,
    116,
    195,
    161,
    115,
    101,
    100,
    105,
    116,
    97,
    114,
    99,
    114,
    101,
    97,
    100,
    111,
    208,
    180,
    208,
    187,
    209,
    143,
    209,
    135,
    209,
    130,
    208,
    190,
    208,
    186,
    208,
    176,
    208,
    186,
    208,
    184,
    208,
    187,
    208,
    184,
    209,
    141,
    209,
    130,
    208,
    190,
    208,
    178,
    209,
    129,
    208,
    181,
    208,
    181,
    208,
    179,
    208,
    190,
    208,
    191,
    209,
    128,
    208,
    184,
    209,
    130,
    208,
    176,
    208,
    186,
    208,
    181,
    209,
    137,
    208,
    181,
    209,
    131,
    208,
    182,
    208,
    181,
    208,
    154,
    208,
    176,
    208,
    186,
    208,
    177,
    208,
    181,
    208,
    183,
    208,
    177,
    209,
    139,
    208,
    187,
    208,
    190,
    208,
    189,
    208,
    184,
    208,
    146,
    209,
    129,
    208,
    181,
    208,
    191,
    208,
    190,
    208,
    180,
    208,
    173,
    209,
    130,
    208,
    190,
    209,
    130,
    208,
    190,
    208,
    188,
    209,
    135,
    208,
    181,
    208,
    188,
    208,
    189,
    208,
    181,
    209,
    130,
    208,
    187,
    208,
    181,
    209,
    130,
    209,
    128,
    208,
    176,
    208,
    183,
    208,
    190,
    208,
    189,
    208,
    176,
    208,
    179,
    208,
    180,
    208,
    181,
    208,
    188,
    208,
    189,
    208,
    181,
    208,
    148,
    208,
    187,
    209,
    143,
    208,
    159,
    209,
    128,
    208,
    184,
    208,
    189,
    208,
    176,
    209,
    129,
    208,
    189,
    208,
    184,
    209,
    133,
    209,
    130,
    208,
    181,
    208,
    188,
    208,
    186,
    209,
    130,
    208,
    190,
    208,
    179,
    208,
    190,
    208,
    180,
    208,
    178,
    208,
    190,
    209,
    130,
    209,
    130,
    208,
    176,
    208,
    188,
    208,
    161,
    208,
    168,
    208,
    144,
    208,
    188,
    208,
    176,
    209,
    143,
    208,
    167,
    209,
    130,
    208,
    190,
    208,
    178,
    208,
    176,
    209,
    129,
    208,
    178,
    208,
    176,
    208,
    188,
    208,
    181,
    208,
    188,
    209,
    131,
    208,
    162,
    208,
    176,
    208,
    186,
    208,
    180,
    208,
    178,
    208,
    176,
    208,
    189,
    208,
    176,
    208,
    188,
    209,
    141,
    209,
    130,
    208,
    184,
    209,
    141,
    209,
    130,
    209,
    131,
    208,
    146,
    208,
    176,
    208,
    188,
    209,
    130,
    208,
    181,
    209,
    133,
    208,
    191,
    209,
    128,
    208,
    190,
    209,
    130,
    209,
    131,
    209,
    130,
    208,
    189,
    208,
    176,
    208,
    180,
    208,
    180,
    208,
    189,
    209,
    143,
    208,
    146,
    208,
    190,
    209,
    130,
    209,
    130,
    209,
    128,
    208,
    184,
    208,
    189,
    208,
    181,
    208,
    185,
    208,
    146,
    208,
    176,
    209,
    129,
    208,
    189,
    208,
    184,
    208,
    188,
    209,
    129,
    208,
    176,
    208,
    188,
    209,
    130,
    208,
    190,
    209,
    130,
    209,
    128,
    209,
    131,
    208,
    177,
    208,
    158,
    208,
    189,
    208,
    184,
    208,
    188,
    208,
    184,
    209,
    128,
    208,
    189,
    208,
    181,
    208,
    181,
    208,
    158,
    208,
    158,
    208,
    158,
    208,
    187,
    208,
    184,
    209,
    134,
    209,
    141,
    209,
    130,
    208,
    176,
    208,
    158,
    208,
    189,
    208,
    176,
    208,
    189,
    208,
    181,
    208,
    188,
    208,
    180,
    208,
    190,
    208,
    188,
    208,
    188,
    208,
    190,
    208,
    185,
    208,
    180,
    208,
    178,
    208,
    181,
    208,
    190,
    208,
    189,
    208,
    190,
    209,
    129,
    209,
    131,
    208,
    180,
    224,
    164,
    149,
    224,
    165,
    135,
    224,
    164,
    185,
    224,
    165,
    136,
    224,
    164,
    149,
    224,
    165,
    128,
    224,
    164,
    184,
    224,
    165,
    135,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    149,
    224,
    165,
    139,
    224,
    164,
    148,
    224,
    164,
    176,
    224,
    164,
    170,
    224,
    164,
    176,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    143,
    224,
    164,
    149,
    224,
    164,
    149,
    224,
    164,
    191,
    224,
    164,
    173,
    224,
    165,
    128,
    224,
    164,
    135,
    224,
    164,
    184,
    224,
    164,
    149,
    224,
    164,
    176,
    224,
    164,
    164,
    224,
    165,
    139,
    224,
    164,
    185,
    224,
    165,
    139,
    224,
    164,
    134,
    224,
    164,
    170,
    224,
    164,
    185,
    224,
    165,
    128,
    224,
    164,
    175,
    224,
    164,
    185,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    164,
    224,
    164,
    149,
    224,
    164,
    165,
    224,
    164,
    190,
    106,
    97,
    103,
    114,
    97,
    110,
    224,
    164,
    134,
    224,
    164,
    156,
    224,
    164,
    156,
    224,
    165,
    139,
    224,
    164,
    133,
    224,
    164,
    172,
    224,
    164,
    166,
    224,
    165,
    139,
    224,
    164,
    151,
    224,
    164,
    136,
    224,
    164,
    156,
    224,
    164,
    190,
    224,
    164,
    151,
    224,
    164,
    143,
    224,
    164,
    185,
    224,
    164,
    174,
    224,
    164,
    135,
    224,
    164,
    168,
    224,
    164,
    181,
    224,
    164,
    185,
    224,
    164,
    175,
    224,
    165,
    135,
    224,
    164,
    165,
    224,
    165,
    135,
    224,
    164,
    165,
    224,
    165,
    128,
    224,
    164,
    152,
    224,
    164,
    176,
    224,
    164,
    156,
    224,
    164,
    172,
    224,
    164,
    166,
    224,
    165,
    128,
    224,
    164,
    149,
    224,
    164,
    136,
    224,
    164,
    156,
    224,
    165,
    128,
    224,
    164,
    181,
    224,
    165,
    135,
    224,
    164,
    168,
    224,
    164,
    136,
    224,
    164,
    168,
    224,
    164,
    143,
    224,
    164,
    185,
    224,
    164,
    176,
    224,
    164,
    137,
    224,
    164,
    184,
    224,
    164,
    174,
    224,
    165,
    135,
    224,
    164,
    149,
    224,
    164,
    174,
    224,
    164,
    181,
    224,
    165,
    139,
    224,
    164,
    178,
    224,
    165,
    135,
    224,
    164,
    184,
    224,
    164,
    172,
    224,
    164,
    174,
    224,
    164,
    136,
    224,
    164,
    166,
    224,
    165,
    135,
    224,
    164,
    147,
    224,
    164,
    176,
    224,
    164,
    134,
    224,
    164,
    174,
    224,
    164,
    172,
    224,
    164,
    184,
    224,
    164,
    173,
    224,
    164,
    176,
    224,
    164,
    172,
    224,
    164,
    168,
    224,
    164,
    154,
    224,
    164,
    178,
    224,
    164,
    174,
    224,
    164,
    168,
    224,
    164,
    134,
    224,
    164,
    151,
    224,
    164,
    184,
    224,
    165,
    128,
    224,
    164,
    178,
    224,
    165,
    128,
    216,
    185,
    217,
    132,
    217,
    137,
    216,
    165,
    217,
    132,
    217,
    137,
    217,
    135,
    216,
    176,
    216,
    167,
    216,
    162,
    216,
    174,
    216,
    177,
    216,
    185,
    216,
    175,
    216,
    175,
    216,
    167,
    217,
    132,
    217,
    137,
    217,
    135,
    216,
    176,
    217,
    135,
    216,
    181,
    217,
    136,
    216,
    177,
    216,
    186,
    217,
    138,
    216,
    177,
    217,
    131,
    216,
    167,
    217,
    134,
    217,
    136,
    217,
    132,
    216,
    167,
    216,
    168,
    217,
    138,
    217,
    134,
    216,
    185,
    216,
    177,
    216,
    182,
    216,
    176,
    217,
    132,
    217,
    131,
    217,
    135,
    217,
    134,
    216,
    167,
    217,
    138,
    217,
    136,
    217,
    133,
    217,
    130,
    216,
    167,
    217,
    132,
    216,
    185,
    217,
    132,
    217,
    138,
    216,
    167,
    217,
    134,
    216,
    167,
    217,
    132,
    217,
    131,
    217,
    134,
    216,
    173,
    216,
    170,
    217,
    137,
    217,
    130,
    216,
    168,
    217,
    132,
    217,
    136,
    216,
    173,
    216,
    169,
    216,
    167,
    216,
    174,
    216,
    177,
    217,
    129,
    217,
    130,
    216,
    183,
    216,
    185,
    216,
    168,
    216,
    175,
    216,
    177,
    217,
    131,
    217,
    134,
    216,
    165,
    216,
    176,
    216,
    167,
    217,
    131,
    217,
    133,
    216,
    167,
    216,
    167,
    216,
    173,
    216,
    175,
    216,
    165,
    217,
    132,
    216,
    167,
    217,
    129,
    217,
    138,
    217,
    135,
    216,
    168,
    216,
    185,
    216,
    182,
    217,
    131,
    217,
    138,
    217,
    129,
    216,
    168,
    216,
    173,
    216,
    171,
    217,
    136,
    217,
    133,
    217,
    134,
    217,
    136,
    217,
    135,
    217,
    136,
    216,
    163,
    217,
    134,
    216,
    167,
    216,
    172,
    216,
    175,
    216,
    167,
    217,
    132,
    217,
    135,
    216,
    167,
    216,
    179,
    217,
    132,
    217,
    133,
    216,
    185,
    217,
    134,
    216,
    175,
    217,
    132,
    217,
    138,
    216,
    179,
    216,
    185,
    216,
    168,
    216,
    177,
    216,
    181,
    217,
    132,
    217,
    137,
    217,
    133,
    217,
    134,
    216,
    176,
    216,
    168,
    217,
    135,
    216,
    167,
    216,
    163,
    217,
    134,
    217,
    135,
    217,
    133,
    216,
    171,
    217,
    132,
    217,
    131,
    217,
    134,
    216,
    170,
    216,
    167,
    217,
    132,
    216,
    167,
    216,
    173,
    217,
    138,
    216,
    171,
    217,
    133,
    216,
    181,
    216,
    177,
    216,
    180,
    216,
    177,
    216,
    173,
    216,
    173,
    217,
    136,
    217,
    132,
    217,
    136,
    217,
    129,
    217,
    138,
    216,
    167,
    216,
    176,
    216,
    167,
    217,
    132,
    217,
    131,
    217,
    132,
    217,
    133,
    216,
    177,
    216,
    169,
    216,
    167,
    217,
    134,
    216,
    170,
    216,
    167,
    217,
    132,
    217,
    129,
    216,
    163,
    216,
    168,
    217,
    136,
    216,
    174,
    216,
    167,
    216,
    181,
    216,
    163,
    217,
    134,
    216,
    170,
    216,
    167,
    217,
    134,
    217,
    135,
    216,
    167,
    217,
    132,
    217,
    138,
    216,
    185,
    216,
    182,
    217,
    136,
    217,
    136,
    217,
    130,
    216,
    175,
    216,
    167,
    216,
    168,
    217,
    134,
    216,
    174,
    217,
    138,
    216,
    177,
    216,
    168,
    217,
    134,
    216,
    170,
    217,
    132,
    217,
    131,
    217,
    133,
    216,
    180,
    216,
    167,
    216,
    161,
    217,
    136,
    217,
    135,
    217,
    138,
    216,
    167,
    216,
    168,
    217,
    136,
    217,
    130,
    216,
    181,
    216,
    181,
    217,
    136,
    217,
    133,
    216,
    167,
    216,
    177,
    217,
    130,
    217,
    133,
    216,
    163,
    216,
    173,
    216,
    175,
    217,
    134,
    216,
    173,
    217,
    134,
    216,
    185,
    216,
    175,
    217,
    133,
    216,
    177,
    216,
    163,
    217,
    138,
    216,
    167,
    216,
    173,
    216,
    169,
    217,
    131,
    216,
    170,
    216,
    168,
    216,
    175,
    217,
    136,
    217,
    134,
    217,
    138,
    216,
    172,
    216,
    168,
    217,
    133,
    217,
    134,
    217,
    135,
    216,
    170,
    216,
    173,
    216,
    170,
    216,
    172,
    217,
    135,
    216,
    169,
    216,
    179,
    217,
    134,
    216,
    169,
    217,
    138,
    216,
    170,
    217,
    133,
    217,
    131,
    216,
    177,
    216,
    169,
    216,
    186,
    216,
    178,
    216,
    169,
    217,
    134,
    217,
    129,
    216,
    179,
    216,
    168,
    217,
    138,
    216,
    170,
    217,
    132,
    217,
    132,
    217,
    135,
    217,
    132,
    217,
    134,
    216,
    167,
    216,
    170,
    217,
    132,
    217,
    131,
    217,
    130,
    217,
    132,
    216,
    168,
    217,
    132,
    217,
    133,
    216,
    167,
    216,
    185,
    217,
    134,
    217,
    135,
    216,
    163,
    217,
    136,
    217,
    132,
    216,
    180,
    217,
    138,
    216,
    161,
    217,
    134,
    217,
    136,
    216,
    177,
    216,
    163,
    217,
    133,
    216,
    167,
    217,
    129,
    217,
    138,
    217,
    131,
    216,
    168,
    217,
    131,
    217,
    132,
    216,
    176,
    216,
    167,
    216,
    170,
    216,
    177,
    216,
    170,
    216,
    168,
    216,
    168,
    216,
    163,
    217,
    134,
    217,
    135,
    217,
    133,
    216,
    179,
    216,
    167,
    217,
    134,
    217,
    131,
    216,
    168,
    217,
    138,
    216,
    185,
    217,
    129,
    217,
    130,
    216,
    175,
    216,
    173,
    216,
    179,
    217,
    134,
    217,
    132,
    217,
    135,
    217,
    133,
    216,
    180,
    216,
    185,
    216,
    177,
    216,
    163,
    217,
    135,
    217,
    132,
    216,
    180,
    217,
    135,
    216,
    177,
    217,
    130,
    216,
    183,
    216,
    177,
    216,
    183,
    217,
    132,
    216,
    168,
    112,
    114,
    111,
    102,
    105,
    108,
    101,
    115,
    101,
    114,
    118,
    105,
    99,
    101,
    100,
    101,
    102,
    97,
    117,
    108,
    116,
    104,
    105,
    109,
    115,
    101,
    108,
    102,
    100,
    101,
    116,
    97,
    105,
    108,
    115,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    115,
    116,
    97,
    114,
    116,
    101,
    100,
    109,
    101,
    115,
    115,
    97,
    103,
    101,
    115,
    117,
    99,
    99,
    101,
    115,
    115,
    102,
    97,
    115,
    104,
    105,
    111,
    110,
    60,
    116,
    105,
    116,
    108,
    101,
    62,
    99,
    111,
    117,
    110,
    116,
    114,
    121,
    97,
    99,
    99,
    111,
    117,
    110,
    116,
    99,
    114,
    101,
    97,
    116,
    101,
    100,
    115,
    116,
    111,
    114,
    105,
    101,
    115,
    114,
    101,
    115,
    117,
    108,
    116,
    115,
    114,
    117,
    110,
    110,
    105,
    110,
    103,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    119,
    114,
    105,
    116,
    105,
    110,
    103,
    111,
    98,
    106,
    101,
    99,
    116,
    115,
    118,
    105,
    115,
    105,
    98,
    108,
    101,
    119,
    101,
    108,
    99,
    111,
    109,
    101,
    97,
    114,
    116,
    105,
    99,
    108,
    101,
    117,
    110,
    107,
    110,
    111,
    119,
    110,
    110,
    101,
    116,
    119,
    111,
    114,
    107,
    99,
    111,
    109,
    112,
    97,
    110,
    121,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    98,
    114,
    111,
    119,
    115,
    101,
    114,
    112,
    114,
    105,
    118,
    97,
    99,
    121,
    112,
    114,
    111,
    98,
    108,
    101,
    109,
    83,
    101,
    114,
    118,
    105,
    99,
    101,
    114,
    101,
    115,
    112,
    101,
    99,
    116,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    114,
    101,
    113,
    117,
    101,
    115,
    116,
    114,
    101,
    115,
    101,
    114,
    118,
    101,
    119,
    101,
    98,
    115,
    105,
    116,
    101,
    104,
    105,
    115,
    116,
    111,
    114,
    121,
    102,
    114,
    105,
    101,
    110,
    100,
    115,
    111,
    112,
    116,
    105,
    111,
    110,
    115,
    119,
    111,
    114,
    107,
    105,
    110,
    103,
    118,
    101,
    114,
    115,
    105,
    111,
    110,
    109,
    105,
    108,
    108,
    105,
    111,
    110,
    99,
    104,
    97,
    110,
    110,
    101,
    108,
    119,
    105,
    110,
    100,
    111,
    119,
    46,
    97,
    100,
    100,
    114,
    101,
    115,
    115,
    118,
    105,
    115,
    105,
    116,
    101,
    100,
    119,
    101,
    97,
    116,
    104,
    101,
    114,
    99,
    111,
    114,
    114,
    101,
    99,
    116,
    112,
    114,
    111,
    100,
    117,
    99,
    116,
    101,
    100,
    105,
    114,
    101,
    99,
    116,
    102,
    111,
    114,
    119,
    97,
    114,
    100,
    121,
    111,
    117,
    32,
    99,
    97,
    110,
    114,
    101,
    109,
    111,
    118,
    101,
    100,
    115,
    117,
    98,
    106,
    101,
    99,
    116,
    99,
    111,
    110,
    116,
    114,
    111,
    108,
    97,
    114,
    99,
    104,
    105,
    118,
    101,
    99,
    117,
    114,
    114,
    101,
    110,
    116,
    114,
    101,
    97,
    100,
    105,
    110,
    103,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    108,
    105,
    109,
    105,
    116,
    101,
    100,
    109,
    97,
    110,
    97,
    103,
    101,
    114,
    102,
    117,
    114,
    116,
    104,
    101,
    114,
    115,
    117,
    109,
    109,
    97,
    114,
    121,
    109,
    97,
    99,
    104,
    105,
    110,
    101,
    109,
    105,
    110,
    117,
    116,
    101,
    115,
    112,
    114,
    105,
    118,
    97,
    116,
    101,
    99,
    111,
    110,
    116,
    101,
    120,
    116,
    112,
    114,
    111,
    103,
    114,
    97,
    109,
    115,
    111,
    99,
    105,
    101,
    116,
    121,
    110,
    117,
    109,
    98,
    101,
    114,
    115,
    119,
    114,
    105,
    116,
    116,
    101,
    110,
    101,
    110,
    97,
    98,
    108,
    101,
    100,
    116,
    114,
    105,
    103,
    103,
    101,
    114,
    115,
    111,
    117,
    114,
    99,
    101,
    115,
    108,
    111,
    97,
    100,
    105,
    110,
    103,
    101,
    108,
    101,
    109,
    101,
    110,
    116,
    112,
    97,
    114,
    116,
    110,
    101,
    114,
    102,
    105,
    110,
    97,
    108,
    108,
    121,
    112,
    101,
    114,
    102,
    101,
    99,
    116,
    109,
    101,
    97,
    110,
    105,
    110,
    103,
    115,
    121,
    115,
    116,
    101,
    109,
    115,
    107,
    101,
    101,
    112,
    105,
    110,
    103,
    99,
    117,
    108,
    116,
    117,
    114,
    101,
    38,
    113,
    117,
    111,
    116,
    59,
    44,
    106,
    111,
    117,
    114,
    110,
    97,
    108,
    112,
    114,
    111,
    106,
    101,
    99,
    116,
    115,
    117,
    114,
    102,
    97,
    99,
    101,
    115,
    38,
    113,
    117,
    111,
    116,
    59,
    101,
    120,
    112,
    105,
    114,
    101,
    115,
    114,
    101,
    118,
    105,
    101,
    119,
    115,
    98,
    97,
    108,
    97,
    110,
    99,
    101,
    69,
    110,
    103,
    108,
    105,
    115,
    104,
    67,
    111,
    110,
    116,
    101,
    110,
    116,
    116,
    104,
    114,
    111,
    117,
    103,
    104,
    80,
    108,
    101,
    97,
    115,
    101,
    32,
    111,
    112,
    105,
    110,
    105,
    111,
    110,
    99,
    111,
    110,
    116,
    97,
    99,
    116,
    97,
    118,
    101,
    114,
    97,
    103,
    101,
    112,
    114,
    105,
    109,
    97,
    114,
    121,
    118,
    105,
    108,
    108,
    97,
    103,
    101,
    83,
    112,
    97,
    110,
    105,
    115,
    104,
    103,
    97,
    108,
    108,
    101,
    114,
    121,
    100,
    101,
    99,
    108,
    105,
    110,
    101,
    109,
    101,
    101,
    116,
    105,
    110,
    103,
    109,
    105,
    115,
    115,
    105,
    111,
    110,
    112,
    111,
    112,
    117,
    108,
    97,
    114,
    113,
    117,
    97,
    108,
    105,
    116,
    121,
    109,
    101,
    97,
    115,
    117,
    114,
    101,
    103,
    101,
    110,
    101,
    114,
    97,
    108,
    115,
    112,
    101,
    99,
    105,
    101,
    115,
    115,
    101,
    115,
    115,
    105,
    111,
    110,
    115,
    101,
    99,
    116,
    105,
    111,
    110,
    119,
    114,
    105,
    116,
    101,
    114,
    115,
    99,
    111,
    117,
    110,
    116,
    101,
    114,
    105,
    110,
    105,
    116,
    105,
    97,
    108,
    114,
    101,
    112,
    111,
    114,
    116,
    115,
    102,
    105,
    103,
    117,
    114,
    101,
    115,
    109,
    101,
    109,
    98,
    101,
    114,
    115,
    104,
    111,
    108,
    100,
    105,
    110,
    103,
    100,
    105,
    115,
    112,
    117,
    116,
    101,
    101,
    97,
    114,
    108,
    105,
    101,
    114,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    100,
    105,
    103,
    105,
    116,
    97,
    108,
    112,
    105,
    99,
    116,
    117,
    114,
    101,
    65,
    110,
    111,
    116,
    104,
    101,
    114,
    109,
    97,
    114,
    114,
    105,
    101,
    100,
    116,
    114,
    97,
    102,
    102,
    105,
    99,
    108,
    101,
    97,
    100,
    105,
    110,
    103,
    99,
    104,
    97,
    110,
    103,
    101,
    100,
    99,
    101,
    110,
    116,
    114,
    97,
    108,
    118,
    105,
    99,
    116,
    111,
    114,
    121,
    105,
    109,
    97,
    103,
    101,
    115,
    47,
    114,
    101,
    97,
    115,
    111,
    110,
    115,
    115,
    116,
    117,
    100,
    105,
    101,
    115,
    102,
    101,
    97,
    116,
    117,
    114,
    101,
    108,
    105,
    115,
    116,
    105,
    110,
    103,
    109,
    117,
    115,
    116,
    32,
    98,
    101,
    115,
    99,
    104,
    111,
    111,
    108,
    115,
    86,
    101,
    114,
    115,
    105,
    111,
    110,
    117,
    115,
    117,
    97,
    108,
    108,
    121,
    101,
    112,
    105,
    115,
    111,
    100,
    101,
    112,
    108,
    97,
    121,
    105,
    110,
    103,
    103,
    114,
    111,
    119,
    105,
    110,
    103,
    111,
    98,
    118,
    105,
    111,
    117,
    115,
    111,
    118,
    101,
    114,
    108,
    97,
    121,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    97,
    99,
    116,
    105,
    111,
    110,
    115,
    60,
    47,
    117,
    108,
    62,
    13,
    10,
    119,
    114,
    97,
    112,
    112,
    101,
    114,
    97,
    108,
    114,
    101,
    97,
    100,
    121,
    99,
    101,
    114,
    116,
    97,
    105,
    110,
    114,
    101,
    97,
    108,
    105,
    116,
    121,
    115,
    116,
    111,
    114,
    97,
    103,
    101,
    97,
    110,
    111,
    116,
    104,
    101,
    114,
    100,
    101,
    115,
    107,
    116,
    111,
    112,
    111,
    102,
    102,
    101,
    114,
    101,
    100,
    112,
    97,
    116,
    116,
    101,
    114,
    110,
    117,
    110,
    117,
    115,
    117,
    97,
    108,
    68,
    105,
    103,
    105,
    116,
    97,
    108,
    99,
    97,
    112,
    105,
    116,
    97,
    108,
    87,
    101,
    98,
    115,
    105,
    116,
    101,
    102,
    97,
    105,
    108,
    117,
    114,
    101,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    114,
    101,
    100,
    117,
    99,
    101,
    100,
    65,
    110,
    100,
    114,
    111,
    105,
    100,
    100,
    101,
    99,
    97,
    100,
    101,
    115,
    114,
    101,
    103,
    117,
    108,
    97,
    114,
    32,
    38,
    97,
    109,
    112,
    59,
    32,
    97,
    110,
    105,
    109,
    97,
    108,
    115,
    114,
    101,
    108,
    101,
    97,
    115,
    101,
    65,
    117,
    116,
    111,
    109,
    97,
    116,
    103,
    101,
    116,
    116,
    105,
    110,
    103,
    109,
    101,
    116,
    104,
    111,
    100,
    115,
    110,
    111,
    116,
    104,
    105,
    110,
    103,
    80,
    111,
    112,
    117,
    108,
    97,
    114,
    99,
    97,
    112,
    116,
    105,
    111,
    110,
    108,
    101,
    116,
    116,
    101,
    114,
    115,
    99,
    97,
    112,
    116,
    117,
    114,
    101,
    115,
    99,
    105,
    101,
    110,
    99,
    101,
    108,
    105,
    99,
    101,
    110,
    115,
    101,
    99,
    104,
    97,
    110,
    103,
    101,
    115,
    69,
    110,
    103,
    108,
    97,
    110,
    100,
    61,
    49,
    38,
    97,
    109,
    112,
    59,
    72,
    105,
    115,
    116,
    111,
    114,
    121,
    32,
    61,
    32,
    110,
    101,
    119,
    32,
    67,
    101,
    110,
    116,
    114,
    97,
    108,
    117,
    112,
    100,
    97,
    116,
    101,
    100,
    83,
    112,
    101,
    99,
    105,
    97,
    108,
    78,
    101,
    116,
    119,
    111,
    114,
    107,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    99,
    111,
    109,
    109,
    101,
    110,
    116,
    119,
    97,
    114,
    110,
    105,
    110,
    103,
    67,
    111,
    108,
    108,
    101,
    103,
    101,
    116,
    111,
    111,
    108,
    98,
    97,
    114,
    114,
    101,
    109,
    97,
    105,
    110,
    115,
    98,
    101,
    99,
    97,
    117,
    115,
    101,
    101,
    108,
    101,
    99,
    116,
    101,
    100,
    68,
    101,
    117,
    116,
    115,
    99,
    104,
    102,
    105,
    110,
    97,
    110,
    99,
    101,
    119,
    111,
    114,
    107,
    101,
    114,
    115,
    113,
    117,
    105,
    99,
    107,
    108,
    121,
    98,
    101,
    116,
    119,
    101,
    101,
    110,
    101,
    120,
    97,
    99,
    116,
    108,
    121,
    115,
    101,
    116,
    116,
    105,
    110,
    103,
    100,
    105,
    115,
    101,
    97,
    115,
    101,
    83,
    111,
    99,
    105,
    101,
    116,
    121,
    119,
    101,
    97,
    112,
    111,
    110,
    115,
    101,
    120,
    104,
    105,
    98,
    105,
    116,
    38,
    108,
    116,
    59,
    33,
    45,
    45,
    67,
    111,
    110,
    116,
    114,
    111,
    108,
    99,
    108,
    97,
    115,
    115,
    101,
    115,
    99,
    111,
    118,
    101,
    114,
    101,
    100,
    111,
    117,
    116,
    108,
    105,
    110,
    101,
    97,
    116,
    116,
    97,
    99,
    107,
    115,
    100,
    101,
    118,
    105,
    99,
    101,
    115,
    40,
    119,
    105,
    110,
    100,
    111,
    119,
    112,
    117,
    114,
    112,
    111,
    115,
    101,
    116,
    105,
    116,
    108,
    101,
    61,
    34,
    77,
    111,
    98,
    105,
    108,
    101,
    32,
    107,
    105,
    108,
    108,
    105,
    110,
    103,
    115,
    104,
    111,
    119,
    105,
    110,
    103,
    73,
    116,
    97,
    108,
    105,
    97,
    110,
    100,
    114,
    111,
    112,
    112,
    101,
    100,
    104,
    101,
    97,
    118,
    105,
    108,
    121,
    101,
    102,
    102,
    101,
    99,
    116,
    115,
    45,
    49,
    39,
    93,
    41,
    59,
    10,
    99,
    111,
    110,
    102,
    105,
    114,
    109,
    67,
    117,
    114,
    114,
    101,
    110,
    116,
    97,
    100,
    118,
    97,
    110,
    99,
    101,
    115,
    104,
    97,
    114,
    105,
    110,
    103,
    111,
    112,
    101,
    110,
    105,
    110,
    103,
    100,
    114,
    97,
    119,
    105,
    110,
    103,
    98,
    105,
    108,
    108,
    105,
    111,
    110,
    111,
    114,
    100,
    101,
    114,
    101,
    100,
    71,
    101,
    114,
    109,
    97,
    110,
    121,
    114,
    101,
    108,
    97,
    116,
    101,
    100,
    60,
    47,
    102,
    111,
    114,
    109,
    62,
    105,
    110,
    99,
    108,
    117,
    100,
    101,
    119,
    104,
    101,
    116,
    104,
    101,
    114,
    100,
    101,
    102,
    105,
    110,
    101,
    100,
    83,
    99,
    105,
    101,
    110,
    99,
    101,
    99,
    97,
    116,
    97,
    108,
    111,
    103,
    65,
    114,
    116,
    105,
    99,
    108,
    101,
    98,
    117,
    116,
    116,
    111,
    110,
    115,
    108,
    97,
    114,
    103,
    101,
    115,
    116,
    117,
    110,
    105,
    102,
    111,
    114,
    109,
    106,
    111,
    117,
    114,
    110,
    101,
    121,
    115,
    105,
    100,
    101,
    98,
    97,
    114,
    67,
    104,
    105,
    99,
    97,
    103,
    111,
    104,
    111,
    108,
    105,
    100,
    97,
    121,
    71,
    101,
    110,
    101,
    114,
    97,
    108,
    112,
    97,
    115,
    115,
    97,
    103,
    101,
    44,
    38,
    113,
    117,
    111,
    116,
    59,
    97,
    110,
    105,
    109,
    97,
    116,
    101,
    102,
    101,
    101,
    108,
    105,
    110,
    103,
    97,
    114,
    114,
    105,
    118,
    101,
    100,
    112,
    97,
    115,
    115,
    105,
    110,
    103,
    110,
    97,
    116,
    117,
    114,
    97,
    108,
    114,
    111,
    117,
    103,
    104,
    108,
    121,
    46,
    10,
    10,
    84,
    104,
    101,
    32,
    98,
    117,
    116,
    32,
    110,
    111,
    116,
    100,
    101,
    110,
    115,
    105,
    116,
    121,
    66,
    114,
    105,
    116,
    97,
    105,
    110,
    67,
    104,
    105,
    110,
    101,
    115,
    101,
    108,
    97,
    99,
    107,
    32,
    111,
    102,
    116,
    114,
    105,
    98,
    117,
    116,
    101,
    73,
    114,
    101,
    108,
    97,
    110,
    100,
    34,
    32,
    100,
    97,
    116,
    97,
    45,
    102,
    97,
    99,
    116,
    111,
    114,
    115,
    114,
    101,
    99,
    101,
    105,
    118,
    101,
    116,
    104,
    97,
    116,
    32,
    105,
    115,
    76,
    105,
    98,
    114,
    97,
    114,
    121,
    104,
    117,
    115,
    98,
    97,
    110,
    100,
    105,
    110,
    32,
    102,
    97,
    99,
    116,
    97,
    102,
    102,
    97,
    105,
    114,
    115,
    67,
    104,
    97,
    114,
    108,
    101,
    115,
    114,
    97,
    100,
    105,
    99,
    97,
    108,
    98,
    114,
    111,
    117,
    103,
    104,
    116,
    102,
    105,
    110,
    100,
    105,
    110,
    103,
    108,
    97,
    110,
    100,
    105,
    110,
    103,
    58,
    108,
    97,
    110,
    103,
    61,
    34,
    114,
    101,
    116,
    117,
    114,
    110,
    32,
    108,
    101,
    97,
    100,
    101,
    114,
    115,
    112,
    108,
    97,
    110,
    110,
    101,
    100,
    112,
    114,
    101,
    109,
    105,
    117,
    109,
    112,
    97,
    99,
    107,
    97,
    103,
    101,
    65,
    109,
    101,
    114,
    105,
    99,
    97,
    69,
    100,
    105,
    116,
    105,
    111,
    110,
    93,
    38,
    113,
    117,
    111,
    116,
    59,
    77,
    101,
    115,
    115,
    97,
    103,
    101,
    110,
    101,
    101,
    100,
    32,
    116,
    111,
    118,
    97,
    108,
    117,
    101,
    61,
    34,
    99,
    111,
    109,
    112,
    108,
    101,
    120,
    108,
    111,
    111,
    107,
    105,
    110,
    103,
    115,
    116,
    97,
    116,
    105,
    111,
    110,
    98,
    101,
    108,
    105,
    101,
    118,
    101,
    115,
    109,
    97,
    108,
    108,
    101,
    114,
    45,
    109,
    111,
    98,
    105,
    108,
    101,
    114,
    101,
    99,
    111,
    114,
    100,
    115,
    119,
    97,
    110,
    116,
    32,
    116,
    111,
    107,
    105,
    110,
    100,
    32,
    111,
    102,
    70,
    105,
    114,
    101,
    102,
    111,
    120,
    121,
    111,
    117,
    32,
    97,
    114,
    101,
    115,
    105,
    109,
    105,
    108,
    97,
    114,
    115,
    116,
    117,
    100,
    105,
    101,
    100,
    109,
    97,
    120,
    105,
    109,
    117,
    109,
    104,
    101,
    97,
    100,
    105,
    110,
    103,
    114,
    97,
    112,
    105,
    100,
    108,
    121,
    99,
    108,
    105,
    109,
    97,
    116,
    101,
    107,
    105,
    110,
    103,
    100,
    111,
    109,
    101,
    109,
    101,
    114,
    103,
    101,
    100,
    97,
    109,
    111,
    117,
    110,
    116,
    115,
    102,
    111,
    117,
    110,
    100,
    101,
    100,
    112,
    105,
    111,
    110,
    101,
    101,
    114,
    102,
    111,
    114,
    109,
    117,
    108,
    97,
    100,
    121,
    110,
    97,
    115,
    116,
    121,
    104,
    111,
    119,
    32,
    116,
    111,
    32,
    83,
    117,
    112,
    112,
    111,
    114,
    116,
    114,
    101,
    118,
    101,
    110,
    117,
    101,
    101,
    99,
    111,
    110,
    111,
    109,
    121,
    82,
    101,
    115,
    117,
    108,
    116,
    115,
    98,
    114,
    111,
    116,
    104,
    101,
    114,
    115,
    111,
    108,
    100,
    105,
    101,
    114,
    108,
    97,
    114,
    103,
    101,
    108,
    121,
    99,
    97,
    108,
    108,
    105,
    110,
    103,
    46,
    38,
    113,
    117,
    111,
    116,
    59,
    65,
    99,
    99,
    111,
    117,
    110,
    116,
    69,
    100,
    119,
    97,
    114,
    100,
    32,
    115,
    101,
    103,
    109,
    101,
    110,
    116,
    82,
    111,
    98,
    101,
    114,
    116,
    32,
    101,
    102,
    102,
    111,
    114,
    116,
    115,
    80,
    97,
    99,
    105,
    102,
    105,
    99,
    108,
    101,
    97,
    114,
    110,
    101,
    100,
    117,
    112,
    32,
    119,
    105,
    116,
    104,
    104,
    101,
    105,
    103,
    104,
    116,
    58,
    119,
    101,
    32,
    104,
    97,
    118,
    101,
    65,
    110,
    103,
    101,
    108,
    101,
    115,
    110,
    97,
    116,
    105,
    111,
    110,
    115,
    95,
    115,
    101,
    97,
    114,
    99,
    104,
    97,
    112,
    112,
    108,
    105,
    101,
    100,
    97,
    99,
    113,
    117,
    105,
    114,
    101,
    109,
    97,
    115,
    115,
    105,
    118,
    101,
    103,
    114,
    97,
    110,
    116,
    101,
    100,
    58,
    32,
    102,
    97,
    108,
    115,
    101,
    116,
    114,
    101,
    97,
    116,
    101,
    100,
    98,
    105,
    103,
    103,
    101,
    115,
    116,
    98,
    101,
    110,
    101,
    102,
    105,
    116,
    100,
    114,
    105,
    118,
    105,
    110,
    103,
    83,
    116,
    117,
    100,
    105,
    101,
    115,
    109,
    105,
    110,
    105,
    109,
    117,
    109,
    112,
    101,
    114,
    104,
    97,
    112,
    115,
    109,
    111,
    114,
    110,
    105,
    110,
    103,
    115,
    101,
    108,
    108,
    105,
    110,
    103,
    105,
    115,
    32,
    117,
    115,
    101,
    100,
    114,
    101,
    118,
    101,
    114,
    115,
    101,
    118,
    97,
    114,
    105,
    97,
    110,
    116,
    32,
    114,
    111,
    108,
    101,
    61,
    34,
    109,
    105,
    115,
    115,
    105,
    110,
    103,
    97,
    99,
    104,
    105,
    101,
    118,
    101,
    112,
    114,
    111,
    109,
    111,
    116,
    101,
    115,
    116,
    117,
    100,
    101,
    110,
    116,
    115,
    111,
    109,
    101,
    111,
    110,
    101,
    101,
    120,
    116,
    114,
    101,
    109,
    101,
    114,
    101,
    115,
    116,
    111,
    114,
    101,
    98,
    111,
    116,
    116,
    111,
    109,
    58,
    101,
    118,
    111,
    108,
    118,
    101,
    100,
    97,
    108,
    108,
    32,
    116,
    104,
    101,
    115,
    105,
    116,
    101,
    109,
    97,
    112,
    101,
    110,
    103,
    108,
    105,
    115,
    104,
    119,
    97,
    121,
    32,
    116,
    111,
    32,
    32,
    65,
    117,
    103,
    117,
    115,
    116,
    115,
    121,
    109,
    98,
    111,
    108,
    115,
    67,
    111,
    109,
    112,
    97,
    110,
    121,
    109,
    97,
    116,
    116,
    101,
    114,
    115,
    109,
    117,
    115,
    105,
    99,
    97,
    108,
    97,
    103,
    97,
    105,
    110,
    115,
    116,
    115,
    101,
    114,
    118,
    105,
    110,
    103,
    125,
    41,
    40,
    41,
    59,
    13,
    10,
    112,
    97,
    121,
    109,
    101,
    110,
    116,
    116,
    114,
    111,
    117,
    98,
    108,
    101,
    99,
    111,
    110,
    99,
    101,
    112,
    116,
    99,
    111,
    109,
    112,
    97,
    114,
    101,
    112,
    97,
    114,
    101,
    110,
    116,
    115,
    112,
    108,
    97,
    121,
    101,
    114,
    115,
    114,
    101,
    103,
    105,
    111,
    110,
    115,
    109,
    111,
    110,
    105,
    116,
    111,
    114,
    32,
    39,
    39,
    84,
    104,
    101,
    32,
    119,
    105,
    110,
    110,
    105,
    110,
    103,
    101,
    120,
    112,
    108,
    111,
    114,
    101,
    97,
    100,
    97,
    112,
    116,
    101,
    100,
    71,
    97,
    108,
    108,
    101,
    114,
    121,
    112,
    114,
    111,
    100,
    117,
    99,
    101,
    97,
    98,
    105,
    108,
    105,
    116,
    121,
    101,
    110,
    104,
    97,
    110,
    99,
    101,
    99,
    97,
    114,
    101,
    101,
    114,
    115,
    41,
    46,
    32,
    84,
    104,
    101,
    32,
    99,
    111,
    108,
    108,
    101,
    99,
    116,
    83,
    101,
    97,
    114,
    99,
    104,
    32,
    97,
    110,
    99,
    105,
    101,
    110,
    116,
    101,
    120,
    105,
    115,
    116,
    101,
    100,
    102,
    111,
    111,
    116,
    101,
    114,
    32,
    104,
    97,
    110,
    100,
    108,
    101,
    114,
    112,
    114,
    105,
    110,
    116,
    101,
    100,
    99,
    111,
    110,
    115,
    111,
    108,
    101,
    69,
    97,
    115,
    116,
    101,
    114,
    110,
    101,
    120,
    112,
    111,
    114,
    116,
    115,
    119,
    105,
    110,
    100,
    111,
    119,
    115,
    67,
    104,
    97,
    110,
    110,
    101,
    108,
    105,
    108,
    108,
    101,
    103,
    97,
    108,
    110,
    101,
    117,
    116,
    114,
    97,
    108,
    115,
    117,
    103,
    103,
    101,
    115,
    116,
    95,
    104,
    101,
    97,
    100,
    101,
    114,
    115,
    105,
    103,
    110,
    105,
    110,
    103,
    46,
    104,
    116,
    109,
    108,
    34,
    62,
    115,
    101,
    116,
    116,
    108,
    101,
    100,
    119,
    101,
    115,
    116,
    101,
    114,
    110,
    99,
    97,
    117,
    115,
    105,
    110,
    103,
    45,
    119,
    101,
    98,
    107,
    105,
    116,
    99,
    108,
    97,
    105,
    109,
    101,
    100,
    74,
    117,
    115,
    116,
    105,
    99,
    101,
    99,
    104,
    97,
    112,
    116,
    101,
    114,
    118,
    105,
    99,
    116,
    105,
    109,
    115,
    84,
    104,
    111,
    109,
    97,
    115,
    32,
    109,
    111,
    122,
    105,
    108,
    108,
    97,
    112,
    114,
    111,
    109,
    105,
    115,
    101,
    112,
    97,
    114,
    116,
    105,
    101,
    115,
    101,
    100,
    105,
    116,
    105,
    111,
    110,
    111,
    117,
    116,
    115,
    105,
    100,
    101,
    58,
    102,
    97,
    108,
    115,
    101,
    44,
    104,
    117,
    110,
    100,
    114,
    101,
    100,
    79,
    108,
    121,
    109,
    112,
    105,
    99,
    95,
    98,
    117,
    116,
    116,
    111,
    110,
    97,
    117,
    116,
    104,
    111,
    114,
    115,
    114,
    101,
    97,
    99,
    104,
    101,
    100,
    99,
    104,
    114,
    111,
    110,
    105,
    99,
    100,
    101,
    109,
    97,
    110,
    100,
    115,
    115,
    101,
    99,
    111,
    110,
    100,
    115,
    112,
    114,
    111,
    116,
    101,
    99,
    116,
    97,
    100,
    111,
    112,
    116,
    101,
    100,
    112,
    114,
    101,
    112,
    97,
    114,
    101,
    110,
    101,
    105,
    116,
    104,
    101,
    114,
    103,
    114,
    101,
    97,
    116,
    108,
    121,
    103,
    114,
    101,
    97,
    116,
    101,
    114,
    111,
    118,
    101,
    114,
    97,
    108,
    108,
    105,
    109,
    112,
    114,
    111,
    118,
    101,
    99,
    111,
    109,
    109,
    97,
    110,
    100,
    115,
    112,
    101,
    99,
    105,
    97,
    108,
    115,
    101,
    97,
    114,
    99,
    104,
    46,
    119,
    111,
    114,
    115,
    104,
    105,
    112,
    102,
    117,
    110,
    100,
    105,
    110,
    103,
    116,
    104,
    111,
    117,
    103,
    104,
    116,
    104,
    105,
    103,
    104,
    101,
    115,
    116,
    105,
    110,
    115,
    116,
    101,
    97,
    100,
    117,
    116,
    105,
    108,
    105,
    116,
    121,
    113,
    117,
    97,
    114,
    116,
    101,
    114,
    67,
    117,
    108,
    116,
    117,
    114,
    101,
    116,
    101,
    115,
    116,
    105,
    110,
    103,
    99,
    108,
    101,
    97,
    114,
    108,
    121,
    101,
    120,
    112,
    111,
    115,
    101,
    100,
    66,
    114,
    111,
    119,
    115,
    101,
    114,
    108,
    105,
    98,
    101,
    114,
    97,
    108,
    125,
    32,
    99,
    97,
    116,
    99,
    104,
    80,
    114,
    111,
    106,
    101,
    99,
    116,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    104,
    105,
    100,
    101,
    40,
    41,
    59,
    70,
    108,
    111,
    114,
    105,
    100,
    97,
    97,
    110,
    115,
    119,
    101,
    114,
    115,
    97,
    108,
    108,
    111,
    119,
    101,
    100,
    69,
    109,
    112,
    101,
    114,
    111,
    114,
    100,
    101,
    102,
    101,
    110,
    115,
    101,
    115,
    101,
    114,
    105,
    111,
    117,
    115,
    102,
    114,
    101,
    101,
    100,
    111,
    109,
    83,
    101,
    118,
    101,
    114,
    97,
    108,
    45,
    98,
    117,
    116,
    116,
    111,
    110,
    70,
    117,
    114,
    116,
    104,
    101,
    114,
    111,
    117,
    116,
    32,
    111,
    102,
    32,
    33,
    61,
    32,
    110,
    117,
    108,
    108,
    116,
    114,
    97,
    105,
    110,
    101,
    100,
    68,
    101,
    110,
    109,
    97,
    114,
    107,
    118,
    111,
    105,
    100,
    40,
    48,
    41,
    47,
    97,
    108,
    108,
    46,
    106,
    115,
    112,
    114,
    101,
    118,
    101,
    110,
    116,
    82,
    101,
    113,
    117,
    101,
    115,
    116,
    83,
    116,
    101,
    112,
    104,
    101,
    110,
    10,
    10,
    87,
    104,
    101,
    110,
    32,
    111,
    98,
    115,
    101,
    114,
    118,
    101,
    60,
    47,
    104,
    50,
    62,
    13,
    10,
    77,
    111,
    100,
    101,
    114,
    110,
    32,
    112,
    114,
    111,
    118,
    105,
    100,
    101,
    34,
    32,
    97,
    108,
    116,
    61,
    34,
    98,
    111,
    114,
    100,
    101,
    114,
    115,
    46,
    10,
    10,
    70,
    111,
    114,
    32,
    10,
    10,
    77,
    97,
    110,
    121,
    32,
    97,
    114,
    116,
    105,
    115,
    116,
    115,
    112,
    111,
    119,
    101,
    114,
    101,
    100,
    112,
    101,
    114,
    102,
    111,
    114,
    109,
    102,
    105,
    99,
    116,
    105,
    111,
    110,
    116,
    121,
    112,
    101,
    32,
    111,
    102,
    109,
    101,
    100,
    105,
    99,
    97,
    108,
    116,
    105,
    99,
    107,
    101,
    116,
    115,
    111,
    112,
    112,
    111,
    115,
    101,
    100,
    67,
    111,
    117,
    110,
    99,
    105,
    108,
    119,
    105,
    116,
    110,
    101,
    115,
    115,
    106,
    117,
    115,
    116,
    105,
    99,
    101,
    71,
    101,
    111,
    114,
    103,
    101,
    32,
    66,
    101,
    108,
    103,
    105,
    117,
    109,
    46,
    46,
    46,
    60,
    47,
    97,
    62,
    116,
    119,
    105,
    116,
    116,
    101,
    114,
    110,
    111,
    116,
    97,
    98,
    108,
    121,
    119,
    97,
    105,
    116,
    105,
    110,
    103,
    119,
    97,
    114,
    102,
    97,
    114,
    101,
    32,
    79,
    116,
    104,
    101,
    114,
    32,
    114,
    97,
    110,
    107,
    105,
    110,
    103,
    112,
    104,
    114,
    97,
    115,
    101,
    115,
    109,
    101,
    110,
    116,
    105,
    111,
    110,
    115,
    117,
    114,
    118,
    105,
    118,
    101,
    115,
    99,
    104,
    111,
    108,
    97,
    114,
    60,
    47,
    112,
    62,
    13,
    10,
    32,
    67,
    111,
    117,
    110,
    116,
    114,
    121,
    105,
    103,
    110,
    111,
    114,
    101,
    100,
    108,
    111,
    115,
    115,
    32,
    111,
    102,
    106,
    117,
    115,
    116,
    32,
    97,
    115,
    71,
    101,
    111,
    114,
    103,
    105,
    97,
    115,
    116,
    114,
    97,
    110,
    103,
    101,
    60,
    104,
    101,
    97,
    100,
    62,
    60,
    115,
    116,
    111,
    112,
    112,
    101,
    100,
    49,
    39,
    93,
    41,
    59,
    13,
    10,
    105,
    115,
    108,
    97,
    110,
    100,
    115,
    110,
    111,
    116,
    97,
    98,
    108,
    101,
    98,
    111,
    114,
    100,
    101,
    114,
    58,
    108,
    105,
    115,
    116,
    32,
    111,
    102,
    99,
    97,
    114,
    114,
    105,
    101,
    100,
    49,
    48,
    48,
    44,
    48,
    48,
    48,
    60,
    47,
    104,
    51,
    62,
    10,
    32,
    115,
    101,
    118,
    101,
    114,
    97,
    108,
    98,
    101,
    99,
    111,
    109,
    101,
    115,
    115,
    101,
    108,
    101,
    99,
    116,
    32,
    119,
    101,
    100,
    100,
    105,
    110,
    103,
    48,
    48,
    46,
    104,
    116,
    109,
    108,
    109,
    111,
    110,
    97,
    114,
    99,
    104,
    111,
    102,
    102,
    32,
    116,
    104,
    101,
    116,
    101,
    97,
    99,
    104,
    101,
    114,
    104,
    105,
    103,
    104,
    108,
    121,
    32,
    98,
    105,
    111,
    108,
    111,
    103,
    121,
    108,
    105,
    102,
    101,
    32,
    111,
    102,
    111,
    114,
    32,
    101,
    118,
    101,
    110,
    114,
    105,
    115,
    101,
    32,
    111,
    102,
    38,
    114,
    97,
    113,
    117,
    111,
    59,
    112,
    108,
    117,
    115,
    111,
    110,
    101,
    104,
    117,
    110,
    116,
    105,
    110,
    103,
    40,
    116,
    104,
    111,
    117,
    103,
    104,
    68,
    111,
    117,
    103,
    108,
    97,
    115,
    106,
    111,
    105,
    110,
    105,
    110,
    103,
    99,
    105,
    114,
    99,
    108,
    101,
    115,
    70,
    111,
    114,
    32,
    116,
    104,
    101,
    65,
    110,
    99,
    105,
    101,
    110,
    116,
    86,
    105,
    101,
    116,
    110,
    97,
    109,
    118,
    101,
    104,
    105,
    99,
    108,
    101,
    115,
    117,
    99,
    104,
    32,
    97,
    115,
    99,
    114,
    121,
    115,
    116,
    97,
    108,
    118,
    97,
    108,
    117,
    101,
    32,
    61,
    87,
    105,
    110,
    100,
    111,
    119,
    115,
    101,
    110,
    106,
    111,
    121,
    101,
    100,
    97,
    32,
    115,
    109,
    97,
    108,
    108,
    97,
    115,
    115,
    117,
    109,
    101,
    100,
    60,
    97,
    32,
    105,
    100,
    61,
    34,
    102,
    111,
    114,
    101,
    105,
    103,
    110,
    32,
    65,
    108,
    108,
    32,
    114,
    105,
    104,
    111,
    119,
    32,
    116,
    104,
    101,
    68,
    105,
    115,
    112,
    108,
    97,
    121,
    114,
    101,
    116,
    105,
    114,
    101,
    100,
    104,
    111,
    119,
    101,
    118,
    101,
    114,
    104,
    105,
    100,
    100,
    101,
    110,
    59,
    98,
    97,
    116,
    116,
    108,
    101,
    115,
    115,
    101,
    101,
    107,
    105,
    110,
    103,
    99,
    97,
    98,
    105,
    110,
    101,
    116,
    119,
    97,
    115,
    32,
    110,
    111,
    116,
    108,
    111,
    111,
    107,
    32,
    97,
    116,
    99,
    111,
    110,
    100,
    117,
    99,
    116,
    103,
    101,
    116,
    32,
    116,
    104,
    101,
    74,
    97,
    110,
    117,
    97,
    114,
    121,
    104,
    97,
    112,
    112,
    101,
    110,
    115,
    116,
    117,
    114,
    110,
    105,
    110,
    103,
    97,
    58,
    104,
    111,
    118,
    101,
    114,
    79,
    110,
    108,
    105,
    110,
    101,
    32,
    70,
    114,
    101,
    110,
    99,
    104,
    32,
    108,
    97,
    99,
    107,
    105,
    110,
    103,
    116,
    121,
    112,
    105,
    99,
    97,
    108,
    101,
    120,
    116,
    114,
    97,
    99,
    116,
    101,
    110,
    101,
    109,
    105,
    101,
    115,
    101,
    118,
    101,
    110,
    32,
    105,
    102,
    103,
    101,
    110,
    101,
    114,
    97,
    116,
    100,
    101,
    99,
    105,
    100,
    101,
    100,
    97,
    114,
    101,
    32,
    110,
    111,
    116,
    47,
    115,
    101,
    97,
    114,
    99,
    104,
    98,
    101,
    108,
    105,
    101,
    102,
    115,
    45,
    105,
    109,
    97,
    103,
    101,
    58,
    108,
    111,
    99,
    97,
    116,
    101,
    100,
    115,
    116,
    97,
    116,
    105,
    99,
    46,
    108,
    111,
    103,
    105,
    110,
    34,
    62,
    99,
    111,
    110,
    118,
    101,
    114,
    116,
    118,
    105,
    111,
    108,
    101,
    110,
    116,
    101,
    110,
    116,
    101,
    114,
    101,
    100,
    102,
    105,
    114,
    115,
    116,
    34,
    62,
    99,
    105,
    114,
    99,
    117,
    105,
    116,
    70,
    105,
    110,
    108,
    97,
    110,
    100,
    99,
    104,
    101,
    109,
    105,
    115,
    116,
    115,
    104,
    101,
    32,
    119,
    97,
    115,
    49,
    48,
    112,
    120,
    59,
    34,
    62,
    97,
    115,
    32,
    115,
    117,
    99,
    104,
    100,
    105,
    118,
    105,
    100,
    101,
    100,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    119,
    105,
    108,
    108,
    32,
    98,
    101,
    108,
    105,
    110,
    101,
    32,
    111,
    102,
    97,
    32,
    103,
    114,
    101,
    97,
    116,
    109,
    121,
    115,
    116,
    101,
    114,
    121,
    47,
    105,
    110,
    100,
    101,
    120,
    46,
    102,
    97,
    108,
    108,
    105,
    110,
    103,
    100,
    117,
    101,
    32,
    116,
    111,
    32,
    114,
    97,
    105,
    108,
    119,
    97,
    121,
    99,
    111,
    108,
    108,
    101,
    103,
    101,
    109,
    111,
    110,
    115,
    116,
    101,
    114,
    100,
    101,
    115,
    99,
    101,
    110,
    116,
    105,
    116,
    32,
    119,
    105,
    116,
    104,
    110,
    117,
    99,
    108,
    101,
    97,
    114,
    74,
    101,
    119,
    105,
    115,
    104,
    32,
    112,
    114,
    111,
    116,
    101,
    115,
    116,
    66,
    114,
    105,
    116,
    105,
    115,
    104,
    102,
    108,
    111,
    119,
    101,
    114,
    115,
    112,
    114,
    101,
    100,
    105,
    99,
    116,
    114,
    101,
    102,
    111,
    114,
    109,
    115,
    98,
    117,
    116,
    116,
    111,
    110,
    32,
    119,
    104,
    111,
    32,
    119,
    97,
    115,
    108,
    101,
    99,
    116,
    117,
    114,
    101,
    105,
    110,
    115,
    116,
    97,
    110,
    116,
    115,
    117,
    105,
    99,
    105,
    100,
    101,
    103,
    101,
    110,
    101,
    114,
    105,
    99,
    112,
    101,
    114,
    105,
    111,
    100,
    115,
    109,
    97,
    114,
    107,
    101,
    116,
    115,
    83,
    111,
    99,
    105,
    97,
    108,
    32,
    102,
    105,
    115,
    104,
    105,
    110,
    103,
    99,
    111,
    109,
    98,
    105,
    110,
    101,
    103,
    114,
    97,
    112,
    104,
    105,
    99,
    119,
    105,
    110,
    110,
    101,
    114,
    115,
    60,
    98,
    114,
    32,
    47,
    62,
    60,
    98,
    121,
    32,
    116,
    104,
    101,
    32,
    78,
    97,
    116,
    117,
    114,
    97,
    108,
    80,
    114,
    105,
    118,
    97,
    99,
    121,
    99,
    111,
    111,
    107,
    105,
    101,
    115,
    111,
    117,
    116,
    99,
    111,
    109,
    101,
    114,
    101,
    115,
    111,
    108,
    118,
    101,
    83,
    119,
    101,
    100,
    105,
    115,
    104,
    98,
    114,
    105,
    101,
    102,
    108,
    121,
    80,
    101,
    114,
    115,
    105,
    97,
    110,
    115,
    111,
    32,
    109,
    117,
    99,
    104,
    67,
    101,
    110,
    116,
    117,
    114,
    121,
    100,
    101,
    112,
    105,
    99,
    116,
    115,
    99,
    111,
    108,
    117,
    109,
    110,
    115,
    104,
    111,
    117,
    115,
    105,
    110,
    103,
    115,
    99,
    114,
    105,
    112,
    116,
    115,
    110,
    101,
    120,
    116,
    32,
    116,
    111,
    98,
    101,
    97,
    114,
    105,
    110,
    103,
    109,
    97,
    112,
    112,
    105,
    110,
    103,
    114,
    101,
    118,
    105,
    115,
    101,
    100,
    106,
    81,
    117,
    101,
    114,
    121,
    40,
    45,
    119,
    105,
    100,
    116,
    104,
    58,
    116,
    105,
    116,
    108,
    101,
    34,
    62,
    116,
    111,
    111,
    108,
    116,
    105,
    112,
    83,
    101,
    99,
    116,
    105,
    111,
    110,
    100,
    101,
    115,
    105,
    103,
    110,
    115,
    84,
    117,
    114,
    107,
    105,
    115,
    104,
    121,
    111,
    117,
    110,
    103,
    101,
    114,
    46,
    109,
    97,
    116,
    99,
    104,
    40,
    125,
    41,
    40,
    41,
    59,
    10,
    10,
    98,
    117,
    114,
    110,
    105,
    110,
    103,
    111,
    112,
    101,
    114,
    97,
    116,
    101,
    100,
    101,
    103,
    114,
    101,
    101,
    115,
    115,
    111,
    117,
    114,
    99,
    101,
    61,
    82,
    105,
    99,
    104,
    97,
    114,
    100,
    99,
    108,
    111,
    115,
    101,
    108,
    121,
    112,
    108,
    97,
    115,
    116,
    105,
    99,
    101,
    110,
    116,
    114,
    105,
    101,
    115,
    60,
    47,
    116,
    114,
    62,
    13,
    10,
    99,
    111,
    108,
    111,
    114,
    58,
    35,
    117,
    108,
    32,
    105,
    100,
    61,
    34,
    112,
    111,
    115,
    115,
    101,
    115,
    115,
    114,
    111,
    108,
    108,
    105,
    110,
    103,
    112,
    104,
    121,
    115,
    105,
    99,
    115,
    102,
    97,
    105,
    108,
    105,
    110,
    103,
    101,
    120,
    101,
    99,
    117,
    116,
    101,
    99,
    111,
    110,
    116,
    101,
    115,
    116,
    108,
    105,
    110,
    107,
    32,
    116,
    111,
    68,
    101,
    102,
    97,
    117,
    108,
    116,
    60,
    98,
    114,
    32,
    47,
    62,
    10,
    58,
    32,
    116,
    114,
    117,
    101,
    44,
    99,
    104,
    97,
    114,
    116,
    101,
    114,
    116,
    111,
    117,
    114,
    105,
    115,
    109,
    99,
    108,
    97,
    115,
    115,
    105,
    99,
    112,
    114,
    111,
    99,
    101,
    101,
    100,
    101,
    120,
    112,
    108,
    97,
    105,
    110,
    60,
    47,
    104,
    49,
    62,
    13,
    10,
    111,
    110,
    108,
    105,
    110,
    101,
    46,
    63,
    120,
    109,
    108,
    32,
    118,
    101,
    104,
    101,
    108,
    112,
    105,
    110,
    103,
    100,
    105,
    97,
    109,
    111,
    110,
    100,
    117,
    115,
    101,
    32,
    116,
    104,
    101,
    97,
    105,
    114,
    108,
    105,
    110,
    101,
    101,
    110,
    100,
    32,
    45,
    45,
    62,
    41,
    46,
    97,
    116,
    116,
    114,
    40,
    114,
    101,
    97,
    100,
    101,
    114,
    115,
    104,
    111,
    115,
    116,
    105,
    110,
    103,
    35,
    102,
    102,
    102,
    102,
    102,
    102,
    114,
    101,
    97,
    108,
    105,
    122,
    101,
    86,
    105,
    110,
    99,
    101,
    110,
    116,
    115,
    105,
    103,
    110,
    97,
    108,
    115,
    32,
    115,
    114,
    99,
    61,
    34,
    47,
    80,
    114,
    111,
    100,
    117,
    99,
    116,
    100,
    101,
    115,
    112,
    105,
    116,
    101,
    100,
    105,
    118,
    101,
    114,
    115,
    101,
    116,
    101,
    108,
    108,
    105,
    110,
    103,
    80,
    117,
    98,
    108,
    105,
    99,
    32,
    104,
    101,
    108,
    100,
    32,
    105,
    110,
    74,
    111,
    115,
    101,
    112,
    104,
    32,
    116,
    104,
    101,
    97,
    116,
    114,
    101,
    97,
    102,
    102,
    101,
    99,
    116,
    115,
    60,
    115,
    116,
    121,
    108,
    101,
    62,
    97,
    32,
    108,
    97,
    114,
    103,
    101,
    100,
    111,
    101,
    115,
    110,
    39,
    116,
    108,
    97,
    116,
    101,
    114,
    44,
    32,
    69,
    108,
    101,
    109,
    101,
    110,
    116,
    102,
    97,
    118,
    105,
    99,
    111,
    110,
    99,
    114,
    101,
    97,
    116,
    111,
    114,
    72,
    117,
    110,
    103,
    97,
    114,
    121,
    65,
    105,
    114,
    112,
    111,
    114,
    116,
    115,
    101,
    101,
    32,
    116,
    104,
    101,
    115,
    111,
    32,
    116,
    104,
    97,
    116,
    77,
    105,
    99,
    104,
    97,
    101,
    108,
    83,
    121,
    115,
    116,
    101,
    109,
    115,
    80,
    114,
    111,
    103,
    114,
    97,
    109,
    115,
    44,
    32,
    97,
    110,
    100,
    32,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    101,
    38,
    113,
    117,
    111,
    116,
    59,
    116,
    114,
    97,
    100,
    105,
    110,
    103,
    108,
    101,
    102,
    116,
    34,
    62,
    10,
    112,
    101,
    114,
    115,
    111,
    110,
    115,
    71,
    111,
    108,
    100,
    101,
    110,
    32,
    65,
    102,
    102,
    97,
    105,
    114,
    115,
    103,
    114,
    97,
    109,
    109,
    97,
    114,
    102,
    111,
    114,
    109,
    105,
    110,
    103,
    100,
    101,
    115,
    116,
    114,
    111,
    121,
    105,
    100,
    101,
    97,
    32,
    111,
    102,
    99,
    97,
    115,
    101,
    32,
    111,
    102,
    111,
    108,
    100,
    101,
    115,
    116,
    32,
    116,
    104,
    105,
    115,
    32,
    105,
    115,
    46,
    115,
    114,
    99,
    32,
    61,
    32,
    99,
    97,
    114,
    116,
    111,
    111,
    110,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    67,
    111,
    109,
    109,
    111,
    110,
    115,
    77,
    117,
    115,
    108,
    105,
    109,
    115,
    87,
    104,
    97,
    116,
    32,
    105,
    115,
    105,
    110,
    32,
    109,
    97,
    110,
    121,
    109,
    97,
    114,
    107,
    105,
    110,
    103,
    114,
    101,
    118,
    101,
    97,
    108,
    115,
    73,
    110,
    100,
    101,
    101,
    100,
    44,
    101,
    113,
    117,
    97,
    108,
    108,
    121,
    47,
    115,
    104,
    111,
    119,
    95,
    97,
    111,
    117,
    116,
    100,
    111,
    111,
    114,
    101,
    115,
    99,
    97,
    112,
    101,
    40,
    65,
    117,
    115,
    116,
    114,
    105,
    97,
    103,
    101,
    110,
    101,
    116,
    105,
    99,
    115,
    121,
    115,
    116,
    101,
    109,
    44,
    73,
    110,
    32,
    116,
    104,
    101,
    32,
    115,
    105,
    116,
    116,
    105,
    110,
    103,
    72,
    101,
    32,
    97,
    108,
    115,
    111,
    73,
    115,
    108,
    97,
    110,
    100,
    115,
    65,
    99,
    97,
    100,
    101,
    109,
    121,
    10,
    9,
    9,
    60,
    33,
    45,
    45,
    68,
    97,
    110,
    105,
    101,
    108,
    32,
    98,
    105,
    110,
    100,
    105,
    110,
    103,
    98,
    108,
    111,
    99,
    107,
    34,
    62,
    105,
    109,
    112,
    111,
    115,
    101,
    100,
    117,
    116,
    105,
    108,
    105,
    122,
    101,
    65,
    98,
    114,
    97,
    104,
    97,
    109,
    40,
    101,
    120,
    99,
    101,
    112,
    116,
    123,
    119,
    105,
    100,
    116,
    104,
    58,
    112,
    117,
    116,
    116,
    105,
    110,
    103,
    41,
    46,
    104,
    116,
    109,
    108,
    40,
    124,
    124,
    32,
    91,
    93,
    59,
    10,
    68,
    65,
    84,
    65,
    91,
    32,
    42,
    107,
    105,
    116,
    99,
    104,
    101,
    110,
    109,
    111,
    117,
    110,
    116,
    101,
    100,
    97,
    99,
    116,
    117,
    97,
    108,
    32,
    100,
    105,
    97,
    108,
    101,
    99,
    116,
    109,
    97,
    105,
    110,
    108,
    121,
    32,
    95,
    98,
    108,
    97,
    110,
    107,
    39,
    105,
    110,
    115,
    116,
    97,
    108,
    108,
    101,
    120,
    112,
    101,
    114,
    116,
    115,
    105,
    102,
    40,
    116,
    121,
    112,
    101,
    73,
    116,
    32,
    97,
    108,
    115,
    111,
    38,
    99,
    111,
    112,
    121,
    59,
    32,
    34,
    62,
    84,
    101,
    114,
    109,
    115,
    98,
    111,
    114,
    110,
    32,
    105,
    110,
    79,
    112,
    116,
    105,
    111,
    110,
    115,
    101,
    97,
    115,
    116,
    101,
    114,
    110,
    116,
    97,
    108,
    107,
    105,
    110,
    103,
    99,
    111,
    110,
    99,
    101,
    114,
    110,
    103,
    97,
    105,
    110,
    101,
    100,
    32,
    111,
    110,
    103,
    111,
    105,
    110,
    103,
    106,
    117,
    115,
    116,
    105,
    102,
    121,
    99,
    114,
    105,
    116,
    105,
    99,
    115,
    102,
    97,
    99,
    116,
    111,
    114,
    121,
    105,
    116,
    115,
    32,
    111,
    119,
    110,
    97,
    115,
    115,
    97,
    117,
    108,
    116,
    105,
    110,
    118,
    105,
    116,
    101,
    100,
    108,
    97,
    115,
    116,
    105,
    110,
    103,
    104,
    105,
    115,
    32,
    111,
    119,
    110,
    104,
    114,
    101,
    102,
    61,
    34,
    47,
    34,
    32,
    114,
    101,
    108,
    61,
    34,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    99,
    111,
    110,
    99,
    101,
    114,
    116,
    100,
    105,
    97,
    103,
    114,
    97,
    109,
    100,
    111,
    108,
    108,
    97,
    114,
    115,
    99,
    108,
    117,
    115,
    116,
    101,
    114,
    112,
    104,
    112,
    63,
    105,
    100,
    61,
    97,
    108,
    99,
    111,
    104,
    111,
    108,
    41,
    59,
    125,
    41,
    40,
    41,
    59,
    117,
    115,
    105,
    110,
    103,
    32,
    97,
    62,
    60,
    115,
    112,
    97,
    110,
    62,
    118,
    101,
    115,
    115,
    101,
    108,
    115,
    114,
    101,
    118,
    105,
    118,
    97,
    108,
    65,
    100,
    100,
    114,
    101,
    115,
    115,
    97,
    109,
    97,
    116,
    101,
    117,
    114,
    97,
    110,
    100,
    114,
    111,
    105,
    100,
    97,
    108,
    108,
    101,
    103,
    101,
    100,
    105,
    108,
    108,
    110,
    101,
    115,
    115,
    119,
    97,
    108,
    107,
    105,
    110,
    103,
    99,
    101,
    110,
    116,
    101,
    114,
    115,
    113,
    117,
    97,
    108,
    105,
    102,
    121,
    109,
    97,
    116,
    99,
    104,
    101,
    115,
    117,
    110,
    105,
    102,
    105,
    101,
    100,
    101,
    120,
    116,
    105,
    110,
    99,
    116,
    68,
    101,
    102,
    101,
    110,
    115,
    101,
    100,
    105,
    101,
    100,
    32,
    105,
    110,
    10,
    9,
    60,
    33,
    45,
    45,
    32,
    99,
    117,
    115,
    116,
    111,
    109,
    115,
    108,
    105,
    110,
    107,
    105,
    110,
    103,
    76,
    105,
    116,
    116,
    108,
    101,
    32,
    66,
    111,
    111,
    107,
    32,
    111,
    102,
    101,
    118,
    101,
    110,
    105,
    110,
    103,
    109,
    105,
    110,
    46,
    106,
    115,
    63,
    97,
    114,
    101,
    32,
    116,
    104,
    101,
    107,
    111,
    110,
    116,
    97,
    107,
    116,
    116,
    111,
    100,
    97,
    121,
    39,
    115,
    46,
    104,
    116,
    109,
    108,
    34,
    32,
    116,
    97,
    114,
    103,
    101,
    116,
    61,
    119,
    101,
    97,
    114,
    105,
    110,
    103,
    65,
    108,
    108,
    32,
    82,
    105,
    103,
    59,
    10,
    125,
    41,
    40,
    41,
    59,
    114,
    97,
    105,
    115,
    105,
    110,
    103,
    32,
    65,
    108,
    115,
    111,
    44,
    32,
    99,
    114,
    117,
    99,
    105,
    97,
    108,
    97,
    98,
    111,
    117,
    116,
    34,
    62,
    100,
    101,
    99,
    108,
    97,
    114,
    101,
    45,
    45,
    62,
    10,
    60,
    115,
    99,
    102,
    105,
    114,
    101,
    102,
    111,
    120,
    97,
    115,
    32,
    109,
    117,
    99,
    104,
    97,
    112,
    112,
    108,
    105,
    101,
    115,
    105,
    110,
    100,
    101,
    120,
    44,
    32,
    115,
    44,
    32,
    98,
    117,
    116,
    32,
    116,
    121,
    112,
    101,
    32,
    61,
    32,
    10,
    13,
    10,
    60,
    33,
    45,
    45,
    116,
    111,
    119,
    97,
    114,
    100,
    115,
    82,
    101,
    99,
    111,
    114,
    100,
    115,
    80,
    114,
    105,
    118,
    97,
    116,
    101,
    70,
    111,
    114,
    101,
    105,
    103,
    110,
    80,
    114,
    101,
    109,
    105,
    101,
    114,
    99,
    104,
    111,
    105,
    99,
    101,
    115,
    86,
    105,
    114,
    116,
    117,
    97,
    108,
    114,
    101,
    116,
    117,
    114,
    110,
    115,
    67,
    111,
    109,
    109,
    101,
    110,
    116,
    80,
    111,
    119,
    101,
    114,
    101,
    100,
    105,
    110,
    108,
    105,
    110,
    101,
    59,
    112,
    111,
    118,
    101,
    114,
    116,
    121,
    99,
    104,
    97,
    109,
    98,
    101,
    114,
    76,
    105,
    118,
    105,
    110,
    103,
    32,
    118,
    111,
    108,
    117,
    109,
    101,
    115,
    65,
    110,
    116,
    104,
    111,
    110,
    121,
    108,
    111,
    103,
    105,
    110,
    34,
    32,
    82,
    101,
    108,
    97,
    116,
    101,
    100,
    69,
    99,
    111,
    110,
    111,
    109,
    121,
    114,
    101,
    97,
    99,
    104,
    101,
    115,
    99,
    117,
    116,
    116,
    105,
    110,
    103,
    103,
    114,
    97,
    118,
    105,
    116,
    121,
    108,
    105,
    102,
    101,
    32,
    105,
    110,
    67,
    104,
    97,
    112,
    116,
    101,
    114,
    45,
    115,
    104,
    97,
    100,
    111,
    119,
    78,
    111,
    116,
    97,
    98,
    108,
    101,
    60,
    47,
    116,
    100,
    62,
    13,
    10,
    32,
    114,
    101,
    116,
    117,
    114,
    110,
    115,
    116,
    97,
    100,
    105,
    117,
    109,
    119,
    105,
    100,
    103,
    101,
    116,
    115,
    118,
    97,
    114,
    121,
    105,
    110,
    103,
    116,
    114,
    97,
    118,
    101,
    108,
    115,
    104,
    101,
    108,
    100,
    32,
    98,
    121,
    119,
    104,
    111,
    32,
    97,
    114,
    101,
    119,
    111,
    114,
    107,
    32,
    105,
    110,
    102,
    97,
    99,
    117,
    108,
    116,
    121,
    97,
    110,
    103,
    117,
    108,
    97,
    114,
    119,
    104,
    111,
    32,
    104,
    97,
    100,
    97,
    105,
    114,
    112,
    111,
    114,
    116,
    116,
    111,
    119,
    110,
    32,
    111,
    102,
    10,
    10,
    83,
    111,
    109,
    101,
    32,
    39,
    99,
    108,
    105,
    99,
    107,
    39,
    99,
    104,
    97,
    114,
    103,
    101,
    115,
    107,
    101,
    121,
    119,
    111,
    114,
    100,
    105,
    116,
    32,
    119,
    105,
    108,
    108,
    99,
    105,
    116,
    121,
    32,
    111,
    102,
    40,
    116,
    104,
    105,
    115,
    41,
    59,
    65,
    110,
    100,
    114,
    101,
    119,
    32,
    117,
    110,
    105,
    113,
    117,
    101,
    32,
    99,
    104,
    101,
    99,
    107,
    101,
    100,
    111,
    114,
    32,
    109,
    111,
    114,
    101,
    51,
    48,
    48,
    112,
    120,
    59,
    32,
    114,
    101,
    116,
    117,
    114,
    110,
    59,
    114,
    115,
    105,
    111,
    110,
    61,
    34,
    112,
    108,
    117,
    103,
    105,
    110,
    115,
    119,
    105,
    116,
    104,
    105,
    110,
    32,
    104,
    101,
    114,
    115,
    101,
    108,
    102,
    83,
    116,
    97,
    116,
    105,
    111,
    110,
    70,
    101,
    100,
    101,
    114,
    97,
    108,
    118,
    101,
    110,
    116,
    117,
    114,
    101,
    112,
    117,
    98,
    108,
    105,
    115,
    104,
    115,
    101,
    110,
    116,
    32,
    116,
    111,
    116,
    101,
    110,
    115,
    105,
    111,
    110,
    97,
    99,
    116,
    114,
    101,
    115,
    115,
    99,
    111,
    109,
    101,
    32,
    116,
    111,
    102,
    105,
    110,
    103,
    101,
    114,
    115,
    68,
    117,
    107,
    101,
    32,
    111,
    102,
    112,
    101,
    111,
    112,
    108,
    101,
    44,
    101,
    120,
    112,
    108,
    111,
    105,
    116,
    119,
    104,
    97,
    116,
    32,
    105,
    115,
    104,
    97,
    114,
    109,
    111,
    110,
    121,
    97,
    32,
    109,
    97,
    106,
    111,
    114,
    34,
    58,
    34,
    104,
    116,
    116,
    112,
    105,
    110,
    32,
    104,
    105,
    115,
    32,
    109,
    101,
    110,
    117,
    34,
    62,
    10,
    109,
    111,
    110,
    116,
    104,
    108,
    121,
    111,
    102,
    102,
    105,
    99,
    101,
    114,
    99,
    111,
    117,
    110,
    99,
    105,
    108,
    103,
    97,
    105,
    110,
    105,
    110,
    103,
    101,
    118,
    101,
    110,
    32,
    105,
    110,
    83,
    117,
    109,
    109,
    97,
    114,
    121,
    100,
    97,
    116,
    101,
    32,
    111,
    102,
    108,
    111,
    121,
    97,
    108,
    116,
    121,
    102,
    105,
    116,
    110,
    101,
    115,
    115,
    97,
    110,
    100,
    32,
    119,
    97,
    115,
    101,
    109,
    112,
    101,
    114,
    111,
    114,
    115,
    117,
    112,
    114,
    101,
    109,
    101,
    83,
    101,
    99,
    111,
    110,
    100,
    32,
    104,
    101,
    97,
    114,
    105,
    110,
    103,
    82,
    117,
    115,
    115,
    105,
    97,
    110,
    108,
    111,
    110,
    103,
    101,
    115,
    116,
    65,
    108,
    98,
    101,
    114,
    116,
    97,
    108,
    97,
    116,
    101,
    114,
    97,
    108,
    115,
    101,
    116,
    32,
    111,
    102,
    32,
    115,
    109,
    97,
    108,
    108,
    34,
    62,
    46,
    97,
    112,
    112,
    101,
    110,
    100,
    100,
    111,
    32,
    119,
    105,
    116,
    104,
    102,
    101,
    100,
    101,
    114,
    97,
    108,
    98,
    97,
    110,
    107,
    32,
    111,
    102,
    98,
    101,
    110,
    101,
    97,
    116,
    104,
    68,
    101,
    115,
    112,
    105,
    116,
    101,
    67,
    97,
    112,
    105,
    116,
    97,
    108,
    103,
    114,
    111,
    117,
    110,
    100,
    115,
    41,
    44,
    32,
    97,
    110,
    100,
    32,
    112,
    101,
    114,
    99,
    101,
    110,
    116,
    105,
    116,
    32,
    102,
    114,
    111,
    109,
    99,
    108,
    111,
    115,
    105,
    110,
    103,
    99,
    111,
    110,
    116,
    97,
    105,
    110,
    73,
    110,
    115,
    116,
    101,
    97,
    100,
    102,
    105,
    102,
    116,
    101,
    101,
    110,
    97,
    115,
    32,
    119,
    101,
    108,
    108,
    46,
    121,
    97,
    104,
    111,
    111,
    46,
    114,
    101,
    115,
    112,
    111,
    110,
    100,
    102,
    105,
    103,
    104,
    116,
    101,
    114,
    111,
    98,
    115,
    99,
    117,
    114,
    101,
    114,
    101,
    102,
    108,
    101,
    99,
    116,
    111,
    114,
    103,
    97,
    110,
    105,
    99,
    61,
    32,
    77,
    97,
    116,
    104,
    46,
    101,
    100,
    105,
    116,
    105,
    110,
    103,
    111,
    110,
    108,
    105,
    110,
    101,
    32,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    97,
    32,
    119,
    104,
    111,
    108,
    101,
    111,
    110,
    101,
    114,
    114,
    111,
    114,
    121,
    101,
    97,
    114,
    32,
    111,
    102,
    101,
    110,
    100,
    32,
    111,
    102,
    32,
    98,
    97,
    114,
    114,
    105,
    101,
    114,
    119,
    104,
    101,
    110,
    32,
    105,
    116,
    104,
    101,
    97,
    100,
    101,
    114,
    32,
    104,
    111,
    109,
    101,
    32,
    111,
    102,
    114,
    101,
    115,
    117,
    109,
    101,
    100,
    114,
    101,
    110,
    97,
    109,
    101,
    100,
    115,
    116,
    114,
    111,
    110,
    103,
    62,
    104,
    101,
    97,
    116,
    105,
    110,
    103,
    114,
    101,
    116,
    97,
    105,
    110,
    115,
    99,
    108,
    111,
    117,
    100,
    102,
    114,
    119,
    97,
    121,
    32,
    111,
    102,
    32,
    77,
    97,
    114,
    99,
    104,
    32,
    49,
    107,
    110,
    111,
    119,
    105,
    110,
    103,
    105,
    110,
    32,
    112,
    97,
    114,
    116,
    66,
    101,
    116,
    119,
    101,
    101,
    110,
    108,
    101,
    115,
    115,
    111,
    110,
    115,
    99,
    108,
    111,
    115,
    101,
    115,
    116,
    118,
    105,
    114,
    116,
    117,
    97,
    108,
    108,
    105,
    110,
    107,
    115,
    34,
    62,
    99,
    114,
    111,
    115,
    115,
    101,
    100,
    69,
    78,
    68,
    32,
    45,
    45,
    62,
    102,
    97,
    109,
    111,
    117,
    115,
    32,
    97,
    119,
    97,
    114,
    100,
    101,
    100,
    76,
    105,
    99,
    101,
    110,
    115,
    101,
    72,
    101,
    97,
    108,
    116,
    104,
    32,
    102,
    97,
    105,
    114,
    108,
    121,
    32,
    119,
    101,
    97,
    108,
    116,
    104,
    121,
    109,
    105,
    110,
    105,
    109,
    97,
    108,
    65,
    102,
    114,
    105,
    99,
    97,
    110,
    99,
    111,
    109,
    112,
    101,
    116,
    101,
    108,
    97,
    98,
    101,
    108,
    34,
    62,
    115,
    105,
    110,
    103,
    105,
    110,
    103,
    102,
    97,
    114,
    109,
    101,
    114,
    115,
    66,
    114,
    97,
    115,
    105,
    108,
    41,
    100,
    105,
    115,
    99,
    117,
    115,
    115,
    114,
    101,
    112,
    108,
    97,
    99,
    101,
    71,
    114,
    101,
    103,
    111,
    114,
    121,
    102,
    111,
    110,
    116,
    32,
    99,
    111,
    112,
    117,
    114,
    115,
    117,
    101,
    100,
    97,
    112,
    112,
    101,
    97,
    114,
    115,
    109,
    97,
    107,
    101,
    32,
    117,
    112,
    114,
    111,
    117,
    110,
    100,
    101,
    100,
    98,
    111,
    116,
    104,
    32,
    111,
    102,
    98,
    108,
    111,
    99,
    107,
    101,
    100,
    115,
    97,
    119,
    32,
    116,
    104,
    101,
    111,
    102,
    102,
    105,
    99,
    101,
    115,
    99,
    111,
    108,
    111,
    117,
    114,
    115,
    105,
    102,
    40,
    100,
    111,
    99,
    117,
    119,
    104,
    101,
    110,
    32,
    104,
    101,
    101,
    110,
    102,
    111,
    114,
    99,
    101,
    112,
    117,
    115,
    104,
    40,
    102,
    117,
    65,
    117,
    103,
    117,
    115,
    116,
    32,
    85,
    84,
    70,
    45,
    56,
    34,
    62,
    70,
    97,
    110,
    116,
    97,
    115,
    121,
    105,
    110,
    32,
    109,
    111,
    115,
    116,
    105,
    110,
    106,
    117,
    114,
    101,
    100,
    85,
    115,
    117,
    97,
    108,
    108,
    121,
    102,
    97,
    114,
    109,
    105,
    110,
    103,
    99,
    108,
    111,
    115,
    117,
    114,
    101,
    111,
    98,
    106,
    101,
    99,
    116,
    32,
    100,
    101,
    102,
    101,
    110,
    99,
    101,
    117,
    115,
    101,
    32,
    111,
    102,
    32,
    77,
    101,
    100,
    105,
    99,
    97,
    108,
    60,
    98,
    111,
    100,
    121,
    62,
    10,
    101,
    118,
    105,
    100,
    101,
    110,
    116,
    98,
    101,
    32,
    117,
    115,
    101,
    100,
    107,
    101,
    121,
    67,
    111,
    100,
    101,
    115,
    105,
    120,
    116,
    101,
    101,
    110,
    73,
    115,
    108,
    97,
    109,
    105,
    99,
    35,
    48,
    48,
    48,
    48,
    48,
    48,
    101,
    110,
    116,
    105,
    114,
    101,
    32,
    119,
    105,
    100,
    101,
    108,
    121,
    32,
    97,
    99,
    116,
    105,
    118,
    101,
    32,
    40,
    116,
    121,
    112,
    101,
    111,
    102,
    111,
    110,
    101,
    32,
    99,
    97,
    110,
    99,
    111,
    108,
    111,
    114,
    32,
    61,
    115,
    112,
    101,
    97,
    107,
    101,
    114,
    101,
    120,
    116,
    101,
    110,
    100,
    115,
    80,
    104,
    121,
    115,
    105,
    99,
    115,
    116,
    101,
    114,
    114,
    97,
    105,
    110,
    60,
    116,
    98,
    111,
    100,
    121,
    62,
    102,
    117,
    110,
    101,
    114,
    97,
    108,
    118,
    105,
    101,
    119,
    105,
    110,
    103,
    109,
    105,
    100,
    100,
    108,
    101,
    32,
    99,
    114,
    105,
    99,
    107,
    101,
    116,
    112,
    114,
    111,
    112,
    104,
    101,
    116,
    115,
    104,
    105,
    102,
    116,
    101,
    100,
    100,
    111,
    99,
    116,
    111,
    114,
    115,
    82,
    117,
    115,
    115,
    101,
    108,
    108,
    32,
    116,
    97,
    114,
    103,
    101,
    116,
    99,
    111,
    109,
    112,
    97,
    99,
    116,
    97,
    108,
    103,
    101,
    98,
    114,
    97,
    115,
    111,
    99,
    105,
    97,
    108,
    45,
    98,
    117,
    108,
    107,
    32,
    111,
    102,
    109,
    97,
    110,
    32,
    97,
    110,
    100,
    60,
    47,
    116,
    100,
    62,
    10,
    32,
    104,
    101,
    32,
    108,
    101,
    102,
    116,
    41,
    46,
    118,
    97,
    108,
    40,
    41,
    102,
    97,
    108,
    115,
    101,
    41,
    59,
    108,
    111,
    103,
    105,
    99,
    97,
    108,
    98,
    97,
    110,
    107,
    105,
    110,
    103,
    104,
    111,
    109,
    101,
    32,
    116,
    111,
    110,
    97,
    109,
    105,
    110,
    103,
    32,
    65,
    114,
    105,
    122,
    111,
    110,
    97,
    99,
    114,
    101,
    100,
    105,
    116,
    115,
    41,
    59,
    10,
    125,
    41,
    59,
    10,
    102,
    111,
    117,
    110,
    100,
    101,
    114,
    105,
    110,
    32,
    116,
    117,
    114,
    110,
    67,
    111,
    108,
    108,
    105,
    110,
    115,
    98,
    101,
    102,
    111,
    114,
    101,
    32,
    66,
    117,
    116,
    32,
    116,
    104,
    101,
    99,
    104,
    97,
    114,
    103,
    101,
    100,
    84,
    105,
    116,
    108,
    101,
    34,
    62,
    67,
    97,
    112,
    116,
    97,
    105,
    110,
    115,
    112,
    101,
    108,
    108,
    101,
    100,
    103,
    111,
    100,
    100,
    101,
    115,
    115,
    84,
    97,
    103,
    32,
    45,
    45,
    62,
    65,
    100,
    100,
    105,
    110,
    103,
    58,
    98,
    117,
    116,
    32,
    119,
    97,
    115,
    82,
    101,
    99,
    101,
    110,
    116,
    32,
    112,
    97,
    116,
    105,
    101,
    110,
    116,
    98,
    97,
    99,
    107,
    32,
    105,
    110,
    61,
    102,
    97,
    108,
    115,
    101,
    38,
    76,
    105,
    110,
    99,
    111,
    108,
    110,
    119,
    101,
    32,
    107,
    110,
    111,
    119,
    67,
    111,
    117,
    110,
    116,
    101,
    114,
    74,
    117,
    100,
    97,
    105,
    115,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    97,
    108,
    116,
    101,
    114,
    101,
    100,
    39,
    93,
    41,
    59,
    10,
    32,
    32,
    104,
    97,
    115,
    32,
    116,
    104,
    101,
    117,
    110,
    99,
    108,
    101,
    97,
    114,
    69,
    118,
    101,
    110,
    116,
    39,
    44,
    98,
    111,
    116,
    104,
    32,
    105,
    110,
    110,
    111,
    116,
    32,
    97,
    108,
    108,
    10,
    10,
    60,
    33,
    45,
    45,
    32,
    112,
    108,
    97,
    99,
    105,
    110,
    103,
    104,
    97,
    114,
    100,
    32,
    116,
    111,
    32,
    99,
    101,
    110,
    116,
    101,
    114,
    115,
    111,
    114,
    116,
    32,
    111,
    102,
    99,
    108,
    105,
    101,
    110,
    116,
    115,
    115,
    116,
    114,
    101,
    101,
    116,
    115,
    66,
    101,
    114,
    110,
    97,
    114,
    100,
    97,
    115,
    115,
    101,
    114,
    116,
    115,
    116,
    101,
    110,
    100,
    32,
    116,
    111,
    102,
    97,
    110,
    116,
    97,
    115,
    121,
    100,
    111,
    119,
    110,
    32,
    105,
    110,
    104,
    97,
    114,
    98,
    111,
    117,
    114,
    70,
    114,
    101,
    101,
    100,
    111,
    109,
    106,
    101,
    119,
    101,
    108,
    114,
    121,
    47,
    97,
    98,
    111,
    117,
    116,
    46,
    46,
    115,
    101,
    97,
    114,
    99,
    104,
    108,
    101,
    103,
    101,
    110,
    100,
    115,
    105,
    115,
    32,
    109,
    97,
    100,
    101,
    109,
    111,
    100,
    101,
    114,
    110,
    32,
    111,
    110,
    108,
    121,
    32,
    111,
    110,
    111,
    110,
    108,
    121,
    32,
    116,
    111,
    105,
    109,
    97,
    103,
    101,
    34,
    32,
    108,
    105,
    110,
    101,
    97,
    114,
    32,
    112,
    97,
    105,
    110,
    116,
    101,
    114,
    97,
    110,
    100,
    32,
    110,
    111,
    116,
    114,
    97,
    114,
    101,
    108,
    121,
    32,
    97,
    99,
    114,
    111,
    110,
    121,
    109,
    100,
    101,
    108,
    105,
    118,
    101,
    114,
    115,
    104,
    111,
    114,
    116,
    101,
    114,
    48,
    48,
    38,
    97,
    109,
    112,
    59,
    97,
    115,
    32,
    109,
    97,
    110,
    121,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    47,
    42,
    32,
    60,
    33,
    91,
    67,
    116,
    105,
    116,
    108,
    101,
    32,
    61,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    108,
    111,
    119,
    101,
    115,
    116,
    32,
    112,
    105,
    99,
    107,
    101,
    100,
    32,
    101,
    115,
    99,
    97,
    112,
    101,
    100,
    117,
    115,
    101,
    115,
    32,
    111,
    102,
    112,
    101,
    111,
    112,
    108,
    101,
    115,
    32,
    80,
    117,
    98,
    108,
    105,
    99,
    77,
    97,
    116,
    116,
    104,
    101,
    119,
    116,
    97,
    99,
    116,
    105,
    99,
    115,
    100,
    97,
    109,
    97,
    103,
    101,
    100,
    119,
    97,
    121,
    32,
    102,
    111,
    114,
    108,
    97,
    119,
    115,
    32,
    111,
    102,
    101,
    97,
    115,
    121,
    32,
    116,
    111,
    32,
    119,
    105,
    110,
    100,
    111,
    119,
    115,
    116,
    114,
    111,
    110,
    103,
    32,
    32,
    115,
    105,
    109,
    112,
    108,
    101,
    125,
    99,
    97,
    116,
    99,
    104,
    40,
    115,
    101,
    118,
    101,
    110,
    116,
    104,
    105,
    110,
    102,
    111,
    98,
    111,
    120,
    119,
    101,
    110,
    116,
    32,
    116,
    111,
    112,
    97,
    105,
    110,
    116,
    101,
    100,
    99,
    105,
    116,
    105,
    122,
    101,
    110,
    73,
    32,
    100,
    111,
    110,
    39,
    116,
    114,
    101,
    116,
    114,
    101,
    97,
    116,
    46,
    32,
    83,
    111,
    109,
    101,
    32,
    119,
    119,
    46,
    34,
    41,
    59,
    10,
    98,
    111,
    109,
    98,
    105,
    110,
    103,
    109,
    97,
    105,
    108,
    116,
    111,
    58,
    109,
    97,
    100,
    101,
    32,
    105,
    110,
    46,
    32,
    77,
    97,
    110,
    121,
    32,
    99,
    97,
    114,
    114,
    105,
    101,
    115,
    124,
    124,
    123,
    125,
    59,
    119,
    105,
    119,
    111,
    114,
    107,
    32,
    111,
    102,
    115,
    121,
    110,
    111,
    110,
    121,
    109,
    100,
    101,
    102,
    101,
    97,
    116,
    115,
    102,
    97,
    118,
    111,
    114,
    101,
    100,
    111,
    112,
    116,
    105,
    99,
    97,
    108,
    112,
    97,
    103,
    101,
    84,
    114,
    97,
    117,
    110,
    108,
    101,
    115,
    115,
    32,
    115,
    101,
    110,
    100,
    105,
    110,
    103,
    108,
    101,
    102,
    116,
    34,
    62,
    60,
    99,
    111,
    109,
    83,
    99,
    111,
    114,
    65,
    108,
    108,
    32,
    116,
    104,
    101,
    106,
    81,
    117,
    101,
    114,
    121,
    46,
    116,
    111,
    117,
    114,
    105,
    115,
    116,
    67,
    108,
    97,
    115,
    115,
    105,
    99,
    102,
    97,
    108,
    115,
    101,
    34,
    32,
    87,
    105,
    108,
    104,
    101,
    108,
    109,
    115,
    117,
    98,
    117,
    114,
    98,
    115,
    103,
    101,
    110,
    117,
    105,
    110,
    101,
    98,
    105,
    115,
    104,
    111,
    112,
    115,
    46,
    115,
    112,
    108,
    105,
    116,
    40,
    103,
    108,
    111,
    98,
    97,
    108,
    32,
    102,
    111,
    108,
    108,
    111,
    119,
    115,
    98,
    111,
    100,
    121,
    32,
    111,
    102,
    110,
    111,
    109,
    105,
    110,
    97,
    108,
    67,
    111,
    110,
    116,
    97,
    99,
    116,
    115,
    101,
    99,
    117,
    108,
    97,
    114,
    108,
    101,
    102,
    116,
    32,
    116,
    111,
    99,
    104,
    105,
    101,
    102,
    108,
    121,
    45,
    104,
    105,
    100,
    100,
    101,
    110,
    45,
    98,
    97,
    110,
    110,
    101,
    114,
    60,
    47,
    108,
    105,
    62,
    10,
    10,
    46,
    32,
    87,
    104,
    101,
    110,
    32,
    105,
    110,
    32,
    98,
    111,
    116,
    104,
    100,
    105,
    115,
    109,
    105,
    115,
    115,
    69,
    120,
    112,
    108,
    111,
    114,
    101,
    97,
    108,
    119,
    97,
    121,
    115,
    32,
    118,
    105,
    97,
    32,
    116,
    104,
    101,
    115,
    112,
    97,
    195,
    177,
    111,
    108,
    119,
    101,
    108,
    102,
    97,
    114,
    101,
    114,
    117,
    108,
    105,
    110,
    103,
    32,
    97,
    114,
    114,
    97,
    110,
    103,
    101,
    99,
    97,
    112,
    116,
    97,
    105,
    110,
    104,
    105,
    115,
    32,
    115,
    111,
    110,
    114,
    117,
    108,
    101,
    32,
    111,
    102,
    104,
    101,
    32,
    116,
    111,
    111,
    107,
    105,
    116,
    115,
    101,
    108,
    102,
    44,
    61,
    48,
    38,
    97,
    109,
    112,
    59,
    40,
    99,
    97,
    108,
    108,
    101,
    100,
    115,
    97,
    109,
    112,
    108,
    101,
    115,
    116,
    111,
    32,
    109,
    97,
    107,
    101,
    99,
    111,
    109,
    47,
    112,
    97,
    103,
    77,
    97,
    114,
    116,
    105,
    110,
    32,
    75,
    101,
    110,
    110,
    101,
    100,
    121,
    97,
    99,
    99,
    101,
    112,
    116,
    115,
    102,
    117,
    108,
    108,
    32,
    111,
    102,
    104,
    97,
    110,
    100,
    108,
    101,
    100,
    66,
    101,
    115,
    105,
    100,
    101,
    115,
    47,
    47,
    45,
    45,
    62,
    60,
    47,
    97,
    98,
    108,
    101,
    32,
    116,
    111,
    116,
    97,
    114,
    103,
    101,
    116,
    115,
    101,
    115,
    115,
    101,
    110,
    99,
    101,
    104,
    105,
    109,
    32,
    116,
    111,
    32,
    105,
    116,
    115,
    32,
    98,
    121,
    32,
    99,
    111,
    109,
    109,
    111,
    110,
    46,
    109,
    105,
    110,
    101,
    114,
    97,
    108,
    116,
    111,
    32,
    116,
    97,
    107,
    101,
    119,
    97,
    121,
    115,
    32,
    116,
    111,
    115,
    46,
    111,
    114,
    103,
    47,
    108,
    97,
    100,
    118,
    105,
    115,
    101,
    100,
    112,
    101,
    110,
    97,
    108,
    116,
    121,
    115,
    105,
    109,
    112,
    108,
    101,
    58,
    105,
    102,
    32,
    116,
    104,
    101,
    121,
    76,
    101,
    116,
    116,
    101,
    114,
    115,
    97,
    32,
    115,
    104,
    111,
    114,
    116,
    72,
    101,
    114,
    98,
    101,
    114,
    116,
    115,
    116,
    114,
    105,
    107,
    101,
    115,
    32,
    103,
    114,
    111,
    117,
    112,
    115,
    46,
    108,
    101,
    110,
    103,
    116,
    104,
    102,
    108,
    105,
    103,
    104,
    116,
    115,
    111,
    118,
    101,
    114,
    108,
    97,
    112,
    115,
    108,
    111,
    119,
    108,
    121,
    32,
    108,
    101,
    115,
    115,
    101,
    114,
    32,
    115,
    111,
    99,
    105,
    97,
    108,
    32,
    60,
    47,
    112,
    62,
    10,
    9,
    9,
    105,
    116,
    32,
    105,
    110,
    116,
    111,
    114,
    97,
    110,
    107,
    101,
    100,
    32,
    114,
    97,
    116,
    101,
    32,
    111,
    102,
    117,
    108,
    62,
    13,
    10,
    32,
    32,
    97,
    116,
    116,
    101,
    109,
    112,
    116,
    112,
    97,
    105,
    114,
    32,
    111,
    102,
    109,
    97,
    107,
    101,
    32,
    105,
    116,
    75,
    111,
    110,
    116,
    97,
    107,
    116,
    65,
    110,
    116,
    111,
    110,
    105,
    111,
    104,
    97,
    118,
    105,
    110,
    103,
    32,
    114,
    97,
    116,
    105,
    110,
    103,
    115,
    32,
    97,
    99,
    116,
    105,
    118,
    101,
    115,
    116,
    114,
    101,
    97,
    109,
    115,
    116,
    114,
    97,
    112,
    112,
    101,
    100,
    34,
    41,
    46,
    99,
    115,
    115,
    40,
    104,
    111,
    115,
    116,
    105,
    108,
    101,
    108,
    101,
    97,
    100,
    32,
    116,
    111,
    108,
    105,
    116,
    116,
    108,
    101,
    32,
    103,
    114,
    111,
    117,
    112,
    115,
    44,
    80,
    105,
    99,
    116,
    117,
    114,
    101,
    45,
    45,
    62,
    13,
    10,
    13,
    10,
    32,
    114,
    111,
    119,
    115,
    61,
    34,
    32,
    111,
    98,
    106,
    101,
    99,
    116,
    105,
    110,
    118,
    101,
    114,
    115,
    101,
    60,
    102,
    111,
    111,
    116,
    101,
    114,
    67,
    117,
    115,
    116,
    111,
    109,
    86,
    62,
    60,
    92,
    47,
    115,
    99,
    114,
    115,
    111,
    108,
    118,
    105,
    110,
    103,
    67,
    104,
    97,
    109,
    98,
    101,
    114,
    115,
    108,
    97,
    118,
    101,
    114,
    121,
    119,
    111,
    117,
    110,
    100,
    101,
    100,
    119,
    104,
    101,
    114,
    101,
    97,
    115,
    33,
    61,
    32,
    39,
    117,
    110,
    100,
    102,
    111,
    114,
    32,
    97,
    108,
    108,
    112,
    97,
    114,
    116,
    108,
    121,
    32,
    45,
    114,
    105,
    103,
    104,
    116,
    58,
    65,
    114,
    97,
    98,
    105,
    97,
    110,
    98,
    97,
    99,
    107,
    101,
    100,
    32,
    99,
    101,
    110,
    116,
    117,
    114,
    121,
    117,
    110,
    105,
    116,
    32,
    111,
    102,
    109,
    111,
    98,
    105,
    108,
    101,
    45,
    69,
    117,
    114,
    111,
    112,
    101,
    44,
    105,
    115,
    32,
    104,
    111,
    109,
    101,
    114,
    105,
    115,
    107,
    32,
    111,
    102,
    100,
    101,
    115,
    105,
    114,
    101,
    100,
    67,
    108,
    105,
    110,
    116,
    111,
    110,
    99,
    111,
    115,
    116,
    32,
    111,
    102,
    97,
    103,
    101,
    32,
    111,
    102,
    32,
    98,
    101,
    99,
    111,
    109,
    101,
    32,
    110,
    111,
    110,
    101,
    32,
    111,
    102,
    112,
    38,
    113,
    117,
    111,
    116,
    59,
    77,
    105,
    100,
    100,
    108,
    101,
    32,
    101,
    97,
    100,
    39,
    41,
    91,
    48,
    67,
    114,
    105,
    116,
    105,
    99,
    115,
    115,
    116,
    117,
    100,
    105,
    111,
    115,
    62,
    38,
    99,
    111,
    112,
    121,
    59,
    103,
    114,
    111,
    117,
    112,
    34,
    62,
    97,
    115,
    115,
    101,
    109,
    98,
    108,
    109,
    97,
    107,
    105,
    110,
    103,
    32,
    112,
    114,
    101,
    115,
    115,
    101,
    100,
    119,
    105,
    100,
    103,
    101,
    116,
    46,
    112,
    115,
    58,
    34,
    32,
    63,
    32,
    114,
    101,
    98,
    117,
    105,
    108,
    116,
    98,
    121,
    32,
    115,
    111,
    109,
    101,
    70,
    111,
    114,
    109,
    101,
    114,
    32,
    101,
    100,
    105,
    116,
    111,
    114,
    115,
    100,
    101,
    108,
    97,
    121,
    101,
    100,
    67,
    97,
    110,
    111,
    110,
    105,
    99,
    104,
    97,
    100,
    32,
    116,
    104,
    101,
    112,
    117,
    115,
    104,
    105,
    110,
    103,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    98,
    117,
    116,
    32,
    97,
    114,
    101,
    112,
    97,
    114,
    116,
    105,
    97,
    108,
    66,
    97,
    98,
    121,
    108,
    111,
    110,
    98,
    111,
    116,
    116,
    111,
    109,
    32,
    99,
    97,
    114,
    114,
    105,
    101,
    114,
    67,
    111,
    109,
    109,
    97,
    110,
    100,
    105,
    116,
    115,
    32,
    117,
    115,
    101,
    65,
    115,
    32,
    119,
    105,
    116,
    104,
    99,
    111,
    117,
    114,
    115,
    101,
    115,
    97,
    32,
    116,
    104,
    105,
    114,
    100,
    100,
    101,
    110,
    111,
    116,
    101,
    115,
    97,
    108,
    115,
    111,
    32,
    105,
    110,
    72,
    111,
    117,
    115,
    116,
    111,
    110,
    50,
    48,
    112,
    120,
    59,
    34,
    62,
    97,
    99,
    99,
    117,
    115,
    101,
    100,
    100,
    111,
    117,
    98,
    108,
    101,
    32,
    103,
    111,
    97,
    108,
    32,
    111,
    102,
    70,
    97,
    109,
    111,
    117,
    115,
    32,
    41,
    46,
    98,
    105,
    110,
    100,
    40,
    112,
    114,
    105,
    101,
    115,
    116,
    115,
    32,
    79,
    110,
    108,
    105,
    110,
    101,
    105,
    110,
    32,
    74,
    117,
    108,
    121,
    115,
    116,
    32,
    43,
    32,
    34,
    103,
    99,
    111,
    110,
    115,
    117,
    108,
    116,
    100,
    101,
    99,
    105,
    109,
    97,
    108,
    104,
    101,
    108,
    112,
    102,
    117,
    108,
    114,
    101,
    118,
    105,
    118,
    101,
    100,
    105,
    115,
    32,
    118,
    101,
    114,
    121,
    114,
    39,
    43,
    39,
    105,
    112,
    116,
    108,
    111,
    115,
    105,
    110,
    103,
    32,
    102,
    101,
    109,
    97,
    108,
    101,
    115,
    105,
    115,
    32,
    97,
    108,
    115,
    111,
    115,
    116,
    114,
    105,
    110,
    103,
    115,
    100,
    97,
    121,
    115,
    32,
    111,
    102,
    97,
    114,
    114,
    105,
    118,
    97,
    108,
    102,
    117,
    116,
    117,
    114,
    101,
    32,
    60,
    111,
    98,
    106,
    101,
    99,
    116,
    102,
    111,
    114,
    99,
    105,
    110,
    103,
    83,
    116,
    114,
    105,
    110,
    103,
    40,
    34,
    32,
    47,
    62,
    10,
    9,
    9,
    104,
    101,
    114,
    101,
    32,
    105,
    115,
    101,
    110,
    99,
    111,
    100,
    101,
    100,
    46,
    32,
    32,
    84,
    104,
    101,
    32,
    98,
    97,
    108,
    108,
    111,
    111,
    110,
    100,
    111,
    110,
    101,
    32,
    98,
    121,
    47,
    99,
    111,
    109,
    109,
    111,
    110,
    98,
    103,
    99,
    111,
    108,
    111,
    114,
    108,
    97,
    119,
    32,
    111,
    102,
    32,
    73,
    110,
    100,
    105,
    97,
    110,
    97,
    97,
    118,
    111,
    105,
    100,
    101,
    100,
    98,
    117,
    116,
    32,
    116,
    104,
    101,
    50,
    112,
    120,
    32,
    51,
    112,
    120,
    106,
    113,
    117,
    101,
    114,
    121,
    46,
    97,
    102,
    116,
    101,
    114,
    32,
    97,
    112,
    111,
    108,
    105,
    99,
    121,
    46,
    109,
    101,
    110,
    32,
    97,
    110,
    100,
    102,
    111,
    111,
    116,
    101,
    114,
    45,
    61,
    32,
    116,
    114,
    117,
    101,
    59,
    102,
    111,
    114,
    32,
    117,
    115,
    101,
    115,
    99,
    114,
    101,
    101,
    110,
    46,
    73,
    110,
    100,
    105,
    97,
    110,
    32,
    105,
    109,
    97,
    103,
    101,
    32,
    61,
    102,
    97,
    109,
    105,
    108,
    121,
    44,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    32,
    38,
    110,
    98,
    115,
    112,
    59,
    100,
    114,
    105,
    118,
    101,
    114,
    115,
    101,
    116,
    101,
    114,
    110,
    97,
    108,
    115,
    97,
    109,
    101,
    32,
    97,
    115,
    110,
    111,
    116,
    105,
    99,
    101,
    100,
    118,
    105,
    101,
    119,
    101,
    114,
    115,
    125,
    41,
    40,
    41,
    59,
    10,
    32,
    105,
    115,
    32,
    109,
    111,
    114,
    101,
    115,
    101,
    97,
    115,
    111,
    110,
    115,
    102,
    111,
    114,
    109,
    101,
    114,
    32,
    116,
    104,
    101,
    32,
    110,
    101,
    119,
    105,
    115,
    32,
    106,
    117,
    115,
    116,
    99,
    111,
    110,
    115,
    101,
    110,
    116,
    32,
    83,
    101,
    97,
    114,
    99,
    104,
    119,
    97,
    115,
    32,
    116,
    104,
    101,
    119,
    104,
    121,
    32,
    116,
    104,
    101,
    115,
    104,
    105,
    112,
    112,
    101,
    100,
    98,
    114,
    62,
    60,
    98,
    114,
    62,
    119,
    105,
    100,
    116,
    104,
    58,
    32,
    104,
    101,
    105,
    103,
    104,
    116,
    61,
    109,
    97,
    100,
    101,
    32,
    111,
    102,
    99,
    117,
    105,
    115,
    105,
    110,
    101,
    105,
    115,
    32,
    116,
    104,
    97,
    116,
    97,
    32,
    118,
    101,
    114,
    121,
    32,
    65,
    100,
    109,
    105,
    114,
    97,
    108,
    32,
    102,
    105,
    120,
    101,
    100,
    59,
    110,
    111,
    114,
    109,
    97,
    108,
    32,
    77,
    105,
    115,
    115,
    105,
    111,
    110,
    80,
    114,
    101,
    115,
    115,
    44,
    32,
    111,
    110,
    116,
    97,
    114,
    105,
    111,
    99,
    104,
    97,
    114,
    115,
    101,
    116,
    116,
    114,
    121,
    32,
    116,
    111,
    32,
    105,
    110,
    118,
    97,
    100,
    101,
    100,
    61,
    34,
    116,
    114,
    117,
    101,
    34,
    115,
    112,
    97,
    99,
    105,
    110,
    103,
    105,
    115,
    32,
    109,
    111,
    115,
    116,
    97,
    32,
    109,
    111,
    114,
    101,
    32,
    116,
    111,
    116,
    97,
    108,
    108,
    121,
    102,
    97,
    108,
    108,
    32,
    111,
    102,
    125,
    41,
    59,
    13,
    10,
    32,
    32,
    105,
    109,
    109,
    101,
    110,
    115,
    101,
    116,
    105,
    109,
    101,
    32,
    105,
    110,
    115,
    101,
    116,
    32,
    111,
    117,
    116,
    115,
    97,
    116,
    105,
    115,
    102,
    121,
    116,
    111,
    32,
    102,
    105,
    110,
    100,
    100,
    111,
    119,
    110,
    32,
    116,
    111,
    108,
    111,
    116,
    32,
    111,
    102,
    32,
    80,
    108,
    97,
    121,
    101,
    114,
    115,
    105,
    110,
    32,
    74,
    117,
    110,
    101,
    113,
    117,
    97,
    110,
    116,
    117,
    109,
    110,
    111,
    116,
    32,
    116,
    104,
    101,
    116,
    105,
    109,
    101,
    32,
    116,
    111,
    100,
    105,
    115,
    116,
    97,
    110,
    116,
    70,
    105,
    110,
    110,
    105,
    115,
    104,
    115,
    114,
    99,
    32,
    61,
    32,
    40,
    115,
    105,
    110,
    103,
    108,
    101,
    32,
    104,
    101,
    108,
    112,
    32,
    111,
    102,
    71,
    101,
    114,
    109,
    97,
    110,
    32,
    108,
    97,
    119,
    32,
    97,
    110,
    100,
    108,
    97,
    98,
    101,
    108,
    101,
    100,
    102,
    111,
    114,
    101,
    115,
    116,
    115,
    99,
    111,
    111,
    107,
    105,
    110,
    103,
    115,
    112,
    97,
    99,
    101,
    34,
    62,
    104,
    101,
    97,
    100,
    101,
    114,
    45,
    119,
    101,
    108,
    108,
    32,
    97,
    115,
    83,
    116,
    97,
    110,
    108,
    101,
    121,
    98,
    114,
    105,
    100,
    103,
    101,
    115,
    47,
    103,
    108,
    111,
    98,
    97,
    108,
    67,
    114,
    111,
    97,
    116,
    105,
    97,
    32,
    65,
    98,
    111,
    117,
    116,
    32,
    91,
    48,
    93,
    59,
    10,
    32,
    32,
    105,
    116,
    44,
    32,
    97,
    110,
    100,
    103,
    114,
    111,
    117,
    112,
    101,
    100,
    98,
    101,
    105,
    110,
    103,
    32,
    97,
    41,
    123,
    116,
    104,
    114,
    111,
    119,
    104,
    101,
    32,
    109,
    97,
    100,
    101,
    108,
    105,
    103,
    104,
    116,
    101,
    114,
    101,
    116,
    104,
    105,
    99,
    97,
    108,
    70,
    70,
    70,
    70,
    70,
    70,
    34,
    98,
    111,
    116,
    116,
    111,
    109,
    34,
    108,
    105,
    107,
    101,
    32,
    97,
    32,
    101,
    109,
    112,
    108,
    111,
    121,
    115,
    108,
    105,
    118,
    101,
    32,
    105,
    110,
    97,
    115,
    32,
    115,
    101,
    101,
    110,
    112,
    114,
    105,
    110,
    116,
    101,
    114,
    109,
    111,
    115,
    116,
    32,
    111,
    102,
    117,
    98,
    45,
    108,
    105,
    110,
    107,
    114,
    101,
    106,
    101,
    99,
    116,
    115,
    97,
    110,
    100,
    32,
    117,
    115,
    101,
    105,
    109,
    97,
    103,
    101,
    34,
    62,
    115,
    117,
    99,
    99,
    101,
    101,
    100,
    102,
    101,
    101,
    100,
    105,
    110,
    103,
    78,
    117,
    99,
    108,
    101,
    97,
    114,
    105,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    111,
    32,
    104,
    101,
    108,
    112,
    87,
    111,
    109,
    101,
    110,
    39,
    115,
    78,
    101,
    105,
    116,
    104,
    101,
    114,
    77,
    101,
    120,
    105,
    99,
    97,
    110,
    112,
    114,
    111,
    116,
    101,
    105,
    110,
    60,
    116,
    97,
    98,
    108,
    101,
    32,
    98,
    121,
    32,
    109,
    97,
    110,
    121,
    104,
    101,
    97,
    108,
    116,
    104,
    121,
    108,
    97,
    119,
    115,
    117,
    105,
    116,
    100,
    101,
    118,
    105,
    115,
    101,
    100,
    46,
    112,
    117,
    115,
    104,
    40,
    123,
    115,
    101,
    108,
    108,
    101,
    114,
    115,
    115,
    105,
    109,
    112,
    108,
    121,
    32,
    84,
    104,
    114,
    111,
    117,
    103,
    104,
    46,
    99,
    111,
    111,
    107,
    105,
    101,
    32,
    73,
    109,
    97,
    103,
    101,
    40,
    111,
    108,
    100,
    101,
    114,
    34,
    62,
    117,
    115,
    46,
    106,
    115,
    34,
    62,
    32,
    83,
    105,
    110,
    99,
    101,
    32,
    117,
    110,
    105,
    118,
    101,
    114,
    115,
    108,
    97,
    114,
    103,
    101,
    114,
    32,
    111,
    112,
    101,
    110,
    32,
    116,
    111,
    33,
    45,
    45,
    32,
    101,
    110,
    100,
    108,
    105,
    101,
    115,
    32,
    105,
    110,
    39,
    93,
    41,
    59,
    13,
    10,
    32,
    32,
    109,
    97,
    114,
    107,
    101,
    116,
    119,
    104,
    111,
    32,
    105,
    115,
    32,
    40,
    34,
    68,
    79,
    77,
    67,
    111,
    109,
    97,
    110,
    97,
    103,
    101,
    100,
    111,
    110,
    101,
    32,
    102,
    111,
    114,
    116,
    121,
    112,
    101,
    111,
    102,
    32,
    75,
    105,
    110,
    103,
    100,
    111,
    109,
    112,
    114,
    111,
    102,
    105,
    116,
    115,
    112,
    114,
    111,
    112,
    111,
    115,
    101,
    116,
    111,
    32,
    115,
    104,
    111,
    119,
    99,
    101,
    110,
    116,
    101,
    114,
    59,
    109,
    97,
    100,
    101,
    32,
    105,
    116,
    100,
    114,
    101,
    115,
    115,
    101,
    100,
    119,
    101,
    114,
    101,
    32,
    105,
    110,
    109,
    105,
    120,
    116,
    117,
    114,
    101,
    112,
    114,
    101,
    99,
    105,
    115,
    101,
    97,
    114,
    105,
    115,
    105,
    110,
    103,
    115,
    114,
    99,
    32,
    61,
    32,
    39,
    109,
    97,
    107,
    101,
    32,
    97,
    32,
    115,
    101,
    99,
    117,
    114,
    101,
    100,
    66,
    97,
    112,
    116,
    105,
    115,
    116,
    118,
    111,
    116,
    105,
    110,
    103,
    32,
    10,
    9,
    9,
    118,
    97,
    114,
    32,
    77,
    97,
    114,
    99,
    104,
    32,
    50,
    103,
    114,
    101,
    119,
    32,
    117,
    112,
    67,
    108,
    105,
    109,
    97,
    116,
    101,
    46,
    114,
    101,
    109,
    111,
    118,
    101,
    115,
    107,
    105,
    108,
    108,
    101,
    100,
    119,
    97,
    121,
    32,
    116,
    104,
    101,
    60,
    47,
    104,
    101,
    97,
    100,
    62,
    102,
    97,
    99,
    101,
    32,
    111,
    102,
    97,
    99,
    116,
    105,
    110,
    103,
    32,
    114,
    105,
    103,
    104,
    116,
    34,
    62,
    116,
    111,
    32,
    119,
    111,
    114,
    107,
    114,
    101,
    100,
    117,
    99,
    101,
    115,
    104,
    97,
    115,
    32,
    104,
    97,
    100,
    101,
    114,
    101,
    99,
    116,
    101,
    100,
    115,
    104,
    111,
    119,
    40,
    41,
    59,
    97,
    99,
    116,
    105,
    111,
    110,
    61,
    98,
    111,
    111,
    107,
    32,
    111,
    102,
    97,
    110,
    32,
    97,
    114,
    101,
    97,
    61,
    61,
    32,
    34,
    104,
    116,
    116,
    60,
    104,
    101,
    97,
    100,
    101,
    114,
    10,
    60,
    104,
    116,
    109,
    108,
    62,
    99,
    111,
    110,
    102,
    111,
    114,
    109,
    102,
    97,
    99,
    105,
    110,
    103,
    32,
    99,
    111,
    111,
    107,
    105,
    101,
    46,
    114,
    101,
    108,
    121,
    32,
    111,
    110,
    104,
    111,
    115,
    116,
    101,
    100,
    32,
    46,
    99,
    117,
    115,
    116,
    111,
    109,
    104,
    101,
    32,
    119,
    101,
    110,
    116,
    98,
    117,
    116,
    32,
    102,
    111,
    114,
    115,
    112,
    114,
    101,
    97,
    100,
    32,
    70,
    97,
    109,
    105,
    108,
    121,
    32,
    97,
    32,
    109,
    101,
    97,
    110,
    115,
    111,
    117,
    116,
    32,
    116,
    104,
    101,
    102,
    111,
    114,
    117,
    109,
    115,
    46,
    102,
    111,
    111,
    116,
    97,
    103,
    101,
    34,
    62,
    77,
    111,
    98,
    105,
    108,
    67,
    108,
    101,
    109,
    101,
    110,
    116,
    115,
    34,
    32,
    105,
    100,
    61,
    34,
    97,
    115,
    32,
    104,
    105,
    103,
    104,
    105,
    110,
    116,
    101,
    110,
    115,
    101,
    45,
    45,
    62,
    60,
    33,
    45,
    45,
    102,
    101,
    109,
    97,
    108,
    101,
    32,
    105,
    115,
    32,
    115,
    101,
    101,
    110,
    105,
    109,
    112,
    108,
    105,
    101,
    100,
    115,
    101,
    116,
    32,
    116,
    104,
    101,
    97,
    32,
    115,
    116,
    97,
    116,
    101,
    97,
    110,
    100,
    32,
    104,
    105,
    115,
    102,
    97,
    115,
    116,
    101,
    115,
    116,
    98,
    101,
    115,
    105,
    100,
    101,
    115,
    98,
    117,
    116,
    116,
    111,
    110,
    95,
    98,
    111,
    117,
    110,
    100,
    101,
    100,
    34,
    62,
    60,
    105,
    109,
    103,
    32,
    73,
    110,
    102,
    111,
    98,
    111,
    120,
    101,
    118,
    101,
    110,
    116,
    115,
    44,
    97,
    32,
    121,
    111,
    117,
    110,
    103,
    97,
    110,
    100,
    32,
    97,
    114,
    101,
    78,
    97,
    116,
    105,
    118,
    101,
    32,
    99,
    104,
    101,
    97,
    112,
    101,
    114,
    84,
    105,
    109,
    101,
    111,
    117,
    116,
    97,
    110,
    100,
    32,
    104,
    97,
    115,
    101,
    110,
    103,
    105,
    110,
    101,
    115,
    119,
    111,
    110,
    32,
    116,
    104,
    101,
    40,
    109,
    111,
    115,
    116,
    108,
    121,
    114,
    105,
    103,
    104,
    116,
    58,
    32,
    102,
    105,
    110,
    100,
    32,
    97,
    32,
    45,
    98,
    111,
    116,
    116,
    111,
    109,
    80,
    114,
    105,
    110,
    99,
    101,
    32,
    97,
    114,
    101,
    97,
    32,
    111,
    102,
    109,
    111,
    114,
    101,
    32,
    111,
    102,
    115,
    101,
    97,
    114,
    99,
    104,
    95,
    110,
    97,
    116,
    117,
    114,
    101,
    44,
    108,
    101,
    103,
    97,
    108,
    108,
    121,
    112,
    101,
    114,
    105,
    111,
    100,
    44,
    108,
    97,
    110,
    100,
    32,
    111,
    102,
    111,
    114,
    32,
    119,
    105,
    116,
    104,
    105,
    110,
    100,
    117,
    99,
    101,
    100,
    112,
    114,
    111,
    118,
    105,
    110,
    103,
    109,
    105,
    115,
    115,
    105,
    108,
    101,
    108,
    111,
    99,
    97,
    108,
    108,
    121,
    65,
    103,
    97,
    105,
    110,
    115,
    116,
    116,
    104,
    101,
    32,
    119,
    97,
    121,
    107,
    38,
    113,
    117,
    111,
    116,
    59,
    112,
    120,
    59,
    34,
    62,
    13,
    10,
    112,
    117,
    115,
    104,
    101,
    100,
    32,
    97,
    98,
    97,
    110,
    100,
    111,
    110,
    110,
    117,
    109,
    101,
    114,
    97,
    108,
    67,
    101,
    114,
    116,
    97,
    105,
    110,
    73,
    110,
    32,
    116,
    104,
    105,
    115,
    109,
    111,
    114,
    101,
    32,
    105,
    110,
    111,
    114,
    32,
    115,
    111,
    109,
    101,
    110,
    97,
    109,
    101,
    32,
    105,
    115,
    97,
    110,
    100,
    44,
    32,
    105,
    110,
    99,
    114,
    111,
    119,
    110,
    101,
    100,
    73,
    83,
    66,
    78,
    32,
    48,
    45,
    99,
    114,
    101,
    97,
    116,
    101,
    115,
    79,
    99,
    116,
    111,
    98,
    101,
    114,
    109,
    97,
    121,
    32,
    110,
    111,
    116,
    99,
    101,
    110,
    116,
    101,
    114,
    32,
    108,
    97,
    116,
    101,
    32,
    105,
    110,
    68,
    101,
    102,
    101,
    110,
    99,
    101,
    101,
    110,
    97,
    99,
    116,
    101,
    100,
    119,
    105,
    115,
    104,
    32,
    116,
    111,
    98,
    114,
    111,
    97,
    100,
    108,
    121,
    99,
    111,
    111,
    108,
    105,
    110,
    103,
    111,
    110,
    108,
    111,
    97,
    100,
    61,
    105,
    116,
    46,
    32,
    84,
    104,
    101,
    114,
    101,
    99,
    111,
    118,
    101,
    114,
    77,
    101,
    109,
    98,
    101,
    114,
    115,
    104,
    101,
    105,
    103,
    104,
    116,
    32,
    97,
    115,
    115,
    117,
    109,
    101,
    115,
    60,
    104,
    116,
    109,
    108,
    62,
    10,
    112,
    101,
    111,
    112,
    108,
    101,
    46,
    105,
    110,
    32,
    111,
    110,
    101,
    32,
    61,
    119,
    105,
    110,
    100,
    111,
    119,
    102,
    111,
    111,
    116,
    101,
    114,
    95,
    97,
    32,
    103,
    111,
    111,
    100,
    32,
    114,
    101,
    107,
    108,
    97,
    109,
    97,
    111,
    116,
    104,
    101,
    114,
    115,
    44,
    116,
    111,
    32,
    116,
    104,
    105,
    115,
    95,
    99,
    111,
    111,
    107,
    105,
    101,
    112,
    97,
    110,
    101,
    108,
    34,
    62,
    76,
    111,
    110,
    100,
    111,
    110,
    44,
    100,
    101,
    102,
    105,
    110,
    101,
    115,
    99,
    114,
    117,
    115,
    104,
    101,
    100,
    98,
    97,
    112,
    116,
    105,
    115,
    109,
    99,
    111,
    97,
    115,
    116,
    97,
    108,
    115,
    116,
    97,
    116,
    117,
    115,
    32,
    116,
    105,
    116,
    108,
    101,
    34,
    32,
    109,
    111,
    118,
    101,
    32,
    116,
    111,
    108,
    111,
    115,
    116,
    32,
    105,
    110,
    98,
    101,
    116,
    116,
    101,
    114,
    32,
    105,
    109,
    112,
    108,
    105,
    101,
    115,
    114,
    105,
    118,
    97,
    108,
    114,
    121,
    115,
    101,
    114,
    118,
    101,
    114,
    115,
    32,
    83,
    121,
    115,
    116,
    101,
    109,
    80,
    101,
    114,
    104,
    97,
    112,
    115,
    101,
    115,
    32,
    97,
    110,
    100,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    100,
    102,
    108,
    111,
    119,
    105,
    110,
    103,
    108,
    97,
    115,
    116,
    101,
    100,
    32,
    114,
    105,
    115,
    101,
    32,
    105,
    110,
    71,
    101,
    110,
    101,
    115,
    105,
    115,
    118,
    105,
    101,
    119,
    32,
    111,
    102,
    114,
    105,
    115,
    105,
    110,
    103,
    32,
    115,
    101,
    101,
    109,
    32,
    116,
    111,
    98,
    117,
    116,
    32,
    105,
    110,
    32,
    98,
    97,
    99,
    107,
    105,
    110,
    103,
    104,
    101,
    32,
    119,
    105,
    108,
    108,
    103,
    105,
    118,
    101,
    110,
    32,
    97,
    103,
    105,
    118,
    105,
    110,
    103,
    32,
    99,
    105,
    116,
    105,
    101,
    115,
    46,
    102,
    108,
    111,
    119,
    32,
    111,
    102,
    32,
    76,
    97,
    116,
    101,
    114,
    32,
    97,
    108,
    108,
    32,
    98,
    117,
    116,
    72,
    105,
    103,
    104,
    119,
    97,
    121,
    111,
    110,
    108,
    121,
    32,
    98,
    121,
    115,
    105,
    103,
    110,
    32,
    111,
    102,
    104,
    101,
    32,
    100,
    111,
    101,
    115,
    100,
    105,
    102,
    102,
    101,
    114,
    115,
    98,
    97,
    116,
    116,
    101,
    114,
    121,
    38,
    97,
    109,
    112,
    59,
    108,
    97,
    115,
    105,
    110,
    103,
    108,
    101,
    115,
    116,
    104,
    114,
    101,
    97,
    116,
    115,
    105,
    110,
    116,
    101,
    103,
    101,
    114,
    116,
    97,
    107,
    101,
    32,
    111,
    110,
    114,
    101,
    102,
    117,
    115,
    101,
    100,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    61,
    85,
    83,
    38,
    97,
    109,
    112,
    83,
    101,
    101,
    32,
    116,
    104,
    101,
    110,
    97,
    116,
    105,
    118,
    101,
    115,
    98,
    121,
    32,
    116,
    104,
    105,
    115,
    115,
    121,
    115,
    116,
    101,
    109,
    46,
    104,
    101,
    97,
    100,
    32,
    111,
    102,
    58,
    104,
    111,
    118,
    101,
    114,
    44,
    108,
    101,
    115,
    98,
    105,
    97,
    110,
    115,
    117,
    114,
    110,
    97,
    109,
    101,
    97,
    110,
    100,
    32,
    97,
    108,
    108,
    99,
    111,
    109,
    109,
    111,
    110,
    47,
    104,
    101,
    97,
    100,
    101,
    114,
    95,
    95,
    112,
    97,
    114,
    97,
    109,
    115,
    72,
    97,
    114,
    118,
    97,
    114,
    100,
    47,
    112,
    105,
    120,
    101,
    108,
    46,
    114,
    101,
    109,
    111,
    118,
    97,
    108,
    115,
    111,
    32,
    108,
    111,
    110,
    103,
    114,
    111,
    108,
    101,
    32,
    111,
    102,
    106,
    111,
    105,
    110,
    116,
    108,
    121,
    115,
    107,
    121,
    115,
    99,
    114,
    97,
    85,
    110,
    105,
    99,
    111,
    100,
    101,
    98,
    114,
    32,
    47,
    62,
    13,
    10,
    65,
    116,
    108,
    97,
    110,
    116,
    97,
    110,
    117,
    99,
    108,
    101,
    117,
    115,
    67,
    111,
    117,
    110,
    116,
    121,
    44,
    112,
    117,
    114,
    101,
    108,
    121,
    32,
    99,
    111,
    117,
    110,
    116,
    34,
    62,
    101,
    97,
    115,
    105,
    108,
    121,
    32,
    98,
    117,
    105,
    108,
    100,
    32,
    97,
    111,
    110,
    99,
    108,
    105,
    99,
    107,
    97,
    32,
    103,
    105,
    118,
    101,
    110,
    112,
    111,
    105,
    110,
    116,
    101,
    114,
    104,
    38,
    113,
    117,
    111,
    116,
    59,
    101,
    118,
    101,
    110,
    116,
    115,
    32,
    101,
    108,
    115,
    101,
    32,
    123,
    10,
    100,
    105,
    116,
    105,
    111,
    110,
    115,
    110,
    111,
    119,
    32,
    116,
    104,
    101,
    44,
    32,
    119,
    105,
    116,
    104,
    32,
    109,
    97,
    110,
    32,
    119,
    104,
    111,
    111,
    114,
    103,
    47,
    87,
    101,
    98,
    111,
    110,
    101,
    32,
    97,
    110,
    100,
    99,
    97,
    118,
    97,
    108,
    114,
    121,
    72,
    101,
    32,
    100,
    105,
    101,
    100,
    115,
    101,
    97,
    116,
    116,
    108,
    101,
    48,
    48,
    44,
    48,
    48,
    48,
    32,
    123,
    119,
    105,
    110,
    100,
    111,
    119,
    104,
    97,
    118,
    101,
    32,
    116,
    111,
    105,
    102,
    40,
    119,
    105,
    110,
    100,
    97,
    110,
    100,
    32,
    105,
    116,
    115,
    115,
    111,
    108,
    101,
    108,
    121,
    32,
    109,
    38,
    113,
    117,
    111,
    116,
    59,
    114,
    101,
    110,
    101,
    119,
    101,
    100,
    68,
    101,
    116,
    114,
    111,
    105,
    116,
    97,
    109,
    111,
    110,
    103,
    115,
    116,
    101,
    105,
    116,
    104,
    101,
    114,
    32,
    116,
    104,
    101,
    109,
    32,
    105,
    110,
    83,
    101,
    110,
    97,
    116,
    111,
    114,
    85,
    115,
    60,
    47,
    97,
    62,
    60,
    75,
    105,
    110,
    103,
    32,
    111,
    102,
    70,
    114,
    97,
    110,
    99,
    105,
    115,
    45,
    112,
    114,
    111,
    100,
    117,
    99,
    104,
    101,
    32,
    117,
    115,
    101,
    100,
    97,
    114,
    116,
    32,
    97,
    110,
    100,
    104,
    105,
    109,
    32,
    97,
    110,
    100,
    117,
    115,
    101,
    100,
    32,
    98,
    121,
    115,
    99,
    111,
    114,
    105,
    110,
    103,
    97,
    116,
    32,
    104,
    111,
    109,
    101,
    116,
    111,
    32,
    104,
    97,
    118,
    101,
    114,
    101,
    108,
    97,
    116,
    101,
    115,
    105,
    98,
    105,
    108,
    105,
    116,
    121,
    102,
    97,
    99,
    116,
    105,
    111,
    110,
    66,
    117,
    102,
    102,
    97,
    108,
    111,
    108,
    105,
    110,
    107,
    34,
    62,
    60,
    119,
    104,
    97,
    116,
    32,
    104,
    101,
    102,
    114,
    101,
    101,
    32,
    116,
    111,
    67,
    105,
    116,
    121,
    32,
    111,
    102,
    99,
    111,
    109,
    101,
    32,
    105,
    110,
    115,
    101,
    99,
    116,
    111,
    114,
    115,
    99,
    111,
    117,
    110,
    116,
    101,
    100,
    111,
    110,
    101,
    32,
    100,
    97,
    121,
    110,
    101,
    114,
    118,
    111,
    117,
    115,
    115,
    113,
    117,
    97,
    114,
    101,
    32,
    125,
    59,
    105,
    102,
    40,
    103,
    111,
    105,
    110,
    32,
    119,
    104,
    97,
    116,
    105,
    109,
    103,
    34,
    32,
    97,
    108,
    105,
    115,
    32,
    111,
    110,
    108,
    121,
    115,
    101,
    97,
    114,
    99,
    104,
    47,
    116,
    117,
    101,
    115,
    100,
    97,
    121,
    108,
    111,
    111,
    115,
    101,
    108,
    121,
    83,
    111,
    108,
    111,
    109,
    111,
    110,
    115,
    101,
    120,
    117,
    97,
    108,
    32,
    45,
    32,
    60,
    97,
    32,
    104,
    114,
    109,
    101,
    100,
    105,
    117,
    109,
    34,
    68,
    79,
    32,
    78,
    79,
    84,
    32,
    70,
    114,
    97,
    110,
    99,
    101,
    44,
    119,
    105,
    116,
    104,
    32,
    97,
    32,
    119,
    97,
    114,
    32,
    97,
    110,
    100,
    115,
    101,
    99,
    111,
    110,
    100,
    32,
    116,
    97,
    107,
    101,
    32,
    97,
    32,
    62,
    13,
    10,
    13,
    10,
    13,
    10,
    109,
    97,
    114,
    107,
    101,
    116,
    46,
    104,
    105,
    103,
    104,
    119,
    97,
    121,
    100,
    111,
    110,
    101,
    32,
    105,
    110,
    99,
    116,
    105,
    118,
    105,
    116,
    121,
    34,
    108,
    97,
    115,
    116,
    34,
    62,
    111,
    98,
    108,
    105,
    103,
    101,
    100,
    114,
    105,
    115,
    101,
    32,
    116,
    111,
    34,
    117,
    110,
    100,
    101,
    102,
    105,
    109,
    97,
    100,
    101,
    32,
    116,
    111,
    32,
    69,
    97,
    114,
    108,
    121,
    32,
    112,
    114,
    97,
    105,
    115,
    101,
    100,
    105,
    110,
    32,
    105,
    116,
    115,
    32,
    102,
    111,
    114,
    32,
    104,
    105,
    115,
    97,
    116,
    104,
    108,
    101,
    116,
    101,
    74,
    117,
    112,
    105,
    116,
    101,
    114,
    89,
    97,
    104,
    111,
    111,
    33,
    32,
    116,
    101,
    114,
    109,
    101,
    100,
    32,
    115,
    111,
    32,
    109,
    97,
    110,
    121,
    114,
    101,
    97,
    108,
    108,
    121,
    32,
    115,
    46,
    32,
    84,
    104,
    101,
    32,
    97,
    32,
    119,
    111,
    109,
    97,
    110,
    63,
    118,
    97,
    108,
    117,
    101,
    61,
    100,
    105,
    114,
    101,
    99,
    116,
    32,
    114,
    105,
    103,
    104,
    116,
    34,
    32,
    98,
    105,
    99,
    121,
    99,
    108,
    101,
    97,
    99,
    105,
    110,
    103,
    61,
    34,
    100,
    97,
    121,
    32,
    97,
    110,
    100,
    115,
    116,
    97,
    116,
    105,
    110,
    103,
    82,
    97,
    116,
    104,
    101,
    114,
    44,
    104,
    105,
    103,
    104,
    101,
    114,
    32,
    79,
    102,
    102,
    105,
    99,
    101,
    32,
    97,
    114,
    101,
    32,
    110,
    111,
    119,
    116,
    105,
    109,
    101,
    115,
    44,
    32,
    119,
    104,
    101,
    110,
    32,
    97,
    32,
    112,
    97,
    121,
    32,
    102,
    111,
    114,
    111,
    110,
    32,
    116,
    104,
    105,
    115,
    45,
    108,
    105,
    110,
    107,
    34,
    62,
    59,
    98,
    111,
    114,
    100,
    101,
    114,
    97,
    114,
    111,
    117,
    110,
    100,
    32,
    97,
    110,
    110,
    117,
    97,
    108,
    32,
    116,
    104,
    101,
    32,
    78,
    101,
    119,
    112,
    117,
    116,
    32,
    116,
    104,
    101,
    46,
    99,
    111,
    109,
    34,
    32,
    116,
    97,
    107,
    105,
    110,
    32,
    116,
    111,
    97,
    32,
    98,
    114,
    105,
    101,
    102,
    40,
    105,
    110,
    32,
    116,
    104,
    101,
    103,
    114,
    111,
    117,
    112,
    115,
    46,
    59,
    32,
    119,
    105,
    100,
    116,
    104,
    101,
    110,
    122,
    121,
    109,
    101,
    115,
    115,
    105,
    109,
    112,
    108,
    101,
    32,
    105,
    110,
    32,
    108,
    97,
    116,
    101,
    123,
    114,
    101,
    116,
    117,
    114,
    110,
    116,
    104,
    101,
    114,
    97,
    112,
    121,
    97,
    32,
    112,
    111,
    105,
    110,
    116,
    98,
    97,
    110,
    110,
    105,
    110,
    103,
    105,
    110,
    107,
    115,
    34,
    62,
    10,
    40,
    41,
    59,
    34,
    32,
    114,
    101,
    97,
    32,
    112,
    108,
    97,
    99,
    101,
    92,
    117,
    48,
    48,
    51,
    67,
    97,
    97,
    98,
    111,
    117,
    116,
    32,
    97,
    116,
    114,
    62,
    13,
    10,
    9,
    9,
    99,
    99,
    111,
    117,
    110,
    116,
    32,
    103,
    105,
    118,
    101,
    115,
    32,
    97,
    60,
    83,
    67,
    82,
    73,
    80,
    84,
    82,
    97,
    105,
    108,
    119,
    97,
    121,
    116,
    104,
    101,
    109,
    101,
    115,
    47,
    116,
    111,
    111,
    108,
    98,
    111,
    120,
    66,
    121,
    73,
    100,
    40,
    34,
    120,
    104,
    117,
    109,
    97,
    110,
    115,
    44,
    119,
    97,
    116,
    99,
    104,
    101,
    115,
    105,
    110,
    32,
    115,
    111,
    109,
    101,
    32,
    105,
    102,
    32,
    40,
    119,
    105,
    99,
    111,
    109,
    105,
    110,
    103,
    32,
    102,
    111,
    114,
    109,
    97,
    116,
    115,
    32,
    85,
    110,
    100,
    101,
    114,
    32,
    98,
    117,
    116,
    32,
    104,
    97,
    115,
    104,
    97,
    110,
    100,
    101,
    100,
    32,
    109,
    97,
    100,
    101,
    32,
    98,
    121,
    116,
    104,
    97,
    110,
    32,
    105,
    110,
    102,
    101,
    97,
    114,
    32,
    111,
    102,
    100,
    101,
    110,
    111,
    116,
    101,
    100,
    47,
    105,
    102,
    114,
    97,
    109,
    101,
    108,
    101,
    102,
    116,
    32,
    105,
    110,
    118,
    111,
    108,
    116,
    97,
    103,
    101,
    105,
    110,
    32,
    101,
    97,
    99,
    104,
    97,
    38,
    113,
    117,
    111,
    116,
    59,
    98,
    97,
    115,
    101,
    32,
    111,
    102,
    73,
    110,
    32,
    109,
    97,
    110,
    121,
    117,
    110,
    100,
    101,
    114,
    103,
    111,
    114,
    101,
    103,
    105,
    109,
    101,
    115,
    97,
    99,
    116,
    105,
    111,
    110,
    32,
    60,
    47,
    112,
    62,
    13,
    10,
    60,
    117,
    115,
    116,
    111,
    109,
    86,
    97,
    59,
    38,
    103,
    116,
    59,
    60,
    47,
    105,
    109,
    112,
    111,
    114,
    116,
    115,
    111,
    114,
    32,
    116,
    104,
    97,
    116,
    109,
    111,
    115,
    116,
    108,
    121,
    32,
    38,
    97,
    109,
    112,
    59,
    114,
    101,
    32,
    115,
    105,
    122,
    101,
    61,
    34,
    60,
    47,
    97,
    62,
    60,
    47,
    104,
    97,
    32,
    99,
    108,
    97,
    115,
    115,
    112,
    97,
    115,
    115,
    105,
    118,
    101,
    72,
    111,
    115,
    116,
    32,
    61,
    32,
    87,
    104,
    101,
    116,
    104,
    101,
    114,
    102,
    101,
    114,
    116,
    105,
    108,
    101,
    86,
    97,
    114,
    105,
    111,
    117,
    115,
    61,
    91,
    93,
    59,
    40,
    102,
    117,
    99,
    97,
    109,
    101,
    114,
    97,
    115,
    47,
    62,
    60,
    47,
    116,
    100,
    62,
    97,
    99,
    116,
    115,
    32,
    97,
    115,
    73,
    110,
    32,
    115,
    111,
    109,
    101,
    62,
    13,
    10,
    13,
    10,
    60,
    33,
    111,
    114,
    103,
    97,
    110,
    105,
    115,
    32,
    60,
    98,
    114,
    32,
    47,
    62,
    66,
    101,
    105,
    106,
    105,
    110,
    103,
    99,
    97,
    116,
    97,
    108,
    195,
    160,
    100,
    101,
    117,
    116,
    115,
    99,
    104,
    101,
    117,
    114,
    111,
    112,
    101,
    117,
    101,
    117,
    115,
    107,
    97,
    114,
    97,
    103,
    97,
    101,
    105,
    108,
    103,
    101,
    115,
    118,
    101,
    110,
    115,
    107,
    97,
    101,
    115,
    112,
    97,
    195,
    177,
    97,
    109,
    101,
    110,
    115,
    97,
    106,
    101,
    117,
    115,
    117,
    97,
    114,
    105,
    111,
    116,
    114,
    97,
    98,
    97,
    106,
    111,
    109,
    195,
    169,
    120,
    105,
    99,
    111,
    112,
    195,
    161,
    103,
    105,
    110,
    97,
    115,
    105,
    101,
    109,
    112,
    114,
    101,
    115,
    105,
    115,
    116,
    101,
    109,
    97,
    111,
    99,
    116,
    117,
    98,
    114,
    101,
    100,
    117,
    114,
    97,
    110,
    116,
    101,
    97,
    195,
    177,
    97,
    100,
    105,
    114,
    101,
    109,
    112,
    114,
    101,
    115,
    97,
    109,
    111,
    109,
    101,
    110,
    116,
    111,
    110,
    117,
    101,
    115,
    116,
    114,
    111,
    112,
    114,
    105,
    109,
    101,
    114,
    97,
    116,
    114,
    97,
    118,
    195,
    169,
    115,
    103,
    114,
    97,
    99,
    105,
    97,
    115,
    110,
    117,
    101,
    115,
    116,
    114,
    97,
    112,
    114,
    111,
    99,
    101,
    115,
    111,
    101,
    115,
    116,
    97,
    100,
    111,
    115,
    99,
    97,
    108,
    105,
    100,
    97,
    100,
    112,
    101,
    114,
    115,
    111,
    110,
    97,
    110,
    195,
    186,
    109,
    101,
    114,
    111,
    97,
    99,
    117,
    101,
    114,
    100,
    111,
    109,
    195,
    186,
    115,
    105,
    99,
    97,
    109,
    105,
    101,
    109,
    98,
    114,
    111,
    111,
    102,
    101,
    114,
    116,
    97,
    115,
    97,
    108,
    103,
    117,
    110,
    111,
    115,
    112,
    97,
    195,
    173,
    115,
    101,
    115,
    101,
    106,
    101,
    109,
    112,
    108,
    111,
    100,
    101,
    114,
    101,
    99,
    104,
    111,
    97,
    100,
    101,
    109,
    195,
    161,
    115,
    112,
    114,
    105,
    118,
    97,
    100,
    111,
    97,
    103,
    114,
    101,
    103,
    97,
    114,
    101,
    110,
    108,
    97,
    99,
    101,
    115,
    112,
    111,
    115,
    105,
    98,
    108,
    101,
    104,
    111,
    116,
    101,
    108,
    101,
    115,
    115,
    101,
    118,
    105,
    108,
    108,
    97,
    112,
    114,
    105,
    109,
    101,
    114,
    111,
    195,
    186,
    108,
    116,
    105,
    109,
    111,
    101,
    118,
    101,
    110,
    116,
    111,
    115,
    97,
    114,
    99,
    104,
    105,
    118,
    111,
    99,
    117,
    108,
    116,
    117,
    114,
    97,
    109,
    117,
    106,
    101,
    114,
    101,
    115,
    101,
    110,
    116,
    114,
    97,
    100,
    97,
    97,
    110,
    117,
    110,
    99,
    105,
    111,
    101,
    109,
    98,
    97,
    114,
    103,
    111,
    109,
    101,
    114,
    99,
    97,
    100,
    111,
    103,
    114,
    97,
    110,
    100,
    101,
    115,
    101,
    115,
    116,
    117,
    100,
    105,
    111,
    109,
    101,
    106,
    111,
    114,
    101,
    115,
    102,
    101,
    98,
    114,
    101,
    114,
    111,
    100,
    105,
    115,
    101,
    195,
    177,
    111,
    116,
    117,
    114,
    105,
    115,
    109,
    111,
    99,
    195,
    179,
    100,
    105,
    103,
    111,
    112,
    111,
    114,
    116,
    97,
    100,
    97,
    101,
    115,
    112,
    97,
    99,
    105,
    111,
    102,
    97,
    109,
    105,
    108,
    105,
    97,
    97,
    110,
    116,
    111,
    110,
    105,
    111,
    112,
    101,
    114,
    109,
    105,
    116,
    101,
    103,
    117,
    97,
    114,
    100,
    97,
    114,
    97,
    108,
    103,
    117,
    110,
    97,
    115,
    112,
    114,
    101,
    99,
    105,
    111,
    115,
    97,
    108,
    103,
    117,
    105,
    101,
    110,
    115,
    101,
    110,
    116,
    105,
    100,
    111,
    118,
    105,
    115,
    105,
    116,
    97,
    115,
    116,
    195,
    173,
    116,
    117,
    108,
    111,
    99,
    111,
    110,
    111,
    99,
    101,
    114,
    115,
    101,
    103,
    117,
    110,
    100,
    111,
    99,
    111,
    110,
    115,
    101,
    106,
    111,
    102,
    114,
    97,
    110,
    99,
    105,
    97,
    109,
    105,
    110,
    117,
    116,
    111,
    115,
    115,
    101,
    103,
    117,
    110,
    100,
    97,
    116,
    101,
    110,
    101,
    109,
    111,
    115,
    101,
    102,
    101,
    99,
    116,
    111,
    115,
    109,
    195,
    161,
    108,
    97,
    103,
    97,
    115,
    101,
    115,
    105,
    195,
    179,
    110,
    114,
    101,
    118,
    105,
    115,
    116,
    97,
    103,
    114,
    97,
    110,
    97,
    100,
    97,
    99,
    111,
    109,
    112,
    114,
    97,
    114,
    105,
    110,
    103,
    114,
    101,
    115,
    111,
    103,
    97,
    114,
    99,
    195,
    173,
    97,
    97,
    99,
    99,
    105,
    195,
    179,
    110,
    101,
    99,
    117,
    97,
    100,
    111,
    114,
    113,
    117,
    105,
    101,
    110,
    101,
    115,
    105,
    110,
    99,
    108,
    117,
    115,
    111,
    100,
    101,
    98,
    101,
    114,
    195,
    161,
    109,
    97,
    116,
    101,
    114,
    105,
    97,
    104,
    111,
    109,
    98,
    114,
    101,
    115,
    109,
    117,
    101,
    115,
    116,
    114,
    97,
    112,
    111,
    100,
    114,
    195,
    173,
    97,
    109,
    97,
    195,
    177,
    97,
    110,
    97,
    195,
    186,
    108,
    116,
    105,
    109,
    97,
    101,
    115,
    116,
    97,
    109,
    111,
    115,
    111,
    102,
    105,
    99,
    105,
    97,
    108,
    116,
    97,
    109,
    98,
    105,
    101,
    110,
    110,
    105,
    110,
    103,
    195,
    186,
    110,
    115,
    97,
    108,
    117,
    100,
    111,
    115,
    112,
    111,
    100,
    101,
    109,
    111,
    115,
    109,
    101,
    106,
    111,
    114,
    97,
    114,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    98,
    117,
    115,
    105,
    110,
    101,
    115,
    115,
    104,
    111,
    109,
    101,
    112,
    97,
    103,
    101,
    115,
    101,
    99,
    117,
    114,
    105,
    116,
    121,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    115,
    116,
    97,
    110,
    100,
    97,
    114,
    100,
    99,
    97,
    109,
    112,
    97,
    105,
    103,
    110,
    102,
    101,
    97,
    116,
    117,
    114,
    101,
    115,
    99,
    97,
    116,
    101,
    103,
    111,
    114,
    121,
    101,
    120,
    116,
    101,
    114,
    110,
    97,
    108,
    99,
    104,
    105,
    108,
    100,
    114,
    101,
    110,
    114,
    101,
    115,
    101,
    114,
    118,
    101,
    100,
    114,
    101,
    115,
    101,
    97,
    114,
    99,
    104,
    101,
    120,
    99,
    104,
    97,
    110,
    103,
    101,
    102,
    97,
    118,
    111,
    114,
    105,
    116,
    101,
    116,
    101,
    109,
    112,
    108,
    97,
    116,
    101,
    109,
    105,
    108,
    105,
    116,
    97,
    114,
    121,
    105,
    110,
    100,
    117,
    115,
    116,
    114,
    121,
    115,
    101,
    114,
    118,
    105,
    99,
    101,
    115,
    109,
    97,
    116,
    101,
    114,
    105,
    97,
    108,
    112,
    114,
    111,
    100,
    117,
    99,
    116,
    115,
    122,
    45,
    105,
    110,
    100,
    101,
    120,
    58,
    99,
    111,
    109,
    109,
    101,
    110,
    116,
    115,
    115,
    111,
    102,
    116,
    119,
    97,
    114,
    101,
    99,
    111,
    109,
    112,
    108,
    101,
    116,
    101,
    99,
    97,
    108,
    101,
    110,
    100,
    97,
    114,
    112,
    108,
    97,
    116,
    102,
    111,
    114,
    109,
    97,
    114,
    116,
    105,
    99,
    108,
    101,
    115,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    100,
    109,
    111,
    118,
    101,
    109,
    101,
    110,
    116,
    113,
    117,
    101,
    115,
    116,
    105,
    111,
    110,
    98,
    117,
    105,
    108,
    100,
    105,
    110,
    103,
    112,
    111,
    108,
    105,
    116,
    105,
    99,
    115,
    112,
    111,
    115,
    115,
    105,
    98,
    108,
    101,
    114,
    101,
    108,
    105,
    103,
    105,
    111,
    110,
    112,
    104,
    121,
    115,
    105,
    99,
    97,
    108,
    102,
    101,
    101,
    100,
    98,
    97,
    99,
    107,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    112,
    105,
    99,
    116,
    117,
    114,
    101,
    115,
    100,
    105,
    115,
    97,
    98,
    108,
    101,
    100,
    112,
    114,
    111,
    116,
    111,
    99,
    111,
    108,
    97,
    117,
    100,
    105,
    101,
    110,
    99,
    101,
    115,
    101,
    116,
    116,
    105,
    110,
    103,
    115,
    97,
    99,
    116,
    105,
    118,
    105,
    116,
    121,
    101,
    108,
    101,
    109,
    101,
    110,
    116,
    115,
    108,
    101,
    97,
    114,
    110,
    105,
    110,
    103,
    97,
    110,
    121,
    116,
    104,
    105,
    110,
    103,
    97,
    98,
    115,
    116,
    114,
    97,
    99,
    116,
    112,
    114,
    111,
    103,
    114,
    101,
    115,
    115,
    111,
    118,
    101,
    114,
    118,
    105,
    101,
    119,
    109,
    97,
    103,
    97,
    122,
    105,
    110,
    101,
    101,
    99,
    111,
    110,
    111,
    109,
    105,
    99,
    116,
    114,
    97,
    105,
    110,
    105,
    110,
    103,
    112,
    114,
    101,
    115,
    115,
    117,
    114,
    101,
    118,
    97,
    114,
    105,
    111,
    117,
    115,
    32,
    60,
    115,
    116,
    114,
    111,
    110,
    103,
    62,
    112,
    114,
    111,
    112,
    101,
    114,
    116,
    121,
    115,
    104,
    111,
    112,
    112,
    105,
    110,
    103,
    116,
    111,
    103,
    101,
    116,
    104,
    101,
    114,
    97,
    100,
    118,
    97,
    110,
    99,
    101,
    100,
    98,
    101,
    104,
    97,
    118,
    105,
    111,
    114,
    100,
    111,
    119,
    110,
    108,
    111,
    97,
    100,
    102,
    101,
    97,
    116,
    117,
    114,
    101,
    100,
    102,
    111,
    111,
    116,
    98,
    97,
    108,
    108,
    115,
    101,
    108,
    101,
    99,
    116,
    101,
    100,
    76,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    100,
    105,
    115,
    116,
    97,
    110,
    99,
    101,
    114,
    101,
    109,
    101,
    109,
    98,
    101,
    114,
    116,
    114,
    97,
    99,
    107,
    105,
    110,
    103,
    112,
    97,
    115,
    115,
    119,
    111,
    114,
    100,
    109,
    111,
    100,
    105,
    102,
    105,
    101,
    100,
    115,
    116,
    117,
    100,
    101,
    110,
    116,
    115,
    100,
    105,
    114,
    101,
    99,
    116,
    108,
    121,
    102,
    105,
    103,
    104,
    116,
    105,
    110,
    103,
    110,
    111,
    114,
    116,
    104,
    101,
    114,
    110,
    100,
    97,
    116,
    97,
    98,
    97,
    115,
    101,
    102,
    101,
    115,
    116,
    105,
    118,
    97,
    108,
    98,
    114,
    101,
    97,
    107,
    105,
    110,
    103,
    108,
    111,
    99,
    97,
    116,
    105,
    111,
    110,
    105,
    110,
    116,
    101,
    114,
    110,
    101,
    116,
    100,
    114,
    111,
    112,
    100,
    111,
    119,
    110,
    112,
    114,
    97,
    99,
    116,
    105,
    99,
    101,
    101,
    118,
    105,
    100,
    101,
    110,
    99,
    101,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    109,
    97,
    114,
    114,
    105,
    97,
    103,
    101,
    114,
    101,
    115,
    112,
    111,
    110,
    115,
    101,
    112,
    114,
    111,
    98,
    108,
    101,
    109,
    115,
    110,
    101,
    103,
    97,
    116,
    105,
    118,
    101,
    112,
    114,
    111,
    103,
    114,
    97,
    109,
    115,
    97,
    110,
    97,
    108,
    121,
    115,
    105,
    115,
    114,
    101,
    108,
    101,
    97,
    115,
    101,
    100,
    98,
    97,
    110,
    110,
    101,
    114,
    34,
    62,
    112,
    117,
    114,
    99,
    104,
    97,
    115,
    101,
    112,
    111,
    108,
    105,
    99,
    105,
    101,
    115,
    114,
    101,
    103,
    105,
    111,
    110,
    97,
    108,
    99,
    114,
    101,
    97,
    116,
    105,
    118,
    101,
    97,
    114,
    103,
    117,
    109,
    101,
    110,
    116,
    98,
    111,
    111,
    107,
    109,
    97,
    114,
    107,
    114,
    101,
    102,
    101,
    114,
    114,
    101,
    114,
    99,
    104,
    101,
    109,
    105,
    99,
    97,
    108,
    100,
    105,
    118,
    105,
    115,
    105,
    111,
    110,
    99,
    97,
    108,
    108,
    98,
    97,
    99,
    107,
    115,
    101,
    112,
    97,
    114,
    97,
    116,
    101,
    112,
    114,
    111,
    106,
    101,
    99,
    116,
    115,
    99,
    111,
    110,
    102,
    108,
    105,
    99,
    116,
    104,
    97,
    114,
    100,
    119,
    97,
    114,
    101,
    105,
    110,
    116,
    101,
    114,
    101,
    115,
    116,
    100,
    101,
    108,
    105,
    118,
    101,
    114,
    121,
    109,
    111,
    117,
    110,
    116,
    97,
    105,
    110,
    111,
    98,
    116,
    97,
    105,
    110,
    101,
    100,
    61,
    32,
    102,
    97,
    108,
    115,
    101,
    59,
    102,
    111,
    114,
    40,
    118,
    97,
    114,
    32,
    97,
    99,
    99,
    101,
    112,
    116,
    101,
    100,
    99,
    97,
    112,
    97,
    99,
    105,
    116,
    121,
    99,
    111,
    109,
    112,
    117,
    116,
    101,
    114,
    105,
    100,
    101,
    110,
    116,
    105,
    116,
    121,
    97,
    105,
    114,
    99,
    114,
    97,
    102,
    116,
    101,
    109,
    112,
    108,
    111,
    121,
    101,
    100,
    112,
    114,
    111,
    112,
    111,
    115,
    101,
    100,
    100,
    111,
    109,
    101,
    115,
    116,
    105,
    99,
    105,
    110,
    99,
    108,
    117,
    100,
    101,
    115,
    112,
    114,
    111,
    118,
    105,
    100,
    101,
    100,
    104,
    111,
    115,
    112,
    105,
    116,
    97,
    108,
    118,
    101,
    114,
    116,
    105,
    99,
    97,
    108,
    99,
    111,
    108,
    108,
    97,
    112,
    115,
    101,
    97,
    112,
    112,
    114,
    111,
    97,
    99,
    104,
    112,
    97,
    114,
    116,
    110,
    101,
    114,
    115,
    108,
    111,
    103,
    111,
    34,
    62,
    60,
    97,
    100,
    97,
    117,
    103,
    104,
    116,
    101,
    114,
    97,
    117,
    116,
    104,
    111,
    114,
    34,
    32,
    99,
    117,
    108,
    116,
    117,
    114,
    97,
    108,
    102,
    97,
    109,
    105,
    108,
    105,
    101,
    115,
    47,
    105,
    109,
    97,
    103,
    101,
    115,
    47,
    97,
    115,
    115,
    101,
    109,
    98,
    108,
    121,
    112,
    111,
    119,
    101,
    114,
    102,
    117,
    108,
    116,
    101,
    97,
    99,
    104,
    105,
    110,
    103,
    102,
    105,
    110,
    105,
    115,
    104,
    101,
    100,
    100,
    105,
    115,
    116,
    114,
    105,
    99,
    116,
    99,
    114,
    105,
    116,
    105,
    99,
    97,
    108,
    99,
    103,
    105,
    45,
    98,
    105,
    110,
    47,
    112,
    117,
    114,
    112,
    111,
    115,
    101,
    115,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    115,
    101,
    108,
    101,
    99,
    116,
    105,
    111,
    110,
    98,
    101,
    99,
    111,
    109,
    105,
    110,
    103,
    112,
    114,
    111,
    118,
    105,
    100,
    101,
    115,
    97,
    99,
    97,
    100,
    101,
    109,
    105,
    99,
    101,
    120,
    101,
    114,
    99,
    105,
    115,
    101,
    97,
    99,
    116,
    117,
    97,
    108,
    108,
    121,
    109,
    101,
    100,
    105,
    99,
    105,
    110,
    101,
    99,
    111,
    110,
    115,
    116,
    97,
    110,
    116,
    97,
    99,
    99,
    105,
    100,
    101,
    110,
    116,
    77,
    97,
    103,
    97,
    122,
    105,
    110,
    101,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    115,
    116,
    97,
    114,
    116,
    105,
    110,
    103,
    98,
    111,
    116,
    116,
    111,
    109,
    34,
    62,
    111,
    98,
    115,
    101,
    114,
    118,
    101,
    100,
    58,
    32,
    38,
    113,
    117,
    111,
    116,
    59,
    101,
    120,
    116,
    101,
    110,
    100,
    101,
    100,
    112,
    114,
    101,
    118,
    105,
    111,
    117,
    115,
    83,
    111,
    102,
    116,
    119,
    97,
    114,
    101,
    99,
    117,
    115,
    116,
    111,
    109,
    101,
    114,
    100,
    101,
    99,
    105,
    115,
    105,
    111,
    110,
    115,
    116,
    114,
    101,
    110,
    103,
    116,
    104,
    100,
    101,
    116,
    97,
    105,
    108,
    101,
    100,
    115,
    108,
    105,
    103,
    104,
    116,
    108,
    121,
    112,
    108,
    97,
    110,
    110,
    105,
    110,
    103,
    116,
    101,
    120,
    116,
    97,
    114,
    101,
    97,
    99,
    117,
    114,
    114,
    101,
    110,
    99,
    121,
    101,
    118,
    101,
    114,
    121,
    111,
    110,
    101,
    115,
    116,
    114,
    97,
    105,
    103,
    104,
    116,
    116,
    114,
    97,
    110,
    115,
    102,
    101,
    114,
    112,
    111,
    115,
    105,
    116,
    105,
    118,
    101,
    112,
    114,
    111,
    100,
    117,
    99,
    101,
    100,
    104,
    101,
    114,
    105,
    116,
    97,
    103,
    101,
    115,
    104,
    105,
    112,
    112,
    105,
    110,
    103,
    97,
    98,
    115,
    111,
    108,
    117,
    116,
    101,
    114,
    101,
    99,
    101,
    105,
    118,
    101,
    100,
    114,
    101,
    108,
    101,
    118,
    97,
    110,
    116,
    98,
    117,
    116,
    116,
    111,
    110,
    34,
    32,
    118,
    105,
    111,
    108,
    101,
    110,
    99,
    101,
    97,
    110,
    121,
    119,
    104,
    101,
    114,
    101,
    98,
    101,
    110,
    101,
    102,
    105,
    116,
    115,
    108,
    97,
    117,
    110,
    99,
    104,
    101,
    100,
    114,
    101,
    99,
    101,
    110,
    116,
    108,
    121,
    97,
    108,
    108,
    105,
    97,
    110,
    99,
    101,
    102,
    111,
    108,
    108,
    111,
    119,
    101,
    100,
    109,
    117,
    108,
    116,
    105,
    112,
    108,
    101,
    98,
    117,
    108,
    108,
    101,
    116,
    105,
    110,
    105,
    110,
    99,
    108,
    117,
    100,
    101,
    100,
    111,
    99,
    99,
    117,
    114,
    114,
    101,
    100,
    105,
    110,
    116,
    101,
    114,
    110,
    97,
    108,
    36,
    40,
    116,
    104,
    105,
    115,
    41,
    46,
    114,
    101,
    112,
    117,
    98,
    108,
    105,
    99,
    62,
    60,
    116,
    114,
    62,
    60,
    116,
    100,
    99,
    111,
    110,
    103,
    114,
    101,
    115,
    115,
    114,
    101,
    99,
    111,
    114,
    100,
    101,
    100,
    117,
    108,
    116,
    105,
    109,
    97,
    116,
    101,
    115,
    111,
    108,
    117,
    116,
    105,
    111,
    110,
    60,
    117,
    108,
    32,
    105,
    100,
    61,
    34,
    100,
    105,
    115,
    99,
    111,
    118,
    101,
    114,
    72,
    111,
    109,
    101,
    60,
    47,
    97,
    62,
    119,
    101,
    98,
    115,
    105,
    116,
    101,
    115,
    110,
    101,
    116,
    119,
    111,
    114,
    107,
    115,
    97,
    108,
    116,
    104,
    111,
    117,
    103,
    104,
    101,
    110,
    116,
    105,
    114,
    101,
    108,
    121,
    109,
    101,
    109,
    111,
    114,
    105,
    97,
    108,
    109,
    101,
    115,
    115,
    97,
    103,
    101,
    115,
    99,
    111,
    110,
    116,
    105,
    110,
    117,
    101,
    97,
    99,
    116,
    105,
    118,
    101,
    34,
    62,
    115,
    111,
    109,
    101,
    119,
    104,
    97,
    116,
    118,
    105,
    99,
    116,
    111,
    114,
    105,
    97,
    87,
    101,
    115,
    116,
    101,
    114,
    110,
    32,
    32,
    116,
    105,
    116,
    108,
    101,
    61,
    34,
    76,
    111,
    99,
    97,
    116,
    105,
    111,
    110,
    99,
    111,
    110,
    116,
    114,
    97,
    99,
    116,
    118,
    105,
    115,
    105,
    116,
    111,
    114,
    115,
    68,
    111,
    119,
    110,
    108,
    111,
    97,
    100,
    119,
    105,
    116,
    104,
    111,
    117,
    116,
    32,
    114,
    105,
    103,
    104,
    116,
    34,
    62,
    10,
    109,
    101,
    97,
    115,
    117,
    114,
    101,
    115,
    119,
    105,
    100,
    116,
    104,
    32,
    61,
    32,
    118,
    97,
    114,
    105,
    97,
    98,
    108,
    101,
    105,
    110,
    118,
    111,
    108,
    118,
    101,
    100,
    118,
    105,
    114,
    103,
    105,
    110,
    105,
    97,
    110,
    111,
    114,
    109,
    97,
    108,
    108,
    121,
    104,
    97,
    112,
    112,
    101,
    110,
    101,
    100,
    97,
    99,
    99,
    111,
    117,
    110,
    116,
    115,
    115,
    116,
    97,
    110,
    100,
    105,
    110,
    103,
    110,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    82,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    112,
    114,
    101,
    112,
    97,
    114,
    101,
    100,
    99,
    111,
    110,
    116,
    114,
    111,
    108,
    115,
    97,
    99,
    99,
    117,
    114,
    97,
    116,
    101,
    98,
    105,
    114,
    116,
    104,
    100,
    97,
    121,
    115,
    116,
    114,
    97,
    116,
    101,
    103,
    121,
    111,
    102,
    102,
    105,
    99,
    105,
    97,
    108,
    103,
    114,
    97,
    112,
    104,
    105,
    99,
    115,
    99,
    114,
    105,
    109,
    105,
    110,
    97,
    108,
    112,
    111,
    115,
    115,
    105,
    98,
    108,
    121,
    99,
    111,
    110,
    115,
    117,
    109,
    101,
    114,
    80,
    101,
    114,
    115,
    111,
    110,
    97,
    108,
    115,
    112,
    101,
    97,
    107,
    105,
    110,
    103,
    118,
    97,
    108,
    105,
    100,
    97,
    116,
    101,
    97,
    99,
    104,
    105,
    101,
    118,
    101,
    100,
    46,
    106,
    112,
    103,
    34,
    32,
    47,
    62,
    109,
    97,
    99,
    104,
    105,
    110,
    101,
    115,
    60,
    47,
    104,
    50,
    62,
    10,
    32,
    32,
    107,
    101,
    121,
    119,
    111,
    114,
    100,
    115,
    102,
    114,
    105,
    101,
    110,
    100,
    108,
    121,
    98,
    114,
    111,
    116,
    104,
    101,
    114,
    115,
    99,
    111,
    109,
    98,
    105,
    110,
    101,
    100,
    111,
    114,
    105,
    103,
    105,
    110,
    97,
    108,
    99,
    111,
    109,
    112,
    111,
    115,
    101,
    100,
    101,
    120,
    112,
    101,
    99,
    116,
    101,
    100,
    97,
    100,
    101,
    113,
    117,
    97,
    116,
    101,
    112,
    97,
    107,
    105,
    115,
    116,
    97,
    110,
    102,
    111,
    108,
    108,
    111,
    119,
    34,
    32,
    118,
    97,
    108,
    117,
    97,
    98,
    108,
    101,
    60,
    47,
    108,
    97,
    98,
    101,
    108,
    62,
    114,
    101,
    108,
    97,
    116,
    105,
    118,
    101,
    98,
    114,
    105,
    110,
    103,
    105,
    110,
    103,
    105,
    110,
    99,
    114,
    101,
    97,
    115,
    101,
    103,
    111,
    118,
    101,
    114,
    110,
    111,
    114,
    112,
    108,
    117,
    103,
    105,
    110,
    115,
    47,
    76,
    105,
    115,
    116,
    32,
    111,
    102,
    32,
    72,
    101,
    97,
    100,
    101,
    114,
    34,
    62,
    34,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    32,
    40,
    38,
    113,
    117,
    111,
    116,
    59,
    103,
    114,
    97,
    100,
    117,
    97,
    116,
    101,
    60,
    47,
    104,
    101,
    97,
    100,
    62,
    10,
    99,
    111,
    109,
    109,
    101,
    114,
    99,
    101,
    109,
    97,
    108,
    97,
    121,
    115,
    105,
    97,
    100,
    105,
    114,
    101,
    99,
    116,
    111,
    114,
    109,
    97,
    105,
    110,
    116,
    97,
    105,
    110,
    59,
    104,
    101,
    105,
    103,
    104,
    116,
    58,
    115,
    99,
    104,
    101,
    100,
    117,
    108,
    101,
    99,
    104,
    97,
    110,
    103,
    105,
    110,
    103,
    98,
    97,
    99,
    107,
    32,
    116,
    111,
    32,
    99,
    97,
    116,
    104,
    111,
    108,
    105,
    99,
    112,
    97,
    116,
    116,
    101,
    114,
    110,
    115,
    99,
    111,
    108,
    111,
    114,
    58,
    32,
    35,
    103,
    114,
    101,
    97,
    116,
    101,
    115,
    116,
    115,
    117,
    112,
    112,
    108,
    105,
    101,
    115,
    114,
    101,
    108,
    105,
    97,
    98,
    108,
    101,
    60,
    47,
    117,
    108,
    62,
    10,
    9,
    9,
    60,
    115,
    101,
    108,
    101,
    99,
    116,
    32,
    99,
    105,
    116,
    105,
    122,
    101,
    110,
    115,
    99,
    108,
    111,
    116,
    104,
    105,
    110,
    103,
    119,
    97,
    116,
    99,
    104,
    105,
    110,
    103,
    60,
    108,
    105,
    32,
    105,
    100,
    61,
    34,
    115,
    112,
    101,
    99,
    105,
    102,
    105,
    99,
    99,
    97,
    114,
    114,
    121,
    105,
    110,
    103,
    115,
    101,
    110,
    116,
    101,
    110,
    99,
    101,
    60,
    99,
    101,
    110,
    116,
    101,
    114,
    62,
    99,
    111,
    110,
    116,
    114,
    97,
    115,
    116,
    116,
    104,
    105,
    110,
    107,
    105,
    110,
    103,
    99,
    97,
    116,
    99,
    104,
    40,
    101,
    41,
    115,
    111,
    117,
    116,
    104,
    101,
    114,
    110,
    77,
    105,
    99,
    104,
    97,
    101,
    108,
    32,
    109,
    101,
    114,
    99,
    104,
    97,
    110,
    116,
    99,
    97,
    114,
    111,
    117,
    115,
    101,
    108,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    58,
    105,
    110,
    116,
    101,
    114,
    105,
    111,
    114,
    46,
    115,
    112,
    108,
    105,
    116,
    40,
    34,
    108,
    105,
    122,
    97,
    116,
    105,
    111,
    110,
    79,
    99,
    116,
    111,
    98,
    101,
    114,
    32,
    41,
    123,
    114,
    101,
    116,
    117,
    114,
    110,
    105,
    109,
    112,
    114,
    111,
    118,
    101,
    100,
    45,
    45,
    38,
    103,
    116,
    59,
    10,
    10,
    99,
    111,
    118,
    101,
    114,
    97,
    103,
    101,
    99,
    104,
    97,
    105,
    114,
    109,
    97,
    110,
    46,
    112,
    110,
    103,
    34,
    32,
    47,
    62,
    115,
    117,
    98,
    106,
    101,
    99,
    116,
    115,
    82,
    105,
    99,
    104,
    97,
    114,
    100,
    32,
    119,
    104,
    97,
    116,
    101,
    118,
    101,
    114,
    112,
    114,
    111,
    98,
    97,
    98,
    108,
    121,
    114,
    101,
    99,
    111,
    118,
    101,
    114,
    121,
    98,
    97,
    115,
    101,
    98,
    97,
    108,
    108,
    106,
    117,
    100,
    103,
    109,
    101,
    110,
    116,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    46,
    46,
    99,
    115,
    115,
    34,
    32,
    47,
    62,
    32,
    119,
    101,
    98,
    115,
    105,
    116,
    101,
    114,
    101,
    112,
    111,
    114,
    116,
    101,
    100,
    100,
    101,
    102,
    97,
    117,
    108,
    116,
    34,
    47,
    62,
    60,
    47,
    97,
    62,
    13,
    10,
    101,
    108,
    101,
    99,
    116,
    114,
    105,
    99,
    115,
    99,
    111,
    116,
    108,
    97,
    110,
    100,
    99,
    114,
    101,
    97,
    116,
    105,
    111,
    110,
    113,
    117,
    97,
    110,
    116,
    105,
    116,
    121,
    46,
    32,
    73,
    83,
    66,
    78,
    32,
    48,
    100,
    105,
    100,
    32,
    110,
    111,
    116,
    32,
    105,
    110,
    115,
    116,
    97,
    110,
    99,
    101,
    45,
    115,
    101,
    97,
    114,
    99,
    104,
    45,
    34,
    32,
    108,
    97,
    110,
    103,
    61,
    34,
    115,
    112,
    101,
    97,
    107,
    101,
    114,
    115,
    67,
    111,
    109,
    112,
    117,
    116,
    101,
    114,
    99,
    111,
    110,
    116,
    97,
    105,
    110,
    115,
    97,
    114,
    99,
    104,
    105,
    118,
    101,
    115,
    109,
    105,
    110,
    105,
    115,
    116,
    101,
    114,
    114,
    101,
    97,
    99,
    116,
    105,
    111,
    110,
    100,
    105,
    115,
    99,
    111,
    117,
    110,
    116,
    73,
    116,
    97,
    108,
    105,
    97,
    110,
    111,
    99,
    114,
    105,
    116,
    101,
    114,
    105,
    97,
    115,
    116,
    114,
    111,
    110,
    103,
    108,
    121,
    58,
    32,
    39,
    104,
    116,
    116,
    112,
    58,
    39,
    115,
    99,
    114,
    105,
    112,
    116,
    39,
    99,
    111,
    118,
    101,
    114,
    105,
    110,
    103,
    111,
    102,
    102,
    101,
    114,
    105,
    110,
    103,
    97,
    112,
    112,
    101,
    97,
    114,
    101,
    100,
    66,
    114,
    105,
    116,
    105,
    115,
    104,
    32,
    105,
    100,
    101,
    110,
    116,
    105,
    102,
    121,
    70,
    97,
    99,
    101,
    98,
    111,
    111,
    107,
    110,
    117,
    109,
    101,
    114,
    111,
    117,
    115,
    118,
    101,
    104,
    105,
    99,
    108,
    101,
    115,
    99,
    111,
    110,
    99,
    101,
    114,
    110,
    115,
    65,
    109,
    101,
    114,
    105,
    99,
    97,
    110,
    104,
    97,
    110,
    100,
    108,
    105,
    110,
    103,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    87,
    105,
    108,
    108,
    105,
    97,
    109,
    32,
    112,
    114,
    111,
    118,
    105,
    100,
    101,
    114,
    95,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    97,
    99,
    99,
    117,
    114,
    97,
    99,
    121,
    115,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    97,
    110,
    100,
    101,
    114,
    115,
    111,
    110,
    102,
    108,
    101,
    120,
    105,
    98,
    108,
    101,
    67,
    97,
    116,
    101,
    103,
    111,
    114,
    121,
    108,
    97,
    119,
    114,
    101,
    110,
    99,
    101,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    108,
    97,
    121,
    111,
    117,
    116,
    61,
    34,
    97,
    112,
    112,
    114,
    111,
    118,
    101,
    100,
    32,
    109,
    97,
    120,
    105,
    109,
    117,
    109,
    104,
    101,
    97,
    100,
    101,
    114,
    34,
    62,
    60,
    47,
    116,
    97,
    98,
    108,
    101,
    62,
    83,
    101,
    114,
    118,
    105,
    99,
    101,
    115,
    104,
    97,
    109,
    105,
    108,
    116,
    111,
    110,
    99,
    117,
    114,
    114,
    101,
    110,
    116,
    32,
    99,
    97,
    110,
    97,
    100,
    105,
    97,
    110,
    99,
    104,
    97,
    110,
    110,
    101,
    108,
    115,
    47,
    116,
    104,
    101,
    109,
    101,
    115,
    47,
    47,
    97,
    114,
    116,
    105,
    99,
    108,
    101,
    111,
    112,
    116,
    105,
    111,
    110,
    97,
    108,
    112,
    111,
    114,
    116,
    117,
    103,
    97,
    108,
    118,
    97,
    108,
    117,
    101,
    61,
    34,
    34,
    105,
    110,
    116,
    101,
    114,
    118,
    97,
    108,
    119,
    105,
    114,
    101,
    108,
    101,
    115,
    115,
    101,
    110,
    116,
    105,
    116,
    108,
    101,
    100,
    97,
    103,
    101,
    110,
    99,
    105,
    101,
    115,
    83,
    101,
    97,
    114,
    99,
    104,
    34,
    32,
    109,
    101,
    97,
    115,
    117,
    114,
    101,
    100,
    116,
    104,
    111,
    117,
    115,
    97,
    110,
    100,
    115,
    112,
    101,
    110,
    100,
    105,
    110,
    103,
    38,
    104,
    101,
    108,
    108,
    105,
    112,
    59,
    110,
    101,
    119,
    32,
    68,
    97,
    116,
    101,
    34,
    32,
    115,
    105,
    122,
    101,
    61,
    34,
    112,
    97,
    103,
    101,
    78,
    97,
    109,
    101,
    109,
    105,
    100,
    100,
    108,
    101,
    34,
    32,
    34,
    32,
    47,
    62,
    60,
    47,
    97,
    62,
    104,
    105,
    100,
    100,
    101,
    110,
    34,
    62,
    115,
    101,
    113,
    117,
    101,
    110,
    99,
    101,
    112,
    101,
    114,
    115,
    111,
    110,
    97,
    108,
    111,
    118,
    101,
    114,
    102,
    108,
    111,
    119,
    111,
    112,
    105,
    110,
    105,
    111,
    110,
    115,
    105,
    108,
    108,
    105,
    110,
    111,
    105,
    115,
    108,
    105,
    110,
    107,
    115,
    34,
    62,
    10,
    9,
    60,
    116,
    105,
    116,
    108,
    101,
    62,
    118,
    101,
    114,
    115,
    105,
    111,
    110,
    115,
    115,
    97,
    116,
    117,
    114,
    100,
    97,
    121,
    116,
    101,
    114,
    109,
    105,
    110,
    97,
    108,
    105,
    116,
    101,
    109,
    112,
    114,
    111,
    112,
    101,
    110,
    103,
    105,
    110,
    101,
    101,
    114,
    115,
    101,
    99,
    116,
    105,
    111,
    110,
    115,
    100,
    101,
    115,
    105,
    103,
    110,
    101,
    114,
    112,
    114,
    111,
    112,
    111,
    115,
    97,
    108,
    61,
    34,
    102,
    97,
    108,
    115,
    101,
    34,
    69,
    115,
    112,
    97,
    195,
    177,
    111,
    108,
    114,
    101,
    108,
    101,
    97,
    115,
    101,
    115,
    115,
    117,
    98,
    109,
    105,
    116,
    34,
    32,
    101,
    114,
    38,
    113,
    117,
    111,
    116,
    59,
    97,
    100,
    100,
    105,
    116,
    105,
    111,
    110,
    115,
    121,
    109,
    112,
    116,
    111,
    109,
    115,
    111,
    114,
    105,
    101,
    110,
    116,
    101,
    100,
    114,
    101,
    115,
    111,
    117,
    114,
    99,
    101,
    114,
    105,
    103,
    104,
    116,
    34,
    62,
    60,
    112,
    108,
    101,
    97,
    115,
    117,
    114,
    101,
    115,
    116,
    97,
    116,
    105,
    111,
    110,
    115,
    104,
    105,
    115,
    116,
    111,
    114,
    121,
    46,
    108,
    101,
    97,
    118,
    105,
    110,
    103,
    32,
    32,
    98,
    111,
    114,
    100,
    101,
    114,
    61,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    115,
    99,
    101,
    110,
    116,
    101,
    114,
    34,
    62,
    46,
    10,
    10,
    83,
    111,
    109,
    101,
    32,
    100,
    105,
    114,
    101,
    99,
    116,
    101,
    100,
    115,
    117,
    105,
    116,
    97,
    98,
    108,
    101,
    98,
    117,
    108,
    103,
    97,
    114,
    105,
    97,
    46,
    115,
    104,
    111,
    119,
    40,
    41,
    59,
    100,
    101,
    115,
    105,
    103,
    110,
    101,
    100,
    71,
    101,
    110,
    101,
    114,
    97,
    108,
    32,
    99,
    111,
    110,
    99,
    101,
    112,
    116,
    115,
    69,
    120,
    97,
    109,
    112,
    108,
    101,
    115,
    119,
    105,
    108,
    108,
    105,
    97,
    109,
    115,
    79,
    114,
    105,
    103,
    105,
    110,
    97,
    108,
    34,
    62,
    60,
    115,
    112,
    97,
    110,
    62,
    115,
    101,
    97,
    114,
    99,
    104,
    34,
    62,
    111,
    112,
    101,
    114,
    97,
    116,
    111,
    114,
    114,
    101,
    113,
    117,
    101,
    115,
    116,
    115,
    97,
    32,
    38,
    113,
    117,
    111,
    116,
    59,
    97,
    108,
    108,
    111,
    119,
    105,
    110,
    103,
    68,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    114,
    101,
    118,
    105,
    115,
    105,
    111,
    110,
    46,
    32,
    10,
    10,
    84,
    104,
    101,
    32,
    121,
    111,
    117,
    114,
    115,
    101,
    108,
    102,
    67,
    111,
    110,
    116,
    97,
    99,
    116,
    32,
    109,
    105,
    99,
    104,
    105,
    103,
    97,
    110,
    69,
    110,
    103,
    108,
    105,
    115,
    104,
    32,
    99,
    111,
    108,
    117,
    109,
    98,
    105,
    97,
    112,
    114,
    105,
    111,
    114,
    105,
    116,
    121,
    112,
    114,
    105,
    110,
    116,
    105,
    110,
    103,
    100,
    114,
    105,
    110,
    107,
    105,
    110,
    103,
    102,
    97,
    99,
    105,
    108,
    105,
    116,
    121,
    114,
    101,
    116,
    117,
    114,
    110,
    101,
    100,
    67,
    111,
    110,
    116,
    101,
    110,
    116,
    32,
    111,
    102,
    102,
    105,
    99,
    101,
    114,
    115,
    82,
    117,
    115,
    115,
    105,
    97,
    110,
    32,
    103,
    101,
    110,
    101,
    114,
    97,
    116,
    101,
    45,
    56,
    56,
    53,
    57,
    45,
    49,
    34,
    105,
    110,
    100,
    105,
    99,
    97,
    116,
    101,
    102,
    97,
    109,
    105,
    108,
    105,
    97,
    114,
    32,
    113,
    117,
    97,
    108,
    105,
    116,
    121,
    109,
    97,
    114,
    103,
    105,
    110,
    58,
    48,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    118,
    105,
    101,
    119,
    112,
    111,
    114,
    116,
    99,
    111,
    110,
    116,
    97,
    99,
    116,
    115,
    45,
    116,
    105,
    116,
    108,
    101,
    34,
    62,
    112,
    111,
    114,
    116,
    97,
    98,
    108,
    101,
    46,
    108,
    101,
    110,
    103,
    116,
    104,
    32,
    101,
    108,
    105,
    103,
    105,
    98,
    108,
    101,
    105,
    110,
    118,
    111,
    108,
    118,
    101,
    115,
    97,
    116,
    108,
    97,
    110,
    116,
    105,
    99,
    111,
    110,
    108,
    111,
    97,
    100,
    61,
    34,
    100,
    101,
    102,
    97,
    117,
    108,
    116,
    46,
    115,
    117,
    112,
    112,
    108,
    105,
    101,
    100,
    112,
    97,
    121,
    109,
    101,
    110,
    116,
    115,
    103,
    108,
    111,
    115,
    115,
    97,
    114,
    121,
    10,
    10,
    65,
    102,
    116,
    101,
    114,
    32,
    103,
    117,
    105,
    100,
    97,
    110,
    99,
    101,
    60,
    47,
    116,
    100,
    62,
    60,
    116,
    100,
    101,
    110,
    99,
    111,
    100,
    105,
    110,
    103,
    109,
    105,
    100,
    100,
    108,
    101,
    34,
    62,
    99,
    97,
    109,
    101,
    32,
    116,
    111,
    32,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    115,
    115,
    99,
    111,
    116,
    116,
    105,
    115,
    104,
    106,
    111,
    110,
    97,
    116,
    104,
    97,
    110,
    109,
    97,
    106,
    111,
    114,
    105,
    116,
    121,
    119,
    105,
    100,
    103,
    101,
    116,
    115,
    46,
    99,
    108,
    105,
    110,
    105,
    99,
    97,
    108,
    116,
    104,
    97,
    105,
    108,
    97,
    110,
    100,
    116,
    101,
    97,
    99,
    104,
    101,
    114,
    115,
    60,
    104,
    101,
    97,
    100,
    62,
    10,
    9,
    97,
    102,
    102,
    101,
    99,
    116,
    101,
    100,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    115,
    112,
    111,
    105,
    110,
    116,
    101,
    114,
    59,
    116,
    111,
    83,
    116,
    114,
    105,
    110,
    103,
    60,
    47,
    115,
    109,
    97,
    108,
    108,
    62,
    111,
    107,
    108,
    97,
    104,
    111,
    109,
    97,
    119,
    105,
    108,
    108,
    32,
    98,
    101,
    32,
    105,
    110,
    118,
    101,
    115,
    116,
    111,
    114,
    48,
    34,
    32,
    97,
    108,
    116,
    61,
    34,
    104,
    111,
    108,
    105,
    100,
    97,
    121,
    115,
    82,
    101,
    115,
    111,
    117,
    114,
    99,
    101,
    108,
    105,
    99,
    101,
    110,
    115,
    101,
    100,
    32,
    40,
    119,
    104,
    105,
    99,
    104,
    32,
    46,
    32,
    65,
    102,
    116,
    101,
    114,
    32,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    118,
    105,
    115,
    105,
    116,
    105,
    110,
    103,
    101,
    120,
    112,
    108,
    111,
    114,
    101,
    114,
    112,
    114,
    105,
    109,
    97,
    114,
    121,
    32,
    115,
    101,
    97,
    114,
    99,
    104,
    34,
    32,
    97,
    110,
    100,
    114,
    111,
    105,
    100,
    34,
    113,
    117,
    105,
    99,
    107,
    108,
    121,
    32,
    109,
    101,
    101,
    116,
    105,
    110,
    103,
    115,
    101,
    115,
    116,
    105,
    109,
    97,
    116,
    101,
    59,
    114,
    101,
    116,
    117,
    114,
    110,
    32,
    59,
    99,
    111,
    108,
    111,
    114,
    58,
    35,
    32,
    104,
    101,
    105,
    103,
    104,
    116,
    61,
    97,
    112,
    112,
    114,
    111,
    118,
    97,
    108,
    44,
    32,
    38,
    113,
    117,
    111,
    116,
    59,
    32,
    99,
    104,
    101,
    99,
    107,
    101,
    100,
    46,
    109,
    105,
    110,
    46,
    106,
    115,
    34,
    109,
    97,
    103,
    110,
    101,
    116,
    105,
    99,
    62,
    60,
    47,
    97,
    62,
    60,
    47,
    104,
    102,
    111,
    114,
    101,
    99,
    97,
    115,
    116,
    46,
    32,
    87,
    104,
    105,
    108,
    101,
    32,
    116,
    104,
    117,
    114,
    115,
    100,
    97,
    121,
    100,
    118,
    101,
    114,
    116,
    105,
    115,
    101,
    38,
    101,
    97,
    99,
    117,
    116,
    101,
    59,
    104,
    97,
    115,
    67,
    108,
    97,
    115,
    115,
    101,
    118,
    97,
    108,
    117,
    97,
    116,
    101,
    111,
    114,
    100,
    101,
    114,
    105,
    110,
    103,
    101,
    120,
    105,
    115,
    116,
    105,
    110,
    103,
    112,
    97,
    116,
    105,
    101,
    110,
    116,
    115,
    32,
    79,
    110,
    108,
    105,
    110,
    101,
    32,
    99,
    111,
    108,
    111,
    114,
    97,
    100,
    111,
    79,
    112,
    116,
    105,
    111,
    110,
    115,
    34,
    99,
    97,
    109,
    112,
    98,
    101,
    108,
    108,
    60,
    33,
    45,
    45,
    32,
    101,
    110,
    100,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    60,
    98,
    114,
    32,
    47,
    62,
    13,
    10,
    95,
    112,
    111,
    112,
    117,
    112,
    115,
    124,
    115,
    99,
    105,
    101,
    110,
    99,
    101,
    115,
    44,
    38,
    113,
    117,
    111,
    116,
    59,
    32,
    113,
    117,
    97,
    108,
    105,
    116,
    121,
    32,
    87,
    105,
    110,
    100,
    111,
    119,
    115,
    32,
    97,
    115,
    115,
    105,
    103,
    110,
    101,
    100,
    104,
    101,
    105,
    103,
    104,
    116,
    58,
    32,
    60,
    98,
    32,
    99,
    108,
    97,
    115,
    115,
    108,
    101,
    38,
    113,
    117,
    111,
    116,
    59,
    32,
    118,
    97,
    108,
    117,
    101,
    61,
    34,
    32,
    67,
    111,
    109,
    112,
    97,
    110,
    121,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    115,
    60,
    105,
    102,
    114,
    97,
    109,
    101,
    32,
    98,
    101,
    108,
    105,
    101,
    118,
    101,
    115,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    115,
    109,
    97,
    114,
    115,
    104,
    97,
    108,
    108,
    112,
    97,
    114,
    116,
    32,
    111,
    102,
    32,
    112,
    114,
    111,
    112,
    101,
    114,
    108,
    121,
    41,
    46,
    10,
    10,
    84,
    104,
    101,
    32,
    116,
    97,
    120,
    111,
    110,
    111,
    109,
    121,
    109,
    117,
    99,
    104,
    32,
    111,
    102,
    32,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    10,
    34,
    32,
    100,
    97,
    116,
    97,
    45,
    115,
    114,
    116,
    117,
    103,
    117,
    195,
    170,
    115,
    115,
    99,
    114,
    111,
    108,
    108,
    84,
    111,
    32,
    112,
    114,
    111,
    106,
    101,
    99,
    116,
    60,
    104,
    101,
    97,
    100,
    62,
    13,
    10,
    97,
    116,
    116,
    111,
    114,
    110,
    101,
    121,
    101,
    109,
    112,
    104,
    97,
    115,
    105,
    115,
    115,
    112,
    111,
    110,
    115,
    111,
    114,
    115,
    102,
    97,
    110,
    99,
    121,
    98,
    111,
    120,
    119,
    111,
    114,
    108,
    100,
    39,
    115,
    32,
    119,
    105,
    108,
    100,
    108,
    105,
    102,
    101,
    99,
    104,
    101,
    99,
    107,
    101,
    100,
    61,
    115,
    101,
    115,
    115,
    105,
    111,
    110,
    115,
    112,
    114,
    111,
    103,
    114,
    97,
    109,
    109,
    112,
    120,
    59,
    102,
    111,
    110,
    116,
    45,
    32,
    80,
    114,
    111,
    106,
    101,
    99,
    116,
    106,
    111,
    117,
    114,
    110,
    97,
    108,
    115,
    98,
    101,
    108,
    105,
    101,
    118,
    101,
    100,
    118,
    97,
    99,
    97,
    116,
    105,
    111,
    110,
    116,
    104,
    111,
    109,
    112,
    115,
    111,
    110,
    108,
    105,
    103,
    104,
    116,
    105,
    110,
    103,
    97,
    110,
    100,
    32,
    116,
    104,
    101,
    32,
    115,
    112,
    101,
    99,
    105,
    97,
    108,
    32,
    98,
    111,
    114,
    100,
    101,
    114,
    61,
    48,
    99,
    104,
    101,
    99,
    107,
    105,
    110,
    103,
    60,
    47,
    116,
    98,
    111,
    100,
    121,
    62,
    60,
    98,
    117,
    116,
    116,
    111,
    110,
    32,
    67,
    111,
    109,
    112,
    108,
    101,
    116,
    101,
    99,
    108,
    101,
    97,
    114,
    102,
    105,
    120,
    10,
    60,
    104,
    101,
    97,
    100,
    62,
    10,
    97,
    114,
    116,
    105,
    99,
    108,
    101,
    32,
    60,
    115,
    101,
    99,
    116,
    105,
    111,
    110,
    102,
    105,
    110,
    100,
    105,
    110,
    103,
    115,
    114,
    111,
    108,
    101,
    32,
    105,
    110,
    32,
    112,
    111,
    112,
    117,
    108,
    97,
    114,
    32,
    32,
    79,
    99,
    116,
    111,
    98,
    101,
    114,
    119,
    101,
    98,
    115,
    105,
    116,
    101,
    32,
    101,
    120,
    112,
    111,
    115,
    117,
    114,
    101,
    117,
    115,
    101,
    100,
    32,
    116,
    111,
    32,
    32,
    99,
    104,
    97,
    110,
    103,
    101,
    115,
    111,
    112,
    101,
    114,
    97,
    116,
    101,
    100,
    99,
    108,
    105,
    99,
    107,
    105,
    110,
    103,
    101,
    110,
    116,
    101,
    114,
    105,
    110,
    103,
    99,
    111,
    109,
    109,
    97,
    110,
    100,
    115,
    105,
    110,
    102,
    111,
    114,
    109,
    101,
    100,
    32,
    110,
    117,
    109,
    98,
    101,
    114,
    115,
    32,
    32,
    60,
    47,
    100,
    105,
    118,
    62,
    99,
    114,
    101,
    97,
    116,
    105,
    110,
    103,
    111,
    110,
    83,
    117,
    98,
    109,
    105,
    116,
    109,
    97,
    114,
    121,
    108,
    97,
    110,
    100,
    99,
    111,
    108,
    108,
    101,
    103,
    101,
    115,
    97,
    110,
    97,
    108,
    121,
    116,
    105,
    99,
    108,
    105,
    115,
    116,
    105,
    110,
    103,
    115,
    99,
    111,
    110,
    116,
    97,
    99,
    116,
    46,
    108,
    111,
    103,
    103,
    101,
    100,
    73,
    110,
    97,
    100,
    118,
    105,
    115,
    111,
    114,
    121,
    115,
    105,
    98,
    108,
    105,
    110,
    103,
    115,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    34,
    115,
    38,
    113,
    117,
    111,
    116,
    59,
    41,
    115,
    46,
    32,
    84,
    104,
    105,
    115,
    32,
    112,
    97,
    99,
    107,
    97,
    103,
    101,
    115,
    99,
    104,
    101,
    99,
    107,
    98,
    111,
    120,
    115,
    117,
    103,
    103,
    101,
    115,
    116,
    115,
    112,
    114,
    101,
    103,
    110,
    97,
    110,
    116,
    116,
    111,
    109,
    111,
    114,
    114,
    111,
    119,
    115,
    112,
    97,
    99,
    105,
    110,
    103,
    61,
    105,
    99,
    111,
    110,
    46,
    112,
    110,
    103,
    106,
    97,
    112,
    97,
    110,
    101,
    115,
    101,
    99,
    111,
    100,
    101,
    98,
    97,
    115,
    101,
    98,
    117,
    116,
    116,
    111,
    110,
    34,
    62,
    103,
    97,
    109,
    98,
    108,
    105,
    110,
    103,
    115,
    117,
    99,
    104,
    32,
    97,
    115,
    32,
    44,
    32,
    119,
    104,
    105,
    108,
    101,
    32,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    32,
    109,
    105,
    115,
    115,
    111,
    117,
    114,
    105,
    115,
    112,
    111,
    114,
    116,
    105,
    110,
    103,
    116,
    111,
    112,
    58,
    49,
    112,
    120,
    32,
    46,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    116,
    101,
    110,
    115,
    105,
    111,
    110,
    115,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    50,
    108,
    97,
    122,
    121,
    108,
    111,
    97,
    100,
    110,
    111,
    118,
    101,
    109,
    98,
    101,
    114,
    117,
    115,
    101,
    100,
    32,
    105,
    110,
    32,
    104,
    101,
    105,
    103,
    104,
    116,
    61,
    34,
    99,
    114,
    105,
    112,
    116,
    34,
    62,
    10,
    38,
    110,
    98,
    115,
    112,
    59,
    60,
    47,
    60,
    116,
    114,
    62,
    60,
    116,
    100,
    32,
    104,
    101,
    105,
    103,
    104,
    116,
    58,
    50,
    47,
    112,
    114,
    111,
    100,
    117,
    99,
    116,
    99,
    111,
    117,
    110,
    116,
    114,
    121,
    32,
    105,
    110,
    99,
    108,
    117,
    100,
    101,
    32,
    102,
    111,
    111,
    116,
    101,
    114,
    34,
    32,
    38,
    108,
    116,
    59,
    33,
    45,
    45,
    32,
    116,
    105,
    116,
    108,
    101,
    34,
    62,
    60,
    47,
    106,
    113,
    117,
    101,
    114,
    121,
    46,
    60,
    47,
    102,
    111,
    114,
    109,
    62,
    10,
    40,
    231,
    174,
    128,
    228,
    189,
    147,
    41,
    40,
    231,
    185,
    129,
    233,
    171,
    148,
    41,
    104,
    114,
    118,
    97,
    116,
    115,
    107,
    105,
    105,
    116,
    97,
    108,
    105,
    97,
    110,
    111,
    114,
    111,
    109,
    195,
    162,
    110,
    196,
    131,
    116,
    195,
    188,
    114,
    107,
    195,
    167,
    101,
    216,
    167,
    216,
    177,
    216,
    175,
    217,
    136,
    116,
    97,
    109,
    98,
    105,
    195,
    169,
    110,
    110,
    111,
    116,
    105,
    99,
    105,
    97,
    115,
    109,
    101,
    110,
    115,
    97,
    106,
    101,
    115,
    112,
    101,
    114,
    115,
    111,
    110,
    97,
    115,
    100,
    101,
    114,
    101,
    99,
    104,
    111,
    115,
    110,
    97,
    99,
    105,
    111,
    110,
    97,
    108,
    115,
    101,
    114,
    118,
    105,
    99,
    105,
    111,
    99,
    111,
    110,
    116,
    97,
    99,
    116,
    111,
    117,
    115,
    117,
    97,
    114,
    105,
    111,
    115,
    112,
    114,
    111,
    103,
    114,
    97,
    109,
    97,
    103,
    111,
    98,
    105,
    101,
    114,
    110,
    111,
    101,
    109,
    112,
    114,
    101,
    115,
    97,
    115,
    97,
    110,
    117,
    110,
    99,
    105,
    111,
    115,
    118,
    97,
    108,
    101,
    110,
    99,
    105,
    97,
    99,
    111,
    108,
    111,
    109,
    98,
    105,
    97,
    100,
    101,
    115,
    112,
    117,
    195,
    169,
    115,
    100,
    101,
    112,
    111,
    114,
    116,
    101,
    115,
    112,
    114,
    111,
    121,
    101,
    99,
    116,
    111,
    112,
    114,
    111,
    100,
    117,
    99,
    116,
    111,
    112,
    195,
    186,
    98,
    108,
    105,
    99,
    111,
    110,
    111,
    115,
    111,
    116,
    114,
    111,
    115,
    104,
    105,
    115,
    116,
    111,
    114,
    105,
    97,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    101,
    109,
    105,
    108,
    108,
    111,
    110,
    101,
    115,
    109,
    101,
    100,
    105,
    97,
    110,
    116,
    101,
    112,
    114,
    101,
    103,
    117,
    110,
    116,
    97,
    97,
    110,
    116,
    101,
    114,
    105,
    111,
    114,
    114,
    101,
    99,
    117,
    114,
    115,
    111,
    115,
    112,
    114,
    111,
    98,
    108,
    101,
    109,
    97,
    115,
    97,
    110,
    116,
    105,
    97,
    103,
    111,
    110,
    117,
    101,
    115,
    116,
    114,
    111,
    115,
    111,
    112,
    105,
    110,
    105,
    195,
    179,
    110,
    105,
    109,
    112,
    114,
    105,
    109,
    105,
    114,
    109,
    105,
    101,
    110,
    116,
    114,
    97,
    115,
    97,
    109,
    195,
    169,
    114,
    105,
    99,
    97,
    118,
    101,
    110,
    100,
    101,
    100,
    111,
    114,
    115,
    111,
    99,
    105,
    101,
    100,
    97,
    100,
    114,
    101,
    115,
    112,
    101,
    99,
    116,
    111,
    114,
    101,
    97,
    108,
    105,
    122,
    97,
    114,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    111,
    112,
    97,
    108,
    97,
    98,
    114,
    97,
    115,
    105,
    110,
    116,
    101,
    114,
    195,
    169,
    115,
    101,
    110,
    116,
    111,
    110,
    99,
    101,
    115,
    101,
    115,
    112,
    101,
    99,
    105,
    97,
    108,
    109,
    105,
    101,
    109,
    98,
    114,
    111,
    115,
    114,
    101,
    97,
    108,
    105,
    100,
    97,
    100,
    99,
    195,
    179,
    114,
    100,
    111,
    98,
    97,
    122,
    97,
    114,
    97,
    103,
    111,
    122,
    97,
    112,
    195,
    161,
    103,
    105,
    110,
    97,
    115,
    115,
    111,
    99,
    105,
    97,
    108,
    101,
    115,
    98,
    108,
    111,
    113,
    117,
    101,
    97,
    114,
    103,
    101,
    115,
    116,
    105,
    195,
    179,
    110,
    97,
    108,
    113,
    117,
    105,
    108,
    101,
    114,
    115,
    105,
    115,
    116,
    101,
    109,
    97,
    115,
    99,
    105,
    101,
    110,
    99,
    105,
    97,
    115,
    99,
    111,
    109,
    112,
    108,
    101,
    116,
    111,
    118,
    101,
    114,
    115,
    105,
    195,
    179,
    110,
    99,
    111,
    109,
    112,
    108,
    101,
    116,
    97,
    101,
    115,
    116,
    117,
    100,
    105,
    111,
    115,
    112,
    195,
    186,
    98,
    108,
    105,
    99,
    97,
    111,
    98,
    106,
    101,
    116,
    105,
    118,
    111,
    97,
    108,
    105,
    99,
    97,
    110,
    116,
    101,
    98,
    117,
    115,
    99,
    97,
    100,
    111,
    114,
    99,
    97,
    110,
    116,
    105,
    100,
    97,
    100,
    101,
    110,
    116,
    114,
    97,
    100,
    97,
    115,
    97,
    99,
    99,
    105,
    111,
    110,
    101,
    115,
    97,
    114,
    99,
    104,
    105,
    118,
    111,
    115,
    115,
    117,
    112,
    101,
    114,
    105,
    111,
    114,
    109,
    97,
    121,
    111,
    114,
    195,
    173,
    97,
    97,
    108,
    101,
    109,
    97,
    110,
    105,
    97,
    102,
    117,
    110,
    99,
    105,
    195,
    179,
    110,
    195,
    186,
    108,
    116,
    105,
    109,
    111,
    115,
    104,
    97,
    99,
    105,
    101,
    110,
    100,
    111,
    97,
    113,
    117,
    101,
    108,
    108,
    111,
    115,
    101,
    100,
    105,
    99,
    105,
    195,
    179,
    110,
    102,
    101,
    114,
    110,
    97,
    110,
    100,
    111,
    97,
    109,
    98,
    105,
    101,
    110,
    116,
    101,
    102,
    97,
    99,
    101,
    98,
    111,
    111,
    107,
    110,
    117,
    101,
    115,
    116,
    114,
    97,
    115,
    99,
    108,
    105,
    101,
    110,
    116,
    101,
    115,
    112,
    114,
    111,
    99,
    101,
    115,
    111,
    115,
    98,
    97,
    115,
    116,
    97,
    110,
    116,
    101,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    97,
    114,
    101,
    112,
    111,
    114,
    116,
    97,
    114,
    99,
    111,
    110,
    103,
    114,
    101,
    115,
    111,
    112,
    117,
    98,
    108,
    105,
    99,
    97,
    114,
    99,
    111,
    109,
    101,
    114,
    99,
    105,
    111,
    99,
    111,
    110,
    116,
    114,
    97,
    116,
    111,
    106,
    195,
    179,
    118,
    101,
    110,
    101,
    115,
    100,
    105,
    115,
    116,
    114,
    105,
    116,
    111,
    116,
    195,
    169,
    99,
    110,
    105,
    99,
    97,
    99,
    111,
    110,
    106,
    117,
    110,
    116,
    111,
    101,
    110,
    101,
    114,
    103,
    195,
    173,
    97,
    116,
    114,
    97,
    98,
    97,
    106,
    97,
    114,
    97,
    115,
    116,
    117,
    114,
    105,
    97,
    115,
    114,
    101,
    99,
    105,
    101,
    110,
    116,
    101,
    117,
    116,
    105,
    108,
    105,
    122,
    97,
    114,
    98,
    111,
    108,
    101,
    116,
    195,
    173,
    110,
    115,
    97,
    108,
    118,
    97,
    100,
    111,
    114,
    99,
    111,
    114,
    114,
    101,
    99,
    116,
    97,
    116,
    114,
    97,
    98,
    97,
    106,
    111,
    115,
    112,
    114,
    105,
    109,
    101,
    114,
    111,
    115,
    110,
    101,
    103,
    111,
    99,
    105,
    111,
    115,
    108,
    105,
    98,
    101,
    114,
    116,
    97,
    100,
    100,
    101,
    116,
    97,
    108,
    108,
    101,
    115,
    112,
    97,
    110,
    116,
    97,
    108,
    108,
    97,
    112,
    114,
    195,
    179,
    120,
    105,
    109,
    111,
    97,
    108,
    109,
    101,
    114,
    195,
    173,
    97,
    97,
    110,
    105,
    109,
    97,
    108,
    101,
    115,
    113,
    117,
    105,
    195,
    169,
    110,
    101,
    115,
    99,
    111,
    114,
    97,
    122,
    195,
    179,
    110,
    115,
    101,
    99,
    99,
    105,
    195,
    179,
    110,
    98,
    117,
    115,
    99,
    97,
    110,
    100,
    111,
    111,
    112,
    99,
    105,
    111,
    110,
    101,
    115,
    101,
    120,
    116,
    101,
    114,
    105,
    111,
    114,
    99,
    111,
    110,
    99,
    101,
    112,
    116,
    111,
    116,
    111,
    100,
    97,
    118,
    195,
    173,
    97,
    103,
    97,
    108,
    101,
    114,
    195,
    173,
    97,
    101,
    115,
    99,
    114,
    105,
    98,
    105,
    114,
    109,
    101,
    100,
    105,
    99,
    105,
    110,
    97,
    108,
    105,
    99,
    101,
    110,
    99,
    105,
    97,
    99,
    111,
    110,
    115,
    117,
    108,
    116,
    97,
    97,
    115,
    112,
    101,
    99,
    116,
    111,
    115,
    99,
    114,
    195,
    173,
    116,
    105,
    99,
    97,
    100,
    195,
    179,
    108,
    97,
    114,
    101,
    115,
    106,
    117,
    115,
    116,
    105,
    99,
    105,
    97,
    100,
    101,
    98,
    101,
    114,
    195,
    161,
    110,
    112,
    101,
    114,
    195,
    173,
    111,
    100,
    111,
    110,
    101,
    99,
    101,
    115,
    105,
    116,
    97,
    109,
    97,
    110,
    116,
    101,
    110,
    101,
    114,
    112,
    101,
    113,
    117,
    101,
    195,
    177,
    111,
    114,
    101,
    99,
    105,
    98,
    105,
    100,
    97,
    116,
    114,
    105,
    98,
    117,
    110,
    97,
    108,
    116,
    101,
    110,
    101,
    114,
    105,
    102,
    101,
    99,
    97,
    110,
    99,
    105,
    195,
    179,
    110,
    99,
    97,
    110,
    97,
    114,
    105,
    97,
    115,
    100,
    101,
    115,
    99,
    97,
    114,
    103,
    97,
    100,
    105,
    118,
    101,
    114,
    115,
    111,
    115,
    109,
    97,
    108,
    108,
    111,
    114,
    99,
    97,
    114,
    101,
    113,
    117,
    105,
    101,
    114,
    101,
    116,
    195,
    169,
    99,
    110,
    105,
    99,
    111,
    100,
    101,
    98,
    101,
    114,
    195,
    173,
    97,
    118,
    105,
    118,
    105,
    101,
    110,
    100,
    97,
    102,
    105,
    110,
    97,
    110,
    122,
    97,
    115,
    97,
    100,
    101,
    108,
    97,
    110,
    116,
    101,
    102,
    117,
    110,
    99,
    105,
    111,
    110,
    97,
    99,
    111,
    110,
    115,
    101,
    106,
    111,
    115,
    100,
    105,
    102,
    195,
    173,
    99,
    105,
    108,
    99,
    105,
    117,
    100,
    97,
    100,
    101,
    115,
    97,
    110,
    116,
    105,
    103,
    117,
    97,
    115,
    97,
    118,
    97,
    110,
    122,
    97,
    100,
    97,
    116,
    195,
    169,
    114,
    109,
    105,
    110,
    111,
    117,
    110,
    105,
    100,
    97,
    100,
    101,
    115,
    115,
    195,
    161,
    110,
    99,
    104,
    101,
    122,
    99,
    97,
    109,
    112,
    97,
    195,
    177,
    97,
    115,
    111,
    102,
    116,
    111,
    110,
    105,
    99,
    114,
    101,
    118,
    105,
    115,
    116,
    97,
    115,
    99,
    111,
    110,
    116,
    105,
    101,
    110,
    101,
    115,
    101,
    99,
    116,
    111,
    114,
    101,
    115,
    109,
    111,
    109,
    101,
    110,
    116,
    111,
    115,
    102,
    97,
    99,
    117,
    108,
    116,
    97,
    100,
    99,
    114,
    195,
    169,
    100,
    105,
    116,
    111,
    100,
    105,
    118,
    101,
    114,
    115,
    97,
    115,
    115,
    117,
    112,
    117,
    101,
    115,
    116,
    111,
    102,
    97,
    99,
    116,
    111,
    114,
    101,
    115,
    115,
    101,
    103,
    117,
    110,
    100,
    111,
    115,
    112,
    101,
    113,
    117,
    101,
    195,
    177,
    97,
    208,
    179,
    208,
    190,
    208,
    180,
    208,
    176,
    208,
    181,
    209,
    129,
    208,
    187,
    208,
    184,
    208,
    181,
    209,
    129,
    209,
    130,
    209,
    140,
    208,
    177,
    209,
    139,
    208,
    187,
    208,
    190,
    208,
    177,
    209,
    139,
    209,
    130,
    209,
    140,
    209,
    141,
    209,
    130,
    208,
    190,
    208,
    188,
    208,
    149,
    209,
    129,
    208,
    187,
    208,
    184,
    209,
    130,
    208,
    190,
    208,
    179,
    208,
    190,
    208,
    188,
    208,
    181,
    208,
    189,
    209,
    143,
    208,
    178,
    209,
    129,
    208,
    181,
    209,
    133,
    209,
    141,
    209,
    130,
    208,
    190,
    208,
    185,
    208,
    180,
    208,
    176,
    208,
    182,
    208,
    181,
    208,
    177,
    209,
    139,
    208,
    187,
    208,
    184,
    208,
    179,
    208,
    190,
    208,
    180,
    209,
    131,
    208,
    180,
    208,
    181,
    208,
    189,
    209,
    140,
    209,
    141,
    209,
    130,
    208,
    190,
    209,
    130,
    208,
    177,
    209,
    139,
    208,
    187,
    208,
    176,
    209,
    129,
    208,
    181,
    208,
    177,
    209,
    143,
    208,
    190,
    208,
    180,
    208,
    184,
    208,
    189,
    209,
    129,
    208,
    181,
    208,
    177,
    208,
    181,
    208,
    189,
    208,
    176,
    208,
    180,
    208,
    190,
    209,
    129,
    208,
    176,
    208,
    185,
    209,
    130,
    209,
    132,
    208,
    190,
    209,
    130,
    208,
    190,
    208,
    189,
    208,
    181,
    208,
    179,
    208,
    190,
    209,
    129,
    208,
    178,
    208,
    190,
    208,
    184,
    209,
    129,
    208,
    178,
    208,
    190,
    208,
    185,
    208,
    184,
    208,
    179,
    209,
    128,
    209,
    139,
    209,
    130,
    208,
    190,
    208,
    182,
    208,
    181,
    208,
    178,
    209,
    129,
    208,
    181,
    208,
    188,
    209,
    129,
    208,
    178,
    208,
    190,
    209,
    142,
    208,
    187,
    208,
    184,
    209,
    136,
    209,
    140,
    209,
    141,
    209,
    130,
    208,
    184,
    209,
    133,
    208,
    191,
    208,
    190,
    208,
    186,
    208,
    176,
    208,
    180,
    208,
    189,
    208,
    181,
    208,
    185,
    208,
    180,
    208,
    190,
    208,
    188,
    208,
    176,
    208,
    188,
    208,
    184,
    209,
    128,
    208,
    176,
    208,
    187,
    208,
    184,
    208,
    177,
    208,
    190,
    209,
    130,
    208,
    181,
    208,
    188,
    209,
    131,
    209,
    133,
    208,
    190,
    209,
    130,
    209,
    143,
    208,
    180,
    208,
    178,
    209,
    131,
    209,
    133,
    209,
    129,
    208,
    181,
    209,
    130,
    208,
    184,
    208,
    187,
    209,
    142,
    208,
    180,
    208,
    184,
    208,
    180,
    208,
    181,
    208,
    187,
    208,
    190,
    208,
    188,
    208,
    184,
    209,
    128,
    208,
    181,
    209,
    130,
    208,
    181,
    208,
    177,
    209,
    143,
    209,
    129,
    208,
    178,
    208,
    190,
    208,
    181,
    208,
    178,
    208,
    184,
    208,
    180,
    208,
    181,
    209,
    135,
    208,
    181,
    208,
    179,
    208,
    190,
    209,
    141,
    209,
    130,
    208,
    184,
    208,
    188,
    209,
    129,
    209,
    135,
    208,
    181,
    209,
    130,
    209,
    130,
    208,
    181,
    208,
    188,
    209,
    139,
    209,
    134,
    208,
    181,
    208,
    189,
    209,
    139,
    209,
    129,
    209,
    130,
    208,
    176,
    208,
    187,
    208,
    178,
    208,
    181,
    208,
    180,
    209,
    140,
    209,
    130,
    208,
    181,
    208,
    188,
    208,
    181,
    208,
    178,
    208,
    190,
    208,
    180,
    209,
    139,
    209,
    130,
    208,
    181,
    208,
    177,
    208,
    181,
    208,
    178,
    209,
    139,
    209,
    136,
    208,
    181,
    208,
    189,
    208,
    176,
    208,
    188,
    208,
    184,
    209,
    130,
    208,
    184,
    208,
    191,
    208,
    176,
    209,
    130,
    208,
    190,
    208,
    188,
    209,
    131,
    208,
    191,
    209,
    128,
    208,
    176,
    208,
    178,
    208,
    187,
    208,
    184,
    209,
    134,
    208,
    176,
    208,
    190,
    208,
    180,
    208,
    189,
    208,
    176,
    208,
    179,
    208,
    190,
    208,
    180,
    209,
    139,
    208,
    183,
    208,
    189,
    208,
    176,
    209,
    142,
    208,
    188,
    208,
    190,
    208,
    179,
    209,
    131,
    208,
    180,
    209,
    128,
    209,
    131,
    208,
    179,
    208,
    178,
    209,
    129,
    208,
    181,
    208,
    185,
    208,
    184,
    208,
    180,
    208,
    181,
    209,
    130,
    208,
    186,
    208,
    184,
    208,
    189,
    208,
    190,
    208,
    190,
    208,
    180,
    208,
    189,
    208,
    190,
    208,
    180,
    208,
    181,
    208,
    187,
    208,
    176,
    208,
    180,
    208,
    181,
    208,
    187,
    208,
    181,
    209,
    129,
    209,
    128,
    208,
    190,
    208,
    186,
    208,
    184,
    209,
    142,
    208,
    189,
    209,
    143,
    208,
    178,
    208,
    181,
    209,
    129,
    209,
    140,
    208,
    149,
    209,
    129,
    209,
    130,
    209,
    140,
    209,
    128,
    208,
    176,
    208,
    183,
    208,
    176,
    208,
    189,
    208,
    176,
    209,
    136,
    208,
    184,
    216,
    167,
    217,
    132,
    217,
    132,
    217,
    135,
    216,
    167,
    217,
    132,
    216,
    170,
    217,
    138,
    216,
    172,
    217,
    133,
    217,
    138,
    216,
    185,
    216,
    174,
    216,
    167,
    216,
    181,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    176,
    217,
    138,
    216,
    185,
    217,
    132,
    217,
    138,
    217,
    135,
    216,
    172,
    216,
    175,
    217,
    138,
    216,
    175,
    216,
    167,
    217,
    132,
    216,
    162,
    217,
    134,
    216,
    167,
    217,
    132,
    216,
    177,
    216,
    175,
    216,
    170,
    216,
    173,
    217,
    131,
    217,
    133,
    216,
    181,
    217,
    129,
    216,
    173,
    216,
    169,
    217,
    131,
    216,
    167,
    217,
    134,
    216,
    170,
    216,
    167,
    217,
    132,
    217,
    132,
    217,
    138,
    217,
    138,
    217,
    131,
    217,
    136,
    217,
    134,
    216,
    180,
    216,
    168,
    217,
    131,
    216,
    169,
    217,
    129,
    217,
    138,
    217,
    135,
    216,
    167,
    216,
    168,
    217,
    134,
    216,
    167,
    216,
    170,
    216,
    173,
    217,
    136,
    216,
    167,
    216,
    161,
    216,
    163,
    217,
    131,
    216,
    171,
    216,
    177,
    216,
    174,
    217,
    132,
    216,
    167,
    217,
    132,
    216,
    167,
    217,
    132,
    216,
    173,
    216,
    168,
    216,
    175,
    217,
    132,
    217,
    138,
    217,
    132,
    216,
    175,
    216,
    177,
    217,
    136,
    216,
    179,
    216,
    167,
    216,
    182,
    216,
    186,
    216,
    183,
    216,
    170,
    217,
    131,
    217,
    136,
    217,
    134,
    217,
    135,
    217,
    134,
    216,
    167,
    217,
    131,
    216,
    179,
    216,
    167,
    216,
    173,
    216,
    169,
    217,
    134,
    216,
    167,
    216,
    175,
    217,
    138,
    216,
    167,
    217,
    132,
    216,
    183,
    216,
    168,
    216,
    185,
    217,
    132,
    217,
    138,
    217,
    131,
    216,
    180,
    217,
    131,
    216,
    177,
    216,
    167,
    217,
    138,
    217,
    133,
    217,
    131,
    217,
    134,
    217,
    133,
    217,
    134,
    217,
    135,
    216,
    167,
    216,
    180,
    216,
    177,
    217,
    131,
    216,
    169,
    216,
    177,
    216,
    166,
    217,
    138,
    216,
    179,
    217,
    134,
    216,
    180,
    217,
    138,
    216,
    183,
    217,
    133,
    216,
    167,
    216,
    176,
    216,
    167,
    216,
    167,
    217,
    132,
    217,
    129,
    217,
    134,
    216,
    180,
    216,
    168,
    216,
    167,
    216,
    168,
    216,
    170,
    216,
    185,
    216,
    168,
    216,
    177,
    216,
    177,
    216,
    173,
    217,
    133,
    216,
    169,
    217,
    131,
    216,
    167,
    217,
    129,
    216,
    169,
    217,
    138,
    217,
    130,
    217,
    136,
    217,
    132,
    217,
    133,
    216,
    177,
    217,
    131,
    216,
    178,
    217,
    131,
    217,
    132,
    217,
    133,
    216,
    169,
    216,
    163,
    216,
    173,
    217,
    133,
    216,
    175,
    217,
    130,
    217,
    132,
    216,
    168,
    217,
    138,
    217,
    138,
    216,
    185,
    217,
    134,
    217,
    138,
    216,
    181,
    217,
    136,
    216,
    177,
    216,
    169,
    216,
    183,
    216,
    177,
    217,
    138,
    217,
    130,
    216,
    180,
    216,
    167,
    216,
    177,
    217,
    131,
    216,
    172,
    217,
    136,
    216,
    167,
    217,
    132,
    216,
    163,
    216,
    174,
    216,
    177,
    217,
    137,
    217,
    133,
    216,
    185,
    217,
    134,
    216,
    167,
    216,
    167,
    216,
    168,
    216,
    173,
    216,
    171,
    216,
    185,
    216,
    177,
    217,
    136,
    216,
    182,
    216,
    168,
    216,
    180,
    217,
    131,
    217,
    132,
    217,
    133,
    216,
    179,
    216,
    172,
    217,
    132,
    216,
    168,
    217,
    134,
    216,
    167,
    217,
    134,
    216,
    174,
    216,
    167,
    217,
    132,
    216,
    175,
    217,
    131,
    216,
    170,
    216,
    167,
    216,
    168,
    217,
    131,
    217,
    132,
    217,
    138,
    216,
    169,
    216,
    168,
    216,
    175,
    217,
    136,
    217,
    134,
    216,
    163,
    217,
    138,
    216,
    182,
    216,
    167,
    217,
    138,
    217,
    136,
    216,
    172,
    216,
    175,
    217,
    129,
    216,
    177,
    217,
    138,
    217,
    130,
    217,
    131,
    216,
    170,
    216,
    168,
    216,
    170,
    216,
    163,
    217,
    129,
    216,
    182,
    217,
    132,
    217,
    133,
    216,
    183,
    216,
    168,
    216,
    174,
    216,
    167,
    217,
    131,
    216,
    171,
    216,
    177,
    216,
    168,
    216,
    167,
    216,
    177,
    217,
    131,
    216,
    167,
    217,
    129,
    216,
    182,
    217,
    132,
    216,
    167,
    216,
    173,
    217,
    132,
    217,
    137,
    217,
    134,
    217,
    129,
    216,
    179,
    217,
    135,
    216,
    163,
    217,
    138,
    216,
    167,
    217,
    133,
    216,
    177,
    216,
    175,
    217,
    136,
    216,
    175,
    216,
    163,
    217,
    134,
    217,
    135,
    216,
    167,
    216,
    175,
    217,
    138,
    217,
    134,
    216,
    167,
    216,
    167,
    217,
    132,
    216,
    167,
    217,
    134,
    217,
    133,
    216,
    185,
    216,
    177,
    216,
    182,
    216,
    170,
    216,
    185,
    217,
    132,
    217,
    133,
    216,
    175,
    216,
    167,
    216,
    174,
    217,
    132,
    217,
    133,
    217,
    133,
    217,
    131,
    217,
    134,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    7,
    6,
    5,
    4,
    3,
    2,
    1,
    0,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    15,
    14,
    13,
    12,
    11,
    10,
    9,
    8,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    23,
    22,
    21,
    20,
    19,
    18,
    17,
    16,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    31,
    30,
    29,
    28,
    27,
    26,
    25,
    24,
    255,
    255,
    255,
    255,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    255,
    1,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    255,
    255,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    255,
    255,
    0,
    1,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    1,
    0,
    2,
    0,
    3,
    0,
    4,
    0,
    5,
    0,
    6,
    0,
    7,
    114,
    101,
    115,
    111,
    117,
    114,
    99,
    101,
    115,
    99,
    111,
    117,
    110,
    116,
    114,
    105,
    101,
    115,
    113,
    117,
    101,
    115,
    116,
    105,
    111,
    110,
    115,
    101,
    113,
    117,
    105,
    112,
    109,
    101,
    110,
    116,
    99,
    111,
    109,
    109,
    117,
    110,
    105,
    116,
    121,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    104,
    105,
    103,
    104,
    108,
    105,
    103,
    104,
    116,
    68,
    84,
    68,
    47,
    120,
    104,
    116,
    109,
    108,
    109,
    97,
    114,
    107,
    101,
    116,
    105,
    110,
    103,
    107,
    110,
    111,
    119,
    108,
    101,
    100,
    103,
    101,
    115,
    111,
    109,
    101,
    116,
    104,
    105,
    110,
    103,
    99,
    111,
    110,
    116,
    97,
    105,
    110,
    101,
    114,
    100,
    105,
    114,
    101,
    99,
    116,
    105,
    111,
    110,
    115,
    117,
    98,
    115,
    99,
    114,
    105,
    98,
    101,
    97,
    100,
    118,
    101,
    114,
    116,
    105,
    115,
    101,
    99,
    104,
    97,
    114,
    97,
    99,
    116,
    101,
    114,
    34,
    32,
    118,
    97,
    108,
    117,
    101,
    61,
    34,
    60,
    47,
    115,
    101,
    108,
    101,
    99,
    116,
    62,
    65,
    117,
    115,
    116,
    114,
    97,
    108,
    105,
    97,
    34,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    115,
    105,
    116,
    117,
    97,
    116,
    105,
    111,
    110,
    97,
    117,
    116,
    104,
    111,
    114,
    105,
    116,
    121,
    102,
    111,
    108,
    108,
    111,
    119,
    105,
    110,
    103,
    112,
    114,
    105,
    109,
    97,
    114,
    105,
    108,
    121,
    111,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    99,
    104,
    97,
    108,
    108,
    101,
    110,
    103,
    101,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    101,
    100,
    97,
    110,
    111,
    110,
    121,
    109,
    111,
    117,
    115,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    32,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    115,
    99,
    111,
    109,
    112,
    97,
    110,
    105,
    101,
    115,
    115,
    116,
    114,
    117,
    99,
    116,
    117,
    114,
    101,
    97,
    103,
    114,
    101,
    101,
    109,
    101,
    110,
    116,
    34,
    32,
    116,
    105,
    116,
    108,
    101,
    61,
    34,
    112,
    111,
    116,
    101,
    110,
    116,
    105,
    97,
    108,
    101,
    100,
    117,
    99,
    97,
    116,
    105,
    111,
    110,
    97,
    114,
    103,
    117,
    109,
    101,
    110,
    116,
    115,
    115,
    101,
    99,
    111,
    110,
    100,
    97,
    114,
    121,
    99,
    111,
    112,
    121,
    114,
    105,
    103,
    104,
    116,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    115,
    101,
    120,
    99,
    108,
    117,
    115,
    105,
    118,
    101,
    99,
    111,
    110,
    100,
    105,
    116,
    105,
    111,
    110,
    60,
    47,
    102,
    111,
    114,
    109,
    62,
    13,
    10,
    115,
    116,
    97,
    116,
    101,
    109,
    101,
    110,
    116,
    97,
    116,
    116,
    101,
    110,
    116,
    105,
    111,
    110,
    66,
    105,
    111,
    103,
    114,
    97,
    112,
    104,
    121,
    125,
    32,
    101,
    108,
    115,
    101,
    32,
    123,
    10,
    115,
    111,
    108,
    117,
    116,
    105,
    111,
    110,
    115,
    119,
    104,
    101,
    110,
    32,
    116,
    104,
    101,
    32,
    65,
    110,
    97,
    108,
    121,
    116,
    105,
    99,
    115,
    116,
    101,
    109,
    112,
    108,
    97,
    116,
    101,
    115,
    100,
    97,
    110,
    103,
    101,
    114,
    111,
    117,
    115,
    115,
    97,
    116,
    101,
    108,
    108,
    105,
    116,
    101,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    115,
    112,
    117,
    98,
    108,
    105,
    115,
    104,
    101,
    114,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    116,
    112,
    114,
    111,
    116,
    111,
    116,
    121,
    112,
    101,
    105,
    110,
    102,
    108,
    117,
    101,
    110,
    99,
    101,
    38,
    114,
    97,
    113,
    117,
    111,
    59,
    60,
    47,
    101,
    102,
    102,
    101,
    99,
    116,
    105,
    118,
    101,
    103,
    101,
    110,
    101,
    114,
    97,
    108,
    108,
    121,
    116,
    114,
    97,
    110,
    115,
    102,
    111,
    114,
    109,
    98,
    101,
    97,
    117,
    116,
    105,
    102,
    117,
    108,
    116,
    114,
    97,
    110,
    115,
    112,
    111,
    114,
    116,
    111,
    114,
    103,
    97,
    110,
    105,
    122,
    101,
    100,
    112,
    117,
    98,
    108,
    105,
    115,
    104,
    101,
    100,
    112,
    114,
    111,
    109,
    105,
    110,
    101,
    110,
    116,
    117,
    110,
    116,
    105,
    108,
    32,
    116,
    104,
    101,
    116,
    104,
    117,
    109,
    98,
    110,
    97,
    105,
    108,
    78,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    32,
    46,
    102,
    111,
    99,
    117,
    115,
    40,
    41,
    59,
    111,
    118,
    101,
    114,
    32,
    116,
    104,
    101,
    32,
    109,
    105,
    103,
    114,
    97,
    116,
    105,
    111,
    110,
    97,
    110,
    110,
    111,
    117,
    110,
    99,
    101,
    100,
    102,
    111,
    111,
    116,
    101,
    114,
    34,
    62,
    10,
    101,
    120,
    99,
    101,
    112,
    116,
    105,
    111,
    110,
    108,
    101,
    115,
    115,
    32,
    116,
    104,
    97,
    110,
    101,
    120,
    112,
    101,
    110,
    115,
    105,
    118,
    101,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    102,
    114,
    97,
    109,
    101,
    119,
    111,
    114,
    107,
    116,
    101,
    114,
    114,
    105,
    116,
    111,
    114,
    121,
    110,
    100,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    99,
    117,
    114,
    114,
    101,
    110,
    116,
    108,
    121,
    99,
    108,
    97,
    115,
    115,
    78,
    97,
    109,
    101,
    99,
    114,
    105,
    116,
    105,
    99,
    105,
    115,
    109,
    116,
    114,
    97,
    100,
    105,
    116,
    105,
    111,
    110,
    101,
    108,
    115,
    101,
    119,
    104,
    101,
    114,
    101,
    65,
    108,
    101,
    120,
    97,
    110,
    100,
    101,
    114,
    97,
    112,
    112,
    111,
    105,
    110,
    116,
    101,
    100,
    109,
    97,
    116,
    101,
    114,
    105,
    97,
    108,
    115,
    98,
    114,
    111,
    97,
    100,
    99,
    97,
    115,
    116,
    109,
    101,
    110,
    116,
    105,
    111,
    110,
    101,
    100,
    97,
    102,
    102,
    105,
    108,
    105,
    97,
    116,
    101,
    60,
    47,
    111,
    112,
    116,
    105,
    111,
    110,
    62,
    116,
    114,
    101,
    97,
    116,
    109,
    101,
    110,
    116,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    47,
    100,
    101,
    102,
    97,
    117,
    108,
    116,
    46,
    80,
    114,
    101,
    115,
    105,
    100,
    101,
    110,
    116,
    111,
    110,
    99,
    108,
    105,
    99,
    107,
    61,
    34,
    98,
    105,
    111,
    103,
    114,
    97,
    112,
    104,
    121,
    111,
    116,
    104,
    101,
    114,
    119,
    105,
    115,
    101,
    112,
    101,
    114,
    109,
    97,
    110,
    101,
    110,
    116,
    70,
    114,
    97,
    110,
    195,
    167,
    97,
    105,
    115,
    72,
    111,
    108,
    108,
    121,
    119,
    111,
    111,
    100,
    101,
    120,
    112,
    97,
    110,
    115,
    105,
    111,
    110,
    115,
    116,
    97,
    110,
    100,
    97,
    114,
    100,
    115,
    60,
    47,
    115,
    116,
    121,
    108,
    101,
    62,
    10,
    114,
    101,
    100,
    117,
    99,
    116,
    105,
    111,
    110,
    68,
    101,
    99,
    101,
    109,
    98,
    101,
    114,
    32,
    112,
    114,
    101,
    102,
    101,
    114,
    114,
    101,
    100,
    67,
    97,
    109,
    98,
    114,
    105,
    100,
    103,
    101,
    111,
    112,
    112,
    111,
    110,
    101,
    110,
    116,
    115,
    66,
    117,
    115,
    105,
    110,
    101,
    115,
    115,
    32,
    99,
    111,
    110,
    102,
    117,
    115,
    105,
    111,
    110,
    62,
    10,
    60,
    116,
    105,
    116,
    108,
    101,
    62,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    101,
    100,
    101,
    120,
    112,
    108,
    97,
    105,
    110,
    101,
    100,
    100,
    111,
    101,
    115,
    32,
    110,
    111,
    116,
    32,
    119,
    111,
    114,
    108,
    100,
    119,
    105,
    100,
    101,
    105,
    110,
    116,
    101,
    114,
    102,
    97,
    99,
    101,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    115,
    110,
    101,
    119,
    115,
    112,
    97,
    112,
    101,
    114,
    60,
    47,
    116,
    97,
    98,
    108,
    101,
    62,
    10,
    109,
    111,
    117,
    110,
    116,
    97,
    105,
    110,
    115,
    108,
    105,
    107,
    101,
    32,
    116,
    104,
    101,
    32,
    101,
    115,
    115,
    101,
    110,
    116,
    105,
    97,
    108,
    102,
    105,
    110,
    97,
    110,
    99,
    105,
    97,
    108,
    115,
    101,
    108,
    101,
    99,
    116,
    105,
    111,
    110,
    97,
    99,
    116,
    105,
    111,
    110,
    61,
    34,
    47,
    97,
    98,
    97,
    110,
    100,
    111,
    110,
    101,
    100,
    69,
    100,
    117,
    99,
    97,
    116,
    105,
    111,
    110,
    112,
    97,
    114,
    115,
    101,
    73,
    110,
    116,
    40,
    115,
    116,
    97,
    98,
    105,
    108,
    105,
    116,
    121,
    117,
    110,
    97,
    98,
    108,
    101,
    32,
    116,
    111,
    60,
    47,
    116,
    105,
    116,
    108,
    101,
    62,
    10,
    114,
    101,
    108,
    97,
    116,
    105,
    111,
    110,
    115,
    78,
    111,
    116,
    101,
    32,
    116,
    104,
    97,
    116,
    101,
    102,
    102,
    105,
    99,
    105,
    101,
    110,
    116,
    112,
    101,
    114,
    102,
    111,
    114,
    109,
    101,
    100,
    116,
    119,
    111,
    32,
    121,
    101,
    97,
    114,
    115,
    83,
    105,
    110,
    99,
    101,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    114,
    101,
    102,
    111,
    114,
    101,
    119,
    114,
    97,
    112,
    112,
    101,
    114,
    34,
    62,
    97,
    108,
    116,
    101,
    114,
    110,
    97,
    116,
    101,
    105,
    110,
    99,
    114,
    101,
    97,
    115,
    101,
    100,
    66,
    97,
    116,
    116,
    108,
    101,
    32,
    111,
    102,
    112,
    101,
    114,
    99,
    101,
    105,
    118,
    101,
    100,
    116,
    114,
    121,
    105,
    110,
    103,
    32,
    116,
    111,
    110,
    101,
    99,
    101,
    115,
    115,
    97,
    114,
    121,
    112,
    111,
    114,
    116,
    114,
    97,
    121,
    101,
    100,
    101,
    108,
    101,
    99,
    116,
    105,
    111,
    110,
    115,
    69,
    108,
    105,
    122,
    97,
    98,
    101,
    116,
    104,
    60,
    47,
    105,
    102,
    114,
    97,
    109,
    101,
    62,
    100,
    105,
    115,
    99,
    111,
    118,
    101,
    114,
    121,
    105,
    110,
    115,
    117,
    114,
    97,
    110,
    99,
    101,
    115,
    46,
    108,
    101,
    110,
    103,
    116,
    104,
    59,
    108,
    101,
    103,
    101,
    110,
    100,
    97,
    114,
    121,
    71,
    101,
    111,
    103,
    114,
    97,
    112,
    104,
    121,
    99,
    97,
    110,
    100,
    105,
    100,
    97,
    116,
    101,
    99,
    111,
    114,
    112,
    111,
    114,
    97,
    116,
    101,
    115,
    111,
    109,
    101,
    116,
    105,
    109,
    101,
    115,
    115,
    101,
    114,
    118,
    105,
    99,
    101,
    115,
    46,
    105,
    110,
    104,
    101,
    114,
    105,
    116,
    101,
    100,
    60,
    47,
    115,
    116,
    114,
    111,
    110,
    103,
    62,
    67,
    111,
    109,
    109,
    117,
    110,
    105,
    116,
    121,
    114,
    101,
    108,
    105,
    103,
    105,
    111,
    117,
    115,
    108,
    111,
    99,
    97,
    116,
    105,
    111,
    110,
    115,
    67,
    111,
    109,
    109,
    105,
    116,
    116,
    101,
    101,
    98,
    117,
    105,
    108,
    100,
    105,
    110,
    103,
    115,
    116,
    104,
    101,
    32,
    119,
    111,
    114,
    108,
    100,
    110,
    111,
    32,
    108,
    111,
    110,
    103,
    101,
    114,
    98,
    101,
    103,
    105,
    110,
    110,
    105,
    110,
    103,
    114,
    101,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    99,
    97,
    110,
    110,
    111,
    116,
    32,
    98,
    101,
    102,
    114,
    101,
    113,
    117,
    101,
    110,
    99,
    121,
    116,
    121,
    112,
    105,
    99,
    97,
    108,
    108,
    121,
    105,
    110,
    116,
    111,
    32,
    116,
    104,
    101,
    32,
    114,
    101,
    108,
    97,
    116,
    105,
    118,
    101,
    59,
    114,
    101,
    99,
    111,
    114,
    100,
    105,
    110,
    103,
    112,
    114,
    101,
    115,
    105,
    100,
    101,
    110,
    116,
    105,
    110,
    105,
    116,
    105,
    97,
    108,
    108,
    121,
    116,
    101,
    99,
    104,
    110,
    105,
    113,
    117,
    101,
    116,
    104,
    101,
    32,
    111,
    116,
    104,
    101,
    114,
    105,
    116,
    32,
    99,
    97,
    110,
    32,
    98,
    101,
    101,
    120,
    105,
    115,
    116,
    101,
    110,
    99,
    101,
    117,
    110,
    100,
    101,
    114,
    108,
    105,
    110,
    101,
    116,
    104,
    105,
    115,
    32,
    116,
    105,
    109,
    101,
    116,
    101,
    108,
    101,
    112,
    104,
    111,
    110,
    101,
    105,
    116,
    101,
    109,
    115,
    99,
    111,
    112,
    101,
    112,
    114,
    97,
    99,
    116,
    105,
    99,
    101,
    115,
    97,
    100,
    118,
    97,
    110,
    116,
    97,
    103,
    101,
    41,
    59,
    114,
    101,
    116,
    117,
    114,
    110,
    32,
    70,
    111,
    114,
    32,
    111,
    116,
    104,
    101,
    114,
    112,
    114,
    111,
    118,
    105,
    100,
    105,
    110,
    103,
    100,
    101,
    109,
    111,
    99,
    114,
    97,
    99,
    121,
    98,
    111,
    116,
    104,
    32,
    116,
    104,
    101,
    32,
    101,
    120,
    116,
    101,
    110,
    115,
    105,
    118,
    101,
    115,
    117,
    102,
    102,
    101,
    114,
    105,
    110,
    103,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    101,
    100,
    99,
    111,
    109,
    112,
    117,
    116,
    101,
    114,
    115,
    32,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    112,
    114,
    97,
    99,
    116,
    105,
    99,
    97,
    108,
    115,
    97,
    105,
    100,
    32,
    116,
    104,
    97,
    116,
    105,
    116,
    32,
    109,
    97,
    121,
    32,
    98,
    101,
    69,
    110,
    103,
    108,
    105,
    115,
    104,
    60,
    47,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    101,
    32,
    115,
    99,
    104,
    101,
    100,
    117,
    108,
    101,
    100,
    100,
    111,
    119,
    110,
    108,
    111,
    97,
    100,
    115,
    60,
    47,
    108,
    97,
    98,
    101,
    108,
    62,
    10,
    115,
    117,
    115,
    112,
    101,
    99,
    116,
    101,
    100,
    109,
    97,
    114,
    103,
    105,
    110,
    58,
    32,
    48,
    115,
    112,
    105,
    114,
    105,
    116,
    117,
    97,
    108,
    60,
    47,
    104,
    101,
    97,
    100,
    62,
    10,
    10,
    109,
    105,
    99,
    114,
    111,
    115,
    111,
    102,
    116,
    103,
    114,
    97,
    100,
    117,
    97,
    108,
    108,
    121,
    100,
    105,
    115,
    99,
    117,
    115,
    115,
    101,
    100,
    104,
    101,
    32,
    98,
    101,
    99,
    97,
    109,
    101,
    101,
    120,
    101,
    99,
    117,
    116,
    105,
    118,
    101,
    106,
    113,
    117,
    101,
    114,
    121,
    46,
    106,
    115,
    104,
    111,
    117,
    115,
    101,
    104,
    111,
    108,
    100,
    99,
    111,
    110,
    102,
    105,
    114,
    109,
    101,
    100,
    112,
    117,
    114,
    99,
    104,
    97,
    115,
    101,
    100,
    108,
    105,
    116,
    101,
    114,
    97,
    108,
    108,
    121,
    100,
    101,
    115,
    116,
    114,
    111,
    121,
    101,
    100,
    117,
    112,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    118,
    97,
    114,
    105,
    97,
    116,
    105,
    111,
    110,
    114,
    101,
    109,
    97,
    105,
    110,
    105,
    110,
    103,
    105,
    116,
    32,
    105,
    115,
    32,
    110,
    111,
    116,
    99,
    101,
    110,
    116,
    117,
    114,
    105,
    101,
    115,
    74,
    97,
    112,
    97,
    110,
    101,
    115,
    101,
    32,
    97,
    109,
    111,
    110,
    103,
    32,
    116,
    104,
    101,
    99,
    111,
    109,
    112,
    108,
    101,
    116,
    101,
    100,
    97,
    108,
    103,
    111,
    114,
    105,
    116,
    104,
    109,
    105,
    110,
    116,
    101,
    114,
    101,
    115,
    116,
    115,
    114,
    101,
    98,
    101,
    108,
    108,
    105,
    111,
    110,
    117,
    110,
    100,
    101,
    102,
    105,
    110,
    101,
    100,
    101,
    110,
    99,
    111,
    117,
    114,
    97,
    103,
    101,
    114,
    101,
    115,
    105,
    122,
    97,
    98,
    108,
    101,
    105,
    110,
    118,
    111,
    108,
    118,
    105,
    110,
    103,
    115,
    101,
    110,
    115,
    105,
    116,
    105,
    118,
    101,
    117,
    110,
    105,
    118,
    101,
    114,
    115,
    97,
    108,
    112,
    114,
    111,
    118,
    105,
    115,
    105,
    111,
    110,
    40,
    97,
    108,
    116,
    104,
    111,
    117,
    103,
    104,
    102,
    101,
    97,
    116,
    117,
    114,
    105,
    110,
    103,
    99,
    111,
    110,
    100,
    117,
    99,
    116,
    101,
    100,
    41,
    44,
    32,
    119,
    104,
    105,
    99,
    104,
    32,
    99,
    111,
    110,
    116,
    105,
    110,
    117,
    101,
    100,
    45,
    104,
    101,
    97,
    100,
    101,
    114,
    34,
    62,
    70,
    101,
    98,
    114,
    117,
    97,
    114,
    121,
    32,
    110,
    117,
    109,
    101,
    114,
    111,
    117,
    115,
    32,
    111,
    118,
    101,
    114,
    102,
    108,
    111,
    119,
    58,
    99,
    111,
    109,
    112,
    111,
    110,
    101,
    110,
    116,
    102,
    114,
    97,
    103,
    109,
    101,
    110,
    116,
    115,
    101,
    120,
    99,
    101,
    108,
    108,
    101,
    110,
    116,
    99,
    111,
    108,
    115,
    112,
    97,
    110,
    61,
    34,
    116,
    101,
    99,
    104,
    110,
    105,
    99,
    97,
    108,
    110,
    101,
    97,
    114,
    32,
    116,
    104,
    101,
    32,
    65,
    100,
    118,
    97,
    110,
    99,
    101,
    100,
    32,
    115,
    111,
    117,
    114,
    99,
    101,
    32,
    111,
    102,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    101,
    100,
    72,
    111,
    110,
    103,
    32,
    75,
    111,
    110,
    103,
    32,
    70,
    97,
    99,
    101,
    98,
    111,
    111,
    107,
    109,
    117,
    108,
    116,
    105,
    112,
    108,
    101,
    32,
    109,
    101,
    99,
    104,
    97,
    110,
    105,
    115,
    109,
    101,
    108,
    101,
    118,
    97,
    116,
    105,
    111,
    110,
    111,
    102,
    102,
    101,
    110,
    115,
    105,
    118,
    101,
    60,
    47,
    102,
    111,
    114,
    109,
    62,
    10,
    9,
    115,
    112,
    111,
    110,
    115,
    111,
    114,
    101,
    100,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    111,
    114,
    32,
    38,
    113,
    117,
    111,
    116,
    59,
    116,
    104,
    101,
    114,
    101,
    32,
    97,
    114,
    101,
    116,
    104,
    111,
    115,
    101,
    32,
    119,
    104,
    111,
    109,
    111,
    118,
    101,
    109,
    101,
    110,
    116,
    115,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    101,
    115,
    100,
    105,
    102,
    102,
    105,
    99,
    117,
    108,
    116,
    115,
    117,
    98,
    109,
    105,
    116,
    116,
    101,
    100,
    114,
    101,
    99,
    111,
    109,
    109,
    101,
    110,
    100,
    99,
    111,
    110,
    118,
    105,
    110,
    99,
    101,
    100,
    112,
    114,
    111,
    109,
    111,
    116,
    105,
    110,
    103,
    34,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    46,
    114,
    101,
    112,
    108,
    97,
    99,
    101,
    40,
    99,
    108,
    97,
    115,
    115,
    105,
    99,
    97,
    108,
    99,
    111,
    97,
    108,
    105,
    116,
    105,
    111,
    110,
    104,
    105,
    115,
    32,
    102,
    105,
    114,
    115,
    116,
    100,
    101,
    99,
    105,
    115,
    105,
    111,
    110,
    115,
    97,
    115,
    115,
    105,
    115,
    116,
    97,
    110,
    116,
    105,
    110,
    100,
    105,
    99,
    97,
    116,
    101,
    100,
    101,
    118,
    111,
    108,
    117,
    116,
    105,
    111,
    110,
    45,
    119,
    114,
    97,
    112,
    112,
    101,
    114,
    34,
    101,
    110,
    111,
    117,
    103,
    104,
    32,
    116,
    111,
    97,
    108,
    111,
    110,
    103,
    32,
    116,
    104,
    101,
    100,
    101,
    108,
    105,
    118,
    101,
    114,
    101,
    100,
    45,
    45,
    62,
    13,
    10,
    60,
    33,
    45,
    45,
    65,
    109,
    101,
    114,
    105,
    99,
    97,
    110,
    32,
    112,
    114,
    111,
    116,
    101,
    99,
    116,
    101,
    100,
    78,
    111,
    118,
    101,
    109,
    98,
    101,
    114,
    32,
    60,
    47,
    115,
    116,
    121,
    108,
    101,
    62,
    60,
    102,
    117,
    114,
    110,
    105,
    116,
    117,
    114,
    101,
    73,
    110,
    116,
    101,
    114,
    110,
    101,
    116,
    32,
    32,
    111,
    110,
    98,
    108,
    117,
    114,
    61,
    34,
    115,
    117,
    115,
    112,
    101,
    110,
    100,
    101,
    100,
    114,
    101,
    99,
    105,
    112,
    105,
    101,
    110,
    116,
    98,
    97,
    115,
    101,
    100,
    32,
    111,
    110,
    32,
    77,
    111,
    114,
    101,
    111,
    118,
    101,
    114,
    44,
    97,
    98,
    111,
    108,
    105,
    115,
    104,
    101,
    100,
    99,
    111,
    108,
    108,
    101,
    99,
    116,
    101,
    100,
    119,
    101,
    114,
    101,
    32,
    109,
    97,
    100,
    101,
    101,
    109,
    111,
    116,
    105,
    111,
    110,
    97,
    108,
    101,
    109,
    101,
    114,
    103,
    101,
    110,
    99,
    121,
    110,
    97,
    114,
    114,
    97,
    116,
    105,
    118,
    101,
    97,
    100,
    118,
    111,
    99,
    97,
    116,
    101,
    115,
    112,
    120,
    59,
    98,
    111,
    114,
    100,
    101,
    114,
    99,
    111,
    109,
    109,
    105,
    116,
    116,
    101,
    100,
    100,
    105,
    114,
    61,
    34,
    108,
    116,
    114,
    34,
    101,
    109,
    112,
    108,
    111,
    121,
    101,
    101,
    115,
    114,
    101,
    115,
    101,
    97,
    114,
    99,
    104,
    46,
    32,
    115,
    101,
    108,
    101,
    99,
    116,
    101,
    100,
    115,
    117,
    99,
    99,
    101,
    115,
    115,
    111,
    114,
    99,
    117,
    115,
    116,
    111,
    109,
    101,
    114,
    115,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    101,
    100,
    83,
    101,
    112,
    116,
    101,
    109,
    98,
    101,
    114,
    97,
    100,
    100,
    67,
    108,
    97,
    115,
    115,
    40,
    70,
    97,
    99,
    101,
    98,
    111,
    111,
    107,
    32,
    115,
    117,
    103,
    103,
    101,
    115,
    116,
    101,
    100,
    97,
    110,
    100,
    32,
    108,
    97,
    116,
    101,
    114,
    111,
    112,
    101,
    114,
    97,
    116,
    105,
    110,
    103,
    101,
    108,
    97,
    98,
    111,
    114,
    97,
    116,
    101,
    83,
    111,
    109,
    101,
    116,
    105,
    109,
    101,
    115,
    73,
    110,
    115,
    116,
    105,
    116,
    117,
    116,
    101,
    99,
    101,
    114,
    116,
    97,
    105,
    110,
    108,
    121,
    105,
    110,
    115,
    116,
    97,
    108,
    108,
    101,
    100,
    102,
    111,
    108,
    108,
    111,
    119,
    101,
    114,
    115,
    74,
    101,
    114,
    117,
    115,
    97,
    108,
    101,
    109,
    116,
    104,
    101,
    121,
    32,
    104,
    97,
    118,
    101,
    99,
    111,
    109,
    112,
    117,
    116,
    105,
    110,
    103,
    103,
    101,
    110,
    101,
    114,
    97,
    116,
    101,
    100,
    112,
    114,
    111,
    118,
    105,
    110,
    99,
    101,
    115,
    103,
    117,
    97,
    114,
    97,
    110,
    116,
    101,
    101,
    97,
    114,
    98,
    105,
    116,
    114,
    97,
    114,
    121,
    114,
    101,
    99,
    111,
    103,
    110,
    105,
    122,
    101,
    119,
    97,
    110,
    116,
    101,
    100,
    32,
    116,
    111,
    112,
    120,
    59,
    119,
    105,
    100,
    116,
    104,
    58,
    116,
    104,
    101,
    111,
    114,
    121,
    32,
    111,
    102,
    98,
    101,
    104,
    97,
    118,
    105,
    111,
    117,
    114,
    87,
    104,
    105,
    108,
    101,
    32,
    116,
    104,
    101,
    101,
    115,
    116,
    105,
    109,
    97,
    116,
    101,
    100,
    98,
    101,
    103,
    97,
    110,
    32,
    116,
    111,
    32,
    105,
    116,
    32,
    98,
    101,
    99,
    97,
    109,
    101,
    109,
    97,
    103,
    110,
    105,
    116,
    117,
    100,
    101,
    109,
    117,
    115,
    116,
    32,
    104,
    97,
    118,
    101,
    109,
    111,
    114,
    101,
    32,
    116,
    104,
    97,
    110,
    68,
    105,
    114,
    101,
    99,
    116,
    111,
    114,
    121,
    101,
    120,
    116,
    101,
    110,
    115,
    105,
    111,
    110,
    115,
    101,
    99,
    114,
    101,
    116,
    97,
    114,
    121,
    110,
    97,
    116,
    117,
    114,
    97,
    108,
    108,
    121,
    111,
    99,
    99,
    117,
    114,
    114,
    105,
    110,
    103,
    118,
    97,
    114,
    105,
    97,
    98,
    108,
    101,
    115,
    103,
    105,
    118,
    101,
    110,
    32,
    116,
    104,
    101,
    112,
    108,
    97,
    116,
    102,
    111,
    114,
    109,
    46,
    60,
    47,
    108,
    97,
    98,
    101,
    108,
    62,
    60,
    102,
    97,
    105,
    108,
    101,
    100,
    32,
    116,
    111,
    99,
    111,
    109,
    112,
    111,
    117,
    110,
    100,
    115,
    107,
    105,
    110,
    100,
    115,
    32,
    111,
    102,
    32,
    115,
    111,
    99,
    105,
    101,
    116,
    105,
    101,
    115,
    97,
    108,
    111,
    110,
    103,
    115,
    105,
    100,
    101,
    32,
    45,
    45,
    38,
    103,
    116,
    59,
    10,
    10,
    115,
    111,
    117,
    116,
    104,
    119,
    101,
    115,
    116,
    116,
    104,
    101,
    32,
    114,
    105,
    103,
    104,
    116,
    114,
    97,
    100,
    105,
    97,
    116,
    105,
    111,
    110,
    109,
    97,
    121,
    32,
    104,
    97,
    118,
    101,
    32,
    117,
    110,
    101,
    115,
    99,
    97,
    112,
    101,
    40,
    115,
    112,
    111,
    107,
    101,
    110,
    32,
    105,
    110,
    34,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    47,
    112,
    114,
    111,
    103,
    114,
    97,
    109,
    109,
    101,
    111,
    110,
    108,
    121,
    32,
    116,
    104,
    101,
    32,
    99,
    111,
    109,
    101,
    32,
    102,
    114,
    111,
    109,
    100,
    105,
    114,
    101,
    99,
    116,
    111,
    114,
    121,
    98,
    117,
    114,
    105,
    101,
    100,
    32,
    105,
    110,
    97,
    32,
    115,
    105,
    109,
    105,
    108,
    97,
    114,
    116,
    104,
    101,
    121,
    32,
    119,
    101,
    114,
    101,
    60,
    47,
    102,
    111,
    110,
    116,
    62,
    60,
    47,
    78,
    111,
    114,
    119,
    101,
    103,
    105,
    97,
    110,
    115,
    112,
    101,
    99,
    105,
    102,
    105,
    101,
    100,
    112,
    114,
    111,
    100,
    117,
    99,
    105,
    110,
    103,
    112,
    97,
    115,
    115,
    101,
    110,
    103,
    101,
    114,
    40,
    110,
    101,
    119,
    32,
    68,
    97,
    116,
    101,
    116,
    101,
    109,
    112,
    111,
    114,
    97,
    114,
    121,
    102,
    105,
    99,
    116,
    105,
    111,
    110,
    97,
    108,
    65,
    102,
    116,
    101,
    114,
    32,
    116,
    104,
    101,
    101,
    113,
    117,
    97,
    116,
    105,
    111,
    110,
    115,
    100,
    111,
    119,
    110,
    108,
    111,
    97,
    100,
    46,
    114,
    101,
    103,
    117,
    108,
    97,
    114,
    108,
    121,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    101,
    114,
    97,
    98,
    111,
    118,
    101,
    32,
    116,
    104,
    101,
    108,
    105,
    110,
    107,
    101,
    100,
    32,
    116,
    111,
    112,
    104,
    101,
    110,
    111,
    109,
    101,
    110,
    97,
    112,
    101,
    114,
    105,
    111,
    100,
    32,
    111,
    102,
    116,
    111,
    111,
    108,
    116,
    105,
    112,
    34,
    62,
    115,
    117,
    98,
    115,
    116,
    97,
    110,
    99,
    101,
    97,
    117,
    116,
    111,
    109,
    97,
    116,
    105,
    99,
    97,
    115,
    112,
    101,
    99,
    116,
    32,
    111,
    102,
    65,
    109,
    111,
    110,
    103,
    32,
    116,
    104,
    101,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    101,
    100,
    101,
    115,
    116,
    105,
    109,
    97,
    116,
    101,
    115,
    65,
    105,
    114,
    32,
    70,
    111,
    114,
    99,
    101,
    115,
    121,
    115,
    116,
    101,
    109,
    32,
    111,
    102,
    111,
    98,
    106,
    101,
    99,
    116,
    105,
    118,
    101,
    105,
    109,
    109,
    101,
    100,
    105,
    97,
    116,
    101,
    109,
    97,
    107,
    105,
    110,
    103,
    32,
    105,
    116,
    112,
    97,
    105,
    110,
    116,
    105,
    110,
    103,
    115,
    99,
    111,
    110,
    113,
    117,
    101,
    114,
    101,
    100,
    97,
    114,
    101,
    32,
    115,
    116,
    105,
    108,
    108,
    112,
    114,
    111,
    99,
    101,
    100,
    117,
    114,
    101,
    103,
    114,
    111,
    119,
    116,
    104,
    32,
    111,
    102,
    104,
    101,
    97,
    100,
    101,
    100,
    32,
    98,
    121,
    69,
    117,
    114,
    111,
    112,
    101,
    97,
    110,
    32,
    100,
    105,
    118,
    105,
    115,
    105,
    111,
    110,
    115,
    109,
    111,
    108,
    101,
    99,
    117,
    108,
    101,
    115,
    102,
    114,
    97,
    110,
    99,
    104,
    105,
    115,
    101,
    105,
    110,
    116,
    101,
    110,
    116,
    105,
    111,
    110,
    97,
    116,
    116,
    114,
    97,
    99,
    116,
    101,
    100,
    99,
    104,
    105,
    108,
    100,
    104,
    111,
    111,
    100,
    97,
    108,
    115,
    111,
    32,
    117,
    115,
    101,
    100,
    100,
    101,
    100,
    105,
    99,
    97,
    116,
    101,
    100,
    115,
    105,
    110,
    103,
    97,
    112,
    111,
    114,
    101,
    100,
    101,
    103,
    114,
    101,
    101,
    32,
    111,
    102,
    102,
    97,
    116,
    104,
    101,
    114,
    32,
    111,
    102,
    99,
    111,
    110,
    102,
    108,
    105,
    99,
    116,
    115,
    60,
    47,
    97,
    62,
    60,
    47,
    112,
    62,
    10,
    99,
    97,
    109,
    101,
    32,
    102,
    114,
    111,
    109,
    119,
    101,
    114,
    101,
    32,
    117,
    115,
    101,
    100,
    110,
    111,
    116,
    101,
    32,
    116,
    104,
    97,
    116,
    114,
    101,
    99,
    101,
    105,
    118,
    105,
    110,
    103,
    69,
    120,
    101,
    99,
    117,
    116,
    105,
    118,
    101,
    101,
    118,
    101,
    110,
    32,
    109,
    111,
    114,
    101,
    97,
    99,
    99,
    101,
    115,
    115,
    32,
    116,
    111,
    99,
    111,
    109,
    109,
    97,
    110,
    100,
    101,
    114,
    80,
    111,
    108,
    105,
    116,
    105,
    99,
    97,
    108,
    109,
    117,
    115,
    105,
    99,
    105,
    97,
    110,
    115,
    100,
    101,
    108,
    105,
    99,
    105,
    111,
    117,
    115,
    112,
    114,
    105,
    115,
    111,
    110,
    101,
    114,
    115,
    97,
    100,
    118,
    101,
    110,
    116,
    32,
    111,
    102,
    85,
    84,
    70,
    45,
    56,
    34,
    32,
    47,
    62,
    60,
    33,
    91,
    67,
    68,
    65,
    84,
    65,
    91,
    34,
    62,
    67,
    111,
    110,
    116,
    97,
    99,
    116,
    83,
    111,
    117,
    116,
    104,
    101,
    114,
    110,
    32,
    98,
    103,
    99,
    111,
    108,
    111,
    114,
    61,
    34,
    115,
    101,
    114,
    105,
    101,
    115,
    32,
    111,
    102,
    46,
    32,
    73,
    116,
    32,
    119,
    97,
    115,
    32,
    105,
    110,
    32,
    69,
    117,
    114,
    111,
    112,
    101,
    112,
    101,
    114,
    109,
    105,
    116,
    116,
    101,
    100,
    118,
    97,
    108,
    105,
    100,
    97,
    116,
    101,
    46,
    97,
    112,
    112,
    101,
    97,
    114,
    105,
    110,
    103,
    111,
    102,
    102,
    105,
    99,
    105,
    97,
    108,
    115,
    115,
    101,
    114,
    105,
    111,
    117,
    115,
    108,
    121,
    45,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    105,
    110,
    105,
    116,
    105,
    97,
    116,
    101,
    100,
    101,
    120,
    116,
    101,
    110,
    100,
    105,
    110,
    103,
    108,
    111,
    110,
    103,
    45,
    116,
    101,
    114,
    109,
    105,
    110,
    102,
    108,
    97,
    116,
    105,
    111,
    110,
    115,
    117,
    99,
    104,
    32,
    116,
    104,
    97,
    116,
    103,
    101,
    116,
    67,
    111,
    111,
    107,
    105,
    101,
    109,
    97,
    114,
    107,
    101,
    100,
    32,
    98,
    121,
    60,
    47,
    98,
    117,
    116,
    116,
    111,
    110,
    62,
    105,
    109,
    112,
    108,
    101,
    109,
    101,
    110,
    116,
    98,
    117,
    116,
    32,
    105,
    116,
    32,
    105,
    115,
    105,
    110,
    99,
    114,
    101,
    97,
    115,
    101,
    115,
    100,
    111,
    119,
    110,
    32,
    116,
    104,
    101,
    32,
    114,
    101,
    113,
    117,
    105,
    114,
    105,
    110,
    103,
    100,
    101,
    112,
    101,
    110,
    100,
    101,
    110,
    116,
    45,
    45,
    62,
    10,
    60,
    33,
    45,
    45,
    32,
    105,
    110,
    116,
    101,
    114,
    118,
    105,
    101,
    119,
    87,
    105,
    116,
    104,
    32,
    116,
    104,
    101,
    32,
    99,
    111,
    112,
    105,
    101,
    115,
    32,
    111,
    102,
    99,
    111,
    110,
    115,
    101,
    110,
    115,
    117,
    115,
    119,
    97,
    115,
    32,
    98,
    117,
    105,
    108,
    116,
    86,
    101,
    110,
    101,
    122,
    117,
    101,
    108,
    97,
    40,
    102,
    111,
    114,
    109,
    101,
    114,
    108,
    121,
    116,
    104,
    101,
    32,
    115,
    116,
    97,
    116,
    101,
    112,
    101,
    114,
    115,
    111,
    110,
    110,
    101,
    108,
    115,
    116,
    114,
    97,
    116,
    101,
    103,
    105,
    99,
    102,
    97,
    118,
    111,
    117,
    114,
    32,
    111,
    102,
    105,
    110,
    118,
    101,
    110,
    116,
    105,
    111,
    110,
    87,
    105,
    107,
    105,
    112,
    101,
    100,
    105,
    97,
    99,
    111,
    110,
    116,
    105,
    110,
    101,
    110,
    116,
    118,
    105,
    114,
    116,
    117,
    97,
    108,
    108,
    121,
    119,
    104,
    105,
    99,
    104,
    32,
    119,
    97,
    115,
    112,
    114,
    105,
    110,
    99,
    105,
    112,
    108,
    101,
    67,
    111,
    109,
    112,
    108,
    101,
    116,
    101,
    32,
    105,
    100,
    101,
    110,
    116,
    105,
    99,
    97,
    108,
    115,
    104,
    111,
    119,
    32,
    116,
    104,
    97,
    116,
    112,
    114,
    105,
    109,
    105,
    116,
    105,
    118,
    101,
    97,
    119,
    97,
    121,
    32,
    102,
    114,
    111,
    109,
    109,
    111,
    108,
    101,
    99,
    117,
    108,
    97,
    114,
    112,
    114,
    101,
    99,
    105,
    115,
    101,
    108,
    121,
    100,
    105,
    115,
    115,
    111,
    108,
    118,
    101,
    100,
    85,
    110,
    100,
    101,
    114,
    32,
    116,
    104,
    101,
    118,
    101,
    114,
    115,
    105,
    111,
    110,
    61,
    34,
    62,
    38,
    110,
    98,
    115,
    112,
    59,
    60,
    47,
    73,
    116,
    32,
    105,
    115,
    32,
    116,
    104,
    101,
    32,
    84,
    104,
    105,
    115,
    32,
    105,
    115,
    32,
    119,
    105,
    108,
    108,
    32,
    104,
    97,
    118,
    101,
    111,
    114,
    103,
    97,
    110,
    105,
    115,
    109,
    115,
    115,
    111,
    109,
    101,
    32,
    116,
    105,
    109,
    101,
    70,
    114,
    105,
    101,
    100,
    114,
    105,
    99,
    104,
    119,
    97,
    115,
    32,
    102,
    105,
    114,
    115,
    116,
    116,
    104,
    101,
    32,
    111,
    110,
    108,
    121,
    32,
    102,
    97,
    99,
    116,
    32,
    116,
    104,
    97,
    116,
    102,
    111,
    114,
    109,
    32,
    105,
    100,
    61,
    34,
    112,
    114,
    101,
    99,
    101,
    100,
    105,
    110,
    103,
    84,
    101,
    99,
    104,
    110,
    105,
    99,
    97,
    108,
    112,
    104,
    121,
    115,
    105,
    99,
    105,
    115,
    116,
    111,
    99,
    99,
    117,
    114,
    115,
    32,
    105,
    110,
    110,
    97,
    118,
    105,
    103,
    97,
    116,
    111,
    114,
    115,
    101,
    99,
    116,
    105,
    111,
    110,
    34,
    62,
    115,
    112,
    97,
    110,
    32,
    105,
    100,
    61,
    34,
    115,
    111,
    117,
    103,
    104,
    116,
    32,
    116,
    111,
    98,
    101,
    108,
    111,
    119,
    32,
    116,
    104,
    101,
    115,
    117,
    114,
    118,
    105,
    118,
    105,
    110,
    103,
    125,
    60,
    47,
    115,
    116,
    121,
    108,
    101,
    62,
    104,
    105,
    115,
    32,
    100,
    101,
    97,
    116,
    104,
    97,
    115,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    99,
    97,
    117,
    115,
    101,
    100,
    32,
    98,
    121,
    112,
    97,
    114,
    116,
    105,
    97,
    108,
    108,
    121,
    101,
    120,
    105,
    115,
    116,
    105,
    110,
    103,
    32,
    117,
    115,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    119,
    97,
    115,
    32,
    103,
    105,
    118,
    101,
    110,
    97,
    32,
    108,
    105,
    115,
    116,
    32,
    111,
    102,
    108,
    101,
    118,
    101,
    108,
    115,
    32,
    111,
    102,
    110,
    111,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    79,
    102,
    102,
    105,
    99,
    105,
    97,
    108,
    32,
    100,
    105,
    115,
    109,
    105,
    115,
    115,
    101,
    100,
    115,
    99,
    105,
    101,
    110,
    116,
    105,
    115,
    116,
    114,
    101,
    115,
    101,
    109,
    98,
    108,
    101,
    115,
    100,
    117,
    112,
    108,
    105,
    99,
    97,
    116,
    101,
    101,
    120,
    112,
    108,
    111,
    115,
    105,
    118,
    101,
    114,
    101,
    99,
    111,
    118,
    101,
    114,
    101,
    100,
    97,
    108,
    108,
    32,
    111,
    116,
    104,
    101,
    114,
    103,
    97,
    108,
    108,
    101,
    114,
    105,
    101,
    115,
    123,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    58,
    112,
    101,
    111,
    112,
    108,
    101,
    32,
    111,
    102,
    114,
    101,
    103,
    105,
    111,
    110,
    32,
    111,
    102,
    97,
    100,
    100,
    114,
    101,
    115,
    115,
    101,
    115,
    97,
    115,
    115,
    111,
    99,
    105,
    97,
    116,
    101,
    105,
    109,
    103,
    32,
    97,
    108,
    116,
    61,
    34,
    105,
    110,
    32,
    109,
    111,
    100,
    101,
    114,
    110,
    115,
    104,
    111,
    117,
    108,
    100,
    32,
    98,
    101,
    109,
    101,
    116,
    104,
    111,
    100,
    32,
    111,
    102,
    114,
    101,
    112,
    111,
    114,
    116,
    105,
    110,
    103,
    116,
    105,
    109,
    101,
    115,
    116,
    97,
    109,
    112,
    110,
    101,
    101,
    100,
    101,
    100,
    32,
    116,
    111,
    116,
    104,
    101,
    32,
    71,
    114,
    101,
    97,
    116,
    114,
    101,
    103,
    97,
    114,
    100,
    105,
    110,
    103,
    115,
    101,
    101,
    109,
    101,
    100,
    32,
    116,
    111,
    118,
    105,
    101,
    119,
    101,
    100,
    32,
    97,
    115,
    105,
    109,
    112,
    97,
    99,
    116,
    32,
    111,
    110,
    105,
    100,
    101,
    97,
    32,
    116,
    104,
    97,
    116,
    116,
    104,
    101,
    32,
    87,
    111,
    114,
    108,
    100,
    104,
    101,
    105,
    103,
    104,
    116,
    32,
    111,
    102,
    101,
    120,
    112,
    97,
    110,
    100,
    105,
    110,
    103,
    84,
    104,
    101,
    115,
    101,
    32,
    97,
    114,
    101,
    99,
    117,
    114,
    114,
    101,
    110,
    116,
    34,
    62,
    99,
    97,
    114,
    101,
    102,
    117,
    108,
    108,
    121,
    109,
    97,
    105,
    110,
    116,
    97,
    105,
    110,
    115,
    99,
    104,
    97,
    114,
    103,
    101,
    32,
    111,
    102,
    67,
    108,
    97,
    115,
    115,
    105,
    99,
    97,
    108,
    97,
    100,
    100,
    114,
    101,
    115,
    115,
    101,
    100,
    112,
    114,
    101,
    100,
    105,
    99,
    116,
    101,
    100,
    111,
    119,
    110,
    101,
    114,
    115,
    104,
    105,
    112,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    114,
    105,
    103,
    104,
    116,
    34,
    62,
    13,
    10,
    114,
    101,
    115,
    105,
    100,
    101,
    110,
    99,
    101,
    108,
    101,
    97,
    118,
    101,
    32,
    116,
    104,
    101,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    34,
    62,
    97,
    114,
    101,
    32,
    111,
    102,
    116,
    101,
    110,
    32,
    32,
    125,
    41,
    40,
    41,
    59,
    13,
    10,
    112,
    114,
    111,
    98,
    97,
    98,
    108,
    121,
    32,
    80,
    114,
    111,
    102,
    101,
    115,
    115,
    111,
    114,
    45,
    98,
    117,
    116,
    116,
    111,
    110,
    34,
    32,
    114,
    101,
    115,
    112,
    111,
    110,
    100,
    101,
    100,
    115,
    97,
    121,
    115,
    32,
    116,
    104,
    97,
    116,
    104,
    97,
    100,
    32,
    116,
    111,
    32,
    98,
    101,
    112,
    108,
    97,
    99,
    101,
    100,
    32,
    105,
    110,
    72,
    117,
    110,
    103,
    97,
    114,
    105,
    97,
    110,
    115,
    116,
    97,
    116,
    117,
    115,
    32,
    111,
    102,
    115,
    101,
    114,
    118,
    101,
    115,
    32,
    97,
    115,
    85,
    110,
    105,
    118,
    101,
    114,
    115,
    97,
    108,
    101,
    120,
    101,
    99,
    117,
    116,
    105,
    111,
    110,
    97,
    103,
    103,
    114,
    101,
    103,
    97,
    116,
    101,
    102,
    111,
    114,
    32,
    119,
    104,
    105,
    99,
    104,
    105,
    110,
    102,
    101,
    99,
    116,
    105,
    111,
    110,
    97,
    103,
    114,
    101,
    101,
    100,
    32,
    116,
    111,
    104,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    32,
    112,
    111,
    112,
    117,
    108,
    97,
    114,
    34,
    62,
    112,
    108,
    97,
    99,
    101,
    100,
    32,
    111,
    110,
    99,
    111,
    110,
    115,
    116,
    114,
    117,
    99,
    116,
    101,
    108,
    101,
    99,
    116,
    111,
    114,
    97,
    108,
    115,
    121,
    109,
    98,
    111,
    108,
    32,
    111,
    102,
    105,
    110,
    99,
    108,
    117,
    100,
    105,
    110,
    103,
    114,
    101,
    116,
    117,
    114,
    110,
    32,
    116,
    111,
    97,
    114,
    99,
    104,
    105,
    116,
    101,
    99,
    116,
    67,
    104,
    114,
    105,
    115,
    116,
    105,
    97,
    110,
    112,
    114,
    101,
    118,
    105,
    111,
    117,
    115,
    32,
    108,
    105,
    118,
    105,
    110,
    103,
    32,
    105,
    110,
    101,
    97,
    115,
    105,
    101,
    114,
    32,
    116,
    111,
    112,
    114,
    111,
    102,
    101,
    115,
    115,
    111,
    114,
    10,
    38,
    108,
    116,
    59,
    33,
    45,
    45,
    32,
    101,
    102,
    102,
    101,
    99,
    116,
    32,
    111,
    102,
    97,
    110,
    97,
    108,
    121,
    116,
    105,
    99,
    115,
    119,
    97,
    115,
    32,
    116,
    97,
    107,
    101,
    110,
    119,
    104,
    101,
    114,
    101,
    32,
    116,
    104,
    101,
    116,
    111,
    111,
    107,
    32,
    111,
    118,
    101,
    114,
    98,
    101,
    108,
    105,
    101,
    102,
    32,
    105,
    110,
    65,
    102,
    114,
    105,
    107,
    97,
    97,
    110,
    115,
    97,
    115,
    32,
    102,
    97,
    114,
    32,
    97,
    115,
    112,
    114,
    101,
    118,
    101,
    110,
    116,
    101,
    100,
    119,
    111,
    114,
    107,
    32,
    119,
    105,
    116,
    104,
    97,
    32,
    115,
    112,
    101,
    99,
    105,
    97,
    108,
    60,
    102,
    105,
    101,
    108,
    100,
    115,
    101,
    116,
    67,
    104,
    114,
    105,
    115,
    116,
    109,
    97,
    115,
    82,
    101,
    116,
    114,
    105,
    101,
    118,
    101,
    100,
    10,
    10,
    73,
    110,
    32,
    116,
    104,
    101,
    32,
    98,
    97,
    99,
    107,
    32,
    105,
    110,
    116,
    111,
    110,
    111,
    114,
    116,
    104,
    101,
    97,
    115,
    116,
    109,
    97,
    103,
    97,
    122,
    105,
    110,
    101,
    115,
    62,
    60,
    115,
    116,
    114,
    111,
    110,
    103,
    62,
    99,
    111,
    109,
    109,
    105,
    116,
    116,
    101,
    101,
    103,
    111,
    118,
    101,
    114,
    110,
    105,
    110,
    103,
    103,
    114,
    111,
    117,
    112,
    115,
    32,
    111,
    102,
    115,
    116,
    111,
    114,
    101,
    100,
    32,
    105,
    110,
    101,
    115,
    116,
    97,
    98,
    108,
    105,
    115,
    104,
    97,
    32,
    103,
    101,
    110,
    101,
    114,
    97,
    108,
    105,
    116,
    115,
    32,
    102,
    105,
    114,
    115,
    116,
    116,
    104,
    101,
    105,
    114,
    32,
    111,
    119,
    110,
    112,
    111,
    112,
    117,
    108,
    97,
    116,
    101,
    100,
    97,
    110,
    32,
    111,
    98,
    106,
    101,
    99,
    116,
    67,
    97,
    114,
    105,
    98,
    98,
    101,
    97,
    110,
    97,
    108,
    108,
    111,
    119,
    32,
    116,
    104,
    101,
    100,
    105,
    115,
    116,
    114,
    105,
    99,
    116,
    115,
    119,
    105,
    115,
    99,
    111,
    110,
    115,
    105,
    110,
    108,
    111,
    99,
    97,
    116,
    105,
    111,
    110,
    46,
    59,
    32,
    119,
    105,
    100,
    116,
    104,
    58,
    32,
    105,
    110,
    104,
    97,
    98,
    105,
    116,
    101,
    100,
    83,
    111,
    99,
    105,
    97,
    108,
    105,
    115,
    116,
    74,
    97,
    110,
    117,
    97,
    114,
    121,
    32,
    49,
    60,
    47,
    102,
    111,
    111,
    116,
    101,
    114,
    62,
    115,
    105,
    109,
    105,
    108,
    97,
    114,
    108,
    121,
    99,
    104,
    111,
    105,
    99,
    101,
    32,
    111,
    102,
    116,
    104,
    101,
    32,
    115,
    97,
    109,
    101,
    32,
    115,
    112,
    101,
    99,
    105,
    102,
    105,
    99,
    32,
    98,
    117,
    115,
    105,
    110,
    101,
    115,
    115,
    32,
    84,
    104,
    101,
    32,
    102,
    105,
    114,
    115,
    116,
    46,
    108,
    101,
    110,
    103,
    116,
    104,
    59,
    32,
    100,
    101,
    115,
    105,
    114,
    101,
    32,
    116,
    111,
    100,
    101,
    97,
    108,
    32,
    119,
    105,
    116,
    104,
    115,
    105,
    110,
    99,
    101,
    32,
    116,
    104,
    101,
    117,
    115,
    101,
    114,
    65,
    103,
    101,
    110,
    116,
    99,
    111,
    110,
    99,
    101,
    105,
    118,
    101,
    100,
    105,
    110,
    100,
    101,
    120,
    46,
    112,
    104,
    112,
    97,
    115,
    32,
    38,
    113,
    117,
    111,
    116,
    59,
    101,
    110,
    103,
    97,
    103,
    101,
    32,
    105,
    110,
    114,
    101,
    99,
    101,
    110,
    116,
    108,
    121,
    44,
    102,
    101,
    119,
    32,
    121,
    101,
    97,
    114,
    115,
    119,
    101,
    114,
    101,
    32,
    97,
    108,
    115,
    111,
    10,
    60,
    104,
    101,
    97,
    100,
    62,
    10,
    60,
    101,
    100,
    105,
    116,
    101,
    100,
    32,
    98,
    121,
    97,
    114,
    101,
    32,
    107,
    110,
    111,
    119,
    110,
    99,
    105,
    116,
    105,
    101,
    115,
    32,
    105,
    110,
    97,
    99,
    99,
    101,
    115,
    115,
    107,
    101,
    121,
    99,
    111,
    110,
    100,
    101,
    109,
    110,
    101,
    100,
    97,
    108,
    115,
    111,
    32,
    104,
    97,
    118,
    101,
    115,
    101,
    114,
    118,
    105,
    99,
    101,
    115,
    44,
    102,
    97,
    109,
    105,
    108,
    121,
    32,
    111,
    102,
    83,
    99,
    104,
    111,
    111,
    108,
    32,
    111,
    102,
    99,
    111,
    110,
    118,
    101,
    114,
    116,
    101,
    100,
    110,
    97,
    116,
    117,
    114,
    101,
    32,
    111,
    102,
    32,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    109,
    105,
    110,
    105,
    115,
    116,
    101,
    114,
    115,
    60,
    47,
    111,
    98,
    106,
    101,
    99,
    116,
    62,
    116,
    104,
    101,
    114,
    101,
    32,
    105,
    115,
    32,
    97,
    32,
    112,
    111,
    112,
    117,
    108,
    97,
    114,
    115,
    101,
    113,
    117,
    101,
    110,
    99,
    101,
    115,
    97,
    100,
    118,
    111,
    99,
    97,
    116,
    101,
    100,
    84,
    104,
    101,
    121,
    32,
    119,
    101,
    114,
    101,
    97,
    110,
    121,
    32,
    111,
    116,
    104,
    101,
    114,
    108,
    111,
    99,
    97,
    116,
    105,
    111,
    110,
    61,
    101,
    110,
    116,
    101,
    114,
    32,
    116,
    104,
    101,
    109,
    117,
    99,
    104,
    32,
    109,
    111,
    114,
    101,
    114,
    101,
    102,
    108,
    101,
    99,
    116,
    101,
    100,
    119,
    97,
    115,
    32,
    110,
    97,
    109,
    101,
    100,
    111,
    114,
    105,
    103,
    105,
    110,
    97,
    108,
    32,
    97,
    32,
    116,
    121,
    112,
    105,
    99,
    97,
    108,
    119,
    104,
    101,
    110,
    32,
    116,
    104,
    101,
    121,
    101,
    110,
    103,
    105,
    110,
    101,
    101,
    114,
    115,
    99,
    111,
    117,
    108,
    100,
    32,
    110,
    111,
    116,
    114,
    101,
    115,
    105,
    100,
    101,
    110,
    116,
    115,
    119,
    101,
    100,
    110,
    101,
    115,
    100,
    97,
    121,
    116,
    104,
    101,
    32,
    116,
    104,
    105,
    114,
    100,
    32,
    112,
    114,
    111,
    100,
    117,
    99,
    116,
    115,
    74,
    97,
    110,
    117,
    97,
    114,
    121,
    32,
    50,
    119,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    121,
    97,
    32,
    99,
    101,
    114,
    116,
    97,
    105,
    110,
    114,
    101,
    97,
    99,
    116,
    105,
    111,
    110,
    115,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    111,
    114,
    97,
    102,
    116,
    101,
    114,
    32,
    104,
    105,
    115,
    116,
    104,
    101,
    32,
    108,
    97,
    115,
    116,
    32,
    99,
    111,
    110,
    116,
    97,
    105,
    110,
    101,
    100,
    34,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    60,
    47,
    97,
    62,
    60,
    47,
    116,
    100,
    62,
    100,
    101,
    112,
    101,
    110,
    100,
    32,
    111,
    110,
    115,
    101,
    97,
    114,
    99,
    104,
    34,
    62,
    10,
    112,
    105,
    101,
    99,
    101,
    115,
    32,
    111,
    102,
    99,
    111,
    109,
    112,
    101,
    116,
    105,
    110,
    103,
    82,
    101,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    116,
    101,
    110,
    110,
    101,
    115,
    115,
    101,
    101,
    119,
    104,
    105,
    99,
    104,
    32,
    104,
    97,
    115,
    32,
    118,
    101,
    114,
    115,
    105,
    111,
    110,
    61,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    32,
    60,
    60,
    47,
    104,
    101,
    97,
    100,
    101,
    114,
    62,
    103,
    105,
    118,
    101,
    115,
    32,
    116,
    104,
    101,
    104,
    105,
    115,
    116,
    111,
    114,
    105,
    97,
    110,
    118,
    97,
    108,
    117,
    101,
    61,
    34,
    34,
    62,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    58,
    48,
    118,
    105,
    101,
    119,
    32,
    116,
    104,
    97,
    116,
    116,
    111,
    103,
    101,
    116,
    104,
    101,
    114,
    44,
    116,
    104,
    101,
    32,
    109,
    111,
    115,
    116,
    32,
    119,
    97,
    115,
    32,
    102,
    111,
    117,
    110,
    100,
    115,
    117,
    98,
    115,
    101,
    116,
    32,
    111,
    102,
    97,
    116,
    116,
    97,
    99,
    107,
    32,
    111,
    110,
    99,
    104,
    105,
    108,
    100,
    114,
    101,
    110,
    44,
    112,
    111,
    105,
    110,
    116,
    115,
    32,
    111,
    102,
    112,
    101,
    114,
    115,
    111,
    110,
    97,
    108,
    32,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    58,
    97,
    108,
    108,
    101,
    103,
    101,
    100,
    108,
    121,
    67,
    108,
    101,
    118,
    101,
    108,
    97,
    110,
    100,
    119,
    97,
    115,
    32,
    108,
    97,
    116,
    101,
    114,
    97,
    110,
    100,
    32,
    97,
    102,
    116,
    101,
    114,
    97,
    114,
    101,
    32,
    103,
    105,
    118,
    101,
    110,
    119,
    97,
    115,
    32,
    115,
    116,
    105,
    108,
    108,
    115,
    99,
    114,
    111,
    108,
    108,
    105,
    110,
    103,
    100,
    101,
    115,
    105,
    103,
    110,
    32,
    111,
    102,
    109,
    97,
    107,
    101,
    115,
    32,
    116,
    104,
    101,
    109,
    117,
    99,
    104,
    32,
    108,
    101,
    115,
    115,
    65,
    109,
    101,
    114,
    105,
    99,
    97,
    110,
    115,
    46,
    10,
    10,
    65,
    102,
    116,
    101,
    114,
    32,
    44,
    32,
    98,
    117,
    116,
    32,
    116,
    104,
    101,
    77,
    117,
    115,
    101,
    117,
    109,
    32,
    111,
    102,
    108,
    111,
    117,
    105,
    115,
    105,
    97,
    110,
    97,
    40,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    101,
    109,
    105,
    110,
    110,
    101,
    115,
    111,
    116,
    97,
    112,
    97,
    114,
    116,
    105,
    99,
    108,
    101,
    115,
    97,
    32,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    68,
    111,
    109,
    105,
    110,
    105,
    99,
    97,
    110,
    118,
    111,
    108,
    117,
    109,
    101,
    32,
    111,
    102,
    114,
    101,
    116,
    117,
    114,
    110,
    105,
    110,
    103,
    100,
    101,
    102,
    101,
    110,
    115,
    105,
    118,
    101,
    48,
    48,
    112,
    120,
    124,
    114,
    105,
    103,
    104,
    109,
    97,
    100,
    101,
    32,
    102,
    114,
    111,
    109,
    109,
    111,
    117,
    115,
    101,
    111,
    118,
    101,
    114,
    34,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    115,
    116,
    97,
    116,
    101,
    115,
    32,
    111,
    102,
    40,
    119,
    104,
    105,
    99,
    104,
    32,
    105,
    115,
    99,
    111,
    110,
    116,
    105,
    110,
    117,
    101,
    115,
    70,
    114,
    97,
    110,
    99,
    105,
    115,
    99,
    111,
    98,
    117,
    105,
    108,
    100,
    105,
    110,
    103,
    32,
    119,
    105,
    116,
    104,
    111,
    117,
    116,
    32,
    97,
    119,
    105,
    116,
    104,
    32,
    115,
    111,
    109,
    101,
    119,
    104,
    111,
    32,
    119,
    111,
    117,
    108,
    100,
    97,
    32,
    102,
    111,
    114,
    109,
    32,
    111,
    102,
    97,
    32,
    112,
    97,
    114,
    116,
    32,
    111,
    102,
    98,
    101,
    102,
    111,
    114,
    101,
    32,
    105,
    116,
    107,
    110,
    111,
    119,
    110,
    32,
    97,
    115,
    32,
    32,
    83,
    101,
    114,
    118,
    105,
    99,
    101,
    115,
    108,
    111,
    99,
    97,
    116,
    105,
    111,
    110,
    32,
    97,
    110,
    100,
    32,
    111,
    102,
    116,
    101,
    110,
    109,
    101,
    97,
    115,
    117,
    114,
    105,
    110,
    103,
    97,
    110,
    100,
    32,
    105,
    116,
    32,
    105,
    115,
    112,
    97,
    112,
    101,
    114,
    98,
    97,
    99,
    107,
    118,
    97,
    108,
    117,
    101,
    115,
    32,
    111,
    102,
    13,
    10,
    60,
    116,
    105,
    116,
    108,
    101,
    62,
    61,
    32,
    119,
    105,
    110,
    100,
    111,
    119,
    46,
    100,
    101,
    116,
    101,
    114,
    109,
    105,
    110,
    101,
    101,
    114,
    38,
    113,
    117,
    111,
    116,
    59,
    32,
    112,
    108,
    97,
    121,
    101,
    100,
    32,
    98,
    121,
    97,
    110,
    100,
    32,
    101,
    97,
    114,
    108,
    121,
    60,
    47,
    99,
    101,
    110,
    116,
    101,
    114,
    62,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    105,
    115,
    116,
    104,
    101,
    32,
    116,
    104,
    114,
    101,
    101,
    112,
    111,
    119,
    101,
    114,
    32,
    97,
    110,
    100,
    111,
    102,
    32,
    38,
    113,
    117,
    111,
    116,
    59,
    105,
    110,
    110,
    101,
    114,
    72,
    84,
    77,
    76,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    121,
    58,
    105,
    110,
    108,
    105,
    110,
    101,
    59,
    67,
    104,
    117,
    114,
    99,
    104,
    32,
    111,
    102,
    116,
    104,
    101,
    32,
    101,
    118,
    101,
    110,
    116,
    118,
    101,
    114,
    121,
    32,
    104,
    105,
    103,
    104,
    111,
    102,
    102,
    105,
    99,
    105,
    97,
    108,
    32,
    45,
    104,
    101,
    105,
    103,
    104,
    116,
    58,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    47,
    99,
    103,
    105,
    45,
    98,
    105,
    110,
    47,
    116,
    111,
    32,
    99,
    114,
    101,
    97,
    116,
    101,
    97,
    102,
    114,
    105,
    107,
    97,
    97,
    110,
    115,
    101,
    115,
    112,
    101,
    114,
    97,
    110,
    116,
    111,
    102,
    114,
    97,
    110,
    195,
    167,
    97,
    105,
    115,
    108,
    97,
    116,
    118,
    105,
    101,
    197,
    161,
    117,
    108,
    105,
    101,
    116,
    117,
    118,
    105,
    197,
    179,
    196,
    140,
    101,
    197,
    161,
    116,
    105,
    110,
    97,
    196,
    141,
    101,
    197,
    161,
    116,
    105,
    110,
    97,
    224,
    185,
    132,
    224,
    184,
    151,
    224,
    184,
    162,
    230,
    151,
    165,
    230,
    156,
    172,
    232,
    170,
    158,
    231,
    174,
    128,
    228,
    189,
    147,
    229,
    173,
    151,
    231,
    185,
    129,
    233,
    171,
    148,
    229,
    173,
    151,
    237,
    149,
    156,
    234,
    181,
    173,
    236,
    150,
    180,
    228,
    184,
    186,
    228,
    187,
    128,
    228,
    185,
    136,
    232,
    174,
    161,
    231,
    174,
    151,
    230,
    156,
    186,
    231,
    172,
    148,
    232,
    174,
    176,
    230,
    156,
    172,
    232,
    168,
    142,
    232,
    171,
    150,
    229,
    141,
    128,
    230,
    156,
    141,
    229,
    138,
    161,
    229,
    153,
    168,
    228,
    186,
    146,
    232,
    129,
    148,
    231,
    189,
    145,
    230,
    136,
    191,
    229,
    156,
    176,
    228,
    186,
    167,
    228,
    191,
    177,
    228,
    185,
    144,
    233,
    131,
    168,
    229,
    135,
    186,
    231,
    137,
    136,
    231,
    164,
    190,
    230,
    142,
    146,
    232,
    161,
    140,
    230,
    166,
    156,
    233,
    131,
    168,
    232,
    144,
    189,
    230,
    160,
    188,
    232,
    191,
    155,
    228,
    184,
    128,
    230,
    173,
    165,
    230,
    148,
    175,
    228,
    187,
    152,
    229,
    174,
    157,
    233,
    170,
    140,
    232,
    175,
    129,
    231,
    160,
    129,
    229,
    167,
    148,
    229,
    145,
    152,
    228,
    188,
    154,
    230,
    149,
    176,
    230,
    141,
    174,
    229,
    186,
    147,
    230,
    182,
    136,
    232,
    180,
    185,
    232,
    128,
    133,
    229,
    138,
    158,
    229,
    133,
    172,
    229,
    174,
    164,
    232,
    174,
    168,
    232,
    174,
    186,
    229,
    140,
    186,
    230,
    183,
    177,
    229,
    156,
    179,
    229,
    184,
    130,
    230,
    146,
    173,
    230,
    148,
    190,
    229,
    153,
    168,
    229,
    140,
    151,
    228,
    186,
    172,
    229,
    184,
    130,
    229,
    164,
    167,
    229,
    173,
    166,
    231,
    148,
    159,
    232,
    182,
    138,
    230,
    157,
    165,
    232,
    182,
    138,
    231,
    174,
    161,
    231,
    144,
    134,
    229,
    145,
    152,
    228,
    191,
    161,
    230,
    129,
    175,
    231,
    189,
    145,
    115,
    101,
    114,
    118,
    105,
    99,
    105,
    111,
    115,
    97,
    114,
    116,
    195,
    173,
    99,
    117,
    108,
    111,
    97,
    114,
    103,
    101,
    110,
    116,
    105,
    110,
    97,
    98,
    97,
    114,
    99,
    101,
    108,
    111,
    110,
    97,
    99,
    117,
    97,
    108,
    113,
    117,
    105,
    101,
    114,
    112,
    117,
    98,
    108,
    105,
    99,
    97,
    100,
    111,
    112,
    114,
    111,
    100,
    117,
    99,
    116,
    111,
    115,
    112,
    111,
    108,
    195,
    173,
    116,
    105,
    99,
    97,
    114,
    101,
    115,
    112,
    117,
    101,
    115,
    116,
    97,
    119,
    105,
    107,
    105,
    112,
    101,
    100,
    105,
    97,
    115,
    105,
    103,
    117,
    105,
    101,
    110,
    116,
    101,
    98,
    195,
    186,
    115,
    113,
    117,
    101,
    100,
    97,
    99,
    111,
    109,
    117,
    110,
    105,
    100,
    97,
    100,
    115,
    101,
    103,
    117,
    114,
    105,
    100,
    97,
    100,
    112,
    114,
    105,
    110,
    99,
    105,
    112,
    97,
    108,
    112,
    114,
    101,
    103,
    117,
    110,
    116,
    97,
    115,
    99,
    111,
    110,
    116,
    101,
    110,
    105,
    100,
    111,
    114,
    101,
    115,
    112,
    111,
    110,
    100,
    101,
    114,
    118,
    101,
    110,
    101,
    122,
    117,
    101,
    108,
    97,
    112,
    114,
    111,
    98,
    108,
    101,
    109,
    97,
    115,
    100,
    105,
    99,
    105,
    101,
    109,
    98,
    114,
    101,
    114,
    101,
    108,
    97,
    99,
    105,
    195,
    179,
    110,
    110,
    111,
    118,
    105,
    101,
    109,
    98,
    114,
    101,
    115,
    105,
    109,
    105,
    108,
    97,
    114,
    101,
    115,
    112,
    114,
    111,
    121,
    101,
    99,
    116,
    111,
    115,
    112,
    114,
    111,
    103,
    114,
    97,
    109,
    97,
    115,
    105,
    110,
    115,
    116,
    105,
    116,
    117,
    116,
    111,
    97,
    99,
    116,
    105,
    118,
    105,
    100,
    97,
    100,
    101,
    110,
    99,
    117,
    101,
    110,
    116,
    114,
    97,
    101,
    99,
    111,
    110,
    111,
    109,
    195,
    173,
    97,
    105,
    109,
    195,
    161,
    103,
    101,
    110,
    101,
    115,
    99,
    111,
    110,
    116,
    97,
    99,
    116,
    97,
    114,
    100,
    101,
    115,
    99,
    97,
    114,
    103,
    97,
    114,
    110,
    101,
    99,
    101,
    115,
    97,
    114,
    105,
    111,
    97,
    116,
    101,
    110,
    99,
    105,
    195,
    179,
    110,
    116,
    101,
    108,
    195,
    169,
    102,
    111,
    110,
    111,
    99,
    111,
    109,
    105,
    115,
    105,
    195,
    179,
    110,
    99,
    97,
    110,
    99,
    105,
    111,
    110,
    101,
    115,
    99,
    97,
    112,
    97,
    99,
    105,
    100,
    97,
    100,
    101,
    110,
    99,
    111,
    110,
    116,
    114,
    97,
    114,
    97,
    110,
    195,
    161,
    108,
    105,
    115,
    105,
    115,
    102,
    97,
    118,
    111,
    114,
    105,
    116,
    111,
    115,
    116,
    195,
    169,
    114,
    109,
    105,
    110,
    111,
    115,
    112,
    114,
    111,
    118,
    105,
    110,
    99,
    105,
    97,
    101,
    116,
    105,
    113,
    117,
    101,
    116,
    97,
    115,
    101,
    108,
    101,
    109,
    101,
    110,
    116,
    111,
    115,
    102,
    117,
    110,
    99,
    105,
    111,
    110,
    101,
    115,
    114,
    101,
    115,
    117,
    108,
    116,
    97,
    100,
    111,
    99,
    97,
    114,
    195,
    161,
    99,
    116,
    101,
    114,
    112,
    114,
    111,
    112,
    105,
    101,
    100,
    97,
    100,
    112,
    114,
    105,
    110,
    99,
    105,
    112,
    105,
    111,
    110,
    101,
    99,
    101,
    115,
    105,
    100,
    97,
    100,
    109,
    117,
    110,
    105,
    99,
    105,
    112,
    97,
    108,
    99,
    114,
    101,
    97,
    99,
    105,
    195,
    179,
    110,
    100,
    101,
    115,
    99,
    97,
    114,
    103,
    97,
    115,
    112,
    114,
    101,
    115,
    101,
    110,
    99,
    105,
    97,
    99,
    111,
    109,
    101,
    114,
    99,
    105,
    97,
    108,
    111,
    112,
    105,
    110,
    105,
    111,
    110,
    101,
    115,
    101,
    106,
    101,
    114,
    99,
    105,
    99,
    105,
    111,
    101,
    100,
    105,
    116,
    111,
    114,
    105,
    97,
    108,
    115,
    97,
    108,
    97,
    109,
    97,
    110,
    99,
    97,
    103,
    111,
    110,
    122,
    195,
    161,
    108,
    101,
    122,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    111,
    112,
    101,
    108,
    195,
    173,
    99,
    117,
    108,
    97,
    114,
    101,
    99,
    105,
    101,
    110,
    116,
    101,
    115,
    103,
    101,
    110,
    101,
    114,
    97,
    108,
    101,
    115,
    116,
    97,
    114,
    114,
    97,
    103,
    111,
    110,
    97,
    112,
    114,
    195,
    161,
    99,
    116,
    105,
    99,
    97,
    110,
    111,
    118,
    101,
    100,
    97,
    100,
    101,
    115,
    112,
    114,
    111,
    112,
    117,
    101,
    115,
    116,
    97,
    112,
    97,
    99,
    105,
    101,
    110,
    116,
    101,
    115,
    116,
    195,
    169,
    99,
    110,
    105,
    99,
    97,
    115,
    111,
    98,
    106,
    101,
    116,
    105,
    118,
    111,
    115,
    99,
    111,
    110,
    116,
    97,
    99,
    116,
    111,
    115,
    224,
    164,
    174,
    224,
    165,
    135,
    224,
    164,
    130,
    224,
    164,
    178,
    224,
    164,
    191,
    224,
    164,
    143,
    224,
    164,
    185,
    224,
    165,
    136,
    224,
    164,
    130,
    224,
    164,
    151,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    184,
    224,
    164,
    190,
    224,
    164,
    165,
    224,
    164,
    143,
    224,
    164,
    181,
    224,
    164,
    130,
    224,
    164,
    176,
    224,
    164,
    185,
    224,
    165,
    135,
    224,
    164,
    149,
    224,
    165,
    139,
    224,
    164,
    136,
    224,
    164,
    149,
    224,
    165,
    129,
    224,
    164,
    155,
    224,
    164,
    176,
    224,
    164,
    185,
    224,
    164,
    190,
    224,
    164,
    172,
    224,
    164,
    190,
    224,
    164,
    166,
    224,
    164,
    149,
    224,
    164,
    185,
    224,
    164,
    190,
    224,
    164,
    184,
    224,
    164,
    173,
    224,
    165,
    128,
    224,
    164,
    185,
    224,
    165,
    129,
    224,
    164,
    143,
    224,
    164,
    176,
    224,
    164,
    185,
    224,
    165,
    128,
    224,
    164,
    174,
    224,
    165,
    136,
    224,
    164,
    130,
    224,
    164,
    166,
    224,
    164,
    191,
    224,
    164,
    168,
    224,
    164,
    172,
    224,
    164,
    190,
    224,
    164,
    164,
    100,
    105,
    112,
    108,
    111,
    100,
    111,
    99,
    115,
    224,
    164,
    184,
    224,
    164,
    174,
    224,
    164,
    175,
    224,
    164,
    176,
    224,
    165,
    130,
    224,
    164,
    170,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    174,
    224,
    164,
    170,
    224,
    164,
    164,
    224,
    164,
    190,
    224,
    164,
    171,
    224,
    164,
    191,
    224,
    164,
    176,
    224,
    164,
    148,
    224,
    164,
    184,
    224,
    164,
    164,
    224,
    164,
    164,
    224,
    164,
    176,
    224,
    164,
    185,
    224,
    164,
    178,
    224,
    165,
    139,
    224,
    164,
    151,
    224,
    164,
    185,
    224,
    165,
    129,
    224,
    164,
    134,
    224,
    164,
    172,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    166,
    224,
    165,
    135,
    224,
    164,
    182,
    224,
    164,
    185,
    224,
    165,
    129,
    224,
    164,
    136,
    224,
    164,
    150,
    224,
    165,
    135,
    224,
    164,
    178,
    224,
    164,
    175,
    224,
    164,
    166,
    224,
    164,
    191,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    174,
    224,
    164,
    181,
    224,
    165,
    135,
    224,
    164,
    172,
    224,
    164,
    164,
    224,
    165,
    128,
    224,
    164,
    168,
    224,
    164,
    172,
    224,
    165,
    128,
    224,
    164,
    154,
    224,
    164,
    174,
    224,
    165,
    140,
    224,
    164,
    164,
    224,
    164,
    184,
    224,
    164,
    190,
    224,
    164,
    178,
    224,
    164,
    178,
    224,
    165,
    135,
    224,
    164,
    150,
    224,
    164,
    156,
    224,
    165,
    137,
    224,
    164,
    172,
    224,
    164,
    174,
    224,
    164,
    166,
    224,
    164,
    166,
    224,
    164,
    164,
    224,
    164,
    165,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    164,
    185,
    224,
    165,
    128,
    224,
    164,
    182,
    224,
    164,
    185,
    224,
    164,
    176,
    224,
    164,
    133,
    224,
    164,
    178,
    224,
    164,
    151,
    224,
    164,
    149,
    224,
    164,
    173,
    224,
    165,
    128,
    224,
    164,
    168,
    224,
    164,
    151,
    224,
    164,
    176,
    224,
    164,
    170,
    224,
    164,
    190,
    224,
    164,
    184,
    224,
    164,
    176,
    224,
    164,
    190,
    224,
    164,
    164,
    224,
    164,
    149,
    224,
    164,
    191,
    224,
    164,
    143,
    224,
    164,
    137,
    224,
    164,
    184,
    224,
    165,
    135,
    224,
    164,
    151,
    224,
    164,
    175,
    224,
    165,
    128,
    224,
    164,
    185,
    224,
    165,
    130,
    224,
    164,
    129,
    224,
    164,
    134,
    224,
    164,
    151,
    224,
    165,
    135,
    224,
    164,
    159,
    224,
    165,
    128,
    224,
    164,
    174,
    224,
    164,
    150,
    224,
    165,
    139,
    224,
    164,
    156,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    133,
    224,
    164,
    173,
    224,
    165,
    128,
    224,
    164,
    151,
    224,
    164,
    175,
    224,
    165,
    135,
    224,
    164,
    164,
    224,
    165,
    129,
    224,
    164,
    174,
    224,
    164,
    181,
    224,
    165,
    139,
    224,
    164,
    159,
    224,
    164,
    166,
    224,
    165,
    135,
    224,
    164,
    130,
    224,
    164,
    133,
    224,
    164,
    151,
    224,
    164,
    176,
    224,
    164,
    144,
    224,
    164,
    184,
    224,
    165,
    135,
    224,
    164,
    174,
    224,
    165,
    135,
    224,
    164,
    178,
    224,
    164,
    178,
    224,
    164,
    151,
    224,
    164,
    190,
    224,
    164,
    185,
    224,
    164,
    190,
    224,
    164,
    178,
    224,
    164,
    138,
    224,
    164,
    170,
    224,
    164,
    176,
    224,
    164,
    154,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    144,
    224,
    164,
    184,
    224,
    164,
    190,
    224,
    164,
    166,
    224,
    165,
    135,
    224,
    164,
    176,
    224,
    164,
    156,
    224,
    164,
    191,
    224,
    164,
    184,
    224,
    164,
    166,
    224,
    164,
    191,
    224,
    164,
    178,
    224,
    164,
    172,
    224,
    164,
    130,
    224,
    164,
    166,
    224,
    164,
    172,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    185,
    224,
    165,
    130,
    224,
    164,
    130,
    224,
    164,
    178,
    224,
    164,
    190,
    224,
    164,
    150,
    224,
    164,
    156,
    224,
    165,
    128,
    224,
    164,
    164,
    224,
    164,
    172,
    224,
    164,
    159,
    224,
    164,
    168,
    224,
    164,
    174,
    224,
    164,
    191,
    224,
    164,
    178,
    224,
    164,
    135,
    224,
    164,
    184,
    224,
    165,
    135,
    224,
    164,
    134,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    168,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    149,
    224,
    165,
    129,
    224,
    164,
    178,
    224,
    164,
    178,
    224,
    165,
    137,
    224,
    164,
    151,
    224,
    164,
    173,
    224,
    164,
    190,
    224,
    164,
    151,
    224,
    164,
    176,
    224,
    165,
    135,
    224,
    164,
    178,
    224,
    164,
    156,
    224,
    164,
    151,
    224,
    164,
    185,
    224,
    164,
    176,
    224,
    164,
    190,
    224,
    164,
    174,
    224,
    164,
    178,
    224,
    164,
    151,
    224,
    165,
    135,
    224,
    164,
    170,
    224,
    165,
    135,
    224,
    164,
    156,
    224,
    164,
    185,
    224,
    164,
    190,
    224,
    164,
    165,
    224,
    164,
    135,
    224,
    164,
    184,
    224,
    165,
    128,
    224,
    164,
    184,
    224,
    164,
    185,
    224,
    165,
    128,
    224,
    164,
    149,
    224,
    164,
    178,
    224,
    164,
    190,
    224,
    164,
    160,
    224,
    165,
    128,
    224,
    164,
    149,
    224,
    164,
    185,
    224,
    164,
    190,
    224,
    164,
    129,
    224,
    164,
    166,
    224,
    165,
    130,
    224,
    164,
    176,
    224,
    164,
    164,
    224,
    164,
    185,
    224,
    164,
    164,
    224,
    164,
    184,
    224,
    164,
    190,
    224,
    164,
    164,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    166,
    224,
    164,
    134,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    170,
    224,
    164,
    190,
    224,
    164,
    149,
    224,
    164,
    149,
    224,
    165,
    140,
    224,
    164,
    168,
    224,
    164,
    182,
    224,
    164,
    190,
    224,
    164,
    174,
    224,
    164,
    166,
    224,
    165,
    135,
    224,
    164,
    150,
    224,
    164,
    175,
    224,
    164,
    185,
    224,
    165,
    128,
    224,
    164,
    176,
    224,
    164,
    190,
    224,
    164,
    175,
    224,
    164,
    150,
    224,
    165,
    129,
    224,
    164,
    166,
    224,
    164,
    178,
    224,
    164,
    151,
    224,
    165,
    128,
    99,
    97,
    116,
    101,
    103,
    111,
    114,
    105,
    101,
    115,
    101,
    120,
    112,
    101,
    114,
    105,
    101,
    110,
    99,
    101,
    60,
    47,
    116,
    105,
    116,
    108,
    101,
    62,
    13,
    10,
    67,
    111,
    112,
    121,
    114,
    105,
    103,
    104,
    116,
    32,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    112,
    116,
    99,
    111,
    110,
    100,
    105,
    116,
    105,
    111,
    110,
    115,
    101,
    118,
    101,
    114,
    121,
    116,
    104,
    105,
    110,
    103,
    60,
    112,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    116,
    101,
    99,
    104,
    110,
    111,
    108,
    111,
    103,
    121,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    60,
    97,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    109,
    97,
    110,
    97,
    103,
    101,
    109,
    101,
    110,
    116,
    38,
    99,
    111,
    112,
    121,
    59,
    32,
    50,
    48,
    49,
    106,
    97,
    118,
    97,
    83,
    99,
    114,
    105,
    112,
    116,
    99,
    104,
    97,
    114,
    97,
    99,
    116,
    101,
    114,
    115,
    98,
    114,
    101,
    97,
    100,
    99,
    114,
    117,
    109,
    98,
    116,
    104,
    101,
    109,
    115,
    101,
    108,
    118,
    101,
    115,
    104,
    111,
    114,
    105,
    122,
    111,
    110,
    116,
    97,
    108,
    103,
    111,
    118,
    101,
    114,
    110,
    109,
    101,
    110,
    116,
    67,
    97,
    108,
    105,
    102,
    111,
    114,
    110,
    105,
    97,
    97,
    99,
    116,
    105,
    118,
    105,
    116,
    105,
    101,
    115,
    100,
    105,
    115,
    99,
    111,
    118,
    101,
    114,
    101,
    100,
    78,
    97,
    118,
    105,
    103,
    97,
    116,
    105,
    111,
    110,
    116,
    114,
    97,
    110,
    115,
    105,
    116,
    105,
    111,
    110,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    110,
    97,
    118,
    105,
    103,
    97,
    116,
    105,
    111,
    110,
    97,
    112,
    112,
    101,
    97,
    114,
    97,
    110,
    99,
    101,
    60,
    47,
    116,
    105,
    116,
    108,
    101,
    62,
    60,
    109,
    99,
    104,
    101,
    99,
    107,
    98,
    111,
    120,
    34,
    32,
    116,
    101,
    99,
    104,
    110,
    105,
    113,
    117,
    101,
    115,
    112,
    114,
    111,
    116,
    101,
    99,
    116,
    105,
    111,
    110,
    97,
    112,
    112,
    97,
    114,
    101,
    110,
    116,
    108,
    121,
    97,
    115,
    32,
    119,
    101,
    108,
    108,
    32,
    97,
    115,
    117,
    110,
    116,
    39,
    44,
    32,
    39,
    85,
    65,
    45,
    114,
    101,
    115,
    111,
    108,
    117,
    116,
    105,
    111,
    110,
    111,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    115,
    116,
    101,
    108,
    101,
    118,
    105,
    115,
    105,
    111,
    110,
    116,
    114,
    97,
    110,
    115,
    108,
    97,
    116,
    101,
    100,
    87,
    97,
    115,
    104,
    105,
    110,
    103,
    116,
    111,
    110,
    110,
    97,
    118,
    105,
    103,
    97,
    116,
    111,
    114,
    46,
    32,
    61,
    32,
    119,
    105,
    110,
    100,
    111,
    119,
    46,
    105,
    109,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    38,
    108,
    116,
    59,
    98,
    114,
    38,
    103,
    116,
    59,
    108,
    105,
    116,
    101,
    114,
    97,
    116,
    117,
    114,
    101,
    112,
    111,
    112,
    117,
    108,
    97,
    116,
    105,
    111,
    110,
    98,
    103,
    99,
    111,
    108,
    111,
    114,
    61,
    34,
    35,
    101,
    115,
    112,
    101,
    99,
    105,
    97,
    108,
    108,
    121,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    112,
    114,
    111,
    100,
    117,
    99,
    116,
    105,
    111,
    110,
    110,
    101,
    119,
    115,
    108,
    101,
    116,
    116,
    101,
    114,
    112,
    114,
    111,
    112,
    101,
    114,
    116,
    105,
    101,
    115,
    100,
    101,
    102,
    105,
    110,
    105,
    116,
    105,
    111,
    110,
    108,
    101,
    97,
    100,
    101,
    114,
    115,
    104,
    105,
    112,
    84,
    101,
    99,
    104,
    110,
    111,
    108,
    111,
    103,
    121,
    80,
    97,
    114,
    108,
    105,
    97,
    109,
    101,
    110,
    116,
    99,
    111,
    109,
    112,
    97,
    114,
    105,
    115,
    111,
    110,
    117,
    108,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    46,
    105,
    110,
    100,
    101,
    120,
    79,
    102,
    40,
    34,
    99,
    111,
    110,
    99,
    108,
    117,
    115,
    105,
    111,
    110,
    100,
    105,
    115,
    99,
    117,
    115,
    115,
    105,
    111,
    110,
    99,
    111,
    109,
    112,
    111,
    110,
    101,
    110,
    116,
    115,
    98,
    105,
    111,
    108,
    111,
    103,
    105,
    99,
    97,
    108,
    82,
    101,
    118,
    111,
    108,
    117,
    116,
    105,
    111,
    110,
    95,
    99,
    111,
    110,
    116,
    97,
    105,
    110,
    101,
    114,
    117,
    110,
    100,
    101,
    114,
    115,
    116,
    111,
    111,
    100,
    110,
    111,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    60,
    112,
    101,
    114,
    109,
    105,
    115,
    115,
    105,
    111,
    110,
    101,
    97,
    99,
    104,
    32,
    111,
    116,
    104,
    101,
    114,
    97,
    116,
    109,
    111,
    115,
    112,
    104,
    101,
    114,
    101,
    32,
    111,
    110,
    102,
    111,
    99,
    117,
    115,
    61,
    34,
    60,
    102,
    111,
    114,
    109,
    32,
    105,
    100,
    61,
    34,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    105,
    110,
    103,
    116,
    104,
    105,
    115,
    46,
    118,
    97,
    108,
    117,
    101,
    103,
    101,
    110,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    67,
    111,
    110,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    115,
    117,
    98,
    115,
    101,
    113,
    117,
    101,
    110,
    116,
    119,
    101,
    108,
    108,
    45,
    107,
    110,
    111,
    119,
    110,
    118,
    97,
    114,
    105,
    97,
    116,
    105,
    111,
    110,
    115,
    114,
    101,
    112,
    117,
    116,
    97,
    116,
    105,
    111,
    110,
    112,
    104,
    101,
    110,
    111,
    109,
    101,
    110,
    111,
    110,
    100,
    105,
    115,
    99,
    105,
    112,
    108,
    105,
    110,
    101,
    108,
    111,
    103,
    111,
    46,
    112,
    110,
    103,
    34,
    32,
    40,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    44,
    98,
    111,
    117,
    110,
    100,
    97,
    114,
    105,
    101,
    115,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    115,
    101,
    116,
    116,
    108,
    101,
    109,
    101,
    110,
    116,
    66,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    111,
    117,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    101,
    110,
    116,
    101,
    114,
    112,
    114,
    105,
    115,
    101,
    40,
    34,
    104,
    116,
    116,
    112,
    115,
    58,
    34,
    32,
    117,
    110,
    101,
    115,
    99,
    97,
    112,
    101,
    40,
    34,
    112,
    97,
    115,
    115,
    119,
    111,
    114,
    100,
    34,
    32,
    100,
    101,
    109,
    111,
    99,
    114,
    97,
    116,
    105,
    99,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    47,
    119,
    114,
    97,
    112,
    112,
    101,
    114,
    34,
    62,
    10,
    109,
    101,
    109,
    98,
    101,
    114,
    115,
    104,
    105,
    112,
    108,
    105,
    110,
    103,
    117,
    105,
    115,
    116,
    105,
    99,
    112,
    120,
    59,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    112,
    104,
    105,
    108,
    111,
    115,
    111,
    112,
    104,
    121,
    97,
    115,
    115,
    105,
    115,
    116,
    97,
    110,
    99,
    101,
    117,
    110,
    105,
    118,
    101,
    114,
    115,
    105,
    116,
    121,
    102,
    97,
    99,
    105,
    108,
    105,
    116,
    105,
    101,
    115,
    114,
    101,
    99,
    111,
    103,
    110,
    105,
    122,
    101,
    100,
    112,
    114,
    101,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    105,
    102,
    32,
    40,
    116,
    121,
    112,
    101,
    111,
    102,
    109,
    97,
    105,
    110,
    116,
    97,
    105,
    110,
    101,
    100,
    118,
    111,
    99,
    97,
    98,
    117,
    108,
    97,
    114,
    121,
    104,
    121,
    112,
    111,
    116,
    104,
    101,
    115,
    105,
    115,
    46,
    115,
    117,
    98,
    109,
    105,
    116,
    40,
    41,
    59,
    38,
    97,
    109,
    112,
    59,
    110,
    98,
    115,
    112,
    59,
    97,
    110,
    110,
    111,
    116,
    97,
    116,
    105,
    111,
    110,
    98,
    101,
    104,
    105,
    110,
    100,
    32,
    116,
    104,
    101,
    70,
    111,
    117,
    110,
    100,
    97,
    116,
    105,
    111,
    110,
    112,
    117,
    98,
    108,
    105,
    115,
    104,
    101,
    114,
    34,
    97,
    115,
    115,
    117,
    109,
    112,
    116,
    105,
    111,
    110,
    105,
    110,
    116,
    114,
    111,
    100,
    117,
    99,
    101,
    100,
    99,
    111,
    114,
    114,
    117,
    112,
    116,
    105,
    111,
    110,
    115,
    99,
    105,
    101,
    110,
    116,
    105,
    115,
    116,
    115,
    101,
    120,
    112,
    108,
    105,
    99,
    105,
    116,
    108,
    121,
    105,
    110,
    115,
    116,
    101,
    97,
    100,
    32,
    111,
    102,
    100,
    105,
    109,
    101,
    110,
    115,
    105,
    111,
    110,
    115,
    32,
    111,
    110,
    67,
    108,
    105,
    99,
    107,
    61,
    34,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    101,
    100,
    100,
    101,
    112,
    97,
    114,
    116,
    109,
    101,
    110,
    116,
    111,
    99,
    99,
    117,
    112,
    97,
    116,
    105,
    111,
    110,
    115,
    111,
    111,
    110,
    32,
    97,
    102,
    116,
    101,
    114,
    105,
    110,
    118,
    101,
    115,
    116,
    109,
    101,
    110,
    116,
    112,
    114,
    111,
    110,
    111,
    117,
    110,
    99,
    101,
    100,
    105,
    100,
    101,
    110,
    116,
    105,
    102,
    105,
    101,
    100,
    101,
    120,
    112,
    101,
    114,
    105,
    109,
    101,
    110,
    116,
    77,
    97,
    110,
    97,
    103,
    101,
    109,
    101,
    110,
    116,
    103,
    101,
    111,
    103,
    114,
    97,
    112,
    104,
    105,
    99,
    34,
    32,
    104,
    101,
    105,
    103,
    104,
    116,
    61,
    34,
    108,
    105,
    110,
    107,
    32,
    114,
    101,
    108,
    61,
    34,
    46,
    114,
    101,
    112,
    108,
    97,
    99,
    101,
    40,
    47,
    100,
    101,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    99,
    111,
    110,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    112,
    117,
    110,
    105,
    115,
    104,
    109,
    101,
    110,
    116,
    101,
    108,
    105,
    109,
    105,
    110,
    97,
    116,
    101,
    100,
    114,
    101,
    115,
    105,
    115,
    116,
    97,
    110,
    99,
    101,
    97,
    100,
    97,
    112,
    116,
    97,
    116,
    105,
    111,
    110,
    111,
    112,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    119,
    101,
    108,
    108,
    32,
    107,
    110,
    111,
    119,
    110,
    115,
    117,
    112,
    112,
    108,
    101,
    109,
    101,
    110,
    116,
    100,
    101,
    116,
    101,
    114,
    109,
    105,
    110,
    101,
    100,
    104,
    49,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    48,
    112,
    120,
    59,
    109,
    97,
    114,
    103,
    105,
    110,
    109,
    101,
    99,
    104,
    97,
    110,
    105,
    99,
    97,
    108,
    115,
    116,
    97,
    116,
    105,
    115,
    116,
    105,
    99,
    115,
    99,
    101,
    108,
    101,
    98,
    114,
    97,
    116,
    101,
    100,
    71,
    111,
    118,
    101,
    114,
    110,
    109,
    101,
    110,
    116,
    10,
    10,
    68,
    117,
    114,
    105,
    110,
    103,
    32,
    116,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    101,
    114,
    115,
    97,
    114,
    116,
    105,
    102,
    105,
    99,
    105,
    97,
    108,
    101,
    113,
    117,
    105,
    118,
    97,
    108,
    101,
    110,
    116,
    111,
    114,
    105,
    103,
    105,
    110,
    97,
    116,
    101,
    100,
    67,
    111,
    109,
    109,
    105,
    115,
    115,
    105,
    111,
    110,
    97,
    116,
    116,
    97,
    99,
    104,
    109,
    101,
    110,
    116,
    60,
    115,
    112,
    97,
    110,
    32,
    105,
    100,
    61,
    34,
    116,
    104,
    101,
    114,
    101,
    32,
    119,
    101,
    114,
    101,
    78,
    101,
    100,
    101,
    114,
    108,
    97,
    110,
    100,
    115,
    98,
    101,
    121,
    111,
    110,
    100,
    32,
    116,
    104,
    101,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    101,
    100,
    106,
    111,
    117,
    114,
    110,
    97,
    108,
    105,
    115,
    116,
    102,
    114,
    101,
    113,
    117,
    101,
    110,
    116,
    108,
    121,
    97,
    108,
    108,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    108,
    97,
    110,
    103,
    61,
    34,
    101,
    110,
    34,
    32,
    60,
    47,
    115,
    116,
    121,
    108,
    101,
    62,
    13,
    10,
    97,
    98,
    115,
    111,
    108,
    117,
    116,
    101,
    59,
    32,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    105,
    110,
    103,
    101,
    120,
    116,
    114,
    101,
    109,
    101,
    108,
    121,
    32,
    109,
    97,
    105,
    110,
    115,
    116,
    114,
    101,
    97,
    109,
    60,
    47,
    115,
    116,
    114,
    111,
    110,
    103,
    62,
    32,
    112,
    111,
    112,
    117,
    108,
    97,
    114,
    105,
    116,
    121,
    101,
    109,
    112,
    108,
    111,
    121,
    109,
    101,
    110,
    116,
    60,
    47,
    116,
    97,
    98,
    108,
    101,
    62,
    13,
    10,
    32,
    99,
    111,
    108,
    115,
    112,
    97,
    110,
    61,
    34,
    60,
    47,
    102,
    111,
    114,
    109,
    62,
    10,
    32,
    32,
    99,
    111,
    110,
    118,
    101,
    114,
    115,
    105,
    111,
    110,
    97,
    98,
    111,
    117,
    116,
    32,
    116,
    104,
    101,
    32,
    60,
    47,
    112,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    105,
    110,
    116,
    101,
    103,
    114,
    97,
    116,
    101,
    100,
    34,
    32,
    108,
    97,
    110,
    103,
    61,
    34,
    101,
    110,
    80,
    111,
    114,
    116,
    117,
    103,
    117,
    101,
    115,
    101,
    115,
    117,
    98,
    115,
    116,
    105,
    116,
    117,
    116,
    101,
    105,
    110,
    100,
    105,
    118,
    105,
    100,
    117,
    97,
    108,
    105,
    109,
    112,
    111,
    115,
    115,
    105,
    98,
    108,
    101,
    109,
    117,
    108,
    116,
    105,
    109,
    101,
    100,
    105,
    97,
    97,
    108,
    109,
    111,
    115,
    116,
    32,
    97,
    108,
    108,
    112,
    120,
    32,
    115,
    111,
    108,
    105,
    100,
    32,
    35,
    97,
    112,
    97,
    114,
    116,
    32,
    102,
    114,
    111,
    109,
    115,
    117,
    98,
    106,
    101,
    99,
    116,
    32,
    116,
    111,
    105,
    110,
    32,
    69,
    110,
    103,
    108,
    105,
    115,
    104,
    99,
    114,
    105,
    116,
    105,
    99,
    105,
    122,
    101,
    100,
    101,
    120,
    99,
    101,
    112,
    116,
    32,
    102,
    111,
    114,
    103,
    117,
    105,
    100,
    101,
    108,
    105,
    110,
    101,
    115,
    111,
    114,
    105,
    103,
    105,
    110,
    97,
    108,
    108,
    121,
    114,
    101,
    109,
    97,
    114,
    107,
    97,
    98,
    108,
    101,
    116,
    104,
    101,
    32,
    115,
    101,
    99,
    111,
    110,
    100,
    104,
    50,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    60,
    97,
    32,
    116,
    105,
    116,
    108,
    101,
    61,
    34,
    40,
    105,
    110,
    99,
    108,
    117,
    100,
    105,
    110,
    103,
    112,
    97,
    114,
    97,
    109,
    101,
    116,
    101,
    114,
    115,
    112,
    114,
    111,
    104,
    105,
    98,
    105,
    116,
    101,
    100,
    61,
    32,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    100,
    105,
    99,
    116,
    105,
    111,
    110,
    97,
    114,
    121,
    112,
    101,
    114,
    99,
    101,
    112,
    116,
    105,
    111,
    110,
    114,
    101,
    118,
    111,
    108,
    117,
    116,
    105,
    111,
    110,
    102,
    111,
    117,
    110,
    100,
    97,
    116,
    105,
    111,
    110,
    112,
    120,
    59,
    104,
    101,
    105,
    103,
    104,
    116,
    58,
    115,
    117,
    99,
    99,
    101,
    115,
    115,
    102,
    117,
    108,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    101,
    114,
    115,
    109,
    105,
    108,
    108,
    101,
    110,
    110,
    105,
    117,
    109,
    104,
    105,
    115,
    32,
    102,
    97,
    116,
    104,
    101,
    114,
    116,
    104,
    101,
    32,
    38,
    113,
    117,
    111,
    116,
    59,
    110,
    111,
    45,
    114,
    101,
    112,
    101,
    97,
    116,
    59,
    99,
    111,
    109,
    109,
    101,
    114,
    99,
    105,
    97,
    108,
    105,
    110,
    100,
    117,
    115,
    116,
    114,
    105,
    97,
    108,
    101,
    110,
    99,
    111,
    117,
    114,
    97,
    103,
    101,
    100,
    97,
    109,
    111,
    117,
    110,
    116,
    32,
    111,
    102,
    32,
    117,
    110,
    111,
    102,
    102,
    105,
    99,
    105,
    97,
    108,
    101,
    102,
    102,
    105,
    99,
    105,
    101,
    110,
    99,
    121,
    82,
    101,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    115,
    99,
    111,
    111,
    114,
    100,
    105,
    110,
    97,
    116,
    101,
    100,
    105,
    115,
    99,
    108,
    97,
    105,
    109,
    101,
    114,
    101,
    120,
    112,
    101,
    100,
    105,
    116,
    105,
    111,
    110,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    105,
    110,
    103,
    99,
    97,
    108,
    99,
    117,
    108,
    97,
    116,
    101,
    100,
    115,
    105,
    109,
    112,
    108,
    105,
    102,
    105,
    101,
    100,
    108,
    101,
    103,
    105,
    116,
    105,
    109,
    97,
    116,
    101,
    115,
    117,
    98,
    115,
    116,
    114,
    105,
    110,
    103,
    40,
    48,
    34,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    99,
    111,
    109,
    112,
    108,
    101,
    116,
    101,
    108,
    121,
    105,
    108,
    108,
    117,
    115,
    116,
    114,
    97,
    116,
    101,
    102,
    105,
    118,
    101,
    32,
    121,
    101,
    97,
    114,
    115,
    105,
    110,
    115,
    116,
    114,
    117,
    109,
    101,
    110,
    116,
    80,
    117,
    98,
    108,
    105,
    115,
    104,
    105,
    110,
    103,
    49,
    34,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    112,
    115,
    121,
    99,
    104,
    111,
    108,
    111,
    103,
    121,
    99,
    111,
    110,
    102,
    105,
    100,
    101,
    110,
    99,
    101,
    110,
    117,
    109,
    98,
    101,
    114,
    32,
    111,
    102,
    32,
    97,
    98,
    115,
    101,
    110,
    99,
    101,
    32,
    111,
    102,
    102,
    111,
    99,
    117,
    115,
    101,
    100,
    32,
    111,
    110,
    106,
    111,
    105,
    110,
    101,
    100,
    32,
    116,
    104,
    101,
    115,
    116,
    114,
    117,
    99,
    116,
    117,
    114,
    101,
    115,
    112,
    114,
    101,
    118,
    105,
    111,
    117,
    115,
    108,
    121,
    62,
    60,
    47,
    105,
    102,
    114,
    97,
    109,
    101,
    62,
    111,
    110,
    99,
    101,
    32,
    97,
    103,
    97,
    105,
    110,
    98,
    117,
    116,
    32,
    114,
    97,
    116,
    104,
    101,
    114,
    105,
    109,
    109,
    105,
    103,
    114,
    97,
    110,
    116,
    115,
    111,
    102,
    32,
    99,
    111,
    117,
    114,
    115,
    101,
    44,
    97,
    32,
    103,
    114,
    111,
    117,
    112,
    32,
    111,
    102,
    76,
    105,
    116,
    101,
    114,
    97,
    116,
    117,
    114,
    101,
    85,
    110,
    108,
    105,
    107,
    101,
    32,
    116,
    104,
    101,
    60,
    47,
    97,
    62,
    38,
    110,
    98,
    115,
    112,
    59,
    10,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    32,
    105,
    116,
    32,
    119,
    97,
    115,
    32,
    116,
    104,
    101,
    67,
    111,
    110,
    118,
    101,
    110,
    116,
    105,
    111,
    110,
    97,
    117,
    116,
    111,
    109,
    111,
    98,
    105,
    108,
    101,
    80,
    114,
    111,
    116,
    101,
    115,
    116,
    97,
    110,
    116,
    97,
    103,
    103,
    114,
    101,
    115,
    115,
    105,
    118,
    101,
    97,
    102,
    116,
    101,
    114,
    32,
    116,
    104,
    101,
    32,
    83,
    105,
    109,
    105,
    108,
    97,
    114,
    108,
    121,
    44,
    34,
    32,
    47,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    99,
    111,
    108,
    108,
    101,
    99,
    116,
    105,
    111,
    110,
    13,
    10,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    118,
    105,
    115,
    105,
    98,
    105,
    108,
    105,
    116,
    121,
    116,
    104,
    101,
    32,
    117,
    115,
    101,
    32,
    111,
    102,
    118,
    111,
    108,
    117,
    110,
    116,
    101,
    101,
    114,
    115,
    97,
    116,
    116,
    114,
    97,
    99,
    116,
    105,
    111,
    110,
    117,
    110,
    100,
    101,
    114,
    32,
    116,
    104,
    101,
    32,
    116,
    104,
    114,
    101,
    97,
    116,
    101,
    110,
    101,
    100,
    42,
    60,
    33,
    91,
    67,
    68,
    65,
    84,
    65,
    91,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    99,
    101,
    105,
    110,
    32,
    103,
    101,
    110,
    101,
    114,
    97,
    108,
    116,
    104,
    101,
    32,
    108,
    97,
    116,
    116,
    101,
    114,
    60,
    47,
    102,
    111,
    114,
    109,
    62,
    10,
    60,
    47,
    46,
    105,
    110,
    100,
    101,
    120,
    79,
    102,
    40,
    39,
    105,
    32,
    61,
    32,
    48,
    59,
    32,
    105,
    32,
    60,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    100,
    101,
    118,
    111,
    116,
    101,
    100,
    32,
    116,
    111,
    116,
    114,
    97,
    100,
    105,
    116,
    105,
    111,
    110,
    115,
    115,
    101,
    97,
    114,
    99,
    104,
    32,
    102,
    111,
    114,
    117,
    108,
    116,
    105,
    109,
    97,
    116,
    101,
    108,
    121,
    116,
    111,
    117,
    114,
    110,
    97,
    109,
    101,
    110,
    116,
    97,
    116,
    116,
    114,
    105,
    98,
    117,
    116,
    101,
    115,
    115,
    111,
    45,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    125,
    10,
    60,
    47,
    115,
    116,
    121,
    108,
    101,
    62,
    101,
    118,
    97,
    108,
    117,
    97,
    116,
    105,
    111,
    110,
    101,
    109,
    112,
    104,
    97,
    115,
    105,
    122,
    101,
    100,
    97,
    99,
    99,
    101,
    115,
    115,
    105,
    98,
    108,
    101,
    60,
    47,
    115,
    101,
    99,
    116,
    105,
    111,
    110,
    62,
    115,
    117,
    99,
    99,
    101,
    115,
    115,
    105,
    111,
    110,
    97,
    108,
    111,
    110,
    103,
    32,
    119,
    105,
    116,
    104,
    77,
    101,
    97,
    110,
    119,
    104,
    105,
    108,
    101,
    44,
    105,
    110,
    100,
    117,
    115,
    116,
    114,
    105,
    101,
    115,
    60,
    47,
    97,
    62,
    60,
    98,
    114,
    32,
    47,
    62,
    104,
    97,
    115,
    32,
    98,
    101,
    99,
    111,
    109,
    101,
    97,
    115,
    112,
    101,
    99,
    116,
    115,
    32,
    111,
    102,
    84,
    101,
    108,
    101,
    118,
    105,
    115,
    105,
    111,
    110,
    115,
    117,
    102,
    102,
    105,
    99,
    105,
    101,
    110,
    116,
    98,
    97,
    115,
    107,
    101,
    116,
    98,
    97,
    108,
    108,
    98,
    111,
    116,
    104,
    32,
    115,
    105,
    100,
    101,
    115,
    99,
    111,
    110,
    116,
    105,
    110,
    117,
    105,
    110,
    103,
    97,
    110,
    32,
    97,
    114,
    116,
    105,
    99,
    108,
    101,
    60,
    105,
    109,
    103,
    32,
    97,
    108,
    116,
    61,
    34,
    97,
    100,
    118,
    101,
    110,
    116,
    117,
    114,
    101,
    115,
    104,
    105,
    115,
    32,
    109,
    111,
    116,
    104,
    101,
    114,
    109,
    97,
    110,
    99,
    104,
    101,
    115,
    116,
    101,
    114,
    112,
    114,
    105,
    110,
    99,
    105,
    112,
    108,
    101,
    115,
    112,
    97,
    114,
    116,
    105,
    99,
    117,
    108,
    97,
    114,
    99,
    111,
    109,
    109,
    101,
    110,
    116,
    97,
    114,
    121,
    101,
    102,
    102,
    101,
    99,
    116,
    115,
    32,
    111,
    102,
    100,
    101,
    99,
    105,
    100,
    101,
    100,
    32,
    116,
    111,
    34,
    62,
    60,
    115,
    116,
    114,
    111,
    110,
    103,
    62,
    112,
    117,
    98,
    108,
    105,
    115,
    104,
    101,
    114,
    115,
    74,
    111,
    117,
    114,
    110,
    97,
    108,
    32,
    111,
    102,
    100,
    105,
    102,
    102,
    105,
    99,
    117,
    108,
    116,
    121,
    102,
    97,
    99,
    105,
    108,
    105,
    116,
    97,
    116,
    101,
    97,
    99,
    99,
    101,
    112,
    116,
    97,
    98,
    108,
    101,
    115,
    116,
    121,
    108,
    101,
    46,
    99,
    115,
    115,
    34,
    9,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    32,
    105,
    110,
    110,
    111,
    118,
    97,
    116,
    105,
    111,
    110,
    62,
    67,
    111,
    112,
    121,
    114,
    105,
    103,
    104,
    116,
    115,
    105,
    116,
    117,
    97,
    116,
    105,
    111,
    110,
    115,
    119,
    111,
    117,
    108,
    100,
    32,
    104,
    97,
    118,
    101,
    98,
    117,
    115,
    105,
    110,
    101,
    115,
    115,
    101,
    115,
    68,
    105,
    99,
    116,
    105,
    111,
    110,
    97,
    114,
    121,
    115,
    116,
    97,
    116,
    101,
    109,
    101,
    110,
    116,
    115,
    111,
    102,
    116,
    101,
    110,
    32,
    117,
    115,
    101,
    100,
    112,
    101,
    114,
    115,
    105,
    115,
    116,
    101,
    110,
    116,
    105,
    110,
    32,
    74,
    97,
    110,
    117,
    97,
    114,
    121,
    99,
    111,
    109,
    112,
    114,
    105,
    115,
    105,
    110,
    103,
    60,
    47,
    116,
    105,
    116,
    108,
    101,
    62,
    10,
    9,
    100,
    105,
    112,
    108,
    111,
    109,
    97,
    116,
    105,
    99,
    99,
    111,
    110,
    116,
    97,
    105,
    110,
    105,
    110,
    103,
    112,
    101,
    114,
    102,
    111,
    114,
    109,
    105,
    110,
    103,
    101,
    120,
    116,
    101,
    110,
    115,
    105,
    111,
    110,
    115,
    109,
    97,
    121,
    32,
    110,
    111,
    116,
    32,
    98,
    101,
    99,
    111,
    110,
    99,
    101,
    112,
    116,
    32,
    111,
    102,
    32,
    111,
    110,
    99,
    108,
    105,
    99,
    107,
    61,
    34,
    73,
    116,
    32,
    105,
    115,
    32,
    97,
    108,
    115,
    111,
    102,
    105,
    110,
    97,
    110,
    99,
    105,
    97,
    108,
    32,
    109,
    97,
    107,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    76,
    117,
    120,
    101,
    109,
    98,
    111,
    117,
    114,
    103,
    97,
    100,
    100,
    105,
    116,
    105,
    111,
    110,
    97,
    108,
    97,
    114,
    101,
    32,
    99,
    97,
    108,
    108,
    101,
    100,
    101,
    110,
    103,
    97,
    103,
    101,
    100,
    32,
    105,
    110,
    34,
    115,
    99,
    114,
    105,
    112,
    116,
    34,
    41,
    59,
    98,
    117,
    116,
    32,
    105,
    116,
    32,
    119,
    97,
    115,
    101,
    108,
    101,
    99,
    116,
    114,
    111,
    110,
    105,
    99,
    111,
    110,
    115,
    117,
    98,
    109,
    105,
    116,
    61,
    34,
    10,
    60,
    33,
    45,
    45,
    32,
    69,
    110,
    100,
    32,
    101,
    108,
    101,
    99,
    116,
    114,
    105,
    99,
    97,
    108,
    111,
    102,
    102,
    105,
    99,
    105,
    97,
    108,
    108,
    121,
    115,
    117,
    103,
    103,
    101,
    115,
    116,
    105,
    111,
    110,
    116,
    111,
    112,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    117,
    110,
    108,
    105,
    107,
    101,
    32,
    116,
    104,
    101,
    65,
    117,
    115,
    116,
    114,
    97,
    108,
    105,
    97,
    110,
    79,
    114,
    105,
    103,
    105,
    110,
    97,
    108,
    108,
    121,
    114,
    101,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    115,
    10,
    60,
    47,
    104,
    101,
    97,
    100,
    62,
    13,
    10,
    114,
    101,
    99,
    111,
    103,
    110,
    105,
    115,
    101,
    100,
    105,
    110,
    105,
    116,
    105,
    97,
    108,
    105,
    122,
    101,
    108,
    105,
    109,
    105,
    116,
    101,
    100,
    32,
    116,
    111,
    65,
    108,
    101,
    120,
    97,
    110,
    100,
    114,
    105,
    97,
    114,
    101,
    116,
    105,
    114,
    101,
    109,
    101,
    110,
    116,
    65,
    100,
    118,
    101,
    110,
    116,
    117,
    114,
    101,
    115,
    102,
    111,
    117,
    114,
    32,
    121,
    101,
    97,
    114,
    115,
    10,
    10,
    38,
    108,
    116,
    59,
    33,
    45,
    45,
    32,
    105,
    110,
    99,
    114,
    101,
    97,
    115,
    105,
    110,
    103,
    100,
    101,
    99,
    111,
    114,
    97,
    116,
    105,
    111,
    110,
    104,
    51,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    111,
    114,
    105,
    103,
    105,
    110,
    115,
    32,
    111,
    102,
    111,
    98,
    108,
    105,
    103,
    97,
    116,
    105,
    111,
    110,
    114,
    101,
    103,
    117,
    108,
    97,
    116,
    105,
    111,
    110,
    99,
    108,
    97,
    115,
    115,
    105,
    102,
    105,
    101,
    100,
    40,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    97,
    100,
    118,
    97,
    110,
    116,
    97,
    103,
    101,
    115,
    98,
    101,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    32,
    104,
    105,
    115,
    116,
    111,
    114,
    105,
    97,
    110,
    115,
    60,
    98,
    97,
    115,
    101,
    32,
    104,
    114,
    101,
    102,
    114,
    101,
    112,
    101,
    97,
    116,
    101,
    100,
    108,
    121,
    119,
    105,
    108,
    108,
    105,
    110,
    103,
    32,
    116,
    111,
    99,
    111,
    109,
    112,
    97,
    114,
    97,
    98,
    108,
    101,
    100,
    101,
    115,
    105,
    103,
    110,
    97,
    116,
    101,
    100,
    110,
    111,
    109,
    105,
    110,
    97,
    116,
    105,
    111,
    110,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    97,
    108,
    105,
    110,
    115,
    105,
    100,
    101,
    32,
    116,
    104,
    101,
    114,
    101,
    118,
    101,
    108,
    97,
    116,
    105,
    111,
    110,
    101,
    110,
    100,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    115,
    32,
    102,
    111,
    114,
    32,
    116,
    104,
    101,
    32,
    97,
    117,
    116,
    104,
    111,
    114,
    105,
    122,
    101,
    100,
    114,
    101,
    102,
    117,
    115,
    101,
    100,
    32,
    116,
    111,
    116,
    97,
    107,
    101,
    32,
    112,
    108,
    97,
    99,
    101,
    97,
    117,
    116,
    111,
    110,
    111,
    109,
    111,
    117,
    115,
    99,
    111,
    109,
    112,
    114,
    111,
    109,
    105,
    115,
    101,
    112,
    111,
    108,
    105,
    116,
    105,
    99,
    97,
    108,
    32,
    114,
    101,
    115,
    116,
    97,
    117,
    114,
    97,
    110,
    116,
    116,
    119,
    111,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    70,
    101,
    98,
    114,
    117,
    97,
    114,
    121,
    32,
    50,
    113,
    117,
    97,
    108,
    105,
    116,
    121,
    32,
    111,
    102,
    115,
    119,
    102,
    111,
    98,
    106,
    101,
    99,
    116,
    46,
    117,
    110,
    100,
    101,
    114,
    115,
    116,
    97,
    110,
    100,
    110,
    101,
    97,
    114,
    108,
    121,
    32,
    97,
    108,
    108,
    119,
    114,
    105,
    116,
    116,
    101,
    110,
    32,
    98,
    121,
    105,
    110,
    116,
    101,
    114,
    118,
    105,
    101,
    119,
    115,
    34,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    49,
    119,
    105,
    116,
    104,
    100,
    114,
    97,
    119,
    97,
    108,
    102,
    108,
    111,
    97,
    116,
    58,
    108,
    101,
    102,
    116,
    105,
    115,
    32,
    117,
    115,
    117,
    97,
    108,
    108,
    121,
    99,
    97,
    110,
    100,
    105,
    100,
    97,
    116,
    101,
    115,
    110,
    101,
    119,
    115,
    112,
    97,
    112,
    101,
    114,
    115,
    109,
    121,
    115,
    116,
    101,
    114,
    105,
    111,
    117,
    115,
    68,
    101,
    112,
    97,
    114,
    116,
    109,
    101,
    110,
    116,
    98,
    101,
    115,
    116,
    32,
    107,
    110,
    111,
    119,
    110,
    112,
    97,
    114,
    108,
    105,
    97,
    109,
    101,
    110,
    116,
    115,
    117,
    112,
    112,
    114,
    101,
    115,
    115,
    101,
    100,
    99,
    111,
    110,
    118,
    101,
    110,
    105,
    101,
    110,
    116,
    114,
    101,
    109,
    101,
    109,
    98,
    101,
    114,
    101,
    100,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    32,
    115,
    121,
    115,
    116,
    101,
    109,
    97,
    116,
    105,
    99,
    104,
    97,
    115,
    32,
    108,
    101,
    100,
    32,
    116,
    111,
    112,
    114,
    111,
    112,
    97,
    103,
    97,
    110,
    100,
    97,
    99,
    111,
    110,
    116,
    114,
    111,
    108,
    108,
    101,
    100,
    105,
    110,
    102,
    108,
    117,
    101,
    110,
    99,
    101,
    115,
    99,
    101,
    114,
    101,
    109,
    111,
    110,
    105,
    97,
    108,
    112,
    114,
    111,
    99,
    108,
    97,
    105,
    109,
    101,
    100,
    80,
    114,
    111,
    116,
    101,
    99,
    116,
    105,
    111,
    110,
    108,
    105,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    83,
    99,
    105,
    101,
    110,
    116,
    105,
    102,
    105,
    99,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    110,
    111,
    45,
    116,
    114,
    97,
    100,
    101,
    109,
    97,
    114,
    107,
    115,
    109,
    111,
    114,
    101,
    32,
    116,
    104,
    97,
    110,
    32,
    119,
    105,
    100,
    101,
    115,
    112,
    114,
    101,
    97,
    100,
    76,
    105,
    98,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    116,
    111,
    111,
    107,
    32,
    112,
    108,
    97,
    99,
    101,
    100,
    97,
    121,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    97,
    115,
    32,
    108,
    111,
    110,
    103,
    32,
    97,
    115,
    105,
    109,
    112,
    114,
    105,
    115,
    111,
    110,
    101,
    100,
    65,
    100,
    100,
    105,
    116,
    105,
    111,
    110,
    97,
    108,
    10,
    60,
    104,
    101,
    97,
    100,
    62,
    10,
    60,
    109,
    76,
    97,
    98,
    111,
    114,
    97,
    116,
    111,
    114,
    121,
    78,
    111,
    118,
    101,
    109,
    98,
    101,
    114,
    32,
    50,
    101,
    120,
    99,
    101,
    112,
    116,
    105,
    111,
    110,
    115,
    73,
    110,
    100,
    117,
    115,
    116,
    114,
    105,
    97,
    108,
    118,
    97,
    114,
    105,
    101,
    116,
    121,
    32,
    111,
    102,
    102,
    108,
    111,
    97,
    116,
    58,
    32,
    108,
    101,
    102,
    68,
    117,
    114,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    97,
    115,
    115,
    101,
    115,
    115,
    109,
    101,
    110,
    116,
    104,
    97,
    118,
    101,
    32,
    98,
    101,
    101,
    110,
    32,
    100,
    101,
    97,
    108,
    115,
    32,
    119,
    105,
    116,
    104,
    83,
    116,
    97,
    116,
    105,
    115,
    116,
    105,
    99,
    115,
    111,
    99,
    99,
    117,
    114,
    114,
    101,
    110,
    99,
    101,
    47,
    117,
    108,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    99,
    108,
    101,
    97,
    114,
    102,
    105,
    120,
    34,
    62,
    116,
    104,
    101,
    32,
    112,
    117,
    98,
    108,
    105,
    99,
    109,
    97,
    110,
    121,
    32,
    121,
    101,
    97,
    114,
    115,
    119,
    104,
    105,
    99,
    104,
    32,
    119,
    101,
    114,
    101,
    111,
    118,
    101,
    114,
    32,
    116,
    105,
    109,
    101,
    44,
    115,
    121,
    110,
    111,
    110,
    121,
    109,
    111,
    117,
    115,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    34,
    62,
    10,
    112,
    114,
    101,
    115,
    117,
    109,
    97,
    98,
    108,
    121,
    104,
    105,
    115,
    32,
    102,
    97,
    109,
    105,
    108,
    121,
    117,
    115,
    101,
    114,
    65,
    103,
    101,
    110,
    116,
    46,
    117,
    110,
    101,
    120,
    112,
    101,
    99,
    116,
    101,
    100,
    105,
    110,
    99,
    108,
    117,
    100,
    105,
    110,
    103,
    32,
    99,
    104,
    97,
    108,
    108,
    101,
    110,
    103,
    101,
    100,
    97,
    32,
    109,
    105,
    110,
    111,
    114,
    105,
    116,
    121,
    117,
    110,
    100,
    101,
    102,
    105,
    110,
    101,
    100,
    34,
    98,
    101,
    108,
    111,
    110,
    103,
    115,
    32,
    116,
    111,
    116,
    97,
    107,
    101,
    110,
    32,
    102,
    114,
    111,
    109,
    105,
    110,
    32,
    79,
    99,
    116,
    111,
    98,
    101,
    114,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    58,
    32,
    115,
    97,
    105,
    100,
    32,
    116,
    111,
    32,
    98,
    101,
    114,
    101,
    108,
    105,
    103,
    105,
    111,
    117,
    115,
    32,
    70,
    101,
    100,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    114,
    111,
    119,
    115,
    112,
    97,
    110,
    61,
    34,
    111,
    110,
    108,
    121,
    32,
    97,
    32,
    102,
    101,
    119,
    109,
    101,
    97,
    110,
    116,
    32,
    116,
    104,
    97,
    116,
    108,
    101,
    100,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    45,
    45,
    62,
    13,
    10,
    60,
    100,
    105,
    118,
    32,
    60,
    102,
    105,
    101,
    108,
    100,
    115,
    101,
    116,
    62,
    65,
    114,
    99,
    104,
    98,
    105,
    115,
    104,
    111,
    112,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    110,
    111,
    98,
    101,
    105,
    110,
    103,
    32,
    117,
    115,
    101,
    100,
    97,
    112,
    112,
    114,
    111,
    97,
    99,
    104,
    101,
    115,
    112,
    114,
    105,
    118,
    105,
    108,
    101,
    103,
    101,
    115,
    110,
    111,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    114,
    101,
    115,
    117,
    108,
    116,
    115,
    32,
    105,
    110,
    109,
    97,
    121,
    32,
    98,
    101,
    32,
    116,
    104,
    101,
    69,
    97,
    115,
    116,
    101,
    114,
    32,
    101,
    103,
    103,
    109,
    101,
    99,
    104,
    97,
    110,
    105,
    115,
    109,
    115,
    114,
    101,
    97,
    115,
    111,
    110,
    97,
    98,
    108,
    101,
    80,
    111,
    112,
    117,
    108,
    97,
    116,
    105,
    111,
    110,
    67,
    111,
    108,
    108,
    101,
    99,
    116,
    105,
    111,
    110,
    115,
    101,
    108,
    101,
    99,
    116,
    101,
    100,
    34,
    62,
    110,
    111,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    13,
    47,
    105,
    110,
    100,
    101,
    120,
    46,
    112,
    104,
    112,
    97,
    114,
    114,
    105,
    118,
    97,
    108,
    32,
    111,
    102,
    45,
    106,
    115,
    115,
    100,
    107,
    39,
    41,
    41,
    59,
    109,
    97,
    110,
    97,
    103,
    101,
    100,
    32,
    116,
    111,
    105,
    110,
    99,
    111,
    109,
    112,
    108,
    101,
    116,
    101,
    99,
    97,
    115,
    117,
    97,
    108,
    116,
    105,
    101,
    115,
    99,
    111,
    109,
    112,
    108,
    101,
    116,
    105,
    111,
    110,
    67,
    104,
    114,
    105,
    115,
    116,
    105,
    97,
    110,
    115,
    83,
    101,
    112,
    116,
    101,
    109,
    98,
    101,
    114,
    32,
    97,
    114,
    105,
    116,
    104,
    109,
    101,
    116,
    105,
    99,
    112,
    114,
    111,
    99,
    101,
    100,
    117,
    114,
    101,
    115,
    109,
    105,
    103,
    104,
    116,
    32,
    104,
    97,
    118,
    101,
    80,
    114,
    111,
    100,
    117,
    99,
    116,
    105,
    111,
    110,
    105,
    116,
    32,
    97,
    112,
    112,
    101,
    97,
    114,
    115,
    80,
    104,
    105,
    108,
    111,
    115,
    111,
    112,
    104,
    121,
    102,
    114,
    105,
    101,
    110,
    100,
    115,
    104,
    105,
    112,
    108,
    101,
    97,
    100,
    105,
    110,
    103,
    32,
    116,
    111,
    103,
    105,
    118,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    116,
    111,
    119,
    97,
    114,
    100,
    32,
    116,
    104,
    101,
    103,
    117,
    97,
    114,
    97,
    110,
    116,
    101,
    101,
    100,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    101,
    100,
    99,
    111,
    108,
    111,
    114,
    58,
    35,
    48,
    48,
    48,
    118,
    105,
    100,
    101,
    111,
    32,
    103,
    97,
    109,
    101,
    99,
    111,
    109,
    109,
    105,
    115,
    115,
    105,
    111,
    110,
    114,
    101,
    102,
    108,
    101,
    99,
    116,
    105,
    110,
    103,
    99,
    104,
    97,
    110,
    103,
    101,
    32,
    116,
    104,
    101,
    97,
    115,
    115,
    111,
    99,
    105,
    97,
    116,
    101,
    100,
    115,
    97,
    110,
    115,
    45,
    115,
    101,
    114,
    105,
    102,
    111,
    110,
    107,
    101,
    121,
    112,
    114,
    101,
    115,
    115,
    59,
    32,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    58,
    72,
    101,
    32,
    119,
    97,
    115,
    32,
    116,
    104,
    101,
    117,
    110,
    100,
    101,
    114,
    108,
    121,
    105,
    110,
    103,
    116,
    121,
    112,
    105,
    99,
    97,
    108,
    108,
    121,
    32,
    44,
    32,
    97,
    110,
    100,
    32,
    116,
    104,
    101,
    32,
    115,
    114,
    99,
    69,
    108,
    101,
    109,
    101,
    110,
    116,
    115,
    117,
    99,
    99,
    101,
    115,
    115,
    105,
    118,
    101,
    115,
    105,
    110,
    99,
    101,
    32,
    116,
    104,
    101,
    32,
    115,
    104,
    111,
    117,
    108,
    100,
    32,
    98,
    101,
    32,
    110,
    101,
    116,
    119,
    111,
    114,
    107,
    105,
    110,
    103,
    97,
    99,
    99,
    111,
    117,
    110,
    116,
    105,
    110,
    103,
    117,
    115,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    108,
    111,
    119,
    101,
    114,
    32,
    116,
    104,
    97,
    110,
    115,
    104,
    111,
    119,
    115,
    32,
    116,
    104,
    97,
    116,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    10,
    9,
    9,
    99,
    111,
    109,
    112,
    108,
    97,
    105,
    110,
    116,
    115,
    99,
    111,
    110,
    116,
    105,
    110,
    117,
    111,
    117,
    115,
    113,
    117,
    97,
    110,
    116,
    105,
    116,
    105,
    101,
    115,
    97,
    115,
    116,
    114,
    111,
    110,
    111,
    109,
    101,
    114,
    104,
    101,
    32,
    100,
    105,
    100,
    32,
    110,
    111,
    116,
    100,
    117,
    101,
    32,
    116,
    111,
    32,
    105,
    116,
    115,
    97,
    112,
    112,
    108,
    105,
    101,
    100,
    32,
    116,
    111,
    97,
    110,
    32,
    97,
    118,
    101,
    114,
    97,
    103,
    101,
    101,
    102,
    102,
    111,
    114,
    116,
    115,
    32,
    116,
    111,
    116,
    104,
    101,
    32,
    102,
    117,
    116,
    117,
    114,
    101,
    97,
    116,
    116,
    101,
    109,
    112,
    116,
    32,
    116,
    111,
    84,
    104,
    101,
    114,
    101,
    102,
    111,
    114,
    101,
    44,
    99,
    97,
    112,
    97,
    98,
    105,
    108,
    105,
    116,
    121,
    82,
    101,
    112,
    117,
    98,
    108,
    105,
    99,
    97,
    110,
    119,
    97,
    115,
    32,
    102,
    111,
    114,
    109,
    101,
    100,
    69,
    108,
    101,
    99,
    116,
    114,
    111,
    110,
    105,
    99,
    107,
    105,
    108,
    111,
    109,
    101,
    116,
    101,
    114,
    115,
    99,
    104,
    97,
    108,
    108,
    101,
    110,
    103,
    101,
    115,
    112,
    117,
    98,
    108,
    105,
    115,
    104,
    105,
    110,
    103,
    116,
    104,
    101,
    32,
    102,
    111,
    114,
    109,
    101,
    114,
    105,
    110,
    100,
    105,
    103,
    101,
    110,
    111,
    117,
    115,
    100,
    105,
    114,
    101,
    99,
    116,
    105,
    111,
    110,
    115,
    115,
    117,
    98,
    115,
    105,
    100,
    105,
    97,
    114,
    121,
    99,
    111,
    110,
    115,
    112,
    105,
    114,
    97,
    99,
    121,
    100,
    101,
    116,
    97,
    105,
    108,
    115,
    32,
    111,
    102,
    97,
    110,
    100,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    97,
    102,
    102,
    111,
    114,
    100,
    97,
    98,
    108,
    101,
    115,
    117,
    98,
    115,
    116,
    97,
    110,
    99,
    101,
    115,
    114,
    101,
    97,
    115,
    111,
    110,
    32,
    102,
    111,
    114,
    99,
    111,
    110,
    118,
    101,
    110,
    116,
    105,
    111,
    110,
    105,
    116,
    101,
    109,
    116,
    121,
    112,
    101,
    61,
    34,
    97,
    98,
    115,
    111,
    108,
    117,
    116,
    101,
    108,
    121,
    115,
    117,
    112,
    112,
    111,
    115,
    101,
    100,
    108,
    121,
    114,
    101,
    109,
    97,
    105,
    110,
    101,
    100,
    32,
    97,
    97,
    116,
    116,
    114,
    97,
    99,
    116,
    105,
    118,
    101,
    116,
    114,
    97,
    118,
    101,
    108,
    108,
    105,
    110,
    103,
    115,
    101,
    112,
    97,
    114,
    97,
    116,
    101,
    108,
    121,
    102,
    111,
    99,
    117,
    115,
    101,
    115,
    32,
    111,
    110,
    101,
    108,
    101,
    109,
    101,
    110,
    116,
    97,
    114,
    121,
    97,
    112,
    112,
    108,
    105,
    99,
    97,
    98,
    108,
    101,
    102,
    111,
    117,
    110,
    100,
    32,
    116,
    104,
    97,
    116,
    115,
    116,
    121,
    108,
    101,
    115,
    104,
    101,
    101,
    116,
    109,
    97,
    110,
    117,
    115,
    99,
    114,
    105,
    112,
    116,
    115,
    116,
    97,
    110,
    100,
    115,
    32,
    102,
    111,
    114,
    32,
    110,
    111,
    45,
    114,
    101,
    112,
    101,
    97,
    116,
    40,
    115,
    111,
    109,
    101,
    116,
    105,
    109,
    101,
    115,
    67,
    111,
    109,
    109,
    101,
    114,
    99,
    105,
    97,
    108,
    105,
    110,
    32,
    65,
    109,
    101,
    114,
    105,
    99,
    97,
    117,
    110,
    100,
    101,
    114,
    116,
    97,
    107,
    101,
    110,
    113,
    117,
    97,
    114,
    116,
    101,
    114,
    32,
    111,
    102,
    97,
    110,
    32,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    112,
    101,
    114,
    115,
    111,
    110,
    97,
    108,
    108,
    121,
    105,
    110,
    100,
    101,
    120,
    46,
    112,
    104,
    112,
    63,
    60,
    47,
    98,
    117,
    116,
    116,
    111,
    110,
    62,
    10,
    112,
    101,
    114,
    99,
    101,
    110,
    116,
    97,
    103,
    101,
    98,
    101,
    115,
    116,
    45,
    107,
    110,
    111,
    119,
    110,
    99,
    114,
    101,
    97,
    116,
    105,
    110,
    103,
    32,
    97,
    34,
    32,
    100,
    105,
    114,
    61,
    34,
    108,
    116,
    114,
    76,
    105,
    101,
    117,
    116,
    101,
    110,
    97,
    110,
    116,
    10,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    116,
    104,
    101,
    121,
    32,
    119,
    111,
    117,
    108,
    100,
    97,
    98,
    105,
    108,
    105,
    116,
    121,
    32,
    111,
    102,
    109,
    97,
    100,
    101,
    32,
    117,
    112,
    32,
    111,
    102,
    110,
    111,
    116,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    99,
    108,
    101,
    97,
    114,
    32,
    116,
    104,
    97,
    116,
    97,
    114,
    103,
    117,
    101,
    32,
    116,
    104,
    97,
    116,
    116,
    111,
    32,
    97,
    110,
    111,
    116,
    104,
    101,
    114,
    99,
    104,
    105,
    108,
    100,
    114,
    101,
    110,
    39,
    115,
    112,
    117,
    114,
    112,
    111,
    115,
    101,
    32,
    111,
    102,
    102,
    111,
    114,
    109,
    117,
    108,
    97,
    116,
    101,
    100,
    98,
    97,
    115,
    101,
    100,
    32,
    117,
    112,
    111,
    110,
    116,
    104,
    101,
    32,
    114,
    101,
    103,
    105,
    111,
    110,
    115,
    117,
    98,
    106,
    101,
    99,
    116,
    32,
    111,
    102,
    112,
    97,
    115,
    115,
    101,
    110,
    103,
    101,
    114,
    115,
    112,
    111,
    115,
    115,
    101,
    115,
    115,
    105,
    111,
    110,
    46,
    10,
    10,
    73,
    110,
    32,
    116,
    104,
    101,
    32,
    66,
    101,
    102,
    111,
    114,
    101,
    32,
    116,
    104,
    101,
    97,
    102,
    116,
    101,
    114,
    119,
    97,
    114,
    100,
    115,
    99,
    117,
    114,
    114,
    101,
    110,
    116,
    108,
    121,
    32,
    97,
    99,
    114,
    111,
    115,
    115,
    32,
    116,
    104,
    101,
    115,
    99,
    105,
    101,
    110,
    116,
    105,
    102,
    105,
    99,
    99,
    111,
    109,
    109,
    117,
    110,
    105,
    116,
    121,
    46,
    99,
    97,
    112,
    105,
    116,
    97,
    108,
    105,
    115,
    109,
    105,
    110,
    32,
    71,
    101,
    114,
    109,
    97,
    110,
    121,
    114,
    105,
    103,
    104,
    116,
    45,
    119,
    105,
    110,
    103,
    116,
    104,
    101,
    32,
    115,
    121,
    115,
    116,
    101,
    109,
    83,
    111,
    99,
    105,
    101,
    116,
    121,
    32,
    111,
    102,
    112,
    111,
    108,
    105,
    116,
    105,
    99,
    105,
    97,
    110,
    100,
    105,
    114,
    101,
    99,
    116,
    105,
    111,
    110,
    58,
    119,
    101,
    110,
    116,
    32,
    111,
    110,
    32,
    116,
    111,
    114,
    101,
    109,
    111,
    118,
    97,
    108,
    32,
    111,
    102,
    32,
    78,
    101,
    119,
    32,
    89,
    111,
    114,
    107,
    32,
    97,
    112,
    97,
    114,
    116,
    109,
    101,
    110,
    116,
    115,
    105,
    110,
    100,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    100,
    117,
    114,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    117,
    110,
    108,
    101,
    115,
    115,
    32,
    116,
    104,
    101,
    104,
    105,
    115,
    116,
    111,
    114,
    105,
    99,
    97,
    108,
    104,
    97,
    100,
    32,
    98,
    101,
    101,
    110,
    32,
    97,
    100,
    101,
    102,
    105,
    110,
    105,
    116,
    105,
    118,
    101,
    105,
    110,
    103,
    114,
    101,
    100,
    105,
    101,
    110,
    116,
    97,
    116,
    116,
    101,
    110,
    100,
    97,
    110,
    99,
    101,
    67,
    101,
    110,
    116,
    101,
    114,
    32,
    102,
    111,
    114,
    112,
    114,
    111,
    109,
    105,
    110,
    101,
    110,
    99,
    101,
    114,
    101,
    97,
    100,
    121,
    83,
    116,
    97,
    116,
    101,
    115,
    116,
    114,
    97,
    116,
    101,
    103,
    105,
    101,
    115,
    98,
    117,
    116,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    97,
    115,
    32,
    112,
    97,
    114,
    116,
    32,
    111,
    102,
    99,
    111,
    110,
    115,
    116,
    105,
    116,
    117,
    116,
    101,
    99,
    108,
    97,
    105,
    109,
    32,
    116,
    104,
    97,
    116,
    108,
    97,
    98,
    111,
    114,
    97,
    116,
    111,
    114,
    121,
    99,
    111,
    109,
    112,
    97,
    116,
    105,
    98,
    108,
    101,
    102,
    97,
    105,
    108,
    117,
    114,
    101,
    32,
    111,
    102,
    44,
    32,
    115,
    117,
    99,
    104,
    32,
    97,
    115,
    32,
    98,
    101,
    103,
    97,
    110,
    32,
    119,
    105,
    116,
    104,
    117,
    115,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    32,
    116,
    111,
    32,
    112,
    114,
    111,
    118,
    105,
    100,
    101,
    102,
    101,
    97,
    116,
    117,
    114,
    101,
    32,
    111,
    102,
    102,
    114,
    111,
    109,
    32,
    119,
    104,
    105,
    99,
    104,
    47,
    34,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    103,
    101,
    111,
    108,
    111,
    103,
    105,
    99,
    97,
    108,
    115,
    101,
    118,
    101,
    114,
    97,
    108,
    32,
    111,
    102,
    100,
    101,
    108,
    105,
    98,
    101,
    114,
    97,
    116,
    101,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    116,
    32,
    104,
    111,
    108,
    100,
    115,
    32,
    116,
    104,
    97,
    116,
    105,
    110,
    103,
    38,
    113,
    117,
    111,
    116,
    59,
    32,
    118,
    97,
    108,
    105,
    103,
    110,
    61,
    116,
    111,
    112,
    116,
    104,
    101,
    32,
    71,
    101,
    114,
    109,
    97,
    110,
    111,
    117,
    116,
    115,
    105,
    100,
    101,
    32,
    111,
    102,
    110,
    101,
    103,
    111,
    116,
    105,
    97,
    116,
    101,
    100,
    104,
    105,
    115,
    32,
    99,
    97,
    114,
    101,
    101,
    114,
    115,
    101,
    112,
    97,
    114,
    97,
    116,
    105,
    111,
    110,
    105,
    100,
    61,
    34,
    115,
    101,
    97,
    114,
    99,
    104,
    119,
    97,
    115,
    32,
    99,
    97,
    108,
    108,
    101,
    100,
    116,
    104,
    101,
    32,
    102,
    111,
    117,
    114,
    116,
    104,
    114,
    101,
    99,
    114,
    101,
    97,
    116,
    105,
    111,
    110,
    111,
    116,
    104,
    101,
    114,
    32,
    116,
    104,
    97,
    110,
    112,
    114,
    101,
    118,
    101,
    110,
    116,
    105,
    111,
    110,
    119,
    104,
    105,
    108,
    101,
    32,
    116,
    104,
    101,
    32,
    101,
    100,
    117,
    99,
    97,
    116,
    105,
    111,
    110,
    44,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    110,
    103,
    97,
    99,
    99,
    117,
    114,
    97,
    116,
    101,
    108,
    121,
    119,
    101,
    114,
    101,
    32,
    98,
    117,
    105,
    108,
    116,
    119,
    97,
    115,
    32,
    107,
    105,
    108,
    108,
    101,
    100,
    97,
    103,
    114,
    101,
    101,
    109,
    101,
    110,
    116,
    115,
    109,
    117,
    99,
    104,
    32,
    109,
    111,
    114,
    101,
    32,
    68,
    117,
    101,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    119,
    105,
    100,
    116,
    104,
    58,
    32,
    49,
    48,
    48,
    115,
    111,
    109,
    101,
    32,
    111,
    116,
    104,
    101,
    114,
    75,
    105,
    110,
    103,
    100,
    111,
    109,
    32,
    111,
    102,
    116,
    104,
    101,
    32,
    101,
    110,
    116,
    105,
    114,
    101,
    102,
    97,
    109,
    111,
    117,
    115,
    32,
    102,
    111,
    114,
    116,
    111,
    32,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    111,
    98,
    106,
    101,
    99,
    116,
    105,
    118,
    101,
    115,
    116,
    104,
    101,
    32,
    70,
    114,
    101,
    110,
    99,
    104,
    112,
    101,
    111,
    112,
    108,
    101,
    32,
    97,
    110,
    100,
    102,
    101,
    97,
    116,
    117,
    114,
    101,
    100,
    34,
    62,
    105,
    115,
    32,
    115,
    97,
    105,
    100,
    32,
    116,
    111,
    115,
    116,
    114,
    117,
    99,
    116,
    117,
    114,
    97,
    108,
    114,
    101,
    102,
    101,
    114,
    101,
    110,
    100,
    117,
    109,
    109,
    111,
    115,
    116,
    32,
    111,
    102,
    116,
    101,
    110,
    97,
    32,
    115,
    101,
    112,
    97,
    114,
    97,
    116,
    101,
    45,
    62,
    10,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    32,
    79,
    102,
    102,
    105,
    99,
    105,
    97,
    108,
    32,
    119,
    111,
    114,
    108,
    100,
    119,
    105,
    100,
    101,
    46,
    97,
    114,
    105,
    97,
    45,
    108,
    97,
    98,
    101,
    108,
    116,
    104,
    101,
    32,
    112,
    108,
    97,
    110,
    101,
    116,
    97,
    110,
    100,
    32,
    105,
    116,
    32,
    119,
    97,
    115,
    100,
    34,
    32,
    118,
    97,
    108,
    117,
    101,
    61,
    34,
    108,
    111,
    111,
    107,
    105,
    110,
    103,
    32,
    97,
    116,
    98,
    101,
    110,
    101,
    102,
    105,
    99,
    105,
    97,
    108,
    97,
    114,
    101,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    109,
    111,
    110,
    105,
    116,
    111,
    114,
    105,
    110,
    103,
    114,
    101,
    112,
    111,
    114,
    116,
    101,
    100,
    108,
    121,
    116,
    104,
    101,
    32,
    109,
    111,
    100,
    101,
    114,
    110,
    119,
    111,
    114,
    107,
    105,
    110,
    103,
    32,
    111,
    110,
    97,
    108,
    108,
    111,
    119,
    101,
    100,
    32,
    116,
    111,
    119,
    104,
    101,
    114,
    101,
    32,
    116,
    104,
    101,
    32,
    105,
    110,
    110,
    111,
    118,
    97,
    116,
    105,
    118,
    101,
    60,
    47,
    97,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    115,
    111,
    117,
    110,
    100,
    116,
    114,
    97,
    99,
    107,
    115,
    101,
    97,
    114,
    99,
    104,
    70,
    111,
    114,
    109,
    116,
    101,
    110,
    100,
    32,
    116,
    111,
    32,
    98,
    101,
    105,
    110,
    112,
    117,
    116,
    32,
    105,
    100,
    61,
    34,
    111,
    112,
    101,
    110,
    105,
    110,
    103,
    32,
    111,
    102,
    114,
    101,
    115,
    116,
    114,
    105,
    99,
    116,
    101,
    100,
    97,
    100,
    111,
    112,
    116,
    101,
    100,
    32,
    98,
    121,
    97,
    100,
    100,
    114,
    101,
    115,
    115,
    105,
    110,
    103,
    116,
    104,
    101,
    111,
    108,
    111,
    103,
    105,
    97,
    110,
    109,
    101,
    116,
    104,
    111,
    100,
    115,
    32,
    111,
    102,
    118,
    97,
    114,
    105,
    97,
    110,
    116,
    32,
    111,
    102,
    67,
    104,
    114,
    105,
    115,
    116,
    105,
    97,
    110,
    32,
    118,
    101,
    114,
    121,
    32,
    108,
    97,
    114,
    103,
    101,
    97,
    117,
    116,
    111,
    109,
    111,
    116,
    105,
    118,
    101,
    98,
    121,
    32,
    102,
    97,
    114,
    32,
    116,
    104,
    101,
    114,
    97,
    110,
    103,
    101,
    32,
    102,
    114,
    111,
    109,
    112,
    117,
    114,
    115,
    117,
    105,
    116,
    32,
    111,
    102,
    102,
    111,
    108,
    108,
    111,
    119,
    32,
    116,
    104,
    101,
    98,
    114,
    111,
    117,
    103,
    104,
    116,
    32,
    116,
    111,
    105,
    110,
    32,
    69,
    110,
    103,
    108,
    97,
    110,
    100,
    97,
    103,
    114,
    101,
    101,
    32,
    116,
    104,
    97,
    116,
    97,
    99,
    99,
    117,
    115,
    101,
    100,
    32,
    111,
    102,
    99,
    111,
    109,
    101,
    115,
    32,
    102,
    114,
    111,
    109,
    112,
    114,
    101,
    118,
    101,
    110,
    116,
    105,
    110,
    103,
    100,
    105,
    118,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    104,
    105,
    115,
    32,
    111,
    114,
    32,
    104,
    101,
    114,
    116,
    114,
    101,
    109,
    101,
    110,
    100,
    111,
    117,
    115,
    102,
    114,
    101,
    101,
    100,
    111,
    109,
    32,
    111,
    102,
    99,
    111,
    110,
    99,
    101,
    114,
    110,
    105,
    110,
    103,
    48,
    32,
    49,
    101,
    109,
    32,
    49,
    101,
    109,
    59,
    66,
    97,
    115,
    107,
    101,
    116,
    98,
    97,
    108,
    108,
    47,
    115,
    116,
    121,
    108,
    101,
    46,
    99,
    115,
    115,
    97,
    110,
    32,
    101,
    97,
    114,
    108,
    105,
    101,
    114,
    101,
    118,
    101,
    110,
    32,
    97,
    102,
    116,
    101,
    114,
    47,
    34,
    32,
    116,
    105,
    116,
    108,
    101,
    61,
    34,
    46,
    99,
    111,
    109,
    47,
    105,
    110,
    100,
    101,
    120,
    116,
    97,
    107,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    112,
    105,
    116,
    116,
    115,
    98,
    117,
    114,
    103,
    104,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    34,
    62,
    13,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    40,
    102,
    116,
    117,
    114,
    110,
    101,
    100,
    32,
    111,
    117,
    116,
    104,
    97,
    118,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    13,
    10,
    32,
    111,
    99,
    99,
    97,
    115,
    105,
    111,
    110,
    97,
    108,
    98,
    101,
    99,
    97,
    117,
    115,
    101,
    32,
    105,
    116,
    115,
    116,
    97,
    114,
    116,
    101,
    100,
    32,
    116,
    111,
    112,
    104,
    121,
    115,
    105,
    99,
    97,
    108,
    108,
    121,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    32,
    32,
    99,
    114,
    101,
    97,
    116,
    101,
    100,
    32,
    98,
    121,
    67,
    117,
    114,
    114,
    101,
    110,
    116,
    108,
    121,
    44,
    32,
    98,
    103,
    99,
    111,
    108,
    111,
    114,
    61,
    34,
    116,
    97,
    98,
    105,
    110,
    100,
    101,
    120,
    61,
    34,
    100,
    105,
    115,
    97,
    115,
    116,
    114,
    111,
    117,
    115,
    65,
    110,
    97,
    108,
    121,
    116,
    105,
    99,
    115,
    32,
    97,
    108,
    115,
    111,
    32,
    104,
    97,
    115,
    32,
    97,
    62,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    60,
    47,
    115,
    116,
    121,
    108,
    101,
    62,
    10,
    60,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    102,
    111,
    114,
    115,
    105,
    110,
    103,
    101,
    114,
    32,
    97,
    110,
    100,
    46,
    115,
    114,
    99,
    32,
    61,
    32,
    34,
    47,
    47,
    118,
    105,
    111,
    108,
    97,
    116,
    105,
    111,
    110,
    115,
    116,
    104,
    105,
    115,
    32,
    112,
    111,
    105,
    110,
    116,
    99,
    111,
    110,
    115,
    116,
    97,
    110,
    116,
    108,
    121,
    105,
    115,
    32,
    108,
    111,
    99,
    97,
    116,
    101,
    100,
    114,
    101,
    99,
    111,
    114,
    100,
    105,
    110,
    103,
    115,
    100,
    32,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    101,
    110,
    101,
    100,
    101,
    114,
    108,
    97,
    110,
    100,
    115,
    112,
    111,
    114,
    116,
    117,
    103,
    117,
    195,
    170,
    115,
    215,
    162,
    215,
    145,
    215,
    168,
    215,
    153,
    215,
    170,
    217,
    129,
    216,
    167,
    216,
    177,
    216,
    179,
    219,
    140,
    100,
    101,
    115,
    97,
    114,
    114,
    111,
    108,
    108,
    111,
    99,
    111,
    109,
    101,
    110,
    116,
    97,
    114,
    105,
    111,
    101,
    100,
    117,
    99,
    97,
    99,
    105,
    195,
    179,
    110,
    115,
    101,
    112,
    116,
    105,
    101,
    109,
    98,
    114,
    101,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    97,
    100,
    111,
    100,
    105,
    114,
    101,
    99,
    99,
    105,
    195,
    179,
    110,
    117,
    98,
    105,
    99,
    97,
    99,
    105,
    195,
    179,
    110,
    112,
    117,
    98,
    108,
    105,
    99,
    105,
    100,
    97,
    100,
    114,
    101,
    115,
    112,
    117,
    101,
    115,
    116,
    97,
    115,
    114,
    101,
    115,
    117,
    108,
    116,
    97,
    100,
    111,
    115,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    116,
    101,
    114,
    101,
    115,
    101,
    114,
    118,
    97,
    100,
    111,
    115,
    97,
    114,
    116,
    195,
    173,
    99,
    117,
    108,
    111,
    115,
    100,
    105,
    102,
    101,
    114,
    101,
    110,
    116,
    101,
    115,
    115,
    105,
    103,
    117,
    105,
    101,
    110,
    116,
    101,
    115,
    114,
    101,
    112,
    195,
    186,
    98,
    108,
    105,
    99,
    97,
    115,
    105,
    116,
    117,
    97,
    99,
    105,
    195,
    179,
    110,
    109,
    105,
    110,
    105,
    115,
    116,
    101,
    114,
    105,
    111,
    112,
    114,
    105,
    118,
    97,
    99,
    105,
    100,
    97,
    100,
    100,
    105,
    114,
    101,
    99,
    116,
    111,
    114,
    105,
    111,
    102,
    111,
    114,
    109,
    97,
    99,
    105,
    195,
    179,
    110,
    112,
    111,
    98,
    108,
    97,
    99,
    105,
    195,
    179,
    110,
    112,
    114,
    101,
    115,
    105,
    100,
    101,
    110,
    116,
    101,
    99,
    111,
    110,
    116,
    101,
    110,
    105,
    100,
    111,
    115,
    97,
    99,
    99,
    101,
    115,
    111,
    114,
    105,
    111,
    115,
    116,
    101,
    99,
    104,
    110,
    111,
    114,
    97,
    116,
    105,
    112,
    101,
    114,
    115,
    111,
    110,
    97,
    108,
    101,
    115,
    99,
    97,
    116,
    101,
    103,
    111,
    114,
    195,
    173,
    97,
    101,
    115,
    112,
    101,
    99,
    105,
    97,
    108,
    101,
    115,
    100,
    105,
    115,
    112,
    111,
    110,
    105,
    98,
    108,
    101,
    97,
    99,
    116,
    117,
    97,
    108,
    105,
    100,
    97,
    100,
    114,
    101,
    102,
    101,
    114,
    101,
    110,
    99,
    105,
    97,
    118,
    97,
    108,
    108,
    97,
    100,
    111,
    108,
    105,
    100,
    98,
    105,
    98,
    108,
    105,
    111,
    116,
    101,
    99,
    97,
    114,
    101,
    108,
    97,
    99,
    105,
    111,
    110,
    101,
    115,
    99,
    97,
    108,
    101,
    110,
    100,
    97,
    114,
    105,
    111,
    112,
    111,
    108,
    195,
    173,
    116,
    105,
    99,
    97,
    115,
    97,
    110,
    116,
    101,
    114,
    105,
    111,
    114,
    101,
    115,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    111,
    115,
    110,
    97,
    116,
    117,
    114,
    97,
    108,
    101,
    122,
    97,
    109,
    97,
    116,
    101,
    114,
    105,
    97,
    108,
    101,
    115,
    100,
    105,
    102,
    101,
    114,
    101,
    110,
    99,
    105,
    97,
    101,
    99,
    111,
    110,
    195,
    179,
    109,
    105,
    99,
    97,
    116,
    114,
    97,
    110,
    115,
    112,
    111,
    114,
    116,
    101,
    114,
    111,
    100,
    114,
    195,
    173,
    103,
    117,
    101,
    122,
    112,
    97,
    114,
    116,
    105,
    99,
    105,
    112,
    97,
    114,
    101,
    110,
    99,
    117,
    101,
    110,
    116,
    114,
    97,
    110,
    100,
    105,
    115,
    99,
    117,
    115,
    105,
    195,
    179,
    110,
    101,
    115,
    116,
    114,
    117,
    99,
    116,
    117,
    114,
    97,
    102,
    117,
    110,
    100,
    97,
    99,
    105,
    195,
    179,
    110,
    102,
    114,
    101,
    99,
    117,
    101,
    110,
    116,
    101,
    115,
    112,
    101,
    114,
    109,
    97,
    110,
    101,
    110,
    116,
    101,
    116,
    111,
    116,
    97,
    108,
    109,
    101,
    110,
    116,
    101,
    208,
    188,
    208,
    190,
    208,
    182,
    208,
    189,
    208,
    190,
    208,
    177,
    209,
    131,
    208,
    180,
    208,
    181,
    209,
    130,
    208,
    188,
    208,
    190,
    208,
    182,
    208,
    181,
    209,
    130,
    208,
    178,
    209,
    128,
    208,
    181,
    208,
    188,
    209,
    143,
    209,
    130,
    208,
    176,
    208,
    186,
    208,
    182,
    208,
    181,
    209,
    135,
    209,
    130,
    208,
    190,
    208,
    177,
    209,
    139,
    208,
    177,
    208,
    190,
    208,
    187,
    208,
    181,
    208,
    181,
    208,
    190,
    209,
    135,
    208,
    181,
    208,
    189,
    209,
    140,
    209,
    141,
    209,
    130,
    208,
    190,
    208,
    179,
    208,
    190,
    208,
    186,
    208,
    190,
    208,
    179,
    208,
    180,
    208,
    176,
    208,
    191,
    208,
    190,
    209,
    129,
    208,
    187,
    208,
    181,
    208,
    178,
    209,
    129,
    208,
    181,
    208,
    179,
    208,
    190,
    209,
    129,
    208,
    176,
    208,
    185,
    209,
    130,
    208,
    181,
    209,
    135,
    208,
    181,
    209,
    128,
    208,
    181,
    208,
    183,
    208,
    188,
    208,
    190,
    208,
    179,
    209,
    131,
    209,
    130,
    209,
    129,
    208,
    176,
    208,
    185,
    209,
    130,
    208,
    176,
    208,
    182,
    208,
    184,
    208,
    183,
    208,
    189,
    208,
    184,
    208,
    188,
    208,
    181,
    208,
    182,
    208,
    180,
    209,
    131,
    208,
    177,
    209,
    131,
    208,
    180,
    209,
    131,
    209,
    130,
    208,
    159,
    208,
    190,
    208,
    184,
    209,
    129,
    208,
    186,
    208,
    183,
    208,
    180,
    208,
    181,
    209,
    129,
    209,
    140,
    208,
    178,
    208,
    184,
    208,
    180,
    208,
    181,
    208,
    190,
    209,
    129,
    208,
    178,
    209,
    143,
    208,
    183,
    208,
    184,
    208,
    189,
    209,
    131,
    208,
    182,
    208,
    189,
    208,
    190,
    209,
    129,
    208,
    178,
    208,
    190,
    208,
    181,
    208,
    185,
    208,
    187,
    209,
    142,
    208,
    180,
    208,
    181,
    208,
    185,
    208,
    191,
    208,
    190,
    209,
    128,
    208,
    189,
    208,
    190,
    208,
    188,
    208,
    189,
    208,
    190,
    208,
    179,
    208,
    190,
    208,
    180,
    208,
    181,
    209,
    130,
    208,
    181,
    208,
    185,
    209,
    129,
    208,
    178,
    208,
    190,
    208,
    184,
    209,
    133,
    208,
    191,
    209,
    128,
    208,
    176,
    208,
    178,
    208,
    176,
    209,
    130,
    208,
    176,
    208,
    186,
    208,
    190,
    208,
    185,
    208,
    188,
    208,
    181,
    209,
    129,
    209,
    130,
    208,
    190,
    208,
    184,
    208,
    188,
    208,
    181,
    208,
    181,
    209,
    130,
    208,
    182,
    208,
    184,
    208,
    183,
    208,
    189,
    209,
    140,
    208,
    190,
    208,
    180,
    208,
    189,
    208,
    190,
    208,
    185,
    208,
    187,
    209,
    131,
    209,
    135,
    209,
    136,
    208,
    181,
    208,
    191,
    208,
    181,
    209,
    128,
    208,
    181,
    208,
    180,
    209,
    135,
    208,
    176,
    209,
    129,
    209,
    130,
    208,
    184,
    209,
    135,
    208,
    176,
    209,
    129,
    209,
    130,
    209,
    140,
    209,
    128,
    208,
    176,
    208,
    177,
    208,
    190,
    209,
    130,
    208,
    189,
    208,
    190,
    208,
    178,
    209,
    139,
    209,
    133,
    208,
    191,
    209,
    128,
    208,
    176,
    208,
    178,
    208,
    190,
    209,
    129,
    208,
    190,
    208,
    177,
    208,
    190,
    208,
    185,
    208,
    191,
    208,
    190,
    209,
    130,
    208,
    190,
    208,
    188,
    208,
    188,
    208,
    181,
    208,
    189,
    208,
    181,
    208,
    181,
    209,
    135,
    208,
    184,
    209,
    129,
    208,
    187,
    208,
    181,
    208,
    189,
    208,
    190,
    208,
    178,
    209,
    139,
    208,
    181,
    209,
    131,
    209,
    129,
    208,
    187,
    209,
    131,
    208,
    179,
    208,
    190,
    208,
    186,
    208,
    190,
    208,
    187,
    208,
    190,
    208,
    189,
    208,
    176,
    208,
    183,
    208,
    176,
    208,
    180,
    209,
    130,
    208,
    176,
    208,
    186,
    208,
    190,
    208,
    181,
    209,
    130,
    208,
    190,
    208,
    179,
    208,
    180,
    208,
    176,
    208,
    191,
    208,
    190,
    209,
    135,
    209,
    130,
    208,
    184,
    208,
    159,
    208,
    190,
    209,
    129,
    208,
    187,
    208,
    181,
    209,
    130,
    208,
    176,
    208,
    186,
    208,
    184,
    208,
    181,
    208,
    189,
    208,
    190,
    208,
    178,
    209,
    139,
    208,
    185,
    209,
    129,
    209,
    130,
    208,
    190,
    208,
    184,
    209,
    130,
    209,
    130,
    208,
    176,
    208,
    186,
    208,
    184,
    209,
    133,
    209,
    129,
    209,
    128,
    208,
    176,
    208,
    183,
    209,
    131,
    208,
    161,
    208,
    176,
    208,
    189,
    208,
    186,
    209,
    130,
    209,
    132,
    208,
    190,
    209,
    128,
    209,
    131,
    208,
    188,
    208,
    154,
    208,
    190,
    208,
    179,
    208,
    180,
    208,
    176,
    208,
    186,
    208,
    189,
    208,
    184,
    208,
    179,
    208,
    184,
    209,
    129,
    208,
    187,
    208,
    190,
    208,
    178,
    208,
    176,
    208,
    189,
    208,
    176,
    209,
    136,
    208,
    181,
    208,
    185,
    208,
    189,
    208,
    176,
    208,
    185,
    209,
    130,
    208,
    184,
    209,
    129,
    208,
    178,
    208,
    190,
    208,
    184,
    208,
    188,
    209,
    129,
    208,
    178,
    209,
    143,
    208,
    183,
    209,
    140,
    208,
    187,
    209,
    142,
    208,
    177,
    208,
    190,
    208,
    185,
    209,
    135,
    208,
    176,
    209,
    129,
    209,
    130,
    208,
    190,
    209,
    129,
    209,
    128,
    208,
    181,
    208,
    180,
    208,
    184,
    208,
    154,
    209,
    128,
    208,
    190,
    208,
    188,
    208,
    181,
    208,
    164,
    208,
    190,
    209,
    128,
    209,
    131,
    208,
    188,
    209,
    128,
    209,
    139,
    208,
    189,
    208,
    186,
    208,
    181,
    209,
    129,
    209,
    130,
    208,
    176,
    208,
    187,
    208,
    184,
    208,
    191,
    208,
    190,
    208,
    184,
    209,
    129,
    208,
    186,
    209,
    130,
    209,
    139,
    209,
    129,
    209,
    143,
    209,
    135,
    208,
    188,
    208,
    181,
    209,
    129,
    209,
    143,
    209,
    134,
    209,
    134,
    208,
    181,
    208,
    189,
    209,
    130,
    209,
    128,
    209,
    130,
    209,
    128,
    209,
    131,
    208,
    180,
    208,
    176,
    209,
    129,
    208,
    176,
    208,
    188,
    209,
    139,
    209,
    133,
    209,
    128,
    209,
    139,
    208,
    189,
    208,
    186,
    208,
    176,
    208,
    157,
    208,
    190,
    208,
    178,
    209,
    139,
    208,
    185,
    209,
    135,
    208,
    176,
    209,
    129,
    208,
    190,
    208,
    178,
    208,
    188,
    208,
    181,
    209,
    129,
    209,
    130,
    208,
    176,
    209,
    132,
    208,
    184,
    208,
    187,
    209,
    140,
    208,
    188,
    208,
    188,
    208,
    176,
    209,
    128,
    209,
    130,
    208,
    176,
    209,
    129,
    209,
    130,
    209,
    128,
    208,
    176,
    208,
    189,
    208,
    188,
    208,
    181,
    209,
    129,
    209,
    130,
    208,
    181,
    209,
    130,
    208,
    181,
    208,
    186,
    209,
    129,
    209,
    130,
    208,
    189,
    208,
    176,
    209,
    136,
    208,
    184,
    209,
    133,
    208,
    188,
    208,
    184,
    208,
    189,
    209,
    131,
    209,
    130,
    208,
    184,
    208,
    188,
    208,
    181,
    208,
    189,
    208,
    184,
    208,
    184,
    208,
    188,
    208,
    181,
    209,
    142,
    209,
    130,
    208,
    189,
    208,
    190,
    208,
    188,
    208,
    181,
    209,
    128,
    208,
    179,
    208,
    190,
    209,
    128,
    208,
    190,
    208,
    180,
    209,
    129,
    208,
    176,
    208,
    188,
    208,
    190,
    208,
    188,
    209,
    141,
    209,
    130,
    208,
    190,
    208,
    188,
    209,
    131,
    208,
    186,
    208,
    190,
    208,
    189,
    209,
    134,
    208,
    181,
    209,
    129,
    208,
    178,
    208,
    190,
    208,
    181,
    208,
    188,
    208,
    186,
    208,
    176,
    208,
    186,
    208,
    190,
    208,
    185,
    208,
    144,
    209,
    128,
    209,
    133,
    208,
    184,
    208,
    178,
    217,
    133,
    217,
    134,
    216,
    170,
    216,
    175,
    217,
    137,
    216,
    165,
    216,
    177,
    216,
    179,
    216,
    167,
    217,
    132,
    216,
    177,
    216,
    179,
    216,
    167,
    217,
    132,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    185,
    216,
    167,
    217,
    133,
    217,
    131,
    216,
    170,
    216,
    168,
    217,
    135,
    216,
    167,
    216,
    168,
    216,
    177,
    216,
    167,
    217,
    133,
    216,
    172,
    216,
    167,
    217,
    132,
    217,
    138,
    217,
    136,
    217,
    133,
    216,
    167,
    217,
    132,
    216,
    181,
    217,
    136,
    216,
    177,
    216,
    172,
    216,
    175,
    217,
    138,
    216,
    175,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    185,
    216,
    182,
    217,
    136,
    216,
    165,
    216,
    182,
    216,
    167,
    217,
    129,
    216,
    169,
    216,
    167,
    217,
    132,
    217,
    130,
    216,
    179,
    217,
    133,
    216,
    167,
    217,
    132,
    216,
    185,
    216,
    167,
    216,
    168,
    216,
    170,
    216,
    173,
    217,
    133,
    217,
    138,
    217,
    132,
    217,
    133,
    217,
    132,
    217,
    129,
    216,
    167,
    216,
    170,
    217,
    133,
    217,
    132,
    216,
    170,
    217,
    130,
    217,
    137,
    216,
    170,
    216,
    185,
    216,
    175,
    217,
    138,
    217,
    132,
    216,
    167,
    217,
    132,
    216,
    180,
    216,
    185,
    216,
    177,
    216,
    163,
    216,
    174,
    216,
    168,
    216,
    167,
    216,
    177,
    216,
    170,
    216,
    183,
    217,
    136,
    217,
    138,
    216,
    177,
    216,
    185,
    217,
    132,
    217,
    138,
    217,
    131,
    217,
    133,
    216,
    165,
    216,
    177,
    217,
    129,
    216,
    167,
    217,
    130,
    216,
    183,
    217,
    132,
    216,
    168,
    216,
    167,
    216,
    170,
    216,
    167,
    217,
    132,
    217,
    132,
    216,
    186,
    216,
    169,
    216,
    170,
    216,
    177,
    216,
    170,
    217,
    138,
    216,
    168,
    216,
    167,
    217,
    132,
    217,
    134,
    216,
    167,
    216,
    179,
    216,
    167,
    217,
    132,
    216,
    180,
    217,
    138,
    216,
    174,
    217,
    133,
    217,
    134,
    216,
    170,
    216,
    175,
    217,
    138,
    216,
    167,
    217,
    132,
    216,
    185,
    216,
    177,
    216,
    168,
    216,
    167,
    217,
    132,
    217,
    130,
    216,
    181,
    216,
    181,
    216,
    167,
    217,
    129,
    217,
    132,
    216,
    167,
    217,
    133,
    216,
    185,
    217,
    132,
    217,
    138,
    217,
    135,
    216,
    167,
    216,
    170,
    216,
    173,
    216,
    175,
    217,
    138,
    216,
    171,
    216,
    167,
    217,
    132,
    217,
    132,
    217,
    135,
    217,
    133,
    216,
    167,
    217,
    132,
    216,
    185,
    217,
    133,
    217,
    132,
    217,
    133,
    217,
    131,
    216,
    170,
    216,
    168,
    216,
    169,
    217,
    138,
    217,
    133,
    217,
    131,
    217,
    134,
    217,
    131,
    216,
    167,
    217,
    132,
    216,
    183,
    217,
    129,
    217,
    132,
    217,
    129,
    217,
    138,
    216,
    175,
    217,
    138,
    217,
    136,
    216,
    165,
    216,
    175,
    216,
    167,
    216,
    177,
    216,
    169,
    216,
    170,
    216,
    167,
    216,
    177,
    217,
    138,
    216,
    174,
    216,
    167,
    217,
    132,
    216,
    181,
    216,
    173,
    216,
    169,
    216,
    170,
    216,
    179,
    216,
    172,
    217,
    138,
    217,
    132,
    216,
    167,
    217,
    132,
    217,
    136,
    217,
    130,
    216,
    170,
    216,
    185,
    217,
    134,
    216,
    175,
    217,
    133,
    216,
    167,
    217,
    133,
    216,
    175,
    217,
    138,
    217,
    134,
    216,
    169,
    216,
    170,
    216,
    181,
    217,
    133,
    217,
    138,
    217,
    133,
    216,
    163,
    216,
    177,
    216,
    180,
    217,
    138,
    217,
    129,
    216,
    167,
    217,
    132,
    216,
    176,
    217,
    138,
    217,
    134,
    216,
    185,
    216,
    177,
    216,
    168,
    217,
    138,
    216,
    169,
    216,
    168,
    217,
    136,
    216,
    167,
    216,
    168,
    216,
    169,
    216,
    163,
    217,
    132,
    216,
    185,
    216,
    167,
    216,
    168,
    216,
    167,
    217,
    132,
    216,
    179,
    217,
    129,
    216,
    177,
    217,
    133,
    216,
    180,
    216,
    167,
    217,
    131,
    217,
    132,
    216,
    170,
    216,
    185,
    216,
    167,
    217,
    132,
    217,
    137,
    216,
    167,
    217,
    132,
    216,
    163,
    217,
    136,
    217,
    132,
    216,
    167,
    217,
    132,
    216,
    179,
    217,
    134,
    216,
    169,
    216,
    172,
    216,
    167,
    217,
    133,
    216,
    185,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    181,
    216,
    173,
    217,
    129,
    216,
    167,
    217,
    132,
    216,
    175,
    217,
    138,
    217,
    134,
    217,
    131,
    217,
    132,
    217,
    133,
    216,
    167,
    216,
    170,
    216,
    167,
    217,
    132,
    216,
    174,
    216,
    167,
    216,
    181,
    216,
    167,
    217,
    132,
    217,
    133,
    217,
    132,
    217,
    129,
    216,
    163,
    216,
    185,
    216,
    182,
    216,
    167,
    216,
    161,
    217,
    131,
    216,
    170,
    216,
    167,
    216,
    168,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    174,
    217,
    138,
    216,
    177,
    216,
    177,
    216,
    179,
    216,
    167,
    216,
    166,
    217,
    132,
    216,
    167,
    217,
    132,
    217,
    130,
    217,
    132,
    216,
    168,
    216,
    167,
    217,
    132,
    216,
    163,
    216,
    175,
    216,
    168,
    217,
    133,
    217,
    130,
    216,
    167,
    216,
    183,
    216,
    185,
    217,
    133,
    216,
    177,
    216,
    167,
    216,
    179,
    217,
    132,
    217,
    133,
    217,
    134,
    216,
    183,
    217,
    130,
    216,
    169,
    216,
    167,
    217,
    132,
    217,
    131,
    216,
    170,
    216,
    168,
    216,
    167,
    217,
    132,
    216,
    177,
    216,
    172,
    217,
    132,
    216,
    167,
    216,
    180,
    216,
    170,
    216,
    177,
    217,
    131,
    216,
    167,
    217,
    132,
    217,
    130,
    216,
    175,
    217,
    133,
    217,
    138,
    216,
    185,
    216,
    183,
    217,
    138,
    217,
    131,
    115,
    66,
    121,
    84,
    97,
    103,
    78,
    97,
    109,
    101,
    40,
    46,
    106,
    112,
    103,
    34,
    32,
    97,
    108,
    116,
    61,
    34,
    49,
    112,
    120,
    32,
    115,
    111,
    108,
    105,
    100,
    32,
    35,
    46,
    103,
    105,
    102,
    34,
    32,
    97,
    108,
    116,
    61,
    34,
    116,
    114,
    97,
    110,
    115,
    112,
    97,
    114,
    101,
    110,
    116,
    105,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    97,
    112,
    112,
    108,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    34,
    32,
    111,
    110,
    99,
    108,
    105,
    99,
    107,
    61,
    34,
    101,
    115,
    116,
    97,
    98,
    108,
    105,
    115,
    104,
    101,
    100,
    97,
    100,
    118,
    101,
    114,
    116,
    105,
    115,
    105,
    110,
    103,
    46,
    112,
    110,
    103,
    34,
    32,
    97,
    108,
    116,
    61,
    34,
    101,
    110,
    118,
    105,
    114,
    111,
    110,
    109,
    101,
    110,
    116,
    112,
    101,
    114,
    102,
    111,
    114,
    109,
    97,
    110,
    99,
    101,
    97,
    112,
    112,
    114,
    111,
    112,
    114,
    105,
    97,
    116,
    101,
    38,
    97,
    109,
    112,
    59,
    109,
    100,
    97,
    115,
    104,
    59,
    105,
    109,
    109,
    101,
    100,
    105,
    97,
    116,
    101,
    108,
    121,
    60,
    47,
    115,
    116,
    114,
    111,
    110,
    103,
    62,
    60,
    47,
    114,
    97,
    116,
    104,
    101,
    114,
    32,
    116,
    104,
    97,
    110,
    116,
    101,
    109,
    112,
    101,
    114,
    97,
    116,
    117,
    114,
    101,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    109,
    101,
    110,
    116,
    99,
    111,
    109,
    112,
    101,
    116,
    105,
    116,
    105,
    111,
    110,
    112,
    108,
    97,
    99,
    101,
    104,
    111,
    108,
    100,
    101,
    114,
    118,
    105,
    115,
    105,
    98,
    105,
    108,
    105,
    116,
    121,
    58,
    99,
    111,
    112,
    121,
    114,
    105,
    103,
    104,
    116,
    34,
    62,
    48,
    34,
    32,
    104,
    101,
    105,
    103,
    104,
    116,
    61,
    34,
    101,
    118,
    101,
    110,
    32,
    116,
    104,
    111,
    117,
    103,
    104,
    114,
    101,
    112,
    108,
    97,
    99,
    101,
    109,
    101,
    110,
    116,
    100,
    101,
    115,
    116,
    105,
    110,
    97,
    116,
    105,
    111,
    110,
    67,
    111,
    114,
    112,
    111,
    114,
    97,
    116,
    105,
    111,
    110,
    60,
    117,
    108,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    65,
    115,
    115,
    111,
    99,
    105,
    97,
    116,
    105,
    111,
    110,
    105,
    110,
    100,
    105,
    118,
    105,
    100,
    117,
    97,
    108,
    115,
    112,
    101,
    114,
    115,
    112,
    101,
    99,
    116,
    105,
    118,
    101,
    115,
    101,
    116,
    84,
    105,
    109,
    101,
    111,
    117,
    116,
    40,
    117,
    114,
    108,
    40,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    109,
    97,
    116,
    104,
    101,
    109,
    97,
    116,
    105,
    99,
    115,
    109,
    97,
    114,
    103,
    105,
    110,
    45,
    116,
    111,
    112,
    58,
    101,
    118,
    101,
    110,
    116,
    117,
    97,
    108,
    108,
    121,
    32,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    105,
    111,
    110,
    41,
    32,
    110,
    111,
    45,
    114,
    101,
    112,
    101,
    97,
    116,
    99,
    111,
    108,
    108,
    101,
    99,
    116,
    105,
    111,
    110,
    115,
    46,
    74,
    80,
    71,
    124,
    116,
    104,
    117,
    109,
    98,
    124,
    112,
    97,
    114,
    116,
    105,
    99,
    105,
    112,
    97,
    116,
    101,
    47,
    104,
    101,
    97,
    100,
    62,
    60,
    98,
    111,
    100,
    121,
    102,
    108,
    111,
    97,
    116,
    58,
    108,
    101,
    102,
    116,
    59,
    60,
    108,
    105,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    104,
    117,
    110,
    100,
    114,
    101,
    100,
    115,
    32,
    111,
    102,
    10,
    10,
    72,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    32,
    99,
    111,
    109,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    99,
    108,
    101,
    97,
    114,
    58,
    98,
    111,
    116,
    104,
    59,
    99,
    111,
    111,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    119,
    105,
    116,
    104,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    108,
    97,
    98,
    101,
    108,
    32,
    102,
    111,
    114,
    61,
    34,
    98,
    111,
    114,
    100,
    101,
    114,
    45,
    116,
    111,
    112,
    58,
    78,
    101,
    119,
    32,
    90,
    101,
    97,
    108,
    97,
    110,
    100,
    114,
    101,
    99,
    111,
    109,
    109,
    101,
    110,
    100,
    101,
    100,
    112,
    104,
    111,
    116,
    111,
    103,
    114,
    97,
    112,
    104,
    121,
    105,
    110,
    116,
    101,
    114,
    101,
    115,
    116,
    105,
    110,
    103,
    38,
    108,
    116,
    59,
    115,
    117,
    112,
    38,
    103,
    116,
    59,
    99,
    111,
    110,
    116,
    114,
    111,
    118,
    101,
    114,
    115,
    121,
    78,
    101,
    116,
    104,
    101,
    114,
    108,
    97,
    110,
    100,
    115,
    97,
    108,
    116,
    101,
    114,
    110,
    97,
    116,
    105,
    118,
    101,
    109,
    97,
    120,
    108,
    101,
    110,
    103,
    116,
    104,
    61,
    34,
    115,
    119,
    105,
    116,
    122,
    101,
    114,
    108,
    97,
    110,
    100,
    68,
    101,
    118,
    101,
    108,
    111,
    112,
    109,
    101,
    110,
    116,
    101,
    115,
    115,
    101,
    110,
    116,
    105,
    97,
    108,
    108,
    121,
    10,
    10,
    65,
    108,
    116,
    104,
    111,
    117,
    103,
    104,
    32,
    60,
    47,
    116,
    101,
    120,
    116,
    97,
    114,
    101,
    97,
    62,
    116,
    104,
    117,
    110,
    100,
    101,
    114,
    98,
    105,
    114,
    100,
    114,
    101,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    101,
    100,
    38,
    97,
    109,
    112,
    59,
    110,
    100,
    97,
    115,
    104,
    59,
    115,
    112,
    101,
    99,
    117,
    108,
    97,
    116,
    105,
    111,
    110,
    99,
    111,
    109,
    109,
    117,
    110,
    105,
    116,
    105,
    101,
    115,
    108,
    101,
    103,
    105,
    115,
    108,
    97,
    116,
    105,
    111,
    110,
    101,
    108,
    101,
    99,
    116,
    114,
    111,
    110,
    105,
    99,
    115,
    10,
    9,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    105,
    108,
    108,
    117,
    115,
    116,
    114,
    97,
    116,
    101,
    100,
    101,
    110,
    103,
    105,
    110,
    101,
    101,
    114,
    105,
    110,
    103,
    116,
    101,
    114,
    114,
    105,
    116,
    111,
    114,
    105,
    101,
    115,
    97,
    117,
    116,
    104,
    111,
    114,
    105,
    116,
    105,
    101,
    115,
    100,
    105,
    115,
    116,
    114,
    105,
    98,
    117,
    116,
    101,
    100,
    54,
    34,
    32,
    104,
    101,
    105,
    103,
    104,
    116,
    61,
    34,
    115,
    97,
    110,
    115,
    45,
    115,
    101,
    114,
    105,
    102,
    59,
    99,
    97,
    112,
    97,
    98,
    108,
    101,
    32,
    111,
    102,
    32,
    100,
    105,
    115,
    97,
    112,
    112,
    101,
    97,
    114,
    101,
    100,
    105,
    110,
    116,
    101,
    114,
    97,
    99,
    116,
    105,
    118,
    101,
    108,
    111,
    111,
    107,
    105,
    110,
    103,
    32,
    102,
    111,
    114,
    105,
    116,
    32,
    119,
    111,
    117,
    108,
    100,
    32,
    98,
    101,
    65,
    102,
    103,
    104,
    97,
    110,
    105,
    115,
    116,
    97,
    110,
    119,
    97,
    115,
    32,
    99,
    114,
    101,
    97,
    116,
    101,
    100,
    77,
    97,
    116,
    104,
    46,
    102,
    108,
    111,
    111,
    114,
    40,
    115,
    117,
    114,
    114,
    111,
    117,
    110,
    100,
    105,
    110,
    103,
    99,
    97,
    110,
    32,
    97,
    108,
    115,
    111,
    32,
    98,
    101,
    111,
    98,
    115,
    101,
    114,
    118,
    97,
    116,
    105,
    111,
    110,
    109,
    97,
    105,
    110,
    116,
    101,
    110,
    97,
    110,
    99,
    101,
    101,
    110,
    99,
    111,
    117,
    110,
    116,
    101,
    114,
    101,
    100,
    60,
    104,
    50,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    109,
    111,
    114,
    101,
    32,
    114,
    101,
    99,
    101,
    110,
    116,
    105,
    116,
    32,
    104,
    97,
    115,
    32,
    98,
    101,
    101,
    110,
    105,
    110,
    118,
    97,
    115,
    105,
    111,
    110,
    32,
    111,
    102,
    41,
    46,
    103,
    101,
    116,
    84,
    105,
    109,
    101,
    40,
    41,
    102,
    117,
    110,
    100,
    97,
    109,
    101,
    110,
    116,
    97,
    108,
    68,
    101,
    115,
    112,
    105,
    116,
    101,
    32,
    116,
    104,
    101,
    34,
    62,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    105,
    110,
    115,
    112,
    105,
    114,
    97,
    116,
    105,
    111,
    110,
    101,
    120,
    97,
    109,
    105,
    110,
    97,
    116,
    105,
    111,
    110,
    112,
    114,
    101,
    112,
    97,
    114,
    97,
    116,
    105,
    111,
    110,
    101,
    120,
    112,
    108,
    97,
    110,
    97,
    116,
    105,
    111,
    110,
    60,
    105,
    110,
    112,
    117,
    116,
    32,
    105,
    100,
    61,
    34,
    60,
    47,
    97,
    62,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    118,
    101,
    114,
    115,
    105,
    111,
    110,
    115,
    32,
    111,
    102,
    105,
    110,
    115,
    116,
    114,
    117,
    109,
    101,
    110,
    116,
    115,
    98,
    101,
    102,
    111,
    114,
    101,
    32,
    116,
    104,
    101,
    32,
    32,
    61,
    32,
    39,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    68,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    105,
    111,
    110,
    114,
    101,
    108,
    97,
    116,
    105,
    118,
    101,
    108,
    121,
    32,
    46,
    115,
    117,
    98,
    115,
    116,
    114,
    105,
    110,
    103,
    40,
    101,
    97,
    99,
    104,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    101,
    120,
    112,
    101,
    114,
    105,
    109,
    101,
    110,
    116,
    115,
    105,
    110,
    102,
    108,
    117,
    101,
    110,
    116,
    105,
    97,
    108,
    105,
    110,
    116,
    101,
    103,
    114,
    97,
    116,
    105,
    111,
    110,
    109,
    97,
    110,
    121,
    32,
    112,
    101,
    111,
    112,
    108,
    101,
    100,
    117,
    101,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    32,
    99,
    111,
    109,
    98,
    105,
    110,
    97,
    116,
    105,
    111,
    110,
    100,
    111,
    32,
    110,
    111,
    116,
    32,
    104,
    97,
    118,
    101,
    77,
    105,
    100,
    100,
    108,
    101,
    32,
    69,
    97,
    115,
    116,
    60,
    110,
    111,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    60,
    99,
    111,
    112,
    121,
    114,
    105,
    103,
    104,
    116,
    34,
    32,
    112,
    101,
    114,
    104,
    97,
    112,
    115,
    32,
    116,
    104,
    101,
    105,
    110,
    115,
    116,
    105,
    116,
    117,
    116,
    105,
    111,
    110,
    105,
    110,
    32,
    68,
    101,
    99,
    101,
    109,
    98,
    101,
    114,
    97,
    114,
    114,
    97,
    110,
    103,
    101,
    109,
    101,
    110,
    116,
    109,
    111,
    115,
    116,
    32,
    102,
    97,
    109,
    111,
    117,
    115,
    112,
    101,
    114,
    115,
    111,
    110,
    97,
    108,
    105,
    116,
    121,
    99,
    114,
    101,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    108,
    105,
    109,
    105,
    116,
    97,
    116,
    105,
    111,
    110,
    115,
    101,
    120,
    99,
    108,
    117,
    115,
    105,
    118,
    101,
    108,
    121,
    115,
    111,
    118,
    101,
    114,
    101,
    105,
    103,
    110,
    116,
    121,
    45,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    34,
    62,
    10,
    60,
    116,
    100,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    117,
    110,
    100,
    101,
    114,
    103,
    114,
    111,
    117,
    110,
    100,
    112,
    97,
    114,
    97,
    108,
    108,
    101,
    108,
    32,
    116,
    111,
    100,
    111,
    99,
    116,
    114,
    105,
    110,
    101,
    32,
    111,
    102,
    111,
    99,
    99,
    117,
    112,
    105,
    101,
    100,
    32,
    98,
    121,
    116,
    101,
    114,
    109,
    105,
    110,
    111,
    108,
    111,
    103,
    121,
    82,
    101,
    110,
    97,
    105,
    115,
    115,
    97,
    110,
    99,
    101,
    97,
    32,
    110,
    117,
    109,
    98,
    101,
    114,
    32,
    111,
    102,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    32,
    102,
    111,
    114,
    101,
    120,
    112,
    108,
    111,
    114,
    97,
    116,
    105,
    111,
    110,
    114,
    101,
    99,
    111,
    103,
    110,
    105,
    116,
    105,
    111,
    110,
    112,
    114,
    101,
    100,
    101,
    99,
    101,
    115,
    115,
    111,
    114,
    60,
    105,
    109,
    103,
    32,
    115,
    114,
    99,
    61,
    34,
    47,
    60,
    104,
    49,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    112,
    117,
    98,
    108,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    109,
    97,
    121,
    32,
    97,
    108,
    115,
    111,
    32,
    98,
    101,
    115,
    112,
    101,
    99,
    105,
    97,
    108,
    105,
    122,
    101,
    100,
    60,
    47,
    102,
    105,
    101,
    108,
    100,
    115,
    101,
    116,
    62,
    112,
    114,
    111,
    103,
    114,
    101,
    115,
    115,
    105,
    118,
    101,
    109,
    105,
    108,
    108,
    105,
    111,
    110,
    115,
    32,
    111,
    102,
    115,
    116,
    97,
    116,
    101,
    115,
    32,
    116,
    104,
    97,
    116,
    101,
    110,
    102,
    111,
    114,
    99,
    101,
    109,
    101,
    110,
    116,
    97,
    114,
    111,
    117,
    110,
    100,
    32,
    116,
    104,
    101,
    32,
    111,
    110,
    101,
    32,
    97,
    110,
    111,
    116,
    104,
    101,
    114,
    46,
    112,
    97,
    114,
    101,
    110,
    116,
    78,
    111,
    100,
    101,
    97,
    103,
    114,
    105,
    99,
    117,
    108,
    116,
    117,
    114,
    101,
    65,
    108,
    116,
    101,
    114,
    110,
    97,
    116,
    105,
    118,
    101,
    114,
    101,
    115,
    101,
    97,
    114,
    99,
    104,
    101,
    114,
    115,
    116,
    111,
    119,
    97,
    114,
    100,
    115,
    32,
    116,
    104,
    101,
    77,
    111,
    115,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    109,
    97,
    110,
    121,
    32,
    111,
    116,
    104,
    101,
    114,
    32,
    40,
    101,
    115,
    112,
    101,
    99,
    105,
    97,
    108,
    108,
    121,
    60,
    116,
    100,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    59,
    119,
    105,
    100,
    116,
    104,
    58,
    49,
    48,
    48,
    37,
    105,
    110,
    100,
    101,
    112,
    101,
    110,
    100,
    101,
    110,
    116,
    60,
    104,
    51,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    32,
    111,
    110,
    99,
    104,
    97,
    110,
    103,
    101,
    61,
    34,
    41,
    46,
    97,
    100,
    100,
    67,
    108,
    97,
    115,
    115,
    40,
    105,
    110,
    116,
    101,
    114,
    97,
    99,
    116,
    105,
    111,
    110,
    79,
    110,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    100,
    97,
    117,
    103,
    104,
    116,
    101,
    114,
    32,
    111,
    102,
    97,
    99,
    99,
    101,
    115,
    115,
    111,
    114,
    105,
    101,
    115,
    98,
    114,
    97,
    110,
    99,
    104,
    101,
    115,
    32,
    111,
    102,
    13,
    10,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    116,
    104,
    101,
    32,
    108,
    97,
    114,
    103,
    101,
    115,
    116,
    100,
    101,
    99,
    108,
    97,
    114,
    97,
    116,
    105,
    111,
    110,
    114,
    101,
    103,
    117,
    108,
    97,
    116,
    105,
    111,
    110,
    115,
    73,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    116,
    114,
    97,
    110,
    115,
    108,
    97,
    116,
    105,
    111,
    110,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    97,
    114,
    121,
    105,
    110,
    32,
    111,
    114,
    100,
    101,
    114,
    32,
    116,
    111,
    34,
    62,
    10,
    60,
    104,
    101,
    97,
    100,
    62,
    10,
    60,
    34,
    32,
    104,
    101,
    105,
    103,
    104,
    116,
    61,
    34,
    49,
    97,
    99,
    114,
    111,
    115,
    115,
    32,
    116,
    104,
    101,
    32,
    111,
    114,
    105,
    101,
    110,
    116,
    97,
    116,
    105,
    111,
    110,
    41,
    59,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    105,
    109,
    112,
    108,
    101,
    109,
    101,
    110,
    116,
    101,
    100,
    99,
    97,
    110,
    32,
    98,
    101,
    32,
    115,
    101,
    101,
    110,
    116,
    104,
    101,
    114,
    101,
    32,
    119,
    97,
    115,
    32,
    97,
    100,
    101,
    109,
    111,
    110,
    115,
    116,
    114,
    97,
    116,
    101,
    99,
    111,
    110,
    116,
    97,
    105,
    110,
    101,
    114,
    34,
    62,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    115,
    116,
    104,
    101,
    32,
    66,
    114,
    105,
    116,
    105,
    115,
    104,
    119,
    97,
    115,
    32,
    119,
    114,
    105,
    116,
    116,
    101,
    110,
    33,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    116,
    59,
    112,
    120,
    59,
    32,
    109,
    97,
    114,
    103,
    105,
    110,
    45,
    102,
    111,
    108,
    108,
    111,
    119,
    101,
    100,
    32,
    98,
    121,
    97,
    98,
    105,
    108,
    105,
    116,
    121,
    32,
    116,
    111,
    32,
    99,
    111,
    109,
    112,
    108,
    105,
    99,
    97,
    116,
    101,
    100,
    100,
    117,
    114,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    32,
    105,
    109,
    109,
    105,
    103,
    114,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    115,
    111,
    32,
    99,
    97,
    108,
    108,
    101,
    100,
    60,
    104,
    52,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    100,
    105,
    115,
    116,
    105,
    110,
    99,
    116,
    105,
    111,
    110,
    114,
    101,
    112,
    108,
    97,
    99,
    101,
    100,
    32,
    98,
    121,
    103,
    111,
    118,
    101,
    114,
    110,
    109,
    101,
    110,
    116,
    115,
    108,
    111,
    99,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    105,
    110,
    32,
    78,
    111,
    118,
    101,
    109,
    98,
    101,
    114,
    119,
    104,
    101,
    116,
    104,
    101,
    114,
    32,
    116,
    104,
    101,
    60,
    47,
    112,
    62,
    10,
    60,
    47,
    100,
    105,
    118,
    62,
    97,
    99,
    113,
    117,
    105,
    115,
    105,
    116,
    105,
    111,
    110,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    116,
    104,
    101,
    32,
    112,
    101,
    114,
    115,
    101,
    99,
    117,
    116,
    105,
    111,
    110,
    100,
    101,
    115,
    105,
    103,
    110,
    97,
    116,
    105,
    111,
    110,
    123,
    102,
    111,
    110,
    116,
    45,
    115,
    105,
    122,
    101,
    58,
    97,
    112,
    112,
    101,
    97,
    114,
    101,
    100,
    32,
    105,
    110,
    105,
    110,
    118,
    101,
    115,
    116,
    105,
    103,
    97,
    116,
    101,
    101,
    120,
    112,
    101,
    114,
    105,
    101,
    110,
    99,
    101,
    100,
    109,
    111,
    115,
    116,
    32,
    108,
    105,
    107,
    101,
    108,
    121,
    119,
    105,
    100,
    101,
    108,
    121,
    32,
    117,
    115,
    101,
    100,
    100,
    105,
    115,
    99,
    117,
    115,
    115,
    105,
    111,
    110,
    115,
    112,
    114,
    101,
    115,
    101,
    110,
    99,
    101,
    32,
    111,
    102,
    32,
    40,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    101,
    120,
    116,
    101,
    110,
    115,
    105,
    118,
    101,
    108,
    121,
    73,
    116,
    32,
    104,
    97,
    115,
    32,
    98,
    101,
    101,
    110,
    105,
    116,
    32,
    100,
    111,
    101,
    115,
    32,
    110,
    111,
    116,
    99,
    111,
    110,
    116,
    114,
    97,
    114,
    121,
    32,
    116,
    111,
    105,
    110,
    104,
    97,
    98,
    105,
    116,
    97,
    110,
    116,
    115,
    105,
    109,
    112,
    114,
    111,
    118,
    101,
    109,
    101,
    110,
    116,
    115,
    99,
    104,
    111,
    108,
    97,
    114,
    115,
    104,
    105,
    112,
    99,
    111,
    110,
    115,
    117,
    109,
    112,
    116,
    105,
    111,
    110,
    105,
    110,
    115,
    116,
    114,
    117,
    99,
    116,
    105,
    111,
    110,
    102,
    111,
    114,
    32,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    111,
    110,
    101,
    32,
    111,
    114,
    32,
    109,
    111,
    114,
    101,
    112,
    120,
    59,
    32,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    116,
    104,
    101,
    32,
    99,
    117,
    114,
    114,
    101,
    110,
    116,
    97,
    32,
    115,
    101,
    114,
    105,
    101,
    115,
    32,
    111,
    102,
    97,
    114,
    101,
    32,
    117,
    115,
    117,
    97,
    108,
    108,
    121,
    114,
    111,
    108,
    101,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    112,
    114,
    101,
    118,
    105,
    111,
    117,
    115,
    108,
    121,
    32,
    100,
    101,
    114,
    105,
    118,
    97,
    116,
    105,
    118,
    101,
    115,
    101,
    118,
    105,
    100,
    101,
    110,
    99,
    101,
    32,
    111,
    102,
    101,
    120,
    112,
    101,
    114,
    105,
    101,
    110,
    99,
    101,
    115,
    99,
    111,
    108,
    111,
    114,
    115,
    99,
    104,
    101,
    109,
    101,
    115,
    116,
    97,
    116,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    99,
    101,
    114,
    116,
    105,
    102,
    105,
    99,
    97,
    116,
    101,
    60,
    47,
    97,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    32,
    115,
    101,
    108,
    101,
    99,
    116,
    101,
    100,
    61,
    34,
    104,
    105,
    103,
    104,
    32,
    115,
    99,
    104,
    111,
    111,
    108,
    114,
    101,
    115,
    112,
    111,
    110,
    115,
    101,
    32,
    116,
    111,
    99,
    111,
    109,
    102,
    111,
    114,
    116,
    97,
    98,
    108,
    101,
    97,
    100,
    111,
    112,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    116,
    104,
    114,
    101,
    101,
    32,
    121,
    101,
    97,
    114,
    115,
    116,
    104,
    101,
    32,
    99,
    111,
    117,
    110,
    116,
    114,
    121,
    105,
    110,
    32,
    70,
    101,
    98,
    114,
    117,
    97,
    114,
    121,
    115,
    111,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    112,
    101,
    111,
    112,
    108,
    101,
    32,
    119,
    104,
    111,
    32,
    112,
    114,
    111,
    118,
    105,
    100,
    101,
    100,
    32,
    98,
    121,
    60,
    112,
    97,
    114,
    97,
    109,
    32,
    110,
    97,
    109,
    101,
    97,
    102,
    102,
    101,
    99,
    116,
    101,
    100,
    32,
    98,
    121,
    105,
    110,
    32,
    116,
    101,
    114,
    109,
    115,
    32,
    111,
    102,
    97,
    112,
    112,
    111,
    105,
    110,
    116,
    109,
    101,
    110,
    116,
    73,
    83,
    79,
    45,
    56,
    56,
    53,
    57,
    45,
    49,
    34,
    119,
    97,
    115,
    32,
    98,
    111,
    114,
    110,
    32,
    105,
    110,
    104,
    105,
    115,
    116,
    111,
    114,
    105,
    99,
    97,
    108,
    32,
    114,
    101,
    103,
    97,
    114,
    100,
    101,
    100,
    32,
    97,
    115,
    109,
    101,
    97,
    115,
    117,
    114,
    101,
    109,
    101,
    110,
    116,
    105,
    115,
    32,
    98,
    97,
    115,
    101,
    100,
    32,
    111,
    110,
    32,
    97,
    110,
    100,
    32,
    111,
    116,
    104,
    101,
    114,
    32,
    58,
    32,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    115,
    105,
    103,
    110,
    105,
    102,
    105,
    99,
    97,
    110,
    116,
    99,
    101,
    108,
    101,
    98,
    114,
    97,
    116,
    105,
    111,
    110,
    116,
    114,
    97,
    110,
    115,
    109,
    105,
    116,
    116,
    101,
    100,
    47,
    106,
    115,
    47,
    106,
    113,
    117,
    101,
    114,
    121,
    46,
    105,
    115,
    32,
    107,
    110,
    111,
    119,
    110,
    32,
    97,
    115,
    116,
    104,
    101,
    111,
    114,
    101,
    116,
    105,
    99,
    97,
    108,
    32,
    116,
    97,
    98,
    105,
    110,
    100,
    101,
    120,
    61,
    34,
    105,
    116,
    32,
    99,
    111,
    117,
    108,
    100,
    32,
    98,
    101,
    60,
    110,
    111,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    104,
    97,
    118,
    105,
    110,
    103,
    32,
    98,
    101,
    101,
    110,
    13,
    10,
    60,
    104,
    101,
    97,
    100,
    62,
    13,
    10,
    60,
    32,
    38,
    113,
    117,
    111,
    116,
    59,
    84,
    104,
    101,
    32,
    99,
    111,
    109,
    112,
    105,
    108,
    97,
    116,
    105,
    111,
    110,
    104,
    101,
    32,
    104,
    97,
    100,
    32,
    98,
    101,
    101,
    110,
    112,
    114,
    111,
    100,
    117,
    99,
    101,
    100,
    32,
    98,
    121,
    112,
    104,
    105,
    108,
    111,
    115,
    111,
    112,
    104,
    101,
    114,
    99,
    111,
    110,
    115,
    116,
    114,
    117,
    99,
    116,
    101,
    100,
    105,
    110,
    116,
    101,
    110,
    100,
    101,
    100,
    32,
    116,
    111,
    97,
    109,
    111,
    110,
    103,
    32,
    111,
    116,
    104,
    101,
    114,
    99,
    111,
    109,
    112,
    97,
    114,
    101,
    100,
    32,
    116,
    111,
    116,
    111,
    32,
    115,
    97,
    121,
    32,
    116,
    104,
    97,
    116,
    69,
    110,
    103,
    105,
    110,
    101,
    101,
    114,
    105,
    110,
    103,
    97,
    32,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    114,
    101,
    102,
    101,
    114,
    114,
    101,
    100,
    32,
    116,
    111,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    115,
    98,
    101,
    108,
    105,
    101,
    102,
    32,
    116,
    104,
    97,
    116,
    112,
    104,
    111,
    116,
    111,
    103,
    114,
    97,
    112,
    104,
    115,
    105,
    100,
    101,
    110,
    116,
    105,
    102,
    121,
    105,
    110,
    103,
    72,
    105,
    115,
    116,
    111,
    114,
    121,
    32,
    111,
    102,
    32,
    82,
    101,
    112,
    117,
    98,
    108,
    105,
    99,
    32,
    111,
    102,
    110,
    101,
    99,
    101,
    115,
    115,
    97,
    114,
    105,
    108,
    121,
    112,
    114,
    111,
    98,
    97,
    98,
    105,
    108,
    105,
    116,
    121,
    116,
    101,
    99,
    104,
    110,
    105,
    99,
    97,
    108,
    108,
    121,
    108,
    101,
    97,
    118,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    115,
    112,
    101,
    99,
    116,
    97,
    99,
    117,
    108,
    97,
    114,
    102,
    114,
    97,
    99,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    101,
    108,
    101,
    99,
    116,
    114,
    105,
    99,
    105,
    116,
    121,
    104,
    101,
    97,
    100,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    114,
    101,
    115,
    116,
    97,
    117,
    114,
    97,
    110,
    116,
    115,
    112,
    97,
    114,
    116,
    110,
    101,
    114,
    115,
    104,
    105,
    112,
    101,
    109,
    112,
    104,
    97,
    115,
    105,
    115,
    32,
    111,
    110,
    109,
    111,
    115,
    116,
    32,
    114,
    101,
    99,
    101,
    110,
    116,
    115,
    104,
    97,
    114,
    101,
    32,
    119,
    105,
    116,
    104,
    32,
    115,
    97,
    121,
    105,
    110,
    103,
    32,
    116,
    104,
    97,
    116,
    102,
    105,
    108,
    108,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    100,
    101,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    116,
    111,
    105,
    116,
    32,
    105,
    115,
    32,
    111,
    102,
    116,
    101,
    110,
    34,
    62,
    60,
    47,
    105,
    102,
    114,
    97,
    109,
    101,
    62,
    97,
    115,
    32,
    102,
    111,
    108,
    108,
    111,
    119,
    115,
    58,
    109,
    101,
    114,
    103,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    116,
    104,
    114,
    111,
    117,
    103,
    104,
    32,
    116,
    104,
    101,
    99,
    111,
    109,
    109,
    101,
    114,
    99,
    105,
    97,
    108,
    32,
    112,
    111,
    105,
    110,
    116,
    101,
    100,
    32,
    111,
    117,
    116,
    111,
    112,
    112,
    111,
    114,
    116,
    117,
    110,
    105,
    116,
    121,
    118,
    105,
    101,
    119,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    109,
    101,
    110,
    116,
    100,
    105,
    118,
    105,
    115,
    105,
    111,
    110,
    32,
    111,
    102,
    112,
    114,
    111,
    103,
    114,
    97,
    109,
    109,
    105,
    110,
    103,
    104,
    101,
    32,
    114,
    101,
    99,
    101,
    105,
    118,
    101,
    100,
    115,
    101,
    116,
    73,
    110,
    116,
    101,
    114,
    118,
    97,
    108,
    34,
    62,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    47,
    105,
    110,
    32,
    78,
    101,
    119,
    32,
    89,
    111,
    114,
    107,
    97,
    100,
    100,
    105,
    116,
    105,
    111,
    110,
    97,
    108,
    32,
    99,
    111,
    109,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    10,
    10,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    105,
    110,
    99,
    111,
    114,
    112,
    111,
    114,
    97,
    116,
    101,
    59,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    60,
    97,
    116,
    116,
    97,
    99,
    104,
    69,
    118,
    101,
    110,
    116,
    98,
    101,
    99,
    97,
    109,
    101,
    32,
    116,
    104,
    101,
    32,
    34,
    32,
    116,
    97,
    114,
    103,
    101,
    116,
    61,
    34,
    95,
    99,
    97,
    114,
    114,
    105,
    101,
    100,
    32,
    111,
    117,
    116,
    83,
    111,
    109,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    115,
    99,
    105,
    101,
    110,
    99,
    101,
    32,
    97,
    110,
    100,
    116,
    104,
    101,
    32,
    116,
    105,
    109,
    101,
    32,
    111,
    102,
    67,
    111,
    110,
    116,
    97,
    105,
    110,
    101,
    114,
    34,
    62,
    109,
    97,
    105,
    110,
    116,
    97,
    105,
    110,
    105,
    110,
    103,
    67,
    104,
    114,
    105,
    115,
    116,
    111,
    112,
    104,
    101,
    114,
    77,
    117,
    99,
    104,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    119,
    114,
    105,
    116,
    105,
    110,
    103,
    115,
    32,
    111,
    102,
    34,
    32,
    104,
    101,
    105,
    103,
    104,
    116,
    61,
    34,
    50,
    115,
    105,
    122,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    118,
    101,
    114,
    115,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    109,
    105,
    120,
    116,
    117,
    114,
    101,
    32,
    111,
    102,
    32,
    98,
    101,
    116,
    119,
    101,
    101,
    110,
    32,
    116,
    104,
    101,
    69,
    120,
    97,
    109,
    112,
    108,
    101,
    115,
    32,
    111,
    102,
    101,
    100,
    117,
    99,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    99,
    111,
    109,
    112,
    101,
    116,
    105,
    116,
    105,
    118,
    101,
    32,
    111,
    110,
    115,
    117,
    98,
    109,
    105,
    116,
    61,
    34,
    100,
    105,
    114,
    101,
    99,
    116,
    111,
    114,
    32,
    111,
    102,
    100,
    105,
    115,
    116,
    105,
    110,
    99,
    116,
    105,
    118,
    101,
    47,
    68,
    84,
    68,
    32,
    88,
    72,
    84,
    77,
    76,
    32,
    114,
    101,
    108,
    97,
    116,
    105,
    110,
    103,
    32,
    116,
    111,
    116,
    101,
    110,
    100,
    101,
    110,
    99,
    121,
    32,
    116,
    111,
    112,
    114,
    111,
    118,
    105,
    110,
    99,
    101,
    32,
    111,
    102,
    119,
    104,
    105,
    99,
    104,
    32,
    119,
    111,
    117,
    108,
    100,
    100,
    101,
    115,
    112,
    105,
    116,
    101,
    32,
    116,
    104,
    101,
    115,
    99,
    105,
    101,
    110,
    116,
    105,
    102,
    105,
    99,
    32,
    108,
    101,
    103,
    105,
    115,
    108,
    97,
    116,
    117,
    114,
    101,
    46,
    105,
    110,
    110,
    101,
    114,
    72,
    84,
    77,
    76,
    32,
    97,
    108,
    108,
    101,
    103,
    97,
    116,
    105,
    111,
    110,
    115,
    65,
    103,
    114,
    105,
    99,
    117,
    108,
    116,
    117,
    114,
    101,
    119,
    97,
    115,
    32,
    117,
    115,
    101,
    100,
    32,
    105,
    110,
    97,
    112,
    112,
    114,
    111,
    97,
    99,
    104,
    32,
    116,
    111,
    105,
    110,
    116,
    101,
    108,
    108,
    105,
    103,
    101,
    110,
    116,
    121,
    101,
    97,
    114,
    115,
    32,
    108,
    97,
    116,
    101,
    114,
    44,
    115,
    97,
    110,
    115,
    45,
    115,
    101,
    114,
    105,
    102,
    100,
    101,
    116,
    101,
    114,
    109,
    105,
    110,
    105,
    110,
    103,
    80,
    101,
    114,
    102,
    111,
    114,
    109,
    97,
    110,
    99,
    101,
    97,
    112,
    112,
    101,
    97,
    114,
    97,
    110,
    99,
    101,
    115,
    44,
    32,
    119,
    104,
    105,
    99,
    104,
    32,
    105,
    115,
    32,
    102,
    111,
    117,
    110,
    100,
    97,
    116,
    105,
    111,
    110,
    115,
    97,
    98,
    98,
    114,
    101,
    118,
    105,
    97,
    116,
    101,
    100,
    104,
    105,
    103,
    104,
    101,
    114,
    32,
    116,
    104,
    97,
    110,
    115,
    32,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    101,
    32,
    105,
    110,
    100,
    105,
    118,
    105,
    100,
    117,
    97,
    108,
    32,
    99,
    111,
    109,
    112,
    111,
    115,
    101,
    100,
    32,
    111,
    102,
    115,
    117,
    112,
    112,
    111,
    115,
    101,
    100,
    32,
    116,
    111,
    99,
    108,
    97,
    105,
    109,
    115,
    32,
    116,
    104,
    97,
    116,
    97,
    116,
    116,
    114,
    105,
    98,
    117,
    116,
    105,
    111,
    110,
    102,
    111,
    110,
    116,
    45,
    115,
    105,
    122,
    101,
    58,
    49,
    101,
    108,
    101,
    109,
    101,
    110,
    116,
    115,
    32,
    111,
    102,
    72,
    105,
    115,
    116,
    111,
    114,
    105,
    99,
    97,
    108,
    32,
    104,
    105,
    115,
    32,
    98,
    114,
    111,
    116,
    104,
    101,
    114,
    97,
    116,
    32,
    116,
    104,
    101,
    32,
    116,
    105,
    109,
    101,
    97,
    110,
    110,
    105,
    118,
    101,
    114,
    115,
    97,
    114,
    121,
    103,
    111,
    118,
    101,
    114,
    110,
    101,
    100,
    32,
    98,
    121,
    114,
    101,
    108,
    97,
    116,
    101,
    100,
    32,
    116,
    111,
    32,
    117,
    108,
    116,
    105,
    109,
    97,
    116,
    101,
    108,
    121,
    32,
    105,
    110,
    110,
    111,
    118,
    97,
    116,
    105,
    111,
    110,
    115,
    105,
    116,
    32,
    105,
    115,
    32,
    115,
    116,
    105,
    108,
    108,
    99,
    97,
    110,
    32,
    111,
    110,
    108,
    121,
    32,
    98,
    101,
    100,
    101,
    102,
    105,
    110,
    105,
    116,
    105,
    111,
    110,
    115,
    116,
    111,
    71,
    77,
    84,
    83,
    116,
    114,
    105,
    110,
    103,
    65,
    32,
    110,
    117,
    109,
    98,
    101,
    114,
    32,
    111,
    102,
    105,
    109,
    103,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    69,
    118,
    101,
    110,
    116,
    117,
    97,
    108,
    108,
    121,
    44,
    119,
    97,
    115,
    32,
    99,
    104,
    97,
    110,
    103,
    101,
    100,
    111,
    99,
    99,
    117,
    114,
    114,
    101,
    100,
    32,
    105,
    110,
    110,
    101,
    105,
    103,
    104,
    98,
    111,
    114,
    105,
    110,
    103,
    100,
    105,
    115,
    116,
    105,
    110,
    103,
    117,
    105,
    115,
    104,
    119,
    104,
    101,
    110,
    32,
    104,
    101,
    32,
    119,
    97,
    115,
    105,
    110,
    116,
    114,
    111,
    100,
    117,
    99,
    105,
    110,
    103,
    116,
    101,
    114,
    114,
    101,
    115,
    116,
    114,
    105,
    97,
    108,
    77,
    97,
    110,
    121,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    97,
    114,
    103,
    117,
    101,
    115,
    32,
    116,
    104,
    97,
    116,
    97,
    110,
    32,
    65,
    109,
    101,
    114,
    105,
    99,
    97,
    110,
    99,
    111,
    110,
    113,
    117,
    101,
    115,
    116,
    32,
    111,
    102,
    119,
    105,
    100,
    101,
    115,
    112,
    114,
    101,
    97,
    100,
    32,
    119,
    101,
    114,
    101,
    32,
    107,
    105,
    108,
    108,
    101,
    100,
    115,
    99,
    114,
    101,
    101,
    110,
    32,
    97,
    110,
    100,
    32,
    73,
    110,
    32,
    111,
    114,
    100,
    101,
    114,
    32,
    116,
    111,
    101,
    120,
    112,
    101,
    99,
    116,
    101,
    100,
    32,
    116,
    111,
    100,
    101,
    115,
    99,
    101,
    110,
    100,
    97,
    110,
    116,
    115,
    97,
    114,
    101,
    32,
    108,
    111,
    99,
    97,
    116,
    101,
    100,
    108,
    101,
    103,
    105,
    115,
    108,
    97,
    116,
    105,
    118,
    101,
    103,
    101,
    110,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    115,
    32,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    109,
    111,
    115,
    116,
    32,
    112,
    101,
    111,
    112,
    108,
    101,
    121,
    101,
    97,
    114,
    115,
    32,
    97,
    102,
    116,
    101,
    114,
    116,
    104,
    101,
    114,
    101,
    32,
    105,
    115,
    32,
    110,
    111,
    116,
    104,
    101,
    32,
    104,
    105,
    103,
    104,
    101,
    115,
    116,
    102,
    114,
    101,
    113,
    117,
    101,
    110,
    116,
    108,
    121,
    32,
    116,
    104,
    101,
    121,
    32,
    100,
    111,
    32,
    110,
    111,
    116,
    97,
    114,
    103,
    117,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    115,
    104,
    111,
    119,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    112,
    114,
    101,
    100,
    111,
    109,
    105,
    110,
    97,
    110,
    116,
    116,
    104,
    101,
    111,
    108,
    111,
    103,
    105,
    99,
    97,
    108,
    98,
    121,
    32,
    116,
    104,
    101,
    32,
    116,
    105,
    109,
    101,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    105,
    110,
    103,
    115,
    104,
    111,
    114,
    116,
    45,
    108,
    105,
    118,
    101,
    100,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    47,
    97,
    62,
    99,
    97,
    110,
    32,
    98,
    101,
    32,
    117,
    115,
    101,
    100,
    118,
    101,
    114,
    121,
    32,
    108,
    105,
    116,
    116,
    108,
    101,
    111,
    110,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    104,
    97,
    100,
    32,
    97,
    108,
    114,
    101,
    97,
    100,
    121,
    105,
    110,
    116,
    101,
    114,
    112,
    114,
    101,
    116,
    101,
    100,
    99,
    111,
    109,
    109,
    117,
    110,
    105,
    99,
    97,
    116,
    101,
    102,
    101,
    97,
    116,
    117,
    114,
    101,
    115,
    32,
    111,
    102,
    103,
    111,
    118,
    101,
    114,
    110,
    109,
    101,
    110,
    116,
    44,
    60,
    47,
    110,
    111,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    101,
    110,
    116,
    101,
    114,
    101,
    100,
    32,
    116,
    104,
    101,
    34,
    32,
    104,
    101,
    105,
    103,
    104,
    116,
    61,
    34,
    51,
    73,
    110,
    100,
    101,
    112,
    101,
    110,
    100,
    101,
    110,
    116,
    112,
    111,
    112,
    117,
    108,
    97,
    116,
    105,
    111,
    110,
    115,
    108,
    97,
    114,
    103,
    101,
    45,
    115,
    99,
    97,
    108,
    101,
    46,
    32,
    65,
    108,
    116,
    104,
    111,
    117,
    103,
    104,
    32,
    117,
    115,
    101,
    100,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    100,
    101,
    115,
    116,
    114,
    117,
    99,
    116,
    105,
    111,
    110,
    112,
    111,
    115,
    115,
    105,
    98,
    105,
    108,
    105,
    116,
    121,
    115,
    116,
    97,
    114,
    116,
    105,
    110,
    103,
    32,
    105,
    110,
    116,
    119,
    111,
    32,
    111,
    114,
    32,
    109,
    111,
    114,
    101,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    115,
    115,
    117,
    98,
    111,
    114,
    100,
    105,
    110,
    97,
    116,
    101,
    108,
    97,
    114,
    103,
    101,
    114,
    32,
    116,
    104,
    97,
    110,
    104,
    105,
    115,
    116,
    111,
    114,
    121,
    32,
    97,
    110,
    100,
    60,
    47,
    111,
    112,
    116,
    105,
    111,
    110,
    62,
    13,
    10,
    67,
    111,
    110,
    116,
    105,
    110,
    101,
    110,
    116,
    97,
    108,
    101,
    108,
    105,
    109,
    105,
    110,
    97,
    116,
    105,
    110,
    103,
    119,
    105,
    108,
    108,
    32,
    110,
    111,
    116,
    32,
    98,
    101,
    112,
    114,
    97,
    99,
    116,
    105,
    99,
    101,
    32,
    111,
    102,
    105,
    110,
    32,
    102,
    114,
    111,
    110,
    116,
    32,
    111,
    102,
    115,
    105,
    116,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    101,
    110,
    115,
    117,
    114,
    101,
    32,
    116,
    104,
    97,
    116,
    116,
    111,
    32,
    99,
    114,
    101,
    97,
    116,
    101,
    32,
    97,
    109,
    105,
    115,
    115,
    105,
    115,
    115,
    105,
    112,
    112,
    105,
    112,
    111,
    116,
    101,
    110,
    116,
    105,
    97,
    108,
    108,
    121,
    111,
    117,
    116,
    115,
    116,
    97,
    110,
    100,
    105,
    110,
    103,
    98,
    101,
    116,
    116,
    101,
    114,
    32,
    116,
    104,
    97,
    110,
    119,
    104,
    97,
    116,
    32,
    105,
    115,
    32,
    110,
    111,
    119,
    115,
    105,
    116,
    117,
    97,
    116,
    101,
    100,
    32,
    105,
    110,
    109,
    101,
    116,
    97,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    84,
    114,
    97,
    100,
    105,
    116,
    105,
    111,
    110,
    97,
    108,
    115,
    117,
    103,
    103,
    101,
    115,
    116,
    105,
    111,
    110,
    115,
    84,
    114,
    97,
    110,
    115,
    108,
    97,
    116,
    105,
    111,
    110,
    116,
    104,
    101,
    32,
    102,
    111,
    114,
    109,
    32,
    111,
    102,
    97,
    116,
    109,
    111,
    115,
    112,
    104,
    101,
    114,
    105,
    99,
    105,
    100,
    101,
    111,
    108,
    111,
    103,
    105,
    99,
    97,
    108,
    101,
    110,
    116,
    101,
    114,
    112,
    114,
    105,
    115,
    101,
    115,
    99,
    97,
    108,
    99,
    117,
    108,
    97,
    116,
    105,
    110,
    103,
    101,
    97,
    115,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    114,
    101,
    109,
    110,
    97,
    110,
    116,
    115,
    32,
    111,
    102,
    112,
    108,
    117,
    103,
    105,
    110,
    115,
    112,
    97,
    103,
    101,
    47,
    105,
    110,
    100,
    101,
    120,
    46,
    112,
    104,
    112,
    63,
    114,
    101,
    109,
    97,
    105,
    110,
    101,
    100,
    32,
    105,
    110,
    116,
    114,
    97,
    110,
    115,
    102,
    111,
    114,
    109,
    101,
    100,
    72,
    101,
    32,
    119,
    97,
    115,
    32,
    97,
    108,
    115,
    111,
    119,
    97,
    115,
    32,
    97,
    108,
    114,
    101,
    97,
    100,
    121,
    115,
    116,
    97,
    116,
    105,
    115,
    116,
    105,
    99,
    97,
    108,
    105,
    110,
    32,
    102,
    97,
    118,
    111,
    114,
    32,
    111,
    102,
    77,
    105,
    110,
    105,
    115,
    116,
    114,
    121,
    32,
    111,
    102,
    109,
    111,
    118,
    101,
    109,
    101,
    110,
    116,
    32,
    111,
    102,
    102,
    111,
    114,
    109,
    117,
    108,
    97,
    116,
    105,
    111,
    110,
    105,
    115,
    32,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    100,
    60,
    108,
    105,
    110,
    107,
    32,
    114,
    101,
    108,
    61,
    34,
    84,
    104,
    105,
    115,
    32,
    105,
    115,
    32,
    116,
    104,
    101,
    32,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    47,
    112,
    111,
    112,
    117,
    108,
    97,
    114,
    105,
    122,
    101,
    100,
    105,
    110,
    118,
    111,
    108,
    118,
    101,
    100,
    32,
    105,
    110,
    97,
    114,
    101,
    32,
    117,
    115,
    101,
    100,
    32,
    116,
    111,
    97,
    110,
    100,
    32,
    115,
    101,
    118,
    101,
    114,
    97,
    108,
    109,
    97,
    100,
    101,
    32,
    98,
    121,
    32,
    116,
    104,
    101,
    115,
    101,
    101,
    109,
    115,
    32,
    116,
    111,
    32,
    98,
    101,
    108,
    105,
    107,
    101,
    108,
    121,
    32,
    116,
    104,
    97,
    116,
    80,
    97,
    108,
    101,
    115,
    116,
    105,
    110,
    105,
    97,
    110,
    110,
    97,
    109,
    101,
    100,
    32,
    97,
    102,
    116,
    101,
    114,
    105,
    116,
    32,
    104,
    97,
    100,
    32,
    98,
    101,
    101,
    110,
    109,
    111,
    115,
    116,
    32,
    99,
    111,
    109,
    109,
    111,
    110,
    116,
    111,
    32,
    114,
    101,
    102,
    101,
    114,
    32,
    116,
    111,
    98,
    117,
    116,
    32,
    116,
    104,
    105,
    115,
    32,
    105,
    115,
    99,
    111,
    110,
    115,
    101,
    99,
    117,
    116,
    105,
    118,
    101,
    116,
    101,
    109,
    112,
    111,
    114,
    97,
    114,
    105,
    108,
    121,
    73,
    110,
    32,
    103,
    101,
    110,
    101,
    114,
    97,
    108,
    44,
    99,
    111,
    110,
    118,
    101,
    110,
    116,
    105,
    111,
    110,
    115,
    116,
    97,
    107,
    101,
    115,
    32,
    112,
    108,
    97,
    99,
    101,
    115,
    117,
    98,
    100,
    105,
    118,
    105,
    115,
    105,
    111,
    110,
    116,
    101,
    114,
    114,
    105,
    116,
    111,
    114,
    105,
    97,
    108,
    111,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    112,
    101,
    114,
    109,
    97,
    110,
    101,
    110,
    116,
    108,
    121,
    119,
    97,
    115,
    32,
    108,
    97,
    114,
    103,
    101,
    108,
    121,
    111,
    117,
    116,
    98,
    114,
    101,
    97,
    107,
    32,
    111,
    102,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    112,
    97,
    115,
    116,
    102,
    111,
    108,
    108,
    111,
    119,
    105,
    110,
    103,
    32,
    97,
    32,
    120,
    109,
    108,
    110,
    115,
    58,
    111,
    103,
    61,
    34,
    62,
    60,
    97,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    116,
    101,
    120,
    116,
    67,
    111,
    110,
    118,
    101,
    114,
    115,
    105,
    111,
    110,
    32,
    109,
    97,
    121,
    32,
    98,
    101,
    32,
    117,
    115,
    101,
    100,
    109,
    97,
    110,
    117,
    102,
    97,
    99,
    116,
    117,
    114,
    101,
    97,
    102,
    116,
    101,
    114,
    32,
    98,
    101,
    105,
    110,
    103,
    99,
    108,
    101,
    97,
    114,
    102,
    105,
    120,
    34,
    62,
    10,
    113,
    117,
    101,
    115,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    119,
    97,
    115,
    32,
    101,
    108,
    101,
    99,
    116,
    101,
    100,
    116,
    111,
    32,
    98,
    101,
    99,
    111,
    109,
    101,
    32,
    97,
    98,
    101,
    99,
    97,
    117,
    115,
    101,
    32,
    111,
    102,
    32,
    115,
    111,
    109,
    101,
    32,
    112,
    101,
    111,
    112,
    108,
    101,
    105,
    110,
    115,
    112,
    105,
    114,
    101,
    100,
    32,
    98,
    121,
    115,
    117,
    99,
    99,
    101,
    115,
    115,
    102,
    117,
    108,
    32,
    97,
    32,
    116,
    105,
    109,
    101,
    32,
    119,
    104,
    101,
    110,
    109,
    111,
    114,
    101,
    32,
    99,
    111,
    109,
    109,
    111,
    110,
    97,
    109,
    111,
    110,
    103,
    115,
    116,
    32,
    116,
    104,
    101,
    97,
    110,
    32,
    111,
    102,
    102,
    105,
    99,
    105,
    97,
    108,
    119,
    105,
    100,
    116,
    104,
    58,
    49,
    48,
    48,
    37,
    59,
    116,
    101,
    99,
    104,
    110,
    111,
    108,
    111,
    103,
    121,
    44,
    119,
    97,
    115,
    32,
    97,
    100,
    111,
    112,
    116,
    101,
    100,
    116,
    111,
    32,
    107,
    101,
    101,
    112,
    32,
    116,
    104,
    101,
    115,
    101,
    116,
    116,
    108,
    101,
    109,
    101,
    110,
    116,
    115,
    108,
    105,
    118,
    101,
    32,
    98,
    105,
    114,
    116,
    104,
    115,
    105,
    110,
    100,
    101,
    120,
    46,
    104,
    116,
    109,
    108,
    34,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    99,
    117,
    116,
    97,
    115,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    116,
    111,
    38,
    97,
    109,
    112,
    59,
    116,
    105,
    109,
    101,
    115,
    59,
    97,
    99,
    99,
    111,
    117,
    110,
    116,
    32,
    102,
    111,
    114,
    97,
    108,
    105,
    103,
    110,
    61,
    114,
    105,
    103,
    104,
    116,
    116,
    104,
    101,
    32,
    99,
    111,
    109,
    112,
    97,
    110,
    121,
    97,
    108,
    119,
    97,
    121,
    115,
    32,
    98,
    101,
    101,
    110,
    114,
    101,
    116,
    117,
    114,
    110,
    101,
    100,
    32,
    116,
    111,
    105,
    110,
    118,
    111,
    108,
    118,
    101,
    109,
    101,
    110,
    116,
    66,
    101,
    99,
    97,
    117,
    115,
    101,
    32,
    116,
    104,
    101,
    116,
    104,
    105,
    115,
    32,
    112,
    101,
    114,
    105,
    111,
    100,
    34,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    113,
    34,
    32,
    99,
    111,
    110,
    102,
    105,
    110,
    101,
    100,
    32,
    116,
    111,
    97,
    32,
    114,
    101,
    115,
    117,
    108,
    116,
    32,
    111,
    102,
    118,
    97,
    108,
    117,
    101,
    61,
    34,
    34,
    32,
    47,
    62,
    105,
    115,
    32,
    97,
    99,
    116,
    117,
    97,
    108,
    108,
    121,
    69,
    110,
    118,
    105,
    114,
    111,
    110,
    109,
    101,
    110,
    116,
    13,
    10,
    60,
    47,
    104,
    101,
    97,
    100,
    62,
    13,
    10,
    67,
    111,
    110,
    118,
    101,
    114,
    115,
    101,
    108,
    121,
    44,
    62,
    10,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    48,
    34,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    49,
    105,
    115,
    32,
    112,
    114,
    111,
    98,
    97,
    98,
    108,
    121,
    104,
    97,
    118,
    101,
    32,
    98,
    101,
    99,
    111,
    109,
    101,
    99,
    111,
    110,
    116,
    114,
    111,
    108,
    108,
    105,
    110,
    103,
    116,
    104,
    101,
    32,
    112,
    114,
    111,
    98,
    108,
    101,
    109,
    99,
    105,
    116,
    105,
    122,
    101,
    110,
    115,
    32,
    111,
    102,
    112,
    111,
    108,
    105,
    116,
    105,
    99,
    105,
    97,
    110,
    115,
    114,
    101,
    97,
    99,
    104,
    101,
    100,
    32,
    116,
    104,
    101,
    97,
    115,
    32,
    101,
    97,
    114,
    108,
    121,
    32,
    97,
    115,
    58,
    110,
    111,
    110,
    101,
    59,
    32,
    111,
    118,
    101,
    114,
    60,
    116,
    97,
    98,
    108,
    101,
    32,
    99,
    101,
    108,
    108,
    118,
    97,
    108,
    105,
    100,
    105,
    116,
    121,
    32,
    111,
    102,
    100,
    105,
    114,
    101,
    99,
    116,
    108,
    121,
    32,
    116,
    111,
    111,
    110,
    109,
    111,
    117,
    115,
    101,
    100,
    111,
    119,
    110,
    119,
    104,
    101,
    114,
    101,
    32,
    105,
    116,
    32,
    105,
    115,
    119,
    104,
    101,
    110,
    32,
    105,
    116,
    32,
    119,
    97,
    115,
    109,
    101,
    109,
    98,
    101,
    114,
    115,
    32,
    111,
    102,
    32,
    114,
    101,
    108,
    97,
    116,
    105,
    111,
    110,
    32,
    116,
    111,
    97,
    99,
    99,
    111,
    109,
    109,
    111,
    100,
    97,
    116,
    101,
    97,
    108,
    111,
    110,
    103,
    32,
    119,
    105,
    116,
    104,
    32,
    73,
    110,
    32,
    116,
    104,
    101,
    32,
    108,
    97,
    116,
    101,
    116,
    104,
    101,
    32,
    69,
    110,
    103,
    108,
    105,
    115,
    104,
    100,
    101,
    108,
    105,
    99,
    105,
    111,
    117,
    115,
    34,
    62,
    116,
    104,
    105,
    115,
    32,
    105,
    115,
    32,
    110,
    111,
    116,
    116,
    104,
    101,
    32,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    105,
    102,
    32,
    116,
    104,
    101,
    121,
    32,
    97,
    114,
    101,
    97,
    110,
    100,
    32,
    102,
    105,
    110,
    97,
    108,
    108,
    121,
    97,
    32,
    109,
    97,
    116,
    116,
    101,
    114,
    32,
    111,
    102,
    13,
    10,
    9,
    60,
    47,
    100,
    105,
    118,
    62,
    13,
    10,
    13,
    10,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    102,
    97,
    115,
    116,
    101,
    114,
    32,
    116,
    104,
    97,
    110,
    109,
    97,
    106,
    111,
    114,
    105,
    116,
    121,
    32,
    111,
    102,
    97,
    102,
    116,
    101,
    114,
    32,
    119,
    104,
    105,
    99,
    104,
    99,
    111,
    109,
    112,
    97,
    114,
    97,
    116,
    105,
    118,
    101,
    116,
    111,
    32,
    109,
    97,
    105,
    110,
    116,
    97,
    105,
    110,
    105,
    109,
    112,
    114,
    111,
    118,
    101,
    32,
    116,
    104,
    101,
    97,
    119,
    97,
    114,
    100,
    101,
    100,
    32,
    116,
    104,
    101,
    101,
    114,
    34,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    102,
    114,
    97,
    109,
    101,
    98,
    111,
    114,
    100,
    101,
    114,
    114,
    101,
    115,
    116,
    111,
    114,
    97,
    116,
    105,
    111,
    110,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    115,
    97,
    109,
    101,
    97,
    110,
    97,
    108,
    121,
    115,
    105,
    115,
    32,
    111,
    102,
    116,
    104,
    101,
    105,
    114,
    32,
    102,
    105,
    114,
    115,
    116,
    68,
    117,
    114,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    32,
    99,
    111,
    110,
    116,
    105,
    110,
    101,
    110,
    116,
    97,
    108,
    115,
    101,
    113,
    117,
    101,
    110,
    99,
    101,
    32,
    111,
    102,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    41,
    123,
    102,
    111,
    110,
    116,
    45,
    115,
    105,
    122,
    101,
    58,
    32,
    119,
    111,
    114,
    107,
    32,
    111,
    110,
    32,
    116,
    104,
    101,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    60,
    98,
    101,
    103,
    105,
    110,
    115,
    32,
    119,
    105,
    116,
    104,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    112,
    116,
    58,
    99,
    111,
    110,
    115,
    116,
    105,
    116,
    117,
    101,
    110,
    116,
    119,
    97,
    115,
    32,
    102,
    111,
    117,
    110,
    100,
    101,
    100,
    101,
    113,
    117,
    105,
    108,
    105,
    98,
    114,
    105,
    117,
    109,
    97,
    115,
    115,
    117,
    109,
    101,
    32,
    116,
    104,
    97,
    116,
    105,
    115,
    32,
    103,
    105,
    118,
    101,
    110,
    32,
    98,
    121,
    110,
    101,
    101,
    100,
    115,
    32,
    116,
    111,
    32,
    98,
    101,
    99,
    111,
    111,
    114,
    100,
    105,
    110,
    97,
    116,
    101,
    115,
    116,
    104,
    101,
    32,
    118,
    97,
    114,
    105,
    111,
    117,
    115,
    97,
    114,
    101,
    32,
    112,
    97,
    114,
    116,
    32,
    111,
    102,
    111,
    110,
    108,
    121,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    115,
    101,
    99,
    116,
    105,
    111,
    110,
    115,
    32,
    111,
    102,
    105,
    115,
    32,
    97,
    32,
    99,
    111,
    109,
    109,
    111,
    110,
    116,
    104,
    101,
    111,
    114,
    105,
    101,
    115,
    32,
    111,
    102,
    100,
    105,
    115,
    99,
    111,
    118,
    101,
    114,
    105,
    101,
    115,
    97,
    115,
    115,
    111,
    99,
    105,
    97,
    116,
    105,
    111,
    110,
    101,
    100,
    103,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    115,
    116,
    114,
    101,
    110,
    103,
    116,
    104,
    32,
    111,
    102,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    32,
    105,
    110,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    45,
    100,
    97,
    121,
    117,
    110,
    105,
    118,
    101,
    114,
    115,
    97,
    108,
    108,
    121,
    116,
    111,
    32,
    102,
    111,
    114,
    109,
    32,
    116,
    104,
    101,
    98,
    117,
    116,
    32,
    105,
    110,
    115,
    116,
    101,
    97,
    100,
    99,
    111,
    114,
    112,
    111,
    114,
    97,
    116,
    105,
    111,
    110,
    97,
    116,
    116,
    97,
    99,
    104,
    101,
    100,
    32,
    116,
    111,
    105,
    115,
    32,
    99,
    111,
    109,
    109,
    111,
    110,
    108,
    121,
    114,
    101,
    97,
    115,
    111,
    110,
    115,
    32,
    102,
    111,
    114,
    32,
    38,
    113,
    117,
    111,
    116,
    59,
    116,
    104,
    101,
    32,
    99,
    97,
    110,
    32,
    98,
    101,
    32,
    109,
    97,
    100,
    101,
    119,
    97,
    115,
    32,
    97,
    98,
    108,
    101,
    32,
    116,
    111,
    119,
    104,
    105,
    99,
    104,
    32,
    109,
    101,
    97,
    110,
    115,
    98,
    117,
    116,
    32,
    100,
    105,
    100,
    32,
    110,
    111,
    116,
    111,
    110,
    77,
    111,
    117,
    115,
    101,
    79,
    118,
    101,
    114,
    97,
    115,
    32,
    112,
    111,
    115,
    115,
    105,
    98,
    108,
    101,
    111,
    112,
    101,
    114,
    97,
    116,
    101,
    100,
    32,
    98,
    121,
    99,
    111,
    109,
    105,
    110,
    103,
    32,
    102,
    114,
    111,
    109,
    116,
    104,
    101,
    32,
    112,
    114,
    105,
    109,
    97,
    114,
    121,
    97,
    100,
    100,
    105,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    102,
    111,
    114,
    32,
    115,
    101,
    118,
    101,
    114,
    97,
    108,
    116,
    114,
    97,
    110,
    115,
    102,
    101,
    114,
    114,
    101,
    100,
    97,
    32,
    112,
    101,
    114,
    105,
    111,
    100,
    32,
    111,
    102,
    97,
    114,
    101,
    32,
    97,
    98,
    108,
    101,
    32,
    116,
    111,
    104,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    32,
    105,
    116,
    115,
    104,
    111,
    117,
    108,
    100,
    32,
    104,
    97,
    118,
    101,
    109,
    117,
    99,
    104,
    32,
    108,
    97,
    114,
    103,
    101,
    114,
    10,
    9,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    97,
    100,
    111,
    112,
    116,
    101,
    100,
    32,
    116,
    104,
    101,
    112,
    114,
    111,
    112,
    101,
    114,
    116,
    121,
    32,
    111,
    102,
    100,
    105,
    114,
    101,
    99,
    116,
    101,
    100,
    32,
    98,
    121,
    101,
    102,
    102,
    101,
    99,
    116,
    105,
    118,
    101,
    108,
    121,
    119,
    97,
    115,
    32,
    98,
    114,
    111,
    117,
    103,
    104,
    116,
    99,
    104,
    105,
    108,
    100,
    114,
    101,
    110,
    32,
    111,
    102,
    80,
    114,
    111,
    103,
    114,
    97,
    109,
    109,
    105,
    110,
    103,
    108,
    111,
    110,
    103,
    101,
    114,
    32,
    116,
    104,
    97,
    110,
    109,
    97,
    110,
    117,
    115,
    99,
    114,
    105,
    112,
    116,
    115,
    119,
    97,
    114,
    32,
    97,
    103,
    97,
    105,
    110,
    115,
    116,
    98,
    121,
    32,
    109,
    101,
    97,
    110,
    115,
    32,
    111,
    102,
    97,
    110,
    100,
    32,
    109,
    111,
    115,
    116,
    32,
    111,
    102,
    115,
    105,
    109,
    105,
    108,
    97,
    114,
    32,
    116,
    111,
    32,
    112,
    114,
    111,
    112,
    114,
    105,
    101,
    116,
    97,
    114,
    121,
    111,
    114,
    105,
    103,
    105,
    110,
    97,
    116,
    105,
    110,
    103,
    112,
    114,
    101,
    115,
    116,
    105,
    103,
    105,
    111,
    117,
    115,
    103,
    114,
    97,
    109,
    109,
    97,
    116,
    105,
    99,
    97,
    108,
    101,
    120,
    112,
    101,
    114,
    105,
    101,
    110,
    99,
    101,
    46,
    116,
    111,
    32,
    109,
    97,
    107,
    101,
    32,
    116,
    104,
    101,
    73,
    116,
    32,
    119,
    97,
    115,
    32,
    97,
    108,
    115,
    111,
    105,
    115,
    32,
    102,
    111,
    117,
    110,
    100,
    32,
    105,
    110,
    99,
    111,
    109,
    112,
    101,
    116,
    105,
    116,
    111,
    114,
    115,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    85,
    46,
    83,
    46,
    114,
    101,
    112,
    108,
    97,
    99,
    101,
    32,
    116,
    104,
    101,
    98,
    114,
    111,
    117,
    103,
    104,
    116,
    32,
    116,
    104,
    101,
    99,
    97,
    108,
    99,
    117,
    108,
    97,
    116,
    105,
    111,
    110,
    102,
    97,
    108,
    108,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    103,
    101,
    110,
    101,
    114,
    97,
    108,
    112,
    114,
    97,
    99,
    116,
    105,
    99,
    97,
    108,
    108,
    121,
    105,
    110,
    32,
    104,
    111,
    110,
    111,
    114,
    32,
    111,
    102,
    114,
    101,
    108,
    101,
    97,
    115,
    101,
    100,
    32,
    105,
    110,
    114,
    101,
    115,
    105,
    100,
    101,
    110,
    116,
    105,
    97,
    108,
    97,
    110,
    100,
    32,
    115,
    111,
    109,
    101,
    32,
    111,
    102,
    107,
    105,
    110,
    103,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    114,
    101,
    97,
    99,
    116,
    105,
    111,
    110,
    32,
    116,
    111,
    49,
    115,
    116,
    32,
    69,
    97,
    114,
    108,
    32,
    111,
    102,
    99,
    117,
    108,
    116,
    117,
    114,
    101,
    32,
    97,
    110,
    100,
    112,
    114,
    105,
    110,
    99,
    105,
    112,
    97,
    108,
    108,
    121,
    60,
    47,
    116,
    105,
    116,
    108,
    101,
    62,
    10,
    32,
    32,
    116,
    104,
    101,
    121,
    32,
    99,
    97,
    110,
    32,
    98,
    101,
    98,
    97,
    99,
    107,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    115,
    111,
    109,
    101,
    32,
    111,
    102,
    32,
    104,
    105,
    115,
    101,
    120,
    112,
    111,
    115,
    117,
    114,
    101,
    32,
    116,
    111,
    97,
    114,
    101,
    32,
    115,
    105,
    109,
    105,
    108,
    97,
    114,
    102,
    111,
    114,
    109,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    97,
    100,
    100,
    70,
    97,
    118,
    111,
    114,
    105,
    116,
    101,
    99,
    105,
    116,
    105,
    122,
    101,
    110,
    115,
    104,
    105,
    112,
    112,
    97,
    114,
    116,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    112,
    101,
    111,
    112,
    108,
    101,
    32,
    119,
    105,
    116,
    104,
    105,
    110,
    32,
    112,
    114,
    97,
    99,
    116,
    105,
    99,
    101,
    116,
    111,
    32,
    99,
    111,
    110,
    116,
    105,
    110,
    117,
    101,
    38,
    97,
    109,
    112,
    59,
    109,
    105,
    110,
    117,
    115,
    59,
    97,
    112,
    112,
    114,
    111,
    118,
    101,
    100,
    32,
    98,
    121,
    32,
    116,
    104,
    101,
    32,
    102,
    105,
    114,
    115,
    116,
    32,
    97,
    108,
    108,
    111,
    119,
    101,
    100,
    32,
    116,
    104,
    101,
    97,
    110,
    100,
    32,
    102,
    111,
    114,
    32,
    116,
    104,
    101,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    105,
    110,
    103,
    112,
    108,
    97,
    121,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    115,
    111,
    108,
    117,
    116,
    105,
    111,
    110,
    32,
    116,
    111,
    104,
    101,
    105,
    103,
    104,
    116,
    61,
    34,
    48,
    34,
    32,
    105,
    110,
    32,
    104,
    105,
    115,
    32,
    98,
    111,
    111,
    107,
    109,
    111,
    114,
    101,
    32,
    116,
    104,
    97,
    110,
    32,
    97,
    102,
    111,
    108,
    108,
    111,
    119,
    115,
    32,
    116,
    104,
    101,
    99,
    114,
    101,
    97,
    116,
    101,
    100,
    32,
    116,
    104,
    101,
    112,
    114,
    101,
    115,
    101,
    110,
    99,
    101,
    32,
    105,
    110,
    38,
    110,
    98,
    115,
    112,
    59,
    60,
    47,
    116,
    100,
    62,
    110,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    105,
    115,
    116,
    116,
    104,
    101,
    32,
    105,
    100,
    101,
    97,
    32,
    111,
    102,
    97,
    32,
    99,
    104,
    97,
    114,
    97,
    99,
    116,
    101,
    114,
    119,
    101,
    114,
    101,
    32,
    102,
    111,
    114,
    99,
    101,
    100,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    98,
    116,
    110,
    100,
    97,
    121,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    102,
    101,
    97,
    116,
    117,
    114,
    101,
    100,
    32,
    105,
    110,
    115,
    104,
    111,
    119,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    105,
    110,
    116,
    101,
    114,
    101,
    115,
    116,
    32,
    105,
    110,
    105,
    110,
    32,
    112,
    108,
    97,
    99,
    101,
    32,
    111,
    102,
    116,
    117,
    114,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    104,
    101,
    97,
    100,
    32,
    111,
    102,
    76,
    111,
    114,
    100,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    112,
    111,
    108,
    105,
    116,
    105,
    99,
    97,
    108,
    108,
    121,
    104,
    97,
    115,
    32,
    105,
    116,
    115,
    32,
    111,
    119,
    110,
    69,
    100,
    117,
    99,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    97,
    112,
    112,
    114,
    111,
    118,
    97,
    108,
    32,
    111,
    102,
    115,
    111,
    109,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    101,
    97,
    99,
    104,
    32,
    111,
    116,
    104,
    101,
    114,
    44,
    98,
    101,
    104,
    97,
    118,
    105,
    111,
    114,
    32,
    111,
    102,
    97,
    110,
    100,
    32,
    98,
    101,
    99,
    97,
    117,
    115,
    101,
    97,
    110,
    100,
    32,
    97,
    110,
    111,
    116,
    104,
    101,
    114,
    97,
    112,
    112,
    101,
    97,
    114,
    101,
    100,
    32,
    111,
    110,
    114,
    101,
    99,
    111,
    114,
    100,
    101,
    100,
    32,
    105,
    110,
    98,
    108,
    97,
    99,
    107,
    38,
    113,
    117,
    111,
    116,
    59,
    109,
    97,
    121,
    32,
    105,
    110,
    99,
    108,
    117,
    100,
    101,
    116,
    104,
    101,
    32,
    119,
    111,
    114,
    108,
    100,
    39,
    115,
    99,
    97,
    110,
    32,
    108,
    101,
    97,
    100,
    32,
    116,
    111,
    114,
    101,
    102,
    101,
    114,
    115,
    32,
    116,
    111,
    32,
    97,
    98,
    111,
    114,
    100,
    101,
    114,
    61,
    34,
    48,
    34,
    32,
    103,
    111,
    118,
    101,
    114,
    110,
    109,
    101,
    110,
    116,
    32,
    119,
    105,
    110,
    110,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    114,
    101,
    115,
    117,
    108,
    116,
    101,
    100,
    32,
    105,
    110,
    32,
    119,
    104,
    105,
    108,
    101,
    32,
    116,
    104,
    101,
    32,
    87,
    97,
    115,
    104,
    105,
    110,
    103,
    116,
    111,
    110,
    44,
    116,
    104,
    101,
    32,
    115,
    117,
    98,
    106,
    101,
    99,
    116,
    99,
    105,
    116,
    121,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    13,
    10,
    9,
    9,
    114,
    101,
    102,
    108,
    101,
    99,
    116,
    32,
    116,
    104,
    101,
    116,
    111,
    32,
    99,
    111,
    109,
    112,
    108,
    101,
    116,
    101,
    98,
    101,
    99,
    97,
    109,
    101,
    32,
    109,
    111,
    114,
    101,
    114,
    97,
    100,
    105,
    111,
    97,
    99,
    116,
    105,
    118,
    101,
    114,
    101,
    106,
    101,
    99,
    116,
    101,
    100,
    32,
    98,
    121,
    119,
    105,
    116,
    104,
    111,
    117,
    116,
    32,
    97,
    110,
    121,
    104,
    105,
    115,
    32,
    102,
    97,
    116,
    104,
    101,
    114,
    44,
    119,
    104,
    105,
    99,
    104,
    32,
    99,
    111,
    117,
    108,
    100,
    99,
    111,
    112,
    121,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    116,
    111,
    32,
    105,
    110,
    100,
    105,
    99,
    97,
    116,
    101,
    97,
    32,
    112,
    111,
    108,
    105,
    116,
    105,
    99,
    97,
    108,
    97,
    99,
    99,
    111,
    117,
    110,
    116,
    115,
    32,
    111,
    102,
    99,
    111,
    110,
    115,
    116,
    105,
    116,
    117,
    116,
    101,
    115,
    119,
    111,
    114,
    107,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    101,
    114,
    60,
    47,
    97,
    62,
    60,
    47,
    108,
    105,
    62,
    111,
    102,
    32,
    104,
    105,
    115,
    32,
    108,
    105,
    102,
    101,
    97,
    99,
    99,
    111,
    109,
    112,
    97,
    110,
    105,
    101,
    100,
    99,
    108,
    105,
    101,
    110,
    116,
    87,
    105,
    100,
    116,
    104,
    112,
    114,
    101,
    118,
    101,
    110,
    116,
    32,
    116,
    104,
    101,
    76,
    101,
    103,
    105,
    115,
    108,
    97,
    116,
    105,
    118,
    101,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    108,
    121,
    116,
    111,
    103,
    101,
    116,
    104,
    101,
    114,
    32,
    105,
    110,
    104,
    97,
    115,
    32,
    115,
    101,
    118,
    101,
    114,
    97,
    108,
    102,
    111,
    114,
    32,
    97,
    110,
    111,
    116,
    104,
    101,
    114,
    116,
    101,
    120,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    102,
    111,
    117,
    110,
    100,
    101,
    100,
    32,
    116,
    104,
    101,
    101,
    32,
    119,
    105,
    116,
    104,
    32,
    116,
    104,
    101,
    32,
    105,
    115,
    32,
    117,
    115,
    101,
    100,
    32,
    102,
    111,
    114,
    99,
    104,
    97,
    110,
    103,
    101,
    100,
    32,
    116,
    104,
    101,
    117,
    115,
    117,
    97,
    108,
    108,
    121,
    32,
    116,
    104,
    101,
    112,
    108,
    97,
    99,
    101,
    32,
    119,
    104,
    101,
    114,
    101,
    119,
    104,
    101,
    114,
    101,
    97,
    115,
    32,
    116,
    104,
    101,
    62,
    32,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    34,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    116,
    104,
    101,
    109,
    115,
    101,
    108,
    118,
    101,
    115,
    44,
    97,
    108,
    116,
    104,
    111,
    117,
    103,
    104,
    32,
    104,
    101,
    116,
    104,
    97,
    116,
    32,
    99,
    97,
    110,
    32,
    98,
    101,
    116,
    114,
    97,
    100,
    105,
    116,
    105,
    111,
    110,
    97,
    108,
    114,
    111,
    108,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    97,
    115,
    32,
    97,
    32,
    114,
    101,
    115,
    117,
    108,
    116,
    114,
    101,
    109,
    111,
    118,
    101,
    67,
    104,
    105,
    108,
    100,
    100,
    101,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    98,
    121,
    119,
    101,
    115,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    83,
    111,
    109,
    101,
    32,
    112,
    101,
    111,
    112,
    108,
    101,
    112,
    114,
    111,
    100,
    117,
    99,
    116,
    105,
    111,
    110,
    44,
    115,
    105,
    100,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    110,
    101,
    119,
    115,
    108,
    101,
    116,
    116,
    101,
    114,
    115,
    117,
    115,
    101,
    100,
    32,
    98,
    121,
    32,
    116,
    104,
    101,
    100,
    111,
    119,
    110,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    97,
    99,
    99,
    101,
    112,
    116,
    101,
    100,
    32,
    98,
    121,
    108,
    105,
    118,
    101,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    97,
    116,
    116,
    101,
    109,
    112,
    116,
    115,
    32,
    116,
    111,
    111,
    117,
    116,
    115,
    105,
    100,
    101,
    32,
    116,
    104,
    101,
    102,
    114,
    101,
    113,
    117,
    101,
    110,
    99,
    105,
    101,
    115,
    72,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    32,
    105,
    110,
    112,
    114,
    111,
    103,
    114,
    97,
    109,
    109,
    101,
    114,
    115,
    97,
    116,
    32,
    108,
    101,
    97,
    115,
    116,
    32,
    105,
    110,
    97,
    112,
    112,
    114,
    111,
    120,
    105,
    109,
    97,
    116,
    101,
    97,
    108,
    116,
    104,
    111,
    117,
    103,
    104,
    32,
    105,
    116,
    119,
    97,
    115,
    32,
    112,
    97,
    114,
    116,
    32,
    111,
    102,
    97,
    110,
    100,
    32,
    118,
    97,
    114,
    105,
    111,
    117,
    115,
    71,
    111,
    118,
    101,
    114,
    110,
    111,
    114,
    32,
    111,
    102,
    116,
    104,
    101,
    32,
    97,
    114,
    116,
    105,
    99,
    108,
    101,
    116,
    117,
    114,
    110,
    101,
    100,
    32,
    105,
    110,
    116,
    111,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    47,
    116,
    104,
    101,
    32,
    101,
    99,
    111,
    110,
    111,
    109,
    121,
    105,
    115,
    32,
    116,
    104,
    101,
    32,
    109,
    111,
    115,
    116,
    109,
    111,
    115,
    116,
    32,
    119,
    105,
    100,
    101,
    108,
    121,
    119,
    111,
    117,
    108,
    100,
    32,
    108,
    97,
    116,
    101,
    114,
    97,
    110,
    100,
    32,
    112,
    101,
    114,
    104,
    97,
    112,
    115,
    114,
    105,
    115,
    101,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    111,
    99,
    99,
    117,
    114,
    115,
    32,
    119,
    104,
    101,
    110,
    117,
    110,
    100,
    101,
    114,
    32,
    119,
    104,
    105,
    99,
    104,
    99,
    111,
    110,
    100,
    105,
    116,
    105,
    111,
    110,
    115,
    46,
    116,
    104,
    101,
    32,
    119,
    101,
    115,
    116,
    101,
    114,
    110,
    116,
    104,
    101,
    111,
    114,
    121,
    32,
    116,
    104,
    97,
    116,
    105,
    115,
    32,
    112,
    114,
    111,
    100,
    117,
    99,
    101,
    100,
    116,
    104,
    101,
    32,
    99,
    105,
    116,
    121,
    32,
    111,
    102,
    105,
    110,
    32,
    119,
    104,
    105,
    99,
    104,
    32,
    104,
    101,
    115,
    101,
    101,
    110,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    99,
    101,
    110,
    116,
    114,
    97,
    108,
    98,
    117,
    105,
    108,
    100,
    105,
    110,
    103,
    32,
    111,
    102,
    109,
    97,
    110,
    121,
    32,
    111,
    102,
    32,
    104,
    105,
    115,
    97,
    114,
    101,
    97,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    105,
    115,
    32,
    116,
    104,
    101,
    32,
    111,
    110,
    108,
    121,
    109,
    111,
    115,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    109,
    97,
    110,
    121,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    87,
    101,
    115,
    116,
    101,
    114,
    110,
    84,
    104,
    101,
    114,
    101,
    32,
    105,
    115,
    32,
    110,
    111,
    101,
    120,
    116,
    101,
    110,
    100,
    101,
    100,
    32,
    116,
    111,
    83,
    116,
    97,
    116,
    105,
    115,
    116,
    105,
    99,
    97,
    108,
    99,
    111,
    108,
    115,
    112,
    97,
    110,
    61,
    50,
    32,
    124,
    115,
    104,
    111,
    114,
    116,
    32,
    115,
    116,
    111,
    114,
    121,
    112,
    111,
    115,
    115,
    105,
    98,
    108,
    101,
    32,
    116,
    111,
    116,
    111,
    112,
    111,
    108,
    111,
    103,
    105,
    99,
    97,
    108,
    99,
    114,
    105,
    116,
    105,
    99,
    97,
    108,
    32,
    111,
    102,
    114,
    101,
    112,
    111,
    114,
    116,
    101,
    100,
    32,
    116,
    111,
    97,
    32,
    67,
    104,
    114,
    105,
    115,
    116,
    105,
    97,
    110,
    100,
    101,
    99,
    105,
    115,
    105,
    111,
    110,
    32,
    116,
    111,
    105,
    115,
    32,
    101,
    113,
    117,
    97,
    108,
    32,
    116,
    111,
    112,
    114,
    111,
    98,
    108,
    101,
    109,
    115,
    32,
    111,
    102,
    84,
    104,
    105,
    115,
    32,
    99,
    97,
    110,
    32,
    98,
    101,
    109,
    101,
    114,
    99,
    104,
    97,
    110,
    100,
    105,
    115,
    101,
    102,
    111,
    114,
    32,
    109,
    111,
    115,
    116,
    32,
    111,
    102,
    110,
    111,
    32,
    101,
    118,
    105,
    100,
    101,
    110,
    99,
    101,
    101,
    100,
    105,
    116,
    105,
    111,
    110,
    115,
    32,
    111,
    102,
    101,
    108,
    101,
    109,
    101,
    110,
    116,
    115,
    32,
    105,
    110,
    38,
    113,
    117,
    111,
    116,
    59,
    46,
    32,
    84,
    104,
    101,
    99,
    111,
    109,
    47,
    105,
    109,
    97,
    103,
    101,
    115,
    47,
    119,
    104,
    105,
    99,
    104,
    32,
    109,
    97,
    107,
    101,
    115,
    116,
    104,
    101,
    32,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    114,
    101,
    109,
    97,
    105,
    110,
    115,
    32,
    116,
    104,
    101,
    108,
    105,
    116,
    101,
    114,
    97,
    116,
    117,
    114,
    101,
    44,
    105,
    115,
    32,
    97,
    32,
    109,
    101,
    109,
    98,
    101,
    114,
    116,
    104,
    101,
    32,
    112,
    111,
    112,
    117,
    108,
    97,
    114,
    116,
    104,
    101,
    32,
    97,
    110,
    99,
    105,
    101,
    110,
    116,
    112,
    114,
    111,
    98,
    108,
    101,
    109,
    115,
    32,
    105,
    110,
    116,
    105,
    109,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    100,
    101,
    102,
    101,
    97,
    116,
    101,
    100,
    32,
    98,
    121,
    98,
    111,
    100,
    121,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    97,
    32,
    102,
    101,
    119,
    32,
    121,
    101,
    97,
    114,
    115,
    109,
    117,
    99,
    104,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    119,
    111,
    114,
    107,
    32,
    111,
    102,
    67,
    97,
    108,
    105,
    102,
    111,
    114,
    110,
    105,
    97,
    44,
    115,
    101,
    114,
    118,
    101,
    100,
    32,
    97,
    115,
    32,
    97,
    103,
    111,
    118,
    101,
    114,
    110,
    109,
    101,
    110,
    116,
    46,
    99,
    111,
    110,
    99,
    101,
    112,
    116,
    115,
    32,
    111,
    102,
    109,
    111,
    118,
    101,
    109,
    101,
    110,
    116,
    32,
    105,
    110,
    9,
    9,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    105,
    116,
    34,
    32,
    118,
    97,
    108,
    117,
    101,
    61,
    34,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    32,
    111,
    102,
    97,
    115,
    32,
    116,
    104,
    101,
    121,
    32,
    97,
    114,
    101,
    112,
    114,
    111,
    100,
    117,
    99,
    101,
    100,
    32,
    105,
    110,
    105,
    115,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    101,
    120,
    112,
    108,
    97,
    105,
    110,
    32,
    116,
    104,
    101,
    100,
    105,
    118,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    72,
    111,
    119,
    101,
    118,
    101,
    114,
    32,
    116,
    104,
    101,
    108,
    101,
    97,
    100,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    9,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    47,
    119,
    97,
    115,
    32,
    103,
    114,
    97,
    110,
    116,
    101,
    100,
    112,
    101,
    111,
    112,
    108,
    101,
    32,
    104,
    97,
    118,
    101,
    99,
    111,
    110,
    116,
    105,
    110,
    117,
    97,
    108,
    108,
    121,
    119,
    97,
    115,
    32,
    115,
    101,
    101,
    110,
    32,
    97,
    115,
    97,
    110,
    100,
    32,
    114,
    101,
    108,
    97,
    116,
    101,
    100,
    116,
    104,
    101,
    32,
    114,
    111,
    108,
    101,
    32,
    111,
    102,
    112,
    114,
    111,
    112,
    111,
    115,
    101,
    100,
    32,
    98,
    121,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    98,
    101,
    115,
    116,
    101,
    97,
    99,
    104,
    32,
    111,
    116,
    104,
    101,
    114,
    46,
    67,
    111,
    110,
    115,
    116,
    97,
    110,
    116,
    105,
    110,
    101,
    112,
    101,
    111,
    112,
    108,
    101,
    32,
    102,
    114,
    111,
    109,
    100,
    105,
    97,
    108,
    101,
    99,
    116,
    115,
    32,
    111,
    102,
    116,
    111,
    32,
    114,
    101,
    118,
    105,
    115,
    105,
    111,
    110,
    119,
    97,
    115,
    32,
    114,
    101,
    110,
    97,
    109,
    101,
    100,
    97,
    32,
    115,
    111,
    117,
    114,
    99,
    101,
    32,
    111,
    102,
    116,
    104,
    101,
    32,
    105,
    110,
    105,
    116,
    105,
    97,
    108,
    108,
    97,
    117,
    110,
    99,
    104,
    101,
    100,
    32,
    105,
    110,
    112,
    114,
    111,
    118,
    105,
    100,
    101,
    32,
    116,
    104,
    101,
    116,
    111,
    32,
    116,
    104,
    101,
    32,
    119,
    101,
    115,
    116,
    119,
    104,
    101,
    114,
    101,
    32,
    116,
    104,
    101,
    114,
    101,
    97,
    110,
    100,
    32,
    115,
    105,
    109,
    105,
    108,
    97,
    114,
    98,
    101,
    116,
    119,
    101,
    101,
    110,
    32,
    116,
    119,
    111,
    105,
    115,
    32,
    97,
    108,
    115,
    111,
    32,
    116,
    104,
    101,
    69,
    110,
    103,
    108,
    105,
    115,
    104,
    32,
    97,
    110,
    100,
    99,
    111,
    110,
    100,
    105,
    116,
    105,
    111,
    110,
    115,
    44,
    116,
    104,
    97,
    116,
    32,
    105,
    116,
    32,
    119,
    97,
    115,
    101,
    110,
    116,
    105,
    116,
    108,
    101,
    100,
    32,
    116,
    111,
    116,
    104,
    101,
    109,
    115,
    101,
    108,
    118,
    101,
    115,
    46,
    113,
    117,
    97,
    110,
    116,
    105,
    116,
    121,
    32,
    111,
    102,
    114,
    97,
    110,
    115,
    112,
    97,
    114,
    101,
    110,
    99,
    121,
    116,
    104,
    101,
    32,
    115,
    97,
    109,
    101,
    32,
    97,
    115,
    116,
    111,
    32,
    106,
    111,
    105,
    110,
    32,
    116,
    104,
    101,
    99,
    111,
    117,
    110,
    116,
    114,
    121,
    32,
    97,
    110,
    100,
    116,
    104,
    105,
    115,
    32,
    105,
    115,
    32,
    116,
    104,
    101,
    84,
    104,
    105,
    115,
    32,
    108,
    101,
    100,
    32,
    116,
    111,
    97,
    32,
    115,
    116,
    97,
    116,
    101,
    109,
    101,
    110,
    116,
    99,
    111,
    110,
    116,
    114,
    97,
    115,
    116,
    32,
    116,
    111,
    108,
    97,
    115,
    116,
    73,
    110,
    100,
    101,
    120,
    79,
    102,
    116,
    104,
    114,
    111,
    117,
    103,
    104,
    32,
    104,
    105,
    115,
    105,
    115,
    32,
    100,
    101,
    115,
    105,
    103,
    110,
    101,
    100,
    116,
    104,
    101,
    32,
    116,
    101,
    114,
    109,
    32,
    105,
    115,
    105,
    115,
    32,
    112,
    114,
    111,
    118,
    105,
    100,
    101,
    100,
    112,
    114,
    111,
    116,
    101,
    99,
    116,
    32,
    116,
    104,
    101,
    110,
    103,
    60,
    47,
    97,
    62,
    60,
    47,
    108,
    105,
    62,
    84,
    104,
    101,
    32,
    99,
    117,
    114,
    114,
    101,
    110,
    116,
    116,
    104,
    101,
    32,
    115,
    105,
    116,
    101,
    32,
    111,
    102,
    115,
    117,
    98,
    115,
    116,
    97,
    110,
    116,
    105,
    97,
    108,
    101,
    120,
    112,
    101,
    114,
    105,
    101,
    110,
    99,
    101,
    44,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    87,
    101,
    115,
    116,
    116,
    104,
    101,
    121,
    32,
    115,
    104,
    111,
    117,
    108,
    100,
    115,
    108,
    111,
    118,
    101,
    110,
    196,
    141,
    105,
    110,
    97,
    99,
    111,
    109,
    101,
    110,
    116,
    97,
    114,
    105,
    111,
    115,
    117,
    110,
    105,
    118,
    101,
    114,
    115,
    105,
    100,
    97,
    100,
    99,
    111,
    110,
    100,
    105,
    99,
    105,
    111,
    110,
    101,
    115,
    97,
    99,
    116,
    105,
    118,
    105,
    100,
    97,
    100,
    101,
    115,
    101,
    120,
    112,
    101,
    114,
    105,
    101,
    110,
    99,
    105,
    97,
    116,
    101,
    99,
    110,
    111,
    108,
    111,
    103,
    195,
    173,
    97,
    112,
    114,
    111,
    100,
    117,
    99,
    99,
    105,
    195,
    179,
    110,
    112,
    117,
    110,
    116,
    117,
    97,
    99,
    105,
    195,
    179,
    110,
    97,
    112,
    108,
    105,
    99,
    97,
    99,
    105,
    195,
    179,
    110,
    99,
    111,
    110,
    116,
    114,
    97,
    115,
    101,
    195,
    177,
    97,
    99,
    97,
    116,
    101,
    103,
    111,
    114,
    195,
    173,
    97,
    115,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    97,
    114,
    115,
    101,
    112,
    114,
    111,
    102,
    101,
    115,
    105,
    111,
    110,
    97,
    108,
    116,
    114,
    97,
    116,
    97,
    109,
    105,
    101,
    110,
    116,
    111,
    114,
    101,
    103,
    195,
    173,
    115,
    116,
    114,
    97,
    116,
    101,
    115,
    101,
    99,
    114,
    101,
    116,
    97,
    114,
    195,
    173,
    97,
    112,
    114,
    105,
    110,
    99,
    105,
    112,
    97,
    108,
    101,
    115,
    112,
    114,
    111,
    116,
    101,
    99,
    99,
    105,
    195,
    179,
    110,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    116,
    101,
    115,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    99,
    105,
    97,
    112,
    111,
    115,
    105,
    98,
    105,
    108,
    105,
    100,
    97,
    100,
    105,
    110,
    116,
    101,
    114,
    101,
    115,
    97,
    110,
    116,
    101,
    99,
    114,
    101,
    99,
    105,
    109,
    105,
    101,
    110,
    116,
    111,
    110,
    101,
    99,
    101,
    115,
    105,
    100,
    97,
    100,
    101,
    115,
    115,
    117,
    115,
    99,
    114,
    105,
    98,
    105,
    114,
    115,
    101,
    97,
    115,
    111,
    99,
    105,
    97,
    99,
    105,
    195,
    179,
    110,
    100,
    105,
    115,
    112,
    111,
    110,
    105,
    98,
    108,
    101,
    115,
    101,
    118,
    97,
    108,
    117,
    97,
    99,
    105,
    195,
    179,
    110,
    101,
    115,
    116,
    117,
    100,
    105,
    97,
    110,
    116,
    101,
    115,
    114,
    101,
    115,
    112,
    111,
    110,
    115,
    97,
    98,
    108,
    101,
    114,
    101,
    115,
    111,
    108,
    117,
    99,
    105,
    195,
    179,
    110,
    103,
    117,
    97,
    100,
    97,
    108,
    97,
    106,
    97,
    114,
    97,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    97,
    100,
    111,
    115,
    111,
    112,
    111,
    114,
    116,
    117,
    110,
    105,
    100,
    97,
    100,
    99,
    111,
    109,
    101,
    114,
    99,
    105,
    97,
    108,
    101,
    115,
    102,
    111,
    116,
    111,
    103,
    114,
    97,
    102,
    195,
    173,
    97,
    97,
    117,
    116,
    111,
    114,
    105,
    100,
    97,
    100,
    101,
    115,
    105,
    110,
    103,
    101,
    110,
    105,
    101,
    114,
    195,
    173,
    97,
    116,
    101,
    108,
    101,
    118,
    105,
    115,
    105,
    195,
    179,
    110,
    99,
    111,
    109,
    112,
    101,
    116,
    101,
    110,
    99,
    105,
    97,
    111,
    112,
    101,
    114,
    97,
    99,
    105,
    111,
    110,
    101,
    115,
    101,
    115,
    116,
    97,
    98,
    108,
    101,
    99,
    105,
    100,
    111,
    115,
    105,
    109,
    112,
    108,
    101,
    109,
    101,
    110,
    116,
    101,
    97,
    99,
    116,
    117,
    97,
    108,
    109,
    101,
    110,
    116,
    101,
    110,
    97,
    118,
    101,
    103,
    97,
    99,
    105,
    195,
    179,
    110,
    99,
    111,
    110,
    102,
    111,
    114,
    109,
    105,
    100,
    97,
    100,
    108,
    105,
    110,
    101,
    45,
    104,
    101,
    105,
    103,
    104,
    116,
    58,
    102,
    111,
    110,
    116,
    45,
    102,
    97,
    109,
    105,
    108,
    121,
    58,
    34,
    32,
    58,
    32,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    97,
    112,
    112,
    108,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    115,
    108,
    105,
    110,
    107,
    34,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    115,
    112,
    101,
    99,
    105,
    102,
    105,
    99,
    97,
    108,
    108,
    121,
    47,
    47,
    60,
    33,
    91,
    67,
    68,
    65,
    84,
    65,
    91,
    10,
    79,
    114,
    103,
    97,
    110,
    105,
    122,
    97,
    116,
    105,
    111,
    110,
    100,
    105,
    115,
    116,
    114,
    105,
    98,
    117,
    116,
    105,
    111,
    110,
    48,
    112,
    120,
    59,
    32,
    104,
    101,
    105,
    103,
    104,
    116,
    58,
    114,
    101,
    108,
    97,
    116,
    105,
    111,
    110,
    115,
    104,
    105,
    112,
    100,
    101,
    118,
    105,
    99,
    101,
    45,
    119,
    105,
    100,
    116,
    104,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    60,
    108,
    97,
    98,
    101,
    108,
    32,
    102,
    111,
    114,
    61,
    34,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    97,
    116,
    105,
    111,
    110,
    60,
    47,
    110,
    111,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    47,
    105,
    110,
    100,
    101,
    120,
    46,
    104,
    116,
    109,
    108,
    34,
    119,
    105,
    110,
    100,
    111,
    119,
    46,
    111,
    112,
    101,
    110,
    40,
    32,
    33,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    116,
    59,
    97,
    112,
    112,
    108,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    47,
    105,
    110,
    100,
    101,
    112,
    101,
    110,
    100,
    101,
    110,
    99,
    101,
    47,
    47,
    119,
    119,
    119,
    46,
    103,
    111,
    111,
    103,
    108,
    101,
    111,
    114,
    103,
    97,
    110,
    105,
    122,
    97,
    116,
    105,
    111,
    110,
    97,
    117,
    116,
    111,
    99,
    111,
    109,
    112,
    108,
    101,
    116,
    101,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    109,
    101,
    110,
    116,
    115,
    99,
    111,
    110,
    115,
    101,
    114,
    118,
    97,
    116,
    105,
    118,
    101,
    60,
    102,
    111,
    114,
    109,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    105,
    110,
    116,
    101,
    108,
    108,
    101,
    99,
    116,
    117,
    97,
    108,
    109,
    97,
    114,
    103,
    105,
    110,
    45,
    108,
    101,
    102,
    116,
    58,
    49,
    56,
    116,
    104,
    32,
    99,
    101,
    110,
    116,
    117,
    114,
    121,
    97,
    110,
    32,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    116,
    105,
    110,
    115,
    116,
    105,
    116,
    117,
    116,
    105,
    111,
    110,
    115,
    97,
    98,
    98,
    114,
    101,
    118,
    105,
    97,
    116,
    105,
    111,
    110,
    60,
    105,
    109,
    103,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    111,
    114,
    103,
    97,
    110,
    105,
    115,
    97,
    116,
    105,
    111,
    110,
    99,
    105,
    118,
    105,
    108,
    105,
    122,
    97,
    116,
    105,
    111,
    110,
    49,
    57,
    116,
    104,
    32,
    99,
    101,
    110,
    116,
    117,
    114,
    121,
    97,
    114,
    99,
    104,
    105,
    116,
    101,
    99,
    116,
    117,
    114,
    101,
    105,
    110,
    99,
    111,
    114,
    112,
    111,
    114,
    97,
    116,
    101,
    100,
    50,
    48,
    116,
    104,
    32,
    99,
    101,
    110,
    116,
    117,
    114,
    121,
    45,
    99,
    111,
    110,
    116,
    97,
    105,
    110,
    101,
    114,
    34,
    62,
    109,
    111,
    115,
    116,
    32,
    110,
    111,
    116,
    97,
    98,
    108,
    121,
    47,
    62,
    60,
    47,
    97,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    110,
    111,
    116,
    105,
    102,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    39,
    117,
    110,
    100,
    101,
    102,
    105,
    110,
    101,
    100,
    39,
    41,
    70,
    117,
    114,
    116,
    104,
    101,
    114,
    109,
    111,
    114,
    101,
    44,
    98,
    101,
    108,
    105,
    101,
    118,
    101,
    32,
    116,
    104,
    97,
    116,
    105,
    110,
    110,
    101,
    114,
    72,
    84,
    77,
    76,
    32,
    61,
    32,
    112,
    114,
    105,
    111,
    114,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    100,
    114,
    97,
    109,
    97,
    116,
    105,
    99,
    97,
    108,
    108,
    121,
    114,
    101,
    102,
    101,
    114,
    114,
    105,
    110,
    103,
    32,
    116,
    111,
    110,
    101,
    103,
    111,
    116,
    105,
    97,
    116,
    105,
    111,
    110,
    115,
    104,
    101,
    97,
    100,
    113,
    117,
    97,
    114,
    116,
    101,
    114,
    115,
    83,
    111,
    117,
    116,
    104,
    32,
    65,
    102,
    114,
    105,
    99,
    97,
    117,
    110,
    115,
    117,
    99,
    99,
    101,
    115,
    115,
    102,
    117,
    108,
    80,
    101,
    110,
    110,
    115,
    121,
    108,
    118,
    97,
    110,
    105,
    97,
    65,
    115,
    32,
    97,
    32,
    114,
    101,
    115,
    117,
    108,
    116,
    44,
    60,
    104,
    116,
    109,
    108,
    32,
    108,
    97,
    110,
    103,
    61,
    34,
    38,
    108,
    116,
    59,
    47,
    115,
    117,
    112,
    38,
    103,
    116,
    59,
    100,
    101,
    97,
    108,
    105,
    110,
    103,
    32,
    119,
    105,
    116,
    104,
    112,
    104,
    105,
    108,
    97,
    100,
    101,
    108,
    112,
    104,
    105,
    97,
    104,
    105,
    115,
    116,
    111,
    114,
    105,
    99,
    97,
    108,
    108,
    121,
    41,
    59,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    45,
    116,
    111,
    112,
    58,
    101,
    120,
    112,
    101,
    114,
    105,
    109,
    101,
    110,
    116,
    97,
    108,
    103,
    101,
    116,
    65,
    116,
    116,
    114,
    105,
    98,
    117,
    116,
    101,
    105,
    110,
    115,
    116,
    114,
    117,
    99,
    116,
    105,
    111,
    110,
    115,
    116,
    101,
    99,
    104,
    110,
    111,
    108,
    111,
    103,
    105,
    101,
    115,
    112,
    97,
    114,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    61,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    41,
    123,
    115,
    117,
    98,
    115,
    99,
    114,
    105,
    112,
    116,
    105,
    111,
    110,
    108,
    46,
    100,
    116,
    100,
    34,
    62,
    13,
    10,
    60,
    104,
    116,
    103,
    101,
    111,
    103,
    114,
    97,
    112,
    104,
    105,
    99,
    97,
    108,
    67,
    111,
    110,
    115,
    116,
    105,
    116,
    117,
    116,
    105,
    111,
    110,
    39,
    44,
    32,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    101,
    100,
    32,
    98,
    121,
    97,
    103,
    114,
    105,
    99,
    117,
    108,
    116,
    117,
    114,
    97,
    108,
    99,
    111,
    110,
    115,
    116,
    114,
    117,
    99,
    116,
    105,
    111,
    110,
    112,
    117,
    98,
    108,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    115,
    102,
    111,
    110,
    116,
    45,
    115,
    105,
    122,
    101,
    58,
    32,
    49,
    97,
    32,
    118,
    97,
    114,
    105,
    101,
    116,
    121,
    32,
    111,
    102,
    60,
    100,
    105,
    118,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    69,
    110,
    99,
    121,
    99,
    108,
    111,
    112,
    101,
    100,
    105,
    97,
    105,
    102,
    114,
    97,
    109,
    101,
    32,
    115,
    114,
    99,
    61,
    34,
    100,
    101,
    109,
    111,
    110,
    115,
    116,
    114,
    97,
    116,
    101,
    100,
    97,
    99,
    99,
    111,
    109,
    112,
    108,
    105,
    115,
    104,
    101,
    100,
    117,
    110,
    105,
    118,
    101,
    114,
    115,
    105,
    116,
    105,
    101,
    115,
    68,
    101,
    109,
    111,
    103,
    114,
    97,
    112,
    104,
    105,
    99,
    115,
    41,
    59,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    60,
    100,
    101,
    100,
    105,
    99,
    97,
    116,
    101,
    100,
    32,
    116,
    111,
    107,
    110,
    111,
    119,
    108,
    101,
    100,
    103,
    101,
    32,
    111,
    102,
    115,
    97,
    116,
    105,
    115,
    102,
    97,
    99,
    116,
    105,
    111,
    110,
    112,
    97,
    114,
    116,
    105,
    99,
    117,
    108,
    97,
    114,
    108,
    121,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    69,
    110,
    103,
    108,
    105,
    115,
    104,
    32,
    40,
    85,
    83,
    41,
    97,
    112,
    112,
    101,
    110,
    100,
    67,
    104,
    105,
    108,
    100,
    40,
    116,
    114,
    97,
    110,
    115,
    109,
    105,
    115,
    115,
    105,
    111,
    110,
    115,
    46,
    32,
    72,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    32,
    105,
    110,
    116,
    101,
    108,
    108,
    105,
    103,
    101,
    110,
    99,
    101,
    34,
    32,
    116,
    97,
    98,
    105,
    110,
    100,
    101,
    120,
    61,
    34,
    102,
    108,
    111,
    97,
    116,
    58,
    114,
    105,
    103,
    104,
    116,
    59,
    67,
    111,
    109,
    109,
    111,
    110,
    119,
    101,
    97,
    108,
    116,
    104,
    114,
    97,
    110,
    103,
    105,
    110,
    103,
    32,
    102,
    114,
    111,
    109,
    105,
    110,
    32,
    119,
    104,
    105,
    99,
    104,
    32,
    116,
    104,
    101,
    97,
    116,
    32,
    108,
    101,
    97,
    115,
    116,
    32,
    111,
    110,
    101,
    114,
    101,
    112,
    114,
    111,
    100,
    117,
    99,
    116,
    105,
    111,
    110,
    101,
    110,
    99,
    121,
    99,
    108,
    111,
    112,
    101,
    100,
    105,
    97,
    59,
    102,
    111,
    110,
    116,
    45,
    115,
    105,
    122,
    101,
    58,
    49,
    106,
    117,
    114,
    105,
    115,
    100,
    105,
    99,
    116,
    105,
    111,
    110,
    97,
    116,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    105,
    109,
    101,
    34,
    62,
    60,
    97,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    73,
    110,
    32,
    97,
    100,
    100,
    105,
    116,
    105,
    111,
    110,
    44,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    105,
    111,
    110,
    43,
    99,
    111,
    110,
    118,
    101,
    114,
    115,
    97,
    116,
    105,
    111,
    110,
    99,
    111,
    110,
    116,
    97,
    99,
    116,
    32,
    119,
    105,
    116,
    104,
    105,
    115,
    32,
    103,
    101,
    110,
    101,
    114,
    97,
    108,
    108,
    121,
    114,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    114,
    101,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    105,
    110,
    103,
    38,
    108,
    116,
    59,
    109,
    97,
    116,
    104,
    38,
    103,
    116,
    59,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    97,
    116,
    105,
    111,
    110,
    111,
    99,
    99,
    97,
    115,
    105,
    111,
    110,
    97,
    108,
    108,
    121,
    60,
    105,
    109,
    103,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    110,
    97,
    118,
    105,
    103,
    97,
    116,
    105,
    111,
    110,
    34,
    62,
    99,
    111,
    109,
    112,
    101,
    110,
    115,
    97,
    116,
    105,
    111,
    110,
    99,
    104,
    97,
    109,
    112,
    105,
    111,
    110,
    115,
    104,
    105,
    112,
    109,
    101,
    100,
    105,
    97,
    61,
    34,
    97,
    108,
    108,
    34,
    32,
    118,
    105,
    111,
    108,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    114,
    101,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    32,
    116,
    111,
    114,
    101,
    116,
    117,
    114,
    110,
    32,
    116,
    114,
    117,
    101,
    59,
    83,
    116,
    114,
    105,
    99,
    116,
    47,
    47,
    69,
    78,
    34,
    32,
    116,
    114,
    97,
    110,
    115,
    97,
    99,
    116,
    105,
    111,
    110,
    115,
    105,
    110,
    116,
    101,
    114,
    118,
    101,
    110,
    116,
    105,
    111,
    110,
    118,
    101,
    114,
    105,
    102,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    73,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    32,
    100,
    105,
    102,
    102,
    105,
    99,
    117,
    108,
    116,
    105,
    101,
    115,
    67,
    104,
    97,
    109,
    112,
    105,
    111,
    110,
    115,
    104,
    105,
    112,
    99,
    97,
    112,
    97,
    98,
    105,
    108,
    105,
    116,
    105,
    101,
    115,
    60,
    33,
    91,
    101,
    110,
    100,
    105,
    102,
    93,
    45,
    45,
    62,
    125,
    10,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    67,
    104,
    114,
    105,
    115,
    116,
    105,
    97,
    110,
    105,
    116,
    121,
    102,
    111,
    114,
    32,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    44,
    80,
    114,
    111,
    102,
    101,
    115,
    115,
    105,
    111,
    110,
    97,
    108,
    114,
    101,
    115,
    116,
    114,
    105,
    99,
    116,
    105,
    111,
    110,
    115,
    115,
    117,
    103,
    103,
    101,
    115,
    116,
    32,
    116,
    104,
    97,
    116,
    119,
    97,
    115,
    32,
    114,
    101,
    108,
    101,
    97,
    115,
    101,
    100,
    40,
    115,
    117,
    99,
    104,
    32,
    97,
    115,
    32,
    116,
    104,
    101,
    114,
    101,
    109,
    111,
    118,
    101,
    67,
    108,
    97,
    115,
    115,
    40,
    117,
    110,
    101,
    109,
    112,
    108,
    111,
    121,
    109,
    101,
    110,
    116,
    116,
    104,
    101,
    32,
    65,
    109,
    101,
    114,
    105,
    99,
    97,
    110,
    115,
    116,
    114,
    117,
    99,
    116,
    117,
    114,
    101,
    32,
    111,
    102,
    47,
    105,
    110,
    100,
    101,
    120,
    46,
    104,
    116,
    109,
    108,
    32,
    112,
    117,
    98,
    108,
    105,
    115,
    104,
    101,
    100,
    32,
    105,
    110,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    34,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    47,
    105,
    110,
    116,
    114,
    111,
    100,
    117,
    99,
    116,
    105,
    111,
    110,
    98,
    101,
    108,
    111,
    110,
    103,
    105,
    110,
    103,
    32,
    116,
    111,
    99,
    108,
    97,
    105,
    109,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    99,
    111,
    110,
    115,
    101,
    113,
    117,
    101,
    110,
    99,
    101,
    115,
    60,
    109,
    101,
    116,
    97,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    71,
    117,
    105,
    100,
    101,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    111,
    118,
    101,
    114,
    119,
    104,
    101,
    108,
    109,
    105,
    110,
    103,
    97,
    103,
    97,
    105,
    110,
    115,
    116,
    32,
    116,
    104,
    101,
    32,
    99,
    111,
    110,
    99,
    101,
    110,
    116,
    114,
    97,
    116,
    101,
    100,
    44,
    10,
    46,
    110,
    111,
    110,
    116,
    111,
    117,
    99,
    104,
    32,
    111,
    98,
    115,
    101,
    114,
    118,
    97,
    116,
    105,
    111,
    110,
    115,
    60,
    47,
    97,
    62,
    10,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    102,
    32,
    40,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    98,
    111,
    114,
    100,
    101,
    114,
    58,
    32,
    49,
    112,
    120,
    32,
    123,
    102,
    111,
    110,
    116,
    45,
    115,
    105,
    122,
    101,
    58,
    49,
    116,
    114,
    101,
    97,
    116,
    109,
    101,
    110,
    116,
    32,
    111,
    102,
    48,
    34,
    32,
    104,
    101,
    105,
    103,
    104,
    116,
    61,
    34,
    49,
    109,
    111,
    100,
    105,
    102,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    73,
    110,
    100,
    101,
    112,
    101,
    110,
    100,
    101,
    110,
    99,
    101,
    100,
    105,
    118,
    105,
    100,
    101,
    100,
    32,
    105,
    110,
    116,
    111,
    103,
    114,
    101,
    97,
    116,
    101,
    114,
    32,
    116,
    104,
    97,
    110,
    97,
    99,
    104,
    105,
    101,
    118,
    101,
    109,
    101,
    110,
    116,
    115,
    101,
    115,
    116,
    97,
    98,
    108,
    105,
    115,
    104,
    105,
    110,
    103,
    74,
    97,
    118,
    97,
    83,
    99,
    114,
    105,
    112,
    116,
    34,
    32,
    110,
    101,
    118,
    101,
    114,
    116,
    104,
    101,
    108,
    101,
    115,
    115,
    115,
    105,
    103,
    110,
    105,
    102,
    105,
    99,
    97,
    110,
    99,
    101,
    66,
    114,
    111,
    97,
    100,
    99,
    97,
    115,
    116,
    105,
    110,
    103,
    62,
    38,
    110,
    98,
    115,
    112,
    59,
    60,
    47,
    116,
    100,
    62,
    99,
    111,
    110,
    116,
    97,
    105,
    110,
    101,
    114,
    34,
    62,
    10,
    115,
    117,
    99,
    104,
    32,
    97,
    115,
    32,
    116,
    104,
    101,
    32,
    105,
    110,
    102,
    108,
    117,
    101,
    110,
    99,
    101,
    32,
    111,
    102,
    97,
    32,
    112,
    97,
    114,
    116,
    105,
    99,
    117,
    108,
    97,
    114,
    115,
    114,
    99,
    61,
    39,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    110,
    97,
    118,
    105,
    103,
    97,
    116,
    105,
    111,
    110,
    34,
    32,
    104,
    97,
    108,
    102,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    115,
    117,
    98,
    115,
    116,
    97,
    110,
    116,
    105,
    97,
    108,
    32,
    38,
    110,
    98,
    115,
    112,
    59,
    60,
    47,
    100,
    105,
    118,
    62,
    97,
    100,
    118,
    97,
    110,
    116,
    97,
    103,
    101,
    32,
    111,
    102,
    100,
    105,
    115,
    99,
    111,
    118,
    101,
    114,
    121,
    32,
    111,
    102,
    102,
    117,
    110,
    100,
    97,
    109,
    101,
    110,
    116,
    97,
    108,
    32,
    109,
    101,
    116,
    114,
    111,
    112,
    111,
    108,
    105,
    116,
    97,
    110,
    116,
    104,
    101,
    32,
    111,
    112,
    112,
    111,
    115,
    105,
    116,
    101,
    34,
    32,
    120,
    109,
    108,
    58,
    108,
    97,
    110,
    103,
    61,
    34,
    100,
    101,
    108,
    105,
    98,
    101,
    114,
    97,
    116,
    101,
    108,
    121,
    97,
    108,
    105,
    103,
    110,
    61,
    99,
    101,
    110,
    116,
    101,
    114,
    101,
    118,
    111,
    108,
    117,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    112,
    114,
    101,
    115,
    101,
    114,
    118,
    97,
    116,
    105,
    111,
    110,
    105,
    109,
    112,
    114,
    111,
    118,
    101,
    109,
    101,
    110,
    116,
    115,
    98,
    101,
    103,
    105,
    110,
    110,
    105,
    110,
    103,
    32,
    105,
    110,
    74,
    101,
    115,
    117,
    115,
    32,
    67,
    104,
    114,
    105,
    115,
    116,
    80,
    117,
    98,
    108,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    115,
    100,
    105,
    115,
    97,
    103,
    114,
    101,
    101,
    109,
    101,
    110,
    116,
    116,
    101,
    120,
    116,
    45,
    97,
    108,
    105,
    103,
    110,
    58,
    114,
    44,
    32,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    41,
    115,
    105,
    109,
    105,
    108,
    97,
    114,
    105,
    116,
    105,
    101,
    115,
    98,
    111,
    100,
    121,
    62,
    60,
    47,
    104,
    116,
    109,
    108,
    62,
    105,
    115,
    32,
    99,
    117,
    114,
    114,
    101,
    110,
    116,
    108,
    121,
    97,
    108,
    112,
    104,
    97,
    98,
    101,
    116,
    105,
    99,
    97,
    108,
    105,
    115,
    32,
    115,
    111,
    109,
    101,
    116,
    105,
    109,
    101,
    115,
    116,
    121,
    112,
    101,
    61,
    34,
    105,
    109,
    97,
    103,
    101,
    47,
    109,
    97,
    110,
    121,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    102,
    108,
    111,
    119,
    58,
    104,
    105,
    100,
    100,
    101,
    110,
    59,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    32,
    105,
    110,
    100,
    101,
    115,
    99,
    114,
    105,
    98,
    101,
    32,
    116,
    104,
    101,
    101,
    120,
    105,
    115,
    116,
    101,
    110,
    99,
    101,
    32,
    111,
    102,
    97,
    108,
    108,
    32,
    111,
    118,
    101,
    114,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    73,
    110,
    116,
    101,
    114,
    110,
    101,
    116,
    9,
    60,
    117,
    108,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    105,
    110,
    115,
    116,
    97,
    108,
    108,
    97,
    116,
    105,
    111,
    110,
    110,
    101,
    105,
    103,
    104,
    98,
    111,
    114,
    104,
    111,
    111,
    100,
    97,
    114,
    109,
    101,
    100,
    32,
    102,
    111,
    114,
    99,
    101,
    115,
    114,
    101,
    100,
    117,
    99,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    99,
    111,
    110,
    116,
    105,
    110,
    117,
    101,
    115,
    32,
    116,
    111,
    78,
    111,
    110,
    101,
    116,
    104,
    101,
    108,
    101,
    115,
    115,
    44,
    116,
    101,
    109,
    112,
    101,
    114,
    97,
    116,
    117,
    114,
    101,
    115,
    10,
    9,
    9,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    99,
    108,
    111,
    115,
    101,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    115,
    32,
    111,
    102,
    32,
    105,
    115,
    32,
    97,
    98,
    111,
    117,
    116,
    32,
    116,
    104,
    101,
    40,
    115,
    101,
    101,
    32,
    98,
    101,
    108,
    111,
    119,
    41,
    46,
    34,
    32,
    105,
    100,
    61,
    34,
    115,
    101,
    97,
    114,
    99,
    104,
    112,
    114,
    111,
    102,
    101,
    115,
    115,
    105,
    111,
    110,
    97,
    108,
    105,
    115,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    116,
    104,
    101,
    32,
    111,
    102,
    102,
    105,
    99,
    105,
    97,
    108,
    9,
    9,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    10,
    9,
    9,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    97,
    99,
    99,
    101,
    108,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    116,
    104,
    114,
    111,
    117,
    103,
    104,
    32,
    116,
    104,
    101,
    32,
    72,
    97,
    108,
    108,
    32,
    111,
    102,
    32,
    70,
    97,
    109,
    101,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    105,
    111,
    110,
    115,
    116,
    114,
    97,
    110,
    115,
    108,
    97,
    116,
    105,
    111,
    110,
    115,
    105,
    110,
    116,
    101,
    114,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    32,
    116,
    121,
    112,
    101,
    61,
    39,
    116,
    101,
    120,
    116,
    47,
    114,
    101,
    99,
    101,
    110,
    116,
    32,
    121,
    101,
    97,
    114,
    115,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    119,
    111,
    114,
    108,
    100,
    118,
    101,
    114,
    121,
    32,
    112,
    111,
    112,
    117,
    108,
    97,
    114,
    123,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    58,
    116,
    114,
    97,
    100,
    105,
    116,
    105,
    111,
    110,
    97,
    108,
    32,
    115,
    111,
    109,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    101,
    100,
    32,
    116,
    111,
    101,
    120,
    112,
    108,
    111,
    105,
    116,
    97,
    116,
    105,
    111,
    110,
    101,
    109,
    101,
    114,
    103,
    101,
    110,
    99,
    101,
    32,
    111,
    102,
    99,
    111,
    110,
    115,
    116,
    105,
    116,
    117,
    116,
    105,
    111,
    110,
    65,
    32,
    72,
    105,
    115,
    116,
    111,
    114,
    121,
    32,
    111,
    102,
    115,
    105,
    103,
    110,
    105,
    102,
    105,
    99,
    97,
    110,
    116,
    32,
    109,
    97,
    110,
    117,
    102,
    97,
    99,
    116,
    117,
    114,
    101,
    100,
    101,
    120,
    112,
    101,
    99,
    116,
    97,
    116,
    105,
    111,
    110,
    115,
    62,
    60,
    110,
    111,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    60,
    99,
    97,
    110,
    32,
    98,
    101,
    32,
    102,
    111,
    117,
    110,
    100,
    98,
    101,
    99,
    97,
    117,
    115,
    101,
    32,
    116,
    104,
    101,
    32,
    104,
    97,
    115,
    32,
    110,
    111,
    116,
    32,
    98,
    101,
    101,
    110,
    110,
    101,
    105,
    103,
    104,
    98,
    111,
    117,
    114,
    105,
    110,
    103,
    119,
    105,
    116,
    104,
    111,
    117,
    116,
    32,
    116,
    104,
    101,
    32,
    97,
    100,
    100,
    101,
    100,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    9,
    60,
    108,
    105,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    105,
    110,
    115,
    116,
    114,
    117,
    109,
    101,
    110,
    116,
    97,
    108,
    83,
    111,
    118,
    105,
    101,
    116,
    32,
    85,
    110,
    105,
    111,
    110,
    97,
    99,
    107,
    110,
    111,
    119,
    108,
    101,
    100,
    103,
    101,
    100,
    119,
    104,
    105,
    99,
    104,
    32,
    99,
    97,
    110,
    32,
    98,
    101,
    110,
    97,
    109,
    101,
    32,
    102,
    111,
    114,
    32,
    116,
    104,
    101,
    97,
    116,
    116,
    101,
    110,
    116,
    105,
    111,
    110,
    32,
    116,
    111,
    97,
    116,
    116,
    101,
    109,
    112,
    116,
    115,
    32,
    116,
    111,
    32,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    109,
    101,
    110,
    116,
    115,
    73,
    110,
    32,
    102,
    97,
    99,
    116,
    44,
    32,
    116,
    104,
    101,
    60,
    108,
    105,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    97,
    105,
    109,
    112,
    108,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    115,
    115,
    117,
    105,
    116,
    97,
    98,
    108,
    101,
    32,
    102,
    111,
    114,
    109,
    117,
    99,
    104,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    99,
    111,
    108,
    111,
    110,
    105,
    122,
    97,
    116,
    105,
    111,
    110,
    112,
    114,
    101,
    115,
    105,
    100,
    101,
    110,
    116,
    105,
    97,
    108,
    99,
    97,
    110,
    99,
    101,
    108,
    66,
    117,
    98,
    98,
    108,
    101,
    32,
    73,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    109,
    111,
    115,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    105,
    115,
    32,
    100,
    101,
    115,
    99,
    114,
    105,
    98,
    101,
    100,
    114,
    101,
    115,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    109,
    111,
    114,
    101,
    32,
    111,
    114,
    32,
    108,
    101,
    115,
    115,
    105,
    110,
    32,
    83,
    101,
    112,
    116,
    101,
    109,
    98,
    101,
    114,
    73,
    110,
    116,
    101,
    108,
    108,
    105,
    103,
    101,
    110,
    99,
    101,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    112,
    120,
    59,
    32,
    104,
    101,
    105,
    103,
    104,
    116,
    58,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    32,
    116,
    111,
    109,
    97,
    110,
    117,
    102,
    97,
    99,
    116,
    117,
    114,
    101,
    114,
    104,
    117,
    109,
    97,
    110,
    32,
    114,
    105,
    103,
    104,
    116,
    115,
    108,
    105,
    110,
    107,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    47,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    105,
    108,
    105,
    116,
    121,
    112,
    114,
    111,
    112,
    111,
    114,
    116,
    105,
    111,
    110,
    97,
    108,
    111,
    117,
    116,
    115,
    105,
    100,
    101,
    32,
    116,
    104,
    101,
    32,
    97,
    115,
    116,
    114,
    111,
    110,
    111,
    109,
    105,
    99,
    97,
    108,
    104,
    117,
    109,
    97,
    110,
    32,
    98,
    101,
    105,
    110,
    103,
    115,
    110,
    97,
    109,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    97,
    114,
    101,
    32,
    102,
    111,
    117,
    110,
    100,
    32,
    105,
    110,
    97,
    114,
    101,
    32,
    98,
    97,
    115,
    101,
    100,
    32,
    111,
    110,
    115,
    109,
    97,
    108,
    108,
    101,
    114,
    32,
    116,
    104,
    97,
    110,
    97,
    32,
    112,
    101,
    114,
    115,
    111,
    110,
    32,
    119,
    104,
    111,
    101,
    120,
    112,
    97,
    110,
    115,
    105,
    111,
    110,
    32,
    111,
    102,
    97,
    114,
    103,
    117,
    105,
    110,
    103,
    32,
    116,
    104,
    97,
    116,
    110,
    111,
    119,
    32,
    107,
    110,
    111,
    119,
    110,
    32,
    97,
    115,
    73,
    110,
    32,
    116,
    104,
    101,
    32,
    101,
    97,
    114,
    108,
    121,
    105,
    110,
    116,
    101,
    114,
    109,
    101,
    100,
    105,
    97,
    116,
    101,
    100,
    101,
    114,
    105,
    118,
    101,
    100,
    32,
    102,
    114,
    111,
    109,
    83,
    99,
    97,
    110,
    100,
    105,
    110,
    97,
    118,
    105,
    97,
    110,
    60,
    47,
    97,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    13,
    10,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    32,
    116,
    104,
    101,
    97,
    110,
    32,
    101,
    115,
    116,
    105,
    109,
    97,
    116,
    101,
    100,
    116,
    104,
    101,
    32,
    78,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    112,
    97,
    103,
    114,
    101,
    115,
    117,
    108,
    116,
    105,
    110,
    103,
    32,
    105,
    110,
    99,
    111,
    109,
    109,
    105,
    115,
    115,
    105,
    111,
    110,
    101,
    100,
    97,
    110,
    97,
    108,
    111,
    103,
    111,
    117,
    115,
    32,
    116,
    111,
    97,
    114,
    101,
    32,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    100,
    47,
    117,
    108,
    62,
    10,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    119,
    97,
    115,
    32,
    98,
    97,
    115,
    101,
    100,
    32,
    111,
    110,
    97,
    110,
    100,
    32,
    98,
    101,
    99,
    97,
    109,
    101,
    32,
    97,
    38,
    110,
    98,
    115,
    112,
    59,
    38,
    110,
    98,
    115,
    112,
    59,
    116,
    34,
    32,
    118,
    97,
    108,
    117,
    101,
    61,
    34,
    34,
    32,
    119,
    97,
    115,
    32,
    99,
    97,
    112,
    116,
    117,
    114,
    101,
    100,
    110,
    111,
    32,
    109,
    111,
    114,
    101,
    32,
    116,
    104,
    97,
    110,
    114,
    101,
    115,
    112,
    101,
    99,
    116,
    105,
    118,
    101,
    108,
    121,
    99,
    111,
    110,
    116,
    105,
    110,
    117,
    101,
    32,
    116,
    111,
    32,
    62,
    13,
    10,
    60,
    104,
    101,
    97,
    100,
    62,
    13,
    10,
    60,
    119,
    101,
    114,
    101,
    32,
    99,
    114,
    101,
    97,
    116,
    101,
    100,
    109,
    111,
    114,
    101,
    32,
    103,
    101,
    110,
    101,
    114,
    97,
    108,
    105,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    32,
    117,
    115,
    101,
    100,
    32,
    102,
    111,
    114,
    32,
    116,
    104,
    101,
    105,
    110,
    100,
    101,
    112,
    101,
    110,
    100,
    101,
    110,
    116,
    32,
    116,
    104,
    101,
    32,
    73,
    109,
    112,
    101,
    114,
    105,
    97,
    108,
    99,
    111,
    109,
    112,
    111,
    110,
    101,
    110,
    116,
    32,
    111,
    102,
    116,
    111,
    32,
    116,
    104,
    101,
    32,
    110,
    111,
    114,
    116,
    104,
    105,
    110,
    99,
    108,
    117,
    100,
    101,
    32,
    116,
    104,
    101,
    32,
    67,
    111,
    110,
    115,
    116,
    114,
    117,
    99,
    116,
    105,
    111,
    110,
    115,
    105,
    100,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    119,
    111,
    117,
    108,
    100,
    32,
    110,
    111,
    116,
    32,
    98,
    101,
    102,
    111,
    114,
    32,
    105,
    110,
    115,
    116,
    97,
    110,
    99,
    101,
    105,
    110,
    118,
    101,
    110,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    109,
    111,
    114,
    101,
    32,
    99,
    111,
    109,
    112,
    108,
    101,
    120,
    99,
    111,
    108,
    108,
    101,
    99,
    116,
    105,
    118,
    101,
    108,
    121,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    58,
    32,
    116,
    101,
    120,
    116,
    45,
    97,
    108,
    105,
    103,
    110,
    58,
    32,
    105,
    116,
    115,
    32,
    111,
    114,
    105,
    103,
    105,
    110,
    97,
    108,
    105,
    110,
    116,
    111,
    32,
    97,
    99,
    99,
    111,
    117,
    110,
    116,
    116,
    104,
    105,
    115,
    32,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    97,
    110,
    32,
    101,
    120,
    116,
    101,
    110,
    115,
    105,
    118,
    101,
    104,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    121,
    32,
    97,
    114,
    101,
    32,
    110,
    111,
    116,
    114,
    101,
    106,
    101,
    99,
    116,
    101,
    100,
    32,
    116,
    104,
    101,
    99,
    114,
    105,
    116,
    105,
    99,
    105,
    115,
    109,
    32,
    111,
    102,
    100,
    117,
    114,
    105,
    110,
    103,
    32,
    119,
    104,
    105,
    99,
    104,
    112,
    114,
    111,
    98,
    97,
    98,
    108,
    121,
    32,
    116,
    104,
    101,
    116,
    104,
    105,
    115,
    32,
    97,
    114,
    116,
    105,
    99,
    108,
    101,
    40,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    41,
    123,
    73,
    116,
    32,
    115,
    104,
    111,
    117,
    108,
    100,
    32,
    98,
    101,
    97,
    110,
    32,
    97,
    103,
    114,
    101,
    101,
    109,
    101,
    110,
    116,
    97,
    99,
    99,
    105,
    100,
    101,
    110,
    116,
    97,
    108,
    108,
    121,
    100,
    105,
    102,
    102,
    101,
    114,
    115,
    32,
    102,
    114,
    111,
    109,
    65,
    114,
    99,
    104,
    105,
    116,
    101,
    99,
    116,
    117,
    114,
    101,
    98,
    101,
    116,
    116,
    101,
    114,
    32,
    107,
    110,
    111,
    119,
    110,
    97,
    114,
    114,
    97,
    110,
    103,
    101,
    109,
    101,
    110,
    116,
    115,
    105,
    110,
    102,
    108,
    117,
    101,
    110,
    99,
    101,
    32,
    111,
    110,
    97,
    116,
    116,
    101,
    110,
    100,
    101,
    100,
    32,
    116,
    104,
    101,
    105,
    100,
    101,
    110,
    116,
    105,
    99,
    97,
    108,
    32,
    116,
    111,
    115,
    111,
    117,
    116,
    104,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    112,
    97,
    115,
    115,
    32,
    116,
    104,
    114,
    111,
    117,
    103,
    104,
    120,
    109,
    108,
    34,
    32,
    116,
    105,
    116,
    108,
    101,
    61,
    34,
    119,
    101,
    105,
    103,
    104,
    116,
    58,
    98,
    111,
    108,
    100,
    59,
    99,
    114,
    101,
    97,
    116,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    58,
    110,
    111,
    110,
    101,
    114,
    101,
    112,
    108,
    97,
    99,
    101,
    100,
    32,
    116,
    104,
    101,
    60,
    105,
    109,
    103,
    32,
    115,
    114,
    99,
    61,
    34,
    47,
    105,
    104,
    116,
    116,
    112,
    115,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    87,
    111,
    114,
    108,
    100,
    32,
    87,
    97,
    114,
    32,
    73,
    73,
    116,
    101,
    115,
    116,
    105,
    109,
    111,
    110,
    105,
    97,
    108,
    115,
    102,
    111,
    117,
    110,
    100,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    100,
    32,
    116,
    111,
    32,
    97,
    110,
    100,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    98,
    101,
    116,
    119,
    101,
    101,
    110,
    32,
    116,
    104,
    101,
    32,
    119,
    97,
    115,
    32,
    100,
    101,
    115,
    105,
    103,
    110,
    101,
    100,
    99,
    111,
    110,
    115,
    105,
    115,
    116,
    115,
    32,
    111,
    102,
    32,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    97,
    98,
    108,
    121,
    112,
    117,
    98,
    108,
    105,
    115,
    104,
    101,
    100,
    32,
    98,
    121,
    116,
    104,
    101,
    32,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    67,
    111,
    110,
    115,
    101,
    114,
    118,
    97,
    116,
    105,
    111,
    110,
    99,
    111,
    110,
    115,
    105,
    115,
    116,
    101,
    100,
    32,
    111,
    102,
    114,
    101,
    102,
    101,
    114,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    98,
    97,
    99,
    107,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    32,
    99,
    115,
    115,
    34,
    32,
    109,
    101,
    100,
    105,
    97,
    61,
    34,
    80,
    101,
    111,
    112,
    108,
    101,
    32,
    102,
    114,
    111,
    109,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    32,
    111,
    110,
    112,
    114,
    111,
    118,
    101,
    100,
    32,
    116,
    111,
    32,
    98,
    101,
    115,
    117,
    103,
    103,
    101,
    115,
    116,
    105,
    111,
    110,
    115,
    34,
    119,
    97,
    115,
    32,
    107,
    110,
    111,
    119,
    110,
    32,
    97,
    115,
    118,
    97,
    114,
    105,
    101,
    116,
    105,
    101,
    115,
    32,
    111,
    102,
    108,
    105,
    107,
    101,
    108,
    121,
    32,
    116,
    111,
    32,
    98,
    101,
    99,
    111,
    109,
    112,
    114,
    105,
    115,
    101,
    100,
    32,
    111,
    102,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    32,
    116,
    104,
    101,
    32,
    104,
    97,
    110,
    100,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    99,
    111,
    117,
    112,
    108,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    32,
    97,
    110,
    100,
    32,
    98,
    111,
    114,
    100,
    101,
    114,
    58,
    110,
    111,
    110,
    101,
    59,
    112,
    101,
    114,
    102,
    111,
    114,
    109,
    97,
    110,
    99,
    101,
    115,
    98,
    101,
    102,
    111,
    114,
    101,
    32,
    98,
    101,
    105,
    110,
    103,
    108,
    97,
    116,
    101,
    114,
    32,
    98,
    101,
    99,
    97,
    109,
    101,
    99,
    97,
    108,
    99,
    117,
    108,
    97,
    116,
    105,
    111,
    110,
    115,
    111,
    102,
    116,
    101,
    110,
    32,
    99,
    97,
    108,
    108,
    101,
    100,
    114,
    101,
    115,
    105,
    100,
    101,
    110,
    116,
    115,
    32,
    111,
    102,
    109,
    101,
    97,
    110,
    105,
    110,
    103,
    32,
    116,
    104,
    97,
    116,
    62,
    60,
    108,
    105,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    101,
    118,
    105,
    100,
    101,
    110,
    99,
    101,
    32,
    102,
    111,
    114,
    101,
    120,
    112,
    108,
    97,
    110,
    97,
    116,
    105,
    111,
    110,
    115,
    101,
    110,
    118,
    105,
    114,
    111,
    110,
    109,
    101,
    110,
    116,
    115,
    34,
    62,
    60,
    47,
    97,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    119,
    104,
    105,
    99,
    104,
    32,
    97,
    108,
    108,
    111,
    119,
    115,
    73,
    110,
    116,
    114,
    111,
    100,
    117,
    99,
    116,
    105,
    111,
    110,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    101,
    100,
    32,
    98,
    121,
    97,
    32,
    119,
    105,
    100,
    101,
    32,
    114,
    97,
    110,
    103,
    101,
    111,
    110,
    32,
    98,
    101,
    104,
    97,
    108,
    102,
    32,
    111,
    102,
    118,
    97,
    108,
    105,
    103,
    110,
    61,
    34,
    116,
    111,
    112,
    34,
    112,
    114,
    105,
    110,
    99,
    105,
    112,
    108,
    101,
    32,
    111,
    102,
    97,
    116,
    32,
    116,
    104,
    101,
    32,
    116,
    105,
    109,
    101,
    44,
    60,
    47,
    110,
    111,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    13,
    115,
    97,
    105,
    100,
    32,
    116,
    111,
    32,
    104,
    97,
    118,
    101,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    102,
    105,
    114,
    115,
    116,
    119,
    104,
    105,
    108,
    101,
    32,
    111,
    116,
    104,
    101,
    114,
    115,
    104,
    121,
    112,
    111,
    116,
    104,
    101,
    116,
    105,
    99,
    97,
    108,
    112,
    104,
    105,
    108,
    111,
    115,
    111,
    112,
    104,
    101,
    114,
    115,
    112,
    111,
    119,
    101,
    114,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    99,
    111,
    110,
    116,
    97,
    105,
    110,
    101,
    100,
    32,
    105,
    110,
    112,
    101,
    114,
    102,
    111,
    114,
    109,
    101,
    100,
    32,
    98,
    121,
    105,
    110,
    97,
    98,
    105,
    108,
    105,
    116,
    121,
    32,
    116,
    111,
    119,
    101,
    114,
    101,
    32,
    119,
    114,
    105,
    116,
    116,
    101,
    110,
    115,
    112,
    97,
    110,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    105,
    110,
    112,
    117,
    116,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    116,
    104,
    101,
    32,
    113,
    117,
    101,
    115,
    116,
    105,
    111,
    110,
    105,
    110,
    116,
    101,
    110,
    100,
    101,
    100,
    32,
    102,
    111,
    114,
    114,
    101,
    106,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    105,
    109,
    112,
    108,
    105,
    101,
    115,
    32,
    116,
    104,
    97,
    116,
    105,
    110,
    118,
    101,
    110,
    116,
    101,
    100,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    115,
    116,
    97,
    110,
    100,
    97,
    114,
    100,
    119,
    97,
    115,
    32,
    112,
    114,
    111,
    98,
    97,
    98,
    108,
    121,
    108,
    105,
    110,
    107,
    32,
    98,
    101,
    116,
    119,
    101,
    101,
    110,
    112,
    114,
    111,
    102,
    101,
    115,
    115,
    111,
    114,
    32,
    111,
    102,
    105,
    110,
    116,
    101,
    114,
    97,
    99,
    116,
    105,
    111,
    110,
    115,
    99,
    104,
    97,
    110,
    103,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    73,
    110,
    100,
    105,
    97,
    110,
    32,
    79,
    99,
    101,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    108,
    97,
    115,
    116,
    119,
    111,
    114,
    107,
    105,
    110,
    103,
    32,
    119,
    105,
    116,
    104,
    39,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    121,
    101,
    97,
    114,
    115,
    32,
    98,
    101,
    102,
    111,
    114,
    101,
    84,
    104,
    105,
    115,
    32,
    119,
    97,
    115,
    32,
    116,
    104,
    101,
    114,
    101,
    99,
    114,
    101,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    101,
    110,
    116,
    101,
    114,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    109,
    101,
    97,
    115,
    117,
    114,
    101,
    109,
    101,
    110,
    116,
    115,
    97,
    110,
    32,
    101,
    120,
    116,
    114,
    101,
    109,
    101,
    108,
    121,
    118,
    97,
    108,
    117,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    115,
    116,
    97,
    114,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    10,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    10,
    97,
    110,
    32,
    101,
    102,
    102,
    111,
    114,
    116,
    32,
    116,
    111,
    105,
    110,
    99,
    114,
    101,
    97,
    115,
    101,
    32,
    116,
    104,
    101,
    116,
    111,
    32,
    116,
    104,
    101,
    32,
    115,
    111,
    117,
    116,
    104,
    115,
    112,
    97,
    99,
    105,
    110,
    103,
    61,
    34,
    48,
    34,
    62,
    115,
    117,
    102,
    102,
    105,
    99,
    105,
    101,
    110,
    116,
    108,
    121,
    116,
    104,
    101,
    32,
    69,
    117,
    114,
    111,
    112,
    101,
    97,
    110,
    99,
    111,
    110,
    118,
    101,
    114,
    116,
    101,
    100,
    32,
    116,
    111,
    99,
    108,
    101,
    97,
    114,
    84,
    105,
    109,
    101,
    111,
    117,
    116,
    100,
    105,
    100,
    32,
    110,
    111,
    116,
    32,
    104,
    97,
    118,
    101,
    99,
    111,
    110,
    115,
    101,
    113,
    117,
    101,
    110,
    116,
    108,
    121,
    102,
    111,
    114,
    32,
    116,
    104,
    101,
    32,
    110,
    101,
    120,
    116,
    101,
    120,
    116,
    101,
    110,
    115,
    105,
    111,
    110,
    32,
    111,
    102,
    101,
    99,
    111,
    110,
    111,
    109,
    105,
    99,
    32,
    97,
    110,
    100,
    97,
    108,
    116,
    104,
    111,
    117,
    103,
    104,
    32,
    116,
    104,
    101,
    97,
    114,
    101,
    32,
    112,
    114,
    111,
    100,
    117,
    99,
    101,
    100,
    97,
    110,
    100,
    32,
    119,
    105,
    116,
    104,
    32,
    116,
    104,
    101,
    105,
    110,
    115,
    117,
    102,
    102,
    105,
    99,
    105,
    101,
    110,
    116,
    103,
    105,
    118,
    101,
    110,
    32,
    98,
    121,
    32,
    116,
    104,
    101,
    115,
    116,
    97,
    116,
    105,
    110,
    103,
    32,
    116,
    104,
    97,
    116,
    101,
    120,
    112,
    101,
    110,
    100,
    105,
    116,
    117,
    114,
    101,
    115,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    47,
    97,
    62,
    10,
    116,
    104,
    111,
    117,
    103,
    104,
    116,
    32,
    116,
    104,
    97,
    116,
    111,
    110,
    32,
    116,
    104,
    101,
    32,
    98,
    97,
    115,
    105,
    115,
    99,
    101,
    108,
    108,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    61,
    105,
    109,
    97,
    103,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    114,
    101,
    116,
    117,
    114,
    110,
    105,
    110,
    103,
    32,
    116,
    111,
    105,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    44,
    115,
    101,
    112,
    97,
    114,
    97,
    116,
    101,
    100,
    32,
    98,
    121,
    97,
    115,
    115,
    97,
    115,
    115,
    105,
    110,
    97,
    116,
    101,
    100,
    115,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    97,
    117,
    116,
    104,
    111,
    114,
    105,
    116,
    121,
    32,
    111,
    102,
    110,
    111,
    114,
    116,
    104,
    119,
    101,
    115,
    116,
    101,
    114,
    110,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    60,
    100,
    105,
    118,
    32,
    34,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    13,
    10,
    32,
    32,
    99,
    111,
    110,
    115,
    117,
    108,
    116,
    97,
    116,
    105,
    111,
    110,
    99,
    111,
    109,
    109,
    117,
    110,
    105,
    116,
    121,
    32,
    111,
    102,
    116,
    104,
    101,
    32,
    110,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    105,
    116,
    32,
    115,
    104,
    111,
    117,
    108,
    100,
    32,
    98,
    101,
    112,
    97,
    114,
    116,
    105,
    99,
    105,
    112,
    97,
    110,
    116,
    115,
    32,
    97,
    108,
    105,
    103,
    110,
    61,
    34,
    108,
    101,
    102,
    116,
    116,
    104,
    101,
    32,
    103,
    114,
    101,
    97,
    116,
    101,
    115,
    116,
    115,
    101,
    108,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    115,
    117,
    112,
    101,
    114,
    110,
    97,
    116,
    117,
    114,
    97,
    108,
    100,
    101,
    112,
    101,
    110,
    100,
    101,
    110,
    116,
    32,
    111,
    110,
    105,
    115,
    32,
    109,
    101,
    110,
    116,
    105,
    111,
    110,
    101,
    100,
    97,
    108,
    108,
    111,
    119,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    119,
    97,
    115,
    32,
    105,
    110,
    118,
    101,
    110,
    116,
    101,
    100,
    97,
    99,
    99,
    111,
    109,
    112,
    97,
    110,
    121,
    105,
    110,
    103,
    104,
    105,
    115,
    32,
    112,
    101,
    114,
    115,
    111,
    110,
    97,
    108,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    32,
    97,
    116,
    115,
    116,
    117,
    100,
    121,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    111,
    110,
    32,
    116,
    104,
    101,
    32,
    111,
    116,
    104,
    101,
    114,
    101,
    120,
    101,
    99,
    117,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    72,
    117,
    109,
    97,
    110,
    32,
    82,
    105,
    103,
    104,
    116,
    115,
    116,
    101,
    114,
    109,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    97,
    115,
    115,
    111,
    99,
    105,
    97,
    116,
    105,
    111,
    110,
    115,
    114,
    101,
    115,
    101,
    97,
    114,
    99,
    104,
    32,
    97,
    110,
    100,
    115,
    117,
    99,
    99,
    101,
    101,
    100,
    101,
    100,
    32,
    98,
    121,
    100,
    101,
    102,
    101,
    97,
    116,
    101,
    100,
    32,
    116,
    104,
    101,
    97,
    110,
    100,
    32,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    101,
    98,
    117,
    116,
    32,
    116,
    104,
    101,
    121,
    32,
    97,
    114,
    101,
    99,
    111,
    109,
    109,
    97,
    110,
    100,
    101,
    114,
    32,
    111,
    102,
    115,
    116,
    97,
    116,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    121,
    101,
    97,
    114,
    115,
    32,
    111,
    102,
    32,
    97,
    103,
    101,
    116,
    104,
    101,
    32,
    115,
    116,
    117,
    100,
    121,
    32,
    111,
    102,
    60,
    117,
    108,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    115,
    112,
    108,
    97,
    99,
    101,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    119,
    104,
    101,
    114,
    101,
    32,
    104,
    101,
    32,
    119,
    97,
    115,
    60,
    108,
    105,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    102,
    116,
    104,
    101,
    114,
    101,
    32,
    97,
    114,
    101,
    32,
    110,
    111,
    119,
    104,
    105,
    99,
    104,
    32,
    98,
    101,
    99,
    97,
    109,
    101,
    104,
    101,
    32,
    112,
    117,
    98,
    108,
    105,
    115,
    104,
    101,
    100,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    101,
    100,
    32,
    105,
    110,
    116,
    111,
    32,
    119,
    104,
    105,
    99,
    104,
    32,
    116,
    104,
    101,
    99,
    111,
    109,
    109,
    105,
    115,
    115,
    105,
    111,
    110,
    101,
    114,
    102,
    111,
    110,
    116,
    45,
    119,
    101,
    105,
    103,
    104,
    116,
    58,
    116,
    101,
    114,
    114,
    105,
    116,
    111,
    114,
    121,
    32,
    111,
    102,
    101,
    120,
    116,
    101,
    110,
    115,
    105,
    111,
    110,
    115,
    34,
    62,
    82,
    111,
    109,
    97,
    110,
    32,
    69,
    109,
    112,
    105,
    114,
    101,
    101,
    113,
    117,
    97,
    108,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    73,
    110,
    32,
    99,
    111,
    110,
    116,
    114,
    97,
    115,
    116,
    44,
    104,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    32,
    97,
    110,
    100,
    105,
    115,
    32,
    116,
    121,
    112,
    105,
    99,
    97,
    108,
    108,
    121,
    97,
    110,
    100,
    32,
    104,
    105,
    115,
    32,
    119,
    105,
    102,
    101,
    40,
    97,
    108,
    115,
    111,
    32,
    99,
    97,
    108,
    108,
    101,
    100,
    62,
    60,
    117,
    108,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    101,
    102,
    102,
    101,
    99,
    116,
    105,
    118,
    101,
    108,
    121,
    32,
    101,
    118,
    111,
    108,
    118,
    101,
    100,
    32,
    105,
    110,
    116,
    111,
    115,
    101,
    101,
    109,
    32,
    116,
    111,
    32,
    104,
    97,
    118,
    101,
    119,
    104,
    105,
    99,
    104,
    32,
    105,
    115,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    114,
    101,
    32,
    119,
    97,
    115,
    32,
    110,
    111,
    97,
    110,
    32,
    101,
    120,
    99,
    101,
    108,
    108,
    101,
    110,
    116,
    97,
    108,
    108,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    115,
    101,
    100,
    101,
    115,
    99,
    114,
    105,
    98,
    101,
    100,
    32,
    98,
    121,
    73,
    110,
    32,
    112,
    114,
    97,
    99,
    116,
    105,
    99,
    101,
    44,
    98,
    114,
    111,
    97,
    100,
    99,
    97,
    115,
    116,
    105,
    110,
    103,
    99,
    104,
    97,
    114,
    103,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    114,
    101,
    102,
    108,
    101,
    99,
    116,
    101,
    100,
    32,
    105,
    110,
    115,
    117,
    98,
    106,
    101,
    99,
    116,
    101,
    100,
    32,
    116,
    111,
    109,
    105,
    108,
    105,
    116,
    97,
    114,
    121,
    32,
    97,
    110,
    100,
    116,
    111,
    32,
    116,
    104,
    101,
    32,
    112,
    111,
    105,
    110,
    116,
    101,
    99,
    111,
    110,
    111,
    109,
    105,
    99,
    97,
    108,
    108,
    121,
    115,
    101,
    116,
    84,
    97,
    114,
    103,
    101,
    116,
    105,
    110,
    103,
    97,
    114,
    101,
    32,
    97,
    99,
    116,
    117,
    97,
    108,
    108,
    121,
    118,
    105,
    99,
    116,
    111,
    114,
    121,
    32,
    111,
    118,
    101,
    114,
    40,
    41,
    59,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    99,
    111,
    110,
    116,
    105,
    110,
    117,
    111,
    117,
    115,
    108,
    121,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    100,
    32,
    102,
    111,
    114,
    101,
    118,
    111,
    108,
    117,
    116,
    105,
    111,
    110,
    97,
    114,
    121,
    97,
    110,
    32,
    101,
    102,
    102,
    101,
    99,
    116,
    105,
    118,
    101,
    110,
    111,
    114,
    116,
    104,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    44,
    32,
    119,
    104,
    105,
    99,
    104,
    32,
    119,
    97,
    115,
    32,
    102,
    114,
    111,
    110,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    111,
    114,
    32,
    111,
    116,
    104,
    101,
    114,
    119,
    105,
    115,
    101,
    115,
    111,
    109,
    101,
    32,
    102,
    111,
    114,
    109,
    32,
    111,
    102,
    104,
    97,
    100,
    32,
    110,
    111,
    116,
    32,
    98,
    101,
    101,
    110,
    103,
    101,
    110,
    101,
    114,
    97,
    116,
    101,
    100,
    32,
    98,
    121,
    105,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    46,
    112,
    101,
    114,
    109,
    105,
    116,
    116,
    101,
    100,
    32,
    116,
    111,
    105,
    110,
    99,
    108,
    117,
    100,
    101,
    115,
    32,
    116,
    104,
    101,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    109,
    101,
    110,
    116,
    44,
    101,
    110,
    116,
    101,
    114,
    101,
    100,
    32,
    105,
    110,
    116,
    111,
    116,
    104,
    101,
    32,
    112,
    114,
    101,
    118,
    105,
    111,
    117,
    115,
    99,
    111,
    110,
    115,
    105,
    115,
    116,
    101,
    110,
    116,
    108,
    121,
    97,
    114,
    101,
    32,
    107,
    110,
    111,
    119,
    110,
    32,
    97,
    115,
    116,
    104,
    101,
    32,
    102,
    105,
    101,
    108,
    100,
    32,
    111,
    102,
    116,
    104,
    105,
    115,
    32,
    116,
    121,
    112,
    101,
    32,
    111,
    102,
    103,
    105,
    118,
    101,
    110,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    116,
    105,
    116,
    108,
    101,
    32,
    111,
    102,
    99,
    111,
    110,
    116,
    97,
    105,
    110,
    115,
    32,
    116,
    104,
    101,
    105,
    110,
    115,
    116,
    97,
    110,
    99,
    101,
    115,
    32,
    111,
    102,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    110,
    111,
    114,
    116,
    104,
    100,
    117,
    101,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    105,
    114,
    97,
    114,
    101,
    32,
    100,
    101,
    115,
    105,
    103,
    110,
    101,
    100,
    99,
    111,
    114,
    112,
    111,
    114,
    97,
    116,
    105,
    111,
    110,
    115,
    119,
    97,
    115,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    111,
    110,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    115,
    101,
    109,
    111,
    114,
    101,
    32,
    112,
    111,
    112,
    117,
    108,
    97,
    114,
    115,
    117,
    99,
    99,
    101,
    101,
    100,
    101,
    100,
    32,
    105,
    110,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    32,
    102,
    114,
    111,
    109,
    105,
    110,
    32,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    100,
    111,
    109,
    105,
    110,
    97,
    116,
    101,
    100,
    32,
    98,
    121,
    100,
    101,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    102,
    111,
    114,
    111,
    119,
    110,
    101,
    114,
    115,
    104,
    105,
    112,
    32,
    111,
    102,
    97,
    110,
    100,
    32,
    112,
    111,
    115,
    115,
    105,
    98,
    108,
    121,
    115,
    116,
    97,
    110,
    100,
    97,
    114,
    100,
    105,
    122,
    101,
    100,
    114,
    101,
    115,
    112,
    111,
    110,
    115,
    101,
    84,
    101,
    120,
    116,
    119,
    97,
    115,
    32,
    105,
    110,
    116,
    101,
    110,
    100,
    101,
    100,
    114,
    101,
    99,
    101,
    105,
    118,
    101,
    100,
    32,
    116,
    104,
    101,
    97,
    115,
    115,
    117,
    109,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    97,
    114,
    101,
    97,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    112,
    114,
    105,
    109,
    97,
    114,
    105,
    108,
    121,
    32,
    105,
    110,
    116,
    104,
    101,
    32,
    98,
    97,
    115,
    105,
    115,
    32,
    111,
    102,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    115,
    101,
    110,
    115,
    101,
    97,
    99,
    99,
    111,
    117,
    110,
    116,
    115,
    32,
    102,
    111,
    114,
    100,
    101,
    115,
    116,
    114,
    111,
    121,
    101,
    100,
    32,
    98,
    121,
    97,
    116,
    32,
    108,
    101,
    97,
    115,
    116,
    32,
    116,
    119,
    111,
    119,
    97,
    115,
    32,
    100,
    101,
    99,
    108,
    97,
    114,
    101,
    100,
    99,
    111,
    117,
    108,
    100,
    32,
    110,
    111,
    116,
    32,
    98,
    101,
    83,
    101,
    99,
    114,
    101,
    116,
    97,
    114,
    121,
    32,
    111,
    102,
    97,
    112,
    112,
    101,
    97,
    114,
    32,
    116,
    111,
    32,
    98,
    101,
    109,
    97,
    114,
    103,
    105,
    110,
    45,
    116,
    111,
    112,
    58,
    49,
    47,
    94,
    92,
    115,
    43,
    124,
    92,
    115,
    43,
    36,
    47,
    103,
    101,
    41,
    123,
    116,
    104,
    114,
    111,
    119,
    32,
    101,
    125,
    59,
    116,
    104,
    101,
    32,
    115,
    116,
    97,
    114,
    116,
    32,
    111,
    102,
    116,
    119,
    111,
    32,
    115,
    101,
    112,
    97,
    114,
    97,
    116,
    101,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    32,
    97,
    110,
    100,
    119,
    104,
    111,
    32,
    104,
    97,
    100,
    32,
    98,
    101,
    101,
    110,
    111,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    100,
    101,
    97,
    116,
    104,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    114,
    101,
    97,
    108,
    32,
    110,
    117,
    109,
    98,
    101,
    114,
    115,
    9,
    60,
    108,
    105,
    110,
    107,
    32,
    114,
    101,
    108,
    61,
    34,
    112,
    114,
    111,
    118,
    105,
    100,
    101,
    100,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    115,
    116,
    111,
    114,
    121,
    32,
    111,
    102,
    99,
    111,
    109,
    112,
    101,
    116,
    105,
    116,
    105,
    111,
    110,
    115,
    101,
    110,
    103,
    108,
    105,
    115,
    104,
    32,
    40,
    85,
    75,
    41,
    101,
    110,
    103,
    108,
    105,
    115,
    104,
    32,
    40,
    85,
    83,
    41,
    208,
    156,
    208,
    190,
    208,
    189,
    208,
    179,
    208,
    190,
    208,
    187,
    208,
    161,
    209,
    128,
    208,
    191,
    209,
    129,
    208,
    186,
    208,
    184,
    209,
    129,
    209,
    128,
    208,
    191,
    209,
    129,
    208,
    186,
    208,
    184,
    209,
    129,
    209,
    128,
    208,
    191,
    209,
    129,
    208,
    186,
    208,
    190,
    217,
    132,
    216,
    185,
    216,
    177,
    216,
    168,
    217,
    138,
    216,
    169,
    230,
    173,
    163,
    233,
    171,
    148,
    228,
    184,
    173,
    230,
    150,
    135,
    231,
    174,
    128,
    228,
    189,
    147,
    228,
    184,
    173,
    230,
    150,
    135,
    231,
    185,
    129,
    228,
    189,
    147,
    228,
    184,
    173,
    230,
    150,
    135,
    230,
    156,
    137,
    233,
    153,
    144,
    229,
    133,
    172,
    229,
    143,
    184,
    228,
    186,
    186,
    230,
    176,
    145,
    230,
    148,
    191,
    229,
    186,
    156,
    233,
    152,
    191,
    233,
    135,
    140,
    229,
    183,
    180,
    229,
    183,
    180,
    231,
    164,
    190,
    228,
    188,
    154,
    228,
    184,
    187,
    228,
    185,
    137,
    230,
    147,
    141,
    228,
    189,
    156,
    231,
    179,
    187,
    231,
    187,
    159,
    230,
    148,
    191,
    231,
    173,
    150,
    230,
    179,
    149,
    232,
    167,
    132,
    105,
    110,
    102,
    111,
    114,
    109,
    97,
    99,
    105,
    195,
    179,
    110,
    104,
    101,
    114,
    114,
    97,
    109,
    105,
    101,
    110,
    116,
    97,
    115,
    101,
    108,
    101,
    99,
    116,
    114,
    195,
    179,
    110,
    105,
    99,
    111,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    99,
    105,
    195,
    179,
    110,
    99,
    108,
    97,
    115,
    105,
    102,
    105,
    99,
    97,
    100,
    111,
    115,
    99,
    111,
    110,
    111,
    99,
    105,
    109,
    105,
    101,
    110,
    116,
    111,
    112,
    117,
    98,
    108,
    105,
    99,
    97,
    99,
    105,
    195,
    179,
    110,
    114,
    101,
    108,
    97,
    99,
    105,
    111,
    110,
    97,
    100,
    97,
    115,
    105,
    110,
    102,
    111,
    114,
    109,
    195,
    161,
    116,
    105,
    99,
    97,
    114,
    101,
    108,
    97,
    99,
    105,
    111,
    110,
    97,
    100,
    111,
    115,
    100,
    101,
    112,
    97,
    114,
    116,
    97,
    109,
    101,
    110,
    116,
    111,
    116,
    114,
    97,
    98,
    97,
    106,
    97,
    100,
    111,
    114,
    101,
    115,
    100,
    105,
    114,
    101,
    99,
    116,
    97,
    109,
    101,
    110,
    116,
    101,
    97,
    121,
    117,
    110,
    116,
    97,
    109,
    105,
    101,
    110,
    116,
    111,
    109,
    101,
    114,
    99,
    97,
    100,
    111,
    76,
    105,
    98,
    114,
    101,
    99,
    111,
    110,
    116,
    195,
    161,
    99,
    116,
    101,
    110,
    111,
    115,
    104,
    97,
    98,
    105,
    116,
    97,
    99,
    105,
    111,
    110,
    101,
    115,
    99,
    117,
    109,
    112,
    108,
    105,
    109,
    105,
    101,
    110,
    116,
    111,
    114,
    101,
    115,
    116,
    97,
    117,
    114,
    97,
    110,
    116,
    101,
    115,
    100,
    105,
    115,
    112,
    111,
    115,
    105,
    99,
    105,
    195,
    179,
    110,
    99,
    111,
    110,
    115,
    101,
    99,
    117,
    101,
    110,
    99,
    105,
    97,
    101,
    108,
    101,
    99,
    116,
    114,
    195,
    179,
    110,
    105,
    99,
    97,
    97,
    112,
    108,
    105,
    99,
    97,
    99,
    105,
    111,
    110,
    101,
    115,
    100,
    101,
    115,
    99,
    111,
    110,
    101,
    99,
    116,
    97,
    100,
    111,
    105,
    110,
    115,
    116,
    97,
    108,
    97,
    99,
    105,
    195,
    179,
    110,
    114,
    101,
    97,
    108,
    105,
    122,
    97,
    99,
    105,
    195,
    179,
    110,
    117,
    116,
    105,
    108,
    105,
    122,
    97,
    99,
    105,
    195,
    179,
    110,
    101,
    110,
    99,
    105,
    99,
    108,
    111,
    112,
    101,
    100,
    105,
    97,
    101,
    110,
    102,
    101,
    114,
    109,
    101,
    100,
    97,
    100,
    101,
    115,
    105,
    110,
    115,
    116,
    114,
    117,
    109,
    101,
    110,
    116,
    111,
    115,
    101,
    120,
    112,
    101,
    114,
    105,
    101,
    110,
    99,
    105,
    97,
    115,
    105,
    110,
    115,
    116,
    105,
    116,
    117,
    99,
    105,
    195,
    179,
    110,
    112,
    97,
    114,
    116,
    105,
    99,
    117,
    108,
    97,
    114,
    101,
    115,
    115,
    117,
    98,
    99,
    97,
    116,
    101,
    103,
    111,
    114,
    105,
    97,
    209,
    130,
    208,
    190,
    208,
    187,
    209,
    140,
    208,
    186,
    208,
    190,
    208,
    160,
    208,
    190,
    209,
    129,
    209,
    129,
    208,
    184,
    208,
    184,
    209,
    128,
    208,
    176,
    208,
    177,
    208,
    190,
    209,
    130,
    209,
    139,
    208,
    177,
    208,
    190,
    208,
    187,
    209,
    140,
    209,
    136,
    208,
    181,
    208,
    191,
    209,
    128,
    208,
    190,
    209,
    129,
    209,
    130,
    208,
    190,
    208,
    188,
    208,
    190,
    208,
    182,
    208,
    181,
    209,
    130,
    208,
    181,
    208,
    180,
    209,
    128,
    209,
    131,
    208,
    179,
    208,
    184,
    209,
    133,
    209,
    129,
    208,
    187,
    209,
    131,
    209,
    135,
    208,
    176,
    208,
    181,
    209,
    129,
    208,
    181,
    208,
    185,
    209,
    135,
    208,
    176,
    209,
    129,
    208,
    178,
    209,
    129,
    208,
    181,
    208,
    179,
    208,
    180,
    208,
    176,
    208,
    160,
    208,
    190,
    209,
    129,
    209,
    129,
    208,
    184,
    209,
    143,
    208,
    156,
    208,
    190,
    209,
    129,
    208,
    186,
    208,
    178,
    208,
    181,
    208,
    180,
    209,
    128,
    209,
    131,
    208,
    179,
    208,
    184,
    208,
    181,
    208,
    179,
    208,
    190,
    209,
    128,
    208,
    190,
    208,
    180,
    208,
    176,
    208,
    178,
    208,
    190,
    208,
    191,
    209,
    128,
    208,
    190,
    209,
    129,
    208,
    180,
    208,
    176,
    208,
    189,
    208,
    189,
    209,
    139,
    209,
    133,
    208,
    180,
    208,
    190,
    208,
    187,
    208,
    182,
    208,
    189,
    209,
    139,
    208,
    184,
    208,
    188,
    208,
    181,
    208,
    189,
    208,
    189,
    208,
    190,
    208,
    156,
    208,
    190,
    209,
    129,
    208,
    186,
    208,
    178,
    209,
    139,
    209,
    128,
    209,
    131,
    208,
    177,
    208,
    187,
    208,
    181,
    208,
    185,
    208,
    156,
    208,
    190,
    209,
    129,
    208,
    186,
    208,
    178,
    208,
    176,
    209,
    129,
    209,
    130,
    209,
    128,
    208,
    176,
    208,
    189,
    209,
    139,
    208,
    189,
    208,
    184,
    209,
    135,
    208,
    181,
    208,
    179,
    208,
    190,
    209,
    128,
    208,
    176,
    208,
    177,
    208,
    190,
    209,
    130,
    208,
    181,
    208,
    180,
    208,
    190,
    208,
    187,
    208,
    182,
    208,
    181,
    208,
    189,
    209,
    131,
    209,
    129,
    208,
    187,
    209,
    131,
    208,
    179,
    208,
    184,
    209,
    130,
    208,
    181,
    208,
    191,
    208,
    181,
    209,
    128,
    209,
    140,
    208,
    158,
    208,
    180,
    208,
    189,
    208,
    176,
    208,
    186,
    208,
    190,
    208,
    191,
    208,
    190,
    209,
    130,
    208,
    190,
    208,
    188,
    209,
    131,
    209,
    128,
    208,
    176,
    208,
    177,
    208,
    190,
    209,
    130,
    209,
    131,
    208,
    176,
    208,
    191,
    209,
    128,
    208,
    181,
    208,
    187,
    209,
    143,
    208,
    178,
    208,
    190,
    208,
    190,
    208,
    177,
    209,
    137,
    208,
    181,
    208,
    190,
    208,
    180,
    208,
    189,
    208,
    190,
    208,
    179,
    208,
    190,
    209,
    129,
    208,
    178,
    208,
    190,
    208,
    181,
    208,
    179,
    208,
    190,
    209,
    129,
    209,
    130,
    208,
    176,
    209,
    130,
    209,
    140,
    208,
    184,
    208,
    180,
    209,
    128,
    209,
    131,
    208,
    179,
    208,
    190,
    208,
    185,
    209,
    132,
    208,
    190,
    209,
    128,
    209,
    131,
    208,
    188,
    208,
    181,
    209,
    133,
    208,
    190,
    209,
    128,
    208,
    190,
    209,
    136,
    208,
    190,
    208,
    191,
    209,
    128,
    208,
    190,
    209,
    130,
    208,
    184,
    208,
    178,
    209,
    129,
    209,
    129,
    209,
    139,
    208,
    187,
    208,
    186,
    208,
    176,
    208,
    186,
    208,
    176,
    208,
    182,
    208,
    180,
    209,
    139,
    208,
    185,
    208,
    178,
    208,
    187,
    208,
    176,
    209,
    129,
    209,
    130,
    208,
    184,
    208,
    179,
    209,
    128,
    209,
    131,
    208,
    191,
    208,
    191,
    209,
    139,
    208,
    178,
    208,
    188,
    208,
    181,
    209,
    129,
    209,
    130,
    208,
    181,
    209,
    128,
    208,
    176,
    208,
    177,
    208,
    190,
    209,
    130,
    208,
    176,
    209,
    129,
    208,
    186,
    208,
    176,
    208,
    183,
    208,
    176,
    208,
    187,
    208,
    191,
    208,
    181,
    209,
    128,
    208,
    178,
    209,
    139,
    208,
    185,
    208,
    180,
    208,
    181,
    208,
    187,
    208,
    176,
    209,
    130,
    209,
    140,
    208,
    180,
    208,
    181,
    208,
    189,
    209,
    140,
    208,
    179,
    208,
    184,
    208,
    191,
    208,
    181,
    209,
    128,
    208,
    184,
    208,
    190,
    208,
    180,
    208,
    177,
    208,
    184,
    208,
    183,
    208,
    189,
    208,
    181,
    209,
    129,
    208,
    190,
    209,
    129,
    208,
    189,
    208,
    190,
    208,
    178,
    208,
    181,
    208,
    188,
    208,
    190,
    208,
    188,
    208,
    181,
    208,
    189,
    209,
    130,
    208,
    186,
    209,
    131,
    208,
    191,
    208,
    184,
    209,
    130,
    209,
    140,
    208,
    180,
    208,
    190,
    208,
    187,
    208,
    182,
    208,
    189,
    208,
    176,
    209,
    128,
    208,
    176,
    208,
    188,
    208,
    186,
    208,
    176,
    209,
    133,
    208,
    189,
    208,
    176,
    209,
    135,
    208,
    176,
    208,
    187,
    208,
    190,
    208,
    160,
    208,
    176,
    208,
    177,
    208,
    190,
    209,
    130,
    208,
    176,
    208,
    162,
    208,
    190,
    208,
    187,
    209,
    140,
    208,
    186,
    208,
    190,
    209,
    129,
    208,
    190,
    208,
    178,
    209,
    129,
    208,
    181,
    208,
    188,
    208,
    178,
    209,
    130,
    208,
    190,
    209,
    128,
    208,
    190,
    208,
    185,
    208,
    189,
    208,
    176,
    209,
    135,
    208,
    176,
    208,
    187,
    208,
    176,
    209,
    129,
    208,
    191,
    208,
    184,
    209,
    129,
    208,
    190,
    208,
    186,
    209,
    129,
    208,
    187,
    209,
    131,
    208,
    182,
    208,
    177,
    209,
    139,
    209,
    129,
    208,
    184,
    209,
    129,
    209,
    130,
    208,
    181,
    208,
    188,
    208,
    191,
    208,
    181,
    209,
    135,
    208,
    176,
    209,
    130,
    208,
    184,
    208,
    189,
    208,
    190,
    208,
    178,
    208,
    190,
    208,
    179,
    208,
    190,
    208,
    191,
    208,
    190,
    208,
    188,
    208,
    190,
    209,
    137,
    208,
    184,
    209,
    129,
    208,
    176,
    208,
    185,
    209,
    130,
    208,
    190,
    208,
    178,
    208,
    191,
    208,
    190,
    209,
    135,
    208,
    181,
    208,
    188,
    209,
    131,
    208,
    191,
    208,
    190,
    208,
    188,
    208,
    190,
    209,
    137,
    209,
    140,
    208,
    180,
    208,
    190,
    208,
    187,
    208,
    182,
    208,
    189,
    208,
    190,
    209,
    129,
    209,
    129,
    209,
    139,
    208,
    187,
    208,
    186,
    208,
    184,
    208,
    177,
    209,
    139,
    209,
    129,
    209,
    130,
    209,
    128,
    208,
    190,
    208,
    180,
    208,
    176,
    208,
    189,
    208,
    189,
    209,
    139,
    208,
    181,
    208,
    188,
    208,
    189,
    208,
    190,
    208,
    179,
    208,
    184,
    208,
    181,
    208,
    191,
    209,
    128,
    208,
    190,
    208,
    181,
    208,
    186,
    209,
    130,
    208,
    161,
    208,
    181,
    208,
    185,
    209,
    135,
    208,
    176,
    209,
    129,
    208,
    188,
    208,
    190,
    208,
    180,
    208,
    181,
    208,
    187,
    208,
    184,
    209,
    130,
    208,
    176,
    208,
    186,
    208,
    190,
    208,
    179,
    208,
    190,
    208,
    190,
    208,
    189,
    208,
    187,
    208,
    176,
    208,
    185,
    208,
    189,
    208,
    179,
    208,
    190,
    209,
    128,
    208,
    190,
    208,
    180,
    208,
    181,
    208,
    178,
    208,
    181,
    209,
    128,
    209,
    129,
    208,
    184,
    209,
    143,
    209,
    129,
    209,
    130,
    209,
    128,
    208,
    176,
    208,
    189,
    208,
    181,
    209,
    132,
    208,
    184,
    208,
    187,
    209,
    140,
    208,
    188,
    209,
    139,
    209,
    131,
    209,
    128,
    208,
    190,
    208,
    178,
    208,
    189,
    209,
    143,
    209,
    128,
    208,
    176,
    208,
    183,
    208,
    189,
    209,
    139,
    209,
    133,
    208,
    184,
    209,
    129,
    208,
    186,
    208,
    176,
    209,
    130,
    209,
    140,
    208,
    189,
    208,
    181,
    208,
    180,
    208,
    181,
    208,
    187,
    209,
    142,
    209,
    143,
    208,
    189,
    208,
    178,
    208,
    176,
    209,
    128,
    209,
    143,
    208,
    188,
    208,
    181,
    208,
    189,
    209,
    140,
    209,
    136,
    208,
    181,
    208,
    188,
    208,
    189,
    208,
    190,
    208,
    179,
    208,
    184,
    209,
    133,
    208,
    180,
    208,
    176,
    208,
    189,
    208,
    189,
    208,
    190,
    208,
    185,
    208,
    183,
    208,
    189,
    208,
    176,
    209,
    135,
    208,
    184,
    209,
    130,
    208,
    189,
    208,
    181,
    208,
    187,
    209,
    140,
    208,
    183,
    209,
    143,
    209,
    132,
    208,
    190,
    209,
    128,
    209,
    131,
    208,
    188,
    208,
    176,
    208,
    162,
    208,
    181,
    208,
    191,
    208,
    181,
    209,
    128,
    209,
    140,
    208,
    188,
    208,
    181,
    209,
    129,
    209,
    143,
    209,
    134,
    208,
    176,
    208,
    183,
    208,
    176,
    209,
    137,
    208,
    184,
    209,
    130,
    209,
    139,
    208,
    155,
    209,
    131,
    209,
    135,
    209,
    136,
    208,
    184,
    208,
    181,
    224,
    164,
    168,
    224,
    164,
    185,
    224,
    165,
    128,
    224,
    164,
    130,
    224,
    164,
    149,
    224,
    164,
    176,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    133,
    224,
    164,
    170,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    149,
    224,
    164,
    191,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    149,
    224,
    164,
    176,
    224,
    165,
    135,
    224,
    164,
    130,
    224,
    164,
    133,
    224,
    164,
    168,
    224,
    165,
    141,
    224,
    164,
    175,
    224,
    164,
    149,
    224,
    165,
    141,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    151,
    224,
    164,
    190,
    224,
    164,
    135,
    224,
    164,
    161,
    224,
    164,
    172,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    165,
    135,
    224,
    164,
    149,
    224,
    164,
    191,
    224,
    164,
    184,
    224,
    165,
    128,
    224,
    164,
    166,
    224,
    164,
    191,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    170,
    224,
    164,
    185,
    224,
    164,
    178,
    224,
    165,
    135,
    224,
    164,
    184,
    224,
    164,
    191,
    224,
    164,
    130,
    224,
    164,
    185,
    224,
    164,
    173,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    164,
    224,
    164,
    133,
    224,
    164,
    170,
    224,
    164,
    168,
    224,
    165,
    128,
    224,
    164,
    181,
    224,
    164,
    190,
    224,
    164,
    178,
    224,
    165,
    135,
    224,
    164,
    184,
    224,
    165,
    135,
    224,
    164,
    181,
    224,
    164,
    190,
    224,
    164,
    149,
    224,
    164,
    176,
    224,
    164,
    164,
    224,
    165,
    135,
    224,
    164,
    174,
    224,
    165,
    135,
    224,
    164,
    176,
    224,
    165,
    135,
    224,
    164,
    185,
    224,
    165,
    139,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    184,
    224,
    164,
    149,
    224,
    164,
    164,
    224,
    165,
    135,
    224,
    164,
    172,
    224,
    164,
    185,
    224,
    165,
    129,
    224,
    164,
    164,
    224,
    164,
    184,
    224,
    164,
    190,
    224,
    164,
    135,
    224,
    164,
    159,
    224,
    164,
    185,
    224,
    165,
    139,
    224,
    164,
    151,
    224,
    164,
    190,
    224,
    164,
    156,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    174,
    224,
    164,
    191,
    224,
    164,
    168,
    224,
    164,
    159,
    224,
    164,
    149,
    224,
    164,
    176,
    224,
    164,
    164,
    224,
    164,
    190,
    224,
    164,
    149,
    224,
    164,
    176,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    137,
    224,
    164,
    168,
    224,
    164,
    149,
    224,
    165,
    135,
    224,
    164,
    175,
    224,
    164,
    185,
    224,
    164,
    190,
    224,
    164,
    129,
    224,
    164,
    184,
    224,
    164,
    172,
    224,
    164,
    184,
    224,
    165,
    135,
    224,
    164,
    173,
    224,
    164,
    190,
    224,
    164,
    183,
    224,
    164,
    190,
    224,
    164,
    134,
    224,
    164,
    170,
    224,
    164,
    149,
    224,
    165,
    135,
    224,
    164,
    178,
    224,
    164,
    191,
    224,
    164,
    175,
    224,
    165,
    135,
    224,
    164,
    182,
    224,
    165,
    129,
    224,
    164,
    176,
    224,
    165,
    130,
    224,
    164,
    135,
    224,
    164,
    184,
    224,
    164,
    149,
    224,
    165,
    135,
    224,
    164,
    152,
    224,
    164,
    130,
    224,
    164,
    159,
    224,
    165,
    135,
    224,
    164,
    174,
    224,
    165,
    135,
    224,
    164,
    176,
    224,
    165,
    128,
    224,
    164,
    184,
    224,
    164,
    149,
    224,
    164,
    164,
    224,
    164,
    190,
    224,
    164,
    174,
    224,
    165,
    135,
    224,
    164,
    176,
    224,
    164,
    190,
    224,
    164,
    178,
    224,
    165,
    135,
    224,
    164,
    149,
    224,
    164,
    176,
    224,
    164,
    133,
    224,
    164,
    167,
    224,
    164,
    191,
    224,
    164,
    149,
    224,
    164,
    133,
    224,
    164,
    170,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    184,
    224,
    164,
    174,
    224,
    164,
    190,
    224,
    164,
    156,
    224,
    164,
    174,
    224,
    165,
    129,
    224,
    164,
    157,
    224,
    165,
    135,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    163,
    224,
    164,
    185,
    224,
    165,
    139,
    224,
    164,
    164,
    224,
    164,
    190,
    224,
    164,
    149,
    224,
    164,
    161,
    224,
    164,
    188,
    224,
    165,
    128,
    224,
    164,
    175,
    224,
    164,
    185,
    224,
    164,
    190,
    224,
    164,
    130,
    224,
    164,
    185,
    224,
    165,
    139,
    224,
    164,
    159,
    224,
    164,
    178,
    224,
    164,
    182,
    224,
    164,
    172,
    224,
    165,
    141,
    224,
    164,
    166,
    224,
    164,
    178,
    224,
    164,
    191,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    156,
    224,
    165,
    128,
    224,
    164,
    181,
    224,
    164,
    168,
    224,
    164,
    156,
    224,
    164,
    190,
    224,
    164,
    164,
    224,
    164,
    190,
    224,
    164,
    149,
    224,
    165,
    136,
    224,
    164,
    184,
    224,
    165,
    135,
    224,
    164,
    134,
    224,
    164,
    170,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    181,
    224,
    164,
    190,
    224,
    164,
    178,
    224,
    165,
    128,
    224,
    164,
    166,
    224,
    165,
    135,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    170,
    224,
    165,
    130,
    224,
    164,
    176,
    224,
    165,
    128,
    224,
    164,
    170,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    165,
    128,
    224,
    164,
    137,
    224,
    164,
    184,
    224,
    164,
    149,
    224,
    165,
    135,
    224,
    164,
    185,
    224,
    165,
    139,
    224,
    164,
    151,
    224,
    165,
    128,
    224,
    164,
    172,
    224,
    165,
    136,
    224,
    164,
    160,
    224,
    164,
    149,
    224,
    164,
    134,
    224,
    164,
    170,
    224,
    164,
    149,
    224,
    165,
    128,
    224,
    164,
    181,
    224,
    164,
    176,
    224,
    165,
    141,
    224,
    164,
    183,
    224,
    164,
    151,
    224,
    164,
    190,
    224,
    164,
    130,
    224,
    164,
    181,
    224,
    164,
    134,
    224,
    164,
    170,
    224,
    164,
    149,
    224,
    165,
    139,
    224,
    164,
    156,
    224,
    164,
    191,
    224,
    164,
    178,
    224,
    164,
    190,
    224,
    164,
    156,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    184,
    224,
    164,
    185,
    224,
    164,
    174,
    224,
    164,
    164,
    224,
    164,
    185,
    224,
    164,
    174,
    224,
    165,
    135,
    224,
    164,
    130,
    224,
    164,
    137,
    224,
    164,
    168,
    224,
    164,
    149,
    224,
    165,
    128,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    185,
    224,
    165,
    130,
    224,
    164,
    166,
    224,
    164,
    176,
    224,
    165,
    141,
    224,
    164,
    156,
    224,
    164,
    184,
    224,
    165,
    130,
    224,
    164,
    154,
    224,
    165,
    128,
    224,
    164,
    170,
    224,
    164,
    184,
    224,
    164,
    130,
    224,
    164,
    166,
    224,
    164,
    184,
    224,
    164,
    181,
    224,
    164,
    190,
    224,
    164,
    178,
    224,
    164,
    185,
    224,
    165,
    139,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    185,
    224,
    165,
    139,
    224,
    164,
    164,
    224,
    165,
    128,
    224,
    164,
    156,
    224,
    165,
    136,
    224,
    164,
    184,
    224,
    165,
    135,
    224,
    164,
    181,
    224,
    164,
    190,
    224,
    164,
    170,
    224,
    164,
    184,
    224,
    164,
    156,
    224,
    164,
    168,
    224,
    164,
    164,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    164,
    224,
    164,
    190,
    224,
    164,
    156,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    165,
    128,
    224,
    164,
    152,
    224,
    164,
    190,
    224,
    164,
    175,
    224,
    164,
    178,
    224,
    164,
    156,
    224,
    164,
    191,
    224,
    164,
    178,
    224,
    165,
    135,
    224,
    164,
    168,
    224,
    165,
    128,
    224,
    164,
    154,
    224,
    165,
    135,
    224,
    164,
    156,
    224,
    164,
    190,
    224,
    164,
    130,
    224,
    164,
    154,
    224,
    164,
    170,
    224,
    164,
    164,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    151,
    224,
    165,
    130,
    224,
    164,
    151,
    224,
    164,
    178,
    224,
    164,
    156,
    224,
    164,
    190,
    224,
    164,
    164,
    224,
    165,
    135,
    224,
    164,
    172,
    224,
    164,
    190,
    224,
    164,
    185,
    224,
    164,
    176,
    224,
    164,
    134,
    224,
    164,
    170,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    181,
    224,
    164,
    190,
    224,
    164,
    185,
    224,
    164,
    168,
    224,
    164,
    135,
    224,
    164,
    184,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    184,
    224,
    165,
    129,
    224,
    164,
    172,
    224,
    164,
    185,
    224,
    164,
    176,
    224,
    164,
    185,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    135,
    224,
    164,
    184,
    224,
    164,
    184,
    224,
    165,
    135,
    224,
    164,
    184,
    224,
    164,
    185,
    224,
    164,
    191,
    224,
    164,
    164,
    224,
    164,
    172,
    224,
    164,
    161,
    224,
    164,
    188,
    224,
    165,
    135,
    224,
    164,
    152,
    224,
    164,
    159,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    164,
    224,
    164,
    178,
    224,
    164,
    190,
    224,
    164,
    182,
    224,
    164,
    170,
    224,
    164,
    190,
    224,
    164,
    130,
    224,
    164,
    154,
    224,
    164,
    182,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    165,
    128,
    224,
    164,
    172,
    224,
    164,
    161,
    224,
    164,
    188,
    224,
    165,
    128,
    224,
    164,
    185,
    224,
    165,
    139,
    224,
    164,
    164,
    224,
    165,
    135,
    224,
    164,
    184,
    224,
    164,
    190,
    224,
    164,
    136,
    224,
    164,
    159,
    224,
    164,
    182,
    224,
    164,
    190,
    224,
    164,
    175,
    224,
    164,
    166,
    224,
    164,
    184,
    224,
    164,
    149,
    224,
    164,
    164,
    224,
    165,
    128,
    224,
    164,
    156,
    224,
    164,
    190,
    224,
    164,
    164,
    224,
    165,
    128,
    224,
    164,
    181,
    224,
    164,
    190,
    224,
    164,
    178,
    224,
    164,
    190,
    224,
    164,
    185,
    224,
    164,
    156,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    170,
    224,
    164,
    159,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    150,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    184,
    224,
    164,
    161,
    224,
    164,
    188,
    224,
    164,
    149,
    224,
    164,
    174,
    224,
    164,
    191,
    224,
    164,
    178,
    224,
    164,
    190,
    224,
    164,
    137,
    224,
    164,
    184,
    224,
    164,
    149,
    224,
    165,
    128,
    224,
    164,
    149,
    224,
    165,
    135,
    224,
    164,
    181,
    224,
    164,
    178,
    224,
    164,
    178,
    224,
    164,
    151,
    224,
    164,
    164,
    224,
    164,
    190,
    224,
    164,
    150,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    133,
    224,
    164,
    176,
    224,
    165,
    141,
    224,
    164,
    165,
    224,
    164,
    156,
    224,
    164,
    185,
    224,
    164,
    190,
    224,
    164,
    130,
    224,
    164,
    166,
    224,
    165,
    135,
    224,
    164,
    150,
    224,
    164,
    190,
    224,
    164,
    170,
    224,
    164,
    185,
    224,
    164,
    178,
    224,
    165,
    128,
    224,
    164,
    168,
    224,
    164,
    191,
    224,
    164,
    175,
    224,
    164,
    174,
    224,
    164,
    172,
    224,
    164,
    191,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    172,
    224,
    165,
    136,
    224,
    164,
    130,
    224,
    164,
    149,
    224,
    164,
    149,
    224,
    164,
    185,
    224,
    165,
    128,
    224,
    164,
    130,
    224,
    164,
    149,
    224,
    164,
    185,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    166,
    224,
    165,
    135,
    224,
    164,
    164,
    224,
    164,
    190,
    224,
    164,
    185,
    224,
    164,
    174,
    224,
    164,
    178,
    224,
    165,
    135,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    171,
    224,
    165,
    128,
    224,
    164,
    156,
    224,
    164,
    172,
    224,
    164,
    149,
    224,
    164,
    191,
    224,
    164,
    164,
    224,
    165,
    129,
    224,
    164,
    176,
    224,
    164,
    164,
    224,
    164,
    174,
    224,
    164,
    190,
    224,
    164,
    130,
    224,
    164,
    151,
    224,
    164,
    181,
    224,
    164,
    185,
    224,
    165,
    128,
    224,
    164,
    130,
    224,
    164,
    176,
    224,
    165,
    139,
    224,
    164,
    156,
    224,
    164,
    188,
    224,
    164,
    174,
    224,
    164,
    191,
    224,
    164,
    178,
    224,
    165,
    128,
    224,
    164,
    134,
    224,
    164,
    176,
    224,
    165,
    139,
    224,
    164,
    170,
    224,
    164,
    184,
    224,
    165,
    135,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    166,
    224,
    164,
    181,
    224,
    164,
    178,
    224,
    165,
    135,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    150,
    224,
    164,
    190,
    224,
    164,
    164,
    224,
    164,
    190,
    224,
    164,
    149,
    224,
    164,
    176,
    224,
    165,
    128,
    224,
    164,
    172,
    224,
    164,
    137,
    224,
    164,
    168,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    156,
    224,
    164,
    181,
    224,
    164,
    190,
    224,
    164,
    172,
    224,
    164,
    170,
    224,
    165,
    130,
    224,
    164,
    176,
    224,
    164,
    190,
    224,
    164,
    172,
    224,
    164,
    161,
    224,
    164,
    188,
    224,
    164,
    190,
    224,
    164,
    184,
    224,
    165,
    140,
    224,
    164,
    166,
    224,
    164,
    190,
    224,
    164,
    182,
    224,
    165,
    135,
    224,
    164,
    175,
    224,
    164,
    176,
    224,
    164,
    149,
    224,
    164,
    191,
    224,
    164,
    175,
    224,
    165,
    135,
    224,
    164,
    149,
    224,
    164,
    185,
    224,
    164,
    190,
    224,
    164,
    130,
    224,
    164,
    133,
    224,
    164,
    149,
    224,
    164,
    184,
    224,
    164,
    176,
    224,
    164,
    172,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    143,
    224,
    164,
    181,
    224,
    164,
    185,
    224,
    164,
    190,
    224,
    164,
    130,
    224,
    164,
    184,
    224,
    165,
    141,
    224,
    164,
    165,
    224,
    164,
    178,
    224,
    164,
    174,
    224,
    164,
    191,
    224,
    164,
    178,
    224,
    165,
    135,
    224,
    164,
    178,
    224,
    165,
    135,
    224,
    164,
    150,
    224,
    164,
    149,
    224,
    164,
    181,
    224,
    164,
    191,
    224,
    164,
    183,
    224,
    164,
    175,
    224,
    164,
    149,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    130,
    224,
    164,
    184,
    224,
    164,
    174,
    224,
    165,
    130,
    224,
    164,
    185,
    224,
    164,
    165,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    164,
    190,
    216,
    170,
    216,
    179,
    216,
    170,
    216,
    183,
    217,
    138,
    216,
    185,
    217,
    133,
    216,
    180,
    216,
    167,
    216,
    177,
    217,
    131,
    216,
    169,
    216,
    168,
    217,
    136,
    216,
    167,
    216,
    179,
    216,
    183,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    181,
    217,
    129,
    216,
    173,
    216,
    169,
    217,
    133,
    217,
    136,
    216,
    167,
    216,
    182,
    217,
    138,
    216,
    185,
    216,
    167,
    217,
    132,
    216,
    174,
    216,
    167,
    216,
    181,
    216,
    169,
    216,
    167,
    217,
    132,
    217,
    133,
    216,
    178,
    217,
    138,
    216,
    175,
    216,
    167,
    217,
    132,
    216,
    185,
    216,
    167,
    217,
    133,
    216,
    169,
    216,
    167,
    217,
    132,
    217,
    131,
    216,
    167,
    216,
    170,
    216,
    168,
    216,
    167,
    217,
    132,
    216,
    177,
    216,
    175,
    217,
    136,
    216,
    175,
    216,
    168,
    216,
    177,
    217,
    134,
    216,
    167,
    217,
    133,
    216,
    172,
    216,
    167,
    217,
    132,
    216,
    175,
    217,
    136,
    217,
    132,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    185,
    216,
    167,
    217,
    132,
    217,
    133,
    216,
    167,
    217,
    132,
    217,
    133,
    217,
    136,
    217,
    130,
    216,
    185,
    216,
    167,
    217,
    132,
    216,
    185,
    216,
    177,
    216,
    168,
    217,
    138,
    216,
    167,
    217,
    132,
    216,
    179,
    216,
    177,
    217,
    138,
    216,
    185,
    216,
    167,
    217,
    132,
    216,
    172,
    217,
    136,
    216,
    167,
    217,
    132,
    216,
    167,
    217,
    132,
    216,
    176,
    217,
    135,
    216,
    167,
    216,
    168,
    216,
    167,
    217,
    132,
    216,
    173,
    217,
    138,
    216,
    167,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    173,
    217,
    130,
    217,
    136,
    217,
    130,
    216,
    167,
    217,
    132,
    217,
    131,
    216,
    177,
    217,
    138,
    217,
    133,
    216,
    167,
    217,
    132,
    216,
    185,
    216,
    177,
    216,
    167,
    217,
    130,
    217,
    133,
    216,
    173,
    217,
    129,
    217,
    136,
    216,
    184,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    171,
    216,
    167,
    217,
    134,
    217,
    138,
    217,
    133,
    216,
    180,
    216,
    167,
    217,
    135,
    216,
    175,
    216,
    169,
    216,
    167,
    217,
    132,
    217,
    133,
    216,
    177,
    216,
    163,
    216,
    169,
    216,
    167,
    217,
    132,
    217,
    130,
    216,
    177,
    216,
    162,
    217,
    134,
    216,
    167,
    217,
    132,
    216,
    180,
    216,
    168,
    216,
    167,
    216,
    168,
    216,
    167,
    217,
    132,
    216,
    173,
    217,
    136,
    216,
    167,
    216,
    177,
    216,
    167,
    217,
    132,
    216,
    172,
    216,
    175,
    217,
    138,
    216,
    175,
    216,
    167,
    217,
    132,
    216,
    163,
    216,
    179,
    216,
    177,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    185,
    217,
    132,
    217,
    136,
    217,
    133,
    217,
    133,
    216,
    172,
    217,
    133,
    217,
    136,
    216,
    185,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    177,
    216,
    173,
    217,
    133,
    217,
    134,
    216,
    167,
    217,
    132,
    217,
    134,
    217,
    130,
    216,
    167,
    216,
    183,
    217,
    129,
    217,
    132,
    216,
    179,
    216,
    183,
    217,
    138,
    217,
    134,
    216,
    167,
    217,
    132,
    217,
    131,
    217,
    136,
    217,
    138,
    216,
    170,
    216,
    167,
    217,
    132,
    216,
    175,
    217,
    134,
    217,
    138,
    216,
    167,
    216,
    168,
    216,
    177,
    217,
    131,
    216,
    167,
    216,
    170,
    217,
    135,
    216,
    167,
    217,
    132,
    216,
    177,
    217,
    138,
    216,
    167,
    216,
    182,
    216,
    170,
    216,
    173,
    217,
    138,
    216,
    167,
    216,
    170,
    217,
    138,
    216,
    168,
    216,
    170,
    217,
    136,
    217,
    130,
    217,
    138,
    216,
    170,
    216,
    167,
    217,
    132,
    216,
    163,
    217,
    136,
    217,
    132,
    217,
    137,
    216,
    167,
    217,
    132,
    216,
    168,
    216,
    177,
    217,
    138,
    216,
    175,
    216,
    167,
    217,
    132,
    217,
    131,
    217,
    132,
    216,
    167,
    217,
    133,
    216,
    167,
    217,
    132,
    216,
    177,
    216,
    167,
    216,
    168,
    216,
    183,
    216,
    167,
    217,
    132,
    216,
    180,
    216,
    174,
    216,
    181,
    217,
    138,
    216,
    179,
    217,
    138,
    216,
    167,
    216,
    177,
    216,
    167,
    216,
    170,
    216,
    167,
    217,
    132,
    216,
    171,
    216,
    167,
    217,
    132,
    216,
    171,
    216,
    167,
    217,
    132,
    216,
    181,
    217,
    132,
    216,
    167,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    173,
    216,
    175,
    217,
    138,
    216,
    171,
    216,
    167,
    217,
    132,
    216,
    178,
    217,
    136,
    216,
    167,
    216,
    177,
    216,
    167,
    217,
    132,
    216,
    174,
    217,
    132,
    217,
    138,
    216,
    172,
    216,
    167,
    217,
    132,
    216,
    172,
    217,
    133,
    217,
    138,
    216,
    185,
    216,
    167,
    217,
    132,
    216,
    185,
    216,
    167,
    217,
    133,
    217,
    135,
    216,
    167,
    217,
    132,
    216,
    172,
    217,
    133,
    216,
    167,
    217,
    132,
    216,
    167,
    217,
    132,
    216,
    179,
    216,
    167,
    216,
    185,
    216,
    169,
    217,
    133,
    216,
    180,
    216,
    167,
    217,
    135,
    216,
    175,
    217,
    135,
    216,
    167,
    217,
    132,
    216,
    177,
    216,
    166,
    217,
    138,
    216,
    179,
    216,
    167,
    217,
    132,
    216,
    175,
    216,
    174,
    217,
    136,
    217,
    132,
    216,
    167,
    217,
    132,
    217,
    129,
    217,
    134,
    217,
    138,
    216,
    169,
    216,
    167,
    217,
    132,
    217,
    131,
    216,
    170,
    216,
    167,
    216,
    168,
    216,
    167,
    217,
    132,
    216,
    175,
    217,
    136,
    216,
    177,
    217,
    138,
    216,
    167,
    217,
    132,
    216,
    175,
    216,
    177,
    217,
    136,
    216,
    179,
    216,
    167,
    216,
    179,
    216,
    170,
    216,
    186,
    216,
    177,
    217,
    130,
    216,
    170,
    216,
    181,
    216,
    167,
    217,
    133,
    217,
    138,
    217,
    133,
    216,
    167,
    217,
    132,
    216,
    168,
    217,
    134,
    216,
    167,
    216,
    170,
    216,
    167,
    217,
    132,
    216,
    185,
    216,
    184,
    217,
    138,
    217,
    133,
    101,
    110,
    116,
    101,
    114,
    116,
    97,
    105,
    110,
    109,
    101,
    110,
    116,
    117,
    110,
    100,
    101,
    114,
    115,
    116,
    97,
    110,
    100,
    105,
    110,
    103,
    32,
    61,
    32,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    41,
    46,
    106,
    112,
    103,
    34,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    99,
    111,
    110,
    102,
    105,
    103,
    117,
    114,
    97,
    116,
    105,
    111,
    110,
    46,
    112,
    110,
    103,
    34,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    60,
    98,
    111,
    100,
    121,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    77,
    97,
    116,
    104,
    46,
    114,
    97,
    110,
    100,
    111,
    109,
    40,
    41,
    99,
    111,
    110,
    116,
    101,
    109,
    112,
    111,
    114,
    97,
    114,
    121,
    32,
    85,
    110,
    105,
    116,
    101,
    100,
    32,
    83,
    116,
    97,
    116,
    101,
    115,
    99,
    105,
    114,
    99,
    117,
    109,
    115,
    116,
    97,
    110,
    99,
    101,
    115,
    46,
    97,
    112,
    112,
    101,
    110,
    100,
    67,
    104,
    105,
    108,
    100,
    40,
    111,
    114,
    103,
    97,
    110,
    105,
    122,
    97,
    116,
    105,
    111,
    110,
    115,
    60,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    34,
    62,
    60,
    105,
    109,
    103,
    32,
    115,
    114,
    99,
    61,
    34,
    47,
    100,
    105,
    115,
    116,
    105,
    110,
    103,
    117,
    105,
    115,
    104,
    101,
    100,
    116,
    104,
    111,
    117,
    115,
    97,
    110,
    100,
    115,
    32,
    111,
    102,
    32,
    99,
    111,
    109,
    109,
    117,
    110,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    99,
    108,
    101,
    97,
    114,
    34,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    105,
    110,
    118,
    101,
    115,
    116,
    105,
    103,
    97,
    116,
    105,
    111,
    110,
    102,
    97,
    118,
    105,
    99,
    111,
    110,
    46,
    105,
    99,
    111,
    34,
    32,
    109,
    97,
    114,
    103,
    105,
    110,
    45,
    114,
    105,
    103,
    104,
    116,
    58,
    98,
    97,
    115,
    101,
    100,
    32,
    111,
    110,
    32,
    116,
    104,
    101,
    32,
    77,
    97,
    115,
    115,
    97,
    99,
    104,
    117,
    115,
    101,
    116,
    116,
    115,
    116,
    97,
    98,
    108,
    101,
    32,
    98,
    111,
    114,
    100,
    101,
    114,
    61,
    105,
    110,
    116,
    101,
    114,
    110,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    97,
    108,
    115,
    111,
    32,
    107,
    110,
    111,
    119,
    110,
    32,
    97,
    115,
    112,
    114,
    111,
    110,
    117,
    110,
    99,
    105,
    97,
    116,
    105,
    111,
    110,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    58,
    35,
    102,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    45,
    108,
    101,
    102,
    116,
    58,
    70,
    111,
    114,
    32,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    44,
    32,
    109,
    105,
    115,
    99,
    101,
    108,
    108,
    97,
    110,
    101,
    111,
    117,
    115,
    38,
    108,
    116,
    59,
    47,
    109,
    97,
    116,
    104,
    38,
    103,
    116,
    59,
    112,
    115,
    121,
    99,
    104,
    111,
    108,
    111,
    103,
    105,
    99,
    97,
    108,
    105,
    110,
    32,
    112,
    97,
    114,
    116,
    105,
    99,
    117,
    108,
    97,
    114,
    101,
    97,
    114,
    99,
    104,
    34,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    102,
    111,
    114,
    109,
    32,
    109,
    101,
    116,
    104,
    111,
    100,
    61,
    34,
    97,
    115,
    32,
    111,
    112,
    112,
    111,
    115,
    101,
    100,
    32,
    116,
    111,
    83,
    117,
    112,
    114,
    101,
    109,
    101,
    32,
    67,
    111,
    117,
    114,
    116,
    111,
    99,
    99,
    97,
    115,
    105,
    111,
    110,
    97,
    108,
    108,
    121,
    32,
    65,
    100,
    100,
    105,
    116,
    105,
    111,
    110,
    97,
    108,
    108,
    121,
    44,
    78,
    111,
    114,
    116,
    104,
    32,
    65,
    109,
    101,
    114,
    105,
    99,
    97,
    112,
    120,
    59,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    111,
    112,
    112,
    111,
    114,
    116,
    117,
    110,
    105,
    116,
    105,
    101,
    115,
    69,
    110,
    116,
    101,
    114,
    116,
    97,
    105,
    110,
    109,
    101,
    110,
    116,
    46,
    116,
    111,
    76,
    111,
    119,
    101,
    114,
    67,
    97,
    115,
    101,
    40,
    109,
    97,
    110,
    117,
    102,
    97,
    99,
    116,
    117,
    114,
    105,
    110,
    103,
    112,
    114,
    111,
    102,
    101,
    115,
    115,
    105,
    111,
    110,
    97,
    108,
    32,
    99,
    111,
    109,
    98,
    105,
    110,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    70,
    111,
    114,
    32,
    105,
    110,
    115,
    116,
    97,
    110,
    99,
    101,
    44,
    99,
    111,
    110,
    115,
    105,
    115,
    116,
    105,
    110,
    103,
    32,
    111,
    102,
    34,
    32,
    109,
    97,
    120,
    108,
    101,
    110,
    103,
    116,
    104,
    61,
    34,
    114,
    101,
    116,
    117,
    114,
    110,
    32,
    102,
    97,
    108,
    115,
    101,
    59,
    99,
    111,
    110,
    115,
    99,
    105,
    111,
    117,
    115,
    110,
    101,
    115,
    115,
    77,
    101,
    100,
    105,
    116,
    101,
    114,
    114,
    97,
    110,
    101,
    97,
    110,
    101,
    120,
    116,
    114,
    97,
    111,
    114,
    100,
    105,
    110,
    97,
    114,
    121,
    97,
    115,
    115,
    97,
    115,
    115,
    105,
    110,
    97,
    116,
    105,
    111,
    110,
    115,
    117,
    98,
    115,
    101,
    113,
    117,
    101,
    110,
    116,
    108,
    121,
    32,
    98,
    117,
    116,
    116,
    111,
    110,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    104,
    101,
    32,
    110,
    117,
    109,
    98,
    101,
    114,
    32,
    111,
    102,
    116,
    104,
    101,
    32,
    111,
    114,
    105,
    103,
    105,
    110,
    97,
    108,
    32,
    99,
    111,
    109,
    112,
    114,
    101,
    104,
    101,
    110,
    115,
    105,
    118,
    101,
    114,
    101,
    102,
    101,
    114,
    115,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    60,
    47,
    117,
    108,
    62,
    10,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    112,
    104,
    105,
    108,
    111,
    115,
    111,
    112,
    104,
    105,
    99,
    97,
    108,
    108,
    111,
    99,
    97,
    116,
    105,
    111,
    110,
    46,
    104,
    114,
    101,
    102,
    119,
    97,
    115,
    32,
    112,
    117,
    98,
    108,
    105,
    115,
    104,
    101,
    100,
    83,
    97,
    110,
    32,
    70,
    114,
    97,
    110,
    99,
    105,
    115,
    99,
    111,
    40,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    41,
    123,
    10,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    109,
    97,
    105,
    110,
    115,
    111,
    112,
    104,
    105,
    115,
    116,
    105,
    99,
    97,
    116,
    101,
    100,
    109,
    97,
    116,
    104,
    101,
    109,
    97,
    116,
    105,
    99,
    97,
    108,
    32,
    47,
    104,
    101,
    97,
    100,
    62,
    13,
    10,
    60,
    98,
    111,
    100,
    121,
    115,
    117,
    103,
    103,
    101,
    115,
    116,
    115,
    32,
    116,
    104,
    97,
    116,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    97,
    116,
    105,
    111,
    110,
    99,
    111,
    110,
    99,
    101,
    110,
    116,
    114,
    97,
    116,
    105,
    111,
    110,
    114,
    101,
    108,
    97,
    116,
    105,
    111,
    110,
    115,
    104,
    105,
    112,
    115,
    109,
    97,
    121,
    32,
    104,
    97,
    118,
    101,
    32,
    98,
    101,
    101,
    110,
    40,
    102,
    111,
    114,
    32,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    44,
    84,
    104,
    105,
    115,
    32,
    97,
    114,
    116,
    105,
    99,
    108,
    101,
    32,
    105,
    110,
    32,
    115,
    111,
    109,
    101,
    32,
    99,
    97,
    115,
    101,
    115,
    112,
    97,
    114,
    116,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    100,
    101,
    102,
    105,
    110,
    105,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    71,
    114,
    101,
    97,
    116,
    32,
    66,
    114,
    105,
    116,
    97,
    105,
    110,
    32,
    99,
    101,
    108,
    108,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    61,
    101,
    113,
    117,
    105,
    118,
    97,
    108,
    101,
    110,
    116,
    32,
    116,
    111,
    112,
    108,
    97,
    99,
    101,
    104,
    111,
    108,
    100,
    101,
    114,
    61,
    34,
    59,
    32,
    102,
    111,
    110,
    116,
    45,
    115,
    105,
    122,
    101,
    58,
    32,
    106,
    117,
    115,
    116,
    105,
    102,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    98,
    101,
    108,
    105,
    101,
    118,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    115,
    117,
    102,
    102,
    101,
    114,
    101,
    100,
    32,
    102,
    114,
    111,
    109,
    97,
    116,
    116,
    101,
    109,
    112,
    116,
    101,
    100,
    32,
    116,
    111,
    32,
    108,
    101,
    97,
    100,
    101,
    114,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    99,
    114,
    105,
    112,
    116,
    34,
    32,
    115,
    114,
    99,
    61,
    34,
    47,
    40,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    41,
    32,
    123,
    97,
    114,
    101,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    10,
    9,
    60,
    108,
    105,
    110,
    107,
    32,
    114,
    101,
    108,
    61,
    34,
    32,
    115,
    114,
    99,
    61,
    39,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    105,
    110,
    116,
    101,
    114,
    101,
    115,
    116,
    101,
    100,
    32,
    105,
    110,
    99,
    111,
    110,
    118,
    101,
    110,
    116,
    105,
    111,
    110,
    97,
    108,
    32,
    34,
    32,
    97,
    108,
    116,
    61,
    34,
    34,
    32,
    47,
    62,
    60,
    47,
    97,
    114,
    101,
    32,
    103,
    101,
    110,
    101,
    114,
    97,
    108,
    108,
    121,
    104,
    97,
    115,
    32,
    97,
    108,
    115,
    111,
    32,
    98,
    101,
    101,
    110,
    109,
    111,
    115,
    116,
    32,
    112,
    111,
    112,
    117,
    108,
    97,
    114,
    32,
    99,
    111,
    114,
    114,
    101,
    115,
    112,
    111,
    110,
    100,
    105,
    110,
    103,
    99,
    114,
    101,
    100,
    105,
    116,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    116,
    121,
    108,
    101,
    61,
    34,
    98,
    111,
    114,
    100,
    101,
    114,
    58,
    60,
    47,
    97,
    62,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    47,
    46,
    103,
    105,
    102,
    34,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    60,
    105,
    102,
    114,
    97,
    109,
    101,
    32,
    115,
    114,
    99,
    61,
    34,
    116,
    97,
    98,
    108,
    101,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    105,
    110,
    108,
    105,
    110,
    101,
    45,
    98,
    108,
    111,
    99,
    107,
    59,
    97,
    99,
    99,
    111,
    114,
    100,
    105,
    110,
    103,
    32,
    116,
    111,
    32,
    116,
    111,
    103,
    101,
    116,
    104,
    101,
    114,
    32,
    119,
    105,
    116,
    104,
    97,
    112,
    112,
    114,
    111,
    120,
    105,
    109,
    97,
    116,
    101,
    108,
    121,
    112,
    97,
    114,
    108,
    105,
    97,
    109,
    101,
    110,
    116,
    97,
    114,
    121,
    109,
    111,
    114,
    101,
    32,
    97,
    110,
    100,
    32,
    109,
    111,
    114,
    101,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    58,
    110,
    111,
    110,
    101,
    59,
    116,
    114,
    97,
    100,
    105,
    116,
    105,
    111,
    110,
    97,
    108,
    108,
    121,
    112,
    114,
    101,
    100,
    111,
    109,
    105,
    110,
    97,
    110,
    116,
    108,
    121,
    38,
    110,
    98,
    115,
    112,
    59,
    124,
    38,
    110,
    98,
    115,
    112,
    59,
    38,
    110,
    98,
    115,
    112,
    59,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    32,
    99,
    101,
    108,
    108,
    115,
    112,
    97,
    99,
    105,
    110,
    103,
    61,
    60,
    105,
    110,
    112,
    117,
    116,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    111,
    114,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    99,
    111,
    110,
    116,
    114,
    111,
    118,
    101,
    114,
    115,
    105,
    97,
    108,
    112,
    114,
    111,
    112,
    101,
    114,
    116,
    121,
    61,
    34,
    111,
    103,
    58,
    47,
    120,
    45,
    115,
    104,
    111,
    99,
    107,
    119,
    97,
    118,
    101,
    45,
    100,
    101,
    109,
    111,
    110,
    115,
    116,
    114,
    97,
    116,
    105,
    111,
    110,
    115,
    117,
    114,
    114,
    111,
    117,
    110,
    100,
    101,
    100,
    32,
    98,
    121,
    78,
    101,
    118,
    101,
    114,
    116,
    104,
    101,
    108,
    101,
    115,
    115,
    44,
    119,
    97,
    115,
    32,
    116,
    104,
    101,
    32,
    102,
    105,
    114,
    115,
    116,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    97,
    98,
    108,
    101,
    32,
    65,
    108,
    116,
    104,
    111,
    117,
    103,
    104,
    32,
    116,
    104,
    101,
    32,
    99,
    111,
    108,
    108,
    97,
    98,
    111,
    114,
    97,
    116,
    105,
    111,
    110,
    115,
    104,
    111,
    117,
    108,
    100,
    32,
    110,
    111,
    116,
    32,
    98,
    101,
    112,
    114,
    111,
    112,
    111,
    114,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    60,
    115,
    112,
    97,
    110,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    107,
    110,
    111,
    119,
    110,
    32,
    97,
    115,
    32,
    116,
    104,
    101,
    32,
    115,
    104,
    111,
    114,
    116,
    108,
    121,
    32,
    97,
    102,
    116,
    101,
    114,
    102,
    111,
    114,
    32,
    105,
    110,
    115,
    116,
    97,
    110,
    99,
    101,
    44,
    100,
    101,
    115,
    99,
    114,
    105,
    98,
    101,
    100,
    32,
    97,
    115,
    32,
    47,
    104,
    101,
    97,
    100,
    62,
    10,
    60,
    98,
    111,
    100,
    121,
    32,
    115,
    116,
    97,
    114,
    116,
    105,
    110,
    103,
    32,
    119,
    105,
    116,
    104,
    105,
    110,
    99,
    114,
    101,
    97,
    115,
    105,
    110,
    103,
    108,
    121,
    32,
    116,
    104,
    101,
    32,
    102,
    97,
    99,
    116,
    32,
    116,
    104,
    97,
    116,
    100,
    105,
    115,
    99,
    117,
    115,
    115,
    105,
    111,
    110,
    32,
    111,
    102,
    109,
    105,
    100,
    100,
    108,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    97,
    110,
    32,
    105,
    110,
    100,
    105,
    118,
    105,
    100,
    117,
    97,
    108,
    100,
    105,
    102,
    102,
    105,
    99,
    117,
    108,
    116,
    32,
    116,
    111,
    32,
    112,
    111,
    105,
    110,
    116,
    32,
    111,
    102,
    32,
    118,
    105,
    101,
    119,
    104,
    111,
    109,
    111,
    115,
    101,
    120,
    117,
    97,
    108,
    105,
    116,
    121,
    97,
    99,
    99,
    101,
    112,
    116,
    97,
    110,
    99,
    101,
    32,
    111,
    102,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    109,
    97,
    110,
    117,
    102,
    97,
    99,
    116,
    117,
    114,
    101,
    114,
    115,
    111,
    114,
    105,
    103,
    105,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    99,
    111,
    109,
    109,
    111,
    110,
    108,
    121,
    32,
    117,
    115,
    101,
    100,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    99,
    101,
    32,
    111,
    102,
    100,
    101,
    110,
    111,
    109,
    105,
    110,
    97,
    116,
    105,
    111,
    110,
    115,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    58,
    32,
    35,
    108,
    101,
    110,
    103,
    116,
    104,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    100,
    101,
    116,
    101,
    114,
    109,
    105,
    110,
    97,
    116,
    105,
    111,
    110,
    97,
    32,
    115,
    105,
    103,
    110,
    105,
    102,
    105,
    99,
    97,
    110,
    116,
    34,
    32,
    98,
    111,
    114,
    100,
    101,
    114,
    61,
    34,
    48,
    34,
    62,
    114,
    101,
    118,
    111,
    108,
    117,
    116,
    105,
    111,
    110,
    97,
    114,
    121,
    112,
    114,
    105,
    110,
    99,
    105,
    112,
    108,
    101,
    115,
    32,
    111,
    102,
    105,
    115,
    32,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    101,
    100,
    119,
    97,
    115,
    32,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    101,
    100,
    73,
    110,
    100,
    111,
    45,
    69,
    117,
    114,
    111,
    112,
    101,
    97,
    110,
    118,
    117,
    108,
    110,
    101,
    114,
    97,
    98,
    108,
    101,
    32,
    116,
    111,
    112,
    114,
    111,
    112,
    111,
    110,
    101,
    110,
    116,
    115,
    32,
    111,
    102,
    97,
    114,
    101,
    32,
    115,
    111,
    109,
    101,
    116,
    105,
    109,
    101,
    115,
    99,
    108,
    111,
    115,
    101,
    114,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    78,
    101,
    119,
    32,
    89,
    111,
    114,
    107,
    32,
    67,
    105,
    116,
    121,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    115,
    101,
    97,
    114,
    99,
    104,
    97,
    116,
    116,
    114,
    105,
    98,
    117,
    116,
    101,
    100,
    32,
    116,
    111,
    99,
    111,
    117,
    114,
    115,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    109,
    97,
    116,
    104,
    101,
    109,
    97,
    116,
    105,
    99,
    105,
    97,
    110,
    98,
    121,
    32,
    116,
    104,
    101,
    32,
    101,
    110,
    100,
    32,
    111,
    102,
    97,
    116,
    32,
    116,
    104,
    101,
    32,
    101,
    110,
    100,
    32,
    111,
    102,
    34,
    32,
    98,
    111,
    114,
    100,
    101,
    114,
    61,
    34,
    48,
    34,
    32,
    116,
    101,
    99,
    104,
    110,
    111,
    108,
    111,
    103,
    105,
    99,
    97,
    108,
    46,
    114,
    101,
    109,
    111,
    118,
    101,
    67,
    108,
    97,
    115,
    115,
    40,
    98,
    114,
    97,
    110,
    99,
    104,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    101,
    118,
    105,
    100,
    101,
    110,
    99,
    101,
    32,
    116,
    104,
    97,
    116,
    33,
    91,
    101,
    110,
    100,
    105,
    102,
    93,
    45,
    45,
    62,
    13,
    10,
    73,
    110,
    115,
    116,
    105,
    116,
    117,
    116,
    101,
    32,
    111,
    102,
    32,
    105,
    110,
    116,
    111,
    32,
    97,
    32,
    115,
    105,
    110,
    103,
    108,
    101,
    114,
    101,
    115,
    112,
    101,
    99,
    116,
    105,
    118,
    101,
    108,
    121,
    46,
    97,
    110,
    100,
    32,
    116,
    104,
    101,
    114,
    101,
    102,
    111,
    114,
    101,
    112,
    114,
    111,
    112,
    101,
    114,
    116,
    105,
    101,
    115,
    32,
    111,
    102,
    105,
    115,
    32,
    108,
    111,
    99,
    97,
    116,
    101,
    100,
    32,
    105,
    110,
    115,
    111,
    109,
    101,
    32,
    111,
    102,
    32,
    119,
    104,
    105,
    99,
    104,
    84,
    104,
    101,
    114,
    101,
    32,
    105,
    115,
    32,
    97,
    108,
    115,
    111,
    99,
    111,
    110,
    116,
    105,
    110,
    117,
    101,
    100,
    32,
    116,
    111,
    32,
    97,
    112,
    112,
    101,
    97,
    114,
    97,
    110,
    99,
    101,
    32,
    111,
    102,
    32,
    38,
    97,
    109,
    112,
    59,
    110,
    100,
    97,
    115,
    104,
    59,
    32,
    100,
    101,
    115,
    99,
    114,
    105,
    98,
    101,
    115,
    32,
    116,
    104,
    101,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    97,
    117,
    116,
    104,
    111,
    114,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    105,
    110,
    100,
    101,
    112,
    101,
    110,
    100,
    101,
    110,
    116,
    108,
    121,
    101,
    113,
    117,
    105,
    112,
    112,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    100,
    111,
    101,
    115,
    32,
    110,
    111,
    116,
    32,
    104,
    97,
    118,
    101,
    60,
    47,
    97,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    99,
    111,
    110,
    102,
    117,
    115,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    60,
    108,
    105,
    110,
    107,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    47,
    97,
    116,
    32,
    116,
    104,
    101,
    32,
    97,
    103,
    101,
    32,
    111,
    102,
    97,
    112,
    112,
    101,
    97,
    114,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    84,
    104,
    101,
    115,
    101,
    32,
    105,
    110,
    99,
    108,
    117,
    100,
    101,
    114,
    101,
    103,
    97,
    114,
    100,
    108,
    101,
    115,
    115,
    32,
    111,
    102,
    99,
    111,
    117,
    108,
    100,
    32,
    98,
    101,
    32,
    117,
    115,
    101,
    100,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    38,
    113,
    117,
    111,
    116,
    59,
    115,
    101,
    118,
    101,
    114,
    97,
    108,
    32,
    116,
    105,
    109,
    101,
    115,
    114,
    101,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    32,
    116,
    104,
    101,
    98,
    111,
    100,
    121,
    62,
    10,
    60,
    47,
    104,
    116,
    109,
    108,
    62,
    116,
    104,
    111,
    117,
    103,
    104,
    116,
    32,
    116,
    111,
    32,
    98,
    101,
    112,
    111,
    112,
    117,
    108,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    112,
    111,
    115,
    115,
    105,
    98,
    105,
    108,
    105,
    116,
    105,
    101,
    115,
    112,
    101,
    114,
    99,
    101,
    110,
    116,
    97,
    103,
    101,
    32,
    111,
    102,
    97,
    99,
    99,
    101,
    115,
    115,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    97,
    110,
    32,
    97,
    116,
    116,
    101,
    109,
    112,
    116,
    32,
    116,
    111,
    112,
    114,
    111,
    100,
    117,
    99,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    106,
    113,
    117,
    101,
    114,
    121,
    47,
    106,
    113,
    117,
    101,
    114,
    121,
    116,
    119,
    111,
    32,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    98,
    101,
    108,
    111,
    110,
    103,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    101,
    115,
    116,
    97,
    98,
    108,
    105,
    115,
    104,
    109,
    101,
    110,
    116,
    114,
    101,
    112,
    108,
    97,
    99,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    105,
    111,
    110,
    34,
    32,
    100,
    101,
    116,
    101,
    114,
    109,
    105,
    110,
    101,
    32,
    116,
    104,
    101,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    32,
    102,
    111,
    114,
    65,
    99,
    99,
    111,
    114,
    100,
    105,
    110,
    103,
    32,
    116,
    111,
    32,
    119,
    105,
    100,
    101,
    32,
    114,
    97,
    110,
    103,
    101,
    32,
    111,
    102,
    9,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    109,
    111,
    114,
    101,
    32,
    99,
    111,
    109,
    109,
    111,
    110,
    108,
    121,
    111,
    114,
    103,
    97,
    110,
    105,
    115,
    97,
    116,
    105,
    111,
    110,
    115,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    97,
    108,
    105,
    116,
    121,
    119,
    97,
    115,
    32,
    99,
    111,
    109,
    112,
    108,
    101,
    116,
    101,
    100,
    32,
    38,
    97,
    109,
    112,
    59,
    109,
    100,
    97,
    115,
    104,
    59,
    32,
    112,
    97,
    114,
    116,
    105,
    99,
    105,
    112,
    97,
    116,
    105,
    111,
    110,
    116,
    104,
    101,
    32,
    99,
    104,
    97,
    114,
    97,
    99,
    116,
    101,
    114,
    97,
    110,
    32,
    97,
    100,
    100,
    105,
    116,
    105,
    111,
    110,
    97,
    108,
    97,
    112,
    112,
    101,
    97,
    114,
    115,
    32,
    116,
    111,
    32,
    98,
    101,
    102,
    97,
    99,
    116,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    97,
    110,
    32,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    32,
    111,
    102,
    115,
    105,
    103,
    110,
    105,
    102,
    105,
    99,
    97,
    110,
    116,
    108,
    121,
    111,
    110,
    109,
    111,
    117,
    115,
    101,
    111,
    118,
    101,
    114,
    61,
    34,
    98,
    101,
    99,
    97,
    117,
    115,
    101,
    32,
    116,
    104,
    101,
    121,
    32,
    97,
    115,
    121,
    110,
    99,
    32,
    61,
    32,
    116,
    114,
    117,
    101,
    59,
    112,
    114,
    111,
    98,
    108,
    101,
    109,
    115,
    32,
    119,
    105,
    116,
    104,
    115,
    101,
    101,
    109,
    115,
    32,
    116,
    111,
    32,
    104,
    97,
    118,
    101,
    116,
    104,
    101,
    32,
    114,
    101,
    115,
    117,
    108,
    116,
    32,
    111,
    102,
    32,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    102,
    97,
    109,
    105,
    108,
    105,
    97,
    114,
    32,
    119,
    105,
    116,
    104,
    112,
    111,
    115,
    115,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    111,
    102,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    32,
    40,
    41,
    32,
    123,
    116,
    111,
    111,
    107,
    32,
    112,
    108,
    97,
    99,
    101,
    32,
    105,
    110,
    97,
    110,
    100,
    32,
    115,
    111,
    109,
    101,
    116,
    105,
    109,
    101,
    115,
    115,
    117,
    98,
    115,
    116,
    97,
    110,
    116,
    105,
    97,
    108,
    108,
    121,
    60,
    115,
    112,
    97,
    110,
    62,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    105,
    115,
    32,
    111,
    102,
    116,
    101,
    110,
    32,
    117,
    115,
    101,
    100,
    105,
    110,
    32,
    97,
    110,
    32,
    97,
    116,
    116,
    101,
    109,
    112,
    116,
    103,
    114,
    101,
    97,
    116,
    32,
    100,
    101,
    97,
    108,
    32,
    111,
    102,
    69,
    110,
    118,
    105,
    114,
    111,
    110,
    109,
    101,
    110,
    116,
    97,
    108,
    115,
    117,
    99,
    99,
    101,
    115,
    115,
    102,
    117,
    108,
    108,
    121,
    32,
    118,
    105,
    114,
    116,
    117,
    97,
    108,
    108,
    121,
    32,
    97,
    108,
    108,
    50,
    48,
    116,
    104,
    32,
    99,
    101,
    110,
    116,
    117,
    114,
    121,
    44,
    112,
    114,
    111,
    102,
    101,
    115,
    115,
    105,
    111,
    110,
    97,
    108,
    115,
    110,
    101,
    99,
    101,
    115,
    115,
    97,
    114,
    121,
    32,
    116,
    111,
    32,
    100,
    101,
    116,
    101,
    114,
    109,
    105,
    110,
    101,
    100,
    32,
    98,
    121,
    99,
    111,
    109,
    112,
    97,
    116,
    105,
    98,
    105,
    108,
    105,
    116,
    121,
    98,
    101,
    99,
    97,
    117,
    115,
    101,
    32,
    105,
    116,
    32,
    105,
    115,
    68,
    105,
    99,
    116,
    105,
    111,
    110,
    97,
    114,
    121,
    32,
    111,
    102,
    109,
    111,
    100,
    105,
    102,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    115,
    84,
    104,
    101,
    32,
    102,
    111,
    108,
    108,
    111,
    119,
    105,
    110,
    103,
    109,
    97,
    121,
    32,
    114,
    101,
    102,
    101,
    114,
    32,
    116,
    111,
    58,
    67,
    111,
    110,
    115,
    101,
    113,
    117,
    101,
    110,
    116,
    108,
    121,
    44,
    73,
    110,
    116,
    101,
    114,
    110,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    97,
    108,
    116,
    104,
    111,
    117,
    103,
    104,
    32,
    115,
    111,
    109,
    101,
    116,
    104,
    97,
    116,
    32,
    119,
    111,
    117,
    108,
    100,
    32,
    98,
    101,
    119,
    111,
    114,
    108,
    100,
    39,
    115,
    32,
    102,
    105,
    114,
    115,
    116,
    99,
    108,
    97,
    115,
    115,
    105,
    102,
    105,
    101,
    100,
    32,
    97,
    115,
    98,
    111,
    116,
    116,
    111,
    109,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    40,
    112,
    97,
    114,
    116,
    105,
    99,
    117,
    108,
    97,
    114,
    108,
    121,
    97,
    108,
    105,
    103,
    110,
    61,
    34,
    108,
    101,
    102,
    116,
    34,
    32,
    109,
    111,
    115,
    116,
    32,
    99,
    111,
    109,
    109,
    111,
    110,
    108,
    121,
    98,
    97,
    115,
    105,
    115,
    32,
    102,
    111,
    114,
    32,
    116,
    104,
    101,
    102,
    111,
    117,
    110,
    100,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    99,
    111,
    110,
    116,
    114,
    105,
    98,
    117,
    116,
    105,
    111,
    110,
    115,
    112,
    111,
    112,
    117,
    108,
    97,
    114,
    105,
    116,
    121,
    32,
    111,
    102,
    99,
    101,
    110,
    116,
    101,
    114,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    116,
    111,
    32,
    114,
    101,
    100,
    117,
    99,
    101,
    32,
    116,
    104,
    101,
    106,
    117,
    114,
    105,
    115,
    100,
    105,
    99,
    116,
    105,
    111,
    110,
    115,
    97,
    112,
    112,
    114,
    111,
    120,
    105,
    109,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    110,
    109,
    111,
    117,
    115,
    101,
    111,
    117,
    116,
    61,
    34,
    78,
    101,
    119,
    32,
    84,
    101,
    115,
    116,
    97,
    109,
    101,
    110,
    116,
    99,
    111,
    108,
    108,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    47,
    97,
    62,
    60,
    47,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    85,
    110,
    105,
    116,
    101,
    100,
    102,
    105,
    108,
    109,
    32,
    100,
    105,
    114,
    101,
    99,
    116,
    111,
    114,
    45,
    115,
    116,
    114,
    105,
    99,
    116,
    46,
    100,
    116,
    100,
    34,
    62,
    104,
    97,
    115,
    32,
    98,
    101,
    101,
    110,
    32,
    117,
    115,
    101,
    100,
    114,
    101,
    116,
    117,
    114,
    110,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    97,
    108,
    116,
    104,
    111,
    117,
    103,
    104,
    32,
    116,
    104,
    105,
    115,
    99,
    104,
    97,
    110,
    103,
    101,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    115,
    101,
    118,
    101,
    114,
    97,
    108,
    32,
    111,
    116,
    104,
    101,
    114,
    98,
    117,
    116,
    32,
    116,
    104,
    101,
    114,
    101,
    32,
    97,
    114,
    101,
    117,
    110,
    112,
    114,
    101,
    99,
    101,
    100,
    101,
    110,
    116,
    101,
    100,
    105,
    115,
    32,
    115,
    105,
    109,
    105,
    108,
    97,
    114,
    32,
    116,
    111,
    101,
    115,
    112,
    101,
    99,
    105,
    97,
    108,
    108,
    121,
    32,
    105,
    110,
    119,
    101,
    105,
    103,
    104,
    116,
    58,
    32,
    98,
    111,
    108,
    100,
    59,
    105,
    115,
    32,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    116,
    104,
    101,
    99,
    111,
    109,
    112,
    117,
    116,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    105,
    110,
    100,
    105,
    99,
    97,
    116,
    101,
    32,
    116,
    104,
    97,
    116,
    114,
    101,
    115,
    116,
    114,
    105,
    99,
    116,
    101,
    100,
    32,
    116,
    111,
    9,
    60,
    109,
    101,
    116,
    97,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    97,
    114,
    101,
    32,
    116,
    121,
    112,
    105,
    99,
    97,
    108,
    108,
    121,
    99,
    111,
    110,
    102,
    108,
    105,
    99,
    116,
    32,
    119,
    105,
    116,
    104,
    72,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    32,
    116,
    104,
    101,
    32,
    65,
    110,
    32,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    32,
    111,
    102,
    99,
    111,
    109,
    112,
    97,
    114,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    113,
    117,
    97,
    110,
    116,
    105,
    116,
    105,
    101,
    115,
    32,
    111,
    102,
    114,
    97,
    116,
    104,
    101,
    114,
    32,
    116,
    104,
    97,
    110,
    32,
    97,
    99,
    111,
    110,
    115,
    116,
    101,
    108,
    108,
    97,
    116,
    105,
    111,
    110,
    110,
    101,
    99,
    101,
    115,
    115,
    97,
    114,
    121,
    32,
    102,
    111,
    114,
    114,
    101,
    112,
    111,
    114,
    116,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    115,
    112,
    101,
    99,
    105,
    102,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    112,
    111,
    108,
    105,
    116,
    105,
    99,
    97,
    108,
    32,
    97,
    110,
    100,
    38,
    110,
    98,
    115,
    112,
    59,
    38,
    110,
    98,
    115,
    112,
    59,
    60,
    114,
    101,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    115,
    32,
    116,
    111,
    116,
    104,
    101,
    32,
    115,
    97,
    109,
    101,
    32,
    121,
    101,
    97,
    114,
    71,
    111,
    118,
    101,
    114,
    110,
    109,
    101,
    110,
    116,
    32,
    111,
    102,
    103,
    101,
    110,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    104,
    97,
    118,
    101,
    32,
    110,
    111,
    116,
    32,
    98,
    101,
    101,
    110,
    115,
    101,
    118,
    101,
    114,
    97,
    108,
    32,
    121,
    101,
    97,
    114,
    115,
    99,
    111,
    109,
    109,
    105,
    116,
    109,
    101,
    110,
    116,
    32,
    116,
    111,
    9,
    9,
    60,
    117,
    108,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    118,
    105,
    115,
    117,
    97,
    108,
    105,
    122,
    97,
    116,
    105,
    111,
    110,
    49,
    57,
    116,
    104,
    32,
    99,
    101,
    110,
    116,
    117,
    114,
    121,
    44,
    112,
    114,
    97,
    99,
    116,
    105,
    116,
    105,
    111,
    110,
    101,
    114,
    115,
    116,
    104,
    97,
    116,
    32,
    104,
    101,
    32,
    119,
    111,
    117,
    108,
    100,
    97,
    110,
    100,
    32,
    99,
    111,
    110,
    116,
    105,
    110,
    117,
    101,
    100,
    111,
    99,
    99,
    117,
    112,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    105,
    115,
    32,
    100,
    101,
    102,
    105,
    110,
    101,
    100,
    32,
    97,
    115,
    99,
    101,
    110,
    116,
    114,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    97,
    109,
    111,
    117,
    110,
    116,
    32,
    111,
    102,
    62,
    60,
    100,
    105,
    118,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    101,
    113,
    117,
    105,
    118,
    97,
    108,
    101,
    110,
    116,
    32,
    111,
    102,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    105,
    97,
    116,
    101,
    98,
    114,
    111,
    117,
    103,
    104,
    116,
    32,
    97,
    98,
    111,
    117,
    116,
    109,
    97,
    114,
    103,
    105,
    110,
    45,
    108,
    101,
    102,
    116,
    58,
    32,
    97,
    117,
    116,
    111,
    109,
    97,
    116,
    105,
    99,
    97,
    108,
    108,
    121,
    116,
    104,
    111,
    117,
    103,
    104,
    116,
    32,
    111,
    102,
    32,
    97,
    115,
    83,
    111,
    109,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    115,
    101,
    10,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    105,
    110,
    112,
    117,
    116,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    114,
    101,
    112,
    108,
    97,
    99,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    105,
    115,
    32,
    111,
    110,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    101,
    100,
    117,
    99,
    97,
    116,
    105,
    111,
    110,
    32,
    97,
    110,
    100,
    105,
    110,
    102,
    108,
    117,
    101,
    110,
    99,
    101,
    100,
    32,
    98,
    121,
    114,
    101,
    112,
    117,
    116,
    97,
    116,
    105,
    111,
    110,
    32,
    97,
    115,
    10,
    60,
    109,
    101,
    116,
    97,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    97,
    99,
    99,
    111,
    109,
    109,
    111,
    100,
    97,
    116,
    105,
    111,
    110,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    60,
    47,
    100,
    105,
    118,
    62,
    108,
    97,
    114,
    103,
    101,
    32,
    112,
    97,
    114,
    116,
    32,
    111,
    102,
    73,
    110,
    115,
    116,
    105,
    116,
    117,
    116,
    101,
    32,
    102,
    111,
    114,
    116,
    104,
    101,
    32,
    115,
    111,
    45,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    97,
    103,
    97,
    105,
    110,
    115,
    116,
    32,
    116,
    104,
    101,
    32,
    73,
    110,
    32,
    116,
    104,
    105,
    115,
    32,
    99,
    97,
    115,
    101,
    44,
    119,
    97,
    115,
    32,
    97,
    112,
    112,
    111,
    105,
    110,
    116,
    101,
    100,
    99,
    108,
    97,
    105,
    109,
    101,
    100,
    32,
    116,
    111,
    32,
    98,
    101,
    72,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    32,
    116,
    104,
    105,
    115,
    68,
    101,
    112,
    97,
    114,
    116,
    109,
    101,
    110,
    116,
    32,
    111,
    102,
    116,
    104,
    101,
    32,
    114,
    101,
    109,
    97,
    105,
    110,
    105,
    110,
    103,
    101,
    102,
    102,
    101,
    99,
    116,
    32,
    111,
    110,
    32,
    116,
    104,
    101,
    112,
    97,
    114,
    116,
    105,
    99,
    117,
    108,
    97,
    114,
    108,
    121,
    32,
    100,
    101,
    97,
    108,
    32,
    119,
    105,
    116,
    104,
    32,
    116,
    104,
    101,
    10,
    60,
    100,
    105,
    118,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    97,
    108,
    109,
    111,
    115,
    116,
    32,
    97,
    108,
    119,
    97,
    121,
    115,
    97,
    114,
    101,
    32,
    99,
    117,
    114,
    114,
    101,
    110,
    116,
    108,
    121,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    111,
    102,
    112,
    104,
    105,
    108,
    111,
    115,
    111,
    112,
    104,
    121,
    32,
    111,
    102,
    102,
    111,
    114,
    32,
    109,
    111,
    114,
    101,
    32,
    116,
    104,
    97,
    110,
    99,
    105,
    118,
    105,
    108,
    105,
    122,
    97,
    116,
    105,
    111,
    110,
    115,
    111,
    110,
    32,
    116,
    104,
    101,
    32,
    105,
    115,
    108,
    97,
    110,
    100,
    115,
    101,
    108,
    101,
    99,
    116,
    101,
    100,
    73,
    110,
    100,
    101,
    120,
    99,
    97,
    110,
    32,
    114,
    101,
    115,
    117,
    108,
    116,
    32,
    105,
    110,
    34,
    32,
    118,
    97,
    108,
    117,
    101,
    61,
    34,
    34,
    32,
    47,
    62,
    116,
    104,
    101,
    32,
    115,
    116,
    114,
    117,
    99,
    116,
    117,
    114,
    101,
    32,
    47,
    62,
    60,
    47,
    97,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    77,
    97,
    110,
    121,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    115,
    101,
    99,
    97,
    117,
    115,
    101,
    100,
    32,
    98,
    121,
    32,
    116,
    104,
    101,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    85,
    110,
    105,
    116,
    101,
    100,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    109,
    99,
    97,
    110,
    32,
    98,
    101,
    32,
    116,
    114,
    97,
    99,
    101,
    100,
    105,
    115,
    32,
    114,
    101,
    108,
    97,
    116,
    101,
    100,
    32,
    116,
    111,
    98,
    101,
    99,
    97,
    109,
    101,
    32,
    111,
    110,
    101,
    32,
    111,
    102,
    105,
    115,
    32,
    102,
    114,
    101,
    113,
    117,
    101,
    110,
    116,
    108,
    121,
    108,
    105,
    118,
    105,
    110,
    103,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    111,
    114,
    101,
    116,
    105,
    99,
    97,
    108,
    108,
    121,
    70,
    111,
    108,
    108,
    111,
    119,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    82,
    101,
    118,
    111,
    108,
    117,
    116,
    105,
    111,
    110,
    97,
    114,
    121,
    103,
    111,
    118,
    101,
    114,
    110,
    109,
    101,
    110,
    116,
    32,
    105,
    110,
    105,
    115,
    32,
    100,
    101,
    116,
    101,
    114,
    109,
    105,
    110,
    101,
    100,
    116,
    104,
    101,
    32,
    112,
    111,
    108,
    105,
    116,
    105,
    99,
    97,
    108,
    105,
    110,
    116,
    114,
    111,
    100,
    117,
    99,
    101,
    100,
    32,
    105,
    110,
    115,
    117,
    102,
    102,
    105,
    99,
    105,
    101,
    110,
    116,
    32,
    116,
    111,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    105,
    111,
    110,
    34,
    62,
    115,
    104,
    111,
    114,
    116,
    32,
    115,
    116,
    111,
    114,
    105,
    101,
    115,
    115,
    101,
    112,
    97,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    97,
    115,
    32,
    116,
    111,
    32,
    119,
    104,
    101,
    116,
    104,
    101,
    114,
    107,
    110,
    111,
    119,
    110,
    32,
    102,
    111,
    114,
    32,
    105,
    116,
    115,
    119,
    97,
    115,
    32,
    105,
    110,
    105,
    116,
    105,
    97,
    108,
    108,
    121,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    58,
    98,
    108,
    111,
    99,
    107,
    105,
    115,
    32,
    97,
    110,
    32,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    116,
    104,
    101,
    32,
    112,
    114,
    105,
    110,
    99,
    105,
    112,
    97,
    108,
    99,
    111,
    110,
    115,
    105,
    115,
    116,
    115,
    32,
    111,
    102,
    32,
    97,
    114,
    101,
    99,
    111,
    103,
    110,
    105,
    122,
    101,
    100,
    32,
    97,
    115,
    47,
    98,
    111,
    100,
    121,
    62,
    60,
    47,
    104,
    116,
    109,
    108,
    62,
    97,
    32,
    115,
    117,
    98,
    115,
    116,
    97,
    110,
    116,
    105,
    97,
    108,
    114,
    101,
    99,
    111,
    110,
    115,
    116,
    114,
    117,
    99,
    116,
    101,
    100,
    104,
    101,
    97,
    100,
    32,
    111,
    102,
    32,
    115,
    116,
    97,
    116,
    101,
    114,
    101,
    115,
    105,
    115,
    116,
    97,
    110,
    99,
    101,
    32,
    116,
    111,
    117,
    110,
    100,
    101,
    114,
    103,
    114,
    97,
    100,
    117,
    97,
    116,
    101,
    84,
    104,
    101,
    114,
    101,
    32,
    97,
    114,
    101,
    32,
    116,
    119,
    111,
    103,
    114,
    97,
    118,
    105,
    116,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    97,
    114,
    101,
    32,
    100,
    101,
    115,
    99,
    114,
    105,
    98,
    101,
    100,
    105,
    110,
    116,
    101,
    110,
    116,
    105,
    111,
    110,
    97,
    108,
    108,
    121,
    115,
    101,
    114,
    118,
    101,
    100,
    32,
    97,
    115,
    32,
    116,
    104,
    101,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    104,
    101,
    97,
    100,
    101,
    114,
    111,
    112,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    32,
    116,
    111,
    102,
    117,
    110,
    100,
    97,
    109,
    101,
    110,
    116,
    97,
    108,
    108,
    121,
    100,
    111,
    109,
    105,
    110,
    97,
    116,
    101,
    100,
    32,
    116,
    104,
    101,
    97,
    110,
    100,
    32,
    116,
    104,
    101,
    32,
    111,
    116,
    104,
    101,
    114,
    97,
    108,
    108,
    105,
    97,
    110,
    99,
    101,
    32,
    119,
    105,
    116,
    104,
    119,
    97,
    115,
    32,
    102,
    111,
    114,
    99,
    101,
    100,
    32,
    116,
    111,
    114,
    101,
    115,
    112,
    101,
    99,
    116,
    105,
    118,
    101,
    108,
    121,
    44,
    97,
    110,
    100,
    32,
    112,
    111,
    108,
    105,
    116,
    105,
    99,
    97,
    108,
    105,
    110,
    32,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    32,
    111,
    102,
    112,
    101,
    111,
    112,
    108,
    101,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    50,
    48,
    116,
    104,
    32,
    99,
    101,
    110,
    116,
    117,
    114,
    121,
    46,
    97,
    110,
    100,
    32,
    112,
    117,
    98,
    108,
    105,
    115,
    104,
    101,
    100,
    108,
    111,
    97,
    100,
    67,
    104,
    97,
    114,
    116,
    98,
    101,
    97,
    116,
    116,
    111,
    32,
    117,
    110,
    100,
    101,
    114,
    115,
    116,
    97,
    110,
    100,
    109,
    101,
    109,
    98,
    101,
    114,
    32,
    115,
    116,
    97,
    116,
    101,
    115,
    101,
    110,
    118,
    105,
    114,
    111,
    110,
    109,
    101,
    110,
    116,
    97,
    108,
    102,
    105,
    114,
    115,
    116,
    32,
    104,
    97,
    108,
    102,
    32,
    111,
    102,
    99,
    111,
    117,
    110,
    116,
    114,
    105,
    101,
    115,
    32,
    97,
    110,
    100,
    97,
    114,
    99,
    104,
    105,
    116,
    101,
    99,
    116,
    117,
    114,
    97,
    108,
    98,
    101,
    32,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    101,
    100,
    99,
    104,
    97,
    114,
    97,
    99,
    116,
    101,
    114,
    105,
    122,
    101,
    100,
    99,
    108,
    101,
    97,
    114,
    73,
    110,
    116,
    101,
    114,
    118,
    97,
    108,
    97,
    117,
    116,
    104,
    111,
    114,
    105,
    116,
    97,
    116,
    105,
    118,
    101,
    70,
    101,
    100,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    119,
    97,
    115,
    32,
    115,
    117,
    99,
    99,
    101,
    101,
    100,
    101,
    100,
    97,
    110,
    100,
    32,
    116,
    104,
    101,
    114,
    101,
    32,
    97,
    114,
    101,
    97,
    32,
    99,
    111,
    110,
    115,
    101,
    113,
    117,
    101,
    110,
    99,
    101,
    116,
    104,
    101,
    32,
    80,
    114,
    101,
    115,
    105,
    100,
    101,
    110,
    116,
    97,
    108,
    115,
    111,
    32,
    105,
    110,
    99,
    108,
    117,
    100,
    101,
    100,
    102,
    114,
    101,
    101,
    32,
    115,
    111,
    102,
    116,
    119,
    97,
    114,
    101,
    115,
    117,
    99,
    99,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    111,
    102,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    101,
    100,
    32,
    116,
    104,
    101,
    119,
    97,
    115,
    32,
    100,
    101,
    115,
    116,
    114,
    111,
    121,
    101,
    100,
    97,
    119,
    97,
    121,
    32,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    101,
    59,
    10,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    60,
    97,
    108,
    116,
    104,
    111,
    117,
    103,
    104,
    32,
    116,
    104,
    101,
    121,
    102,
    111,
    108,
    108,
    111,
    119,
    101,
    100,
    32,
    98,
    121,
    32,
    97,
    109,
    111,
    114,
    101,
    32,
    112,
    111,
    119,
    101,
    114,
    102,
    117,
    108,
    114,
    101,
    115,
    117,
    108,
    116,
    101,
    100,
    32,
    105,
    110,
    32,
    97,
    85,
    110,
    105,
    118,
    101,
    114,
    115,
    105,
    116,
    121,
    32,
    111,
    102,
    72,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    32,
    109,
    97,
    110,
    121,
    116,
    104,
    101,
    32,
    112,
    114,
    101,
    115,
    105,
    100,
    101,
    110,
    116,
    72,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    32,
    115,
    111,
    109,
    101,
    105,
    115,
    32,
    116,
    104,
    111,
    117,
    103,
    104,
    116,
    32,
    116,
    111,
    117,
    110,
    116,
    105,
    108,
    32,
    116,
    104,
    101,
    32,
    101,
    110,
    100,
    119,
    97,
    115,
    32,
    97,
    110,
    110,
    111,
    117,
    110,
    99,
    101,
    100,
    97,
    114,
    101,
    32,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    116,
    97,
    108,
    115,
    111,
    32,
    105,
    110,
    99,
    108,
    117,
    100,
    101,
    115,
    62,
    60,
    105,
    110,
    112,
    117,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    116,
    104,
    101,
    32,
    99,
    101,
    110,
    116,
    101,
    114,
    32,
    111,
    102,
    32,
    68,
    79,
    32,
    78,
    79,
    84,
    32,
    65,
    76,
    84,
    69,
    82,
    117,
    115,
    101,
    100,
    32,
    116,
    111,
    32,
    114,
    101,
    102,
    101,
    114,
    116,
    104,
    101,
    109,
    101,
    115,
    47,
    63,
    115,
    111,
    114,
    116,
    61,
    116,
    104,
    97,
    116,
    32,
    104,
    97,
    100,
    32,
    98,
    101,
    101,
    110,
    116,
    104,
    101,
    32,
    98,
    97,
    115,
    105,
    115,
    32,
    102,
    111,
    114,
    104,
    97,
    115,
    32,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    101,
    100,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    115,
    117,
    109,
    109,
    101,
    114,
    99,
    111,
    109,
    112,
    97,
    114,
    97,
    116,
    105,
    118,
    101,
    108,
    121,
    100,
    101,
    115,
    99,
    114,
    105,
    98,
    101,
    100,
    32,
    116,
    104,
    101,
    115,
    117,
    99,
    104,
    32,
    97,
    115,
    32,
    116,
    104,
    111,
    115,
    101,
    116,
    104,
    101,
    32,
    114,
    101,
    115,
    117,
    108,
    116,
    105,
    110,
    103,
    105,
    115,
    32,
    105,
    109,
    112,
    111,
    115,
    115,
    105,
    98,
    108,
    101,
    118,
    97,
    114,
    105,
    111,
    117,
    115,
    32,
    111,
    116,
    104,
    101,
    114,
    83,
    111,
    117,
    116,
    104,
    32,
    65,
    102,
    114,
    105,
    99,
    97,
    110,
    104,
    97,
    118,
    101,
    32,
    116,
    104,
    101,
    32,
    115,
    97,
    109,
    101,
    101,
    102,
    102,
    101,
    99,
    116,
    105,
    118,
    101,
    110,
    101,
    115,
    115,
    105,
    110,
    32,
    119,
    104,
    105,
    99,
    104,
    32,
    99,
    97,
    115,
    101,
    59,
    32,
    116,
    101,
    120,
    116,
    45,
    97,
    108,
    105,
    103,
    110,
    58,
    115,
    116,
    114,
    117,
    99,
    116,
    117,
    114,
    101,
    32,
    97,
    110,
    100,
    59,
    32,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    58,
    114,
    101,
    103,
    97,
    114,
    100,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    101,
    100,
    32,
    116,
    104,
    101,
    105,
    115,
    32,
    97,
    108,
    115,
    111,
    32,
    107,
    110,
    111,
    119,
    110,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    109,
    97,
    114,
    103,
    105,
    110,
    105,
    110,
    99,
    108,
    117,
    100,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    98,
    97,
    104,
    97,
    115,
    97,
    32,
    77,
    101,
    108,
    97,
    121,
    117,
    110,
    111,
    114,
    115,
    107,
    32,
    98,
    111,
    107,
    109,
    195,
    165,
    108,
    110,
    111,
    114,
    115,
    107,
    32,
    110,
    121,
    110,
    111,
    114,
    115,
    107,
    115,
    108,
    111,
    118,
    101,
    110,
    197,
    161,
    196,
    141,
    105,
    110,
    97,
    105,
    110,
    116,
    101,
    114,
    110,
    97,
    99,
    105,
    111,
    110,
    97,
    108,
    99,
    97,
    108,
    105,
    102,
    105,
    99,
    97,
    99,
    105,
    195,
    179,
    110,
    99,
    111,
    109,
    117,
    110,
    105,
    99,
    97,
    99,
    105,
    195,
    179,
    110,
    99,
    111,
    110,
    115,
    116,
    114,
    117,
    99,
    99,
    105,
    195,
    179,
    110,
    34,
    62,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    100,
    105,
    115,
    97,
    109,
    98,
    105,
    103,
    117,
    97,
    116,
    105,
    111,
    110,
    68,
    111,
    109,
    97,
    105,
    110,
    78,
    97,
    109,
    101,
    39,
    44,
    32,
    39,
    97,
    100,
    109,
    105,
    110,
    105,
    115,
    116,
    114,
    97,
    116,
    105,
    111,
    110,
    115,
    105,
    109,
    117,
    108,
    116,
    97,
    110,
    101,
    111,
    117,
    115,
    108,
    121,
    116,
    114,
    97,
    110,
    115,
    112,
    111,
    114,
    116,
    97,
    116,
    105,
    111,
    110,
    73,
    110,
    116,
    101,
    114,
    110,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    32,
    109,
    97,
    114,
    103,
    105,
    110,
    45,
    98,
    111,
    116,
    116,
    111,
    109,
    58,
    114,
    101,
    115,
    112,
    111,
    110,
    115,
    105,
    98,
    105,
    108,
    105,
    116,
    121,
    60,
    33,
    91,
    101,
    110,
    100,
    105,
    102,
    93,
    45,
    45,
    62,
    10,
    60,
    47,
    62,
    60,
    109,
    101,
    116,
    97,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    105,
    109,
    112,
    108,
    101,
    109,
    101,
    110,
    116,
    97,
    116,
    105,
    111,
    110,
    105,
    110,
    102,
    114,
    97,
    115,
    116,
    114,
    117,
    99,
    116,
    117,
    114,
    101,
    114,
    101,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    97,
    116,
    105,
    111,
    110,
    98,
    111,
    114,
    100,
    101,
    114,
    45,
    98,
    111,
    116,
    116,
    111,
    109,
    58,
    60,
    47,
    104,
    101,
    97,
    100,
    62,
    10,
    60,
    98,
    111,
    100,
    121,
    62,
    61,
    104,
    116,
    116,
    112,
    37,
    51,
    65,
    37,
    50,
    70,
    37,
    50,
    70,
    60,
    102,
    111,
    114,
    109,
    32,
    109,
    101,
    116,
    104,
    111,
    100,
    61,
    34,
    109,
    101,
    116,
    104,
    111,
    100,
    61,
    34,
    112,
    111,
    115,
    116,
    34,
    32,
    47,
    102,
    97,
    118,
    105,
    99,
    111,
    110,
    46,
    105,
    99,
    111,
    34,
    32,
    125,
    41,
    59,
    10,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    46,
    115,
    101,
    116,
    65,
    116,
    116,
    114,
    105,
    98,
    117,
    116,
    101,
    40,
    65,
    100,
    109,
    105,
    110,
    105,
    115,
    116,
    114,
    97,
    116,
    105,
    111,
    110,
    61,
    32,
    110,
    101,
    119,
    32,
    65,
    114,
    114,
    97,
    121,
    40,
    41,
    59,
    60,
    33,
    91,
    101,
    110,
    100,
    105,
    102,
    93,
    45,
    45,
    62,
    13,
    10,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    58,
    98,
    108,
    111,
    99,
    107,
    59,
    85,
    110,
    102,
    111,
    114,
    116,
    117,
    110,
    97,
    116,
    101,
    108,
    121,
    44,
    34,
    62,
    38,
    110,
    98,
    115,
    112,
    59,
    60,
    47,
    100,
    105,
    118,
    62,
    47,
    102,
    97,
    118,
    105,
    99,
    111,
    110,
    46,
    105,
    99,
    111,
    34,
    62,
    61,
    39,
    115,
    116,
    121,
    108,
    101,
    115,
    104,
    101,
    101,
    116,
    39,
    32,
    105,
    100,
    101,
    110,
    116,
    105,
    102,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    44,
    32,
    102,
    111,
    114,
    32,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    44,
    60,
    108,
    105,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    47,
    97,
    110,
    32,
    97,
    108,
    116,
    101,
    114,
    110,
    97,
    116,
    105,
    118,
    101,
    97,
    115,
    32,
    97,
    32,
    114,
    101,
    115,
    117,
    108,
    116,
    32,
    111,
    102,
    112,
    116,
    34,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    116,
    121,
    112,
    101,
    61,
    34,
    115,
    117,
    98,
    109,
    105,
    116,
    34,
    32,
    10,
    40,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    41,
    32,
    123,
    114,
    101,
    99,
    111,
    109,
    109,
    101,
    110,
    100,
    97,
    116,
    105,
    111,
    110,
    102,
    111,
    114,
    109,
    32,
    97,
    99,
    116,
    105,
    111,
    110,
    61,
    34,
    47,
    116,
    114,
    97,
    110,
    115,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    114,
    101,
    99,
    111,
    110,
    115,
    116,
    114,
    117,
    99,
    116,
    105,
    111,
    110,
    46,
    115,
    116,
    121,
    108,
    101,
    46,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    32,
    65,
    99,
    99,
    111,
    114,
    100,
    105,
    110,
    103,
    32,
    116,
    111,
    32,
    104,
    105,
    100,
    100,
    101,
    110,
    34,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    97,
    108,
    111,
    110,
    103,
    32,
    119,
    105,
    116,
    104,
    32,
    116,
    104,
    101,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    98,
    111,
    100,
    121,
    46,
    97,
    112,
    112,
    114,
    111,
    120,
    105,
    109,
    97,
    116,
    101,
    108,
    121,
    32,
    67,
    111,
    109,
    109,
    117,
    110,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    115,
    112,
    111,
    115,
    116,
    34,
    32,
    97,
    99,
    116,
    105,
    111,
    110,
    61,
    34,
    109,
    101,
    97,
    110,
    105,
    110,
    103,
    32,
    38,
    113,
    117,
    111,
    116,
    59,
    45,
    45,
    60,
    33,
    91,
    101,
    110,
    100,
    105,
    102,
    93,
    45,
    45,
    62,
    80,
    114,
    105,
    109,
    101,
    32,
    77,
    105,
    110,
    105,
    115,
    116,
    101,
    114,
    99,
    104,
    97,
    114,
    97,
    99,
    116,
    101,
    114,
    105,
    115,
    116,
    105,
    99,
    60,
    47,
    97,
    62,
    32,
    60,
    97,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    116,
    104,
    101,
    32,
    104,
    105,
    115,
    116,
    111,
    114,
    121,
    32,
    111,
    102,
    32,
    111,
    110,
    109,
    111,
    117,
    115,
    101,
    111,
    118,
    101,
    114,
    61,
    34,
    116,
    104,
    101,
    32,
    103,
    111,
    118,
    101,
    114,
    110,
    109,
    101,
    110,
    116,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    115,
    58,
    47,
    47,
    119,
    97,
    115,
    32,
    111,
    114,
    105,
    103,
    105,
    110,
    97,
    108,
    108,
    121,
    119,
    97,
    115,
    32,
    105,
    110,
    116,
    114,
    111,
    100,
    117,
    99,
    101,
    100,
    99,
    108,
    97,
    115,
    115,
    105,
    102,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    114,
    101,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    97,
    116,
    105,
    118,
    101,
    97,
    114,
    101,
    32,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    101,
    100,
    60,
    33,
    91,
    101,
    110,
    100,
    105,
    102,
    93,
    45,
    45,
    62,
    10,
    10,
    100,
    101,
    112,
    101,
    110,
    100,
    115,
    32,
    111,
    110,
    32,
    116,
    104,
    101,
    85,
    110,
    105,
    118,
    101,
    114,
    115,
    105,
    116,
    121,
    32,
    111,
    102,
    32,
    105,
    110,
    32,
    99,
    111,
    110,
    116,
    114,
    97,
    115,
    116,
    32,
    116,
    111,
    32,
    112,
    108,
    97,
    99,
    101,
    104,
    111,
    108,
    100,
    101,
    114,
    61,
    34,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    99,
    97,
    115,
    101,
    32,
    111,
    102,
    105,
    110,
    116,
    101,
    114,
    110,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    32,
    99,
    111,
    110,
    115,
    116,
    105,
    116,
    117,
    116,
    105,
    111,
    110,
    97,
    108,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    98,
    111,
    114,
    100,
    101,
    114,
    45,
    58,
    32,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    41,
    32,
    123,
    66,
    101,
    99,
    97,
    117,
    115,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    45,
    115,
    116,
    114,
    105,
    99,
    116,
    46,
    100,
    116,
    100,
    34,
    62,
    10,
    60,
    116,
    97,
    98,
    108,
    101,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    97,
    99,
    99,
    111,
    109,
    112,
    97,
    110,
    105,
    101,
    100,
    32,
    98,
    121,
    97,
    99,
    99,
    111,
    117,
    110,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    115,
    114,
    99,
    61,
    34,
    47,
    110,
    97,
    116,
    117,
    114,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    116,
    104,
    101,
    32,
    112,
    101,
    111,
    112,
    108,
    101,
    32,
    105,
    110,
    32,
    105,
    110,
    32,
    97,
    100,
    100,
    105,
    116,
    105,
    111,
    110,
    32,
    116,
    111,
    115,
    41,
    59,
    32,
    106,
    115,
    46,
    105,
    100,
    32,
    61,
    32,
    105,
    100,
    34,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    49,
    48,
    48,
    37,
    34,
    114,
    101,
    103,
    97,
    114,
    100,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    32,
    82,
    111,
    109,
    97,
    110,
    32,
    67,
    97,
    116,
    104,
    111,
    108,
    105,
    99,
    97,
    110,
    32,
    105,
    110,
    100,
    101,
    112,
    101,
    110,
    100,
    101,
    110,
    116,
    102,
    111,
    108,
    108,
    111,
    119,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    32,
    46,
    103,
    105,
    102,
    34,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    49,
    116,
    104,
    101,
    32,
    102,
    111,
    108,
    108,
    111,
    119,
    105,
    110,
    103,
    32,
    100,
    105,
    115,
    99,
    114,
    105,
    109,
    105,
    110,
    97,
    116,
    105,
    111,
    110,
    97,
    114,
    99,
    104,
    97,
    101,
    111,
    108,
    111,
    103,
    105,
    99,
    97,
    108,
    112,
    114,
    105,
    109,
    101,
    32,
    109,
    105,
    110,
    105,
    115,
    116,
    101,
    114,
    46,
    106,
    115,
    34,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    99,
    111,
    109,
    98,
    105,
    110,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    109,
    97,
    114,
    103,
    105,
    110,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    99,
    114,
    101,
    97,
    116,
    101,
    69,
    108,
    101,
    109,
    101,
    110,
    116,
    40,
    119,
    46,
    97,
    116,
    116,
    97,
    99,
    104,
    69,
    118,
    101,
    110,
    116,
    40,
    60,
    47,
    97,
    62,
    60,
    47,
    116,
    100,
    62,
    60,
    47,
    116,
    114,
    62,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    115,
    58,
    47,
    47,
    97,
    73,
    110,
    32,
    112,
    97,
    114,
    116,
    105,
    99,
    117,
    108,
    97,
    114,
    44,
    32,
    97,
    108,
    105,
    103,
    110,
    61,
    34,
    108,
    101,
    102,
    116,
    34,
    32,
    67,
    122,
    101,
    99,
    104,
    32,
    82,
    101,
    112,
    117,
    98,
    108,
    105,
    99,
    85,
    110,
    105,
    116,
    101,
    100,
    32,
    75,
    105,
    110,
    103,
    100,
    111,
    109,
    99,
    111,
    114,
    114,
    101,
    115,
    112,
    111,
    110,
    100,
    101,
    110,
    99,
    101,
    99,
    111,
    110,
    99,
    108,
    117,
    100,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    46,
    104,
    116,
    109,
    108,
    34,
    32,
    116,
    105,
    116,
    108,
    101,
    61,
    34,
    40,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    32,
    40,
    41,
    32,
    123,
    99,
    111,
    109,
    101,
    115,
    32,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    101,
    97,
    112,
    112,
    108,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    60,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    115,
    98,
    101,
    108,
    105,
    101,
    118,
    101,
    100,
    32,
    116,
    111,
    32,
    98,
    101,
    101,
    109,
    101,
    110,
    116,
    40,
    39,
    115,
    99,
    114,
    105,
    112,
    116,
    39,
    60,
    47,
    97,
    62,
    10,
    60,
    47,
    108,
    105,
    62,
    10,
    60,
    108,
    105,
    118,
    101,
    114,
    121,
    32,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    62,
    60,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    111,
    112,
    116,
    105,
    111,
    110,
    32,
    118,
    97,
    108,
    117,
    101,
    61,
    34,
    40,
    97,
    108,
    115,
    111,
    32,
    107,
    110,
    111,
    119,
    110,
    32,
    97,
    115,
    9,
    60,
    108,
    105,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    62,
    60,
    105,
    110,
    112,
    117,
    116,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    115,
    101,
    112,
    97,
    114,
    97,
    116,
    101,
    100,
    32,
    102,
    114,
    111,
    109,
    114,
    101,
    102,
    101,
    114,
    114,
    101,
    100,
    32,
    116,
    111,
    32,
    97,
    115,
    32,
    118,
    97,
    108,
    105,
    103,
    110,
    61,
    34,
    116,
    111,
    112,
    34,
    62,
    102,
    111,
    117,
    110,
    100,
    101,
    114,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    97,
    116,
    116,
    101,
    109,
    112,
    116,
    105,
    110,
    103,
    32,
    116,
    111,
    32,
    99,
    97,
    114,
    98,
    111,
    110,
    32,
    100,
    105,
    111,
    120,
    105,
    100,
    101,
    10,
    10,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    115,
    101,
    97,
    114,
    99,
    104,
    45,
    47,
    98,
    111,
    100,
    121,
    62,
    10,
    60,
    47,
    104,
    116,
    109,
    108,
    62,
    111,
    112,
    112,
    111,
    114,
    116,
    117,
    110,
    105,
    116,
    121,
    32,
    116,
    111,
    99,
    111,
    109,
    109,
    117,
    110,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    115,
    60,
    47,
    104,
    101,
    97,
    100,
    62,
    13,
    10,
    60,
    98,
    111,
    100,
    121,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    119,
    105,
    100,
    116,
    104,
    58,
    84,
    105,
    225,
    186,
    191,
    110,
    103,
    32,
    86,
    105,
    225,
    187,
    135,
    116,
    99,
    104,
    97,
    110,
    103,
    101,
    115,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    98,
    111,
    114,
    100,
    101,
    114,
    45,
    99,
    111,
    108,
    111,
    114,
    58,
    35,
    48,
    34,
    32,
    98,
    111,
    114,
    100,
    101,
    114,
    61,
    34,
    48,
    34,
    32,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    119,
    97,
    115,
    32,
    100,
    105,
    115,
    99,
    111,
    118,
    101,
    114,
    101,
    100,
    34,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    34,
    32,
    41,
    59,
    10,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    10,
    68,
    101,
    112,
    97,
    114,
    116,
    109,
    101,
    110,
    116,
    32,
    111,
    102,
    32,
    101,
    99,
    99,
    108,
    101,
    115,
    105,
    97,
    115,
    116,
    105,
    99,
    97,
    108,
    116,
    104,
    101,
    114,
    101,
    32,
    104,
    97,
    115,
    32,
    98,
    101,
    101,
    110,
    114,
    101,
    115,
    117,
    108,
    116,
    105,
    110,
    103,
    32,
    102,
    114,
    111,
    109,
    60,
    47,
    98,
    111,
    100,
    121,
    62,
    60,
    47,
    104,
    116,
    109,
    108,
    62,
    104,
    97,
    115,
    32,
    110,
    101,
    118,
    101,
    114,
    32,
    98,
    101,
    101,
    110,
    116,
    104,
    101,
    32,
    102,
    105,
    114,
    115,
    116,
    32,
    116,
    105,
    109,
    101,
    105,
    110,
    32,
    114,
    101,
    115,
    112,
    111,
    110,
    115,
    101,
    32,
    116,
    111,
    97,
    117,
    116,
    111,
    109,
    97,
    116,
    105,
    99,
    97,
    108,
    108,
    121,
    32,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    10,
    60,
    100,
    105,
    118,
    32,
    105,
    119,
    97,
    115,
    32,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    101,
    100,
    112,
    101,
    114,
    99,
    101,
    110,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    34,
    32,
    47,
    62,
    60,
    47,
    97,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    99,
    111,
    108,
    108,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    100,
    101,
    115,
    99,
    101,
    110,
    100,
    101,
    100,
    32,
    102,
    114,
    111,
    109,
    115,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    97,
    99,
    99,
    101,
    112,
    116,
    45,
    99,
    104,
    97,
    114,
    115,
    101,
    116,
    116,
    111,
    32,
    98,
    101,
    32,
    99,
    111,
    110,
    102,
    117,
    115,
    101,
    100,
    109,
    101,
    109,
    98,
    101,
    114,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    45,
    114,
    105,
    103,
    104,
    116,
    58,
    116,
    114,
    97,
    110,
    115,
    108,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    105,
    110,
    116,
    101,
    114,
    112,
    114,
    101,
    116,
    97,
    116,
    105,
    111,
    110,
    32,
    104,
    114,
    101,
    102,
    61,
    39,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    104,
    101,
    116,
    104,
    101,
    114,
    32,
    111,
    114,
    32,
    110,
    111,
    116,
    84,
    104,
    101,
    114,
    101,
    32,
    97,
    114,
    101,
    32,
    97,
    108,
    115,
    111,
    116,
    104,
    101,
    114,
    101,
    32,
    97,
    114,
    101,
    32,
    109,
    97,
    110,
    121,
    97,
    32,
    115,
    109,
    97,
    108,
    108,
    32,
    110,
    117,
    109,
    98,
    101,
    114,
    111,
    116,
    104,
    101,
    114,
    32,
    112,
    97,
    114,
    116,
    115,
    32,
    111,
    102,
    105,
    109,
    112,
    111,
    115,
    115,
    105,
    98,
    108,
    101,
    32,
    116,
    111,
    32,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    98,
    117,
    116,
    116,
    111,
    110,
    108,
    111,
    99,
    97,
    116,
    101,
    100,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    46,
    32,
    72,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    32,
    116,
    104,
    101,
    97,
    110,
    100,
    32,
    101,
    118,
    101,
    110,
    116,
    117,
    97,
    108,
    108,
    121,
    65,
    116,
    32,
    116,
    104,
    101,
    32,
    101,
    110,
    100,
    32,
    111,
    102,
    32,
    98,
    101,
    99,
    97,
    117,
    115,
    101,
    32,
    111,
    102,
    32,
    105,
    116,
    115,
    114,
    101,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    115,
    32,
    116,
    104,
    101,
    60,
    102,
    111,
    114,
    109,
    32,
    97,
    99,
    116,
    105,
    111,
    110,
    61,
    34,
    32,
    109,
    101,
    116,
    104,
    111,
    100,
    61,
    34,
    112,
    111,
    115,
    116,
    34,
    105,
    116,
    32,
    105,
    115,
    32,
    112,
    111,
    115,
    115,
    105,
    98,
    108,
    101,
    109,
    111,
    114,
    101,
    32,
    108,
    105,
    107,
    101,
    108,
    121,
    32,
    116,
    111,
    97,
    110,
    32,
    105,
    110,
    99,
    114,
    101,
    97,
    115,
    101,
    32,
    105,
    110,
    104,
    97,
    118,
    101,
    32,
    97,
    108,
    115,
    111,
    32,
    98,
    101,
    101,
    110,
    99,
    111,
    114,
    114,
    101,
    115,
    112,
    111,
    110,
    100,
    115,
    32,
    116,
    111,
    97,
    110,
    110,
    111,
    117,
    110,
    99,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    97,
    108,
    105,
    103,
    110,
    61,
    34,
    114,
    105,
    103,
    104,
    116,
    34,
    62,
    109,
    97,
    110,
    121,
    32,
    99,
    111,
    117,
    110,
    116,
    114,
    105,
    101,
    115,
    102,
    111,
    114,
    32,
    109,
    97,
    110,
    121,
    32,
    121,
    101,
    97,
    114,
    115,
    101,
    97,
    114,
    108,
    105,
    101,
    115,
    116,
    32,
    107,
    110,
    111,
    119,
    110,
    98,
    101,
    99,
    97,
    117,
    115,
    101,
    32,
    105,
    116,
    32,
    119,
    97,
    115,
    112,
    116,
    34,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    13,
    32,
    118,
    97,
    108,
    105,
    103,
    110,
    61,
    34,
    116,
    111,
    112,
    34,
    32,
    105,
    110,
    104,
    97,
    98,
    105,
    116,
    97,
    110,
    116,
    115,
    32,
    111,
    102,
    102,
    111,
    108,
    108,
    111,
    119,
    105,
    110,
    103,
    32,
    121,
    101,
    97,
    114,
    13,
    10,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    109,
    105,
    108,
    108,
    105,
    111,
    110,
    32,
    112,
    101,
    111,
    112,
    108,
    101,
    99,
    111,
    110,
    116,
    114,
    111,
    118,
    101,
    114,
    115,
    105,
    97,
    108,
    32,
    99,
    111,
    110,
    99,
    101,
    114,
    110,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    97,
    114,
    103,
    117,
    101,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    103,
    111,
    118,
    101,
    114,
    110,
    109,
    101,
    110,
    116,
    32,
    97,
    110,
    100,
    97,
    32,
    114,
    101,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    32,
    116,
    111,
    116,
    114,
    97,
    110,
    115,
    102,
    101,
    114,
    114,
    101,
    100,
    32,
    116,
    111,
    100,
    101,
    115,
    99,
    114,
    105,
    98,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    99,
    111,
    108,
    111,
    114,
    58,
    97,
    108,
    116,
    104,
    111,
    117,
    103,
    104,
    32,
    116,
    104,
    101,
    114,
    101,
    98,
    101,
    115,
    116,
    32,
    107,
    110,
    111,
    119,
    110,
    32,
    102,
    111,
    114,
    115,
    117,
    98,
    109,
    105,
    116,
    34,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    109,
    117,
    108,
    116,
    105,
    112,
    108,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    109,
    111,
    114,
    101,
    32,
    116,
    104,
    97,
    110,
    32,
    111,
    110,
    101,
    32,
    114,
    101,
    99,
    111,
    103,
    110,
    105,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    67,
    111,
    117,
    110,
    99,
    105,
    108,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    101,
    100,
    105,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    32,
    60,
    109,
    101,
    116,
    97,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    69,
    110,
    116,
    101,
    114,
    116,
    97,
    105,
    110,
    109,
    101,
    110,
    116,
    32,
    97,
    119,
    97,
    121,
    32,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    101,
    32,
    59,
    109,
    97,
    114,
    103,
    105,
    110,
    45,
    114,
    105,
    103,
    104,
    116,
    58,
    97,
    116,
    32,
    116,
    104,
    101,
    32,
    116,
    105,
    109,
    101,
    32,
    111,
    102,
    105,
    110,
    118,
    101,
    115,
    116,
    105,
    103,
    97,
    116,
    105,
    111,
    110,
    115,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    97,
    110,
    100,
    32,
    109,
    97,
    110,
    121,
    32,
    111,
    116,
    104,
    101,
    114,
    97,
    108,
    116,
    104,
    111,
    117,
    103,
    104,
    32,
    105,
    116,
    32,
    105,
    115,
    98,
    101,
    103,
    105,
    110,
    110,
    105,
    110,
    103,
    32,
    119,
    105,
    116,
    104,
    32,
    60,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    100,
    101,
    115,
    99,
    101,
    110,
    100,
    97,
    110,
    116,
    115,
    32,
    111,
    102,
    60,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    105,
    32,
    97,
    108,
    105,
    103,
    110,
    61,
    34,
    114,
    105,
    103,
    104,
    116,
    34,
    60,
    47,
    104,
    101,
    97,
    100,
    62,
    10,
    60,
    98,
    111,
    100,
    121,
    32,
    97,
    115,
    112,
    101,
    99,
    116,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    104,
    97,
    115,
    32,
    115,
    105,
    110,
    99,
    101,
    32,
    98,
    101,
    101,
    110,
    69,
    117,
    114,
    111,
    112,
    101,
    97,
    110,
    32,
    85,
    110,
    105,
    111,
    110,
    114,
    101,
    109,
    105,
    110,
    105,
    115,
    99,
    101,
    110,
    116,
    32,
    111,
    102,
    109,
    111,
    114,
    101,
    32,
    100,
    105,
    102,
    102,
    105,
    99,
    117,
    108,
    116,
    86,
    105,
    99,
    101,
    32,
    80,
    114,
    101,
    115,
    105,
    100,
    101,
    110,
    116,
    99,
    111,
    109,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    112,
    97,
    115,
    115,
    101,
    100,
    32,
    116,
    104,
    114,
    111,
    117,
    103,
    104,
    109,
    111,
    114,
    101,
    32,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    116,
    102,
    111,
    110,
    116,
    45,
    115,
    105,
    122,
    101,
    58,
    49,
    49,
    112,
    120,
    101,
    120,
    112,
    108,
    97,
    110,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    116,
    104,
    101,
    32,
    99,
    111,
    110,
    99,
    101,
    112,
    116,
    32,
    111,
    102,
    119,
    114,
    105,
    116,
    116,
    101,
    110,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    9,
    60,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    105,
    115,
    32,
    111,
    110,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    114,
    101,
    115,
    101,
    109,
    98,
    108,
    97,
    110,
    99,
    101,
    32,
    116,
    111,
    111,
    110,
    32,
    116,
    104,
    101,
    32,
    103,
    114,
    111,
    117,
    110,
    100,
    115,
    119,
    104,
    105,
    99,
    104,
    32,
    99,
    111,
    110,
    116,
    97,
    105,
    110,
    115,
    105,
    110,
    99,
    108,
    117,
    100,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    32,
    100,
    101,
    102,
    105,
    110,
    101,
    100,
    32,
    98,
    121,
    32,
    116,
    104,
    101,
    112,
    117,
    98,
    108,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    109,
    101,
    97,
    110,
    115,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    111,
    117,
    116,
    115,
    105,
    100,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    60,
    105,
    110,
    112,
    117,
    116,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    60,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    116,
    40,
    77,
    97,
    116,
    104,
    46,
    114,
    97,
    110,
    100,
    111,
    109,
    40,
    41,
    109,
    111,
    115,
    116,
    32,
    112,
    114,
    111,
    109,
    105,
    110,
    101,
    110,
    116,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    67,
    111,
    110,
    115,
    116,
    97,
    110,
    116,
    105,
    110,
    111,
    112,
    108,
    101,
    119,
    101,
    114,
    101,
    32,
    112,
    117,
    98,
    108,
    105,
    115,
    104,
    101,
    100,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    115,
    101,
    97,
    112,
    112,
    101,
    97,
    114,
    115,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    49,
    34,
    32,
    104,
    101,
    105,
    103,
    104,
    116,
    61,
    34,
    49,
    34,
    32,
    109,
    111,
    115,
    116,
    32,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    116,
    119,
    104,
    105,
    99,
    104,
    32,
    105,
    110,
    99,
    108,
    117,
    100,
    101,
    115,
    119,
    104,
    105,
    99,
    104,
    32,
    104,
    97,
    100,
    32,
    98,
    101,
    101,
    110,
    100,
    101,
    115,
    116,
    114,
    117,
    99,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    116,
    104,
    101,
    32,
    112,
    111,
    112,
    117,
    108,
    97,
    116,
    105,
    111,
    110,
    10,
    9,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    112,
    111,
    115,
    115,
    105,
    98,
    105,
    108,
    105,
    116,
    121,
    32,
    111,
    102,
    115,
    111,
    109,
    101,
    116,
    105,
    109,
    101,
    115,
    32,
    117,
    115,
    101,
    100,
    97,
    112,
    112,
    101,
    97,
    114,
    32,
    116,
    111,
    32,
    104,
    97,
    118,
    101,
    115,
    117,
    99,
    99,
    101,
    115,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    105,
    110,
    116,
    101,
    110,
    100,
    101,
    100,
    32,
    116,
    111,
    32,
    98,
    101,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    99,
    108,
    101,
    97,
    114,
    58,
    98,
    13,
    10,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    13,
    10,
    60,
    119,
    97,
    115,
    32,
    102,
    111,
    117,
    110,
    100,
    101,
    100,
    32,
    105,
    110,
    105,
    110,
    116,
    101,
    114,
    118,
    105,
    101,
    119,
    32,
    119,
    105,
    116,
    104,
    95,
    105,
    100,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    99,
    97,
    112,
    105,
    116,
    97,
    108,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    13,
    10,
    60,
    108,
    105,
    110,
    107,
    32,
    114,
    101,
    108,
    61,
    34,
    115,
    114,
    101,
    108,
    101,
    97,
    115,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    112,
    111,
    105,
    110,
    116,
    32,
    111,
    117,
    116,
    32,
    116,
    104,
    97,
    116,
    120,
    77,
    76,
    72,
    116,
    116,
    112,
    82,
    101,
    113,
    117,
    101,
    115,
    116,
    97,
    110,
    100,
    32,
    115,
    117,
    98,
    115,
    101,
    113,
    117,
    101,
    110,
    116,
    115,
    101,
    99,
    111,
    110,
    100,
    32,
    108,
    97,
    114,
    103,
    101,
    115,
    116,
    118,
    101,
    114,
    121,
    32,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    116,
    115,
    112,
    101,
    99,
    105,
    102,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    115,
    115,
    117,
    114,
    102,
    97,
    99,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    97,
    112,
    112,
    108,
    105,
    101,
    100,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    102,
    111,
    114,
    101,
    105,
    103,
    110,
    32,
    112,
    111,
    108,
    105,
    99,
    121,
    95,
    115,
    101,
    116,
    68,
    111,
    109,
    97,
    105,
    110,
    78,
    97,
    109,
    101,
    101,
    115,
    116,
    97,
    98,
    108,
    105,
    115,
    104,
    101,
    100,
    32,
    105,
    110,
    105,
    115,
    32,
    98,
    101,
    108,
    105,
    101,
    118,
    101,
    100,
    32,
    116,
    111,
    73,
    110,
    32,
    97,
    100,
    100,
    105,
    116,
    105,
    111,
    110,
    32,
    116,
    111,
    109,
    101,
    97,
    110,
    105,
    110,
    103,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    105,
    115,
    32,
    110,
    97,
    109,
    101,
    100,
    32,
    97,
    102,
    116,
    101,
    114,
    116,
    111,
    32,
    112,
    114,
    111,
    116,
    101,
    99,
    116,
    32,
    116,
    104,
    101,
    105,
    115,
    32,
    114,
    101,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    101,
    100,
    68,
    101,
    99,
    108,
    97,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    109,
    111,
    114,
    101,
    32,
    101,
    102,
    102,
    105,
    99,
    105,
    101,
    110,
    116,
    67,
    108,
    97,
    115,
    115,
    105,
    102,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    111,
    116,
    104,
    101,
    114,
    32,
    102,
    111,
    114,
    109,
    115,
    32,
    111,
    102,
    104,
    101,
    32,
    114,
    101,
    116,
    117,
    114,
    110,
    101,
    100,
    32,
    116,
    111,
    60,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    99,
    112,
    101,
    114,
    102,
    111,
    114,
    109,
    97,
    110,
    99,
    101,
    32,
    111,
    102,
    40,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    41,
    32,
    123,
    13,
    105,
    102,
    32,
    97,
    110,
    100,
    32,
    111,
    110,
    108,
    121,
    32,
    105,
    102,
    114,
    101,
    103,
    105,
    111,
    110,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    108,
    101,
    97,
    100,
    105,
    110,
    103,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    114,
    101,
    108,
    97,
    116,
    105,
    111,
    110,
    115,
    32,
    119,
    105,
    116,
    104,
    85,
    110,
    105,
    116,
    101,
    100,
    32,
    78,
    97,
    116,
    105,
    111,
    110,
    115,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    104,
    101,
    105,
    103,
    104,
    116,
    58,
    111,
    116,
    104,
    101,
    114,
    32,
    116,
    104,
    97,
    110,
    32,
    116,
    104,
    101,
    121,
    112,
    101,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    65,
    115,
    115,
    111,
    99,
    105,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    10,
    60,
    47,
    104,
    101,
    97,
    100,
    62,
    10,
    60,
    98,
    111,
    100,
    121,
    108,
    111,
    99,
    97,
    116,
    101,
    100,
    32,
    111,
    110,
    32,
    116,
    104,
    101,
    105,
    115,
    32,
    114,
    101,
    102,
    101,
    114,
    114,
    101,
    100,
    32,
    116,
    111,
    40,
    105,
    110,
    99,
    108,
    117,
    100,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    99,
    111,
    110,
    99,
    101,
    110,
    116,
    114,
    97,
    116,
    105,
    111,
    110,
    115,
    116,
    104,
    101,
    32,
    105,
    110,
    100,
    105,
    118,
    105,
    100,
    117,
    97,
    108,
    97,
    109,
    111,
    110,
    103,
    32,
    116,
    104,
    101,
    32,
    109,
    111,
    115,
    116,
    116,
    104,
    97,
    110,
    32,
    97,
    110,
    121,
    32,
    111,
    116,
    104,
    101,
    114,
    47,
    62,
    10,
    60,
    108,
    105,
    110,
    107,
    32,
    114,
    101,
    108,
    61,
    34,
    32,
    114,
    101,
    116,
    117,
    114,
    110,
    32,
    102,
    97,
    108,
    115,
    101,
    59,
    116,
    104,
    101,
    32,
    112,
    117,
    114,
    112,
    111,
    115,
    101,
    32,
    111,
    102,
    116,
    104,
    101,
    32,
    97,
    98,
    105,
    108,
    105,
    116,
    121,
    32,
    116,
    111,
    59,
    99,
    111,
    108,
    111,
    114,
    58,
    35,
    102,
    102,
    102,
    125,
    10,
    46,
    10,
    60,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    116,
    104,
    101,
    32,
    115,
    117,
    98,
    106,
    101,
    99,
    116,
    32,
    111,
    102,
    100,
    101,
    102,
    105,
    110,
    105,
    116,
    105,
    111,
    110,
    115,
    32,
    111,
    102,
    62,
    13,
    10,
    60,
    108,
    105,
    110,
    107,
    32,
    114,
    101,
    108,
    61,
    34,
    99,
    108,
    97,
    105,
    109,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    104,
    97,
    118,
    101,
    32,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    101,
    100,
    60,
    116,
    97,
    98,
    108,
    101,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    99,
    101,
    108,
    101,
    98,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    70,
    111,
    108,
    108,
    111,
    119,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    32,
    116,
    111,
    32,
    100,
    105,
    115,
    116,
    105,
    110,
    103,
    117,
    105,
    115,
    104,
    60,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    98,
    116,
    97,
    107,
    101,
    115,
    32,
    112,
    108,
    97,
    99,
    101,
    32,
    105,
    110,
    117,
    110,
    100,
    101,
    114,
    32,
    116,
    104,
    101,
    32,
    110,
    97,
    109,
    101,
    110,
    111,
    116,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    62,
    60,
    33,
    91,
    101,
    110,
    100,
    105,
    102,
    93,
    45,
    45,
    62,
    10,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    109,
    97,
    114,
    103,
    105,
    110,
    45,
    105,
    110,
    115,
    116,
    101,
    97,
    100,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    105,
    110,
    116,
    114,
    111,
    100,
    117,
    99,
    101,
    100,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    32,
    111,
    102,
    105,
    110,
    99,
    114,
    101,
    97,
    115,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    115,
    32,
    105,
    110,
    101,
    115,
    116,
    105,
    109,
    97,
    116,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    101,
    115,
    112,
    101,
    99,
    105,
    97,
    108,
    108,
    121,
    32,
    116,
    104,
    101,
    47,
    100,
    105,
    118,
    62,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    119,
    97,
    115,
    32,
    101,
    118,
    101,
    110,
    116,
    117,
    97,
    108,
    108,
    121,
    116,
    104,
    114,
    111,
    117,
    103,
    104,
    111,
    117,
    116,
    32,
    104,
    105,
    115,
    116,
    104,
    101,
    32,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    115,
    111,
    109,
    101,
    116,
    104,
    105,
    110,
    103,
    32,
    116,
    104,
    97,
    116,
    115,
    112,
    97,
    110,
    62,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    47,
    115,
    105,
    103,
    110,
    105,
    102,
    105,
    99,
    97,
    110,
    116,
    108,
    121,
    32,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    13,
    10,
    13,
    10,
    101,
    110,
    118,
    105,
    114,
    111,
    110,
    109,
    101,
    110,
    116,
    97,
    108,
    32,
    116,
    111,
    32,
    112,
    114,
    101,
    118,
    101,
    110,
    116,
    32,
    116,
    104,
    101,
    104,
    97,
    118,
    101,
    32,
    98,
    101,
    101,
    110,
    32,
    117,
    115,
    101,
    100,
    101,
    115,
    112,
    101,
    99,
    105,
    97,
    108,
    108,
    121,
    32,
    102,
    111,
    114,
    117,
    110,
    100,
    101,
    114,
    115,
    116,
    97,
    110,
    100,
    32,
    116,
    104,
    101,
    105,
    115,
    32,
    101,
    115,
    115,
    101,
    110,
    116,
    105,
    97,
    108,
    108,
    121,
    119,
    101,
    114,
    101,
    32,
    116,
    104,
    101,
    32,
    102,
    105,
    114,
    115,
    116,
    105,
    115,
    32,
    116,
    104,
    101,
    32,
    108,
    97,
    114,
    103,
    101,
    115,
    116,
    104,
    97,
    118,
    101,
    32,
    98,
    101,
    101,
    110,
    32,
    109,
    97,
    100,
    101,
    34,
    32,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    105,
    110,
    116,
    101,
    114,
    112,
    114,
    101,
    116,
    101,
    100,
    32,
    97,
    115,
    115,
    101,
    99,
    111,
    110,
    100,
    32,
    104,
    97,
    108,
    102,
    32,
    111,
    102,
    99,
    114,
    111,
    108,
    108,
    105,
    110,
    103,
    61,
    34,
    110,
    111,
    34,
    32,
    105,
    115,
    32,
    99,
    111,
    109,
    112,
    111,
    115,
    101,
    100,
    32,
    111,
    102,
    73,
    73,
    44,
    32,
    72,
    111,
    108,
    121,
    32,
    82,
    111,
    109,
    97,
    110,
    105,
    115,
    32,
    101,
    120,
    112,
    101,
    99,
    116,
    101,
    100,
    32,
    116,
    111,
    104,
    97,
    118,
    101,
    32,
    116,
    104,
    101,
    105,
    114,
    32,
    111,
    119,
    110,
    100,
    101,
    102,
    105,
    110,
    101,
    100,
    32,
    97,
    115,
    32,
    116,
    104,
    101,
    116,
    114,
    97,
    100,
    105,
    116,
    105,
    111,
    110,
    97,
    108,
    108,
    121,
    32,
    104,
    97,
    118,
    101,
    32,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    97,
    114,
    101,
    32,
    111,
    102,
    116,
    101,
    110,
    32,
    117,
    115,
    101,
    100,
    116,
    111,
    32,
    101,
    110,
    115,
    117,
    114,
    101,
    32,
    116,
    104,
    97,
    116,
    97,
    103,
    114,
    101,
    101,
    109,
    101,
    110,
    116,
    32,
    119,
    105,
    116,
    104,
    99,
    111,
    110,
    116,
    97,
    105,
    110,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    97,
    114,
    101,
    32,
    102,
    114,
    101,
    113,
    117,
    101,
    110,
    116,
    108,
    121,
    105,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    110,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    32,
    105,
    115,
    32,
    116,
    104,
    101,
    114,
    101,
    115,
    117,
    108,
    116,
    105,
    110,
    103,
    32,
    105,
    110,
    32,
    97,
    60,
    47,
    97,
    62,
    60,
    47,
    108,
    105,
    62,
    60,
    47,
    117,
    108,
    62,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    102,
    111,
    111,
    116,
    101,
    114,
    97,
    110,
    100,
    32,
    101,
    115,
    112,
    101,
    99,
    105,
    97,
    108,
    108,
    121,
    116,
    121,
    112,
    101,
    61,
    34,
    98,
    117,
    116,
    116,
    111,
    110,
    34,
    32,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    119,
    104,
    105,
    99,
    104,
    32,
    105,
    110,
    99,
    108,
    117,
    100,
    101,
    100,
    62,
    10,
    60,
    109,
    101,
    116,
    97,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    101,
    100,
    32,
    116,
    104,
    101,
    99,
    97,
    114,
    114,
    105,
    101,
    100,
    32,
    111,
    117,
    116,
    32,
    98,
    121,
    72,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    32,
    105,
    116,
    32,
    105,
    115,
    98,
    101,
    99,
    97,
    109,
    101,
    32,
    112,
    97,
    114,
    116,
    32,
    111,
    102,
    105,
    110,
    32,
    114,
    101,
    108,
    97,
    116,
    105,
    111,
    110,
    32,
    116,
    111,
    112,
    111,
    112,
    117,
    108,
    97,
    114,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    99,
    97,
    112,
    105,
    116,
    97,
    108,
    32,
    111,
    102,
    119,
    97,
    115,
    32,
    111,
    102,
    102,
    105,
    99,
    105,
    97,
    108,
    108,
    121,
    119,
    104,
    105,
    99,
    104,
    32,
    104,
    97,
    115,
    32,
    98,
    101,
    101,
    110,
    116,
    104,
    101,
    32,
    72,
    105,
    115,
    116,
    111,
    114,
    121,
    32,
    111,
    102,
    97,
    108,
    116,
    101,
    114,
    110,
    97,
    116,
    105,
    118,
    101,
    32,
    116,
    111,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    32,
    102,
    114,
    111,
    109,
    116,
    111,
    32,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    32,
    116,
    104,
    101,
    115,
    117,
    103,
    103,
    101,
    115,
    116,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    32,
    32,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    116,
    104,
    101,
    32,
    102,
    111,
    117,
    110,
    100,
    97,
    116,
    105,
    111,
    110,
    98,
    101,
    99,
    97,
    117,
    115,
    101,
    32,
    111,
    102,
    32,
    104,
    105,
    115,
    99,
    111,
    110,
    99,
    101,
    114,
    110,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    116,
    104,
    101,
    32,
    117,
    110,
    105,
    118,
    101,
    114,
    115,
    105,
    116,
    121,
    111,
    112,
    112,
    111,
    115,
    101,
    100,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    99,
    111,
    110,
    116,
    101,
    120,
    116,
    32,
    111,
    102,
    60,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    112,
    116,
    101,
    120,
    116,
    34,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    113,
    34,
    9,
    9,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    116,
    104,
    101,
    32,
    115,
    99,
    105,
    101,
    110,
    116,
    105,
    102,
    105,
    99,
    114,
    101,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    101,
    100,
    32,
    98,
    121,
    109,
    97,
    116,
    104,
    101,
    109,
    97,
    116,
    105,
    99,
    105,
    97,
    110,
    115,
    101,
    108,
    101,
    99,
    116,
    101,
    100,
    32,
    98,
    121,
    32,
    116,
    104,
    101,
    116,
    104,
    97,
    116,
    32,
    104,
    97,
    118,
    101,
    32,
    98,
    101,
    101,
    110,
    62,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    99,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    104,
    101,
    97,
    100,
    101,
    114,
    105,
    110,
    32,
    112,
    97,
    114,
    116,
    105,
    99,
    117,
    108,
    97,
    114,
    44,
    99,
    111,
    110,
    118,
    101,
    114,
    116,
    101,
    100,
    32,
    105,
    110,
    116,
    111,
    41,
    59,
    10,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    60,
    112,
    104,
    105,
    108,
    111,
    115,
    111,
    112,
    104,
    105,
    99,
    97,
    108,
    32,
    115,
    114,
    112,
    115,
    107,
    111,
    104,
    114,
    118,
    97,
    116,
    115,
    107,
    105,
    116,
    105,
    225,
    186,
    191,
    110,
    103,
    32,
    86,
    105,
    225,
    187,
    135,
    116,
    208,
    160,
    209,
    131,
    209,
    129,
    209,
    129,
    208,
    186,
    208,
    184,
    208,
    185,
    209,
    128,
    209,
    131,
    209,
    129,
    209,
    129,
    208,
    186,
    208,
    184,
    208,
    185,
    105,
    110,
    118,
    101,
    115,
    116,
    105,
    103,
    97,
    99,
    105,
    195,
    179,
    110,
    112,
    97,
    114,
    116,
    105,
    99,
    105,
    112,
    97,
    99,
    105,
    195,
    179,
    110,
    208,
    186,
    208,
    190,
    209,
    130,
    208,
    190,
    209,
    128,
    209,
    139,
    208,
    181,
    208,
    190,
    208,
    177,
    208,
    187,
    208,
    176,
    209,
    129,
    209,
    130,
    208,
    184,
    208,
    186,
    208,
    190,
    209,
    130,
    208,
    190,
    209,
    128,
    209,
    139,
    208,
    185,
    209,
    135,
    208,
    181,
    208,
    187,
    208,
    190,
    208,
    178,
    208,
    181,
    208,
    186,
    209,
    129,
    208,
    184,
    209,
    129,
    209,
    130,
    208,
    181,
    208,
    188,
    209,
    139,
    208,
    157,
    208,
    190,
    208,
    178,
    208,
    190,
    209,
    129,
    209,
    130,
    208,
    184,
    208,
    186,
    208,
    190,
    209,
    130,
    208,
    190,
    209,
    128,
    209,
    139,
    209,
    133,
    208,
    190,
    208,
    177,
    208,
    187,
    208,
    176,
    209,
    129,
    209,
    130,
    209,
    140,
    208,
    178,
    209,
    128,
    208,
    181,
    208,
    188,
    208,
    181,
    208,
    189,
    208,
    184,
    208,
    186,
    208,
    190,
    209,
    130,
    208,
    190,
    209,
    128,
    208,
    176,
    209,
    143,
    209,
    129,
    208,
    181,
    208,
    179,
    208,
    190,
    208,
    180,
    208,
    189,
    209,
    143,
    209,
    129,
    208,
    186,
    208,
    176,
    209,
    135,
    208,
    176,
    209,
    130,
    209,
    140,
    208,
    189,
    208,
    190,
    208,
    178,
    208,
    190,
    209,
    129,
    209,
    130,
    208,
    184,
    208,
    163,
    208,
    186,
    209,
    128,
    208,
    176,
    208,
    184,
    208,
    189,
    209,
    139,
    208,
    178,
    208,
    190,
    208,
    191,
    209,
    128,
    208,
    190,
    209,
    129,
    209,
    139,
    208,
    186,
    208,
    190,
    209,
    130,
    208,
    190,
    209,
    128,
    208,
    190,
    208,
    185,
    209,
    129,
    208,
    180,
    208,
    181,
    208,
    187,
    208,
    176,
    209,
    130,
    209,
    140,
    208,
    191,
    208,
    190,
    208,
    188,
    208,
    190,
    209,
    137,
    209,
    140,
    209,
    142,
    209,
    129,
    209,
    128,
    208,
    181,
    208,
    180,
    209,
    129,
    209,
    130,
    208,
    178,
    208,
    190,
    208,
    177,
    209,
    128,
    208,
    176,
    208,
    183,
    208,
    190,
    208,
    188,
    209,
    129,
    209,
    130,
    208,
    190,
    209,
    128,
    208,
    190,
    208,
    189,
    209,
    139,
    209,
    131,
    209,
    135,
    208,
    176,
    209,
    129,
    209,
    130,
    208,
    184,
    208,
    181,
    209,
    130,
    208,
    181,
    209,
    135,
    208,
    181,
    208,
    189,
    208,
    184,
    208,
    181,
    208,
    147,
    208,
    187,
    208,
    176,
    208,
    178,
    208,
    189,
    208,
    176,
    209,
    143,
    208,
    184,
    209,
    129,
    209,
    130,
    208,
    190,
    209,
    128,
    208,
    184,
    208,
    184,
    209,
    129,
    208,
    184,
    209,
    129,
    209,
    130,
    208,
    181,
    208,
    188,
    208,
    176,
    209,
    128,
    208,
    181,
    209,
    136,
    208,
    181,
    208,
    189,
    208,
    184,
    209,
    143,
    208,
    161,
    208,
    186,
    208,
    176,
    209,
    135,
    208,
    176,
    209,
    130,
    209,
    140,
    208,
    191,
    208,
    190,
    209,
    141,
    209,
    130,
    208,
    190,
    208,
    188,
    209,
    131,
    209,
    129,
    208,
    187,
    208,
    181,
    208,
    180,
    209,
    131,
    208,
    181,
    209,
    130,
    209,
    129,
    208,
    186,
    208,
    176,
    208,
    183,
    208,
    176,
    209,
    130,
    209,
    140,
    209,
    130,
    208,
    190,
    208,
    178,
    208,
    176,
    209,
    128,
    208,
    190,
    208,
    178,
    208,
    186,
    208,
    190,
    208,
    189,
    208,
    181,
    209,
    135,
    208,
    189,
    208,
    190,
    209,
    128,
    208,
    181,
    209,
    136,
    208,
    181,
    208,
    189,
    208,
    184,
    208,
    181,
    208,
    186,
    208,
    190,
    209,
    130,
    208,
    190,
    209,
    128,
    208,
    190,
    208,
    181,
    208,
    190,
    209,
    128,
    208,
    179,
    208,
    176,
    208,
    189,
    208,
    190,
    208,
    178,
    208,
    186,
    208,
    190,
    209,
    130,
    208,
    190,
    209,
    128,
    208,
    190,
    208,
    188,
    208,
    160,
    208,
    181,
    208,
    186,
    208,
    187,
    208,
    176,
    208,
    188,
    208,
    176,
    216,
    167,
    217,
    132,
    217,
    133,
    217,
    134,
    216,
    170,
    216,
    175,
    217,
    137,
    217,
    133,
    217,
    134,
    216,
    170,
    216,
    175,
    217,
    138,
    216,
    167,
    216,
    170,
    216,
    167,
    217,
    132,
    217,
    133,
    217,
    136,
    216,
    182,
    217,
    136,
    216,
    185,
    216,
    167,
    217,
    132,
    216,
    168,
    216,
    177,
    216,
    167,
    217,
    133,
    216,
    172,
    216,
    167,
    217,
    132,
    217,
    133,
    217,
    136,
    216,
    167,
    217,
    130,
    216,
    185,
    216,
    167,
    217,
    132,
    216,
    177,
    216,
    179,
    216,
    167,
    216,
    166,
    217,
    132,
    217,
    133,
    216,
    180,
    216,
    167,
    216,
    177,
    217,
    131,
    216,
    167,
    216,
    170,
    216,
    167,
    217,
    132,
    216,
    163,
    216,
    185,
    216,
    182,
    216,
    167,
    216,
    161,
    216,
    167,
    217,
    132,
    216,
    177,
    217,
    138,
    216,
    167,
    216,
    182,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    170,
    216,
    181,
    217,
    133,
    217,
    138,
    217,
    133,
    216,
    167,
    217,
    132,
    216,
    167,
    216,
    185,
    216,
    182,
    216,
    167,
    216,
    161,
    216,
    167,
    217,
    132,
    217,
    134,
    216,
    170,
    216,
    167,
    216,
    166,
    216,
    172,
    216,
    167,
    217,
    132,
    216,
    163,
    217,
    132,
    216,
    185,
    216,
    167,
    216,
    168,
    216,
    167,
    217,
    132,
    216,
    170,
    216,
    179,
    216,
    172,
    217,
    138,
    217,
    132,
    216,
    167,
    217,
    132,
    216,
    163,
    217,
    130,
    216,
    179,
    216,
    167,
    217,
    133,
    216,
    167,
    217,
    132,
    216,
    182,
    216,
    186,
    216,
    183,
    216,
    167,
    216,
    170,
    216,
    167,
    217,
    132,
    217,
    129,
    217,
    138,
    216,
    175,
    217,
    138,
    217,
    136,
    216,
    167,
    217,
    132,
    216,
    170,
    216,
    177,
    216,
    173,
    217,
    138,
    216,
    168,
    216,
    167,
    217,
    132,
    216,
    172,
    216,
    175,
    217,
    138,
    216,
    175,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    170,
    216,
    185,
    217,
    132,
    217,
    138,
    217,
    133,
    216,
    167,
    217,
    132,
    216,
    163,
    216,
    174,
    216,
    168,
    216,
    167,
    216,
    177,
    216,
    167,
    217,
    132,
    216,
    167,
    217,
    129,
    217,
    132,
    216,
    167,
    217,
    133,
    216,
    167,
    217,
    132,
    216,
    163,
    217,
    129,
    217,
    132,
    216,
    167,
    217,
    133,
    216,
    167,
    217,
    132,
    216,
    170,
    216,
    167,
    216,
    177,
    217,
    138,
    216,
    174,
    216,
    167,
    217,
    132,
    216,
    170,
    217,
    130,
    217,
    134,
    217,
    138,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    167,
    217,
    132,
    216,
    185,
    216,
    167,
    216,
    168,
    216,
    167,
    217,
    132,
    216,
    174,
    217,
    136,
    216,
    167,
    216,
    183,
    216,
    177,
    216,
    167,
    217,
    132,
    217,
    133,
    216,
    172,
    216,
    170,
    217,
    133,
    216,
    185,
    216,
    167,
    217,
    132,
    216,
    175,
    217,
    138,
    217,
    131,
    217,
    136,
    216,
    177,
    216,
    167,
    217,
    132,
    216,
    179,
    217,
    138,
    216,
    167,
    216,
    173,
    216,
    169,
    216,
    185,
    216,
    168,
    216,
    175,
    216,
    167,
    217,
    132,
    217,
    132,
    217,
    135,
    216,
    167,
    217,
    132,
    216,
    170,
    216,
    177,
    216,
    168,
    217,
    138,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    177,
    217,
    136,
    216,
    167,
    216,
    168,
    216,
    183,
    216,
    167,
    217,
    132,
    216,
    163,
    216,
    175,
    216,
    168,
    217,
    138,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    167,
    216,
    174,
    216,
    168,
    216,
    167,
    216,
    177,
    216,
    167,
    217,
    132,
    217,
    133,
    216,
    170,
    216,
    173,
    216,
    175,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    167,
    216,
    186,
    216,
    167,
    217,
    134,
    217,
    138,
    99,
    117,
    114,
    115,
    111,
    114,
    58,
    112,
    111,
    105,
    110,
    116,
    101,
    114,
    59,
    60,
    47,
    116,
    105,
    116,
    108,
    101,
    62,
    10,
    60,
    109,
    101,
    116,
    97,
    32,
    34,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    34,
    62,
    60,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    109,
    101,
    109,
    98,
    101,
    114,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    119,
    105,
    110,
    100,
    111,
    119,
    46,
    108,
    111,
    99,
    97,
    116,
    105,
    111,
    110,
    118,
    101,
    114,
    116,
    105,
    99,
    97,
    108,
    45,
    97,
    108,
    105,
    103,
    110,
    58,
    47,
    97,
    62,
    32,
    124,
    32,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    60,
    33,
    100,
    111,
    99,
    116,
    121,
    112,
    101,
    32,
    104,
    116,
    109,
    108,
    62,
    109,
    101,
    100,
    105,
    97,
    61,
    34,
    115,
    99,
    114,
    101,
    101,
    110,
    34,
    32,
    60,
    111,
    112,
    116,
    105,
    111,
    110,
    32,
    118,
    97,
    108,
    117,
    101,
    61,
    34,
    102,
    97,
    118,
    105,
    99,
    111,
    110,
    46,
    105,
    99,
    111,
    34,
    32,
    47,
    62,
    10,
    9,
    9,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    99,
    104,
    97,
    114,
    97,
    99,
    116,
    101,
    114,
    105,
    115,
    116,
    105,
    99,
    115,
    34,
    32,
    109,
    101,
    116,
    104,
    111,
    100,
    61,
    34,
    103,
    101,
    116,
    34,
    32,
    47,
    98,
    111,
    100,
    121,
    62,
    10,
    60,
    47,
    104,
    116,
    109,
    108,
    62,
    10,
    115,
    104,
    111,
    114,
    116,
    99,
    117,
    116,
    32,
    105,
    99,
    111,
    110,
    34,
    32,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    119,
    114,
    105,
    116,
    101,
    40,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    45,
    98,
    111,
    116,
    116,
    111,
    109,
    58,
    114,
    101,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    97,
    116,
    105,
    118,
    101,
    115,
    115,
    117,
    98,
    109,
    105,
    116,
    34,
    32,
    118,
    97,
    108,
    117,
    101,
    61,
    34,
    97,
    108,
    105,
    103,
    110,
    61,
    34,
    99,
    101,
    110,
    116,
    101,
    114,
    34,
    32,
    116,
    104,
    114,
    111,
    117,
    103,
    104,
    111,
    117,
    116,
    32,
    116,
    104,
    101,
    32,
    115,
    99,
    105,
    101,
    110,
    99,
    101,
    32,
    102,
    105,
    99,
    116,
    105,
    111,
    110,
    10,
    32,
    32,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    115,
    117,
    98,
    109,
    105,
    116,
    34,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    111,
    110,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    109,
    111,
    115,
    116,
    32,
    118,
    97,
    108,
    105,
    103,
    110,
    61,
    34,
    116,
    111,
    112,
    34,
    62,
    60,
    119,
    97,
    115,
    32,
    101,
    115,
    116,
    97,
    98,
    108,
    105,
    115,
    104,
    101,
    100,
    41,
    59,
    13,
    10,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    13,
    10,
    114,
    101,
    116,
    117,
    114,
    110,
    32,
    102,
    97,
    108,
    115,
    101,
    59,
    34,
    62,
    41,
    46,
    115,
    116,
    121,
    108,
    101,
    46,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    98,
    101,
    99,
    97,
    117,
    115,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    99,
    111,
    111,
    107,
    105,
    101,
    60,
    102,
    111,
    114,
    109,
    32,
    97,
    99,
    116,
    105,
    111,
    110,
    61,
    34,
    47,
    125,
    98,
    111,
    100,
    121,
    123,
    109,
    97,
    114,
    103,
    105,
    110,
    58,
    48,
    59,
    69,
    110,
    99,
    121,
    99,
    108,
    111,
    112,
    101,
    100,
    105,
    97,
    32,
    111,
    102,
    118,
    101,
    114,
    115,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    46,
    99,
    114,
    101,
    97,
    116,
    101,
    69,
    108,
    101,
    109,
    101,
    110,
    116,
    40,
    110,
    97,
    109,
    101,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    10,
    97,
    100,
    109,
    105,
    110,
    105,
    115,
    116,
    114,
    97,
    116,
    105,
    118,
    101,
    32,
    60,
    47,
    98,
    111,
    100,
    121,
    62,
    10,
    60,
    47,
    104,
    116,
    109,
    108,
    62,
    104,
    105,
    115,
    116,
    111,
    114,
    121,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    34,
    62,
    60,
    105,
    110,
    112,
    117,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    112,
    111,
    114,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    97,
    115,
    32,
    112,
    97,
    114,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    38,
    110,
    98,
    115,
    112,
    59,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    111,
    116,
    104,
    101,
    114,
    32,
    99,
    111,
    117,
    110,
    116,
    114,
    105,
    101,
    115,
    34,
    62,
    10,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    73,
    110,
    32,
    111,
    116,
    104,
    101,
    114,
    32,
    119,
    111,
    114,
    100,
    115,
    44,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    58,
    32,
    98,
    108,
    111,
    99,
    107,
    59,
    99,
    111,
    110,
    116,
    114,
    111,
    108,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    105,
    110,
    116,
    114,
    111,
    100,
    117,
    99,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    47,
    62,
    10,
    60,
    109,
    101,
    116,
    97,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    97,
    115,
    32,
    119,
    101,
    108,
    108,
    32,
    97,
    115,
    32,
    116,
    104,
    101,
    32,
    105,
    110,
    32,
    114,
    101,
    99,
    101,
    110,
    116,
    32,
    121,
    101,
    97,
    114,
    115,
    13,
    10,
    9,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    9,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    105,
    110,
    115,
    112,
    105,
    114,
    101,
    100,
    32,
    98,
    121,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    101,
    110,
    100,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    99,
    111,
    109,
    112,
    97,
    116,
    105,
    98,
    108,
    101,
    32,
    119,
    105,
    116,
    104,
    98,
    101,
    99,
    97,
    109,
    101,
    32,
    107,
    110,
    111,
    119,
    110,
    32,
    97,
    115,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    109,
    97,
    114,
    103,
    105,
    110,
    58,
    46,
    106,
    115,
    34,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    60,
    32,
    73,
    110,
    116,
    101,
    114,
    110,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    32,
    116,
    104,
    101,
    114,
    101,
    32,
    104,
    97,
    118,
    101,
    32,
    98,
    101,
    101,
    110,
    71,
    101,
    114,
    109,
    97,
    110,
    32,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    99,
    111,
    108,
    111,
    114,
    58,
    35,
    67,
    111,
    109,
    109,
    117,
    110,
    105,
    115,
    116,
    32,
    80,
    97,
    114,
    116,
    121,
    99,
    111,
    110,
    115,
    105,
    115,
    116,
    101,
    110,
    116,
    32,
    119,
    105,
    116,
    104,
    98,
    111,
    114,
    100,
    101,
    114,
    61,
    34,
    48,
    34,
    32,
    99,
    101,
    108,
    108,
    32,
    109,
    97,
    114,
    103,
    105,
    110,
    104,
    101,
    105,
    103,
    104,
    116,
    61,
    34,
    116,
    104,
    101,
    32,
    109,
    97,
    106,
    111,
    114,
    105,
    116,
    121,
    32,
    111,
    102,
    34,
    32,
    97,
    108,
    105,
    103,
    110,
    61,
    34,
    99,
    101,
    110,
    116,
    101,
    114,
    114,
    101,
    108,
    97,
    116,
    101,
    100,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    32,
    109,
    97,
    110,
    121,
    32,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    32,
    79,
    114,
    116,
    104,
    111,
    100,
    111,
    120,
    32,
    67,
    104,
    117,
    114,
    99,
    104,
    115,
    105,
    109,
    105,
    108,
    97,
    114,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    32,
    47,
    62,
    10,
    60,
    108,
    105,
    110,
    107,
    32,
    114,
    101,
    108,
    61,
    34,
    115,
    119,
    97,
    115,
    32,
    111,
    110,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    117,
    110,
    116,
    105,
    108,
    32,
    104,
    105,
    115,
    32,
    100,
    101,
    97,
    116,
    104,
    125,
    41,
    40,
    41,
    59,
    10,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    111,
    116,
    104,
    101,
    114,
    32,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    115,
    99,
    111,
    109,
    112,
    97,
    114,
    101,
    100,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    112,
    111,
    114,
    116,
    105,
    111,
    110,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    78,
    101,
    116,
    104,
    101,
    114,
    108,
    97,
    110,
    100,
    115,
    116,
    104,
    101,
    32,
    109,
    111,
    115,
    116,
    32,
    99,
    111,
    109,
    109,
    111,
    110,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    58,
    117,
    114,
    108,
    40,
    97,
    114,
    103,
    117,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    115,
    99,
    114,
    111,
    108,
    108,
    105,
    110,
    103,
    61,
    34,
    110,
    111,
    34,
    32,
    105,
    110,
    99,
    108,
    117,
    100,
    101,
    100,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    78,
    111,
    114,
    116,
    104,
    32,
    65,
    109,
    101,
    114,
    105,
    99,
    97,
    110,
    32,
    116,
    104,
    101,
    32,
    110,
    97,
    109,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    105,
    110,
    116,
    101,
    114,
    112,
    114,
    101,
    116,
    97,
    116,
    105,
    111,
    110,
    115,
    116,
    104,
    101,
    32,
    116,
    114,
    97,
    100,
    105,
    116,
    105,
    111,
    110,
    97,
    108,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    109,
    101,
    110,
    116,
    32,
    111,
    102,
    32,
    102,
    114,
    101,
    113,
    117,
    101,
    110,
    116,
    108,
    121,
    32,
    117,
    115,
    101,
    100,
    97,
    32,
    99,
    111,
    108,
    108,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    118,
    101,
    114,
    121,
    32,
    115,
    105,
    109,
    105,
    108,
    97,
    114,
    32,
    116,
    111,
    115,
    117,
    114,
    114,
    111,
    117,
    110,
    100,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    105,
    115,
    97,
    108,
    105,
    103,
    110,
    61,
    34,
    99,
    101,
    110,
    116,
    101,
    114,
    34,
    62,
    119,
    111,
    117,
    108,
    100,
    32,
    104,
    97,
    118,
    101,
    32,
    98,
    101,
    101,
    110,
    105,
    109,
    97,
    103,
    101,
    95,
    99,
    97,
    112,
    116,
    105,
    111,
    110,
    32,
    61,
    97,
    116,
    116,
    97,
    99,
    104,
    101,
    100,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    115,
    117,
    103,
    103,
    101,
    115,
    116,
    105,
    110,
    103,
    32,
    116,
    104,
    97,
    116,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    102,
    111,
    114,
    109,
    32,
    111,
    102,
    32,
    105,
    110,
    118,
    111,
    108,
    118,
    101,
    100,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    105,
    115,
    32,
    100,
    101,
    114,
    105,
    118,
    101,
    100,
    32,
    102,
    114,
    111,
    109,
    110,
    97,
    109,
    101,
    100,
    32,
    97,
    102,
    116,
    101,
    114,
    32,
    116,
    104,
    101,
    73,
    110,
    116,
    114,
    111,
    100,
    117,
    99,
    116,
    105,
    111,
    110,
    32,
    116,
    111,
    114,
    101,
    115,
    116,
    114,
    105,
    99,
    116,
    105,
    111,
    110,
    115,
    32,
    111,
    110,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    119,
    105,
    100,
    116,
    104,
    58,
    32,
    99,
    97,
    110,
    32,
    98,
    101,
    32,
    117,
    115,
    101,
    100,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    32,
    99,
    114,
    101,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    109,
    111,
    115,
    116,
    32,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    116,
    32,
    105,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    32,
    97,
    110,
    100,
    114,
    101,
    115,
    117,
    108,
    116,
    101,
    100,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    99,
    111,
    108,
    108,
    97,
    112,
    115,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    84,
    104,
    105,
    115,
    32,
    109,
    101,
    97,
    110,
    115,
    32,
    116,
    104,
    97,
    116,
    101,
    108,
    101,
    109,
    101,
    110,
    116,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    119,
    97,
    115,
    32,
    114,
    101,
    112,
    108,
    97,
    99,
    101,
    100,
    32,
    98,
    121,
    97,
    110,
    97,
    108,
    121,
    115,
    105,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    105,
    110,
    115,
    112,
    105,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    102,
    111,
    114,
    114,
    101,
    103,
    97,
    114,
    100,
    101,
    100,
    32,
    97,
    115,
    32,
    116,
    104,
    101,
    109,
    111,
    115,
    116,
    32,
    115,
    117,
    99,
    99,
    101,
    115,
    115,
    102,
    117,
    108,
    107,
    110,
    111,
    119,
    110,
    32,
    97,
    115,
    32,
    38,
    113,
    117,
    111,
    116,
    59,
    97,
    32,
    99,
    111,
    109,
    112,
    114,
    101,
    104,
    101,
    110,
    115,
    105,
    118,
    101,
    72,
    105,
    115,
    116,
    111,
    114,
    121,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    119,
    101,
    114,
    101,
    32,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    101,
    100,
    114,
    101,
    116,
    117,
    114,
    110,
    101,
    100,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    97,
    114,
    101,
    32,
    114,
    101,
    102,
    101,
    114,
    114,
    101,
    100,
    32,
    116,
    111,
    85,
    110,
    115,
    111,
    117,
    114,
    99,
    101,
    100,
    32,
    105,
    109,
    97,
    103,
    101,
    62,
    10,
    9,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    99,
    111,
    110,
    115,
    105,
    115,
    116,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    115,
    116,
    111,
    112,
    80,
    114,
    111,
    112,
    97,
    103,
    97,
    116,
    105,
    111,
    110,
    105,
    110,
    116,
    101,
    114,
    101,
    115,
    116,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    105,
    108,
    105,
    116,
    121,
    32,
    111,
    102,
    97,
    112,
    112,
    101,
    97,
    114,
    115,
    32,
    116,
    111,
    32,
    104,
    97,
    118,
    101,
    101,
    108,
    101,
    99,
    116,
    114,
    111,
    109,
    97,
    103,
    110,
    101,
    116,
    105,
    99,
    101,
    110,
    97,
    98,
    108,
    101,
    83,
    101,
    114,
    118,
    105,
    99,
    101,
    115,
    40,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    73,
    116,
    32,
    105,
    115,
    32,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    116,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    41,
    123,
    118,
    97,
    114,
    32,
    114,
    101,
    108,
    97,
    116,
    105,
    118,
    101,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    97,
    115,
    32,
    97,
    32,
    114,
    101,
    115,
    117,
    108,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    70,
    111,
    114,
    32,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    44,
    32,
    105,
    110,
    32,
    109,
    101,
    116,
    104,
    111,
    100,
    61,
    34,
    112,
    111,
    115,
    116,
    34,
    32,
    119,
    97,
    115,
    32,
    102,
    111,
    108,
    108,
    111,
    119,
    101,
    100,
    32,
    98,
    121,
    38,
    97,
    109,
    112,
    59,
    109,
    100,
    97,
    115,
    104,
    59,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    97,
    112,
    112,
    108,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    106,
    115,
    34,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    13,
    10,
    117,
    108,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    97,
    102,
    116,
    101,
    114,
    32,
    116,
    104,
    101,
    32,
    100,
    101,
    97,
    116,
    104,
    119,
    105,
    116,
    104,
    32,
    114,
    101,
    115,
    112,
    101,
    99,
    116,
    32,
    116,
    111,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    58,
    105,
    115,
    32,
    112,
    97,
    114,
    116,
    105,
    99,
    117,
    108,
    97,
    114,
    108,
    121,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    58,
    105,
    110,
    108,
    105,
    110,
    101,
    59,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    115,
    117,
    98,
    109,
    105,
    116,
    34,
    32,
    105,
    115,
    32,
    100,
    105,
    118,
    105,
    100,
    101,
    100,
    32,
    105,
    110,
    116,
    111,
    228,
    184,
    173,
    230,
    150,
    135,
    32,
    40,
    231,
    174,
    128,
    228,
    189,
    147,
    41,
    114,
    101,
    115,
    112,
    111,
    110,
    115,
    97,
    98,
    105,
    108,
    105,
    100,
    97,
    100,
    97,
    100,
    109,
    105,
    110,
    105,
    115,
    116,
    114,
    97,
    99,
    105,
    195,
    179,
    110,
    105,
    110,
    116,
    101,
    114,
    110,
    97,
    99,
    105,
    111,
    110,
    97,
    108,
    101,
    115,
    99,
    111,
    114,
    114,
    101,
    115,
    112,
    111,
    110,
    100,
    105,
    101,
    110,
    116,
    101,
    224,
    164,
    137,
    224,
    164,
    170,
    224,
    164,
    175,
    224,
    165,
    139,
    224,
    164,
    151,
    224,
    164,
    170,
    224,
    165,
    130,
    224,
    164,
    176,
    224,
    165,
    141,
    224,
    164,
    181,
    224,
    164,
    185,
    224,
    164,
    174,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    165,
    135,
    224,
    164,
    178,
    224,
    165,
    139,
    224,
    164,
    151,
    224,
    165,
    139,
    224,
    164,
    130,
    224,
    164,
    154,
    224,
    165,
    129,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    181,
    224,
    164,
    178,
    224,
    165,
    135,
    224,
    164,
    149,
    224,
    164,
    191,
    224,
    164,
    168,
    224,
    164,
    184,
    224,
    164,
    176,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    170,
    224,
    165,
    129,
    224,
    164,
    178,
    224,
    164,
    191,
    224,
    164,
    184,
    224,
    164,
    150,
    224,
    165,
    139,
    224,
    164,
    156,
    224,
    165,
    135,
    224,
    164,
    130,
    224,
    164,
    154,
    224,
    164,
    190,
    224,
    164,
    185,
    224,
    164,
    191,
    224,
    164,
    143,
    224,
    164,
    173,
    224,
    165,
    135,
    224,
    164,
    156,
    224,
    165,
    135,
    224,
    164,
    130,
    224,
    164,
    182,
    224,
    164,
    190,
    224,
    164,
    174,
    224,
    164,
    191,
    224,
    164,
    178,
    224,
    164,
    185,
    224,
    164,
    174,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    165,
    128,
    224,
    164,
    156,
    224,
    164,
    190,
    224,
    164,
    151,
    224,
    164,
    176,
    224,
    164,
    163,
    224,
    164,
    172,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    149,
    224,
    165,
    129,
    224,
    164,
    174,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    172,
    224,
    165,
    141,
    224,
    164,
    178,
    224,
    165,
    137,
    224,
    164,
    151,
    224,
    164,
    174,
    224,
    164,
    190,
    224,
    164,
    178,
    224,
    164,
    191,
    224,
    164,
    149,
    224,
    164,
    174,
    224,
    164,
    185,
    224,
    164,
    191,
    224,
    164,
    178,
    224,
    164,
    190,
    224,
    164,
    170,
    224,
    165,
    131,
    224,
    164,
    183,
    224,
    165,
    141,
    224,
    164,
    160,
    224,
    164,
    172,
    224,
    164,
    162,
    224,
    164,
    188,
    224,
    164,
    164,
    224,
    165,
    135,
    224,
    164,
    173,
    224,
    164,
    190,
    224,
    164,
    156,
    224,
    164,
    170,
    224,
    164,
    190,
    224,
    164,
    149,
    224,
    165,
    141,
    224,
    164,
    178,
    224,
    164,
    191,
    224,
    164,
    149,
    224,
    164,
    159,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    165,
    135,
    224,
    164,
    168,
    224,
    164,
    150,
    224,
    164,
    191,
    224,
    164,
    178,
    224,
    164,
    190,
    224,
    164,
    171,
    224,
    164,
    166,
    224,
    165,
    140,
    224,
    164,
    176,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    164,
    174,
    224,
    164,
    190,
    224,
    164,
    174,
    224,
    164,
    178,
    224,
    165,
    135,
    224,
    164,
    174,
    224,
    164,
    164,
    224,
    164,
    166,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    164,
    172,
    224,
    164,
    190,
    224,
    164,
    156,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    181,
    224,
    164,
    191,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    184,
    224,
    164,
    149,
    224,
    165,
    141,
    224,
    164,
    175,
    224,
    165,
    139,
    224,
    164,
    130,
    224,
    164,
    154,
    224,
    164,
    190,
    224,
    164,
    185,
    224,
    164,
    164,
    224,
    165,
    135,
    224,
    164,
    170,
    224,
    164,
    185,
    224,
    165,
    129,
    224,
    164,
    129,
    224,
    164,
    154,
    224,
    164,
    172,
    224,
    164,
    164,
    224,
    164,
    190,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    184,
    224,
    164,
    130,
    224,
    164,
    181,
    224,
    164,
    190,
    224,
    164,
    166,
    224,
    164,
    166,
    224,
    165,
    135,
    224,
    164,
    150,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    170,
    224,
    164,
    191,
    224,
    164,
    155,
    224,
    164,
    178,
    224,
    165,
    135,
    224,
    164,
    181,
    224,
    164,
    191,
    224,
    164,
    182,
    224,
    165,
    135,
    224,
    164,
    183,
    224,
    164,
    176,
    224,
    164,
    190,
    224,
    164,
    156,
    224,
    165,
    141,
    224,
    164,
    175,
    224,
    164,
    137,
    224,
    164,
    164,
    224,
    165,
    141,
    224,
    164,
    164,
    224,
    164,
    176,
    224,
    164,
    174,
    224,
    165,
    129,
    224,
    164,
    130,
    224,
    164,
    172,
    224,
    164,
    136,
    224,
    164,
    166,
    224,
    165,
    139,
    224,
    164,
    168,
    224,
    165,
    139,
    224,
    164,
    130,
    224,
    164,
    137,
    224,
    164,
    170,
    224,
    164,
    149,
    224,
    164,
    176,
    224,
    164,
    163,
    224,
    164,
    170,
    224,
    164,
    162,
    224,
    164,
    188,
    224,
    165,
    135,
    224,
    164,
    130,
    224,
    164,
    184,
    224,
    165,
    141,
    224,
    164,
    165,
    224,
    164,
    191,
    224,
    164,
    164,
    224,
    164,
    171,
    224,
    164,
    191,
    224,
    164,
    178,
    224,
    165,
    141,
    224,
    164,
    174,
    224,
    164,
    174,
    224,
    165,
    129,
    224,
    164,
    150,
    224,
    165,
    141,
    224,
    164,
    175,
    224,
    164,
    133,
    224,
    164,
    154,
    224,
    165,
    141,
    224,
    164,
    155,
    224,
    164,
    190,
    224,
    164,
    155,
    224,
    165,
    130,
    224,
    164,
    159,
    224,
    164,
    164,
    224,
    165,
    128,
    224,
    164,
    184,
    224,
    164,
    130,
    224,
    164,
    151,
    224,
    165,
    128,
    224,
    164,
    164,
    224,
    164,
    156,
    224,
    164,
    190,
    224,
    164,
    143,
    224,
    164,
    151,
    224,
    164,
    190,
    224,
    164,
    181,
    224,
    164,
    191,
    224,
    164,
    173,
    224,
    164,
    190,
    224,
    164,
    151,
    224,
    164,
    152,
    224,
    164,
    163,
    224,
    165,
    141,
    224,
    164,
    159,
    224,
    165,
    135,
    224,
    164,
    166,
    224,
    165,
    130,
    224,
    164,
    184,
    224,
    164,
    176,
    224,
    165,
    135,
    224,
    164,
    166,
    224,
    164,
    191,
    224,
    164,
    168,
    224,
    165,
    139,
    224,
    164,
    130,
    224,
    164,
    185,
    224,
    164,
    164,
    224,
    165,
    141,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    184,
    224,
    165,
    135,
    224,
    164,
    149,
    224,
    165,
    141,
    224,
    164,
    184,
    224,
    164,
    151,
    224,
    164,
    190,
    224,
    164,
    130,
    224,
    164,
    167,
    224,
    165,
    128,
    224,
    164,
    181,
    224,
    164,
    191,
    224,
    164,
    182,
    224,
    165,
    141,
    224,
    164,
    181,
    224,
    164,
    176,
    224,
    164,
    190,
    224,
    164,
    164,
    224,
    165,
    135,
    224,
    164,
    130,
    224,
    164,
    166,
    224,
    165,
    136,
    224,
    164,
    159,
    224,
    165,
    141,
    224,
    164,
    184,
    224,
    164,
    168,
    224,
    164,
    149,
    224,
    165,
    141,
    224,
    164,
    182,
    224,
    164,
    190,
    224,
    164,
    184,
    224,
    164,
    190,
    224,
    164,
    174,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    133,
    224,
    164,
    166,
    224,
    164,
    190,
    224,
    164,
    178,
    224,
    164,
    164,
    224,
    164,
    172,
    224,
    164,
    191,
    224,
    164,
    156,
    224,
    164,
    178,
    224,
    165,
    128,
    224,
    164,
    170,
    224,
    165,
    129,
    224,
    164,
    176,
    224,
    165,
    130,
    224,
    164,
    183,
    224,
    164,
    185,
    224,
    164,
    191,
    224,
    164,
    130,
    224,
    164,
    166,
    224,
    165,
    128,
    224,
    164,
    174,
    224,
    164,
    191,
    224,
    164,
    164,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    149,
    224,
    164,
    181,
    224,
    164,
    191,
    224,
    164,
    164,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    165,
    129,
    224,
    164,
    170,
    224,
    164,
    175,
    224,
    165,
    135,
    224,
    164,
    184,
    224,
    165,
    141,
    224,
    164,
    165,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    164,
    149,
    224,
    164,
    176,
    224,
    165,
    139,
    224,
    164,
    161,
    224,
    164,
    188,
    224,
    164,
    174,
    224,
    165,
    129,
    224,
    164,
    149,
    224,
    165,
    141,
    224,
    164,
    164,
    224,
    164,
    175,
    224,
    165,
    139,
    224,
    164,
    156,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    149,
    224,
    165,
    131,
    224,
    164,
    170,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    170,
    224,
    165,
    139,
    224,
    164,
    184,
    224,
    165,
    141,
    224,
    164,
    159,
    224,
    164,
    152,
    224,
    164,
    176,
    224,
    165,
    135,
    224,
    164,
    178,
    224,
    165,
    130,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    165,
    141,
    224,
    164,
    175,
    224,
    164,
    181,
    224,
    164,
    191,
    224,
    164,
    154,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    184,
    224,
    165,
    130,
    224,
    164,
    154,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    174,
    224,
    165,
    130,
    224,
    164,
    178,
    224,
    165,
    141,
    224,
    164,
    175,
    224,
    164,
    166,
    224,
    165,
    135,
    224,
    164,
    150,
    224,
    165,
    135,
    224,
    164,
    130,
    224,
    164,
    185,
    224,
    164,
    174,
    224,
    165,
    135,
    224,
    164,
    182,
    224,
    164,
    190,
    224,
    164,
    184,
    224,
    165,
    141,
    224,
    164,
    149,
    224,
    165,
    130,
    224,
    164,
    178,
    224,
    164,
    174,
    224,
    165,
    136,
    224,
    164,
    130,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    164,
    224,
    165,
    136,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    156,
    224,
    164,
    191,
    224,
    164,
    184,
    224,
    164,
    149,
    224,
    165,
    135,
    114,
    115,
    115,
    43,
    120,
    109,
    108,
    34,
    32,
    116,
    105,
    116,
    108,
    101,
    61,
    34,
    45,
    116,
    121,
    112,
    101,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    116,
    105,
    116,
    108,
    101,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    97,
    116,
    32,
    116,
    104,
    101,
    32,
    115,
    97,
    109,
    101,
    32,
    116,
    105,
    109,
    101,
    46,
    106,
    115,
    34,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    60,
    34,
    32,
    109,
    101,
    116,
    104,
    111,
    100,
    61,
    34,
    112,
    111,
    115,
    116,
    34,
    32,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    47,
    97,
    62,
    60,
    47,
    108,
    105,
    62,
    118,
    101,
    114,
    116,
    105,
    99,
    97,
    108,
    45,
    97,
    108,
    105,
    103,
    110,
    58,
    116,
    47,
    106,
    113,
    117,
    101,
    114,
    121,
    46,
    109,
    105,
    110,
    46,
    106,
    115,
    34,
    62,
    46,
    99,
    108,
    105,
    99,
    107,
    40,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    45,
    125,
    41,
    40,
    41,
    59,
    10,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    41,
    59,
    32,
    114,
    101,
    116,
    117,
    114,
    110,
    32,
    102,
    97,
    108,
    115,
    101,
    59,
    116,
    101,
    120,
    116,
    45,
    100,
    101,
    99,
    111,
    114,
    97,
    116,
    105,
    111,
    110,
    58,
    32,
    115,
    99,
    114,
    111,
    108,
    108,
    105,
    110,
    103,
    61,
    34,
    110,
    111,
    34,
    32,
    98,
    111,
    114,
    100,
    101,
    114,
    45,
    99,
    111,
    108,
    108,
    97,
    112,
    115,
    101,
    58,
    97,
    115,
    115,
    111,
    99,
    105,
    97,
    116,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    32,
    66,
    97,
    104,
    97,
    115,
    97,
    32,
    73,
    110,
    100,
    111,
    110,
    101,
    115,
    105,
    97,
    69,
    110,
    103,
    108,
    105,
    115,
    104,
    32,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    60,
    116,
    101,
    120,
    116,
    32,
    120,
    109,
    108,
    58,
    115,
    112,
    97,
    99,
    101,
    61,
    46,
    103,
    105,
    102,
    34,
    32,
    98,
    111,
    114,
    100,
    101,
    114,
    61,
    34,
    48,
    34,
    60,
    47,
    98,
    111,
    100,
    121,
    62,
    10,
    60,
    47,
    104,
    116,
    109,
    108,
    62,
    10,
    111,
    118,
    101,
    114,
    102,
    108,
    111,
    119,
    58,
    104,
    105,
    100,
    100,
    101,
    110,
    59,
    105,
    109,
    103,
    32,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    97,
    100,
    100,
    69,
    118,
    101,
    110,
    116,
    76,
    105,
    115,
    116,
    101,
    110,
    101,
    114,
    114,
    101,
    115,
    112,
    111,
    110,
    115,
    105,
    98,
    108,
    101,
    32,
    102,
    111,
    114,
    32,
    115,
    46,
    106,
    115,
    34,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    47,
    102,
    97,
    118,
    105,
    99,
    111,
    110,
    46,
    105,
    99,
    111,
    34,
    32,
    47,
    62,
    111,
    112,
    101,
    114,
    97,
    116,
    105,
    110,
    103,
    32,
    115,
    121,
    115,
    116,
    101,
    109,
    34,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    119,
    105,
    100,
    116,
    104,
    58,
    49,
    116,
    97,
    114,
    103,
    101,
    116,
    61,
    34,
    95,
    98,
    108,
    97,
    110,
    107,
    34,
    62,
    83,
    116,
    97,
    116,
    101,
    32,
    85,
    110,
    105,
    118,
    101,
    114,
    115,
    105,
    116,
    121,
    116,
    101,
    120,
    116,
    45,
    97,
    108,
    105,
    103,
    110,
    58,
    108,
    101,
    102,
    116,
    59,
    10,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    119,
    114,
    105,
    116,
    101,
    40,
    44,
    32,
    105,
    110,
    99,
    108,
    117,
    100,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    32,
    97,
    114,
    111,
    117,
    110,
    100,
    32,
    116,
    104,
    101,
    32,
    119,
    111,
    114,
    108,
    100,
    41,
    59,
    13,
    10,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    13,
    10,
    60,
    34,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    104,
    101,
    105,
    103,
    104,
    116,
    58,
    59,
    111,
    118,
    101,
    114,
    102,
    108,
    111,
    119,
    58,
    104,
    105,
    100,
    100,
    101,
    110,
    109,
    111,
    114,
    101,
    32,
    105,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    97,
    110,
    32,
    105,
    110,
    116,
    101,
    114,
    110,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    97,
    32,
    109,
    101,
    109,
    98,
    101,
    114,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    111,
    110,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    102,
    105,
    114,
    115,
    116,
    99,
    97,
    110,
    32,
    98,
    101,
    32,
    102,
    111,
    117,
    110,
    100,
    32,
    105,
    110,
    32,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    9,
    9,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    58,
    32,
    110,
    111,
    110,
    101,
    59,
    34,
    62,
    34,
    32,
    47,
    62,
    10,
    60,
    108,
    105,
    110,
    107,
    32,
    114,
    101,
    108,
    61,
    34,
    10,
    32,
    32,
    40,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    41,
    32,
    123,
    116,
    104,
    101,
    32,
    49,
    53,
    116,
    104,
    32,
    99,
    101,
    110,
    116,
    117,
    114,
    121,
    46,
    112,
    114,
    101,
    118,
    101,
    110,
    116,
    68,
    101,
    102,
    97,
    117,
    108,
    116,
    40,
    108,
    97,
    114,
    103,
    101,
    32,
    110,
    117,
    109,
    98,
    101,
    114,
    32,
    111,
    102,
    32,
    66,
    121,
    122,
    97,
    110,
    116,
    105,
    110,
    101,
    32,
    69,
    109,
    112,
    105,
    114,
    101,
    46,
    106,
    112,
    103,
    124,
    116,
    104,
    117,
    109,
    98,
    124,
    108,
    101,
    102,
    116,
    124,
    118,
    97,
    115,
    116,
    32,
    109,
    97,
    106,
    111,
    114,
    105,
    116,
    121,
    32,
    111,
    102,
    109,
    97,
    106,
    111,
    114,
    105,
    116,
    121,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    32,
    97,
    108,
    105,
    103,
    110,
    61,
    34,
    99,
    101,
    110,
    116,
    101,
    114,
    34,
    62,
    85,
    110,
    105,
    118,
    101,
    114,
    115,
    105,
    116,
    121,
    32,
    80,
    114,
    101,
    115,
    115,
    100,
    111,
    109,
    105,
    110,
    97,
    116,
    101,
    100,
    32,
    98,
    121,
    32,
    116,
    104,
    101,
    83,
    101,
    99,
    111,
    110,
    100,
    32,
    87,
    111,
    114,
    108,
    100,
    32,
    87,
    97,
    114,
    100,
    105,
    115,
    116,
    114,
    105,
    98,
    117,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    58,
    116,
    104,
    101,
    32,
    114,
    101,
    115,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    99,
    104,
    97,
    114,
    97,
    99,
    116,
    101,
    114,
    105,
    122,
    101,
    100,
    32,
    98,
    121,
    32,
    114,
    101,
    108,
    61,
    34,
    110,
    111,
    102,
    111,
    108,
    108,
    111,
    119,
    34,
    62,
    100,
    101,
    114,
    105,
    118,
    101,
    115,
    32,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    101,
    114,
    97,
    116,
    104,
    101,
    114,
    32,
    116,
    104,
    97,
    110,
    32,
    116,
    104,
    101,
    32,
    97,
    32,
    99,
    111,
    109,
    98,
    105,
    110,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    119,
    105,
    100,
    116,
    104,
    58,
    49,
    48,
    48,
    69,
    110,
    103,
    108,
    105,
    115,
    104,
    45,
    115,
    112,
    101,
    97,
    107,
    105,
    110,
    103,
    99,
    111,
    109,
    112,
    117,
    116,
    101,
    114,
    32,
    115,
    99,
    105,
    101,
    110,
    99,
    101,
    98,
    111,
    114,
    100,
    101,
    114,
    61,
    34,
    48,
    34,
    32,
    97,
    108,
    116,
    61,
    34,
    116,
    104,
    101,
    32,
    101,
    120,
    105,
    115,
    116,
    101,
    110,
    99,
    101,
    32,
    111,
    102,
    68,
    101,
    109,
    111,
    99,
    114,
    97,
    116,
    105,
    99,
    32,
    80,
    97,
    114,
    116,
    121,
    34,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    109,
    97,
    114,
    103,
    105,
    110,
    45,
    70,
    111,
    114,
    32,
    116,
    104,
    105,
    115,
    32,
    114,
    101,
    97,
    115,
    111,
    110,
    44,
    46,
    106,
    115,
    34,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    9,
    115,
    66,
    121,
    84,
    97,
    103,
    78,
    97,
    109,
    101,
    40,
    115,
    41,
    91,
    48,
    93,
    106,
    115,
    34,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    13,
    10,
    60,
    46,
    106,
    115,
    34,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    13,
    10,
    108,
    105,
    110,
    107,
    32,
    114,
    101,
    108,
    61,
    34,
    105,
    99,
    111,
    110,
    34,
    32,
    39,
    32,
    97,
    108,
    116,
    61,
    39,
    39,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    39,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    118,
    101,
    114,
    115,
    105,
    111,
    110,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    60,
    47,
    97,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    47,
    112,
    97,
    103,
    101,
    62,
    10,
    32,
    32,
    60,
    112,
    97,
    103,
    101,
    62,
    10,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    99,
    111,
    110,
    116,
    98,
    101,
    99,
    97,
    109,
    101,
    32,
    116,
    104,
    101,
    32,
    102,
    105,
    114,
    115,
    116,
    98,
    97,
    104,
    97,
    115,
    97,
    32,
    73,
    110,
    100,
    111,
    110,
    101,
    115,
    105,
    97,
    101,
    110,
    103,
    108,
    105,
    115,
    104,
    32,
    40,
    115,
    105,
    109,
    112,
    108,
    101,
    41,
    206,
    149,
    206,
    187,
    206,
    187,
    206,
    183,
    206,
    189,
    206,
    185,
    206,
    186,
    206,
    172,
    209,
    133,
    209,
    128,
    208,
    178,
    208,
    176,
    209,
    130,
    209,
    129,
    208,
    186,
    208,
    184,
    208,
    186,
    208,
    190,
    208,
    188,
    208,
    191,
    208,
    176,
    208,
    189,
    208,
    184,
    208,
    184,
    209,
    143,
    208,
    178,
    208,
    187,
    209,
    143,
    208,
    181,
    209,
    130,
    209,
    129,
    209,
    143,
    208,
    148,
    208,
    190,
    208,
    177,
    208,
    176,
    208,
    178,
    208,
    184,
    209,
    130,
    209,
    140,
    209,
    135,
    208,
    181,
    208,
    187,
    208,
    190,
    208,
    178,
    208,
    181,
    208,
    186,
    208,
    176,
    209,
    128,
    208,
    176,
    208,
    183,
    208,
    178,
    208,
    184,
    209,
    130,
    208,
    184,
    209,
    143,
    208,
    152,
    208,
    189,
    209,
    130,
    208,
    181,
    209,
    128,
    208,
    189,
    208,
    181,
    209,
    130,
    208,
    158,
    209,
    130,
    208,
    178,
    208,
    181,
    209,
    130,
    208,
    184,
    209,
    130,
    209,
    140,
    208,
    189,
    208,
    176,
    208,
    191,
    209,
    128,
    208,
    184,
    208,
    188,
    208,
    181,
    209,
    128,
    208,
    184,
    208,
    189,
    209,
    130,
    208,
    181,
    209,
    128,
    208,
    189,
    208,
    181,
    209,
    130,
    208,
    186,
    208,
    190,
    209,
    130,
    208,
    190,
    209,
    128,
    208,
    190,
    208,
    179,
    208,
    190,
    209,
    129,
    209,
    130,
    209,
    128,
    208,
    176,
    208,
    189,
    208,
    184,
    209,
    134,
    209,
    139,
    208,
    186,
    208,
    176,
    209,
    135,
    208,
    181,
    209,
    129,
    209,
    130,
    208,
    178,
    208,
    181,
    209,
    131,
    209,
    129,
    208,
    187,
    208,
    190,
    208,
    178,
    208,
    184,
    209,
    143,
    209,
    133,
    208,
    191,
    209,
    128,
    208,
    190,
    208,
    177,
    208,
    187,
    208,
    181,
    208,
    188,
    209,
    139,
    208,
    191,
    208,
    190,
    208,
    187,
    209,
    131,
    209,
    135,
    208,
    184,
    209,
    130,
    209,
    140,
    209,
    143,
    208,
    178,
    208,
    187,
    209,
    143,
    209,
    142,
    209,
    130,
    209,
    129,
    209,
    143,
    208,
    189,
    208,
    176,
    208,
    184,
    208,
    177,
    208,
    190,
    208,
    187,
    208,
    181,
    208,
    181,
    208,
    186,
    208,
    190,
    208,
    188,
    208,
    191,
    208,
    176,
    208,
    189,
    208,
    184,
    209,
    143,
    208,
    178,
    208,
    189,
    208,
    184,
    208,
    188,
    208,
    176,
    208,
    189,
    208,
    184,
    208,
    181,
    209,
    129,
    209,
    128,
    208,
    181,
    208,
    180,
    209,
    129,
    209,
    130,
    208,
    178,
    208,
    176,
    216,
    167,
    217,
    132,
    217,
    133,
    217,
    136,
    216,
    167,
    216,
    182,
    217,
    138,
    216,
    185,
    216,
    167,
    217,
    132,
    216,
    177,
    216,
    166,
    217,
    138,
    216,
    179,
    217,
    138,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    167,
    217,
    134,
    216,
    170,
    217,
    130,
    216,
    167,
    217,
    132,
    217,
    133,
    216,
    180,
    216,
    167,
    216,
    177,
    217,
    131,
    216,
    167,
    216,
    170,
    217,
    131,
    216,
    167,
    217,
    132,
    216,
    179,
    217,
    138,
    216,
    167,
    216,
    177,
    216,
    167,
    216,
    170,
    216,
    167,
    217,
    132,
    217,
    133,
    217,
    131,
    216,
    170,
    217,
    136,
    216,
    168,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    179,
    216,
    185,
    217,
    136,
    216,
    175,
    217,
    138,
    216,
    169,
    216,
    167,
    216,
    173,
    216,
    181,
    216,
    167,
    216,
    166,
    217,
    138,
    216,
    167,
    216,
    170,
    216,
    167,
    217,
    132,
    216,
    185,
    216,
    167,
    217,
    132,
    217,
    133,
    217,
    138,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    181,
    217,
    136,
    216,
    170,
    217,
    138,
    216,
    167,
    216,
    170,
    216,
    167,
    217,
    132,
    216,
    167,
    217,
    134,
    216,
    170,
    216,
    177,
    217,
    134,
    216,
    170,
    216,
    167,
    217,
    132,
    216,
    170,
    216,
    181,
    216,
    167,
    217,
    133,
    217,
    138,
    217,
    133,
    216,
    167,
    217,
    132,
    216,
    165,
    216,
    179,
    217,
    132,
    216,
    167,
    217,
    133,
    217,
    138,
    216,
    167,
    217,
    132,
    217,
    133,
    216,
    180,
    216,
    167,
    216,
    177,
    217,
    131,
    216,
    169,
    216,
    167,
    217,
    132,
    217,
    133,
    216,
    177,
    216,
    166,
    217,
    138,
    216,
    167,
    216,
    170,
    114,
    111,
    98,
    111,
    116,
    115,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    102,
    111,
    111,
    116,
    101,
    114,
    34,
    62,
    116,
    104,
    101,
    32,
    85,
    110,
    105,
    116,
    101,
    100,
    32,
    83,
    116,
    97,
    116,
    101,
    115,
    60,
    105,
    109,
    103,
    32,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    46,
    106,
    112,
    103,
    124,
    114,
    105,
    103,
    104,
    116,
    124,
    116,
    104,
    117,
    109,
    98,
    124,
    46,
    106,
    115,
    34,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    13,
    10,
    60,
    108,
    111,
    99,
    97,
    116,
    105,
    111,
    110,
    46,
    112,
    114,
    111,
    116,
    111,
    99,
    111,
    108,
    102,
    114,
    97,
    109,
    101,
    98,
    111,
    114,
    100,
    101,
    114,
    61,
    34,
    48,
    34,
    32,
    115,
    34,
    32,
    47,
    62,
    10,
    60,
    109,
    101,
    116,
    97,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    60,
    47,
    97,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    102,
    111,
    110,
    116,
    45,
    119,
    101,
    105,
    103,
    104,
    116,
    58,
    98,
    111,
    108,
    100,
    59,
    38,
    113,
    117,
    111,
    116,
    59,
    32,
    97,
    110,
    100,
    32,
    38,
    113,
    117,
    111,
    116,
    59,
    100,
    101,
    112,
    101,
    110,
    100,
    105,
    110,
    103,
    32,
    111,
    110,
    32,
    116,
    104,
    101,
    32,
    109,
    97,
    114,
    103,
    105,
    110,
    58,
    48,
    59,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    58,
    34,
    32,
    114,
    101,
    108,
    61,
    34,
    110,
    111,
    102,
    111,
    108,
    108,
    111,
    119,
    34,
    32,
    80,
    114,
    101,
    115,
    105,
    100,
    101,
    110,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    116,
    119,
    101,
    110,
    116,
    105,
    101,
    116,
    104,
    32,
    99,
    101,
    110,
    116,
    117,
    114,
    121,
    101,
    118,
    105,
    115,
    105,
    111,
    110,
    62,
    10,
    32,
    32,
    60,
    47,
    112,
    97,
    103,
    101,
    73,
    110,
    116,
    101,
    114,
    110,
    101,
    116,
    32,
    69,
    120,
    112,
    108,
    111,
    114,
    101,
    114,
    97,
    46,
    97,
    115,
    121,
    110,
    99,
    32,
    61,
    32,
    116,
    114,
    117,
    101,
    59,
    13,
    10,
    105,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    32,
    97,
    98,
    111,
    117,
    116,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    104,
    101,
    97,
    100,
    101,
    114,
    34,
    62,
    34,
    32,
    97,
    99,
    116,
    105,
    111,
    110,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    115,
    58,
    47,
    47,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    34,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    34,
    60,
    47,
    100,
    105,
    118,
    62,
    13,
    10,
    60,
    47,
    100,
    105,
    118,
    62,
    13,
    10,
    60,
    100,
    101,
    114,
    105,
    118,
    101,
    100,
    32,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    101,
    32,
    60,
    105,
    109,
    103,
    32,
    115,
    114,
    99,
    61,
    39,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    97,
    99,
    99,
    111,
    114,
    100,
    105,
    110,
    103,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    32,
    10,
    60,
    47,
    98,
    111,
    100,
    121,
    62,
    10,
    60,
    47,
    104,
    116,
    109,
    108,
    62,
    10,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    102,
    111,
    110,
    116,
    45,
    115,
    105,
    122,
    101,
    58,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    61,
    34,
    65,
    114,
    105,
    97,
    108,
    44,
    32,
    72,
    101,
    108,
    118,
    101,
    116,
    105,
    99,
    97,
    44,
    60,
    47,
    97,
    62,
    60,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    112,
    111,
    108,
    105,
    116,
    105,
    99,
    97,
    108,
    32,
    112,
    97,
    114,
    116,
    105,
    101,
    115,
    116,
    100,
    62,
    60,
    47,
    116,
    114,
    62,
    60,
    47,
    116,
    97,
    98,
    108,
    101,
    62,
    60,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    105,
    110,
    116,
    101,
    114,
    112,
    114,
    101,
    116,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    114,
    101,
    108,
    61,
    34,
    115,
    116,
    121,
    108,
    101,
    115,
    104,
    101,
    101,
    116,
    34,
    32,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    119,
    114,
    105,
    116,
    101,
    40,
    39,
    60,
    99,
    104,
    97,
    114,
    115,
    101,
    116,
    61,
    34,
    117,
    116,
    102,
    45,
    56,
    34,
    62,
    10,
    98,
    101,
    103,
    105,
    110,
    110,
    105,
    110,
    103,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    114,
    101,
    118,
    101,
    97,
    108,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    116,
    101,
    108,
    101,
    118,
    105,
    115,
    105,
    111,
    110,
    32,
    115,
    101,
    114,
    105,
    101,
    115,
    34,
    32,
    114,
    101,
    108,
    61,
    34,
    110,
    111,
    102,
    111,
    108,
    108,
    111,
    119,
    34,
    62,
    32,
    116,
    97,
    114,
    103,
    101,
    116,
    61,
    34,
    95,
    98,
    108,
    97,
    110,
    107,
    34,
    62,
    99,
    108,
    97,
    105,
    109,
    105,
    110,
    103,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    104,
    116,
    116,
    112,
    37,
    51,
    65,
    37,
    50,
    70,
    37,
    50,
    70,
    119,
    119,
    119,
    46,
    109,
    97,
    110,
    105,
    102,
    101,
    115,
    116,
    97,
    116,
    105,
    111,
    110,
    115,
    32,
    111,
    102,
    80,
    114,
    105,
    109,
    101,
    32,
    77,
    105,
    110,
    105,
    115,
    116,
    101,
    114,
    32,
    111,
    102,
    105,
    110,
    102,
    108,
    117,
    101,
    110,
    99,
    101,
    100,
    32,
    98,
    121,
    32,
    116,
    104,
    101,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    99,
    108,
    101,
    97,
    114,
    102,
    105,
    120,
    34,
    62,
    47,
    100,
    105,
    118,
    62,
    13,
    10,
    60,
    47,
    100,
    105,
    118,
    62,
    13,
    10,
    13,
    10,
    116,
    104,
    114,
    101,
    101,
    45,
    100,
    105,
    109,
    101,
    110,
    115,
    105,
    111,
    110,
    97,
    108,
    67,
    104,
    117,
    114,
    99,
    104,
    32,
    111,
    102,
    32,
    69,
    110,
    103,
    108,
    97,
    110,
    100,
    111,
    102,
    32,
    78,
    111,
    114,
    116,
    104,
    32,
    67,
    97,
    114,
    111,
    108,
    105,
    110,
    97,
    115,
    113,
    117,
    97,
    114,
    101,
    32,
    107,
    105,
    108,
    111,
    109,
    101,
    116,
    114,
    101,
    115,
    46,
    97,
    100,
    100,
    69,
    118,
    101,
    110,
    116,
    76,
    105,
    115,
    116,
    101,
    110,
    101,
    114,
    100,
    105,
    115,
    116,
    105,
    110,
    99,
    116,
    32,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    101,
    99,
    111,
    109,
    109,
    111,
    110,
    108,
    121,
    32,
    107,
    110,
    111,
    119,
    110,
    32,
    97,
    115,
    80,
    104,
    111,
    110,
    101,
    116,
    105,
    99,
    32,
    65,
    108,
    112,
    104,
    97,
    98,
    101,
    116,
    100,
    101,
    99,
    108,
    97,
    114,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    99,
    111,
    110,
    116,
    114,
    111,
    108,
    108,
    101,
    100,
    32,
    98,
    121,
    32,
    116,
    104,
    101,
    66,
    101,
    110,
    106,
    97,
    109,
    105,
    110,
    32,
    70,
    114,
    97,
    110,
    107,
    108,
    105,
    110,
    114,
    111,
    108,
    101,
    45,
    112,
    108,
    97,
    121,
    105,
    110,
    103,
    32,
    103,
    97,
    109,
    101,
    116,
    104,
    101,
    32,
    85,
    110,
    105,
    118,
    101,
    114,
    115,
    105,
    116,
    121,
    32,
    111,
    102,
    105,
    110,
    32,
    87,
    101,
    115,
    116,
    101,
    114,
    110,
    32,
    69,
    117,
    114,
    111,
    112,
    101,
    112,
    101,
    114,
    115,
    111,
    110,
    97,
    108,
    32,
    99,
    111,
    109,
    112,
    117,
    116,
    101,
    114,
    80,
    114,
    111,
    106,
    101,
    99,
    116,
    32,
    71,
    117,
    116,
    101,
    110,
    98,
    101,
    114,
    103,
    114,
    101,
    103,
    97,
    114,
    100,
    108,
    101,
    115,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    104,
    97,
    115,
    32,
    98,
    101,
    101,
    110,
    32,
    112,
    114,
    111,
    112,
    111,
    115,
    101,
    100,
    116,
    111,
    103,
    101,
    116,
    104,
    101,
    114,
    32,
    119,
    105,
    116,
    104,
    32,
    116,
    104,
    101,
    62,
    60,
    47,
    108,
    105,
    62,
    60,
    108,
    105,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    105,
    110,
    32,
    115,
    111,
    109,
    101,
    32,
    99,
    111,
    117,
    110,
    116,
    114,
    105,
    101,
    115,
    109,
    105,
    110,
    46,
    106,
    115,
    34,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    112,
    111,
    112,
    117,
    108,
    97,
    116,
    105,
    111,
    110,
    111,
    102,
    102,
    105,
    99,
    105,
    97,
    108,
    32,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    60,
    105,
    109,
    103,
    32,
    115,
    114,
    99,
    61,
    34,
    105,
    109,
    97,
    103,
    101,
    115,
    47,
    105,
    100,
    101,
    110,
    116,
    105,
    102,
    105,
    101,
    100,
    32,
    98,
    121,
    32,
    116,
    104,
    101,
    110,
    97,
    116,
    117,
    114,
    97,
    108,
    32,
    114,
    101,
    115,
    111,
    117,
    114,
    99,
    101,
    115,
    99,
    108,
    97,
    115,
    115,
    105,
    102,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    99,
    97,
    110,
    32,
    98,
    101,
    32,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    101,
    100,
    113,
    117,
    97,
    110,
    116,
    117,
    109,
    32,
    109,
    101,
    99,
    104,
    97,
    110,
    105,
    99,
    115,
    78,
    101,
    118,
    101,
    114,
    116,
    104,
    101,
    108,
    101,
    115,
    115,
    44,
    32,
    116,
    104,
    101,
    109,
    105,
    108,
    108,
    105,
    111,
    110,
    32,
    121,
    101,
    97,
    114,
    115,
    32,
    97,
    103,
    111,
    60,
    47,
    98,
    111,
    100,
    121,
    62,
    13,
    10,
    60,
    47,
    104,
    116,
    109,
    108,
    62,
    13,
    206,
    149,
    206,
    187,
    206,
    187,
    206,
    183,
    206,
    189,
    206,
    185,
    206,
    186,
    206,
    172,
    10,
    116,
    97,
    107,
    101,
    32,
    97,
    100,
    118,
    97,
    110,
    116,
    97,
    103,
    101,
    32,
    111,
    102,
    97,
    110,
    100,
    44,
    32,
    97,
    99,
    99,
    111,
    114,
    100,
    105,
    110,
    103,
    32,
    116,
    111,
    97,
    116,
    116,
    114,
    105,
    98,
    117,
    116,
    101,
    100,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    77,
    105,
    99,
    114,
    111,
    115,
    111,
    102,
    116,
    32,
    87,
    105,
    110,
    100,
    111,
    119,
    115,
    116,
    104,
    101,
    32,
    102,
    105,
    114,
    115,
    116,
    32,
    99,
    101,
    110,
    116,
    117,
    114,
    121,
    117,
    110,
    100,
    101,
    114,
    32,
    116,
    104,
    101,
    32,
    99,
    111,
    110,
    116,
    114,
    111,
    108,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    104,
    101,
    97,
    100,
    101,
    114,
    115,
    104,
    111,
    114,
    116,
    108,
    121,
    32,
    97,
    102,
    116,
    101,
    114,
    32,
    116,
    104,
    101,
    110,
    111,
    116,
    97,
    98,
    108,
    101,
    32,
    101,
    120,
    99,
    101,
    112,
    116,
    105,
    111,
    110,
    116,
    101,
    110,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    111,
    117,
    115,
    97,
    110,
    100,
    115,
    115,
    101,
    118,
    101,
    114,
    97,
    108,
    32,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    97,
    114,
    111,
    117,
    110,
    100,
    32,
    116,
    104,
    101,
    32,
    119,
    111,
    114,
    108,
    100,
    46,
    114,
    101,
    97,
    99,
    104,
    105,
    110,
    103,
    32,
    109,
    105,
    108,
    105,
    116,
    97,
    114,
    121,
    105,
    115,
    111,
    108,
    97,
    116,
    101,
    100,
    32,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    101,
    111,
    112,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    79,
    108,
    100,
    32,
    84,
    101,
    115,
    116,
    97,
    109,
    101,
    110,
    116,
    65,
    102,
    114,
    105,
    99,
    97,
    110,
    32,
    65,
    109,
    101,
    114,
    105,
    99,
    97,
    110,
    115,
    105,
    110,
    115,
    101,
    114,
    116,
    101,
    100,
    32,
    105,
    110,
    116,
    111,
    32,
    116,
    104,
    101,
    115,
    101,
    112,
    97,
    114,
    97,
    116,
    101,
    32,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    101,
    109,
    101,
    116,
    114,
    111,
    112,
    111,
    108,
    105,
    116,
    97,
    110,
    32,
    97,
    114,
    101,
    97,
    109,
    97,
    107,
    101,
    115,
    32,
    105,
    116,
    32,
    112,
    111,
    115,
    115,
    105,
    98,
    108,
    101,
    97,
    99,
    107,
    110,
    111,
    119,
    108,
    101,
    100,
    103,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    97,
    114,
    103,
    117,
    97,
    98,
    108,
    121,
    32,
    116,
    104,
    101,
    32,
    109,
    111,
    115,
    116,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    99,
    115,
    115,
    34,
    62,
    10,
    116,
    104,
    101,
    32,
    73,
    110,
    116,
    101,
    114,
    110,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    65,
    99,
    99,
    111,
    114,
    100,
    105,
    110,
    103,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    32,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    99,
    115,
    115,
    34,
    32,
    47,
    62,
    10,
    99,
    111,
    105,
    110,
    99,
    105,
    100,
    101,
    32,
    119,
    105,
    116,
    104,
    32,
    116,
    104,
    101,
    116,
    119,
    111,
    45,
    116,
    104,
    105,
    114,
    100,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    68,
    117,
    114,
    105,
    110,
    103,
    32,
    116,
    104,
    105,
    115,
    32,
    116,
    105,
    109,
    101,
    44,
    100,
    117,
    114,
    105,
    110,
    103,
    32,
    116,
    104,
    101,
    32,
    112,
    101,
    114,
    105,
    111,
    100,
    97,
    110,
    110,
    111,
    117,
    110,
    99,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    32,
    104,
    101,
    116,
    104,
    101,
    32,
    105,
    110,
    116,
    101,
    114,
    110,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    97,
    110,
    100,
    32,
    109,
    111,
    114,
    101,
    32,
    114,
    101,
    99,
    101,
    110,
    116,
    108,
    121,
    98,
    101,
    108,
    105,
    101,
    118,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    99,
    111,
    110,
    115,
    99,
    105,
    111,
    117,
    115,
    110,
    101,
    115,
    115,
    32,
    97,
    110,
    100,
    102,
    111,
    114,
    109,
    101,
    114,
    108,
    121,
    32,
    107,
    110,
    111,
    119,
    110,
    32,
    97,
    115,
    115,
    117,
    114,
    114,
    111,
    117,
    110,
    100,
    101,
    100,
    32,
    98,
    121,
    32,
    116,
    104,
    101,
    102,
    105,
    114,
    115,
    116,
    32,
    97,
    112,
    112,
    101,
    97,
    114,
    101,
    100,
    32,
    105,
    110,
    111,
    99,
    99,
    97,
    115,
    105,
    111,
    110,
    97,
    108,
    108,
    121,
    32,
    117,
    115,
    101,
    100,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    58,
    97,
    98,
    115,
    111,
    108,
    117,
    116,
    101,
    59,
    34,
    32,
    116,
    97,
    114,
    103,
    101,
    116,
    61,
    34,
    95,
    98,
    108,
    97,
    110,
    107,
    34,
    32,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    58,
    114,
    101,
    108,
    97,
    116,
    105,
    118,
    101,
    59,
    116,
    101,
    120,
    116,
    45,
    97,
    108,
    105,
    103,
    110,
    58,
    99,
    101,
    110,
    116,
    101,
    114,
    59,
    106,
    97,
    120,
    47,
    108,
    105,
    98,
    115,
    47,
    106,
    113,
    117,
    101,
    114,
    121,
    47,
    49,
    46,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    45,
    99,
    111,
    108,
    111,
    114,
    58,
    35,
    116,
    121,
    112,
    101,
    61,
    34,
    97,
    112,
    112,
    108,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    47,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    60,
    109,
    101,
    116,
    97,
    32,
    104,
    116,
    116,
    112,
    45,
    101,
    113,
    117,
    105,
    118,
    61,
    34,
    80,
    114,
    105,
    118,
    97,
    99,
    121,
    32,
    80,
    111,
    108,
    105,
    99,
    121,
    60,
    47,
    97,
    62,
    101,
    40,
    34,
    37,
    51,
    67,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    115,
    114,
    99,
    61,
    39,
    34,
    32,
    116,
    97,
    114,
    103,
    101,
    116,
    61,
    34,
    95,
    98,
    108,
    97,
    110,
    107,
    34,
    62,
    79,
    110,
    32,
    116,
    104,
    101,
    32,
    111,
    116,
    104,
    101,
    114,
    32,
    104,
    97,
    110,
    100,
    44,
    46,
    106,
    112,
    103,
    124,
    116,
    104,
    117,
    109,
    98,
    124,
    114,
    105,
    103,
    104,
    116,
    124,
    50,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    60,
    100,
    105,
    118,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    102,
    108,
    111,
    97,
    116,
    58,
    110,
    105,
    110,
    101,
    116,
    101,
    101,
    110,
    116,
    104,
    32,
    99,
    101,
    110,
    116,
    117,
    114,
    121,
    60,
    47,
    98,
    111,
    100,
    121,
    62,
    13,
    10,
    60,
    47,
    104,
    116,
    109,
    108,
    62,
    13,
    10,
    60,
    105,
    109,
    103,
    32,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    115,
    59,
    116,
    101,
    120,
    116,
    45,
    97,
    108,
    105,
    103,
    110,
    58,
    99,
    101,
    110,
    116,
    101,
    114,
    102,
    111,
    110,
    116,
    45,
    119,
    101,
    105,
    103,
    104,
    116,
    58,
    32,
    98,
    111,
    108,
    100,
    59,
    32,
    65,
    99,
    99,
    111,
    114,
    100,
    105,
    110,
    103,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    32,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    32,
    98,
    101,
    116,
    119,
    101,
    101,
    110,
    34,
    32,
    102,
    114,
    97,
    109,
    101,
    98,
    111,
    114,
    100,
    101,
    114,
    61,
    34,
    48,
    34,
    32,
    34,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    58,
    108,
    105,
    110,
    107,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    104,
    116,
    109,
    108,
    52,
    47,
    108,
    111,
    111,
    115,
    101,
    46,
    100,
    116,
    100,
    34,
    62,
    10,
    100,
    117,
    114,
    105,
    110,
    103,
    32,
    116,
    104,
    105,
    115,
    32,
    112,
    101,
    114,
    105,
    111,
    100,
    60,
    47,
    116,
    100,
    62,
    60,
    47,
    116,
    114,
    62,
    60,
    47,
    116,
    97,
    98,
    108,
    101,
    62,
    99,
    108,
    111,
    115,
    101,
    108,
    121,
    32,
    114,
    101,
    108,
    97,
    116,
    101,
    100,
    32,
    116,
    111,
    102,
    111,
    114,
    32,
    116,
    104,
    101,
    32,
    102,
    105,
    114,
    115,
    116,
    32,
    116,
    105,
    109,
    101,
    59,
    102,
    111,
    110,
    116,
    45,
    119,
    101,
    105,
    103,
    104,
    116,
    58,
    98,
    111,
    108,
    100,
    59,
    105,
    110,
    112,
    117,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    34,
    32,
    60,
    115,
    112,
    97,
    110,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    102,
    111,
    110,
    116,
    45,
    111,
    110,
    114,
    101,
    97,
    100,
    121,
    115,
    116,
    97,
    116,
    101,
    99,
    104,
    97,
    110,
    103,
    101,
    9,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    99,
    108,
    101,
    97,
    114,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    108,
    111,
    99,
    97,
    116,
    105,
    111,
    110,
    46,
    32,
    70,
    111,
    114,
    32,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    44,
    32,
    116,
    104,
    101,
    32,
    97,
    32,
    119,
    105,
    100,
    101,
    32,
    118,
    97,
    114,
    105,
    101,
    116,
    121,
    32,
    111,
    102,
    32,
    60,
    33,
    68,
    79,
    67,
    84,
    89,
    80,
    69,
    32,
    104,
    116,
    109,
    108,
    62,
    13,
    10,
    60,
    38,
    110,
    98,
    115,
    112,
    59,
    38,
    110,
    98,
    115,
    112,
    59,
    38,
    110,
    98,
    115,
    112,
    59,
    34,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    102,
    108,
    111,
    97,
    116,
    58,
    108,
    101,
    102,
    116,
    59,
    99,
    111,
    110,
    99,
    101,
    114,
    110,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    32,
    116,
    104,
    101,
    61,
    104,
    116,
    116,
    112,
    37,
    51,
    65,
    37,
    50,
    70,
    37,
    50,
    70,
    119,
    119,
    119,
    46,
    105,
    110,
    32,
    112,
    111,
    112,
    117,
    108,
    97,
    114,
    32,
    99,
    117,
    108,
    116,
    117,
    114,
    101,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    99,
    115,
    115,
    34,
    32,
    47,
    62,
    105,
    116,
    32,
    105,
    115,
    32,
    112,
    111,
    115,
    115,
    105,
    98,
    108,
    101,
    32,
    116,
    111,
    32,
    72,
    97,
    114,
    118,
    97,
    114,
    100,
    32,
    85,
    110,
    105,
    118,
    101,
    114,
    115,
    105,
    116,
    121,
    116,
    121,
    108,
    101,
    115,
    104,
    101,
    101,
    116,
    34,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    47,
    116,
    104,
    101,
    32,
    109,
    97,
    105,
    110,
    32,
    99,
    104,
    97,
    114,
    97,
    99,
    116,
    101,
    114,
    79,
    120,
    102,
    111,
    114,
    100,
    32,
    85,
    110,
    105,
    118,
    101,
    114,
    115,
    105,
    116,
    121,
    32,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    107,
    101,
    121,
    119,
    111,
    114,
    100,
    115,
    34,
    32,
    99,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    45,
    97,
    108,
    105,
    103,
    110,
    58,
    116,
    104,
    101,
    32,
    85,
    110,
    105,
    116,
    101,
    100,
    32,
    75,
    105,
    110,
    103,
    100,
    111,
    109,
    102,
    101,
    100,
    101,
    114,
    97,
    108,
    32,
    103,
    111,
    118,
    101,
    114,
    110,
    109,
    101,
    110,
    116,
    60,
    100,
    105,
    118,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    109,
    97,
    114,
    103,
    105,
    110,
    32,
    100,
    101,
    112,
    101,
    110,
    100,
    105,
    110,
    103,
    32,
    111,
    110,
    32,
    116,
    104,
    101,
    32,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    104,
    101,
    97,
    100,
    101,
    114,
    46,
    109,
    105,
    110,
    46,
    106,
    115,
    34,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    100,
    101,
    115,
    116,
    114,
    117,
    99,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    115,
    108,
    105,
    103,
    104,
    116,
    108,
    121,
    32,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    105,
    110,
    32,
    97,
    99,
    99,
    111,
    114,
    100,
    97,
    110,
    99,
    101,
    32,
    119,
    105,
    116,
    104,
    116,
    101,
    108,
    101,
    99,
    111,
    109,
    109,
    117,
    110,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    115,
    105,
    110,
    100,
    105,
    99,
    97,
    116,
    101,
    115,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    115,
    104,
    111,
    114,
    116,
    108,
    121,
    32,
    116,
    104,
    101,
    114,
    101,
    97,
    102,
    116,
    101,
    114,
    101,
    115,
    112,
    101,
    99,
    105,
    97,
    108,
    108,
    121,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    69,
    117,
    114,
    111,
    112,
    101,
    97,
    110,
    32,
    99,
    111,
    117,
    110,
    116,
    114,
    105,
    101,
    115,
    72,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    32,
    116,
    104,
    101,
    114,
    101,
    32,
    97,
    114,
    101,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    115,
    116,
    97,
    116,
    105,
    99,
    115,
    117,
    103,
    103,
    101,
    115,
    116,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    34,
    32,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    97,
    32,
    108,
    97,
    114,
    103,
    101,
    32,
    110,
    117,
    109,
    98,
    101,
    114,
    32,
    111,
    102,
    32,
    84,
    101,
    108,
    101,
    99,
    111,
    109,
    109,
    117,
    110,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    115,
    34,
    32,
    114,
    101,
    108,
    61,
    34,
    110,
    111,
    102,
    111,
    108,
    108,
    111,
    119,
    34,
    32,
    116,
    72,
    111,
    108,
    121,
    32,
    82,
    111,
    109,
    97,
    110,
    32,
    69,
    109,
    112,
    101,
    114,
    111,
    114,
    97,
    108,
    109,
    111,
    115,
    116,
    32,
    101,
    120,
    99,
    108,
    117,
    115,
    105,
    118,
    101,
    108,
    121,
    34,
    32,
    98,
    111,
    114,
    100,
    101,
    114,
    61,
    34,
    48,
    34,
    32,
    97,
    108,
    116,
    61,
    34,
    83,
    101,
    99,
    114,
    101,
    116,
    97,
    114,
    121,
    32,
    111,
    102,
    32,
    83,
    116,
    97,
    116,
    101,
    99,
    117,
    108,
    109,
    105,
    110,
    97,
    116,
    105,
    110,
    103,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    67,
    73,
    65,
    32,
    87,
    111,
    114,
    108,
    100,
    32,
    70,
    97,
    99,
    116,
    98,
    111,
    111,
    107,
    116,
    104,
    101,
    32,
    109,
    111,
    115,
    116,
    32,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    116,
    97,
    110,
    110,
    105,
    118,
    101,
    114,
    115,
    97,
    114,
    121,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    45,
    60,
    108,
    105,
    62,
    60,
    101,
    109,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    47,
    116,
    104,
    101,
    32,
    65,
    116,
    108,
    97,
    110,
    116,
    105,
    99,
    32,
    79,
    99,
    101,
    97,
    110,
    115,
    116,
    114,
    105,
    99,
    116,
    108,
    121,
    32,
    115,
    112,
    101,
    97,
    107,
    105,
    110,
    103,
    44,
    115,
    104,
    111,
    114,
    116,
    108,
    121,
    32,
    98,
    101,
    102,
    111,
    114,
    101,
    32,
    116,
    104,
    101,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    32,
    116,
    121,
    112,
    101,
    115,
    32,
    111,
    102,
    116,
    104,
    101,
    32,
    79,
    116,
    116,
    111,
    109,
    97,
    110,
    32,
    69,
    109,
    112,
    105,
    114,
    101,
    62,
    60,
    105,
    109,
    103,
    32,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    65,
    110,
    32,
    73,
    110,
    116,
    114,
    111,
    100,
    117,
    99,
    116,
    105,
    111,
    110,
    32,
    116,
    111,
    99,
    111,
    110,
    115,
    101,
    113,
    117,
    101,
    110,
    99,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    100,
    101,
    112,
    97,
    114,
    116,
    117,
    114,
    101,
    32,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    101,
    67,
    111,
    110,
    102,
    101,
    100,
    101,
    114,
    97,
    116,
    101,
    32,
    83,
    116,
    97,
    116,
    101,
    115,
    105,
    110,
    100,
    105,
    103,
    101,
    110,
    111,
    117,
    115,
    32,
    112,
    101,
    111,
    112,
    108,
    101,
    115,
    80,
    114,
    111,
    99,
    101,
    101,
    100,
    105,
    110,
    103,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    105,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    110,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    111,
    114,
    105,
    101,
    115,
    32,
    104,
    97,
    118,
    101,
    32,
    98,
    101,
    101,
    110,
    105,
    110,
    118,
    111,
    108,
    118,
    101,
    109,
    101,
    110,
    116,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    100,
    105,
    118,
    105,
    100,
    101,
    100,
    32,
    105,
    110,
    116,
    111,
    32,
    116,
    104,
    114,
    101,
    101,
    97,
    100,
    106,
    97,
    99,
    101,
    110,
    116,
    32,
    99,
    111,
    117,
    110,
    116,
    114,
    105,
    101,
    115,
    105,
    115,
    32,
    114,
    101,
    115,
    112,
    111,
    110,
    115,
    105,
    98,
    108,
    101,
    32,
    102,
    111,
    114,
    100,
    105,
    115,
    115,
    111,
    108,
    117,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    99,
    111,
    108,
    108,
    97,
    98,
    111,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    119,
    105,
    116,
    104,
    119,
    105,
    100,
    101,
    108,
    121,
    32,
    114,
    101,
    103,
    97,
    114,
    100,
    101,
    100,
    32,
    97,
    115,
    104,
    105,
    115,
    32,
    99,
    111,
    110,
    116,
    101,
    109,
    112,
    111,
    114,
    97,
    114,
    105,
    101,
    115,
    102,
    111,
    117,
    110,
    100,
    105,
    110,
    103,
    32,
    109,
    101,
    109,
    98,
    101,
    114,
    32,
    111,
    102,
    68,
    111,
    109,
    105,
    110,
    105,
    99,
    97,
    110,
    32,
    82,
    101,
    112,
    117,
    98,
    108,
    105,
    99,
    103,
    101,
    110,
    101,
    114,
    97,
    108,
    108,
    121,
    32,
    97,
    99,
    99,
    101,
    112,
    116,
    101,
    100,
    116,
    104,
    101,
    32,
    112,
    111,
    115,
    115,
    105,
    98,
    105,
    108,
    105,
    116,
    121,
    32,
    111,
    102,
    97,
    114,
    101,
    32,
    97,
    108,
    115,
    111,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    117,
    110,
    100,
    101,
    114,
    32,
    99,
    111,
    110,
    115,
    116,
    114,
    117,
    99,
    116,
    105,
    111,
    110,
    114,
    101,
    115,
    116,
    111,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    103,
    101,
    110,
    101,
    114,
    97,
    108,
    32,
    112,
    117,
    98,
    108,
    105,
    99,
    105,
    115,
    32,
    97,
    108,
    109,
    111,
    115,
    116,
    32,
    101,
    110,
    116,
    105,
    114,
    101,
    108,
    121,
    112,
    97,
    115,
    115,
    101,
    115,
    32,
    116,
    104,
    114,
    111,
    117,
    103,
    104,
    32,
    116,
    104,
    101,
    104,
    97,
    115,
    32,
    98,
    101,
    101,
    110,
    32,
    115,
    117,
    103,
    103,
    101,
    115,
    116,
    101,
    100,
    99,
    111,
    109,
    112,
    117,
    116,
    101,
    114,
    32,
    97,
    110,
    100,
    32,
    118,
    105,
    100,
    101,
    111,
    71,
    101,
    114,
    109,
    97,
    110,
    105,
    99,
    32,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    115,
    32,
    97,
    99,
    99,
    111,
    114,
    100,
    105,
    110,
    103,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    32,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    32,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    101,
    115,
    104,
    111,
    114,
    116,
    108,
    121,
    32,
    97,
    102,
    116,
    101,
    114,
    119,
    97,
    114,
    100,
    115,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    115,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    114,
    101,
    99,
    101,
    110,
    116,
    32,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    109,
    101,
    110,
    116,
    66,
    111,
    97,
    114,
    100,
    32,
    111,
    102,
    32,
    68,
    105,
    114,
    101,
    99,
    116,
    111,
    114,
    115,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    115,
    101,
    97,
    114,
    99,
    104,
    124,
    32,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    73,
    110,
    32,
    112,
    97,
    114,
    116,
    105,
    99,
    117,
    108,
    97,
    114,
    44,
    32,
    116,
    104,
    101,
    77,
    117,
    108,
    116,
    105,
    112,
    108,
    101,
    32,
    102,
    111,
    111,
    116,
    110,
    111,
    116,
    101,
    115,
    111,
    114,
    32,
    111,
    116,
    104,
    101,
    114,
    32,
    115,
    117,
    98,
    115,
    116,
    97,
    110,
    99,
    101,
    116,
    104,
    111,
    117,
    115,
    97,
    110,
    100,
    115,
    32,
    111,
    102,
    32,
    121,
    101,
    97,
    114,
    115,
    116,
    114,
    97,
    110,
    115,
    108,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    60,
    47,
    100,
    105,
    118,
    62,
    13,
    10,
    60,
    47,
    100,
    105,
    118,
    62,
    13,
    10,
    13,
    10,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    105,
    110,
    100,
    101,
    120,
    46,
    112,
    104,
    112,
    119,
    97,
    115,
    32,
    101,
    115,
    116,
    97,
    98,
    108,
    105,
    115,
    104,
    101,
    100,
    32,
    105,
    110,
    109,
    105,
    110,
    46,
    106,
    115,
    34,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    112,
    97,
    114,
    116,
    105,
    99,
    105,
    112,
    97,
    116,
    101,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    97,
    32,
    115,
    116,
    114,
    111,
    110,
    103,
    32,
    105,
    110,
    102,
    108,
    117,
    101,
    110,
    99,
    101,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    109,
    97,
    114,
    103,
    105,
    110,
    45,
    116,
    111,
    112,
    58,
    114,
    101,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    101,
    100,
    32,
    98,
    121,
    32,
    116,
    104,
    101,
    103,
    114,
    97,
    100,
    117,
    97,
    116,
    101,
    100,
    32,
    102,
    114,
    111,
    109,
    32,
    116,
    104,
    101,
    84,
    114,
    97,
    100,
    105,
    116,
    105,
    111,
    110,
    97,
    108,
    108,
    121,
    44,
    32,
    116,
    104,
    101,
    69,
    108,
    101,
    109,
    101,
    110,
    116,
    40,
    34,
    115,
    99,
    114,
    105,
    112,
    116,
    34,
    41,
    59,
    72,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    32,
    115,
    105,
    110,
    99,
    101,
    32,
    116,
    104,
    101,
    47,
    100,
    105,
    118,
    62,
    10,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    60,
    100,
    105,
    118,
    32,
    108,
    101,
    102,
    116,
    59,
    32,
    109,
    97,
    114,
    103,
    105,
    110,
    45,
    108,
    101,
    102,
    116,
    58,
    112,
    114,
    111,
    116,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    97,
    103,
    97,
    105,
    110,
    115,
    116,
    48,
    59,
    32,
    118,
    101,
    114,
    116,
    105,
    99,
    97,
    108,
    45,
    97,
    108,
    105,
    103,
    110,
    58,
    85,
    110,
    102,
    111,
    114,
    116,
    117,
    110,
    97,
    116,
    101,
    108,
    121,
    44,
    32,
    116,
    104,
    101,
    116,
    121,
    112,
    101,
    61,
    34,
    105,
    109,
    97,
    103,
    101,
    47,
    120,
    45,
    105,
    99,
    111,
    110,
    47,
    100,
    105,
    118,
    62,
    10,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    99,
    108,
    101,
    97,
    114,
    102,
    105,
    120,
    34,
    62,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    102,
    111,
    111,
    116,
    101,
    114,
    9,
    9,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    9,
    9,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    116,
    104,
    101,
    32,
    109,
    111,
    116,
    105,
    111,
    110,
    32,
    112,
    105,
    99,
    116,
    117,
    114,
    101,
    208,
    145,
    209,
    138,
    208,
    187,
    208,
    179,
    208,
    176,
    209,
    128,
    209,
    129,
    208,
    186,
    208,
    184,
    208,
    177,
    209,
    138,
    208,
    187,
    208,
    179,
    208,
    176,
    209,
    128,
    209,
    129,
    208,
    186,
    208,
    184,
    208,
    164,
    208,
    181,
    208,
    180,
    208,
    181,
    209,
    128,
    208,
    176,
    209,
    134,
    208,
    184,
    208,
    184,
    208,
    189,
    208,
    181,
    209,
    129,
    208,
    186,
    208,
    190,
    208,
    187,
    209,
    140,
    208,
    186,
    208,
    190,
    209,
    129,
    208,
    190,
    208,
    190,
    208,
    177,
    209,
    137,
    208,
    181,
    208,
    189,
    208,
    184,
    208,
    181,
    209,
    129,
    208,
    190,
    208,
    190,
    208,
    177,
    209,
    137,
    208,
    181,
    208,
    189,
    208,
    184,
    209,
    143,
    208,
    191,
    209,
    128,
    208,
    190,
    208,
    179,
    209,
    128,
    208,
    176,
    208,
    188,
    208,
    188,
    209,
    139,
    208,
    158,
    209,
    130,
    208,
    191,
    209,
    128,
    208,
    176,
    208,
    178,
    208,
    184,
    209,
    130,
    209,
    140,
    208,
    177,
    208,
    181,
    209,
    129,
    208,
    191,
    208,
    187,
    208,
    176,
    209,
    130,
    208,
    189,
    208,
    190,
    208,
    188,
    208,
    176,
    209,
    130,
    208,
    181,
    209,
    128,
    208,
    184,
    208,
    176,
    208,
    187,
    209,
    139,
    208,
    191,
    208,
    190,
    208,
    183,
    208,
    178,
    208,
    190,
    208,
    187,
    209,
    143,
    208,
    181,
    209,
    130,
    208,
    191,
    208,
    190,
    209,
    129,
    208,
    187,
    208,
    181,
    208,
    180,
    208,
    189,
    208,
    184,
    208,
    181,
    209,
    128,
    208,
    176,
    208,
    183,
    208,
    187,
    208,
    184,
    209,
    135,
    208,
    189,
    209,
    139,
    209,
    133,
    208,
    191,
    209,
    128,
    208,
    190,
    208,
    180,
    209,
    131,
    208,
    186,
    209,
    134,
    208,
    184,
    208,
    184,
    208,
    191,
    209,
    128,
    208,
    190,
    208,
    179,
    209,
    128,
    208,
    176,
    208,
    188,
    208,
    188,
    208,
    176,
    208,
    191,
    208,
    190,
    208,
    187,
    208,
    189,
    208,
    190,
    209,
    129,
    209,
    130,
    209,
    140,
    209,
    142,
    208,
    189,
    208,
    176,
    209,
    133,
    208,
    190,
    208,
    180,
    208,
    184,
    209,
    130,
    209,
    129,
    209,
    143,
    208,
    184,
    208,
    183,
    208,
    177,
    209,
    128,
    208,
    176,
    208,
    189,
    208,
    189,
    208,
    190,
    208,
    181,
    208,
    189,
    208,
    176,
    209,
    129,
    208,
    181,
    208,
    187,
    208,
    181,
    208,
    189,
    208,
    184,
    209,
    143,
    208,
    184,
    208,
    183,
    208,
    188,
    208,
    181,
    208,
    189,
    208,
    181,
    208,
    189,
    208,
    184,
    209,
    143,
    208,
    186,
    208,
    176,
    209,
    130,
    208,
    181,
    208,
    179,
    208,
    190,
    209,
    128,
    208,
    184,
    208,
    184,
    208,
    144,
    208,
    187,
    208,
    181,
    208,
    186,
    209,
    129,
    208,
    176,
    208,
    189,
    208,
    180,
    209,
    128,
    224,
    164,
    166,
    224,
    165,
    141,
    224,
    164,
    181,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    190,
    224,
    164,
    174,
    224,
    165,
    136,
    224,
    164,
    168,
    224,
    165,
    129,
    224,
    164,
    133,
    224,
    164,
    178,
    224,
    164,
    170,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    166,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    164,
    173,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    164,
    224,
    165,
    128,
    224,
    164,
    175,
    224,
    164,
    133,
    224,
    164,
    168,
    224,
    165,
    129,
    224,
    164,
    166,
    224,
    165,
    135,
    224,
    164,
    182,
    224,
    164,
    185,
    224,
    164,
    191,
    224,
    164,
    168,
    224,
    165,
    141,
    224,
    164,
    166,
    224,
    165,
    128,
    224,
    164,
    135,
    224,
    164,
    130,
    224,
    164,
    161,
    224,
    164,
    191,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    166,
    224,
    164,
    191,
    224,
    164,
    178,
    224,
    165,
    141,
    224,
    164,
    178,
    224,
    165,
    128,
    224,
    164,
    133,
    224,
    164,
    167,
    224,
    164,
    191,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    181,
    224,
    165,
    128,
    224,
    164,
    161,
    224,
    164,
    191,
    224,
    164,
    175,
    224,
    165,
    139,
    224,
    164,
    154,
    224,
    164,
    191,
    224,
    164,
    159,
    224,
    165,
    141,
    224,
    164,
    160,
    224,
    165,
    135,
    224,
    164,
    184,
    224,
    164,
    174,
    224,
    164,
    190,
    224,
    164,
    154,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    156,
    224,
    164,
    130,
    224,
    164,
    149,
    224,
    165,
    141,
    224,
    164,
    182,
    224,
    164,
    168,
    224,
    164,
    166,
    224,
    165,
    129,
    224,
    164,
    168,
    224,
    164,
    191,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    170,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    175,
    224,
    165,
    139,
    224,
    164,
    151,
    224,
    164,
    133,
    224,
    164,
    168,
    224,
    165,
    129,
    224,
    164,
    184,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    145,
    224,
    164,
    168,
    224,
    164,
    178,
    224,
    164,
    190,
    224,
    164,
    135,
    224,
    164,
    168,
    224,
    164,
    170,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    165,
    141,
    224,
    164,
    159,
    224,
    165,
    128,
    224,
    164,
    182,
    224,
    164,
    176,
    224,
    165,
    141,
    224,
    164,
    164,
    224,
    165,
    139,
    224,
    164,
    130,
    224,
    164,
    178,
    224,
    165,
    139,
    224,
    164,
    149,
    224,
    164,
    184,
    224,
    164,
    173,
    224,
    164,
    190,
    224,
    164,
    171,
    224,
    164,
    188,
    224,
    165,
    141,
    224,
    164,
    178,
    224,
    165,
    136,
    224,
    164,
    182,
    224,
    164,
    182,
    224,
    164,
    176,
    224,
    165,
    141,
    224,
    164,
    164,
    224,
    165,
    135,
    224,
    164,
    130,
    224,
    164,
    170,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    166,
    224,
    165,
    135,
    224,
    164,
    182,
    224,
    164,
    170,
    224,
    165,
    141,
    224,
    164,
    178,
    224,
    165,
    135,
    224,
    164,
    175,
    224,
    164,
    176,
    224,
    164,
    149,
    224,
    165,
    135,
    224,
    164,
    130,
    224,
    164,
    166,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    184,
    224,
    165,
    141,
    224,
    164,
    165,
    224,
    164,
    191,
    224,
    164,
    164,
    224,
    164,
    191,
    224,
    164,
    137,
    224,
    164,
    164,
    224,
    165,
    141,
    224,
    164,
    170,
    224,
    164,
    190,
    224,
    164,
    166,
    224,
    164,
    137,
    224,
    164,
    168,
    224,
    165,
    141,
    224,
    164,
    185,
    224,
    165,
    135,
    224,
    164,
    130,
    224,
    164,
    154,
    224,
    164,
    191,
    224,
    164,
    159,
    224,
    165,
    141,
    224,
    164,
    160,
    224,
    164,
    190,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    164,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    190,
    224,
    164,
    156,
    224,
    165,
    141,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    166,
    224,
    164,
    190,
    224,
    164,
    170,
    224,
    165,
    129,
    224,
    164,
    176,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    156,
    224,
    165,
    139,
    224,
    164,
    161,
    224,
    164,
    188,
    224,
    165,
    135,
    224,
    164,
    130,
    224,
    164,
    133,
    224,
    164,
    168,
    224,
    165,
    129,
    224,
    164,
    181,
    224,
    164,
    190,
    224,
    164,
    166,
    224,
    164,
    182,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    165,
    135,
    224,
    164,
    163,
    224,
    165,
    128,
    224,
    164,
    182,
    224,
    164,
    191,
    224,
    164,
    149,
    224,
    165,
    141,
    224,
    164,
    183,
    224,
    164,
    190,
    224,
    164,
    184,
    224,
    164,
    176,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    165,
    128,
    224,
    164,
    184,
    224,
    164,
    130,
    224,
    164,
    151,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    185,
    224,
    164,
    170,
    224,
    164,
    176,
    224,
    164,
    191,
    224,
    164,
    163,
    224,
    164,
    190,
    224,
    164,
    174,
    224,
    164,
    172,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    190,
    224,
    164,
    130,
    224,
    164,
    161,
    224,
    164,
    172,
    224,
    164,
    154,
    224,
    165,
    141,
    224,
    164,
    154,
    224,
    165,
    139,
    224,
    164,
    130,
    224,
    164,
    137,
    224,
    164,
    170,
    224,
    164,
    178,
    224,
    164,
    172,
    224,
    165,
    141,
    224,
    164,
    167,
    224,
    164,
    174,
    224,
    164,
    130,
    224,
    164,
    164,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    165,
    128,
    224,
    164,
    184,
    224,
    164,
    130,
    224,
    164,
    170,
    224,
    164,
    176,
    224,
    165,
    141,
    224,
    164,
    149,
    224,
    164,
    137,
    224,
    164,
    174,
    224,
    165,
    141,
    224,
    164,
    174,
    224,
    165,
    128,
    224,
    164,
    166,
    224,
    164,
    174,
    224,
    164,
    190,
    224,
    164,
    167,
    224,
    165,
    141,
    224,
    164,
    175,
    224,
    164,
    174,
    224,
    164,
    184,
    224,
    164,
    185,
    224,
    164,
    190,
    224,
    164,
    175,
    224,
    164,
    164,
    224,
    164,
    190,
    224,
    164,
    182,
    224,
    164,
    172,
    224,
    165,
    141,
    224,
    164,
    166,
    224,
    165,
    139,
    224,
    164,
    130,
    224,
    164,
    174,
    224,
    165,
    128,
    224,
    164,
    161,
    224,
    164,
    191,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    134,
    224,
    164,
    136,
    224,
    164,
    170,
    224,
    165,
    128,
    224,
    164,
    143,
    224,
    164,
    178,
    224,
    164,
    174,
    224,
    165,
    139,
    224,
    164,
    172,
    224,
    164,
    190,
    224,
    164,
    135,
    224,
    164,
    178,
    224,
    164,
    184,
    224,
    164,
    130,
    224,
    164,
    150,
    224,
    165,
    141,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    134,
    224,
    164,
    170,
    224,
    164,
    176,
    224,
    165,
    135,
    224,
    164,
    182,
    224,
    164,
    168,
    224,
    164,
    133,
    224,
    164,
    168,
    224,
    165,
    129,
    224,
    164,
    172,
    224,
    164,
    130,
    224,
    164,
    167,
    224,
    164,
    172,
    224,
    164,
    190,
    224,
    164,
    156,
    224,
    164,
    188,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    168,
    224,
    164,
    181,
    224,
    165,
    128,
    224,
    164,
    168,
    224,
    164,
    164,
    224,
    164,
    174,
    224,
    164,
    170,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    174,
    224,
    165,
    129,
    224,
    164,
    150,
    224,
    164,
    170,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    182,
    224,
    165,
    141,
    224,
    164,
    168,
    224,
    164,
    170,
    224,
    164,
    176,
    224,
    164,
    191,
    224,
    164,
    181,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    168,
    224,
    165,
    129,
    224,
    164,
    149,
    224,
    164,
    184,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    164,
    184,
    224,
    164,
    174,
    224,
    164,
    176,
    224,
    165,
    141,
    224,
    164,
    165,
    224,
    164,
    168,
    224,
    164,
    134,
    224,
    164,
    175,
    224,
    165,
    139,
    224,
    164,
    156,
    224,
    164,
    191,
    224,
    164,
    164,
    224,
    164,
    184,
    224,
    165,
    139,
    224,
    164,
    174,
    224,
    164,
    181,
    224,
    164,
    190,
    224,
    164,
    176,
    216,
    167,
    217,
    132,
    217,
    133,
    216,
    180,
    216,
    167,
    216,
    177,
    217,
    131,
    216,
    167,
    216,
    170,
    216,
    167,
    217,
    132,
    217,
    133,
    217,
    134,
    216,
    170,
    216,
    175,
    217,
    138,
    216,
    167,
    216,
    170,
    216,
    167,
    217,
    132,
    217,
    131,
    217,
    133,
    216,
    168,
    217,
    138,
    217,
    136,
    216,
    170,
    216,
    177,
    216,
    167,
    217,
    132,
    217,
    133,
    216,
    180,
    216,
    167,
    217,
    135,
    216,
    175,
    216,
    167,
    216,
    170,
    216,
    185,
    216,
    175,
    216,
    175,
    216,
    167,
    217,
    132,
    216,
    178,
    217,
    136,
    216,
    167,
    216,
    177,
    216,
    185,
    216,
    175,
    216,
    175,
    216,
    167,
    217,
    132,
    216,
    177,
    216,
    175,
    217,
    136,
    216,
    175,
    216,
    167,
    217,
    132,
    216,
    165,
    216,
    179,
    217,
    132,
    216,
    167,
    217,
    133,
    217,
    138,
    216,
    169,
    216,
    167,
    217,
    132,
    217,
    129,
    217,
    136,
    216,
    170,
    217,
    136,
    216,
    180,
    217,
    136,
    216,
    168,
    216,
    167,
    217,
    132,
    217,
    133,
    216,
    179,
    216,
    167,
    216,
    168,
    217,
    130,
    216,
    167,
    216,
    170,
    216,
    167,
    217,
    132,
    217,
    133,
    216,
    185,
    217,
    132,
    217,
    136,
    217,
    133,
    216,
    167,
    216,
    170,
    216,
    167,
    217,
    132,
    217,
    133,
    216,
    179,
    217,
    132,
    216,
    179,
    217,
    132,
    216,
    167,
    216,
    170,
    216,
    167,
    217,
    132,
    216,
    172,
    216,
    177,
    216,
    167,
    217,
    129,
    217,
    138,
    217,
    131,
    216,
    179,
    216,
    167,
    217,
    132,
    216,
    167,
    216,
    179,
    217,
    132,
    216,
    167,
    217,
    133,
    217,
    138,
    216,
    169,
    216,
    167,
    217,
    132,
    216,
    167,
    216,
    170,
    216,
    181,
    216,
    167,
    217,
    132,
    216,
    167,
    216,
    170,
    107,
    101,
    121,
    119,
    111,
    114,
    100,
    115,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    119,
    51,
    46,
    111,
    114,
    103,
    47,
    49,
    57,
    57,
    57,
    47,
    120,
    104,
    116,
    109,
    108,
    34,
    62,
    60,
    97,
    32,
    116,
    97,
    114,
    103,
    101,
    116,
    61,
    34,
    95,
    98,
    108,
    97,
    110,
    107,
    34,
    32,
    116,
    101,
    120,
    116,
    47,
    104,
    116,
    109,
    108,
    59,
    32,
    99,
    104,
    97,
    114,
    115,
    101,
    116,
    61,
    34,
    32,
    116,
    97,
    114,
    103,
    101,
    116,
    61,
    34,
    95,
    98,
    108,
    97,
    110,
    107,
    34,
    62,
    60,
    116,
    97,
    98,
    108,
    101,
    32,
    99,
    101,
    108,
    108,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    61,
    34,
    97,
    117,
    116,
    111,
    99,
    111,
    109,
    112,
    108,
    101,
    116,
    101,
    61,
    34,
    111,
    102,
    102,
    34,
    32,
    116,
    101,
    120,
    116,
    45,
    97,
    108,
    105,
    103,
    110,
    58,
    32,
    99,
    101,
    110,
    116,
    101,
    114,
    59,
    116,
    111,
    32,
    108,
    97,
    115,
    116,
    32,
    118,
    101,
    114,
    115,
    105,
    111,
    110,
    32,
    98,
    121,
    32,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    45,
    99,
    111,
    108,
    111,
    114,
    58,
    32,
    35,
    34,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    47,
    100,
    105,
    118,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    100,
    105,
    118,
    32,
    105,
    100,
    61,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    35,
    34,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    34,
    62,
    60,
    105,
    109,
    103,
    32,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    99,
    114,
    105,
    112,
    116,
    34,
    32,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    10,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    61,
    34,
    47,
    47,
    69,
    78,
    34,
    32,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    119,
    101,
    110,
    99,
    111,
    100,
    101,
    85,
    82,
    73,
    67,
    111,
    109,
    112,
    111,
    110,
    101,
    110,
    116,
    40,
    34,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    112,
    116,
    58,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    119,
    114,
    105,
    116,
    101,
    40,
    39,
    60,
    115,
    99,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    58,
    32,
    97,
    98,
    115,
    111,
    108,
    117,
    116,
    101,
    59,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    109,
    97,
    114,
    103,
    105,
    110,
    45,
    116,
    111,
    112,
    58,
    46,
    109,
    105,
    110,
    46,
    106,
    115,
    34,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    119,
    51,
    46,
    111,
    114,
    103,
    47,
    49,
    57,
    57,
    57,
    47,
    120,
    104,
    116,
    109,
    108,
    34,
    32,
    10,
    13,
    10,
    60,
    47,
    98,
    111,
    100,
    121,
    62,
    13,
    10,
    60,
    47,
    104,
    116,
    109,
    108,
    62,
    100,
    105,
    115,
    116,
    105,
    110,
    99,
    116,
    105,
    111,
    110,
    32,
    98,
    101,
    116,
    119,
    101,
    101,
    110,
    47,
    34,
    32,
    116,
    97,
    114,
    103,
    101,
    116,
    61,
    34,
    95,
    98,
    108,
    97,
    110,
    107,
    34,
    62,
    60,
    108,
    105,
    110,
    107,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    101,
    110,
    99,
    111,
    100,
    105,
    110,
    103,
    61,
    34,
    117,
    116,
    102,
    45,
    56,
    34,
    63,
    62,
    10,
    119,
    46,
    97,
    100,
    100,
    69,
    118,
    101,
    110,
    116,
    76,
    105,
    115,
    116,
    101,
    110,
    101,
    114,
    63,
    97,
    99,
    116,
    105,
    111,
    110,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    105,
    99,
    111,
    110,
    34,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    58,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    99,
    115,
    115,
    34,
    32,
    47,
    62,
    10,
    109,
    101,
    116,
    97,
    32,
    112,
    114,
    111,
    112,
    101,
    114,
    116,
    121,
    61,
    34,
    111,
    103,
    58,
    116,
    60,
    105,
    110,
    112,
    117,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    34,
    32,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    45,
    97,
    108,
    105,
    103,
    110,
    58,
    116,
    104,
    101,
    32,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    109,
    101,
    110,
    116,
    32,
    111,
    102,
    32,
    116,
    121,
    108,
    101,
    115,
    104,
    101,
    101,
    116,
    34,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    104,
    116,
    109,
    108,
    59,
    32,
    99,
    104,
    97,
    114,
    115,
    101,
    116,
    61,
    117,
    116,
    102,
    45,
    56,
    105,
    115,
    32,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    101,
    100,
    32,
    116,
    111,
    32,
    98,
    101,
    116,
    97,
    98,
    108,
    101,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    49,
    48,
    48,
    37,
    34,
    32,
    73,
    110,
    32,
    97,
    100,
    100,
    105,
    116,
    105,
    111,
    110,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    32,
    99,
    111,
    110,
    116,
    114,
    105,
    98,
    117,
    116,
    101,
    100,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    32,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    99,
    101,
    115,
    32,
    98,
    101,
    116,
    119,
    101,
    101,
    110,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    109,
    101,
    110,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    73,
    116,
    32,
    105,
    115,
    32,
    105,
    109,
    112,
    111,
    114,
    116,
    97,
    110,
    116,
    32,
    116,
    111,
    32,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    10,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    102,
    111,
    110,
    116,
    45,
    115,
    105,
    122,
    101,
    58,
    49,
    62,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    115,
    112,
    97,
    110,
    32,
    105,
    100,
    61,
    103,
    98,
    76,
    105,
    98,
    114,
    97,
    114,
    121,
    32,
    111,
    102,
    32,
    67,
    111,
    110,
    103,
    114,
    101,
    115,
    115,
    60,
    105,
    109,
    103,
    32,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    105,
    109,
    69,
    110,
    103,
    108,
    105,
    115,
    104,
    32,
    116,
    114,
    97,
    110,
    115,
    108,
    97,
    116,
    105,
    111,
    110,
    65,
    99,
    97,
    100,
    101,
    109,
    121,
    32,
    111,
    102,
    32,
    83,
    99,
    105,
    101,
    110,
    99,
    101,
    115,
    100,
    105,
    118,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    58,
    99,
    111,
    110,
    115,
    116,
    114,
    117,
    99,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    46,
    103,
    101,
    116,
    69,
    108,
    101,
    109,
    101,
    110,
    116,
    66,
    121,
    73,
    100,
    40,
    105,
    100,
    41,
    105,
    110,
    32,
    99,
    111,
    110,
    106,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    32,
    119,
    105,
    116,
    104,
    69,
    108,
    101,
    109,
    101,
    110,
    116,
    40,
    39,
    115,
    99,
    114,
    105,
    112,
    116,
    39,
    41,
    59,
    32,
    60,
    109,
    101,
    116,
    97,
    32,
    112,
    114,
    111,
    112,
    101,
    114,
    116,
    121,
    61,
    34,
    111,
    103,
    58,
    208,
    145,
    209,
    138,
    208,
    187,
    208,
    179,
    208,
    176,
    209,
    128,
    209,
    129,
    208,
    186,
    208,
    184,
    10,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    34,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    62,
    80,
    114,
    105,
    118,
    97,
    99,
    121,
    32,
    80,
    111,
    108,
    105,
    99,
    121,
    60,
    47,
    97,
    62,
    97,
    100,
    109,
    105,
    110,
    105,
    115,
    116,
    101,
    114,
    101,
    100,
    32,
    98,
    121,
    32,
    116,
    104,
    101,
    101,
    110,
    97,
    98,
    108,
    101,
    83,
    105,
    110,
    103,
    108,
    101,
    82,
    101,
    113,
    117,
    101,
    115,
    116,
    115,
    116,
    121,
    108,
    101,
    61,
    38,
    113,
    117,
    111,
    116,
    59,
    109,
    97,
    114,
    103,
    105,
    110,
    58,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    62,
    60,
    105,
    109,
    103,
    32,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    105,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    38,
    113,
    117,
    111,
    116,
    59,
    102,
    108,
    111,
    97,
    116,
    58,
    114,
    101,
    102,
    101,
    114,
    114,
    101,
    100,
    32,
    116,
    111,
    32,
    97,
    115,
    32,
    116,
    104,
    101,
    32,
    116,
    111,
    116,
    97,
    108,
    32,
    112,
    111,
    112,
    117,
    108,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    105,
    110,
    32,
    87,
    97,
    115,
    104,
    105,
    110,
    103,
    116,
    111,
    110,
    44,
    32,
    68,
    46,
    67,
    46,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    45,
    97,
    109,
    111,
    110,
    103,
    32,
    111,
    116,
    104,
    101,
    114,
    32,
    116,
    104,
    105,
    110,
    103,
    115,
    44,
    111,
    114,
    103,
    97,
    110,
    105,
    122,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    112,
    97,
    114,
    116,
    105,
    99,
    105,
    112,
    97,
    116,
    101,
    100,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    105,
    110,
    116,
    114,
    111,
    100,
    117,
    99,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    105,
    100,
    101,
    110,
    116,
    105,
    102,
    105,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    32,
    116,
    104,
    101,
    102,
    105,
    99,
    116,
    105,
    111,
    110,
    97,
    108,
    32,
    99,
    104,
    97,
    114,
    97,
    99,
    116,
    101,
    114,
    32,
    79,
    120,
    102,
    111,
    114,
    100,
    32,
    85,
    110,
    105,
    118,
    101,
    114,
    115,
    105,
    116,
    121,
    32,
    109,
    105,
    115,
    117,
    110,
    100,
    101,
    114,
    115,
    116,
    97,
    110,
    100,
    105,
    110,
    103,
    32,
    111,
    102,
    84,
    104,
    101,
    114,
    101,
    32,
    97,
    114,
    101,
    44,
    32,
    104,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    115,
    116,
    121,
    108,
    101,
    115,
    104,
    101,
    101,
    116,
    34,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    47,
    67,
    111,
    108,
    117,
    109,
    98,
    105,
    97,
    32,
    85,
    110,
    105,
    118,
    101,
    114,
    115,
    105,
    116,
    121,
    101,
    120,
    112,
    97,
    110,
    100,
    101,
    100,
    32,
    116,
    111,
    32,
    105,
    110,
    99,
    108,
    117,
    100,
    101,
    117,
    115,
    117,
    97,
    108,
    108,
    121,
    32,
    114,
    101,
    102,
    101,
    114,
    114,
    101,
    100,
    32,
    116,
    111,
    105,
    110,
    100,
    105,
    99,
    97,
    116,
    105,
    110,
    103,
    32,
    116,
    104,
    97,
    116,
    32,
    116,
    104,
    101,
    104,
    97,
    118,
    101,
    32,
    115,
    117,
    103,
    103,
    101,
    115,
    116,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    97,
    102,
    102,
    105,
    108,
    105,
    97,
    116,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    32,
    116,
    104,
    101,
    99,
    111,
    114,
    114,
    101,
    108,
    97,
    116,
    105,
    111,
    110,
    32,
    98,
    101,
    116,
    119,
    101,
    101,
    110,
    110,
    117,
    109,
    98,
    101,
    114,
    32,
    111,
    102,
    32,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    62,
    60,
    47,
    116,
    100,
    62,
    60,
    47,
    116,
    114,
    62,
    60,
    47,
    116,
    97,
    98,
    108,
    101,
    62,
    82,
    101,
    112,
    117,
    98,
    108,
    105,
    99,
    32,
    111,
    102,
    32,
    73,
    114,
    101,
    108,
    97,
    110,
    100,
    10,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    117,
    110,
    100,
    101,
    114,
    32,
    116,
    104,
    101,
    32,
    105,
    110,
    102,
    108,
    117,
    101,
    110,
    99,
    101,
    99,
    111,
    110,
    116,
    114,
    105,
    98,
    117,
    116,
    105,
    111,
    110,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    79,
    102,
    102,
    105,
    99,
    105,
    97,
    108,
    32,
    119,
    101,
    98,
    115,
    105,
    116,
    101,
    32,
    111,
    102,
    104,
    101,
    97,
    100,
    113,
    117,
    97,
    114,
    116,
    101,
    114,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    99,
    101,
    110,
    116,
    101,
    114,
    101,
    100,
    32,
    97,
    114,
    111,
    117,
    110,
    100,
    32,
    116,
    104,
    101,
    105,
    109,
    112,
    108,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    104,
    97,
    118,
    101,
    32,
    98,
    101,
    101,
    110,
    32,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    101,
    100,
    70,
    101,
    100,
    101,
    114,
    97,
    108,
    32,
    82,
    101,
    112,
    117,
    98,
    108,
    105,
    99,
    32,
    111,
    102,
    98,
    101,
    99,
    97,
    109,
    101,
    32,
    105,
    110,
    99,
    114,
    101,
    97,
    115,
    105,
    110,
    103,
    108,
    121,
    99,
    111,
    110,
    116,
    105,
    110,
    117,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    78,
    111,
    116,
    101,
    44,
    32,
    104,
    111,
    119,
    101,
    118,
    101,
    114,
    44,
    32,
    116,
    104,
    97,
    116,
    115,
    105,
    109,
    105,
    108,
    97,
    114,
    32,
    116,
    111,
    32,
    116,
    104,
    97,
    116,
    32,
    111,
    102,
    32,
    99,
    97,
    112,
    97,
    98,
    105,
    108,
    105,
    116,
    105,
    101,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    97,
    99,
    99,
    111,
    114,
    100,
    97,
    110,
    99,
    101,
    32,
    119,
    105,
    116,
    104,
    32,
    116,
    104,
    101,
    112,
    97,
    114,
    116,
    105,
    99,
    105,
    112,
    97,
    110,
    116,
    115,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    102,
    117,
    114,
    116,
    104,
    101,
    114,
    32,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    109,
    101,
    110,
    116,
    117,
    110,
    100,
    101,
    114,
    32,
    116,
    104,
    101,
    32,
    100,
    105,
    114,
    101,
    99,
    116,
    105,
    111,
    110,
    105,
    115,
    32,
    111,
    102,
    116,
    101,
    110,
    32,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    101,
    100,
    104,
    105,
    115,
    32,
    121,
    111,
    117,
    110,
    103,
    101,
    114,
    32,
    98,
    114,
    111,
    116,
    104,
    101,
    114,
    60,
    47,
    116,
    100,
    62,
    60,
    47,
    116,
    114,
    62,
    60,
    47,
    116,
    97,
    98,
    108,
    101,
    62,
    60,
    97,
    32,
    104,
    116,
    116,
    112,
    45,
    101,
    113,
    117,
    105,
    118,
    61,
    34,
    88,
    45,
    85,
    65,
    45,
    112,
    104,
    121,
    115,
    105,
    99,
    97,
    108,
    32,
    112,
    114,
    111,
    112,
    101,
    114,
    116,
    105,
    101,
    115,
    111,
    102,
    32,
    66,
    114,
    105,
    116,
    105,
    115,
    104,
    32,
    67,
    111,
    108,
    117,
    109,
    98,
    105,
    97,
    104,
    97,
    115,
    32,
    98,
    101,
    101,
    110,
    32,
    99,
    114,
    105,
    116,
    105,
    99,
    105,
    122,
    101,
    100,
    40,
    119,
    105,
    116,
    104,
    32,
    116,
    104,
    101,
    32,
    101,
    120,
    99,
    101,
    112,
    116,
    105,
    111,
    110,
    113,
    117,
    101,
    115,
    116,
    105,
    111,
    110,
    115,
    32,
    97,
    98,
    111,
    117,
    116,
    32,
    116,
    104,
    101,
    112,
    97,
    115,
    115,
    105,
    110,
    103,
    32,
    116,
    104,
    114,
    111,
    117,
    103,
    104,
    32,
    116,
    104,
    101,
    48,
    34,
    32,
    99,
    101,
    108,
    108,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    61,
    34,
    48,
    34,
    32,
    116,
    104,
    111,
    117,
    115,
    97,
    110,
    100,
    115,
    32,
    111,
    102,
    32,
    112,
    101,
    111,
    112,
    108,
    101,
    114,
    101,
    100,
    105,
    114,
    101,
    99,
    116,
    115,
    32,
    104,
    101,
    114,
    101,
    46,
    32,
    70,
    111,
    114,
    104,
    97,
    118,
    101,
    32,
    99,
    104,
    105,
    108,
    100,
    114,
    101,
    110,
    32,
    117,
    110,
    100,
    101,
    114,
    37,
    51,
    69,
    37,
    51,
    67,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    37,
    51,
    69,
    34,
    41,
    41,
    59,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    60,
    108,
    105,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    115,
    105,
    116,
    101,
    95,
    110,
    97,
    109,
    101,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    116,
    101,
    120,
    116,
    45,
    100,
    101,
    99,
    111,
    114,
    97,
    116,
    105,
    111,
    110,
    58,
    110,
    111,
    110,
    101,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    58,
    32,
    110,
    111,
    110,
    101,
    60,
    109,
    101,
    116,
    97,
    32,
    104,
    116,
    116,
    112,
    45,
    101,
    113,
    117,
    105,
    118,
    61,
    34,
    88,
    45,
    110,
    101,
    119,
    32,
    68,
    97,
    116,
    101,
    40,
    41,
    46,
    103,
    101,
    116,
    84,
    105,
    109,
    101,
    40,
    41,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    105,
    109,
    97,
    103,
    101,
    47,
    120,
    45,
    105,
    99,
    111,
    110,
    34,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    61,
    34,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    112,
    116,
    119,
    105,
    110,
    100,
    111,
    119,
    46,
    108,
    111,
    99,
    97,
    116,
    105,
    111,
    110,
    46,
    104,
    114,
    101,
    102,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    112,
    116,
    58,
    45,
    45,
    62,
    13,
    10,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    39,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    104,
    111,
    114,
    116,
    99,
    117,
    116,
    32,
    105,
    99,
    111,
    110,
    34,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    60,
    47,
    100,
    105,
    118,
    62,
    13,
    10,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    34,
    32,
    114,
    101,
    108,
    61,
    34,
    115,
    116,
    121,
    108,
    101,
    115,
    104,
    101,
    101,
    116,
    34,
    32,
    116,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    47,
    97,
    62,
    32,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    32,
    97,
    108,
    108,
    111,
    119,
    84,
    114,
    97,
    110,
    115,
    112,
    97,
    114,
    101,
    110,
    99,
    121,
    61,
    34,
    88,
    45,
    85,
    65,
    45,
    67,
    111,
    109,
    112,
    97,
    116,
    105,
    98,
    108,
    101,
    34,
    32,
    99,
    111,
    110,
    114,
    101,
    108,
    97,
    116,
    105,
    111,
    110,
    115,
    104,
    105,
    112,
    32,
    98,
    101,
    116,
    119,
    101,
    101,
    110,
    10,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    13,
    10,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    60,
    47,
    97,
    62,
    60,
    47,
    108,
    105,
    62,
    60,
    47,
    117,
    108,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    97,
    115,
    115,
    111,
    99,
    105,
    97,
    116,
    101,
    100,
    32,
    119,
    105,
    116,
    104,
    32,
    116,
    104,
    101,
    32,
    112,
    114,
    111,
    103,
    114,
    97,
    109,
    109,
    105,
    110,
    103,
    32,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    60,
    47,
    97,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    60,
    47,
    97,
    62,
    60,
    47,
    108,
    105,
    62,
    60,
    108,
    105,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    102,
    111,
    114,
    109,
    32,
    97,
    99,
    116,
    105,
    111,
    110,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    60,
    100,
    105,
    118,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    58,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    34,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    113,
    34,
    60,
    116,
    97,
    98,
    108,
    101,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    49,
    48,
    48,
    37,
    34,
    32,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    45,
    112,
    111,
    115,
    105,
    116,
    105,
    111,
    110,
    58,
    34,
    32,
    98,
    111,
    114,
    100,
    101,
    114,
    61,
    34,
    48,
    34,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    114,
    101,
    108,
    61,
    34,
    115,
    104,
    111,
    114,
    116,
    99,
    117,
    116,
    32,
    105,
    99,
    111,
    110,
    34,
    32,
    104,
    54,
    62,
    60,
    117,
    108,
    62,
    60,
    108,
    105,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    32,
    32,
    60,
    109,
    101,
    116,
    97,
    32,
    104,
    116,
    116,
    112,
    45,
    101,
    113,
    117,
    105,
    118,
    61,
    34,
    99,
    115,
    115,
    34,
    32,
    109,
    101,
    100,
    105,
    97,
    61,
    34,
    115,
    99,
    114,
    101,
    101,
    110,
    34,
    32,
    114,
    101,
    115,
    112,
    111,
    110,
    115,
    105,
    98,
    108,
    101,
    32,
    102,
    111,
    114,
    32,
    116,
    104,
    101,
    32,
    34,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    97,
    112,
    112,
    108,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    47,
    34,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    45,
    104,
    116,
    109,
    108,
    59,
    32,
    99,
    104,
    97,
    114,
    115,
    101,
    116,
    61,
    117,
    116,
    102,
    45,
    56,
    34,
    32,
    97,
    108,
    108,
    111,
    119,
    116,
    114,
    97,
    110,
    115,
    112,
    97,
    114,
    101,
    110,
    99,
    121,
    61,
    34,
    115,
    116,
    121,
    108,
    101,
    115,
    104,
    101,
    101,
    116,
    34,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    13,
    10,
    60,
    109,
    101,
    116,
    97,
    32,
    104,
    116,
    116,
    112,
    45,
    101,
    113,
    117,
    105,
    118,
    61,
    34,
    62,
    60,
    47,
    115,
    112,
    97,
    110,
    62,
    60,
    115,
    112,
    97,
    110,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    48,
    34,
    32,
    99,
    101,
    108,
    108,
    115,
    112,
    97,
    99,
    105,
    110,
    103,
    61,
    34,
    48,
    34,
    62,
    59,
    10,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    115,
    111,
    109,
    101,
    116,
    105,
    109,
    101,
    115,
    32,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    116,
    104,
    101,
    100,
    111,
    101,
    115,
    32,
    110,
    111,
    116,
    32,
    110,
    101,
    99,
    101,
    115,
    115,
    97,
    114,
    105,
    108,
    121,
    70,
    111,
    114,
    32,
    109,
    111,
    114,
    101,
    32,
    105,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    97,
    116,
    32,
    116,
    104,
    101,
    32,
    98,
    101,
    103,
    105,
    110,
    110,
    105,
    110,
    103,
    32,
    111,
    102,
    32,
    60,
    33,
    68,
    79,
    67,
    84,
    89,
    80,
    69,
    32,
    104,
    116,
    109,
    108,
    62,
    60,
    104,
    116,
    109,
    108,
    112,
    97,
    114,
    116,
    105,
    99,
    117,
    108,
    97,
    114,
    108,
    121,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    104,
    105,
    100,
    100,
    101,
    110,
    34,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    112,
    116,
    58,
    118,
    111,
    105,
    100,
    40,
    48,
    41,
    59,
    34,
    101,
    102,
    102,
    101,
    99,
    116,
    105,
    118,
    101,
    110,
    101,
    115,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    97,
    117,
    116,
    111,
    99,
    111,
    109,
    112,
    108,
    101,
    116,
    101,
    61,
    34,
    111,
    102,
    102,
    34,
    32,
    103,
    101,
    110,
    101,
    114,
    97,
    108,
    108,
    121,
    32,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    101,
    100,
    62,
    60,
    105,
    110,
    112,
    117,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    34,
    32,
    34,
    62,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    13,
    10,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    116,
    104,
    114,
    111,
    117,
    103,
    104,
    111,
    117,
    116,
    32,
    116,
    104,
    101,
    32,
    119,
    111,
    114,
    108,
    100,
    99,
    111,
    109,
    109,
    111,
    110,
    32,
    109,
    105,
    115,
    99,
    111,
    110,
    99,
    101,
    112,
    116,
    105,
    111,
    110,
    97,
    115,
    115,
    111,
    99,
    105,
    97,
    116,
    105,
    111,
    110,
    32,
    119,
    105,
    116,
    104,
    32,
    116,
    104,
    101,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    60,
    100,
    105,
    118,
    32,
    99,
    100,
    117,
    114,
    105,
    110,
    103,
    32,
    104,
    105,
    115,
    32,
    108,
    105,
    102,
    101,
    116,
    105,
    109,
    101,
    44,
    99,
    111,
    114,
    114,
    101,
    115,
    112,
    111,
    110,
    100,
    105,
    110,
    103,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    116,
    121,
    112,
    101,
    61,
    34,
    105,
    109,
    97,
    103,
    101,
    47,
    120,
    45,
    105,
    99,
    111,
    110,
    34,
    32,
    97,
    110,
    32,
    105,
    110,
    99,
    114,
    101,
    97,
    115,
    105,
    110,
    103,
    32,
    110,
    117,
    109,
    98,
    101,
    114,
    100,
    105,
    112,
    108,
    111,
    109,
    97,
    116,
    105,
    99,
    32,
    114,
    101,
    108,
    97,
    116,
    105,
    111,
    110,
    115,
    97,
    114,
    101,
    32,
    111,
    102,
    116,
    101,
    110,
    32,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    101,
    100,
    109,
    101,
    116,
    97,
    32,
    99,
    104,
    97,
    114,
    115,
    101,
    116,
    61,
    34,
    117,
    116,
    102,
    45,
    56,
    34,
    32,
    60,
    105,
    110,
    112,
    117,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    34,
    32,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    115,
    32,
    105,
    110,
    99,
    108,
    117,
    100,
    101,
    32,
    116,
    104,
    101,
    34,
    62,
    60,
    105,
    109,
    103,
    32,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    105,
    112,
    97,
    114,
    116,
    105,
    99,
    105,
    112,
    97,
    116,
    105,
    111,
    110,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    116,
    104,
    101,
    32,
    101,
    115,
    116,
    97,
    98,
    108,
    105,
    115,
    104,
    109,
    101,
    110,
    116,
    32,
    111,
    102,
    10,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    38,
    97,
    109,
    112,
    59,
    110,
    98,
    115,
    112,
    59,
    38,
    97,
    109,
    112,
    59,
    110,
    98,
    115,
    112,
    59,
    116,
    111,
    32,
    100,
    101,
    116,
    101,
    114,
    109,
    105,
    110,
    101,
    32,
    119,
    104,
    101,
    116,
    104,
    101,
    114,
    113,
    117,
    105,
    116,
    101,
    32,
    100,
    105,
    102,
    102,
    101,
    114,
    101,
    110,
    116,
    32,
    102,
    114,
    111,
    109,
    109,
    97,
    114,
    107,
    101,
    100,
    32,
    116,
    104,
    101,
    32,
    98,
    101,
    103,
    105,
    110,
    110,
    105,
    110,
    103,
    100,
    105,
    115,
    116,
    97,
    110,
    99,
    101,
    32,
    98,
    101,
    116,
    119,
    101,
    101,
    110,
    32,
    116,
    104,
    101,
    99,
    111,
    110,
    116,
    114,
    105,
    98,
    117,
    116,
    105,
    111,
    110,
    115,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    99,
    111,
    110,
    102,
    108,
    105,
    99,
    116,
    32,
    98,
    101,
    116,
    119,
    101,
    101,
    110,
    32,
    116,
    104,
    101,
    119,
    105,
    100,
    101,
    108,
    121,
    32,
    99,
    111,
    110,
    115,
    105,
    100,
    101,
    114,
    101,
    100,
    32,
    116,
    111,
    119,
    97,
    115,
    32,
    111,
    110,
    101,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    102,
    105,
    114,
    115,
    116,
    119,
    105,
    116,
    104,
    32,
    118,
    97,
    114,
    121,
    105,
    110,
    103,
    32,
    100,
    101,
    103,
    114,
    101,
    101,
    115,
    104,
    97,
    118,
    101,
    32,
    115,
    112,
    101,
    99,
    117,
    108,
    97,
    116,
    101,
    100,
    32,
    116,
    104,
    97,
    116,
    40,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    103,
    101,
    116,
    69,
    108,
    101,
    109,
    101,
    110,
    116,
    112,
    97,
    114,
    116,
    105,
    99,
    105,
    112,
    97,
    116,
    105,
    110,
    103,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    111,
    114,
    105,
    103,
    105,
    110,
    97,
    108,
    108,
    121,
    32,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    101,
    100,
    101,
    116,
    97,
    32,
    99,
    104,
    97,
    114,
    115,
    101,
    116,
    61,
    34,
    117,
    116,
    102,
    45,
    56,
    34,
    62,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    99,
    115,
    115,
    34,
    32,
    47,
    62,
    10,
    105,
    110,
    116,
    101,
    114,
    99,
    104,
    97,
    110,
    103,
    101,
    97,
    98,
    108,
    121,
    32,
    119,
    105,
    116,
    104,
    109,
    111,
    114,
    101,
    32,
    99,
    108,
    111,
    115,
    101,
    108,
    121,
    32,
    114,
    101,
    108,
    97,
    116,
    101,
    100,
    115,
    111,
    99,
    105,
    97,
    108,
    32,
    97,
    110,
    100,
    32,
    112,
    111,
    108,
    105,
    116,
    105,
    99,
    97,
    108,
    116,
    104,
    97,
    116,
    32,
    119,
    111,
    117,
    108,
    100,
    32,
    111,
    116,
    104,
    101,
    114,
    119,
    105,
    115,
    101,
    112,
    101,
    114,
    112,
    101,
    110,
    100,
    105,
    99,
    117,
    108,
    97,
    114,
    32,
    116,
    111,
    32,
    116,
    104,
    101,
    115,
    116,
    121,
    108,
    101,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    99,
    115,
    115,
    116,
    121,
    112,
    101,
    61,
    34,
    115,
    117,
    98,
    109,
    105,
    116,
    34,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    102,
    97,
    109,
    105,
    108,
    105,
    101,
    115,
    32,
    114,
    101,
    115,
    105,
    100,
    105,
    110,
    103,
    32,
    105,
    110,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    105,
    110,
    103,
    32,
    99,
    111,
    117,
    110,
    116,
    114,
    105,
    101,
    115,
    99,
    111,
    109,
    112,
    117,
    116,
    101,
    114,
    32,
    112,
    114,
    111,
    103,
    114,
    97,
    109,
    109,
    105,
    110,
    103,
    101,
    99,
    111,
    110,
    111,
    109,
    105,
    99,
    32,
    100,
    101,
    118,
    101,
    108,
    111,
    112,
    109,
    101,
    110,
    116,
    100,
    101,
    116,
    101,
    114,
    109,
    105,
    110,
    97,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    102,
    111,
    114,
    32,
    109,
    111,
    114,
    101,
    32,
    105,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    111,
    110,
    32,
    115,
    101,
    118,
    101,
    114,
    97,
    108,
    32,
    111,
    99,
    99,
    97,
    115,
    105,
    111,
    110,
    115,
    112,
    111,
    114,
    116,
    117,
    103,
    117,
    195,
    170,
    115,
    32,
    40,
    69,
    117,
    114,
    111,
    112,
    101,
    117,
    41,
    208,
    163,
    208,
    186,
    209,
    128,
    208,
    176,
    209,
    151,
    208,
    189,
    209,
    129,
    209,
    140,
    208,
    186,
    208,
    176,
    209,
    131,
    208,
    186,
    209,
    128,
    208,
    176,
    209,
    151,
    208,
    189,
    209,
    129,
    209,
    140,
    208,
    186,
    208,
    176,
    208,
    160,
    208,
    190,
    209,
    129,
    209,
    129,
    208,
    184,
    208,
    185,
    209,
    129,
    208,
    186,
    208,
    190,
    208,
    185,
    208,
    188,
    208,
    176,
    209,
    130,
    208,
    181,
    209,
    128,
    208,
    184,
    208,
    176,
    208,
    187,
    208,
    190,
    208,
    178,
    208,
    184,
    208,
    189,
    209,
    132,
    208,
    190,
    209,
    128,
    208,
    188,
    208,
    176,
    209,
    134,
    208,
    184,
    208,
    184,
    209,
    131,
    208,
    191,
    209,
    128,
    208,
    176,
    208,
    178,
    208,
    187,
    208,
    181,
    208,
    189,
    208,
    184,
    209,
    143,
    208,
    189,
    208,
    181,
    208,
    190,
    208,
    177,
    209,
    133,
    208,
    190,
    208,
    180,
    208,
    184,
    208,
    188,
    208,
    190,
    208,
    184,
    208,
    189,
    209,
    132,
    208,
    190,
    209,
    128,
    208,
    188,
    208,
    176,
    209,
    134,
    208,
    184,
    209,
    143,
    208,
    152,
    208,
    189,
    209,
    132,
    208,
    190,
    209,
    128,
    208,
    188,
    208,
    176,
    209,
    134,
    208,
    184,
    209,
    143,
    208,
    160,
    208,
    181,
    209,
    129,
    208,
    191,
    209,
    131,
    208,
    177,
    208,
    187,
    208,
    184,
    208,
    186,
    208,
    184,
    208,
    186,
    208,
    190,
    208,
    187,
    208,
    184,
    209,
    135,
    208,
    181,
    209,
    129,
    209,
    130,
    208,
    178,
    208,
    190,
    208,
    184,
    208,
    189,
    209,
    132,
    208,
    190,
    209,
    128,
    208,
    188,
    208,
    176,
    209,
    134,
    208,
    184,
    209,
    142,
    209,
    130,
    208,
    181,
    209,
    128,
    209,
    128,
    208,
    184,
    209,
    130,
    208,
    190,
    209,
    128,
    208,
    184,
    208,
    184,
    208,
    180,
    208,
    190,
    209,
    129,
    209,
    130,
    208,
    176,
    209,
    130,
    208,
    190,
    209,
    135,
    208,
    189,
    208,
    190,
    216,
    167,
    217,
    132,
    217,
    133,
    216,
    170,
    217,
    136,
    216,
    167,
    216,
    172,
    216,
    175,
    217,
    136,
    217,
    134,
    216,
    167,
    217,
    132,
    216,
    167,
    216,
    180,
    216,
    170,
    216,
    177,
    216,
    167,
    217,
    131,
    216,
    167,
    216,
    170,
    216,
    167,
    217,
    132,
    216,
    167,
    217,
    130,
    216,
    170,
    216,
    177,
    216,
    167,
    216,
    173,
    216,
    167,
    216,
    170,
    104,
    116,
    109,
    108,
    59,
    32,
    99,
    104,
    97,
    114,
    115,
    101,
    116,
    61,
    85,
    84,
    70,
    45,
    56,
    34,
    32,
    115,
    101,
    116,
    84,
    105,
    109,
    101,
    111,
    117,
    116,
    40,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    41,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    58,
    105,
    110,
    108,
    105,
    110,
    101,
    45,
    98,
    108,
    111,
    99,
    107,
    59,
    60,
    105,
    110,
    112,
    117,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    115,
    117,
    98,
    109,
    105,
    116,
    34,
    32,
    116,
    121,
    112,
    101,
    32,
    61,
    32,
    39,
    116,
    101,
    120,
    116,
    47,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    60,
    105,
    109,
    103,
    32,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    34,
    32,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    119,
    51,
    46,
    111,
    114,
    103,
    47,
    115,
    104,
    111,
    114,
    116,
    99,
    117,
    116,
    32,
    105,
    99,
    111,
    110,
    34,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    34,
    32,
    97,
    117,
    116,
    111,
    99,
    111,
    109,
    112,
    108,
    101,
    116,
    101,
    61,
    34,
    111,
    102,
    102,
    34,
    32,
    60,
    47,
    97,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    60,
    47,
    97,
    62,
    60,
    47,
    108,
    105,
    62,
    10,
    60,
    108,
    105,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    34,
    99,
    115,
    115,
    34,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    99,
    115,
    115,
    34,
    32,
    60,
    102,
    111,
    114,
    109,
    32,
    97,
    99,
    116,
    105,
    111,
    110,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    120,
    116,
    47,
    99,
    115,
    115,
    34,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    108,
    105,
    110,
    107,
    32,
    114,
    101,
    108,
    61,
    34,
    97,
    108,
    116,
    101,
    114,
    110,
    97,
    116,
    101,
    34,
    32,
    13,
    10,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    32,
    111,
    110,
    99,
    108,
    105,
    99,
    107,
    61,
    34,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    112,
    116,
    58,
    40,
    110,
    101,
    119,
    32,
    68,
    97,
    116,
    101,
    41,
    46,
    103,
    101,
    116,
    84,
    105,
    109,
    101,
    40,
    41,
    125,
    104,
    101,
    105,
    103,
    104,
    116,
    61,
    34,
    49,
    34,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    49,
    34,
    32,
    80,
    101,
    111,
    112,
    108,
    101,
    39,
    115,
    32,
    82,
    101,
    112,
    117,
    98,
    108,
    105,
    99,
    32,
    111,
    102,
    32,
    32,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    116,
    101,
    120,
    116,
    45,
    100,
    101,
    99,
    111,
    114,
    97,
    116,
    105,
    111,
    110,
    58,
    117,
    110,
    100,
    101,
    114,
    116,
    104,
    101,
    32,
    98,
    101,
    103,
    105,
    110,
    110,
    105,
    110,
    103,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    60,
    47,
    100,
    105,
    118,
    62,
    10,
    101,
    115,
    116,
    97,
    98,
    108,
    105,
    115,
    104,
    109,
    101,
    110,
    116,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    47,
    100,
    35,
    118,
    105,
    101,
    119,
    112,
    111,
    114,
    116,
    123,
    109,
    105,
    110,
    45,
    104,
    101,
    105,
    103,
    104,
    116,
    58,
    10,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    115,
    114,
    99,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    111,
    112,
    116,
    105,
    111,
    110,
    62,
    60,
    111,
    112,
    116,
    105,
    111,
    110,
    32,
    118,
    97,
    108,
    117,
    101,
    61,
    111,
    102,
    116,
    101,
    110,
    32,
    114,
    101,
    102,
    101,
    114,
    114,
    101,
    100,
    32,
    116,
    111,
    32,
    97,
    115,
    32,
    47,
    111,
    112,
    116,
    105,
    111,
    110,
    62,
    10,
    60,
    111,
    112,
    116,
    105,
    111,
    110,
    32,
    118,
    97,
    108,
    117,
    60,
    33,
    68,
    79,
    67,
    84,
    89,
    80,
    69,
    32,
    104,
    116,
    109,
    108,
    62,
    10,
    60,
    33,
    45,
    45,
    91,
    73,
    110,
    116,
    101,
    114,
    110,
    97,
    116,
    105,
    111,
    110,
    97,
    108,
    32,
    65,
    105,
    114,
    112,
    111,
    114,
    116,
    62,
    10,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    60,
    47,
    97,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    224,
    184,
    160,
    224,
    184,
    178,
    224,
    184,
    169,
    224,
    184,
    178,
    224,
    185,
    132,
    224,
    184,
    151,
    224,
    184,
    162,
    225,
    131,
    165,
    225,
    131,
    144,
    225,
    131,
    160,
    225,
    131,
    151,
    225,
    131,
    163,
    225,
    131,
    154,
    225,
    131,
    152,
    230,
    173,
    163,
    233,
    171,
    148,
    228,
    184,
    173,
    230,
    150,
    135,
    32,
    40,
    231,
    185,
    129,
    233,
    171,
    148,
    41,
    224,
    164,
    168,
    224,
    164,
    191,
    224,
    164,
    176,
    224,
    165,
    141,
    224,
    164,
    166,
    224,
    165,
    135,
    224,
    164,
    182,
    224,
    164,
    161,
    224,
    164,
    190,
    224,
    164,
    137,
    224,
    164,
    168,
    224,
    164,
    178,
    224,
    165,
    139,
    224,
    164,
    161,
    224,
    164,
    149,
    224,
    165,
    141,
    224,
    164,
    183,
    224,
    165,
    135,
    224,
    164,
    164,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    156,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    165,
    128,
    224,
    164,
    184,
    224,
    164,
    130,
    224,
    164,
    172,
    224,
    164,
    130,
    224,
    164,
    167,
    224,
    164,
    191,
    224,
    164,
    164,
    224,
    164,
    184,
    224,
    165,
    141,
    224,
    164,
    165,
    224,
    164,
    190,
    224,
    164,
    170,
    224,
    164,
    168,
    224,
    164,
    190,
    224,
    164,
    184,
    224,
    165,
    141,
    224,
    164,
    181,
    224,
    165,
    128,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    184,
    224,
    164,
    130,
    224,
    164,
    184,
    224,
    165,
    141,
    224,
    164,
    149,
    224,
    164,
    176,
    224,
    164,
    163,
    224,
    164,
    184,
    224,
    164,
    190,
    224,
    164,
    174,
    224,
    164,
    151,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    165,
    128,
    224,
    164,
    154,
    224,
    164,
    191,
    224,
    164,
    159,
    224,
    165,
    141,
    224,
    164,
    160,
    224,
    165,
    139,
    224,
    164,
    130,
    224,
    164,
    181,
    224,
    164,
    191,
    224,
    164,
    156,
    224,
    165,
    141,
    224,
    164,
    158,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    164,
    133,
    224,
    164,
    174,
    224,
    165,
    135,
    224,
    164,
    176,
    224,
    164,
    191,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    181,
    224,
    164,
    191,
    224,
    164,
    173,
    224,
    164,
    191,
    224,
    164,
    168,
    224,
    165,
    141,
    224,
    164,
    168,
    224,
    164,
    151,
    224,
    164,
    190,
    224,
    164,
    161,
    224,
    164,
    191,
    224,
    164,
    175,
    224,
    164,
    190,
    224,
    164,
    129,
    224,
    164,
    149,
    224,
    165,
    141,
    224,
    164,
    175,
    224,
    165,
    139,
    224,
    164,
    130,
    224,
    164,
    149,
    224,
    164,
    191,
    224,
    164,
    184,
    224,
    165,
    129,
    224,
    164,
    176,
    224,
    164,
    149,
    224,
    165,
    141,
    224,
    164,
    183,
    224,
    164,
    190,
    224,
    164,
    170,
    224,
    164,
    185,
    224,
    165,
    129,
    224,
    164,
    129,
    224,
    164,
    154,
    224,
    164,
    164,
    224,
    165,
    128,
    224,
    164,
    170,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    172,
    224,
    164,
    130,
    224,
    164,
    167,
    224,
    164,
    168,
    224,
    164,
    159,
    224,
    164,
    191,
    224,
    164,
    170,
    224,
    165,
    141,
    224,
    164,
    170,
    224,
    164,
    163,
    224,
    165,
    128,
    224,
    164,
    149,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    191,
    224,
    164,
    149,
    224,
    165,
    135,
    224,
    164,
    159,
    224,
    164,
    170,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    130,
    224,
    164,
    173,
    224,
    164,
    170,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    190,
    224,
    164,
    170,
    224,
    165,
    141,
    224,
    164,
    164,
    224,
    164,
    174,
    224,
    164,
    190,
    224,
    164,
    178,
    224,
    164,
    191,
    224,
    164,
    149,
    224,
    165,
    139,
    224,
    164,
    130,
    224,
    164,
    176,
    224,
    164,
    171,
    224,
    164,
    188,
    224,
    165,
    141,
    224,
    164,
    164,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    164,
    168,
    224,
    164,
    191,
    224,
    164,
    176,
    224,
    165,
    141,
    224,
    164,
    174,
    224,
    164,
    190,
    224,
    164,
    163,
    224,
    164,
    178,
    224,
    164,
    191,
    224,
    164,
    174,
    224,
    164,
    191,
    224,
    164,
    159,
    224,
    165,
    135,
    224,
    164,
    161,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    105,
    111,
    110,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    108,
    111,
    99,
    97,
    116,
    105,
    111,
    110,
    46,
    112,
    114,
    111,
    116,
    46,
    103,
    101,
    116,
    69,
    108,
    101,
    109,
    101,
    110,
    116,
    115,
    66,
    121,
    84,
    97,
    103,
    78,
    97,
    109,
    101,
    40,
    60,
    33,
    68,
    79,
    67,
    84,
    89,
    80,
    69,
    32,
    104,
    116,
    109,
    108,
    62,
    10,
    60,
    104,
    116,
    109,
    108,
    32,
    60,
    109,
    101,
    116,
    97,
    32,
    99,
    104,
    97,
    114,
    115,
    101,
    116,
    61,
    34,
    117,
    116,
    102,
    45,
    56,
    34,
    62,
    58,
    117,
    114,
    108,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    46,
    99,
    115,
    115,
    34,
    32,
    114,
    101,
    108,
    61,
    34,
    115,
    116,
    121,
    108,
    101,
    115,
    104,
    101,
    101,
    116,
    34,
    115,
    116,
    121,
    108,
    101,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    99,
    115,
    115,
    34,
    62,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    99,
    115,
    115,
    34,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    119,
    51,
    46,
    111,
    114,
    103,
    47,
    49,
    57,
    57,
    57,
    47,
    120,
    104,
    116,
    109,
    108,
    34,
    32,
    120,
    109,
    108,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    112,
    116,
    34,
    32,
    109,
    101,
    116,
    104,
    111,
    100,
    61,
    34,
    103,
    101,
    116,
    34,
    32,
    97,
    99,
    116,
    105,
    111,
    110,
    61,
    34,
    108,
    105,
    110,
    107,
    32,
    114,
    101,
    108,
    61,
    34,
    115,
    116,
    121,
    108,
    101,
    115,
    104,
    101,
    101,
    116,
    34,
    32,
    32,
    61,
    32,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    103,
    101,
    116,
    69,
    108,
    101,
    109,
    101,
    110,
    116,
    116,
    121,
    112,
    101,
    61,
    34,
    105,
    109,
    97,
    103,
    101,
    47,
    120,
    45,
    105,
    99,
    111,
    110,
    34,
    32,
    47,
    62,
    99,
    101,
    108,
    108,
    112,
    97,
    100,
    100,
    105,
    110,
    103,
    61,
    34,
    48,
    34,
    32,
    99,
    101,
    108,
    108,
    115,
    112,
    46,
    99,
    115,
    115,
    34,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    99,
    115,
    115,
    34,
    32,
    60,
    47,
    97,
    62,
    60,
    47,
    108,
    105,
    62,
    60,
    108,
    105,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    34,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    49,
    34,
    32,
    104,
    101,
    105,
    103,
    104,
    116,
    61,
    34,
    49,
    34,
    34,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    58,
    110,
    111,
    110,
    101,
    59,
    34,
    62,
    97,
    108,
    116,
    101,
    114,
    110,
    97,
    116,
    101,
    34,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    97,
    112,
    112,
    108,
    105,
    45,
    47,
    47,
    87,
    51,
    67,
    47,
    47,
    68,
    84,
    68,
    32,
    88,
    72,
    84,
    77,
    76,
    32,
    49,
    46,
    48,
    32,
    101,
    108,
    108,
    115,
    112,
    97,
    99,
    105,
    110,
    103,
    61,
    34,
    48,
    34,
    32,
    99,
    101,
    108,
    108,
    112,
    97,
    100,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    104,
    105,
    100,
    100,
    101,
    110,
    34,
    32,
    118,
    97,
    108,
    117,
    101,
    61,
    34,
    47,
    97,
    62,
    38,
    110,
    98,
    115,
    112,
    59,
    60,
    115,
    112,
    97,
    110,
    32,
    114,
    111,
    108,
    101,
    61,
    34,
    115,
    10,
    60,
    105,
    110,
    112,
    117,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    104,
    105,
    100,
    100,
    101,
    110,
    34,
    32,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    61,
    34,
    74,
    97,
    118,
    97,
    83,
    99,
    114,
    105,
    112,
    116,
    34,
    32,
    32,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    103,
    101,
    116,
    69,
    108,
    101,
    109,
    101,
    110,
    116,
    115,
    66,
    103,
    61,
    34,
    48,
    34,
    32,
    99,
    101,
    108,
    108,
    115,
    112,
    97,
    99,
    105,
    110,
    103,
    61,
    34,
    48,
    34,
    32,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    99,
    115,
    115,
    34,
    32,
    109,
    101,
    100,
    105,
    97,
    61,
    34,
    116,
    121,
    112,
    101,
    61,
    39,
    116,
    101,
    120,
    116,
    47,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    112,
    116,
    39,
    119,
    105,
    116,
    104,
    32,
    116,
    104,
    101,
    32,
    101,
    120,
    99,
    101,
    112,
    116,
    105,
    111,
    110,
    32,
    111,
    102,
    32,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    99,
    115,
    115,
    34,
    32,
    114,
    101,
    108,
    61,
    34,
    115,
    116,
    32,
    104,
    101,
    105,
    103,
    104,
    116,
    61,
    34,
    49,
    34,
    32,
    119,
    105,
    100,
    116,
    104,
    61,
    34,
    49,
    34,
    32,
    61,
    39,
    43,
    101,
    110,
    99,
    111,
    100,
    101,
    85,
    82,
    73,
    67,
    111,
    109,
    112,
    111,
    110,
    101,
    110,
    116,
    40,
    60,
    108,
    105,
    110,
    107,
    32,
    114,
    101,
    108,
    61,
    34,
    97,
    108,
    116,
    101,
    114,
    110,
    97,
    116,
    101,
    34,
    32,
    10,
    98,
    111,
    100,
    121,
    44,
    32,
    116,
    114,
    44,
    32,
    105,
    110,
    112,
    117,
    116,
    44,
    32,
    116,
    101,
    120,
    116,
    109,
    101,
    116,
    97,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    114,
    111,
    98,
    111,
    116,
    115,
    34,
    32,
    99,
    111,
    110,
    109,
    101,
    116,
    104,
    111,
    100,
    61,
    34,
    112,
    111,
    115,
    116,
    34,
    32,
    97,
    99,
    116,
    105,
    111,
    110,
    61,
    34,
    62,
    10,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    99,
    115,
    115,
    34,
    32,
    114,
    101,
    108,
    61,
    34,
    115,
    116,
    121,
    108,
    101,
    115,
    104,
    101,
    101,
    116,
    34,
    32,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    61,
    34,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    112,
    116,
    34,
    62,
    97,
    114,
    105,
    97,
    45,
    104,
    105,
    100,
    100,
    101,
    110,
    61,
    34,
    116,
    114,
    117,
    101,
    34,
    62,
    194,
    183,
    60,
    114,
    105,
    112,
    116,
    34,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    106,
    97,
    118,
    97,
    115,
    108,
    61,
    48,
    59,
    125,
    41,
    40,
    41,
    59,
    10,
    40,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    40,
    41,
    123,
    98,
    97,
    99,
    107,
    103,
    114,
    111,
    117,
    110,
    100,
    45,
    105,
    109,
    97,
    103,
    101,
    58,
    32,
    117,
    114,
    108,
    40,
    47,
    97,
    62,
    60,
    47,
    108,
    105,
    62,
    60,
    108,
    105,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    9,
    9,
    60,
    108,
    105,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    97,
    116,
    111,
    114,
    34,
    32,
    97,
    114,
    105,
    97,
    45,
    104,
    105,
    100,
    100,
    101,
    110,
    61,
    34,
    116,
    114,
    117,
    62,
    32,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    61,
    34,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    112,
    116,
    34,
    32,
    47,
    111,
    112,
    116,
    105,
    111,
    110,
    62,
    10,
    60,
    111,
    112,
    116,
    105,
    111,
    110,
    32,
    118,
    97,
    108,
    117,
    101,
    47,
    100,
    105,
    118,
    62,
    60,
    47,
    100,
    105,
    118,
    62,
    60,
    100,
    105,
    118,
    32,
    99,
    108,
    97,
    115,
    115,
    61,
    114,
    97,
    116,
    111,
    114,
    34,
    32,
    97,
    114,
    105,
    97,
    45,
    104,
    105,
    100,
    100,
    101,
    110,
    61,
    34,
    116,
    114,
    101,
    61,
    40,
    110,
    101,
    119,
    32,
    68,
    97,
    116,
    101,
    41,
    46,
    103,
    101,
    116,
    84,
    105,
    109,
    101,
    40,
    41,
    112,
    111,
    114,
    116,
    117,
    103,
    117,
    195,
    170,
    115,
    32,
    40,
    100,
    111,
    32,
    66,
    114,
    97,
    115,
    105,
    108,
    41,
    208,
    190,
    209,
    128,
    208,
    179,
    208,
    176,
    208,
    189,
    208,
    184,
    208,
    183,
    208,
    176,
    209,
    134,
    208,
    184,
    208,
    184,
    208,
    178,
    208,
    190,
    208,
    183,
    208,
    188,
    208,
    190,
    208,
    182,
    208,
    189,
    208,
    190,
    209,
    129,
    209,
    130,
    209,
    140,
    208,
    190,
    208,
    177,
    209,
    128,
    208,
    176,
    208,
    183,
    208,
    190,
    208,
    178,
    208,
    176,
    208,
    189,
    208,
    184,
    209,
    143,
    209,
    128,
    208,
    181,
    208,
    179,
    208,
    184,
    209,
    129,
    209,
    130,
    209,
    128,
    208,
    176,
    209,
    134,
    208,
    184,
    208,
    184,
    208,
    178,
    208,
    190,
    208,
    183,
    208,
    188,
    208,
    190,
    208,
    182,
    208,
    189,
    208,
    190,
    209,
    129,
    209,
    130,
    208,
    184,
    208,
    190,
    208,
    177,
    209,
    143,
    208,
    183,
    208,
    176,
    209,
    130,
    208,
    181,
    208,
    187,
    209,
    140,
    208,
    189,
    208,
    176,
    60,
    33,
    68,
    79,
    67,
    84,
    89,
    80,
    69,
    32,
    104,
    116,
    109,
    108,
    32,
    80,
    85,
    66,
    76,
    73,
    67,
    32,
    34,
    110,
    116,
    45,
    84,
    121,
    112,
    101,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    60,
    109,
    101,
    116,
    97,
    32,
    104,
    116,
    116,
    112,
    45,
    101,
    113,
    117,
    105,
    118,
    61,
    34,
    67,
    111,
    110,
    116,
    101,
    114,
    97,
    110,
    115,
    105,
    116,
    105,
    111,
    110,
    97,
    108,
    47,
    47,
    69,
    78,
    34,
    32,
    34,
    104,
    116,
    116,
    112,
    58,
    60,
    104,
    116,
    109,
    108,
    32,
    120,
    109,
    108,
    110,
    115,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    45,
    47,
    47,
    87,
    51,
    67,
    47,
    47,
    68,
    84,
    68,
    32,
    88,
    72,
    84,
    77,
    76,
    32,
    49,
    46,
    48,
    32,
    84,
    68,
    84,
    68,
    47,
    120,
    104,
    116,
    109,
    108,
    49,
    45,
    116,
    114,
    97,
    110,
    115,
    105,
    116,
    105,
    111,
    110,
    97,
    108,
    47,
    47,
    119,
    119,
    119,
    46,
    119,
    51,
    46,
    111,
    114,
    103,
    47,
    84,
    82,
    47,
    120,
    104,
    116,
    109,
    108,
    49,
    47,
    112,
    101,
    32,
    61,
    32,
    39,
    116,
    101,
    120,
    116,
    47,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    112,
    116,
    39,
    59,
    60,
    109,
    101,
    116,
    97,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    105,
    111,
    110,
    112,
    97,
    114,
    101,
    110,
    116,
    78,
    111,
    100,
    101,
    46,
    105,
    110,
    115,
    101,
    114,
    116,
    66,
    101,
    102,
    111,
    114,
    101,
    60,
    105,
    110,
    112,
    117,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    104,
    105,
    100,
    100,
    101,
    110,
    34,
    32,
    110,
    97,
    106,
    115,
    34,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    40,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    41,
    46,
    114,
    101,
    97,
    100,
    121,
    40,
    102,
    117,
    110,
    99,
    116,
    105,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    106,
    97,
    118,
    97,
    115,
    105,
    109,
    97,
    103,
    101,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    85,
    65,
    45,
    67,
    111,
    109,
    112,
    97,
    116,
    105,
    98,
    108,
    101,
    34,
    32,
    99,
    111,
    110,
    116,
    101,
    110,
    116,
    61,
    116,
    109,
    108,
    59,
    32,
    99,
    104,
    97,
    114,
    115,
    101,
    116,
    61,
    117,
    116,
    102,
    45,
    56,
    34,
    32,
    47,
    62,
    10,
    108,
    105,
    110,
    107,
    32,
    114,
    101,
    108,
    61,
    34,
    115,
    104,
    111,
    114,
    116,
    99,
    117,
    116,
    32,
    105,
    99,
    111,
    110,
    60,
    108,
    105,
    110,
    107,
    32,
    114,
    101,
    108,
    61,
    34,
    115,
    116,
    121,
    108,
    101,
    115,
    104,
    101,
    101,
    116,
    34,
    32,
    60,
    47,
    115,
    99,
    114,
    105,
    112,
    116,
    62,
    10,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    61,
    32,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    99,
    114,
    101,
    97,
    116,
    101,
    69,
    108,
    101,
    109,
    101,
    110,
    60,
    97,
    32,
    116,
    97,
    114,
    103,
    101,
    116,
    61,
    34,
    95,
    98,
    108,
    97,
    110,
    107,
    34,
    32,
    104,
    114,
    101,
    102,
    61,
    32,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    103,
    101,
    116,
    69,
    108,
    101,
    109,
    101,
    110,
    116,
    115,
    66,
    105,
    110,
    112,
    117,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    34,
    32,
    110,
    97,
    109,
    101,
    61,
    97,
    46,
    116,
    121,
    112,
    101,
    32,
    61,
    32,
    39,
    116,
    101,
    120,
    116,
    47,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    110,
    112,
    117,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    104,
    105,
    100,
    100,
    101,
    110,
    34,
    32,
    110,
    97,
    109,
    101,
    104,
    116,
    109,
    108,
    59,
    32,
    99,
    104,
    97,
    114,
    115,
    101,
    116,
    61,
    117,
    116,
    102,
    45,
    56,
    34,
    32,
    47,
    62,
    100,
    116,
    100,
    34,
    62,
    10,
    60,
    104,
    116,
    109,
    108,
    32,
    120,
    109,
    108,
    110,
    115,
    61,
    34,
    104,
    116,
    116,
    112,
    45,
    47,
    47,
    87,
    51,
    67,
    47,
    47,
    68,
    84,
    68,
    32,
    72,
    84,
    77,
    76,
    32,
    52,
    46,
    48,
    49,
    32,
    84,
    101,
    110,
    116,
    115,
    66,
    121,
    84,
    97,
    103,
    78,
    97,
    109,
    101,
    40,
    39,
    115,
    99,
    114,
    105,
    112,
    116,
    39,
    41,
    105,
    110,
    112,
    117,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    104,
    105,
    100,
    100,
    101,
    110,
    34,
    32,
    110,
    97,
    109,
    60,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    106,
    97,
    118,
    97,
    115,
    34,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    58,
    110,
    111,
    110,
    101,
    59,
    34,
    62,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    103,
    101,
    116,
    69,
    108,
    101,
    109,
    101,
    110,
    116,
    66,
    121,
    73,
    100,
    40,
    61,
    100,
    111,
    99,
    117,
    109,
    101,
    110,
    116,
    46,
    99,
    114,
    101,
    97,
    116,
    101,
    69,
    108,
    101,
    109,
    101,
    110,
    116,
    40,
    39,
    32,
    116,
    121,
    112,
    101,
    61,
    39,
    116,
    101,
    120,
    116,
    47,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    112,
    116,
    39,
    105,
    110,
    112,
    117,
    116,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    34,
    32,
    110,
    97,
    109,
    101,
    61,
    34,
    100,
    46,
    103,
    101,
    116,
    69,
    108,
    101,
    109,
    101,
    110,
    116,
    115,
    66,
    121,
    84,
    97,
    103,
    78,
    97,
    109,
    101,
    40,
    115,
    110,
    105,
    99,
    97,
    108,
    34,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    67,
    47,
    47,
    68,
    84,
    68,
    32,
    72,
    84,
    77,
    76,
    32,
    52,
    46,
    48,
    49,
    32,
    84,
    114,
    97,
    110,
    115,
    105,
    116,
    60,
    115,
    116,
    121,
    108,
    101,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    99,
    115,
    115,
    34,
    62,
    10,
    10,
    60,
    115,
    116,
    121,
    108,
    101,
    32,
    116,
    121,
    112,
    101,
    61,
    34,
    116,
    101,
    120,
    116,
    47,
    99,
    115,
    115,
    34,
    62,
    105,
    111,
    110,
    97,
    108,
    46,
    100,
    116,
    100,
    34,
    62,
    10,
    60,
    104,
    116,
    109,
    108,
    32,
    120,
    109,
    108,
    110,
    115,
    61,
    104,
    116,
    116,
    112,
    45,
    101,
    113,
    117,
    105,
    118,
    61,
    34,
    67,
    111,
    110,
    116,
    101,
    110,
    116,
    45,
    84,
    121,
    112,
    101,
    100,
    105,
    110,
    103,
    61,
    34,
    48,
    34,
    32,
    99,
    101,
    108,
    108,
    115,
    112,
    97,
    99,
    105,
    110,
    103,
    61,
    34,
    48,
    34,
    104,
    116,
    109,
    108,
    59,
    32,
    99,
    104,
    97,
    114,
    115,
    101,
    116,
    61,
    117,
    116,
    102,
    45,
    56,
    34,
    32,
    47,
    62,
    10,
    32,
    115,
    116,
    121,
    108,
    101,
    61,
    34,
    100,
    105,
    115,
    112,
    108,
    97,
    121,
    58,
    110,
    111,
    110,
    101,
    59,
    34,
    62,
    60,
    60,
    108,
    105,
    62,
    60,
    97,
    32,
    104,
    114,
    101,
    102,
    61,
    34,
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    119,
    119,
    119,
    46,
    32,
    116,
    121,
    112,
    101,
    61,
    39,
    116,
    101,
    120,
    116,
    47,
    106,
    97,
    118,
    97,
    115,
    99,
    114,
    105,
    112,
    116,
    39,
    62,
    208,
    180,
    208,
    181,
    209,
    143,
    209,
    130,
    208,
    181,
    208,
    187,
    209,
    140,
    208,
    189,
    208,
    190,
    209,
    129,
    209,
    130,
    208,
    184,
    209,
    129,
    208,
    190,
    208,
    190,
    209,
    130,
    208,
    178,
    208,
    181,
    209,
    130,
    209,
    129,
    209,
    130,
    208,
    178,
    208,
    184,
    208,
    184,
    208,
    191,
    209,
    128,
    208,
    190,
    208,
    184,
    208,
    183,
    208,
    178,
    208,
    190,
    208,
    180,
    209,
    129,
    209,
    130,
    208,
    178,
    208,
    176,
    208,
    177,
    208,
    181,
    208,
    183,
    208,
    190,
    208,
    191,
    208,
    176,
    209,
    129,
    208,
    189,
    208,
    190,
    209,
    129,
    209,
    130,
    208,
    184,
    224,
    164,
    170,
    224,
    165,
    129,
    224,
    164,
    184,
    224,
    165,
    141,
    224,
    164,
    164,
    224,
    164,
    191,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    130,
    224,
    164,
    151,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    165,
    135,
    224,
    164,
    184,
    224,
    164,
    137,
    224,
    164,
    168,
    224,
    165,
    141,
    224,
    164,
    185,
    224,
    165,
    139,
    224,
    164,
    130,
    224,
    164,
    168,
    224,
    165,
    135,
    224,
    164,
    181,
    224,
    164,
    191,
    224,
    164,
    167,
    224,
    164,
    190,
    224,
    164,
    168,
    224,
    164,
    184,
    224,
    164,
    173,
    224,
    164,
    190,
    224,
    164,
    171,
    224,
    164,
    191,
    224,
    164,
    149,
    224,
    165,
    141,
    224,
    164,
    184,
    224,
    164,
    191,
    224,
    164,
    130,
    224,
    164,
    151,
    224,
    164,
    184,
    224,
    165,
    129,
    224,
    164,
    176,
    224,
    164,
    149,
    224,
    165,
    141,
    224,
    164,
    183,
    224,
    164,
    191,
    224,
    164,
    164,
    224,
    164,
    149,
    224,
    165,
    137,
    224,
    164,
    170,
    224,
    165,
    128,
    224,
    164,
    176,
    224,
    164,
    190,
    224,
    164,
    135,
    224,
    164,
    159,
    224,
    164,
    181,
    224,
    164,
    191,
    224,
    164,
    156,
    224,
    165,
    141,
    224,
    164,
    158,
    224,
    164,
    190,
    224,
    164,
    170,
    224,
    164,
    168,
    224,
    164,
    149,
    224,
    164,
    190,
    224,
    164,
    176,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    181,
    224,
    164,
    190,
    224,
    164,
    136,
    224,
    164,
    184,
    224,
    164,
    149,
    224,
    165,
    141,
    224,
    164,
    176,
    224,
    164,
    191,
    224,
    164,
    175,
    224,
    164,
    164,
    224,
    164,
    190
  ]);
  exports.init = function() {
    return exports.dictionary;
  };
});

// node_modules/brotli/dec/dictionary.js
var require_dictionary = __commonJS((exports) => {
  var data = require_dictionary_data();
  exports.init = function() {
    exports.dictionary = data.init();
  };
  exports.offsetsByLength = new Uint32Array([
    0,
    0,
    0,
    0,
    0,
    4096,
    9216,
    21504,
    35840,
    44032,
    53248,
    63488,
    74752,
    87040,
    93696,
    100864,
    104704,
    106752,
    108928,
    113536,
    115968,
    118528,
    119872,
    121280,
    122016
  ]);
  exports.sizeBitsByLength = new Uint8Array([
    0,
    0,
    0,
    0,
    10,
    10,
    11,
    11,
    10,
    10,
    10,
    10,
    10,
    9,
    9,
    8,
    7,
    7,
    8,
    7,
    7,
    6,
    6,
    5,
    5
  ]);
  exports.minDictionaryWordLength = 4;
  exports.maxDictionaryWordLength = 24;
});

// node_modules/brotli/dec/huffman.js
var require_huffman = __commonJS((exports) => {
  function HuffmanCode(bits, value15) {
    this.bits = bits;
    this.value = value15;
  }
  function GetNextKey(key, len) {
    var step = 1 << len - 1;
    while (key & step) {
      step >>= 1;
    }
    return (key & step - 1) + step;
  }
  function ReplicateValue(table, i3, step, end, code) {
    do {
      end -= step;
      table[i3 + end] = new HuffmanCode(code.bits, code.value);
    } while (end > 0);
  }
  function NextTableBitSize(count, len, root_bits) {
    var left = 1 << len - root_bits;
    while (len < MAX_LENGTH) {
      left -= count[len];
      if (left <= 0)
        break;
      ++len;
      left <<= 1;
    }
    return len - root_bits;
  }
  exports.HuffmanCode = HuffmanCode;
  var MAX_LENGTH = 15;
  exports.BrotliBuildHuffmanTable = function(root_table, table, root_bits, code_lengths, code_lengths_size) {
    var start_table = table;
    var code;
    var len;
    var symbol5;
    var key;
    var step;
    var low;
    var mask;
    var table_bits;
    var table_size;
    var total_size;
    var sorted;
    var count = new Int32Array(MAX_LENGTH + 1);
    var offset = new Int32Array(MAX_LENGTH + 1);
    sorted = new Int32Array(code_lengths_size);
    for (symbol5 = 0;symbol5 < code_lengths_size; symbol5++) {
      count[code_lengths[symbol5]]++;
    }
    offset[1] = 0;
    for (len = 1;len < MAX_LENGTH; len++) {
      offset[len + 1] = offset[len] + count[len];
    }
    for (symbol5 = 0;symbol5 < code_lengths_size; symbol5++) {
      if (code_lengths[symbol5] !== 0) {
        sorted[offset[code_lengths[symbol5]]++] = symbol5;
      }
    }
    table_bits = root_bits;
    table_size = 1 << table_bits;
    total_size = table_size;
    if (offset[MAX_LENGTH] === 1) {
      for (key = 0;key < total_size; ++key) {
        root_table[table + key] = new HuffmanCode(0, sorted[0] & 65535);
      }
      return total_size;
    }
    key = 0;
    symbol5 = 0;
    for (len = 1, step = 2;len <= root_bits; ++len, step <<= 1) {
      for (;count[len] > 0; --count[len]) {
        code = new HuffmanCode(len & 255, sorted[symbol5++] & 65535);
        ReplicateValue(root_table, table + key, step, table_size, code);
        key = GetNextKey(key, len);
      }
    }
    mask = total_size - 1;
    low = -1;
    for (len = root_bits + 1, step = 2;len <= MAX_LENGTH; ++len, step <<= 1) {
      for (;count[len] > 0; --count[len]) {
        if ((key & mask) !== low) {
          table += table_size;
          table_bits = NextTableBitSize(count, len, root_bits);
          table_size = 1 << table_bits;
          total_size += table_size;
          low = key & mask;
          root_table[start_table + low] = new HuffmanCode(table_bits + root_bits & 255, table - start_table - low & 65535);
        }
        code = new HuffmanCode(len - root_bits & 255, sorted[symbol5++] & 65535);
        ReplicateValue(root_table, table + (key >> root_bits), step, table_size, code);
        key = GetNextKey(key, len);
      }
    }
    return total_size;
  };
});

// node_modules/brotli/dec/context.js
var require_context = __commonJS((exports) => {
  exports.lookup = new Uint8Array([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    4,
    0,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    12,
    16,
    12,
    12,
    20,
    12,
    16,
    24,
    28,
    12,
    12,
    32,
    12,
    36,
    12,
    44,
    44,
    44,
    44,
    44,
    44,
    44,
    44,
    44,
    44,
    32,
    32,
    24,
    40,
    28,
    12,
    12,
    48,
    52,
    52,
    52,
    48,
    52,
    52,
    52,
    48,
    52,
    52,
    52,
    52,
    52,
    48,
    52,
    52,
    52,
    52,
    52,
    48,
    52,
    52,
    52,
    52,
    52,
    24,
    12,
    28,
    12,
    12,
    12,
    56,
    60,
    60,
    60,
    56,
    60,
    60,
    60,
    56,
    60,
    60,
    60,
    60,
    60,
    56,
    60,
    60,
    60,
    60,
    60,
    56,
    60,
    60,
    60,
    60,
    60,
    24,
    12,
    28,
    12,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    7,
    0,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    56,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    6,
    6,
    6,
    6,
    7,
    7,
    7,
    7,
    8,
    8,
    8,
    8,
    9,
    9,
    9,
    9,
    10,
    10,
    10,
    10,
    11,
    11,
    11,
    11,
    12,
    12,
    12,
    12,
    13,
    13,
    13,
    13,
    14,
    14,
    14,
    14,
    15,
    15,
    15,
    15,
    16,
    16,
    16,
    16,
    17,
    17,
    17,
    17,
    18,
    18,
    18,
    18,
    19,
    19,
    19,
    19,
    20,
    20,
    20,
    20,
    21,
    21,
    21,
    21,
    22,
    22,
    22,
    22,
    23,
    23,
    23,
    23,
    24,
    24,
    24,
    24,
    25,
    25,
    25,
    25,
    26,
    26,
    26,
    26,
    27,
    27,
    27,
    27,
    28,
    28,
    28,
    28,
    29,
    29,
    29,
    29,
    30,
    30,
    30,
    30,
    31,
    31,
    31,
    31,
    32,
    32,
    32,
    32,
    33,
    33,
    33,
    33,
    34,
    34,
    34,
    34,
    35,
    35,
    35,
    35,
    36,
    36,
    36,
    36,
    37,
    37,
    37,
    37,
    38,
    38,
    38,
    38,
    39,
    39,
    39,
    39,
    40,
    40,
    40,
    40,
    41,
    41,
    41,
    41,
    42,
    42,
    42,
    42,
    43,
    43,
    43,
    43,
    44,
    44,
    44,
    44,
    45,
    45,
    45,
    45,
    46,
    46,
    46,
    46,
    47,
    47,
    47,
    47,
    48,
    48,
    48,
    48,
    49,
    49,
    49,
    49,
    50,
    50,
    50,
    50,
    51,
    51,
    51,
    51,
    52,
    52,
    52,
    52,
    53,
    53,
    53,
    53,
    54,
    54,
    54,
    54,
    55,
    55,
    55,
    55,
    56,
    56,
    56,
    56,
    57,
    57,
    57,
    57,
    58,
    58,
    58,
    58,
    59,
    59,
    59,
    59,
    60,
    60,
    60,
    60,
    61,
    61,
    61,
    61,
    62,
    62,
    62,
    62,
    63,
    63,
    63,
    63,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ]);
  exports.lookupOffsets = new Uint16Array([
    1024,
    1536,
    1280,
    1536,
    0,
    256,
    768,
    512
  ]);
});

// node_modules/brotli/dec/prefix.js
var require_prefix = __commonJS((exports) => {
  function PrefixCodeRange(offset, nbits) {
    this.offset = offset;
    this.nbits = nbits;
  }
  exports.kBlockLengthPrefixCode = [
    new PrefixCodeRange(1, 2),
    new PrefixCodeRange(5, 2),
    new PrefixCodeRange(9, 2),
    new PrefixCodeRange(13, 2),
    new PrefixCodeRange(17, 3),
    new PrefixCodeRange(25, 3),
    new PrefixCodeRange(33, 3),
    new PrefixCodeRange(41, 3),
    new PrefixCodeRange(49, 4),
    new PrefixCodeRange(65, 4),
    new PrefixCodeRange(81, 4),
    new PrefixCodeRange(97, 4),
    new PrefixCodeRange(113, 5),
    new PrefixCodeRange(145, 5),
    new PrefixCodeRange(177, 5),
    new PrefixCodeRange(209, 5),
    new PrefixCodeRange(241, 6),
    new PrefixCodeRange(305, 6),
    new PrefixCodeRange(369, 7),
    new PrefixCodeRange(497, 8),
    new PrefixCodeRange(753, 9),
    new PrefixCodeRange(1265, 10),
    new PrefixCodeRange(2289, 11),
    new PrefixCodeRange(4337, 12),
    new PrefixCodeRange(8433, 13),
    new PrefixCodeRange(16625, 24)
  ];
  exports.kInsertLengthPrefixCode = [
    new PrefixCodeRange(0, 0),
    new PrefixCodeRange(1, 0),
    new PrefixCodeRange(2, 0),
    new PrefixCodeRange(3, 0),
    new PrefixCodeRange(4, 0),
    new PrefixCodeRange(5, 0),
    new PrefixCodeRange(6, 1),
    new PrefixCodeRange(8, 1),
    new PrefixCodeRange(10, 2),
    new PrefixCodeRange(14, 2),
    new PrefixCodeRange(18, 3),
    new PrefixCodeRange(26, 3),
    new PrefixCodeRange(34, 4),
    new PrefixCodeRange(50, 4),
    new PrefixCodeRange(66, 5),
    new PrefixCodeRange(98, 5),
    new PrefixCodeRange(130, 6),
    new PrefixCodeRange(194, 7),
    new PrefixCodeRange(322, 8),
    new PrefixCodeRange(578, 9),
    new PrefixCodeRange(1090, 10),
    new PrefixCodeRange(2114, 12),
    new PrefixCodeRange(6210, 14),
    new PrefixCodeRange(22594, 24)
  ];
  exports.kCopyLengthPrefixCode = [
    new PrefixCodeRange(2, 0),
    new PrefixCodeRange(3, 0),
    new PrefixCodeRange(4, 0),
    new PrefixCodeRange(5, 0),
    new PrefixCodeRange(6, 0),
    new PrefixCodeRange(7, 0),
    new PrefixCodeRange(8, 0),
    new PrefixCodeRange(9, 0),
    new PrefixCodeRange(10, 1),
    new PrefixCodeRange(12, 1),
    new PrefixCodeRange(14, 2),
    new PrefixCodeRange(18, 2),
    new PrefixCodeRange(22, 3),
    new PrefixCodeRange(30, 3),
    new PrefixCodeRange(38, 4),
    new PrefixCodeRange(54, 4),
    new PrefixCodeRange(70, 5),
    new PrefixCodeRange(102, 5),
    new PrefixCodeRange(134, 6),
    new PrefixCodeRange(198, 7),
    new PrefixCodeRange(326, 8),
    new PrefixCodeRange(582, 9),
    new PrefixCodeRange(1094, 10),
    new PrefixCodeRange(2118, 24)
  ];
  exports.kInsertRangeLut = [
    0,
    0,
    8,
    8,
    0,
    16,
    8,
    16,
    16
  ];
  exports.kCopyRangeLut = [
    0,
    8,
    0,
    8,
    16,
    0,
    16,
    8,
    16
  ];
});

// node_modules/brotli/dec/transform.js
var require_transform = __commonJS((exports) => {
  function Transform2(prefix, transform7, suffix) {
    this.prefix = new Uint8Array(prefix.length);
    this.transform = transform7;
    this.suffix = new Uint8Array(suffix.length);
    for (var i3 = 0;i3 < prefix.length; i3++)
      this.prefix[i3] = prefix.charCodeAt(i3);
    for (var i3 = 0;i3 < suffix.length; i3++)
      this.suffix[i3] = suffix.charCodeAt(i3);
  }
  function ToUpperCase(p3, i3) {
    if (p3[i3] < 192) {
      if (p3[i3] >= 97 && p3[i3] <= 122) {
        p3[i3] ^= 32;
      }
      return 1;
    }
    if (p3[i3] < 224) {
      p3[i3 + 1] ^= 32;
      return 2;
    }
    p3[i3 + 2] ^= 5;
    return 3;
  }
  var BrotliDictionary = require_dictionary();
  var kIdentity = 0;
  var kOmitLast1 = 1;
  var kOmitLast2 = 2;
  var kOmitLast3 = 3;
  var kOmitLast4 = 4;
  var kOmitLast5 = 5;
  var kOmitLast6 = 6;
  var kOmitLast7 = 7;
  var kOmitLast8 = 8;
  var kOmitLast9 = 9;
  var kUppercaseFirst = 10;
  var kUppercaseAll = 11;
  var kOmitFirst1 = 12;
  var kOmitFirst2 = 13;
  var kOmitFirst3 = 14;
  var kOmitFirst4 = 15;
  var kOmitFirst5 = 16;
  var kOmitFirst6 = 17;
  var kOmitFirst7 = 18;
  var kOmitFirst9 = 20;
  var kTransforms = [
    new Transform2("", kIdentity, ""),
    new Transform2("", kIdentity, " "),
    new Transform2(" ", kIdentity, " "),
    new Transform2("", kOmitFirst1, ""),
    new Transform2("", kUppercaseFirst, " "),
    new Transform2("", kIdentity, " the "),
    new Transform2(" ", kIdentity, ""),
    new Transform2("s ", kIdentity, " "),
    new Transform2("", kIdentity, " of "),
    new Transform2("", kUppercaseFirst, ""),
    new Transform2("", kIdentity, " and "),
    new Transform2("", kOmitFirst2, ""),
    new Transform2("", kOmitLast1, ""),
    new Transform2(", ", kIdentity, " "),
    new Transform2("", kIdentity, ", "),
    new Transform2(" ", kUppercaseFirst, " "),
    new Transform2("", kIdentity, " in "),
    new Transform2("", kIdentity, " to "),
    new Transform2("e ", kIdentity, " "),
    new Transform2("", kIdentity, "\""),
    new Transform2("", kIdentity, "."),
    new Transform2("", kIdentity, "\">"),
    new Transform2("", kIdentity, "\n"),
    new Transform2("", kOmitLast3, ""),
    new Transform2("", kIdentity, "]"),
    new Transform2("", kIdentity, " for "),
    new Transform2("", kOmitFirst3, ""),
    new Transform2("", kOmitLast2, ""),
    new Transform2("", kIdentity, " a "),
    new Transform2("", kIdentity, " that "),
    new Transform2(" ", kUppercaseFirst, ""),
    new Transform2("", kIdentity, ". "),
    new Transform2(".", kIdentity, ""),
    new Transform2(" ", kIdentity, ", "),
    new Transform2("", kOmitFirst4, ""),
    new Transform2("", kIdentity, " with "),
    new Transform2("", kIdentity, "'"),
    new Transform2("", kIdentity, " from "),
    new Transform2("", kIdentity, " by "),
    new Transform2("", kOmitFirst5, ""),
    new Transform2("", kOmitFirst6, ""),
    new Transform2(" the ", kIdentity, ""),
    new Transform2("", kOmitLast4, ""),
    new Transform2("", kIdentity, ". The "),
    new Transform2("", kUppercaseAll, ""),
    new Transform2("", kIdentity, " on "),
    new Transform2("", kIdentity, " as "),
    new Transform2("", kIdentity, " is "),
    new Transform2("", kOmitLast7, ""),
    new Transform2("", kOmitLast1, "ing "),
    new Transform2("", kIdentity, "\n\t"),
    new Transform2("", kIdentity, ":"),
    new Transform2(" ", kIdentity, ". "),
    new Transform2("", kIdentity, "ed "),
    new Transform2("", kOmitFirst9, ""),
    new Transform2("", kOmitFirst7, ""),
    new Transform2("", kOmitLast6, ""),
    new Transform2("", kIdentity, "("),
    new Transform2("", kUppercaseFirst, ", "),
    new Transform2("", kOmitLast8, ""),
    new Transform2("", kIdentity, " at "),
    new Transform2("", kIdentity, "ly "),
    new Transform2(" the ", kIdentity, " of "),
    new Transform2("", kOmitLast5, ""),
    new Transform2("", kOmitLast9, ""),
    new Transform2(" ", kUppercaseFirst, ", "),
    new Transform2("", kUppercaseFirst, "\""),
    new Transform2(".", kIdentity, "("),
    new Transform2("", kUppercaseAll, " "),
    new Transform2("", kUppercaseFirst, "\">"),
    new Transform2("", kIdentity, "=\""),
    new Transform2(" ", kIdentity, "."),
    new Transform2(".com/", kIdentity, ""),
    new Transform2(" the ", kIdentity, " of the "),
    new Transform2("", kUppercaseFirst, "'"),
    new Transform2("", kIdentity, ". This "),
    new Transform2("", kIdentity, ","),
    new Transform2(".", kIdentity, " "),
    new Transform2("", kUppercaseFirst, "("),
    new Transform2("", kUppercaseFirst, "."),
    new Transform2("", kIdentity, " not "),
    new Transform2(" ", kIdentity, "=\""),
    new Transform2("", kIdentity, "er "),
    new Transform2(" ", kUppercaseAll, " "),
    new Transform2("", kIdentity, "al "),
    new Transform2(" ", kUppercaseAll, ""),
    new Transform2("", kIdentity, "='"),
    new Transform2("", kUppercaseAll, "\""),
    new Transform2("", kUppercaseFirst, ". "),
    new Transform2(" ", kIdentity, "("),
    new Transform2("", kIdentity, "ful "),
    new Transform2(" ", kUppercaseFirst, ". "),
    new Transform2("", kIdentity, "ive "),
    new Transform2("", kIdentity, "less "),
    new Transform2("", kUppercaseAll, "'"),
    new Transform2("", kIdentity, "est "),
    new Transform2(" ", kUppercaseFirst, "."),
    new Transform2("", kUppercaseAll, "\">"),
    new Transform2(" ", kIdentity, "='"),
    new Transform2("", kUppercaseFirst, ","),
    new Transform2("", kIdentity, "ize "),
    new Transform2("", kUppercaseAll, "."),
    new Transform2("\xC2\xA0", kIdentity, ""),
    new Transform2(" ", kIdentity, ","),
    new Transform2("", kUppercaseFirst, "=\""),
    new Transform2("", kUppercaseAll, "=\""),
    new Transform2("", kIdentity, "ous "),
    new Transform2("", kUppercaseAll, ", "),
    new Transform2("", kUppercaseFirst, "='"),
    new Transform2(" ", kUppercaseFirst, ","),
    new Transform2(" ", kUppercaseAll, "=\""),
    new Transform2(" ", kUppercaseAll, ", "),
    new Transform2("", kUppercaseAll, ","),
    new Transform2("", kUppercaseAll, "("),
    new Transform2("", kUppercaseAll, ". "),
    new Transform2(" ", kUppercaseAll, "."),
    new Transform2("", kUppercaseAll, "='"),
    new Transform2(" ", kUppercaseAll, ". "),
    new Transform2(" ", kUppercaseFirst, "=\""),
    new Transform2(" ", kUppercaseAll, "='"),
    new Transform2(" ", kUppercaseFirst, "='")
  ];
  exports.kTransforms = kTransforms;
  exports.kNumTransforms = kTransforms.length;
  exports.transformDictionaryWord = function(dst, idx, word, len, transform7) {
    var prefix = kTransforms[transform7].prefix;
    var suffix = kTransforms[transform7].suffix;
    var t3 = kTransforms[transform7].transform;
    var skip = t3 < kOmitFirst1 ? 0 : t3 - (kOmitFirst1 - 1);
    var i3 = 0;
    var start_idx = idx;
    var uppercase2;
    if (skip > len) {
      skip = len;
    }
    var prefix_pos = 0;
    while (prefix_pos < prefix.length) {
      dst[idx++] = prefix[prefix_pos++];
    }
    word += skip;
    len -= skip;
    if (t3 <= kOmitLast9) {
      len -= t3;
    }
    for (i3 = 0;i3 < len; i3++) {
      dst[idx++] = BrotliDictionary.dictionary[word + i3];
    }
    uppercase2 = idx - len;
    if (t3 === kUppercaseFirst) {
      ToUpperCase(dst, uppercase2);
    } else if (t3 === kUppercaseAll) {
      while (len > 0) {
        var step = ToUpperCase(dst, uppercase2);
        uppercase2 += step;
        len -= step;
      }
    }
    var suffix_pos = 0;
    while (suffix_pos < suffix.length) {
      dst[idx++] = suffix[suffix_pos++];
    }
    return idx - start_idx;
  };
});

// node_modules/brotli/dec/decode.js
var require_decode = __commonJS((exports) => {
  function DecodeWindowBits(br) {
    var n3;
    if (br.readBits(1) === 0) {
      return 16;
    }
    n3 = br.readBits(3);
    if (n3 > 0) {
      return 17 + n3;
    }
    n3 = br.readBits(3);
    if (n3 > 0) {
      return 8 + n3;
    }
    return 17;
  }
  function DecodeVarLenUint8(br) {
    if (br.readBits(1)) {
      var nbits = br.readBits(3);
      if (nbits === 0) {
        return 1;
      } else {
        return br.readBits(nbits) + (1 << nbits);
      }
    }
    return 0;
  }
  function MetaBlockLength() {
    this.meta_block_length = 0;
    this.input_end = 0;
    this.is_uncompressed = 0;
    this.is_metadata = false;
  }
  function DecodeMetaBlockLength(br) {
    var out = new MetaBlockLength;
    var size_nibbles;
    var size_bytes;
    var i3;
    out.input_end = br.readBits(1);
    if (out.input_end && br.readBits(1)) {
      return out;
    }
    size_nibbles = br.readBits(2) + 4;
    if (size_nibbles === 7) {
      out.is_metadata = true;
      if (br.readBits(1) !== 0)
        throw new Error("Invalid reserved bit");
      size_bytes = br.readBits(2);
      if (size_bytes === 0)
        return out;
      for (i3 = 0;i3 < size_bytes; i3++) {
        var next_byte = br.readBits(8);
        if (i3 + 1 === size_bytes && size_bytes > 1 && next_byte === 0)
          throw new Error("Invalid size byte");
        out.meta_block_length |= next_byte << i3 * 8;
      }
    } else {
      for (i3 = 0;i3 < size_nibbles; ++i3) {
        var next_nibble = br.readBits(4);
        if (i3 + 1 === size_nibbles && size_nibbles > 4 && next_nibble === 0)
          throw new Error("Invalid size nibble");
        out.meta_block_length |= next_nibble << i3 * 4;
      }
    }
    ++out.meta_block_length;
    if (!out.input_end && !out.is_metadata) {
      out.is_uncompressed = br.readBits(1);
    }
    return out;
  }
  function ReadSymbol(table, index, br) {
    var start_index = index;
    var nbits;
    br.fillBitWindow();
    index += br.val_ >>> br.bit_pos_ & HUFFMAN_TABLE_MASK;
    nbits = table[index].bits - HUFFMAN_TABLE_BITS;
    if (nbits > 0) {
      br.bit_pos_ += HUFFMAN_TABLE_BITS;
      index += table[index].value;
      index += br.val_ >>> br.bit_pos_ & (1 << nbits) - 1;
    }
    br.bit_pos_ += table[index].bits;
    return table[index].value;
  }
  function ReadHuffmanCodeLengths(code_length_code_lengths, num_symbols, code_lengths, br) {
    var symbol5 = 0;
    var prev_code_len = kDefaultCodeLength;
    var repeat = 0;
    var repeat_code_len = 0;
    var space = 32768;
    var table = [];
    for (var i3 = 0;i3 < 32; i3++)
      table.push(new HuffmanCode(0, 0));
    BrotliBuildHuffmanTable(table, 0, 5, code_length_code_lengths, CODE_LENGTH_CODES);
    while (symbol5 < num_symbols && space > 0) {
      var p3 = 0;
      var code_len;
      br.readMoreInput();
      br.fillBitWindow();
      p3 += br.val_ >>> br.bit_pos_ & 31;
      br.bit_pos_ += table[p3].bits;
      code_len = table[p3].value & 255;
      if (code_len < kCodeLengthRepeatCode) {
        repeat = 0;
        code_lengths[symbol5++] = code_len;
        if (code_len !== 0) {
          prev_code_len = code_len;
          space -= 32768 >> code_len;
        }
      } else {
        var extra_bits = code_len - 14;
        var old_repeat;
        var repeat_delta;
        var new_len = 0;
        if (code_len === kCodeLengthRepeatCode) {
          new_len = prev_code_len;
        }
        if (repeat_code_len !== new_len) {
          repeat = 0;
          repeat_code_len = new_len;
        }
        old_repeat = repeat;
        if (repeat > 0) {
          repeat -= 2;
          repeat <<= extra_bits;
        }
        repeat += br.readBits(extra_bits) + 3;
        repeat_delta = repeat - old_repeat;
        if (symbol5 + repeat_delta > num_symbols) {
          throw new Error("[ReadHuffmanCodeLengths] symbol + repeat_delta > num_symbols");
        }
        for (var x3 = 0;x3 < repeat_delta; x3++)
          code_lengths[symbol5 + x3] = repeat_code_len;
        symbol5 += repeat_delta;
        if (repeat_code_len !== 0) {
          space -= repeat_delta << 15 - repeat_code_len;
        }
      }
    }
    if (space !== 0) {
      throw new Error("[ReadHuffmanCodeLengths] space = " + space);
    }
    for (;symbol5 < num_symbols; symbol5++)
      code_lengths[symbol5] = 0;
  }
  function ReadHuffmanCode(alphabet_size, tables, table, br) {
    var table_size = 0;
    var simple_code_or_skip;
    var code_lengths = new Uint8Array(alphabet_size);
    br.readMoreInput();
    simple_code_or_skip = br.readBits(2);
    if (simple_code_or_skip === 1) {
      var i3;
      var max_bits_counter = alphabet_size - 1;
      var max_bits = 0;
      var symbols70 = new Int32Array(4);
      var num_symbols = br.readBits(2) + 1;
      while (max_bits_counter) {
        max_bits_counter >>= 1;
        ++max_bits;
      }
      for (i3 = 0;i3 < num_symbols; ++i3) {
        symbols70[i3] = br.readBits(max_bits) % alphabet_size;
        code_lengths[symbols70[i3]] = 2;
      }
      code_lengths[symbols70[0]] = 1;
      switch (num_symbols) {
        case 1:
          break;
        case 3:
          if (symbols70[0] === symbols70[1] || symbols70[0] === symbols70[2] || symbols70[1] === symbols70[2]) {
            throw new Error("[ReadHuffmanCode] invalid symbols");
          }
          break;
        case 2:
          if (symbols70[0] === symbols70[1]) {
            throw new Error("[ReadHuffmanCode] invalid symbols");
          }
          code_lengths[symbols70[1]] = 1;
          break;
        case 4:
          if (symbols70[0] === symbols70[1] || symbols70[0] === symbols70[2] || symbols70[0] === symbols70[3] || symbols70[1] === symbols70[2] || symbols70[1] === symbols70[3] || symbols70[2] === symbols70[3]) {
            throw new Error("[ReadHuffmanCode] invalid symbols");
          }
          if (br.readBits(1)) {
            code_lengths[symbols70[2]] = 3;
            code_lengths[symbols70[3]] = 3;
          } else {
            code_lengths[symbols70[0]] = 2;
          }
          break;
      }
    } else {
      var i3;
      var code_length_code_lengths = new Uint8Array(CODE_LENGTH_CODES);
      var space = 32;
      var num_codes = 0;
      var huff = [
        new HuffmanCode(2, 0),
        new HuffmanCode(2, 4),
        new HuffmanCode(2, 3),
        new HuffmanCode(3, 2),
        new HuffmanCode(2, 0),
        new HuffmanCode(2, 4),
        new HuffmanCode(2, 3),
        new HuffmanCode(4, 1),
        new HuffmanCode(2, 0),
        new HuffmanCode(2, 4),
        new HuffmanCode(2, 3),
        new HuffmanCode(3, 2),
        new HuffmanCode(2, 0),
        new HuffmanCode(2, 4),
        new HuffmanCode(2, 3),
        new HuffmanCode(4, 5)
      ];
      for (i3 = simple_code_or_skip;i3 < CODE_LENGTH_CODES && space > 0; ++i3) {
        var code_len_idx = kCodeLengthCodeOrder[i3];
        var p3 = 0;
        var v3;
        br.fillBitWindow();
        p3 += br.val_ >>> br.bit_pos_ & 15;
        br.bit_pos_ += huff[p3].bits;
        v3 = huff[p3].value;
        code_length_code_lengths[code_len_idx] = v3;
        if (v3 !== 0) {
          space -= 32 >> v3;
          ++num_codes;
        }
      }
      if (!(num_codes === 1 || space === 0))
        throw new Error("[ReadHuffmanCode] invalid num_codes or space");
      ReadHuffmanCodeLengths(code_length_code_lengths, alphabet_size, code_lengths, br);
    }
    table_size = BrotliBuildHuffmanTable(tables, table, HUFFMAN_TABLE_BITS, code_lengths, alphabet_size);
    if (table_size === 0) {
      throw new Error("[ReadHuffmanCode] BuildHuffmanTable failed: ");
    }
    return table_size;
  }
  function ReadBlockLength(table, index, br) {
    var code;
    var nbits;
    code = ReadSymbol(table, index, br);
    nbits = Prefix.kBlockLengthPrefixCode[code].nbits;
    return Prefix.kBlockLengthPrefixCode[code].offset + br.readBits(nbits);
  }
  function TranslateShortCodes(code, ringbuffer, index) {
    var val;
    if (code < NUM_DISTANCE_SHORT_CODES) {
      index += kDistanceShortCodeIndexOffset[code];
      index &= 3;
      val = ringbuffer[index] + kDistanceShortCodeValueOffset[code];
    } else {
      val = code - NUM_DISTANCE_SHORT_CODES + 1;
    }
    return val;
  }
  function MoveToFront(v3, index) {
    var value15 = v3[index];
    var i3 = index;
    for (;i3; --i3)
      v3[i3] = v3[i3 - 1];
    v3[0] = value15;
  }
  function InverseMoveToFrontTransform(v3, v_len) {
    var mtf = new Uint8Array(256);
    var i3;
    for (i3 = 0;i3 < 256; ++i3) {
      mtf[i3] = i3;
    }
    for (i3 = 0;i3 < v_len; ++i3) {
      var index = v3[i3];
      v3[i3] = mtf[index];
      if (index)
        MoveToFront(mtf, index);
    }
  }
  function HuffmanTreeGroup(alphabet_size, num_htrees) {
    this.alphabet_size = alphabet_size;
    this.num_htrees = num_htrees;
    this.codes = new Array(num_htrees + num_htrees * kMaxHuffmanTableSize[alphabet_size + 31 >>> 5]);
    this.htrees = new Uint32Array(num_htrees);
  }
  function DecodeContextMap(context_map_size, br) {
    var out = { num_htrees: null, context_map: null };
    var use_rle_for_zeros;
    var max_run_length_prefix = 0;
    var table;
    var i3;
    br.readMoreInput();
    var num_htrees = out.num_htrees = DecodeVarLenUint8(br) + 1;
    var context_map = out.context_map = new Uint8Array(context_map_size);
    if (num_htrees <= 1) {
      return out;
    }
    use_rle_for_zeros = br.readBits(1);
    if (use_rle_for_zeros) {
      max_run_length_prefix = br.readBits(4) + 1;
    }
    table = [];
    for (i3 = 0;i3 < HUFFMAN_MAX_TABLE_SIZE; i3++) {
      table[i3] = new HuffmanCode(0, 0);
    }
    ReadHuffmanCode(num_htrees + max_run_length_prefix, table, 0, br);
    for (i3 = 0;i3 < context_map_size; ) {
      var code;
      br.readMoreInput();
      code = ReadSymbol(table, 0, br);
      if (code === 0) {
        context_map[i3] = 0;
        ++i3;
      } else if (code <= max_run_length_prefix) {
        var reps = 1 + (1 << code) + br.readBits(code);
        while (--reps) {
          if (i3 >= context_map_size) {
            throw new Error("[DecodeContextMap] i >= context_map_size");
          }
          context_map[i3] = 0;
          ++i3;
        }
      } else {
        context_map[i3] = code - max_run_length_prefix;
        ++i3;
      }
    }
    if (br.readBits(1)) {
      InverseMoveToFrontTransform(context_map, context_map_size);
    }
    return out;
  }
  function DecodeBlockType(max_block_type, trees, tree_type, block_types, ringbuffers, indexes, br) {
    var ringbuffer = tree_type * 2;
    var index = tree_type;
    var type_code = ReadSymbol(trees, tree_type * HUFFMAN_MAX_TABLE_SIZE, br);
    var block_type;
    if (type_code === 0) {
      block_type = ringbuffers[ringbuffer + (indexes[index] & 1)];
    } else if (type_code === 1) {
      block_type = ringbuffers[ringbuffer + (indexes[index] - 1 & 1)] + 1;
    } else {
      block_type = type_code - 2;
    }
    if (block_type >= max_block_type) {
      block_type -= max_block_type;
    }
    block_types[tree_type] = block_type;
    ringbuffers[ringbuffer + (indexes[index] & 1)] = block_type;
    ++indexes[index];
  }
  function CopyUncompressedBlockToOutput(output, len, pos, ringbuffer, ringbuffer_mask, br) {
    var rb_size = ringbuffer_mask + 1;
    var rb_pos = pos & ringbuffer_mask;
    var br_pos = br.pos_ & BrotliBitReader.IBUF_MASK;
    var nbytes;
    if (len < 8 || br.bit_pos_ + (len << 3) < br.bit_end_pos_) {
      while (len-- > 0) {
        br.readMoreInput();
        ringbuffer[rb_pos++] = br.readBits(8);
        if (rb_pos === rb_size) {
          output.write(ringbuffer, rb_size);
          rb_pos = 0;
        }
      }
      return;
    }
    if (br.bit_end_pos_ < 32) {
      throw new Error("[CopyUncompressedBlockToOutput] br.bit_end_pos_ < 32");
    }
    while (br.bit_pos_ < 32) {
      ringbuffer[rb_pos] = br.val_ >>> br.bit_pos_;
      br.bit_pos_ += 8;
      ++rb_pos;
      --len;
    }
    nbytes = br.bit_end_pos_ - br.bit_pos_ >> 3;
    if (br_pos + nbytes > BrotliBitReader.IBUF_MASK) {
      var tail = BrotliBitReader.IBUF_MASK + 1 - br_pos;
      for (var x3 = 0;x3 < tail; x3++)
        ringbuffer[rb_pos + x3] = br.buf_[br_pos + x3];
      nbytes -= tail;
      rb_pos += tail;
      len -= tail;
      br_pos = 0;
    }
    for (var x3 = 0;x3 < nbytes; x3++)
      ringbuffer[rb_pos + x3] = br.buf_[br_pos + x3];
    rb_pos += nbytes;
    len -= nbytes;
    if (rb_pos >= rb_size) {
      output.write(ringbuffer, rb_size);
      rb_pos -= rb_size;
      for (var x3 = 0;x3 < rb_pos; x3++)
        ringbuffer[x3] = ringbuffer[rb_size + x3];
    }
    while (rb_pos + len >= rb_size) {
      nbytes = rb_size - rb_pos;
      if (br.input_.read(ringbuffer, rb_pos, nbytes) < nbytes) {
        throw new Error("[CopyUncompressedBlockToOutput] not enough bytes");
      }
      output.write(ringbuffer, rb_size);
      len -= nbytes;
      rb_pos = 0;
    }
    if (br.input_.read(ringbuffer, rb_pos, len) < len) {
      throw new Error("[CopyUncompressedBlockToOutput] not enough bytes");
    }
    br.reset();
  }
  function JumpToByteBoundary(br) {
    var new_bit_pos = br.bit_pos_ + 7 & ~7;
    var pad_bits = br.readBits(new_bit_pos - br.bit_pos_);
    return pad_bits == 0;
  }
  function BrotliDecompressedSize(buffer) {
    var input = new BrotliInput(buffer);
    var br = new BrotliBitReader(input);
    DecodeWindowBits(br);
    var out = DecodeMetaBlockLength(br);
    return out.meta_block_length;
  }
  function BrotliDecompressBuffer(buffer, output_size) {
    var input = new BrotliInput(buffer);
    if (output_size == null) {
      output_size = BrotliDecompressedSize(buffer);
    }
    var output_buffer = new Uint8Array(output_size);
    var output = new BrotliOutput(output_buffer);
    BrotliDecompress(input, output);
    if (output.pos < output.buffer.length) {
      output.buffer = output.buffer.subarray(0, output.pos);
    }
    return output.buffer;
  }
  function BrotliDecompress(input, output) {
    var i3;
    var pos = 0;
    var input_end = 0;
    var window_bits = 0;
    var max_backward_distance;
    var max_distance = 0;
    var ringbuffer_size;
    var ringbuffer_mask;
    var ringbuffer;
    var ringbuffer_end;
    var dist_rb = [16, 15, 11, 4];
    var dist_rb_idx = 0;
    var prev_byte1 = 0;
    var prev_byte2 = 0;
    var hgroup = [new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0)];
    var block_type_trees;
    var block_len_trees;
    var br;
    var kRingBufferWriteAheadSlack = 128 + BrotliBitReader.READ_SIZE;
    br = new BrotliBitReader(input);
    window_bits = DecodeWindowBits(br);
    max_backward_distance = (1 << window_bits) - 16;
    ringbuffer_size = 1 << window_bits;
    ringbuffer_mask = ringbuffer_size - 1;
    ringbuffer = new Uint8Array(ringbuffer_size + kRingBufferWriteAheadSlack + BrotliDictionary.maxDictionaryWordLength);
    ringbuffer_end = ringbuffer_size;
    block_type_trees = [];
    block_len_trees = [];
    for (var x3 = 0;x3 < 3 * HUFFMAN_MAX_TABLE_SIZE; x3++) {
      block_type_trees[x3] = new HuffmanCode(0, 0);
      block_len_trees[x3] = new HuffmanCode(0, 0);
    }
    while (!input_end) {
      var meta_block_remaining_len = 0;
      var is_uncompressed;
      var block_length = [1 << 28, 1 << 28, 1 << 28];
      var block_type = [0];
      var num_block_types = [1, 1, 1];
      var block_type_rb = [0, 1, 0, 1, 0, 1];
      var block_type_rb_index = [0];
      var distance_postfix_bits;
      var num_direct_distance_codes;
      var distance_postfix_mask;
      var num_distance_codes;
      var context_map = null;
      var context_modes = null;
      var num_literal_htrees;
      var dist_context_map = null;
      var num_dist_htrees;
      var context_offset = 0;
      var context_map_slice = null;
      var literal_htree_index = 0;
      var dist_context_offset = 0;
      var dist_context_map_slice = null;
      var dist_htree_index = 0;
      var context_lookup_offset1 = 0;
      var context_lookup_offset2 = 0;
      var context_mode;
      var htree_command;
      for (i3 = 0;i3 < 3; ++i3) {
        hgroup[i3].codes = null;
        hgroup[i3].htrees = null;
      }
      br.readMoreInput();
      var _out = DecodeMetaBlockLength(br);
      meta_block_remaining_len = _out.meta_block_length;
      if (pos + meta_block_remaining_len > output.buffer.length) {
        var tmp = new Uint8Array(pos + meta_block_remaining_len);
        tmp.set(output.buffer);
        output.buffer = tmp;
      }
      input_end = _out.input_end;
      is_uncompressed = _out.is_uncompressed;
      if (_out.is_metadata) {
        JumpToByteBoundary(br);
        for (;meta_block_remaining_len > 0; --meta_block_remaining_len) {
          br.readMoreInput();
          br.readBits(8);
        }
        continue;
      }
      if (meta_block_remaining_len === 0) {
        continue;
      }
      if (is_uncompressed) {
        br.bit_pos_ = br.bit_pos_ + 7 & ~7;
        CopyUncompressedBlockToOutput(output, meta_block_remaining_len, pos, ringbuffer, ringbuffer_mask, br);
        pos += meta_block_remaining_len;
        continue;
      }
      for (i3 = 0;i3 < 3; ++i3) {
        num_block_types[i3] = DecodeVarLenUint8(br) + 1;
        if (num_block_types[i3] >= 2) {
          ReadHuffmanCode(num_block_types[i3] + 2, block_type_trees, i3 * HUFFMAN_MAX_TABLE_SIZE, br);
          ReadHuffmanCode(kNumBlockLengthCodes, block_len_trees, i3 * HUFFMAN_MAX_TABLE_SIZE, br);
          block_length[i3] = ReadBlockLength(block_len_trees, i3 * HUFFMAN_MAX_TABLE_SIZE, br);
          block_type_rb_index[i3] = 1;
        }
      }
      br.readMoreInput();
      distance_postfix_bits = br.readBits(2);
      num_direct_distance_codes = NUM_DISTANCE_SHORT_CODES + (br.readBits(4) << distance_postfix_bits);
      distance_postfix_mask = (1 << distance_postfix_bits) - 1;
      num_distance_codes = num_direct_distance_codes + (48 << distance_postfix_bits);
      context_modes = new Uint8Array(num_block_types[0]);
      for (i3 = 0;i3 < num_block_types[0]; ++i3) {
        br.readMoreInput();
        context_modes[i3] = br.readBits(2) << 1;
      }
      var _o1 = DecodeContextMap(num_block_types[0] << kLiteralContextBits, br);
      num_literal_htrees = _o1.num_htrees;
      context_map = _o1.context_map;
      var _o2 = DecodeContextMap(num_block_types[2] << kDistanceContextBits, br);
      num_dist_htrees = _o2.num_htrees;
      dist_context_map = _o2.context_map;
      hgroup[0] = new HuffmanTreeGroup(kNumLiteralCodes, num_literal_htrees);
      hgroup[1] = new HuffmanTreeGroup(kNumInsertAndCopyCodes, num_block_types[1]);
      hgroup[2] = new HuffmanTreeGroup(num_distance_codes, num_dist_htrees);
      for (i3 = 0;i3 < 3; ++i3) {
        hgroup[i3].decode(br);
      }
      context_map_slice = 0;
      dist_context_map_slice = 0;
      context_mode = context_modes[block_type[0]];
      context_lookup_offset1 = Context.lookupOffsets[context_mode];
      context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
      htree_command = hgroup[1].htrees[0];
      while (meta_block_remaining_len > 0) {
        var cmd_code;
        var range_idx;
        var insert_code;
        var copy_code;
        var insert_length;
        var copy_length;
        var distance_code;
        var distance;
        var context;
        var j;
        var copy_dst;
        br.readMoreInput();
        if (block_length[1] === 0) {
          DecodeBlockType(num_block_types[1], block_type_trees, 1, block_type, block_type_rb, block_type_rb_index, br);
          block_length[1] = ReadBlockLength(block_len_trees, HUFFMAN_MAX_TABLE_SIZE, br);
          htree_command = hgroup[1].htrees[block_type[1]];
        }
        --block_length[1];
        cmd_code = ReadSymbol(hgroup[1].codes, htree_command, br);
        range_idx = cmd_code >> 6;
        if (range_idx >= 2) {
          range_idx -= 2;
          distance_code = -1;
        } else {
          distance_code = 0;
        }
        insert_code = Prefix.kInsertRangeLut[range_idx] + (cmd_code >> 3 & 7);
        copy_code = Prefix.kCopyRangeLut[range_idx] + (cmd_code & 7);
        insert_length = Prefix.kInsertLengthPrefixCode[insert_code].offset + br.readBits(Prefix.kInsertLengthPrefixCode[insert_code].nbits);
        copy_length = Prefix.kCopyLengthPrefixCode[copy_code].offset + br.readBits(Prefix.kCopyLengthPrefixCode[copy_code].nbits);
        prev_byte1 = ringbuffer[pos - 1 & ringbuffer_mask];
        prev_byte2 = ringbuffer[pos - 2 & ringbuffer_mask];
        for (j = 0;j < insert_length; ++j) {
          br.readMoreInput();
          if (block_length[0] === 0) {
            DecodeBlockType(num_block_types[0], block_type_trees, 0, block_type, block_type_rb, block_type_rb_index, br);
            block_length[0] = ReadBlockLength(block_len_trees, 0, br);
            context_offset = block_type[0] << kLiteralContextBits;
            context_map_slice = context_offset;
            context_mode = context_modes[block_type[0]];
            context_lookup_offset1 = Context.lookupOffsets[context_mode];
            context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
          }
          context = Context.lookup[context_lookup_offset1 + prev_byte1] | Context.lookup[context_lookup_offset2 + prev_byte2];
          literal_htree_index = context_map[context_map_slice + context];
          --block_length[0];
          prev_byte2 = prev_byte1;
          prev_byte1 = ReadSymbol(hgroup[0].codes, hgroup[0].htrees[literal_htree_index], br);
          ringbuffer[pos & ringbuffer_mask] = prev_byte1;
          if ((pos & ringbuffer_mask) === ringbuffer_mask) {
            output.write(ringbuffer, ringbuffer_size);
          }
          ++pos;
        }
        meta_block_remaining_len -= insert_length;
        if (meta_block_remaining_len <= 0)
          break;
        if (distance_code < 0) {
          var context;
          br.readMoreInput();
          if (block_length[2] === 0) {
            DecodeBlockType(num_block_types[2], block_type_trees, 2, block_type, block_type_rb, block_type_rb_index, br);
            block_length[2] = ReadBlockLength(block_len_trees, 2 * HUFFMAN_MAX_TABLE_SIZE, br);
            dist_context_offset = block_type[2] << kDistanceContextBits;
            dist_context_map_slice = dist_context_offset;
          }
          --block_length[2];
          context = (copy_length > 4 ? 3 : copy_length - 2) & 255;
          dist_htree_index = dist_context_map[dist_context_map_slice + context];
          distance_code = ReadSymbol(hgroup[2].codes, hgroup[2].htrees[dist_htree_index], br);
          if (distance_code >= num_direct_distance_codes) {
            var nbits;
            var postfix;
            var offset;
            distance_code -= num_direct_distance_codes;
            postfix = distance_code & distance_postfix_mask;
            distance_code >>= distance_postfix_bits;
            nbits = (distance_code >> 1) + 1;
            offset = (2 + (distance_code & 1) << nbits) - 4;
            distance_code = num_direct_distance_codes + (offset + br.readBits(nbits) << distance_postfix_bits) + postfix;
          }
        }
        distance = TranslateShortCodes(distance_code, dist_rb, dist_rb_idx);
        if (distance < 0) {
          throw new Error("[BrotliDecompress] invalid distance");
        }
        if (pos < max_backward_distance && max_distance !== max_backward_distance) {
          max_distance = pos;
        } else {
          max_distance = max_backward_distance;
        }
        copy_dst = pos & ringbuffer_mask;
        if (distance > max_distance) {
          if (copy_length >= BrotliDictionary.minDictionaryWordLength && copy_length <= BrotliDictionary.maxDictionaryWordLength) {
            var offset = BrotliDictionary.offsetsByLength[copy_length];
            var word_id = distance - max_distance - 1;
            var shift = BrotliDictionary.sizeBitsByLength[copy_length];
            var mask = (1 << shift) - 1;
            var word_idx = word_id & mask;
            var transform_idx = word_id >> shift;
            offset += word_idx * copy_length;
            if (transform_idx < Transform2.kNumTransforms) {
              var len = Transform2.transformDictionaryWord(ringbuffer, copy_dst, offset, copy_length, transform_idx);
              copy_dst += len;
              pos += len;
              meta_block_remaining_len -= len;
              if (copy_dst >= ringbuffer_end) {
                output.write(ringbuffer, ringbuffer_size);
                for (var _x = 0;_x < copy_dst - ringbuffer_end; _x++)
                  ringbuffer[_x] = ringbuffer[ringbuffer_end + _x];
              }
            } else {
              throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
            }
          } else {
            throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
          }
        } else {
          if (distance_code > 0) {
            dist_rb[dist_rb_idx & 3] = distance;
            ++dist_rb_idx;
          }
          if (copy_length > meta_block_remaining_len) {
            throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
          }
          for (j = 0;j < copy_length; ++j) {
            ringbuffer[pos & ringbuffer_mask] = ringbuffer[pos - distance & ringbuffer_mask];
            if ((pos & ringbuffer_mask) === ringbuffer_mask) {
              output.write(ringbuffer, ringbuffer_size);
            }
            ++pos;
            --meta_block_remaining_len;
          }
        }
        prev_byte1 = ringbuffer[pos - 1 & ringbuffer_mask];
        prev_byte2 = ringbuffer[pos - 2 & ringbuffer_mask];
      }
      pos &= 1073741823;
    }
    output.write(ringbuffer, pos & ringbuffer_mask);
  }
  var BrotliInput = require_streams2().BrotliInput;
  var BrotliOutput = require_streams2().BrotliOutput;
  var BrotliBitReader = require_bit_reader();
  var BrotliDictionary = require_dictionary();
  var HuffmanCode = require_huffman().HuffmanCode;
  var BrotliBuildHuffmanTable = require_huffman().BrotliBuildHuffmanTable;
  var Context = require_context();
  var Prefix = require_prefix();
  var Transform2 = require_transform();
  var kDefaultCodeLength = 8;
  var kCodeLengthRepeatCode = 16;
  var kNumLiteralCodes = 256;
  var kNumInsertAndCopyCodes = 704;
  var kNumBlockLengthCodes = 26;
  var kLiteralContextBits = 6;
  var kDistanceContextBits = 2;
  var HUFFMAN_TABLE_BITS = 8;
  var HUFFMAN_TABLE_MASK = 255;
  var HUFFMAN_MAX_TABLE_SIZE = 1080;
  var CODE_LENGTH_CODES = 18;
  var kCodeLengthCodeOrder = new Uint8Array([
    1,
    2,
    3,
    4,
    0,
    5,
    17,
    6,
    16,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15
  ]);
  var NUM_DISTANCE_SHORT_CODES = 16;
  var kDistanceShortCodeIndexOffset = new Uint8Array([
    3,
    2,
    1,
    0,
    3,
    3,
    3,
    3,
    3,
    3,
    2,
    2,
    2,
    2,
    2,
    2
  ]);
  var kDistanceShortCodeValueOffset = new Int8Array([
    0,
    0,
    0,
    0,
    -1,
    1,
    -2,
    2,
    -3,
    3,
    -1,
    1,
    -2,
    2,
    -3,
    3
  ]);
  var kMaxHuffmanTableSize = new Uint16Array([
    256,
    402,
    436,
    468,
    500,
    534,
    566,
    598,
    630,
    662,
    694,
    726,
    758,
    790,
    822,
    854,
    886,
    920,
    952,
    984,
    1016,
    1048,
    1080
  ]);
  HuffmanTreeGroup.prototype.decode = function(br) {
    var i3;
    var table_size;
    var next = 0;
    for (i3 = 0;i3 < this.num_htrees; ++i3) {
      this.htrees[i3] = next;
      table_size = ReadHuffmanCode(this.alphabet_size, this.codes, next, br);
      next += table_size;
    }
  };
  exports.BrotliDecompressedSize = BrotliDecompressedSize;
  exports.BrotliDecompressBuffer = BrotliDecompressBuffer;
  exports.BrotliDecompress = BrotliDecompress;
  BrotliDictionary.init();
});

// node_modules/brotli/decompress.js
var require_decompress = __commonJS((exports, module) => {
  module.exports = require_decode().BrotliDecompressBuffer;
});

// node_modules/base64-js/lib/b64.js
var require_b64 = __commonJS((exports) => {
  var lookup = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  (function(exports2) {
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var PLUS = "+".charCodeAt(0);
    var SLASH = "/".charCodeAt(0);
    var NUMBER = "0".charCodeAt(0);
    var LOWER = "a".charCodeAt(0);
    var UPPER = "A".charCodeAt(0);
    var PLUS_URL_SAFE = "-".charCodeAt(0);
    var SLASH_URL_SAFE = "_".charCodeAt(0);
    function decode2(elt) {
      var code = elt.charCodeAt(0);
      if (code === PLUS || code === PLUS_URL_SAFE)
        return 62;
      if (code === SLASH || code === SLASH_URL_SAFE)
        return 63;
      if (code < NUMBER)
        return -1;
      if (code < NUMBER + 10)
        return code - NUMBER + 26 + 26;
      if (code < UPPER + 26)
        return code - UPPER;
      if (code < LOWER + 26)
        return code - LOWER + 26;
    }
    function b64ToByteArray(b64) {
      var i3, j, l, tmp, placeHolders, arr;
      if (b64.length % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var len = b64.length;
      placeHolders = b64.charAt(len - 2) === "=" ? 2 : b64.charAt(len - 1) === "=" ? 1 : 0;
      arr = new Arr(b64.length * 3 / 4 - placeHolders);
      l = placeHolders > 0 ? b64.length - 4 : b64.length;
      var L = 0;
      function push(v3) {
        arr[L++] = v3;
      }
      for (i3 = 0, j = 0;i3 < l; i3 += 4, j += 3) {
        tmp = decode2(b64.charAt(i3)) << 18 | decode2(b64.charAt(i3 + 1)) << 12 | decode2(b64.charAt(i3 + 2)) << 6 | decode2(b64.charAt(i3 + 3));
        push((tmp & 16711680) >> 16);
        push((tmp & 65280) >> 8);
        push(tmp & 255);
      }
      if (placeHolders === 2) {
        tmp = decode2(b64.charAt(i3)) << 2 | decode2(b64.charAt(i3 + 1)) >> 4;
        push(tmp & 255);
      } else if (placeHolders === 1) {
        tmp = decode2(b64.charAt(i3)) << 10 | decode2(b64.charAt(i3 + 1)) << 4 | decode2(b64.charAt(i3 + 2)) >> 2;
        push(tmp >> 8 & 255);
        push(tmp & 255);
      }
      return arr;
    }
    function uint8ToBase64(uint8) {
      var i3, extraBytes = uint8.length % 3, output = "", temp, length;
      function encode2(num) {
        return lookup.charAt(num);
      }
      function tripletToBase64(num) {
        return encode2(num >> 18 & 63) + encode2(num >> 12 & 63) + encode2(num >> 6 & 63) + encode2(num & 63);
      }
      for (i3 = 0, length = uint8.length - extraBytes;i3 < length; i3 += 3) {
        temp = (uint8[i3] << 16) + (uint8[i3 + 1] << 8) + uint8[i3 + 2];
        output += tripletToBase64(temp);
      }
      switch (extraBytes) {
        case 1:
          temp = uint8[uint8.length - 1];
          output += encode2(temp >> 2);
          output += encode2(temp << 4 & 63);
          output += "==";
          break;
        case 2:
          temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];
          output += encode2(temp >> 10);
          output += encode2(temp >> 4 & 63);
          output += encode2(temp << 2 & 63);
          output += "=";
          break;
      }
      return output;
    }
    exports2.toByteArray = b64ToByteArray;
    exports2.fromByteArray = uint8ToBase64;
  })(typeof exports === "undefined" ? exports.base64js = {} : exports);
});

// node_modules/jpeg-exif/lib/tags.json
var require_tags = __commonJS((exports, module) => {
  module.exports = {
    ifd: {
      "010e": "ImageDescription",
      "010f": "Make",
      "011a": "XResolution",
      "011b": "YResolution",
      "011c": "PlanarConfiguration",
      "012d": "TransferFunction",
      "013b": "Artist",
      "013e": "WhitePoint",
      "013f": "PrimaryChromaticities",
      "0100": "ImageWidth",
      "0101": "ImageHeight",
      "0102": "BitsPerSample",
      "0103": "Compression",
      "0106": "PhotometricInterpretation",
      "0110": "Model",
      "0111": "StripOffsets",
      "0112": "Orientation",
      "0115": "SamplesPerPixel",
      "0116": "RowsPerStrip",
      "0117": "StripByteCounts",
      "0128": "ResolutionUnit",
      "0131": "Software",
      "0132": "DateTime",
      "0201": "JPEGInterchangeFormat",
      "0202": "JPEGInterchangeFormatLength",
      "0211": "YCbCrCoefficients",
      "0212": "YCbCrSubSampling",
      "0213": "YCbCrPositioning",
      "0214": "ReferenceBlackWhite",
      "829a": "ExposureTime",
      "829d": "FNumber",
      "920a": "FocalLength",
      "927c": "MakerNote",
      "8298": "Copyright",
      "8769": "ExifIFDPointer",
      "8822": "ExposureProgram",
      "8824": "SpectralSensitivity",
      "8825": "GPSInfoIFDPointer",
      "8827": "PhotographicSensitivity",
      "8828": "OECF",
      "8830": "SensitivityType",
      "8831": "StandardOutputSensitivity",
      "8832": "RecommendedExposureIndex",
      "8833": "ISOSpeed",
      "8834": "ISOSpeedLatitudeyyy",
      "8835": "ISOSpeedLatitudezzz",
      "9000": "ExifVersion",
      "9003": "DateTimeOriginal",
      "9004": "DateTimeDigitized",
      "9101": "ComponentsConfiguration",
      "9102": "CompressedBitsPerPixel",
      "9201": "ShutterSpeedValue",
      "9202": "ApertureValue",
      "9203": "BrightnessValue",
      "9204": "ExposureBiasValue",
      "9205": "MaxApertureValue",
      "9206": "SubjectDistance",
      "9207": "MeteringMode",
      "9208": "LightSource",
      "9209": "Flash",
      "9214": "SubjectArea",
      "9286": "UserComment",
      "9290": "SubSecTime",
      "9291": "SubSecTimeOriginal",
      "9292": "SubSecTimeDigitized",
      a000: "FlashpixVersion",
      a001: "ColorSpace",
      a002: "PixelXDimension",
      a003: "PixelYDimension",
      a004: "RelatedSoundFile",
      a005: "InteroperabilityIFDPointer",
      a20b: "FlashEnergy",
      a20c: "SpatialFrequencyResponse",
      a20e: "FocalPlaneXResolution",
      a20f: "FocalPlaneYResolution",
      a40a: "Sharpness",
      a40b: "DeviceSettingDescription",
      a40c: "SubjectDistanceRange",
      a210: "FocalPlaneResolutionUnit",
      a214: "SubjectLocation",
      a215: "ExposureIndex",
      a217: "SensingMethod",
      a300: "FileSource",
      a301: "SceneType",
      a302: "CFAPattern",
      a401: "CustomRendered",
      a402: "ExposureMode",
      a403: "WhiteBalance",
      a404: "DigitalZoomRatio",
      a405: "FocalLengthIn35mmFilm",
      a406: "SceneCaptureType",
      a407: "GainControl",
      a408: "Contrast",
      a409: "Saturation",
      a420: "ImageUniqueID",
      a430: "CameraOwnerName",
      a431: "BodySerialNumber",
      a432: "LensSpecification",
      a433: "LensMake",
      a434: "LensModel",
      a435: "LensSerialNumber",
      a500: "Gamma"
    },
    gps: {
      "0000": "GPSVersionID",
      "0001": "GPSLatitudeRef",
      "0002": "GPSLatitude",
      "0003": "GPSLongitudeRef",
      "0004": "GPSLongitude",
      "0005": "GPSAltitudeRef",
      "0006": "GPSAltitude",
      "0007": "GPSTimeStamp",
      "0008": "GPSSatellites",
      "0009": "GPSStatus",
      "000a": "GPSMeasureMode",
      "000b": "GPSDOP",
      "000c": "GPSSpeedRef",
      "000d": "GPSSpeed",
      "000e": "GPSTrackRef",
      "000f": "GPSTrack",
      "0010": "GPSImgDirectionRef",
      "0011": "GPSImgDirection",
      "0012": "GPSMapDatum",
      "0013": "GPSDestLatitudeRef",
      "0014": "GPSDestLatitude",
      "0015": "GPSDestLongitudeRef",
      "0016": "GPSDestLongitude",
      "0017": "GPSDestBearingRef",
      "0018": "GPSDestBearing",
      "0019": "GPSDestDistanceRef",
      "001a": "GPSDestDistance",
      "001b": "GPSProcessingMethod",
      "001c": "GPSAreaInformation",
      "001d": "GPSDateStamp",
      "001e": "GPSDifferential",
      "001f": "GPSHPositioningError"
    }
  };
});

// node_modules/jpeg-exif/lib/index.js
var require_lib2 = __commonJS((exports) => {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var _fs = import.meta.require("fs");
  var _fs2 = _interopRequireDefault(_fs);
  var tags = require_tags();
  var bytes = [0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8];
  var SOIMarkerLength = 2;
  var JPEGSOIMarker = 65496;
  var TIFFINTEL = 18761;
  var TIFFMOTOROLA = 19789;
  var APPMarkerLength = 2;
  var APPMarkerBegin = 65504;
  var APPMarkerEnd = 65519;
  var data = undefined;
  var isValid = function isValid(buffer) {
    try {
      var SOIMarker = buffer.readUInt16BE(0);
      return SOIMarker === JPEGSOIMarker;
    } catch (e) {
      throw new Error("Unsupport file format.");
    }
  };
  var isTiff = function isTiff(buffer) {
    try {
      var SOIMarker = buffer.readUInt16BE(0);
      return SOIMarker === TIFFINTEL || SOIMarker === TIFFMOTOROLA;
    } catch (e) {
      throw new Error("Unsupport file format.");
    }
  };
  var checkAPPn = function checkAPPn(buffer) {
    try {
      var APPMarkerTag = buffer.readUInt16BE(0);
      var isInRange = APPMarkerTag >= APPMarkerBegin && APPMarkerTag <= APPMarkerEnd;
      return isInRange ? APPMarkerTag - APPMarkerBegin : false;
    } catch (e) {
      throw new Error("Invalid APP Tag.");
    }
  };
  var IFDHandler = function IFDHandler(buffer, tagCollection, order, offset) {
    var entriesNumber = order ? buffer.readUInt16BE(0) : buffer.readUInt16LE(0);
    if (entriesNumber === 0) {
      return {};
    }
    var entriesNumberLength = 2;
    var entries = buffer.slice(entriesNumberLength);
    var entryLength = 12;
    var exif = {};
    var entryCount = 0;
    for (entryCount;entryCount < entriesNumber; entryCount += 1) {
      var entryBegin = entryCount * entryLength;
      var entry = entries.slice(entryBegin, entryBegin + entryLength);
      var tagBegin = 0;
      var tagLength = 2;
      var dataFormatBegin = tagBegin + tagLength;
      var dataFormatLength = 2;
      var componentsBegin = dataFormatBegin + dataFormatLength;
      var componentsNumberLength = 4;
      var dataValueBegin = componentsBegin + componentsNumberLength;
      var dataValueLength = 4;
      var tagAddress = entry.slice(tagBegin, dataFormatBegin);
      var tagNumber = order ? tagAddress.toString("hex") : tagAddress.reverse().toString("hex");
      var tagName = tagCollection[tagNumber];
      var bigDataFormat = entry.readUInt16BE(dataFormatBegin);
      var littleDataFormat = entry.readUInt16LE(dataFormatBegin);
      var dataFormat = order ? bigDataFormat : littleDataFormat;
      var componentsByte = bytes[dataFormat];
      var bigComponentsNumber = entry.readUInt32BE(componentsBegin);
      var littleComponentNumber = entry.readUInt32LE(componentsBegin);
      var componentsNumber = order ? bigComponentsNumber : littleComponentNumber;
      var dataLength = componentsNumber * componentsByte;
      var dataValue = entry.slice(dataValueBegin, dataValueBegin + dataValueLength);
      if (dataLength > 4) {
        var dataOffset = (order ? dataValue.readUInt32BE(0) : dataValue.readUInt32LE(0)) - offset;
        dataValue = buffer.slice(dataOffset, dataOffset + dataLength);
      }
      var tagValue = undefined;
      if (tagName) {
        switch (dataFormat) {
          case 1:
            tagValue = dataValue.readUInt8(0);
            break;
          case 2:
            tagValue = dataValue.toString("ascii").replace(/\0+$/, "");
            break;
          case 3:
            tagValue = order ? dataValue.readUInt16BE(0) : dataValue.readUInt16LE(0);
            break;
          case 4:
            tagValue = order ? dataValue.readUInt32BE(0) : dataValue.readUInt32LE(0);
            break;
          case 5:
            tagValue = [];
            for (var i3 = 0;i3 < dataValue.length; i3 += 8) {
              var bigTagValue = dataValue.readUInt32BE(i3) / dataValue.readUInt32BE(i3 + 4);
              var littleTagValue = dataValue.readUInt32LE(i3) / dataValue.readUInt32LE(i3 + 4);
              tagValue.push(order ? bigTagValue : littleTagValue);
            }
            break;
          case 7:
            switch (tagName) {
              case "ExifVersion":
                tagValue = dataValue.toString();
                break;
              case "FlashPixVersion":
                tagValue = dataValue.toString();
                break;
              case "SceneType":
                tagValue = dataValue.readUInt8(0);
                break;
              default:
                tagValue = "0x" + dataValue.toString("hex", 0, 15);
                break;
            }
            break;
          case 10: {
            var bigOrder = dataValue.readInt32BE(0) / dataValue.readInt32BE(4);
            var littleOrder = dataValue.readInt32LE(0) / dataValue.readInt32LE(4);
            tagValue = order ? bigOrder : littleOrder;
            break;
          }
          default:
            tagValue = "0x" + dataValue.toString("hex");
            break;
        }
        exif[tagName] = tagValue;
      }
    }
    return exif;
  };
  var EXIFHandler = function EXIFHandler(buf) {
    var pad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var buffer = buf;
    if (pad) {
      buffer = buf.slice(APPMarkerLength);
      var length = buffer.readUInt16BE(0);
      buffer = buffer.slice(0, length);
      var lengthLength = 2;
      buffer = buffer.slice(lengthLength);
      var identifierLength = 5;
      buffer = buffer.slice(identifierLength);
      var padLength = 1;
      buffer = buffer.slice(padLength);
    }
    var byteOrderLength = 2;
    var byteOrder = buffer.toString("ascii", 0, byteOrderLength) === "MM";
    var fortyTwoLength = 2;
    var fortyTwoEnd = byteOrderLength + fortyTwoLength;
    var big42 = buffer.readUInt32BE(fortyTwoEnd);
    var little42 = buffer.readUInt32LE(fortyTwoEnd);
    var offsetOfIFD = byteOrder ? big42 : little42;
    buffer = buffer.slice(offsetOfIFD);
    if (buffer.length > 0) {
      data = IFDHandler(buffer, tags.ifd, byteOrder, offsetOfIFD);
      if (data.ExifIFDPointer) {
        buffer = buffer.slice(data.ExifIFDPointer - offsetOfIFD);
        data.SubExif = IFDHandler(buffer, tags.ifd, byteOrder, data.ExifIFDPointer);
      }
      if (data.GPSInfoIFDPointer) {
        var gps = data.GPSInfoIFDPointer;
        buffer = buffer.slice(data.ExifIFDPointer ? gps - data.ExifIFDPointer : gps - offsetOfIFD);
        data.GPSInfo = IFDHandler(buffer, tags.gps, byteOrder, gps);
      }
    }
  };
  var APPnHandler = function APPnHandler(buffer) {
    var APPMarkerTag = checkAPPn(buffer);
    if (APPMarkerTag !== false) {
      var length = buffer.readUInt16BE(APPMarkerLength);
      switch (APPMarkerTag) {
        case 1:
          EXIFHandler(buffer);
          break;
        default:
          APPnHandler(buffer.slice(APPMarkerLength + length));
          break;
      }
    }
  };
  var fromBuffer = function fromBuffer(buffer) {
    if (!buffer) {
      throw new Error("buffer not found");
    }
    data = undefined;
    if (isValid(buffer)) {
      buffer = buffer.slice(SOIMarkerLength);
      data = {};
      APPnHandler(buffer);
    } else if (isTiff(buffer)) {
      data = {};
      EXIFHandler(buffer, false);
    }
    return data;
  };
  var sync = function sync(file) {
    if (!file) {
      throw new Error("File not found");
    }
    var buffer = _fs2.default.readFileSync(file);
    return fromBuffer(buffer);
  };
  var async = function async(file, callback) {
    data = undefined;
    new Promise(function(resolve2, reject) {
      if (!file) {
        reject(new Error("\u2753File not found."));
      }
      _fs2.default.readFile(file, function(err, buffer) {
        if (err) {
          reject(err);
        } else {
          try {
            if (isValid(buffer)) {
              var buf = buffer.slice(SOIMarkerLength);
              data = {};
              APPnHandler(buf);
              resolve2(data);
            } else if (isTiff(buffer)) {
              data = {};
              EXIFHandler(buffer, false);
              resolve2(data);
            } else {
              reject(new Error("\uD83D\uDE31Unsupport file type."));
            }
          } catch (e) {
            reject(e);
          }
        }
      });
    }, function(error22) {
      callback(error22, undefined);
    }).then(function(d3) {
      callback(undefined, d3);
    }).catch(function(error22) {
      callback(error22, undefined);
    });
  };
  exports.fromBuffer = fromBuffer;
  exports.parse = async;
  exports.parseSync = sync;
});

// node_modules/png-js/png-node.js
var require_png_node = __commonJS((exports, module) => {
  var fs = import.meta.require("fs");
  var zlib = import.meta.require("zlib");
  module.exports = class PNG {
    static decode(path2, fn) {
      return fs.readFile(path2, function(err, file) {
        const png = new PNG(file);
        return png.decode((pixels) => fn(pixels));
      });
    }
    static load(path2) {
      const file = fs.readFileSync(path2);
      return new PNG(file);
    }
    constructor(data) {
      let i3;
      this.data = data;
      this.pos = 8;
      this.palette = [];
      this.imgData = [];
      this.transparency = {};
      this.text = {};
      while (true) {
        const chunkSize = this.readUInt32();
        let section = "";
        for (i3 = 0;i3 < 4; i3++) {
          section += String.fromCharCode(this.data[this.pos++]);
        }
        switch (section) {
          case "IHDR":
            this.width = this.readUInt32();
            this.height = this.readUInt32();
            this.bits = this.data[this.pos++];
            this.colorType = this.data[this.pos++];
            this.compressionMethod = this.data[this.pos++];
            this.filterMethod = this.data[this.pos++];
            this.interlaceMethod = this.data[this.pos++];
            break;
          case "PLTE":
            this.palette = this.read(chunkSize);
            break;
          case "IDAT":
            for (i3 = 0;i3 < chunkSize; i3++) {
              this.imgData.push(this.data[this.pos++]);
            }
            break;
          case "tRNS":
            this.transparency = {};
            switch (this.colorType) {
              case 3:
                this.transparency.indexed = this.read(chunkSize);
                var short = 255 - this.transparency.indexed.length;
                if (short > 0) {
                  for (i3 = 0;i3 < short; i3++) {
                    this.transparency.indexed.push(255);
                  }
                }
                break;
              case 0:
                this.transparency.grayscale = this.read(chunkSize)[0];
                break;
              case 2:
                this.transparency.rgb = this.read(chunkSize);
                break;
            }
            break;
          case "tEXt":
            var text = this.read(chunkSize);
            var index = text.indexOf(0);
            var key = String.fromCharCode.apply(String, text.slice(0, index));
            this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));
            break;
          case "IEND":
            switch (this.colorType) {
              case 0:
              case 3:
              case 4:
                this.colors = 1;
                break;
              case 2:
              case 6:
                this.colors = 3;
                break;
            }
            this.hasAlphaChannel = [4, 6].includes(this.colorType);
            var colors = this.colors + (this.hasAlphaChannel ? 1 : 0);
            this.pixelBitlength = this.bits * colors;
            switch (this.colors) {
              case 1:
                this.colorSpace = "DeviceGray";
                break;
              case 3:
                this.colorSpace = "DeviceRGB";
                break;
            }
            this.imgData = new Buffer(this.imgData);
            return;
            break;
          default:
            this.pos += chunkSize;
        }
        this.pos += 4;
        if (this.pos > this.data.length) {
          throw new Error("Incomplete or corrupt PNG file");
        }
      }
    }
    read(bytes) {
      const result = new Array(bytes);
      for (let i3 = 0;i3 < bytes; i3++) {
        result[i3] = this.data[this.pos++];
      }
      return result;
    }
    readUInt32() {
      const b12 = this.data[this.pos++] << 24;
      const b22 = this.data[this.pos++] << 16;
      const b3 = this.data[this.pos++] << 8;
      const b4 = this.data[this.pos++];
      return b12 | b22 | b3 | b4;
    }
    readUInt16() {
      const b12 = this.data[this.pos++] << 8;
      const b22 = this.data[this.pos++];
      return b12 | b22;
    }
    decodePixels(fn) {
      return zlib.inflate(this.imgData, (err, data) => {
        if (err) {
          throw err;
        }
        const { width, height } = this;
        const pixelBytes = this.pixelBitlength / 8;
        const pixels = new Buffer(width * height * pixelBytes);
        const { length } = data;
        let pos = 0;
        function pass(x02, y02, dx, dy, singlePass = false) {
          const w = Math.ceil((width - x02) / dx);
          const h = Math.ceil((height - y02) / dy);
          const scanlineLength = pixelBytes * w;
          const buffer = singlePass ? pixels : new Buffer(scanlineLength * h);
          let row = 0;
          let c3 = 0;
          while (row < h && pos < length) {
            var byte, col, i3, left, upper;
            switch (data[pos++]) {
              case 0:
                for (i3 = 0;i3 < scanlineLength; i3++) {
                  buffer[c3++] = data[pos++];
                }
                break;
              case 1:
                for (i3 = 0;i3 < scanlineLength; i3++) {
                  byte = data[pos++];
                  left = i3 < pixelBytes ? 0 : buffer[c3 - pixelBytes];
                  buffer[c3++] = (byte + left) % 256;
                }
                break;
              case 2:
                for (i3 = 0;i3 < scanlineLength; i3++) {
                  byte = data[pos++];
                  col = (i3 - i3 % pixelBytes) / pixelBytes;
                  upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i3 % pixelBytes];
                  buffer[c3++] = (upper + byte) % 256;
                }
                break;
              case 3:
                for (i3 = 0;i3 < scanlineLength; i3++) {
                  byte = data[pos++];
                  col = (i3 - i3 % pixelBytes) / pixelBytes;
                  left = i3 < pixelBytes ? 0 : buffer[c3 - pixelBytes];
                  upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i3 % pixelBytes];
                  buffer[c3++] = (byte + Math.floor((left + upper) / 2)) % 256;
                }
                break;
              case 4:
                for (i3 = 0;i3 < scanlineLength; i3++) {
                  var paeth, upperLeft;
                  byte = data[pos++];
                  col = (i3 - i3 % pixelBytes) / pixelBytes;
                  left = i3 < pixelBytes ? 0 : buffer[c3 - pixelBytes];
                  if (row === 0) {
                    upper = upperLeft = 0;
                  } else {
                    upper = buffer[(row - 1) * scanlineLength + col * pixelBytes + i3 % pixelBytes];
                    upperLeft = col && buffer[(row - 1) * scanlineLength + (col - 1) * pixelBytes + i3 % pixelBytes];
                  }
                  const p3 = left + upper - upperLeft;
                  const pa = Math.abs(p3 - left);
                  const pb = Math.abs(p3 - upper);
                  const pc = Math.abs(p3 - upperLeft);
                  if (pa <= pb && pa <= pc) {
                    paeth = left;
                  } else if (pb <= pc) {
                    paeth = upper;
                  } else {
                    paeth = upperLeft;
                  }
                  buffer[c3++] = (byte + paeth) % 256;
                }
                break;
              default:
                throw new Error(`Invalid filter algorithm: ${data[pos - 1]}`);
            }
            if (!singlePass) {
              let pixelsPos = ((y02 + row * dy) * width + x02) * pixelBytes;
              let bufferPos = row * scanlineLength;
              for (i3 = 0;i3 < w; i3++) {
                for (let j = 0;j < pixelBytes; j++)
                  pixels[pixelsPos++] = buffer[bufferPos++];
                pixelsPos += (dx - 1) * pixelBytes;
              }
            }
            row++;
          }
        }
        if (this.interlaceMethod === 1) {
          pass(0, 0, 8, 8);
          pass(4, 0, 8, 8);
          pass(0, 4, 4, 8);
          pass(2, 0, 4, 4);
          pass(0, 2, 2, 4);
          pass(1, 0, 2, 2);
          pass(0, 1, 1, 2);
        } else {
          pass(0, 0, 1, 1, true);
        }
        return fn(pixels);
      });
    }
    decodePalette() {
      const { palette } = this;
      const { length } = palette;
      const transparency = this.transparency.indexed || [];
      const ret = new Buffer(transparency.length + length);
      let pos = 0;
      let c3 = 0;
      for (let i3 = 0;i3 < length; i3 += 3) {
        var left;
        ret[pos++] = palette[i3];
        ret[pos++] = palette[i3 + 1];
        ret[pos++] = palette[i3 + 2];
        ret[pos++] = (left = transparency[c3++]) != null ? left : 255;
      }
      return ret;
    }
    copyToImageData(imageData, pixels) {
      let j, k;
      let { colors } = this;
      let palette = null;
      let alpha = this.hasAlphaChannel;
      if (this.palette.length) {
        palette = this._decodedPalette || (this._decodedPalette = this.decodePalette());
        colors = 4;
        alpha = true;
      }
      const data = imageData.data || imageData;
      const { length } = data;
      const input = palette || pixels;
      let i3 = j = 0;
      if (colors === 1) {
        while (i3 < length) {
          k = palette ? pixels[i3 / 4] * 4 : j;
          const v3 = input[k++];
          data[i3++] = v3;
          data[i3++] = v3;
          data[i3++] = v3;
          data[i3++] = alpha ? input[k++] : 255;
          j = k;
        }
      } else {
        while (i3 < length) {
          k = palette ? pixels[i3 / 4] * 4 : j;
          data[i3++] = input[k++];
          data[i3++] = input[k++];
          data[i3++] = input[k++];
          data[i3++] = alpha ? input[k++] : 255;
          j = k;
        }
      }
    }
    decode(fn) {
      const ret = new Buffer(this.width * this.height * 4);
      return this.decodePixels((pixels) => {
        this.copyToImageData(ret, pixels);
        return fn(ret);
      });
    }
  };
});

// node_modules/boolbase/index.js
var require_boolbase = __commonJS((exports, module) => {
  module.exports = {
    trueFunc: function trueFunc() {
      return true;
    },
    falseFunc: function falseFunc() {
      return false;
    }
  };
});

// node_modules/whatwg-encoding/lib/supported-names.json
var require_supported_names = __commonJS((exports, module) => {
  module.exports = [
    "UTF-8",
    "IBM866",
    "ISO-8859-2",
    "ISO-8859-3",
    "ISO-8859-4",
    "ISO-8859-5",
    "ISO-8859-6",
    "ISO-8859-7",
    "ISO-8859-8",
    "ISO-8859-10",
    "ISO-8859-13",
    "ISO-8859-14",
    "ISO-8859-15",
    "ISO-8859-16",
    "KOI8-R",
    "KOI8-U",
    "macintosh",
    "windows-874",
    "windows-1250",
    "windows-1251",
    "windows-1252",
    "windows-1253",
    "windows-1254",
    "windows-1255",
    "windows-1256",
    "windows-1257",
    "windows-1258",
    "GBK",
    "gb18030",
    "Big5",
    "EUC-JP",
    "Shift_JIS",
    "EUC-KR",
    "UTF-16BE",
    "UTF-16LE",
    "x-user-defined"
  ];
});

// node_modules/whatwg-encoding/lib/labels-to-names.json
var require_labels_to_names = __commonJS((exports, module) => {
  module.exports = {
    "866": "IBM866",
    "unicode-1-1-utf-8": "UTF-8",
    unicode11utf8: "UTF-8",
    unicode20utf8: "UTF-8",
    "utf-8": "UTF-8",
    utf8: "UTF-8",
    "x-unicode20utf8": "UTF-8",
    cp866: "IBM866",
    csibm866: "IBM866",
    ibm866: "IBM866",
    csisolatin2: "ISO-8859-2",
    "iso-8859-2": "ISO-8859-2",
    "iso-ir-101": "ISO-8859-2",
    "iso8859-2": "ISO-8859-2",
    iso88592: "ISO-8859-2",
    "iso_8859-2": "ISO-8859-2",
    "iso_8859-2:1987": "ISO-8859-2",
    l2: "ISO-8859-2",
    latin2: "ISO-8859-2",
    csisolatin3: "ISO-8859-3",
    "iso-8859-3": "ISO-8859-3",
    "iso-ir-109": "ISO-8859-3",
    "iso8859-3": "ISO-8859-3",
    iso88593: "ISO-8859-3",
    "iso_8859-3": "ISO-8859-3",
    "iso_8859-3:1988": "ISO-8859-3",
    l3: "ISO-8859-3",
    latin3: "ISO-8859-3",
    csisolatin4: "ISO-8859-4",
    "iso-8859-4": "ISO-8859-4",
    "iso-ir-110": "ISO-8859-4",
    "iso8859-4": "ISO-8859-4",
    iso88594: "ISO-8859-4",
    "iso_8859-4": "ISO-8859-4",
    "iso_8859-4:1988": "ISO-8859-4",
    l4: "ISO-8859-4",
    latin4: "ISO-8859-4",
    csisolatincyrillic: "ISO-8859-5",
    cyrillic: "ISO-8859-5",
    "iso-8859-5": "ISO-8859-5",
    "iso-ir-144": "ISO-8859-5",
    "iso8859-5": "ISO-8859-5",
    iso88595: "ISO-8859-5",
    "iso_8859-5": "ISO-8859-5",
    "iso_8859-5:1988": "ISO-8859-5",
    arabic: "ISO-8859-6",
    "asmo-708": "ISO-8859-6",
    csiso88596e: "ISO-8859-6",
    csiso88596i: "ISO-8859-6",
    csisolatinarabic: "ISO-8859-6",
    "ecma-114": "ISO-8859-6",
    "iso-8859-6": "ISO-8859-6",
    "iso-8859-6-e": "ISO-8859-6",
    "iso-8859-6-i": "ISO-8859-6",
    "iso-ir-127": "ISO-8859-6",
    "iso8859-6": "ISO-8859-6",
    iso88596: "ISO-8859-6",
    "iso_8859-6": "ISO-8859-6",
    "iso_8859-6:1987": "ISO-8859-6",
    csisolatingreek: "ISO-8859-7",
    "ecma-118": "ISO-8859-7",
    elot_928: "ISO-8859-7",
    greek: "ISO-8859-7",
    greek8: "ISO-8859-7",
    "iso-8859-7": "ISO-8859-7",
    "iso-ir-126": "ISO-8859-7",
    "iso8859-7": "ISO-8859-7",
    iso88597: "ISO-8859-7",
    "iso_8859-7": "ISO-8859-7",
    "iso_8859-7:1987": "ISO-8859-7",
    sun_eu_greek: "ISO-8859-7",
    csiso88598e: "ISO-8859-8",
    csisolatinhebrew: "ISO-8859-8",
    hebrew: "ISO-8859-8",
    "iso-8859-8": "ISO-8859-8",
    "iso-8859-8-e": "ISO-8859-8",
    "iso-ir-138": "ISO-8859-8",
    "iso8859-8": "ISO-8859-8",
    iso88598: "ISO-8859-8",
    "iso_8859-8": "ISO-8859-8",
    "iso_8859-8:1988": "ISO-8859-8",
    visual: "ISO-8859-8",
    csisolatin6: "ISO-8859-10",
    "iso-8859-10": "ISO-8859-10",
    "iso-ir-157": "ISO-8859-10",
    "iso8859-10": "ISO-8859-10",
    iso885910: "ISO-8859-10",
    l6: "ISO-8859-10",
    latin6: "ISO-8859-10",
    "iso-8859-13": "ISO-8859-13",
    "iso8859-13": "ISO-8859-13",
    iso885913: "ISO-8859-13",
    "iso-8859-14": "ISO-8859-14",
    "iso8859-14": "ISO-8859-14",
    iso885914: "ISO-8859-14",
    csisolatin9: "ISO-8859-15",
    "iso-8859-15": "ISO-8859-15",
    "iso8859-15": "ISO-8859-15",
    iso885915: "ISO-8859-15",
    "iso_8859-15": "ISO-8859-15",
    l9: "ISO-8859-15",
    "iso-8859-16": "ISO-8859-16",
    cskoi8r: "KOI8-R",
    koi: "KOI8-R",
    koi8: "KOI8-R",
    "koi8-r": "KOI8-R",
    koi8_r: "KOI8-R",
    "koi8-ru": "KOI8-U",
    "koi8-u": "KOI8-U",
    csmacintosh: "macintosh",
    mac: "macintosh",
    macintosh: "macintosh",
    "x-mac-roman": "macintosh",
    "dos-874": "windows-874",
    "iso-8859-11": "windows-874",
    "iso8859-11": "windows-874",
    iso885911: "windows-874",
    "tis-620": "windows-874",
    "windows-874": "windows-874",
    cp1250: "windows-1250",
    "windows-1250": "windows-1250",
    "x-cp1250": "windows-1250",
    cp1251: "windows-1251",
    "windows-1251": "windows-1251",
    "x-cp1251": "windows-1251",
    "ansi_x3.4-1968": "windows-1252",
    ascii: "windows-1252",
    cp1252: "windows-1252",
    cp819: "windows-1252",
    csisolatin1: "windows-1252",
    ibm819: "windows-1252",
    "iso-8859-1": "windows-1252",
    "iso-ir-100": "windows-1252",
    "iso8859-1": "windows-1252",
    iso88591: "windows-1252",
    "iso_8859-1": "windows-1252",
    "iso_8859-1:1987": "windows-1252",
    l1: "windows-1252",
    latin1: "windows-1252",
    "us-ascii": "windows-1252",
    "windows-1252": "windows-1252",
    "x-cp1252": "windows-1252",
    cp1253: "windows-1253",
    "windows-1253": "windows-1253",
    "x-cp1253": "windows-1253",
    cp1254: "windows-1254",
    csisolatin5: "windows-1254",
    "iso-8859-9": "windows-1254",
    "iso-ir-148": "windows-1254",
    "iso8859-9": "windows-1254",
    iso88599: "windows-1254",
    "iso_8859-9": "windows-1254",
    "iso_8859-9:1989": "windows-1254",
    l5: "windows-1254",
    latin5: "windows-1254",
    "windows-1254": "windows-1254",
    "x-cp1254": "windows-1254",
    cp1255: "windows-1255",
    "windows-1255": "windows-1255",
    "x-cp1255": "windows-1255",
    cp1256: "windows-1256",
    "windows-1256": "windows-1256",
    "x-cp1256": "windows-1256",
    cp1257: "windows-1257",
    "windows-1257": "windows-1257",
    "x-cp1257": "windows-1257",
    cp1258: "windows-1258",
    "windows-1258": "windows-1258",
    "x-cp1258": "windows-1258",
    chinese: "GBK",
    csgb2312: "GBK",
    csiso58gb231280: "GBK",
    gb2312: "GBK",
    gb_2312: "GBK",
    "gb_2312-80": "GBK",
    gbk: "GBK",
    "iso-ir-58": "GBK",
    "x-gbk": "GBK",
    gb18030: "gb18030",
    big5: "Big5",
    "big5-hkscs": "Big5",
    "cn-big5": "Big5",
    csbig5: "Big5",
    "x-x-big5": "Big5",
    cseucpkdfmtjapanese: "EUC-JP",
    "euc-jp": "EUC-JP",
    "x-euc-jp": "EUC-JP",
    csshiftjis: "Shift_JIS",
    ms932: "Shift_JIS",
    ms_kanji: "Shift_JIS",
    "shift-jis": "Shift_JIS",
    shift_jis: "Shift_JIS",
    sjis: "Shift_JIS",
    "windows-31j": "Shift_JIS",
    "x-sjis": "Shift_JIS",
    cseuckr: "EUC-KR",
    csksc56011987: "EUC-KR",
    "euc-kr": "EUC-KR",
    "iso-ir-149": "EUC-KR",
    korean: "EUC-KR",
    "ks_c_5601-1987": "EUC-KR",
    "ks_c_5601-1989": "EUC-KR",
    ksc5601: "EUC-KR",
    ksc_5601: "EUC-KR",
    "windows-949": "EUC-KR",
    unicodefffe: "UTF-16BE",
    "utf-16be": "UTF-16BE",
    csunicode: "UTF-16LE",
    "iso-10646-ucs-2": "UTF-16LE",
    "ucs-2": "UTF-16LE",
    unicode: "UTF-16LE",
    unicodefeff: "UTF-16LE",
    "utf-16": "UTF-16LE",
    "utf-16le": "UTF-16LE",
    "x-user-defined": "x-user-defined"
  };
});

// node_modules/whatwg-encoding/lib/whatwg-encoding.js
var require_whatwg_encoding = __commonJS((exports) => {
  var iconvLite = require_lib();
  var supportedNames = require_supported_names();
  var labelsToNames = require_labels_to_names();
  var supportedNamesSet = new Set(supportedNames);
  exports.labelToName = (label) => {
    label = String(label).trim().toLowerCase();
    return labelsToNames[label] || null;
  };
  exports.decode = (uint8Array, fallbackEncodingName) => {
    let encoding = fallbackEncodingName;
    if (!exports.isSupported(encoding)) {
      throw new RangeError(`"${encoding}" is not a supported encoding name`);
    }
    const bomEncoding = exports.getBOMEncoding(uint8Array);
    if (bomEncoding !== null) {
      encoding = bomEncoding;
    }
    if (encoding === "x-user-defined") {
      let result = "";
      for (const byte of uint8Array) {
        if (byte <= 127) {
          result += String.fromCodePoint(byte);
        } else {
          result += String.fromCodePoint(63360 + byte - 128);
        }
      }
      return result;
    }
    return iconvLite.decode(uint8Array, encoding);
  };
  exports.getBOMEncoding = (uint8Array) => {
    if (uint8Array[0] === 254 && uint8Array[1] === 255) {
      return "UTF-16BE";
    } else if (uint8Array[0] === 255 && uint8Array[1] === 254) {
      return "UTF-16LE";
    } else if (uint8Array[0] === 239 && uint8Array[1] === 187 && uint8Array[2] === 191) {
      return "UTF-8";
    }
    return null;
  };
  exports.isSupported = (name) => {
    return supportedNamesSet.has(String(name));
  };
});

// node_modules/whatwg-mimetype/lib/utils.js
var require_utils2 = __commonJS((exports) => {
  exports.removeLeadingAndTrailingHTTPWhitespace = (string7) => {
    return string7.replace(/^[ \t\n\r]+/u, "").replace(/[ \t\n\r]+$/u, "");
  };
  exports.removeTrailingHTTPWhitespace = (string7) => {
    return string7.replace(/[ \t\n\r]+$/u, "");
  };
  exports.isHTTPWhitespaceChar = (char) => {
    return char === " " || char === "\t" || char === "\n" || char === "\r";
  };
  exports.solelyContainsHTTPTokenCodePoints = (string7) => {
    return /^[-!#$%&'*+.^_`|~A-Za-z0-9]*$/u.test(string7);
  };
  exports.soleyContainsHTTPQuotedStringTokenCodePoints = (string7) => {
    return /^[\t\u0020-\u007E\u0080-\u00FF]*$/u.test(string7);
  };
  exports.asciiLowercase = (string7) => {
    return string7.replace(/[A-Z]/ug, (l) => l.toLowerCase());
  };
  exports.collectAnHTTPQuotedString = (input, position) => {
    let value15 = "";
    position++;
    while (true) {
      while (position < input.length && input[position] !== "\"" && input[position] !== "\\") {
        value15 += input[position];
        ++position;
      }
      if (position >= input.length) {
        break;
      }
      const quoteOrBackslash = input[position];
      ++position;
      if (quoteOrBackslash === "\\") {
        if (position >= input.length) {
          value15 += "\\";
          break;
        }
        value15 += input[position];
        ++position;
      } else {
        break;
      }
    }
    return [value15, position];
  };
});

// node_modules/whatwg-mimetype/lib/mime-type-parameters.js
var require_mime_type_parameters = __commonJS((exports, module) => {
  var {
    asciiLowercase,
    solelyContainsHTTPTokenCodePoints,
    soleyContainsHTTPQuotedStringTokenCodePoints
  } = require_utils2();
  module.exports = class MIMETypeParameters {
    constructor(map4) {
      this._map = map4;
    }
    get size() {
      return this._map.size;
    }
    get(name) {
      name = asciiLowercase(String(name));
      return this._map.get(name);
    }
    has(name) {
      name = asciiLowercase(String(name));
      return this._map.has(name);
    }
    set(name, value15) {
      name = asciiLowercase(String(name));
      value15 = String(value15);
      if (!solelyContainsHTTPTokenCodePoints(name)) {
        throw new Error(`Invalid MIME type parameter name "${name}": only HTTP token code points are valid.`);
      }
      if (!soleyContainsHTTPQuotedStringTokenCodePoints(value15)) {
        throw new Error(`Invalid MIME type parameter value "${value15}": only HTTP quoted-string token code points are ` + `valid.`);
      }
      return this._map.set(name, value15);
    }
    clear() {
      this._map.clear();
    }
    delete(name) {
      name = asciiLowercase(String(name));
      return this._map.delete(name);
    }
    forEach(callbackFn, thisArg) {
      this._map.forEach(callbackFn, thisArg);
    }
    keys() {
      return this._map.keys();
    }
    values() {
      return this._map.values();
    }
    entries() {
      return this._map.entries();
    }
    [Symbol.iterator]() {
      return this._map[Symbol.iterator]();
    }
  };
});

// node_modules/whatwg-mimetype/lib/parser.js
var require_parser = __commonJS((exports, module) => {
  var {
    removeLeadingAndTrailingHTTPWhitespace,
    removeTrailingHTTPWhitespace,
    isHTTPWhitespaceChar,
    solelyContainsHTTPTokenCodePoints,
    soleyContainsHTTPQuotedStringTokenCodePoints,
    asciiLowercase,
    collectAnHTTPQuotedString
  } = require_utils2();
  module.exports = (input) => {
    input = removeLeadingAndTrailingHTTPWhitespace(input);
    let position = 0;
    let type47 = "";
    while (position < input.length && input[position] !== "/") {
      type47 += input[position];
      ++position;
    }
    if (type47.length === 0 || !solelyContainsHTTPTokenCodePoints(type47)) {
      return null;
    }
    if (position >= input.length) {
      return null;
    }
    ++position;
    let subtype = "";
    while (position < input.length && input[position] !== ";") {
      subtype += input[position];
      ++position;
    }
    subtype = removeTrailingHTTPWhitespace(subtype);
    if (subtype.length === 0 || !solelyContainsHTTPTokenCodePoints(subtype)) {
      return null;
    }
    const mimeType = {
      type: asciiLowercase(type47),
      subtype: asciiLowercase(subtype),
      parameters: new Map
    };
    while (position < input.length) {
      ++position;
      while (isHTTPWhitespaceChar(input[position])) {
        ++position;
      }
      let parameterName = "";
      while (position < input.length && input[position] !== ";" && input[position] !== "=") {
        parameterName += input[position];
        ++position;
      }
      parameterName = asciiLowercase(parameterName);
      if (position < input.length) {
        if (input[position] === ";") {
          continue;
        }
        ++position;
      }
      let parameterValue = null;
      if (input[position] === "\"") {
        [parameterValue, position] = collectAnHTTPQuotedString(input, position);
        while (position < input.length && input[position] !== ";") {
          ++position;
        }
      } else {
        parameterValue = "";
        while (position < input.length && input[position] !== ";") {
          parameterValue += input[position];
          ++position;
        }
        parameterValue = removeTrailingHTTPWhitespace(parameterValue);
        if (parameterValue === "") {
          continue;
        }
      }
      if (parameterName.length > 0 && solelyContainsHTTPTokenCodePoints(parameterName) && soleyContainsHTTPQuotedStringTokenCodePoints(parameterValue) && !mimeType.parameters.has(parameterName)) {
        mimeType.parameters.set(parameterName, parameterValue);
      }
    }
    return mimeType;
  };
});

// node_modules/whatwg-mimetype/lib/serializer.js
var require_serializer = __commonJS((exports, module) => {
  var { solelyContainsHTTPTokenCodePoints } = require_utils2();
  module.exports = (mimeType) => {
    let serialization = `${mimeType.type}/${mimeType.subtype}`;
    if (mimeType.parameters.size === 0) {
      return serialization;
    }
    for (let [name, value15] of mimeType.parameters) {
      serialization += ";";
      serialization += name;
      serialization += "=";
      if (!solelyContainsHTTPTokenCodePoints(value15) || value15.length === 0) {
        value15 = value15.replace(/(["\\])/ug, "\\$1");
        value15 = `"${value15}"`;
      }
      serialization += value15;
    }
    return serialization;
  };
});

// node_modules/whatwg-mimetype/lib/mime-type.js
var require_mime_type = __commonJS((exports, module) => {
  var MIMETypeParameters = require_mime_type_parameters();
  var parse13 = require_parser();
  var serialize3 = require_serializer();
  var {
    asciiLowercase,
    solelyContainsHTTPTokenCodePoints
  } = require_utils2();
  module.exports = class MIMEType {
    constructor(string7) {
      string7 = String(string7);
      const result = parse13(string7);
      if (result === null) {
        throw new Error(`Could not parse MIME type string "${string7}"`);
      }
      this._type = result.type;
      this._subtype = result.subtype;
      this._parameters = new MIMETypeParameters(result.parameters);
    }
    static parse(string7) {
      try {
        return new this(string7);
      } catch (e) {
        return null;
      }
    }
    get essence() {
      return `${this.type}/${this.subtype}`;
    }
    get type() {
      return this._type;
    }
    set type(value15) {
      value15 = asciiLowercase(String(value15));
      if (value15.length === 0) {
        throw new Error("Invalid type: must be a non-empty string");
      }
      if (!solelyContainsHTTPTokenCodePoints(value15)) {
        throw new Error(`Invalid type ${value15}: must contain only HTTP token code points`);
      }
      this._type = value15;
    }
    get subtype() {
      return this._subtype;
    }
    set subtype(value15) {
      value15 = asciiLowercase(String(value15));
      if (value15.length === 0) {
        throw new Error("Invalid subtype: must be a non-empty string");
      }
      if (!solelyContainsHTTPTokenCodePoints(value15)) {
        throw new Error(`Invalid subtype ${value15}: must contain only HTTP token code points`);
      }
      this._subtype = value15;
    }
    get parameters() {
      return this._parameters;
    }
    toString() {
      return serialize3(this);
    }
    isJavaScript({ prohibitParameters = false } = {}) {
      switch (this._type) {
        case "text": {
          switch (this._subtype) {
            case "ecmascript":
            case "javascript":
            case "javascript1.0":
            case "javascript1.1":
            case "javascript1.2":
            case "javascript1.3":
            case "javascript1.4":
            case "javascript1.5":
            case "jscript":
            case "livescript":
            case "x-ecmascript":
            case "x-javascript": {
              return !prohibitParameters || this._parameters.size === 0;
            }
            default: {
              return false;
            }
          }
        }
        case "application": {
          switch (this._subtype) {
            case "ecmascript":
            case "javascript":
            case "x-ecmascript":
            case "x-javascript": {
              return !prohibitParameters || this._parameters.size === 0;
            }
            default: {
              return false;
            }
          }
        }
        default: {
          return false;
        }
      }
    }
    isXML() {
      return this._subtype === "xml" && (this._type === "text" || this._type === "application") || this._subtype.endsWith("+xml");
    }
    isHTML() {
      return this._subtype === "html" && this._type === "text";
    }
  };
});

// node_modules/@prisma/client/runtime/library.js
var require_library = __commonJS((exports, module) => {
  function uo(e) {
    return typeof e == "function" ? e : (t3) => t3.$extends(e);
  }
  function co(e) {
    return e;
  }
  function po(...e) {
    return (t3) => t3;
  }
  function M(e, t3) {
    let r = new RegExp(`\\x1b\\[${t3}m`, "g"), n3 = `\x1B[${e}m`, i3 = `\x1B[${t3}m`;
    return function(o2) {
      return !yo.enabled || o2 == null ? o2 : n3 + (~("" + o2).indexOf(i3) ? o2.replace(r, i3 + n3) : o2) + i3;
    };
  }
  function fu(e) {
    let t3 = { color: bo[mu++ % bo.length], enabled: Ut.enabled(e), namespace: e, log: Ut.log, extend: () => {
    } }, r = (...n3) => {
      let { enabled: i3, namespace: o2, color: s3, log: a } = t3;
      if (n3.length !== 0 && Bt.push([o2, ...n3]), Bt.length > du && Bt.shift(), Ut.enabled(o2) || i3) {
        let l = n3.map((c3) => typeof c3 == "string" ? c3 : gu(c3)), u3 = `+${Date.now() - Eo}ms`;
        Eo = Date.now(), globalThis.DEBUG_COLORS ? a(Lr[s3](H(o2)), ...l, Lr[s3](u3)) : a(o2, ...l, u3);
      }
    };
    return new Proxy(r, { get: (n3, i3) => t3[i3], set: (n3, i3, o2) => t3[i3] = o2 });
  }
  function gu(e, t3 = 2) {
    let r = new Set;
    return JSON.stringify(e, (n3, i3) => {
      if (typeof i3 == "object" && i3 !== null) {
        if (r.has(i3))
          return "[Circular *]";
        r.add(i3);
      } else if (typeof i3 == "bigint")
        return i3.toString();
      return i3;
    }, t3);
  }
  function wo(e = 7500) {
    let t3 = Bt.map(([r, ...n3]) => `${r} ${n3.map((i3) => typeof i3 == "string" ? i3 : JSON.stringify(i3)).join(" ")}`).join(`
`);
    return t3.length < e ? t3 : t3.slice(-e);
  }
  function xo() {
    Bt.length = 0;
  }
  function Vn() {
    let e = process.env.PRISMA_QUERY_ENGINE_LIBRARY;
    if (!(e && Po.default.existsSync(e)) && process.arch === "ia32")
      throw new Error('The default query engine type (Node-API, "library") is currently not supported for 32bit Node. Please set `engineType = "binary"` in the "generator" block of your "schema.prisma" file (or use the environment variables "PRISMA_CLIENT_ENGINE_TYPE=binary" and/or "PRISMA_CLI_QUERY_ENGINE_TYPE=binary".)');
  }
  function Nr(e, t3) {
    let r = t3 === "url";
    return e.includes("windows") ? r ? "query_engine.dll.node" : `query_engine-${e}.dll.node` : e.includes("darwin") ? r ? `${Fr}.dylib.node` : `${Fr}-${e}.dylib.node` : r ? `${Fr}.so.node` : `${Fr}-${e}.so.node`;
  }
  function pe(e) {
    return Object.assign(e, { optional: () => yu(e), and: (t3) => j(e, t3), or: (t3) => bu(e, t3), select: (t3) => t3 === undefined ? vo(e) : vo(t3, e) });
  }
  function yu(e) {
    return pe({ [ke]: () => ({ match: (t3) => {
      let r = {}, n3 = (i3, o2) => {
        r[i3] = o2;
      };
      return t3 === undefined ? (Be(e).forEach((i3) => n3(i3, undefined)), { matched: true, selections: r }) : { matched: Ee(e, t3, n3), selections: r };
    }, getSelectionKeys: () => Be(e), matcherType: "optional" }) });
  }
  function j(...e) {
    return pe({ [ke]: () => ({ match: (t3) => {
      let r = {}, n3 = (i3, o2) => {
        r[i3] = o2;
      };
      return { matched: e.every((i3) => Ee(i3, t3, n3)), selections: r };
    }, getSelectionKeys: () => Gt(e, Be), matcherType: "and" }) });
  }
  function bu(...e) {
    return pe({ [ke]: () => ({ match: (t3) => {
      let r = {}, n3 = (i3, o2) => {
        r[i3] = o2;
      };
      return Gt(e, Be).forEach((i3) => n3(i3, undefined)), { matched: e.some((i3) => Ee(i3, t3, n3)), selections: r };
    }, getSelectionKeys: () => Gt(e, Be), matcherType: "or" }) });
  }
  function I(e) {
    return { [ke]: () => ({ match: (t3) => ({ matched: !!e(t3) }) }) };
  }
  function vo(...e) {
    let t3 = typeof e[0] == "string" ? e[0] : undefined, r = e.length === 2 ? e[1] : typeof e[0] == "string" ? undefined : e[0];
    return pe({ [ke]: () => ({ match: (n3) => {
      let i3 = { [t3 ?? $r]: n3 };
      return { matched: r === undefined || Ee(r, n3, (o2, s3) => {
        i3[o2] = s3;
      }), selections: i3 };
    }, getSelectionKeys: () => [t3 ?? $r].concat(r === undefined ? [] : Be(r)) }) });
  }
  function ye(e) {
    return typeof e == "number";
  }
  function $e(e) {
    return typeof e == "string";
  }
  function qe(e) {
    return typeof e == "bigint";
  }
  function dt(e) {
    return new Qn(e, Gn);
  }
  function qr(e, ...t3) {
    wu.warn() && console.warn(`${Eu.warn} ${e}`, ...t3);
  }
  async function Ao() {
    let e = Vr.default.platform(), t3 = process.arch;
    if (e === "freebsd") {
      let s3 = await Br("freebsd-version");
      if (s3 && s3.trim().length > 0) {
        let l = /^(\d+)\.?/.exec(s3);
        if (l)
          return { platform: "freebsd", targetDistro: `freebsd${l[1]}`, arch: t3 };
      }
    }
    if (e !== "linux")
      return { platform: e, arch: t3 };
    let r = await Tu(), n3 = await Du(), i3 = Cu({ arch: t3, archFromUname: n3, familyDistro: r.familyDistro }), { libssl: o2 } = await Su(i3);
    return { platform: "linux", libssl: o2, arch: t3, archFromUname: n3, ...r };
  }
  function vu(e) {
    let t3 = /^ID="?([^"\n]*)"?$/im, r = /^ID_LIKE="?([^"\n]*)"?$/im, n3 = t3.exec(e), i3 = n3 && n3[1] && n3[1].toLowerCase() || "", o2 = r.exec(e), s3 = o2 && o2[1] && o2[1].toLowerCase() || "", a = dt({ id: i3, idLike: s3 }).with({ id: "alpine" }, ({ id: l }) => ({ targetDistro: "musl", familyDistro: l, originalDistro: l })).with({ id: "raspbian" }, ({ id: l }) => ({ targetDistro: "arm", familyDistro: "debian", originalDistro: l })).with({ id: "nixos" }, ({ id: l }) => ({ targetDistro: "nixos", originalDistro: l, familyDistro: "nixos" })).with({ id: "debian" }, { id: "ubuntu" }, ({ id: l }) => ({ targetDistro: "debian", familyDistro: "debian", originalDistro: l })).with({ id: "rhel" }, { id: "centos" }, { id: "fedora" }, ({ id: l }) => ({ targetDistro: "rhel", familyDistro: "rhel", originalDistro: l })).when(({ idLike: l }) => l.includes("debian") || l.includes("ubuntu"), ({ id: l }) => ({ targetDistro: "debian", familyDistro: "debian", originalDistro: l })).when(({ idLike: l }) => i3 === "arch" || l.includes("arch"), ({ id: l }) => ({ targetDistro: "debian", familyDistro: "arch", originalDistro: l })).when(({ idLike: l }) => l.includes("centos") || l.includes("fedora") || l.includes("rhel") || l.includes("suse"), ({ id: l }) => ({ targetDistro: "rhel", familyDistro: "rhel", originalDistro: l })).otherwise(({ id: l }) => ({ targetDistro: undefined, familyDistro: undefined, originalDistro: l }));
    return te(`Found distro info:
${JSON.stringify(a, null, 2)}`), a;
  }
  async function Tu() {
    let e = "/etc/os-release";
    try {
      let t3 = await Jn.default.readFile(e, { encoding: "utf-8" });
      return vu(t3);
    } catch {
      return { targetDistro: undefined, familyDistro: undefined, originalDistro: undefined };
    }
  }
  function Ru(e) {
    let t3 = /^OpenSSL\s(\d+\.\d+)\.\d+/.exec(e);
    if (t3) {
      let r = `${t3[1]}.x`;
      return Io(r);
    }
  }
  function To(e) {
    let t3 = /libssl\.so\.(\d)(\.\d)?/.exec(e);
    if (t3) {
      let r = `${t3[1]}${t3[2] ?? ".0"}.x`;
      return Io(r);
    }
  }
  function Io(e) {
    let t3 = (() => {
      if (ko(e))
        return e;
      let r = e.split(".");
      return r[1] = "0", r.join(".");
    })();
    if (Pu.includes(t3))
      return t3;
  }
  function Cu(e) {
    return dt(e).with({ familyDistro: "musl" }, () => (te('Trying platform-specific paths for "alpine"'), ["/lib"])).with({ familyDistro: "debian" }, ({ archFromUname: t3 }) => (te('Trying platform-specific paths for "debian" (and "ubuntu")'), [`/usr/lib/${t3}-linux-gnu`, `/lib/${t3}-linux-gnu`])).with({ familyDistro: "rhel" }, () => (te('Trying platform-specific paths for "rhel"'), ["/lib64", "/usr/lib64"])).otherwise(({ familyDistro: t3, arch: r, archFromUname: n3 }) => (te(`Don't know any platform-specific paths for "${t3}" on ${r} (${n3})`), []));
  }
  async function Su(e) {
    let t3 = 'grep -v "libssl.so.0"', r = await Ro(e);
    if (r) {
      te(`Found libssl.so file using platform-specific paths: ${r}`);
      let o2 = To(r);
      if (te(`The parsed libssl version is: ${o2}`), o2)
        return { libssl: o2, strategy: "libssl-specific-path" };
    }
    te('Falling back to "ldconfig" and other generic paths');
    let n3 = await Br(`ldconfig -p | sed "s/.*=>s*//" | sed "s|.*/||" | grep libssl | sort | ${t3}`);
    if (n3 || (n3 = await Ro(["/lib64", "/usr/lib64", "/lib"])), n3) {
      te(`Found libssl.so file using "ldconfig" or other generic paths: ${n3}`);
      let o2 = To(n3);
      if (te(`The parsed libssl version is: ${o2}`), o2)
        return { libssl: o2, strategy: "ldconfig" };
    }
    let i3 = await Br("openssl version -v");
    if (i3) {
      te(`Found openssl binary with version: ${i3}`);
      let o2 = Ru(i3);
      if (te(`The parsed openssl version is: ${o2}`), o2)
        return { libssl: o2, strategy: "openssl-binary" };
    }
    return te("Couldn't find any version of libssl or OpenSSL in the system"), {};
  }
  async function Ro(e) {
    for (let t3 of e) {
      let r = await Au(t3);
      if (r)
        return r;
    }
  }
  async function Au(e) {
    try {
      return (await Jn.default.readdir(e)).find((r) => r.startsWith("libssl.so.") && !r.startsWith("libssl.so.0"));
    } catch (t3) {
      if (t3.code === "ENOENT")
        return;
      throw t3;
    }
  }
  async function tt() {
    let { binaryTarget: e } = await Oo();
    return e;
  }
  function Iu(e) {
    return e.binaryTarget !== undefined;
  }
  async function Wn() {
    let { memoized: e, ...t3 } = await Oo();
    return t3;
  }
  async function Oo() {
    if (Iu(jr))
      return Promise.resolve({ ...jr, memoized: true });
    let e = await Ao(), t3 = Ou(e);
    return jr = { ...e, binaryTarget: t3 }, { ...jr, memoized: false };
  }
  function Ou(e) {
    let { platform: t3, arch: r, archFromUname: n3, libssl: i3, targetDistro: o2, familyDistro: s3, originalDistro: a } = e;
    t3 === "linux" && !["x64", "arm64"].includes(r) && qr(`Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures (detected "${r}" instead). If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture "${n3}".`);
    let l = "1.1.x";
    if (t3 === "linux" && i3 === undefined) {
      let c3 = dt({ familyDistro: s3 }).with({ familyDistro: "debian" }, () => "Please manually install OpenSSL via `apt-get update -y && apt-get install -y openssl` and try installing Prisma again. If you're running Prisma on Docker, add this command to your Dockerfile, or switch to an image that already has OpenSSL installed.").otherwise(() => "Please manually install OpenSSL and try installing Prisma again.");
      qr(`Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to "openssl-${l}".
${c3}`);
    }
    let u3 = "debian";
    if (t3 === "linux" && o2 === undefined && te(`Distro is "${a}". Falling back to Prisma engines built for "${u3}".`), t3 === "darwin" && r === "arm64")
      return "darwin-arm64";
    if (t3 === "darwin")
      return "darwin";
    if (t3 === "win32")
      return "windows";
    if (t3 === "freebsd")
      return o2;
    if (t3 === "openbsd")
      return "openbsd";
    if (t3 === "netbsd")
      return "netbsd";
    if (t3 === "linux" && o2 === "nixos")
      return "linux-nixos";
    if (t3 === "linux" && r === "arm64")
      return `${o2 === "musl" ? "linux-musl-arm64" : "linux-arm64"}-openssl-${i3 || l}`;
    if (t3 === "linux" && r === "arm")
      return `linux-arm-openssl-${i3 || l}`;
    if (t3 === "linux" && o2 === "musl") {
      let c3 = "linux-musl";
      return !i3 || ko(i3) ? c3 : `${c3}-openssl-${i3}`;
    }
    return t3 === "linux" && o2 && i3 ? `${o2}-openssl-${i3}` : (t3 !== "linux" && qr(`Prisma detected unknown OS "${t3}" and may not work as expected. Defaulting to "linux".`), i3 ? `${u3}-openssl-${i3}` : o2 ? `${o2}-openssl-${l}` : `${u3}-openssl-${l}`);
  }
  async function ku(e) {
    try {
      return await e();
    } catch {
      return;
    }
  }
  function Br(e) {
    return ku(async () => {
      let t3 = await xu(e);
      return te(`Command "${e}" successfully returned "${t3.stdout}"`), t3.stdout;
    });
  }
  async function Du() {
    return typeof Vr.default.machine == "function" ? Vr.default.machine() : (await Br("uname -m"))?.trim();
  }
  function ko(e) {
    return e.startsWith("1.");
  }
  function ei(e) {
    return (0, Uo.default)(e, e, { fallback: X });
  }
  function Go() {
    return $4.default.join(__dirname, "../");
  }
  function ii(e) {
    if (process.platform === "win32")
      return;
    let t3 = ni.default.statSync(e), r = t3.mode | 64 | 8 | 1;
    if (t3.mode === r) {
      Qo(`Execution permissions of ${e} are fine`);
      return;
    }
    let n3 = r.toString(8).slice(-3);
    Qo(`Have to call chmodPlusX on ${e}`), ni.default.chmodSync(e, n3);
  }
  function oi(e) {
    let t3 = e.e, r = (a) => `Prisma cannot find the required \`${a}\` system library in your system`, n3 = t3.message.includes("cannot open shared object file"), i3 = `Please refer to the documentation about Prisma's system requirements: ${ei("https://pris.ly/d/system-requirements")}`, o2 = `Unable to require(\`${Ae(e.id)}\`).`, s3 = dt({ message: t3.message, code: t3.code }).with({ code: "ENOENT" }, () => "File does not exist.").when(({ message: a }) => n3 && a.includes("libz"), () => `${r("libz")}. Please install it and try again.`).when(({ message: a }) => n3 && a.includes("libgcc_s"), () => `${r("libgcc_s")}. Please install it and try again.`).when(({ message: a }) => n3 && a.includes("libssl"), () => {
      let a = e.platformInfo.libssl ? `openssl-${e.platformInfo.libssl}` : "openssl";
      return `${r("libssl")}. Please install ${a} and try again.`;
    }).when(({ message: a }) => a.includes("GLIBC"), () => `Prisma has detected an incompatible version of the \`glibc\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${i3}`).when(({ message: a }) => e.platformInfo.platform === "linux" && a.includes("symbol not found"), () => `The Prisma engines are not compatible with your system ${e.platformInfo.originalDistro} on (${e.platformInfo.archFromUname}) which uses the \`${e.platformInfo.binaryTarget}\` binaryTarget by default. ${i3}`).otherwise(() => `The Prisma engines do not seem to be compatible with your system. ${i3}`);
    return `${o2}
${s3}

Details: ${t3.message}`;
  }
  function Ko(e) {
    let t3 = e.ignoreProcessEnv ? {} : process.env, r = (n3) => n3.match(/(.?\${(?:[a-zA-Z0-9_]+)?})/g)?.reduce(function(o2, s3) {
      let a = /(.?)\${([a-zA-Z0-9_]+)?}/g.exec(s3);
      if (!a)
        return o2;
      let l = a[1], u3, c3;
      if (l === "\\")
        c3 = a[0], u3 = c3.replace("\\$", "$");
      else {
        let p3 = a[2];
        c3 = a[0].substring(l.length), u3 = Object.hasOwnProperty.call(t3, p3) ? t3[p3] : e.parsed[p3] || "", u3 = r(u3);
      }
      return o2.replace(c3, u3);
    }, n3) ?? n3;
    for (let n3 in e.parsed) {
      let i3 = Object.hasOwnProperty.call(t3, n3) ? t3[n3] : e.parsed[n3];
      e.parsed[n3] = r(i3);
    }
    for (let n3 in e.parsed)
      t3[n3] = e.parsed[n3];
    return e;
  }
  function Wt({ rootEnvPath: e, schemaEnvPath: t3 }, r = { conflictCheck: "none" }) {
    let n3 = zo(e);
    r.conflictCheck !== "none" && Ku(n3, t3, r.conflictCheck);
    let i3 = null;
    return Yo(n3?.path, t3) || (i3 = zo(t3)), !n3 && !i3 && ai("No Environment variables loaded"), i3?.dotenvResult.error ? console.error(ce(H("Schema Env Error: ")) + i3.dotenvResult.error) : { message: [n3?.message, i3?.message].filter(Boolean).join(`
`), parsed: { ...n3?.dotenvResult?.parsed, ...i3?.dotenvResult?.parsed } };
  }
  function Ku(e, t3, r) {
    let n3 = e?.dotenvResult.parsed, i3 = !Yo(e?.path, t3);
    if (n3 && t3 && i3 && Wr.default.existsSync(t3)) {
      let o2 = li.default.parse(Wr.default.readFileSync(t3)), s3 = [];
      for (let a in o2)
        n3[a] === o2[a] && s3.push(a);
      if (s3.length > 0) {
        let a = gt.default.relative(process.cwd(), e.path), l = gt.default.relative(process.cwd(), t3);
        if (r === "error") {
          let u3 = `There is a conflict between env var${s3.length > 1 ? "s" : ""} in ${X(a)} and ${X(l)}
Conflicting env vars:
${s3.map((c3) => `  ${H(c3)}`).join(`
`)}

We suggest to move the contents of ${X(l)} to ${X(a)} to consolidate your env vars.
`;
          throw new Error(u3);
        } else if (r === "warn") {
          let u3 = `Conflict for env var${s3.length > 1 ? "s" : ""} ${s3.map((c3) => H(c3)).join(", ")} in ${X(a)} and ${X(l)}
Env vars from ${X(l)} overwrite the ones from ${X(a)}
      `;
          console.warn(`${Ie("warn(prisma)")} ${u3}`);
        }
      }
    }
  }
  function zo(e) {
    if (zu(e)) {
      ai(`Environment variables loaded from ${e}`);
      let t3 = li.default.config({ path: e, debug: process.env.DOTENV_CONFIG_DEBUG ? true : undefined });
      return { dotenvResult: Ko(t3), message: Ae(`Environment variables loaded from ${gt.default.relative(process.cwd(), e)}`), path: e };
    } else
      ai(`Environment variables not found at ${e}`);
    return null;
  }
  function Yo(e, t3) {
    return e && t3 && gt.default.resolve(e) === gt.default.resolve(t3);
  }
  function zu(e) {
    return !!(e && Wr.default.existsSync(e));
  }
  function Ht(e) {
    let t3 = Yu();
    return t3 || (e?.config.engineType === "library" ? "library" : e?.config.engineType === "binary" ? "binary" : Zo);
  }
  function Yu() {
    let e = process.env.PRISMA_CLIENT_ENGINE_TYPE;
    return e === "library" ? "library" : e === "binary" ? "binary" : undefined;
  }
  function ui(e) {
    return Kt.default.sep === Kt.default.posix.sep ? e : e.split(Kt.default.sep).join(Kt.default.posix.sep);
  }
  function di(e) {
    return String(new pi(e));
  }
  function Xu(e) {
    let t3;
    if (e.length > 0) {
      let r = e.find((n3) => n3.fromEnvVar !== null);
      r ? t3 = `env("${r.fromEnvVar}")` : t3 = e.map((n3) => n3.native ? "native" : n3.value);
    } else
      t3 = undefined;
    return t3;
  }
  function ec(e) {
    let t3 = Object.keys(e).reduce((r, n3) => Math.max(r, n3.length), 0);
    return Object.entries(e).map(([r, n3]) => `${r.padEnd(t3)} = ${tc(n3)}`).join(`
`);
  }
  function tc(e) {
    return JSON.parse(JSON.stringify(e, (t3, r) => Array.isArray(r) ? `[${r.map((n3) => JSON.stringify(n3)).join(", ")}]` : JSON.stringify(r)));
  }
  function rc(...e) {
    console.log(...e);
  }
  function mi(e, ...t3) {
    os.warn() && console.warn(`${zt.warn} ${e}`, ...t3);
  }
  function nc(e, ...t3) {
    console.info(`${zt.info} ${e}`, ...t3);
  }
  function ic(e, ...t3) {
    console.error(`${zt.error} ${e}`, ...t3);
  }
  function oc(e, ...t3) {
    console.log(`${zt.query} ${e}`, ...t3);
  }
  function Hr(e, t3) {
    if (!e)
      throw new Error(`${t3}. This should never happen. If you see this error, please, open an issue at https://pris.ly/prisma-prisma-bug-report`);
  }
  function De(e, t3) {
    throw new Error(t3);
  }
  function gi(e, t3) {
    return Object.prototype.hasOwnProperty.call(e, t3);
  }
  function ht(e, t3) {
    let r = {};
    for (let n3 of Object.keys(e))
      r[n3] = t3(e[n3], n3);
    return r;
  }
  function yi(e, t3) {
    if (e.length === 0)
      return;
    let r = e[0];
    for (let n3 = 1;n3 < e.length; n3++)
      t3(r, e[n3]) < 0 && (r = e[n3]);
    return r;
  }
  function w(e, t3) {
    Object.defineProperty(e, "name", { value: t3, configurable: true });
  }
  function Xt(e) {
    let t3;
    return { get() {
      return t3 || (t3 = { value: e() }), t3.value;
    } };
  }
  function ps(e, t3) {
    let r = Xt(() => ac(t3));
    Object.defineProperty(e, "dmmf", { get: () => r.get() });
  }
  function ac(e) {
    return { datamodel: { models: bi(e.models), enums: bi(e.enums), types: bi(e.types) } };
  }
  function bi(e) {
    return Object.entries(e).map(([t3, r]) => ({ name: t3, ...r }));
  }
  function wi(e, t3) {
    Object.defineProperty(e, "name", { value: t3, configurable: true });
  }
  function ds(e) {
    return (...t3) => new ir(e, t3);
  }
  function or(e) {
    return { ok: false, error: e, map() {
      return or(e);
    }, flatMap() {
      return or(e);
    } };
  }
  function rt(e, t3) {
    return async (...r) => {
      try {
        return await t3(...r);
      } catch (n3) {
        let i3 = e.registerNewError(n3);
        return or({ kind: "GenericJs", id: i3 });
      }
    };
  }
  function uc(e, t3) {
    return (...r) => {
      try {
        return t3(...r);
      } catch (n3) {
        let i3 = e.registerNewError(n3);
        return or({ kind: "GenericJs", id: i3 });
      }
    };
  }
  function ms(e, t3 = ",", r = "", n3 = "") {
    if (e.length === 0)
      throw new TypeError("Expected `join([])` to be called with an array of multiple elements, but got an empty array");
    return new ie([r, ...Array(e.length - 1).fill(t3), n3], e);
  }
  function Ti(e) {
    return new ie([e], []);
  }
  function Ri(e, ...t3) {
    return new ie(e, t3);
  }
  function sr(e) {
    return { getKeys() {
      return Object.keys(e);
    }, getPropertyValue(t3) {
      return e[t3];
    } };
  }
  function re(e, t3) {
    return { getKeys() {
      return [e];
    }, getPropertyValue() {
      return t3();
    } };
  }
  function nt(e) {
    let t3 = new we;
    return { getKeys() {
      return e.getKeys();
    }, getPropertyValue(r) {
      return t3.getOrCreate(r, () => e.getPropertyValue(r));
    }, getPropertyDescriptor(r) {
      return e.getPropertyDescriptor?.(r);
    } };
  }
  function en(e) {
    let t3 = new Set(e);
    return { getOwnPropertyDescriptor: () => Xr, has: (r, n3) => t3.has(n3), set: (r, n3, i3) => t3.add(n3) && Reflect.set(r, n3, i3), ownKeys: () => [...t3] };
  }
  function xe(e, t3) {
    let r = cc(t3), n3 = new Set, i3 = new Proxy(e, { get(o2, s3) {
      if (n3.has(s3))
        return o2[s3];
      let a = r.get(s3);
      return a ? a.getPropertyValue(s3) : o2[s3];
    }, has(o2, s3) {
      if (n3.has(s3))
        return true;
      let a = r.get(s3);
      return a ? a.has?.(s3) ?? true : Reflect.has(o2, s3);
    }, ownKeys(o2) {
      let s3 = hs(Reflect.ownKeys(o2), r), a = hs(Array.from(r.keys()), r);
      return [...new Set([...s3, ...a, ...n3])];
    }, set(o2, s3, a) {
      return r.get(s3)?.getPropertyDescriptor?.(s3)?.writable === false ? false : (n3.add(s3), Reflect.set(o2, s3, a));
    }, getOwnPropertyDescriptor(o2, s3) {
      let a = Reflect.getOwnPropertyDescriptor(o2, s3);
      if (a && !a.configurable)
        return a;
      let l = r.get(s3);
      return l ? l.getPropertyDescriptor ? { ...Xr, ...l?.getPropertyDescriptor(s3) } : Xr : a;
    }, defineProperty(o2, s3, a) {
      return n3.add(s3), Reflect.defineProperty(o2, s3, a);
    } });
    return i3[gs] = function() {
      let o2 = { ...this };
      return delete o2[gs], o2;
    }, i3;
  }
  function cc(e) {
    let t3 = new Map;
    for (let r of e) {
      let n3 = r.getKeys();
      for (let i3 of n3)
        t3.set(i3, r);
    }
    return t3;
  }
  function hs(e, t3) {
    return e.filter((r) => t3.get(r)?.has?.(r) ?? true);
  }
  function bt(e) {
    return { getKeys() {
      return e;
    }, has() {
      return false;
    }, getPropertyValue() {
    } };
  }
  function Et(e, t3) {
    return { batch: e, transaction: t3?.kind === "batch" ? { isolationLevel: t3.options.isolationLevel } : undefined };
  }
  function ys(e) {
    return e.substring(0, 1).toLowerCase() + e.substring(1);
  }
  function xt(e) {
    return e instanceof Date || Object.prototype.toString.call(e) === "[object Date]";
  }
  function tn(e) {
    return e.toString() !== "Invalid Date";
  }
  function K(e) {
    var t3, r, n3, i3 = e.length - 1, o2 = "", s3 = e[0];
    if (i3 > 0) {
      for (o2 += s3, t3 = 1;t3 < i3; t3++)
        n3 = e[t3] + "", r = b - n3.length, r && (o2 += Qe(r)), o2 += n3;
      s3 = e[t3], n3 = s3 + "", r = b - n3.length, r && (o2 += Qe(r));
    } else if (s3 === 0)
      return "0";
    for (;s3 % 10 === 0; )
      s3 /= 10;
    return o2 + s3;
  }
  function oe(e, t3, r) {
    if (e !== ~~e || e < t3 || e > r)
      throw Error(We + e);
  }
  function ar(e, t3, r, n3) {
    var i3, o2, s3, a;
    for (o2 = e[0];o2 >= 10; o2 /= 10)
      --t3;
    return --t3 < 0 ? (t3 += b, i3 = 0) : (i3 = Math.ceil((t3 + 1) / b), t3 %= b), o2 = G(10, b - t3), a = e[i3] % o2 | 0, n3 == null ? t3 < 3 ? (t3 == 0 ? a = a / 100 | 0 : t3 == 1 && (a = a / 10 | 0), s3 = r < 4 && a == 99999 || r > 3 && a == 49999 || a == 50000 || a == 0) : s3 = (r < 4 && a + 1 == o2 || r > 3 && a + 1 == o2 / 2) && (e[i3 + 1] / o2 / 100 | 0) == G(10, t3 - 2) - 1 || (a == o2 / 2 || a == 0) && (e[i3 + 1] / o2 / 100 | 0) == 0 : t3 < 4 ? (t3 == 0 ? a = a / 1000 | 0 : t3 == 1 ? a = a / 100 | 0 : t3 == 2 && (a = a / 10 | 0), s3 = (n3 || r < 4) && a == 9999 || !n3 && r > 3 && a == 4999) : s3 = ((n3 || r < 4) && a + 1 == o2 || !n3 && r > 3 && a + 1 == o2 / 2) && (e[i3 + 1] / o2 / 1000 | 0) == G(10, t3 - 3) - 1, s3;
  }
  function rn(e, t3, r) {
    for (var n3, i3 = [0], o2, s3 = 0, a = e.length;s3 < a; ) {
      for (o2 = i3.length;o2--; )
        i3[o2] *= t3;
      for (i3[0] += Ci.indexOf(e.charAt(s3++)), n3 = 0;n3 < i3.length; n3++)
        i3[n3] > r - 1 && (i3[n3 + 1] === undefined && (i3[n3 + 1] = 0), i3[n3 + 1] += i3[n3] / r | 0, i3[n3] %= r);
    }
    return i3.reverse();
  }
  function hc(e, t3) {
    var r, n3, i3;
    if (t3.isZero())
      return t3;
    n3 = t3.d.length, n3 < 32 ? (r = Math.ceil(n3 / 3), i3 = (1 / un(4, r)).toString()) : (r = 16, i3 = "2.3283064365386962890625e-10"), e.precision += r, t3 = vt(e, 1, t3.times(i3), new e(1));
    for (var o2 = r;o2--; ) {
      var s3 = t3.times(t3);
      t3 = s3.times(s3).minus(s3).times(8).plus(1);
    }
    return e.precision -= r, t3;
  }
  function y3(e, t3, r, n3) {
    var i3, o2, s3, a, l, u3, c3, p3, d3, f3 = e.constructor;
    e:
      if (t3 != null) {
        if (p3 = e.d, !p3)
          return e;
        for (i3 = 1, a = p3[0];a >= 10; a /= 10)
          i3++;
        if (o2 = t3 - i3, o2 < 0)
          o2 += b, s3 = t3, c3 = p3[d3 = 0], l = c3 / G(10, i3 - s3 - 1) % 10 | 0;
        else if (d3 = Math.ceil((o2 + 1) / b), a = p3.length, d3 >= a)
          if (n3) {
            for (;a++ <= d3; )
              p3.push(0);
            c3 = l = 0, i3 = 1, o2 %= b, s3 = o2 - b + 1;
          } else
            break e;
        else {
          for (c3 = a = p3[d3], i3 = 1;a >= 10; a /= 10)
            i3++;
          o2 %= b, s3 = o2 - b + i3, l = s3 < 0 ? 0 : c3 / G(10, i3 - s3 - 1) % 10 | 0;
        }
        if (n3 = n3 || t3 < 0 || p3[d3 + 1] !== undefined || (s3 < 0 ? c3 : c3 % G(10, i3 - s3 - 1)), u3 = r < 4 ? (l || n3) && (r == 0 || r == (e.s < 0 ? 3 : 2)) : l > 5 || l == 5 && (r == 4 || n3 || r == 6 && (o2 > 0 ? s3 > 0 ? c3 / G(10, i3 - s3) : 0 : p3[d3 - 1]) % 10 & 1 || r == (e.s < 0 ? 8 : 7)), t3 < 1 || !p3[0])
          return p3.length = 0, u3 ? (t3 -= e.e + 1, p3[0] = G(10, (b - t3 % b) % b), e.e = -t3 || 0) : p3[0] = e.e = 0, e;
        if (o2 == 0 ? (p3.length = d3, a = 1, d3--) : (p3.length = d3 + 1, a = G(10, b - o2), p3[d3] = s3 > 0 ? (c3 / G(10, i3 - s3) % G(10, s3) | 0) * a : 0), u3)
          for (;; )
            if (d3 == 0) {
              for (o2 = 1, s3 = p3[0];s3 >= 10; s3 /= 10)
                o2++;
              for (s3 = p3[0] += a, a = 1;s3 >= 10; s3 /= 10)
                a++;
              o2 != a && (e.e++, p3[0] == ge && (p3[0] = 1));
              break;
            } else {
              if (p3[d3] += a, p3[d3] != ge)
                break;
              p3[d3--] = 0, a = 1;
            }
        for (o2 = p3.length;p3[--o2] === 0; )
          p3.pop();
      }
    return x3 && (e.e > f3.maxE ? (e.d = null, e.e = NaN) : e.e < f3.minE && (e.e = 0, e.d = [0])), e;
  }
  function Pe(e, t3, r) {
    if (!e.isFinite())
      return Is(e);
    var n3, i3 = e.e, o2 = K(e.d), s3 = o2.length;
    return t3 ? (r && (n3 = r - s3) > 0 ? o2 = o2.charAt(0) + "." + o2.slice(1) + Qe(n3) : s3 > 1 && (o2 = o2.charAt(0) + "." + o2.slice(1)), o2 = o2 + (e.e < 0 ? "e" : "e+") + e.e) : i3 < 0 ? (o2 = "0." + Qe(-i3 - 1) + o2, r && (n3 = r - s3) > 0 && (o2 += Qe(n3))) : i3 >= s3 ? (o2 += Qe(i3 + 1 - s3), r && (n3 = r - i3 - 1) > 0 && (o2 = o2 + "." + Qe(n3))) : ((n3 = i3 + 1) < s3 && (o2 = o2.slice(0, n3) + "." + o2.slice(n3)), r && (n3 = r - s3) > 0 && (i3 + 1 === s3 && (o2 += "."), o2 += Qe(n3))), o2;
  }
  function ln(e, t3) {
    var r = e[0];
    for (t3 *= b;r >= 10; r /= 10)
      t3++;
    return t3;
  }
  function sn(e, t3, r) {
    if (t3 > gc)
      throw x3 = true, r && (e.precision = r), Error(Ps);
    return y3(new e(nn), t3, 1, true);
  }
  function fe(e, t3, r) {
    if (t3 > Ai)
      throw Error(Ps);
    return y3(new e(on), t3, r, true);
  }
  function Cs(e) {
    var t3 = e.length - 1, r = t3 * b + 1;
    if (t3 = e[t3], t3) {
      for (;t3 % 10 == 0; t3 /= 10)
        r--;
      for (t3 = e[0];t3 >= 10; t3 /= 10)
        r++;
    }
    return r;
  }
  function Qe(e) {
    for (var t3 = "";e--; )
      t3 += "0";
    return t3;
  }
  function Ss(e, t3, r, n3) {
    var i3, o2 = new e(1), s3 = Math.ceil(n3 / b + 4);
    for (x3 = false;; ) {
      if (r % 2 && (o2 = o2.times(t3), Es(o2.d, s3) && (i3 = true)), r = ee(r / 2), r === 0) {
        r = o2.d.length - 1, i3 && o2.d[r] === 0 && ++o2.d[r];
        break;
      }
      t3 = t3.times(t3), Es(t3.d, s3);
    }
    return x3 = true, o2;
  }
  function bs(e) {
    return e.d[e.d.length - 1] & 1;
  }
  function As(e, t3, r) {
    for (var n3, i3 = new e(t3[0]), o2 = 0;++o2 < t3.length; )
      if (n3 = new e(t3[o2]), n3.s)
        i3[r](n3) && (i3 = n3);
      else {
        i3 = n3;
        break;
      }
    return i3;
  }
  function Ii(e, t3) {
    var r, n3, i3, o2, s3, a, l, u3 = 0, c3 = 0, p3 = 0, d3 = e.constructor, f3 = d3.rounding, g = d3.precision;
    if (!e.d || !e.d[0] || e.e > 17)
      return new d3(e.d ? e.d[0] ? e.s < 0 ? 0 : 1 / 0 : 1 : e.s ? e.s < 0 ? 0 : e : NaN);
    for (t3 == null ? (x3 = false, l = g) : l = t3, a = new d3(0.03125);e.e > -2; )
      e = e.times(a), p3 += 5;
    for (n3 = Math.log(G(2, p3)) / Math.LN10 * 2 + 5 | 0, l += n3, r = o2 = s3 = new d3(1), d3.precision = l;; ) {
      if (o2 = y3(o2.times(e), l, 1), r = r.times(++c3), a = s3.plus(N(o2, r, l, 1)), K(a.d).slice(0, l) === K(s3.d).slice(0, l)) {
        for (i3 = p3;i3--; )
          s3 = y3(s3.times(s3), l, 1);
        if (t3 == null)
          if (u3 < 3 && ar(s3.d, l - n3, f3, u3))
            d3.precision = l += 10, r = o2 = a = new d3(1), c3 = 0, u3++;
          else
            return y3(s3, d3.precision = g, f3, x3 = true);
        else
          return d3.precision = g, s3;
      }
      s3 = a;
    }
  }
  function Je(e, t3) {
    var r, n3, i3, o2, s3, a, l, u3, c3, p3, d3, f3 = 1, g = 10, h = e, O = h.d, T3 = h.constructor, S = T3.rounding, C = T3.precision;
    if (h.s < 0 || !O || !O[0] || !h.e && O[0] == 1 && O.length == 1)
      return new T3(O && !O[0] ? -1 / 0 : h.s != 1 ? NaN : O ? 0 : h);
    if (t3 == null ? (x3 = false, c3 = C) : c3 = t3, T3.precision = c3 += g, r = K(O), n3 = r.charAt(0), Math.abs(o2 = h.e) < 1500000000000000) {
      for (;n3 < 7 && n3 != 1 || n3 == 1 && r.charAt(1) > 3; )
        h = h.times(e), r = K(h.d), n3 = r.charAt(0), f3++;
      o2 = h.e, n3 > 1 ? (h = new T3("0." + r), o2++) : h = new T3(n3 + "." + r.slice(1));
    } else
      return u3 = sn(T3, c3 + 2, C).times(o2 + ""), h = Je(new T3(n3 + "." + r.slice(1)), c3 - g).plus(u3), T3.precision = C, t3 == null ? y3(h, C, S, x3 = true) : h;
    for (p3 = h, l = s3 = h = N(h.minus(1), h.plus(1), c3, 1), d3 = y3(h.times(h), c3, 1), i3 = 3;; ) {
      if (s3 = y3(s3.times(d3), c3, 1), u3 = l.plus(N(s3, new T3(i3), c3, 1)), K(u3.d).slice(0, c3) === K(l.d).slice(0, c3))
        if (l = l.times(2), o2 !== 0 && (l = l.plus(sn(T3, c3 + 2, C).times(o2 + ""))), l = N(l, new T3(f3), c3, 1), t3 == null)
          if (ar(l.d, c3 - g, S, a))
            T3.precision = c3 += g, u3 = s3 = h = N(p3.minus(1), p3.plus(1), c3, 1), d3 = y3(h.times(h), c3, 1), i3 = a = 1;
          else
            return y3(l, T3.precision = C, S, x3 = true);
        else
          return T3.precision = C, l;
      l = u3, i3 += 2;
    }
  }
  function Is(e) {
    return String(e.s * e.s / 0);
  }
  function Oi(e, t3) {
    var r, n3, i3;
    for ((r = t3.indexOf(".")) > -1 && (t3 = t3.replace(".", "")), (n3 = t3.search(/e/i)) > 0 ? (r < 0 && (r = n3), r += +t3.slice(n3 + 1), t3 = t3.substring(0, n3)) : r < 0 && (r = t3.length), n3 = 0;t3.charCodeAt(n3) === 48; n3++)
      ;
    for (i3 = t3.length;t3.charCodeAt(i3 - 1) === 48; --i3)
      ;
    if (t3 = t3.slice(n3, i3), t3) {
      if (i3 -= n3, e.e = r = r - n3 - 1, e.d = [], n3 = (r + 1) % b, r < 0 && (n3 += b), n3 < i3) {
        for (n3 && e.d.push(+t3.slice(0, n3)), i3 -= b;n3 < i3; )
          e.d.push(+t3.slice(n3, n3 += b));
        t3 = t3.slice(n3), n3 = b - t3.length;
      } else
        n3 -= i3;
      for (;n3--; )
        t3 += "0";
      e.d.push(+t3), x3 && (e.e > e.constructor.maxE ? (e.d = null, e.e = NaN) : e.e < e.constructor.minE && (e.e = 0, e.d = [0]));
    } else
      e.e = 0, e.d = [0];
    return e;
  }
  function yc(e, t3) {
    var r, n3, i3, o2, s3, a, l, u3, c3;
    if (t3.indexOf("_") > -1) {
      if (t3 = t3.replace(/(\d)_(?=\d)/g, "$1"), Rs.test(t3))
        return Oi(e, t3);
    } else if (t3 === "Infinity" || t3 === "NaN")
      return +t3 || (e.s = NaN), e.e = NaN, e.d = null, e;
    if (dc.test(t3))
      r = 16, t3 = t3.toLowerCase();
    else if (pc.test(t3))
      r = 2;
    else if (mc.test(t3))
      r = 8;
    else
      throw Error(We + t3);
    for (o2 = t3.search(/p/i), o2 > 0 ? (l = +t3.slice(o2 + 1), t3 = t3.substring(2, o2)) : t3 = t3.slice(2), o2 = t3.indexOf("."), s3 = o2 >= 0, n3 = e.constructor, s3 && (t3 = t3.replace(".", ""), a = t3.length, o2 = a - o2, i3 = Ss(n3, new n3(r), o2, o2 * 2)), u3 = rn(t3, r, ge), c3 = u3.length - 1, o2 = c3;u3[o2] === 0; --o2)
      u3.pop();
    return o2 < 0 ? new n3(e.s * 0) : (e.e = ln(u3, c3), e.d = u3, x3 = false, s3 && (e = N(e, i3, a * 4)), l && (e = e.times(Math.abs(l) < 54 ? G(2, l) : it.pow(2, l))), x3 = true, e);
  }
  function bc(e, t3) {
    var r, n3 = t3.d.length;
    if (n3 < 3)
      return t3.isZero() ? t3 : vt(e, 2, t3, t3);
    r = 1.4 * Math.sqrt(n3), r = r > 16 ? 16 : r | 0, t3 = t3.times(1 / un(5, r)), t3 = vt(e, 2, t3, t3);
    for (var i3, o2 = new e(5), s3 = new e(16), a = new e(20);r--; )
      i3 = t3.times(t3), t3 = t3.times(o2.plus(i3.times(s3.times(i3).minus(a))));
    return t3;
  }
  function vt(e, t3, r, n3, i3) {
    var o2, s3, a, l, u3 = 1, c3 = e.precision, p3 = Math.ceil(c3 / b);
    for (x3 = false, l = r.times(r), a = new e(n3);; ) {
      if (s3 = N(a.times(l), new e(t3++ * t3++), c3, 1), a = i3 ? n3.plus(s3) : n3.minus(s3), n3 = N(s3.times(l), new e(t3++ * t3++), c3, 1), s3 = a.plus(n3), s3.d[p3] !== undefined) {
        for (o2 = p3;s3.d[o2] === a.d[o2] && o2--; )
          ;
        if (o2 == -1)
          break;
      }
      o2 = a, a = n3, n3 = s3, s3 = o2, u3++;
    }
    return x3 = true, s3.d.length = p3 + 1, s3;
  }
  function un(e, t3) {
    for (var r = e;--t3; )
      r *= e;
    return r;
  }
  function Os(e, t3) {
    var r, n3 = t3.s < 0, i3 = fe(e, e.precision, 1), o2 = i3.times(0.5);
    if (t3 = t3.abs(), t3.lte(o2))
      return Fe = n3 ? 4 : 1, t3;
    if (r = t3.divToInt(i3), r.isZero())
      Fe = n3 ? 3 : 2;
    else {
      if (t3 = t3.minus(r.times(i3)), t3.lte(o2))
        return Fe = bs(r) ? n3 ? 2 : 3 : n3 ? 4 : 1, t3;
      Fe = bs(r) ? n3 ? 1 : 4 : n3 ? 3 : 2;
    }
    return t3.minus(i3).abs();
  }
  function ki(e, t3, r, n3) {
    var i3, o2, s3, a, l, u3, c3, p3, d3, f3 = e.constructor, g = r !== undefined;
    if (g ? (oe(r, 1, He), n3 === undefined ? n3 = f3.rounding : oe(n3, 0, 8)) : (r = f3.precision, n3 = f3.rounding), !e.isFinite())
      c3 = Is(e);
    else {
      for (c3 = Pe(e), s3 = c3.indexOf("."), g ? (i3 = 2, t3 == 16 ? r = r * 4 - 3 : t3 == 8 && (r = r * 3 - 2)) : i3 = t3, s3 >= 0 && (c3 = c3.replace(".", ""), d3 = new f3(1), d3.e = c3.length - s3, d3.d = rn(Pe(d3), 10, i3), d3.e = d3.d.length), p3 = rn(c3, 10, i3), o2 = l = p3.length;p3[--l] == 0; )
        p3.pop();
      if (!p3[0])
        c3 = g ? "0p+0" : "0";
      else {
        if (s3 < 0 ? o2-- : (e = new f3(e), e.d = p3, e.e = o2, e = N(e, d3, r, n3, 0, i3), p3 = e.d, o2 = e.e, u3 = xs), s3 = p3[r], a = i3 / 2, u3 = u3 || p3[r + 1] !== undefined, u3 = n3 < 4 ? (s3 !== undefined || u3) && (n3 === 0 || n3 === (e.s < 0 ? 3 : 2)) : s3 > a || s3 === a && (n3 === 4 || u3 || n3 === 6 && p3[r - 1] & 1 || n3 === (e.s < 0 ? 8 : 7)), p3.length = r, u3)
          for (;++p3[--r] > i3 - 1; )
            p3[r] = 0, r || (++o2, p3.unshift(1));
        for (l = p3.length;!p3[l - 1]; --l)
          ;
        for (s3 = 0, c3 = "";s3 < l; s3++)
          c3 += Ci.charAt(p3[s3]);
        if (g) {
          if (l > 1)
            if (t3 == 16 || t3 == 8) {
              for (s3 = t3 == 16 ? 4 : 3, --l;l % s3; l++)
                c3 += "0";
              for (p3 = rn(c3, i3, t3), l = p3.length;!p3[l - 1]; --l)
                ;
              for (s3 = 1, c3 = "1.";s3 < l; s3++)
                c3 += Ci.charAt(p3[s3]);
            } else
              c3 = c3.charAt(0) + "." + c3.slice(1);
          c3 = c3 + (o2 < 0 ? "p" : "p+") + o2;
        } else if (o2 < 0) {
          for (;++o2; )
            c3 = "0" + c3;
          c3 = "0." + c3;
        } else if (++o2 > l)
          for (o2 -= l;o2--; )
            c3 += "0";
        else
          o2 < l && (c3 = c3.slice(0, o2) + "." + c3.slice(o2));
      }
      c3 = (t3 == 16 ? "0x" : t3 == 2 ? "0b" : t3 == 8 ? "0o" : "") + c3;
    }
    return e.s < 0 ? "-" + c3 : c3;
  }
  function Es(e, t3) {
    if (e.length > t3)
      return e.length = t3, true;
  }
  function Ec(e) {
    return new this(e).abs();
  }
  function wc(e) {
    return new this(e).acos();
  }
  function xc(e) {
    return new this(e).acosh();
  }
  function Pc(e, t3) {
    return new this(e).plus(t3);
  }
  function vc(e) {
    return new this(e).asin();
  }
  function Tc(e) {
    return new this(e).asinh();
  }
  function Rc(e) {
    return new this(e).atan();
  }
  function Cc(e) {
    return new this(e).atanh();
  }
  function Sc(e, t3) {
    e = new this(e), t3 = new this(t3);
    var r, n3 = this.precision, i3 = this.rounding, o2 = n3 + 4;
    return !e.s || !t3.s ? r = new this(NaN) : !e.d && !t3.d ? (r = fe(this, o2, 1).times(t3.s > 0 ? 0.25 : 0.75), r.s = e.s) : !t3.d || e.isZero() ? (r = t3.s < 0 ? fe(this, n3, i3) : new this(0), r.s = e.s) : !e.d || t3.isZero() ? (r = fe(this, o2, 1).times(0.5), r.s = e.s) : t3.s < 0 ? (this.precision = o2, this.rounding = 1, r = this.atan(N(e, t3, o2, 1)), t3 = fe(this, o2, 1), this.precision = n3, this.rounding = i3, r = e.s < 0 ? r.minus(t3) : r.plus(t3)) : r = this.atan(N(e, t3, o2, 1)), r;
  }
  function Ac(e) {
    return new this(e).cbrt();
  }
  function Ic(e) {
    return y3(e = new this(e), e.e + 1, 2);
  }
  function Oc(e, t3, r) {
    return new this(e).clamp(t3, r);
  }
  function kc(e) {
    if (!e || typeof e != "object")
      throw Error(an + "Object expected");
    var t3, r, n3, i3 = e.defaults === true, o2 = ["precision", 1, He, "rounding", 0, 8, "toExpNeg", -Pt, 0, "toExpPos", 0, Pt, "maxE", 0, Pt, "minE", -Pt, 0, "modulo", 0, 9];
    for (t3 = 0;t3 < o2.length; t3 += 3)
      if (r = o2[t3], i3 && (this[r] = Si[r]), (n3 = e[r]) !== undefined)
        if (ee(n3) === n3 && n3 >= o2[t3 + 1] && n3 <= o2[t3 + 2])
          this[r] = n3;
        else
          throw Error(We + r + ": " + n3);
    if (r = "crypto", i3 && (this[r] = Si[r]), (n3 = e[r]) !== undefined)
      if (n3 === true || n3 === false || n3 === 0 || n3 === 1)
        if (n3)
          if (typeof crypto < "u" && crypto && (crypto.getRandomValues || crypto.randomBytes))
            this[r] = true;
          else
            throw Error(vs);
        else
          this[r] = false;
      else
        throw Error(We + r + ": " + n3);
    return this;
  }
  function Dc(e) {
    return new this(e).cos();
  }
  function _c(e) {
    return new this(e).cosh();
  }
  function ks(e) {
    var t3, r, n3;
    function i3(o2) {
      var s3, a, l, u3 = this;
      if (!(u3 instanceof i3))
        return new i3(o2);
      if (u3.constructor = i3, ws(o2)) {
        u3.s = o2.s, x3 ? !o2.d || o2.e > i3.maxE ? (u3.e = NaN, u3.d = null) : o2.e < i3.minE ? (u3.e = 0, u3.d = [0]) : (u3.e = o2.e, u3.d = o2.d.slice()) : (u3.e = o2.e, u3.d = o2.d ? o2.d.slice() : o2.d);
        return;
      }
      if (l = typeof o2, l === "number") {
        if (o2 === 0) {
          u3.s = 1 / o2 < 0 ? -1 : 1, u3.e = 0, u3.d = [0];
          return;
        }
        if (o2 < 0 ? (o2 = -o2, u3.s = -1) : u3.s = 1, o2 === ~~o2 && o2 < 1e7) {
          for (s3 = 0, a = o2;a >= 10; a /= 10)
            s3++;
          x3 ? s3 > i3.maxE ? (u3.e = NaN, u3.d = null) : s3 < i3.minE ? (u3.e = 0, u3.d = [0]) : (u3.e = s3, u3.d = [o2]) : (u3.e = s3, u3.d = [o2]);
          return;
        } else if (o2 * 0 !== 0) {
          o2 || (u3.s = NaN), u3.e = NaN, u3.d = null;
          return;
        }
        return Oi(u3, o2.toString());
      } else if (l !== "string")
        throw Error(We + o2);
      return (a = o2.charCodeAt(0)) === 45 ? (o2 = o2.slice(1), u3.s = -1) : (a === 43 && (o2 = o2.slice(1)), u3.s = 1), Rs.test(o2) ? Oi(u3, o2) : yc(u3, o2);
    }
    if (i3.prototype = m3, i3.ROUND_UP = 0, i3.ROUND_DOWN = 1, i3.ROUND_CEIL = 2, i3.ROUND_FLOOR = 3, i3.ROUND_HALF_UP = 4, i3.ROUND_HALF_DOWN = 5, i3.ROUND_HALF_EVEN = 6, i3.ROUND_HALF_CEIL = 7, i3.ROUND_HALF_FLOOR = 8, i3.EUCLID = 9, i3.config = i3.set = kc, i3.clone = ks, i3.isDecimal = ws, i3.abs = Ec, i3.acos = wc, i3.acosh = xc, i3.add = Pc, i3.asin = vc, i3.asinh = Tc, i3.atan = Rc, i3.atanh = Cc, i3.atan2 = Sc, i3.cbrt = Ac, i3.ceil = Ic, i3.clamp = Oc, i3.cos = Dc, i3.cosh = _c, i3.div = Lc, i3.exp = Fc, i3.floor = Nc, i3.hypot = Mc, i3.ln = $c, i3.log = qc, i3.log10 = Vc, i3.log2 = jc, i3.max = Bc, i3.min = Uc, i3.mod = Gc, i3.mul = Qc, i3.pow = Jc, i3.random = Wc, i3.round = Hc, i3.sign = Kc, i3.sin = zc, i3.sinh = Yc, i3.sqrt = Zc, i3.sub = Xc, i3.sum = ep, i3.tan = tp, i3.tanh = rp, i3.trunc = np, e === undefined && (e = {}), e && e.defaults !== true)
      for (n3 = ["precision", "rounding", "toExpNeg", "toExpPos", "maxE", "minE", "modulo", "crypto"], t3 = 0;t3 < n3.length; )
        e.hasOwnProperty(r = n3[t3++]) || (e[r] = this[r]);
    return i3.config(e), i3;
  }
  function Lc(e, t3) {
    return new this(e).div(t3);
  }
  function Fc(e) {
    return new this(e).exp();
  }
  function Nc(e) {
    return y3(e = new this(e), e.e + 1, 3);
  }
  function Mc() {
    var e, t3, r = new this(0);
    for (x3 = false, e = 0;e < arguments.length; )
      if (t3 = new this(arguments[e++]), t3.d)
        r.d && (r = r.plus(t3.times(t3)));
      else {
        if (t3.s)
          return x3 = true, new this(1 / 0);
        r = t3;
      }
    return x3 = true, r.sqrt();
  }
  function ws(e) {
    return e instanceof it || e && e.toStringTag === Ts || false;
  }
  function $c(e) {
    return new this(e).ln();
  }
  function qc(e, t3) {
    return new this(e).log(t3);
  }
  function jc(e) {
    return new this(e).log(2);
  }
  function Vc(e) {
    return new this(e).log(10);
  }
  function Bc() {
    return As(this, arguments, "lt");
  }
  function Uc() {
    return As(this, arguments, "gt");
  }
  function Gc(e, t3) {
    return new this(e).mod(t3);
  }
  function Qc(e, t3) {
    return new this(e).mul(t3);
  }
  function Jc(e, t3) {
    return new this(e).pow(t3);
  }
  function Wc(e) {
    var t3, r, n3, i3, o2 = 0, s3 = new this(1), a = [];
    if (e === undefined ? e = this.precision : oe(e, 1, He), n3 = Math.ceil(e / b), this.crypto)
      if (crypto.getRandomValues)
        for (t3 = crypto.getRandomValues(new Uint32Array(n3));o2 < n3; )
          i3 = t3[o2], i3 >= 4290000000 ? t3[o2] = crypto.getRandomValues(new Uint32Array(1))[0] : a[o2++] = i3 % 1e7;
      else if (crypto.randomBytes) {
        for (t3 = crypto.randomBytes(n3 *= 4);o2 < n3; )
          i3 = t3[o2] + (t3[o2 + 1] << 8) + (t3[o2 + 2] << 16) + ((t3[o2 + 3] & 127) << 24), i3 >= 2140000000 ? crypto.randomBytes(4).copy(t3, o2) : (a.push(i3 % 1e7), o2 += 4);
        o2 = n3 / 4;
      } else
        throw Error(vs);
    else
      for (;o2 < n3; )
        a[o2++] = Math.random() * 1e7 | 0;
    for (n3 = a[--o2], e %= b, n3 && e && (i3 = G(10, b - e), a[o2] = (n3 / i3 | 0) * i3);a[o2] === 0; o2--)
      a.pop();
    if (o2 < 0)
      r = 0, a = [0];
    else {
      for (r = -1;a[0] === 0; r -= b)
        a.shift();
      for (n3 = 1, i3 = a[0];i3 >= 10; i3 /= 10)
        n3++;
      n3 < b && (r -= b - n3);
    }
    return s3.e = r, s3.d = a, s3;
  }
  function Hc(e) {
    return y3(e = new this(e), e.e + 1, this.rounding);
  }
  function Kc(e) {
    return e = new this(e), e.d ? e.d[0] ? e.s : 0 * e.s : e.s || NaN;
  }
  function zc(e) {
    return new this(e).sin();
  }
  function Yc(e) {
    return new this(e).sinh();
  }
  function Zc(e) {
    return new this(e).sqrt();
  }
  function Xc(e, t3) {
    return new this(e).sub(t3);
  }
  function ep() {
    var e = 0, t3 = arguments, r = new this(t3[e]);
    for (x3 = false;r.s && ++e < t3.length; )
      r = r.plus(t3[e]);
    return x3 = true, y3(r, this.precision, this.rounding);
  }
  function tp(e) {
    return new this(e).tan();
  }
  function rp(e) {
    return new this(e).tanh();
  }
  function np(e) {
    return y3(e = new this(e), e.e + 1, 1);
  }
  function Tt(e) {
    return it.isDecimal(e) ? true : e !== null && typeof e == "object" && typeof e.s == "number" && typeof e.e == "number" && typeof e.toFixed == "function" && Array.isArray(e.d);
  }
  function Rt(e) {
    return e instanceof lr;
  }
  function It(e) {
    return new Di(Ls(e));
  }
  function Ls(e) {
    let t3 = new At;
    for (let [r, n3] of Object.entries(e)) {
      let i3 = new mn(r, Fs(n3));
      t3.addField(i3);
    }
    return t3;
  }
  function Fs(e) {
    if (typeof e == "string")
      return new W(JSON.stringify(e));
    if (typeof e == "number" || typeof e == "boolean")
      return new W(String(e));
    if (typeof e == "bigint")
      return new W(`${e}n`);
    if (e === null)
      return new W("null");
    if (e === undefined)
      return new W("undefined");
    if (Tt(e))
      return new W(`new Prisma.Decimal("${e.toFixed()}")`);
    if (e instanceof Uint8Array)
      return Buffer.isBuffer(e) ? new W(`Buffer.alloc(${e.byteLength})`) : new W(`new Uint8Array(${e.byteLength})`);
    if (e instanceof Date) {
      let t3 = tn(e) ? e.toISOString() : "Invalid Date";
      return new W(`new Date("${t3}")`);
    }
    return e instanceof Le ? new W(`Prisma.${e._getName()}`) : Rt(e) ? new W(`prisma.${ys(e.modelName)}.\$fields.${e.name}`) : Array.isArray(e) ? op(e) : typeof e == "object" ? Ls(e) : new W(Object.prototype.toString.call(e));
  }
  function op(e) {
    let t3 = new St;
    for (let r of e)
      t3.addItem(Fs(r));
    return t3;
  }
  function fn(e, t3) {
    let r = t3 === "pretty" ? Ds : dn, n3 = e.renderAllMessages(r), i3 = new wt(0, { colors: r }).write(e).toString();
    return { message: n3, args: i3 };
  }
  function Ns(e) {
    if (e === undefined)
      return "";
    let t3 = It(e);
    return new wt(0, { colors: dn }).write(t3).toString();
  }
  function ot({ error: e, user_facing_error: t3 }, r, n3) {
    return t3.error_code ? new V2(ap(t3, n3), { code: t3.error_code, clientVersion: r, meta: t3.meta, batchRequestIdx: t3.batch_request_idx }) : new B(e, { clientVersion: r, batchRequestIdx: t3.batch_request_idx });
  }
  function ap(e, t3) {
    let r = e.message;
    return (t3 === "postgresql" || t3 === "postgres" || t3 === "mysql") && e.error_code === sp && (r += `
Prisma Accelerate has built-in connection pooling to prevent such errors: https://pris.ly/client/error-accelerate`), r;
  }
  function Ms(e) {
    var t3 = e.split(`
`);
    return t3.reduce(function(r, n3) {
      var i3 = cp(n3) || dp(n3) || gp(n3) || Ep(n3) || yp(n3);
      return i3 && r.push(i3), r;
    }, []);
  }
  function cp(e) {
    var t3 = lp.exec(e);
    if (!t3)
      return null;
    var r = t3[2] && t3[2].indexOf("native") === 0, n3 = t3[2] && t3[2].indexOf("eval") === 0, i3 = up.exec(t3[2]);
    return n3 && i3 != null && (t3[2] = i3[1], t3[3] = i3[2], t3[4] = i3[3]), { file: r ? null : t3[2], methodName: t3[1] || ur, arguments: r ? [t3[2]] : [], lineNumber: t3[3] ? +t3[3] : null, column: t3[4] ? +t3[4] : null };
  }
  function dp(e) {
    var t3 = pp.exec(e);
    return t3 ? { file: t3[2], methodName: t3[1] || ur, arguments: [], lineNumber: +t3[3], column: t3[4] ? +t3[4] : null } : null;
  }
  function gp(e) {
    var t3 = mp.exec(e);
    if (!t3)
      return null;
    var r = t3[3] && t3[3].indexOf(" > eval") > -1, n3 = fp.exec(t3[3]);
    return r && n3 != null && (t3[3] = n3[1], t3[4] = n3[2], t3[5] = null), { file: t3[3], methodName: t3[1] || ur, arguments: t3[2] ? t3[2].split(",") : [], lineNumber: t3[4] ? +t3[4] : null, column: t3[5] ? +t3[5] : null };
  }
  function yp(e) {
    var t3 = hp.exec(e);
    return t3 ? { file: t3[3], methodName: t3[1] || ur, arguments: [], lineNumber: +t3[4], column: t3[5] ? +t3[5] : null } : null;
  }
  function Ep(e) {
    var t3 = bp.exec(e);
    return t3 ? { file: t3[2], methodName: t3[1] || ur, arguments: [], lineNumber: +t3[3], column: t3[4] ? +t3[4] : null } : null;
  }
  function ze(e) {
    return e === "minimal" ? typeof $EnabledCallSite == "function" && e !== "minimal" ? new $EnabledCallSite : new _i : new Li;
  }
  function Ot(e = {}) {
    let t3 = xp(e);
    return Object.entries(t3).reduce((n3, [i3, o2]) => ($s[i3] !== undefined ? n3.select[i3] = { select: o2 } : n3[i3] = o2, n3), { select: {} });
  }
  function xp(e = {}) {
    return typeof e._count == "boolean" ? { ...e, _count: { _all: e._count } } : e;
  }
  function gn(e = {}) {
    return (t3) => (typeof e._count == "boolean" && (t3._count = t3._count._all), t3);
  }
  function qs(e, t3) {
    let r = gn(e);
    return t3({ action: "aggregate", unpacker: r, argsMapper: Ot })(e);
  }
  function Pp(e = {}) {
    let { select: t3, ...r } = e;
    return typeof t3 == "object" ? Ot({ ...r, _count: t3 }) : Ot({ ...r, _count: { _all: true } });
  }
  function vp(e = {}) {
    return typeof e.select == "object" ? (t3) => gn(e)(t3)._count : (t3) => gn(e)(t3)._count._all;
  }
  function js(e, t3) {
    return t3({ action: "count", unpacker: vp(e), argsMapper: Pp })(e);
  }
  function Tp(e = {}) {
    let t3 = Ot(e);
    if (Array.isArray(t3.by))
      for (let r of t3.by)
        typeof r == "string" && (t3.select[r] = true);
    else
      typeof t3.by == "string" && (t3.select[t3.by] = true);
    return t3;
  }
  function Rp(e = {}) {
    return (t3) => (typeof e?._count == "boolean" && t3.forEach((r) => {
      r._count = r._count._all;
    }), t3);
  }
  function Vs(e, t3) {
    return t3({ action: "groupBy", unpacker: Rp(e), argsMapper: Tp })(e);
  }
  function Bs(e, t3, r) {
    if (t3 === "aggregate")
      return (n3) => qs(n3, r);
    if (t3 === "count")
      return (n3) => js(n3, r);
    if (t3 === "groupBy")
      return (n3) => Vs(n3, r);
  }
  function Us(e, t3) {
    let r = t3.fields.filter((i3) => !i3.relationName), n3 = hi(r, (i3) => i3.name);
    return new Proxy({}, { get(i3, o2) {
      if (o2 in i3 || typeof o2 == "symbol")
        return i3[o2];
      let s3 = n3[o2];
      if (s3)
        return new lr(e, o2, s3.type, s3.isList, s3.kind === "enum");
    }, ...en(Object.keys(n3)) });
  }
  function Cp(e, t3) {
    return e === undefined || t3 === undefined ? [] : [...t3, "select", e];
  }
  function Sp(e, t3, r) {
    return t3 === undefined ? e ?? {} : Qs(t3, r, e || true);
  }
  function Ni(e, t3, r, n3, i3, o2) {
    let a = e._runtimeDataModel.models[t3].fields.reduce((l, u3) => ({ ...l, [u3.name]: u3 }), {});
    return (l) => {
      let u3 = ze(e._errorFormat), c3 = Cp(n3, i3), p3 = Sp(l, o2, c3), d3 = r({ dataPath: c3, callsite: u3 })(p3), f3 = Ap(e, t3);
      return new Proxy(d3, { get(g, h) {
        if (!f3.includes(h))
          return g[h];
        let T3 = [a[h].type, r, h], S = [c3, p3];
        return Ni(e, ...T3, ...S);
      }, ...en([...f3, ...Object.getOwnPropertyNames(d3)]) });
    };
  }
  function Ap(e, t3) {
    return e._runtimeDataModel.models[t3].fields.filter((r) => r.kind === "object").map((r) => r.name);
  }
  function he(e, t3, r, n3, i3) {
    this.type = e, this.content = t3, this.alias = r, this.length = (n3 || "").length | 0, this.greedy = !!i3;
  }
  function kp(e) {
    return Js[e] || Ip;
  }
  function Ws(e) {
    return Dp(e, P.languages.javascript);
  }
  function Dp(e, t3) {
    return P.tokenize(e, t3).map((n3) => he.stringify(n3)).join("");
  }
  function Ks(e) {
    return (0, Hs.default)(e);
  }
  function Fp({ message: e, originalMethod: t3, isPanic: r, callArguments: n3 }) {
    return { functionName: `prisma.${t3}()`, message: e, isPanic: r ?? false, callArguments: n3 };
  }
  function Np({ callsite: e, message: t3, originalMethod: r, isPanic: n3, callArguments: i3 }, o2) {
    let s3 = Fp({ message: t3, originalMethod: r, isPanic: n3, callArguments: i3 });
    if (!e || typeof window < "u" || false)
      return s3;
    let a = e.getLocation();
    if (!a || !a.lineNumber || !a.columnNumber)
      return s3;
    let l = Math.max(1, a.lineNumber - 3), u3 = yn.read(a.fileName)?.slice(l, a.lineNumber), c3 = u3?.lineAt(a.lineNumber);
    if (u3 && c3) {
      let p3 = $p(c3), d3 = Mp(c3);
      if (!d3)
        return s3;
      s3.functionName = `${d3.code})`, s3.location = a, n3 || (u3 = u3.mapLineAt(a.lineNumber, (g) => g.slice(0, d3.openingBraceIndex))), u3 = o2.highlightSource(u3);
      let f3 = String(u3.lastLineNumber).length;
      if (s3.contextLines = u3.mapLines((g, h) => o2.gray(String(h).padStart(f3)) + " " + g).mapLines((g) => o2.dim(g)).prependSymbolAt(a.lineNumber, o2.bold(o2.red("\u2192"))), i3) {
        let g = p3 + f3 + 1;
        g += 2, s3.callArguments = (0, Ys.default)(i3, g).slice(g);
      }
    }
    return s3;
  }
  function Mp(e) {
    let t3 = Object.keys(Ge.ModelAction).join("|"), n3 = new RegExp(String.raw`\.(${t3})\(`).exec(e);
    if (n3) {
      let i3 = n3.index + n3[0].length, o2 = e.lastIndexOf(" ", n3.index) + 1;
      return { code: e.slice(o2, i3), openingBraceIndex: i3 };
    }
    return null;
  }
  function $p(e) {
    let t3 = 0;
    for (let r = 0;r < e.length; r++) {
      if (e.charAt(r) !== " ")
        return t3;
      t3++;
    }
    return t3;
  }
  function qp({ functionName: e, location: t3, message: r, isPanic: n3, contextLines: i3, callArguments: o2 }, s3) {
    let a = [""], l = t3 ? " in" : ":";
    if (n3 ? (a.push(s3.red(`Oops, an unknown error occurred! This is ${s3.bold("on us")}, you did nothing wrong.`)), a.push(s3.red(`It occurred in the ${s3.bold(`\`${e}\``)} invocation${l}`))) : a.push(s3.red(`Invalid ${s3.bold(`\`${e}\``)} invocation${l}`)), t3 && a.push(s3.underline(jp(t3))), i3) {
      a.push("");
      let u3 = [i3.toString()];
      o2 && (u3.push(o2), u3.push(s3.dim(")"))), a.push(u3.join("")), o2 && a.push("");
    } else
      a.push(""), o2 && a.push(o2), a.push("");
    return a.push(r), a.join(`
`);
  }
  function jp(e) {
    let t3 = [e.fileName];
    return e.lineNumber && t3.push(String(e.lineNumber)), e.columnNumber && t3.push(String(e.columnNumber)), t3.join(":");
  }
  function kt(e) {
    let t3 = e.showColors ? _p : Lp, r;
    return r = Np(e, t3), qp(r, t3);
  }
  function Zs(e, t3, r, n3) {
    return e === Ge.ModelAction.findFirstOrThrow || e === Ge.ModelAction.findUniqueOrThrow ? Vp(t3, r, n3) : n3;
  }
  function Vp(e, t3, r) {
    return async (n3) => {
      if ("rejectOnNotFound" in n3.args) {
        let o2 = kt({ originalMethod: n3.clientMethod, callsite: n3.callsite, message: "'rejectOnNotFound' option is not supported" });
        throw new J(o2, { clientVersion: t3 });
      }
      return await r(n3).catch((o2) => {
        throw o2 instanceof V2 && o2.code === "P2025" ? new _e(`No ${e} found`, t3) : o2;
      });
    };
  }
  function Re(e) {
    return e.replace(/^./, (t3) => t3.toLowerCase());
  }
  function Mi(e, t3) {
    let r = e._extensions.getAllModelExtensions(t3) ?? {}, n3 = [Gp(e, t3), Jp(e, t3), sr(r), re("name", () => t3), re("$name", () => t3), re("$parent", () => e._appliedParent)];
    return xe({}, n3);
  }
  function Gp(e, t3) {
    let r = Re(t3), n3 = Object.keys(Ge.ModelAction).concat("count");
    return { getKeys() {
      return n3;
    }, getPropertyValue(i3) {
      let o2 = i3, s3 = (l) => e._request(l);
      s3 = Zs(o2, t3, e._clientVersion, s3);
      let a = (l) => (u3) => {
        let c3 = ze(e._errorFormat);
        return e._createPrismaPromise((p3) => {
          let d3 = { args: u3, dataPath: [], action: o2, model: t3, clientMethod: `${r}.${i3}`, jsModelName: r, transaction: p3, callsite: c3 };
          return s3({ ...d3, ...l });
        });
      };
      return Bp.includes(o2) ? Ni(e, t3, a) : Qp(i3) ? Bs(e, i3, a) : a({});
    } };
  }
  function Qp(e) {
    return Up.includes(e);
  }
  function Jp(e, t3) {
    return nt(re("fields", () => {
      let r = e._runtimeDataModel.models[t3];
      return Us(t3, r);
    }));
  }
  function Xs(e) {
    return e.replace(/^./, (t3) => t3.toUpperCase());
  }
  function cr(e) {
    let t3 = [Wp(e), re($i, () => e), re("$parent", () => e._appliedParent)], r = e._extensions.getAllClientExtensions();
    return r && t3.push(sr(r)), xe(e, t3);
  }
  function Wp(e) {
    let t3 = Object.keys(e._runtimeDataModel.models), r = t3.map(Re), n3 = [...new Set(t3.concat(r))];
    return nt({ getKeys() {
      return n3;
    }, getPropertyValue(i3) {
      let o2 = Xs(i3);
      if (e._runtimeDataModel.models[o2] !== undefined)
        return Mi(e, o2);
      if (e._runtimeDataModel.models[i3] !== undefined)
        return Mi(e, i3);
    }, getPropertyDescriptor(i3) {
      if (!r.includes(i3))
        return { enumerable: false };
    } });
  }
  function ea(e) {
    return e[$i] ? e[$i] : e;
  }
  function ta(e) {
    if (typeof e == "function")
      return e(this);
    if (e.client?.__AccelerateEngine) {
      let r = e.client.__AccelerateEngine;
      this._originalClient._engine = new r(this._originalClient._accelerateEngineConfig);
    }
    let t3 = Object.create(this._originalClient, { _extensions: { value: this._extensions.append(e) }, _appliedParent: { value: this, configurable: true }, $use: { value: undefined }, $on: { value: undefined } });
    return cr(t3);
  }
  function ra({ result: e, modelName: t3, select: r, omit: n3, extensions: i3 }) {
    let o2 = i3.getAllComputedFields(t3);
    if (!o2)
      return e;
    let s3 = [], a = [];
    for (let l of Object.values(o2)) {
      if (n3) {
        if (n3[l.name])
          continue;
        let u3 = l.needs.filter((c3) => n3[c3]);
        u3.length > 0 && a.push(bt(u3));
      } else if (r) {
        if (!r[l.name])
          continue;
        let u3 = l.needs.filter((c3) => !r[c3]);
        u3.length > 0 && a.push(bt(u3));
      }
      Hp(e, l.needs) && s3.push(Kp(l, xe(e, s3)));
    }
    return s3.length > 0 || a.length > 0 ? xe(e, [...s3, ...a]) : e;
  }
  function Hp(e, t3) {
    return t3.every((r) => gi(e, r));
  }
  function Kp(e, t3) {
    return nt(re(e.name, () => e.compute(t3)));
  }
  function bn({ visitor: e, result: t3, args: r, runtimeDataModel: n3, modelName: i3 }) {
    if (Array.isArray(t3)) {
      for (let s3 = 0;s3 < t3.length; s3++)
        t3[s3] = bn({ result: t3[s3], args: r, modelName: i3, runtimeDataModel: n3, visitor: e });
      return t3;
    }
    let o2 = e(t3, i3, r) ?? t3;
    return r.include && na({ includeOrSelect: r.include, result: o2, parentModelName: i3, runtimeDataModel: n3, visitor: e }), r.select && na({ includeOrSelect: r.select, result: o2, parentModelName: i3, runtimeDataModel: n3, visitor: e }), o2;
  }
  function na({ includeOrSelect: e, result: t3, parentModelName: r, runtimeDataModel: n3, visitor: i3 }) {
    for (let [o2, s3] of Object.entries(e)) {
      if (!s3 || t3[o2] == null)
        continue;
      let l = n3.models[r].fields.find((c3) => c3.name === o2);
      if (!l || l.kind !== "object" || !l.relationName)
        continue;
      let u3 = typeof s3 == "object" ? s3 : {};
      t3[o2] = bn({ visitor: i3, result: t3[o2], args: u3, modelName: l.type, runtimeDataModel: n3 });
    }
  }
  function ia({ result: e, modelName: t3, args: r, extensions: n3, runtimeDataModel: i3, globalOmit: o2 }) {
    return n3.isEmpty() || e == null || typeof e != "object" || !i3.models[t3] ? e : bn({ result: e, args: r ?? {}, modelName: t3, runtimeDataModel: i3, visitor: (a, l, u3) => {
      let c3 = Re(l);
      return ra({ result: a, modelName: c3, select: u3.select, omit: u3.select ? undefined : { ...o2?.[c3], ...u3.omit }, extensions: n3 });
    } });
  }
  function oa(e) {
    if (e instanceof ie)
      return zp(e);
    if (Array.isArray(e)) {
      let r = [e[0]];
      for (let n3 = 1;n3 < e.length; n3++)
        r[n3] = pr(e[n3]);
      return r;
    }
    let t3 = {};
    for (let r in e)
      t3[r] = pr(e[r]);
    return t3;
  }
  function zp(e) {
    return new ie(e.strings, e.values);
  }
  function pr(e) {
    if (typeof e != "object" || e == null || e instanceof Le || Rt(e))
      return e;
    if (Tt(e))
      return new ve(e.toFixed());
    if (xt(e))
      return new Date(+e);
    if (ArrayBuffer.isView(e))
      return e.slice(0);
    if (Array.isArray(e)) {
      let t3 = e.length, r;
      for (r = Array(t3);t3--; )
        r[t3] = pr(e[t3]);
      return r;
    }
    if (typeof e == "object") {
      let t3 = {};
      for (let r in e)
        r === "__proto__" ? Object.defineProperty(t3, r, { value: pr(e[r]), configurable: true, enumerable: true, writable: true }) : t3[r] = pr(e[r]);
      return t3;
    }
    De(e, "Unknown value");
  }
  function aa(e, t3, r, n3 = 0) {
    return e._createPrismaPromise((i3) => {
      let o2 = t3.customDataProxyFetch;
      return "transaction" in t3 && i3 !== undefined && (t3.transaction?.kind === "batch" && t3.transaction.lock.then(), t3.transaction = i3), n3 === r.length ? e._executeRequest(t3) : r[n3]({ model: t3.model, operation: t3.model ? t3.action : t3.clientMethod, args: oa(t3.args ?? {}), __internalParams: t3, query: (s3, a = t3) => {
        let l = a.customDataProxyFetch;
        return a.customDataProxyFetch = pa(o2, l), a.args = s3, aa(e, a, r, n3 + 1);
      } });
    });
  }
  function la(e, t3) {
    let { jsModelName: r, action: n3, clientMethod: i3 } = t3, o2 = r ? n3 : i3;
    if (e._extensions.isEmpty())
      return e._executeRequest(t3);
    let s3 = e._extensions.getAllQueryCallbacks(r ?? "$none", o2);
    return aa(e, t3, s3);
  }
  function ua(e) {
    return (t3) => {
      let r = { requests: t3 }, n3 = t3[0].extensions.getAllBatchQueryCallbacks();
      return n3.length ? ca(r, n3, 0, e) : e(r);
    };
  }
  function ca(e, t3, r, n3) {
    if (r === t3.length)
      return n3(e);
    let i3 = e.customDataProxyFetch, o2 = e.requests[0].transaction;
    return t3[r]({ args: { queries: e.requests.map((s3) => ({ model: s3.modelName, operation: s3.action, args: s3.args })), transaction: o2 ? { isolationLevel: o2.kind === "batch" ? o2.isolationLevel : undefined } : undefined }, __internalParams: e, query(s3, a = e) {
      let l = a.customDataProxyFetch;
      return a.customDataProxyFetch = pa(i3, l), ca(a, t3, r + 1, n3);
    } });
  }
  function pa(e = sa, t3 = sa) {
    return (r) => e(t3(r));
  }
  function ma(e, t3, r) {
    let n3 = Re(r);
    return !t3.result || !(t3.result.$allModels || t3.result[n3]) ? e : Yp({ ...e, ...da(t3.name, e, t3.result.$allModels), ...da(t3.name, e, t3.result[n3]) });
  }
  function Yp(e) {
    let t3 = new we, r = (n3, i3) => t3.getOrCreate(n3, () => i3.has(n3) ? [n3] : (i3.add(n3), e[n3] ? e[n3].needs.flatMap((o2) => r(o2, i3)) : [n3]));
    return ht(e, (n3) => ({ ...n3, needs: r(n3.name, new Set) }));
  }
  function da(e, t3, r) {
    return r ? ht(r, ({ needs: n3, compute: i3 }, o2) => ({ name: o2, needs: n3 ? Object.keys(n3).filter((s3) => n3[s3]) : [], compute: Zp(t3, o2, i3) })) : {};
  }
  function Zp(e, t3, r) {
    let n3 = e?.[t3]?.compute;
    return n3 ? (i3) => r({ ...i3, [t3]: n3(i3) }) : r;
  }
  function fa(e, t3) {
    if (!t3)
      return e;
    let r = { ...e };
    for (let n3 of Object.values(t3))
      if (e[n3.name])
        for (let i3 of n3.needs)
          r[i3] = true;
    return r;
  }
  function ga(e, t3) {
    if (!t3)
      return e;
    let r = { ...e };
    for (let n3 of Object.values(t3))
      if (!e[n3.name])
        for (let i3 of n3.needs)
          delete r[i3];
    return r;
  }
  function ba({ postinstall: e, ciName: t3, clientVersion: r }) {
    if (ha("checkPlatformCaching:postinstall", e), ha("checkPlatformCaching:ciName", t3), e === true && t3 && t3 in ya) {
      let n3 = `Prisma has detected that this project was built on ${t3}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \`prisma generate\` command during the build process.

Learn how: https://pris.ly/d/${ya[t3]}-build`;
      throw console.error(n3), new R(n3, r);
    }
  }
  function Ea(e, t3) {
    return e ? e.datasources ? e.datasources : e.datasourceUrl ? { [t3[0]]: { url: e.datasourceUrl } } : {} : {};
  }
  function wa() {
    return typeof Netlify == "object" ? "netlify" : typeof EdgeRuntime == "string" ? "edge-light" : globalThis.navigator?.userAgent === Xp ? "workerd" : globalThis.Deno ? "deno" : globalThis.__lagon__ ? "lagon" : globalThis.process?.release?.name === ed ? "node" : globalThis.Bun ? "bun" : globalThis.fastly ? "fastly" : "unknown";
  }
  function xn() {
    let e = wa();
    return { id: e, prettyName: td[e] || e, isEdge: ["workerd", "deno", "netlify", "edge-light"].includes(e) };
  }
  function Pn(e) {
    let { runtimeBinaryTarget: t3 } = e;
    return `Add "${t3}" to \`binaryTargets\` in the "schema.prisma" file and run \`prisma generate\` after saving it:

${rd(e)}`;
  }
  function rd(e) {
    let { generator: t3, generatorBinaryTargets: r, runtimeBinaryTarget: n3 } = e, i3 = { fromEnvVar: null, value: n3 }, o2 = [...r, i3];
    return di({ ...t3, binaryTargets: o2 });
  }
  function Ye(e) {
    let { runtimeBinaryTarget: t3 } = e;
    return `Prisma Client could not locate the Query Engine for runtime "${t3}".`;
  }
  function Ze(e) {
    let { searchedLocations: t3 } = e;
    return `The following locations have been searched:
${[...new Set(t3)].map((i3) => `  ${i3}`).join(`
`)}`;
  }
  function xa(e) {
    let { runtimeBinaryTarget: t3 } = e;
    return `${Ye(e)}

This happened because \`binaryTargets\` have been pinned, but the actual deployment also required "${t3}".
${Pn(e)}

${Ze(e)}`;
  }
  function vn(e) {
    return `We would appreciate if you could take the time to share some information with us.
Please help us by answering a few questions: https://pris.ly/${e}`;
  }
  function Tn(e) {
    let { errorStack: t3 } = e;
    return t3?.match(/\/\.next|\/next@|\/next\//) ? `

We detected that you are using Next.js, learn how to fix this: https://pris.ly/d/engine-not-found-nextjs.` : "";
  }
  function Pa(e) {
    let { queryEngineName: t3 } = e;
    return `${Ye(e)}${Tn(e)}

This is likely caused by a bundler that has not copied "${t3}" next to the resulting bundle.
Ensure that "${t3}" has been copied next to the bundle or in "${e.expectedLocation}".

${vn("engine-not-found-bundler-investigation")}

${Ze(e)}`;
  }
  function va(e) {
    let { runtimeBinaryTarget: t3, generatorBinaryTargets: r } = e, n3 = r.find((i3) => i3.native);
    return `${Ye(e)}

This happened because Prisma Client was generated for "${n3?.value ?? "unknown"}", but the actual deployment required "${t3}".
${Pn(e)}

${Ze(e)}`;
  }
  function Ta(e) {
    let { queryEngineName: t3 } = e;
    return `${Ye(e)}${Tn(e)}

This is likely caused by tooling that has not copied "${t3}" to the deployment folder.
Ensure that you ran \`prisma generate\` and that "${t3}" has been copied to "${e.expectedLocation}".

${vn("engine-not-found-tooling-investigation")}

${Ze(e)}`;
  }
  async function Ca(e, t3) {
    let r = { binary: process.env.PRISMA_QUERY_ENGINE_BINARY, library: process.env.PRISMA_QUERY_ENGINE_LIBRARY }[e] ?? t3.prismaPath;
    if (r !== undefined)
      return r;
    let { enginePath: n3, searchedLocations: i3 } = await od(e, t3);
    if (nd("enginePath", n3), n3 !== undefined && e === "binary" && ii(n3), n3 !== undefined)
      return t3.prismaPath = n3;
    let o2 = await tt(), s3 = t3.generator?.binaryTargets ?? [], a = s3.some((d3) => d3.native), l = !s3.some((d3) => d3.value === o2), u3 = __filename.match(id()) === null, c3 = { searchedLocations: i3, generatorBinaryTargets: s3, generator: t3.generator, runtimeBinaryTarget: o2, queryEngineName: Sa(e, o2), expectedLocation: dr.default.relative(process.cwd(), t3.dirname), errorStack: new Error().stack }, p3;
    throw a && l ? p3 = va(c3) : l ? p3 = xa(c3) : u3 ? p3 = Pa(c3) : p3 = Ta(c3), new R(p3, t3.clientVersion);
  }
  async function od(engineType, config) {
    let binaryTarget = await tt(), searchedLocations = [], dirname = eval("__dirname"), searchLocations = [config.dirname, dr.default.resolve(dirname, ".."), config.generator?.output?.value ?? dirname, dr.default.resolve(dirname, "../../../.prisma/client"), "/tmp/prisma-engines", config.cwd];
    __filename.includes("resolveEnginePath") && searchLocations.push(Go());
    for (let e of searchLocations) {
      let t3 = Sa(engineType, binaryTarget), r = dr.default.join(e, t3);
      if (searchedLocations.push(e), Ra.default.existsSync(r))
        return { enginePath: r, searchedLocations };
    }
    return { enginePath: undefined, searchedLocations };
  }
  function Sa(e, t3) {
    return e === "library" ? Nr(t3, "fs") : `query-engine-${t3}${t3 === "windows" ? ".exe" : ""}`;
  }
  function Aa(e) {
    return e ? e.replace(/".*"/g, '"X"').replace(/[\s:\[]([+-]?([0-9]*[.])?[0-9]+)/g, (t3) => `${t3[0]}5`) : "";
  }
  function Ia(e) {
    return e.split(`
`).map((t3) => t3.replace(/^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)\s*/, "").replace(/\+\d+\s*ms$/, "")).join(`
`);
  }
  function ka({ title: e, user: t3 = "prisma", repo: r = "prisma", template: n3 = "bug_report.yml", body: i3 }) {
    return (0, Oa.default)({ user: t3, repo: r, template: n3, title: e, body: i3 });
  }
  function Da({ version: e, binaryTarget: t3, title: r, description: n3, engineVersion: i3, database: o2, query: s3 }) {
    let a = wo(6000 - (s3?.length ?? 0)), l = Ia((0, qi.default)(a)), u3 = n3 ? `# Description
\`\`\`
${n3}
\`\`\`` : "", c3 = (0, qi.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | ${process.version?.padEnd(19)}| 
| OS              | ${t3?.padEnd(19)}|
| Prisma Client   | ${e?.padEnd(19)}|
| Query Engine    | ${i3?.padEnd(19)}|
| Database        | ${o2?.padEnd(19)}|

${u3}

## Logs
\`\`\`
${l}
\`\`\`

## Client Snippet
\`\`\`ts
// PLEASE FILL YOUR CODE SNIPPET HERE
\`\`\`

## Schema
\`\`\`prisma
// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE
\`\`\`

## Prisma Engine Query
\`\`\`
${s3 ? Aa(s3) : ""}
\`\`\`
`), p3 = ka({ title: r, body: c3 });
    return `${r}

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

${X(p3)}

If you want the Prisma team to look into it, please open the link above \uD83D\uDE4F
To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue. 
`;
  }
  function Dt({ inlineDatasources: e, overrideDatasources: t3, env: r, clientVersion: n3 }) {
    let i3, o2 = Object.keys(e)[0], s3 = e[o2]?.url, a = t3[o2]?.url;
    if (o2 === undefined ? i3 = undefined : a ? i3 = a : s3?.value ? i3 = s3.value : s3?.fromEnvVar && (i3 = r[s3.fromEnvVar]), s3?.fromEnvVar !== undefined && i3 === undefined)
      throw new R(`error: Environment variable not found: ${s3.fromEnvVar}.`, n3);
    if (i3 === undefined)
      throw new R("error: Missing URL environment variable, value, or override.", n3);
    return i3;
  }
  function A(e, t3) {
    return { ...e, isRetryable: t3 };
  }
  async function ld(e) {
    let t3;
    try {
      t3 = await e.text();
    } catch {
      return { type: "EmptyError" };
    }
    try {
      let r = JSON.parse(t3);
      if (typeof r == "string")
        switch (r) {
          case "InternalDataProxyError":
            return { type: "DataProxyError", body: r };
          default:
            return { type: "UnknownTextError", body: r };
        }
      if (typeof r == "object" && r !== null) {
        if ("is_panic" in r && "message" in r && "error_code" in r)
          return { type: "QueryEngineError", body: r };
        if ("EngineNotStarted" in r || "InteractiveTransactionMisrouted" in r || "InvalidRequestError" in r) {
          let n3 = Object.values(r)[0].reason;
          return typeof n3 == "string" && !["SchemaMissing", "EngineVersionNotSupported"].includes(n3) ? { type: "UnknownJsonError", body: r } : { type: "DataProxyError", body: r };
        }
      }
      return { type: "UnknownJsonError", body: r };
    } catch {
      return t3 === "" ? { type: "EmptyError" } : { type: "UnknownTextError", body: t3 };
    }
  }
  async function vr(e, t3) {
    if (e.ok)
      return;
    let r = { clientVersion: t3, response: e }, n3 = await ld(e);
    if (n3.type === "QueryEngineError")
      throw new V2(n3.body.message, { code: n3.body.error_code, clientVersion: t3 });
    if (n3.type === "DataProxyError") {
      if (n3.body === "InternalDataProxyError")
        throw new Lt(r, "Internal Data Proxy error");
      if ("EngineNotStarted" in n3.body) {
        if (n3.body.EngineNotStarted.reason === "SchemaMissing")
          return new lt(r);
        if (n3.body.EngineNotStarted.reason === "EngineVersionNotSupported")
          throw new hr(r);
        if ("EngineStartupError" in n3.body.EngineNotStarted.reason) {
          let { msg: i3, logs: o2 } = n3.body.EngineNotStarted.reason.EngineStartupError;
          throw new gr(r, i3, o2);
        }
        if ("KnownEngineStartupError" in n3.body.EngineNotStarted.reason) {
          let { msg: i3, error_code: o2 } = n3.body.EngineNotStarted.reason.KnownEngineStartupError;
          throw new R(i3, t3, o2);
        }
        if ("HealthcheckTimeout" in n3.body.EngineNotStarted.reason) {
          let { logs: i3 } = n3.body.EngineNotStarted.reason.HealthcheckTimeout;
          throw new fr(r, i3);
        }
      }
      if ("InteractiveTransactionMisrouted" in n3.body) {
        let i3 = { IDParseError: "Could not parse interactive transaction ID", NoQueryEngineFoundError: "Could not find Query Engine for the specified host and transaction ID", TransactionStartError: "Could not start interactive transaction" };
        throw new br(r, i3[n3.body.InteractiveTransactionMisrouted.reason]);
      }
      if ("InvalidRequestError" in n3.body)
        throw new Er(r, n3.body.InvalidRequestError.reason);
    }
    if (e.status === 401 || e.status === 403)
      throw new xr(r, Ft(Gi, n3));
    if (e.status === 404)
      return new wr(r, Ft(Bi, n3));
    if (e.status === 429)
      throw new Pr(r, Ft(Qi, n3));
    if (e.status === 504)
      throw new yr(r, Ft(Vi, n3));
    if (e.status >= 500)
      throw new Lt(r, Ft(Ui, n3));
    if (e.status >= 400)
      throw new mr(r, Ft(ji, n3));
  }
  function Ft(e, t3) {
    return t3.type === "EmptyError" ? e : `${e}: ${JSON.stringify(t3)}`;
  }
  function _a2(e) {
    let t3 = Math.pow(2, e) * 50, r = Math.ceil(Math.random() * t3) - Math.ceil(t3 / 2), n3 = t3 + r;
    return new Promise((i3) => setTimeout(() => i3(n3), n3));
  }
  function La(e) {
    let t3 = new TextEncoder().encode(e), r = "", n3 = t3.byteLength, i3 = n3 % 3, o2 = n3 - i3, s3, a, l, u3, c3;
    for (let p3 = 0;p3 < o2; p3 = p3 + 3)
      c3 = t3[p3] << 16 | t3[p3 + 1] << 8 | t3[p3 + 2], s3 = (c3 & 16515072) >> 18, a = (c3 & 258048) >> 12, l = (c3 & 4032) >> 6, u3 = c3 & 63, r += Ne[s3] + Ne[a] + Ne[l] + Ne[u3];
    return i3 == 1 ? (c3 = t3[o2], s3 = (c3 & 252) >> 2, a = (c3 & 3) << 4, r += Ne[s3] + Ne[a] + "==") : i3 == 2 && (c3 = t3[o2] << 8 | t3[o2 + 1], s3 = (c3 & 64512) >> 10, a = (c3 & 1008) >> 4, l = (c3 & 15) << 2, r += Ne[s3] + Ne[a] + Ne[l] + "="), r;
  }
  function Fa(e) {
    if (!!e.generator?.previewFeatures.some((r) => r.toLowerCase().includes("metrics")))
      throw new R("The `metrics` preview feature is not yet available with Accelerate.\nPlease remove `metrics` from the `previewFeatures` in your schema.\n\nMore information about Accelerate: https://pris.ly/d/accelerate", e.clientVersion);
  }
  function ud(e) {
    return e[0] * 1000 + e[1] / 1e6;
  }
  function Na(e) {
    return new Date(ud(e));
  }
  async function ut(e, t3, r = (n3) => n3) {
    let n3 = t3.clientVersion;
    try {
      return typeof fetch == "function" ? await r(fetch)(e, t3) : await r(Ji)(e, t3);
    } catch (i3) {
      let o2 = i3.message ?? "Unknown error";
      throw new Tr(o2, { clientVersion: n3 });
    }
  }
  function pd(e) {
    return { ...e.headers, "Content-Type": "application/json" };
  }
  function dd(e) {
    return { method: e.method, headers: pd(e) };
  }
  function md(e, t3) {
    return { text: () => Promise.resolve(Buffer.concat(e).toString()), json: () => Promise.resolve().then(() => JSON.parse(Buffer.concat(e).toString())), ok: t3.statusCode >= 200 && t3.statusCode <= 299, status: t3.statusCode, url: t3.url, headers: new Wi(t3.headers) };
  }
  async function Ji(e, t3 = {}) {
    let r = fd("https"), n3 = dd(t3), i3 = [], { origin: o2 } = new URL(e);
    return new Promise((s3, a) => {
      let l = r.request(e, n3, (u3) => {
        let { statusCode: c3, headers: { location: p3 } } = u3;
        c3 >= 301 && c3 <= 399 && p3 && (p3.startsWith("http") === false ? s3(Ji(`${o2}${p3}`, t3)) : s3(Ji(p3, t3))), u3.on("data", (d3) => i3.push(d3)), u3.on("end", () => s3(md(i3, u3))), u3.on("error", a);
      });
      l.on("error", a), l.end(t3.body ?? "");
    });
  }
  async function hd(e, t3) {
    let r = Ma["@prisma/engines-version"], n3 = t3.clientVersion ?? "unknown";
    if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION)
      return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;
    if (e.includes("accelerate") && n3 !== "0.0.0" && n3 !== "in-memory")
      return n3;
    let [i3, o2] = n3?.split("-") ?? [];
    if (o2 === undefined && gd.test(i3))
      return i3;
    if (o2 !== undefined || n3 === "0.0.0" || n3 === "in-memory") {
      if (e.startsWith("localhost") || e.startsWith("127.0.0.1"))
        return "0.0.0";
      let [s3] = r.split("-") ?? [], [a, l, u3] = s3.split("."), c3 = yd(`<=${a}.${l}.${u3}`), p3 = await ut(c3, { clientVersion: n3 });
      if (!p3.ok)
        throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${p3.status} ${p3.statusText}, response body: ${await p3.text() || "<empty body>"}`);
      let d3 = await p3.text();
      $a("length of body fetched from unpkg.com", d3.length);
      let f3;
      try {
        f3 = JSON.parse(d3);
      } catch (g) {
        throw console.error("JSON.parse error: body fetched from unpkg.com: ", d3), g;
      }
      return f3.version;
    }
    throw new at("Only `major.minor.patch` versions are supported by Accelerate.", { clientVersion: n3 });
  }
  async function qa(e, t3) {
    let r = await hd(e, t3);
    return $a("version", r), r;
  }
  function yd(e) {
    return encodeURI(`https://unpkg.com/prisma@${e}/package.json`);
  }
  function Va(e) {
    if (e?.kind === "itx")
      return e.options.id;
  }
  function bd() {
    let e = globalThis;
    return e[zi] === undefined && (e[zi] = {}), e[zi];
  }
  function Ed(e) {
    let t3 = bd();
    if (t3[e] !== undefined)
      return t3[e];
    let r = Ba.default.toNamespacedPath(e), n3 = { exports: {} }, i3 = 0;
    return process.platform !== "win32" && (i3 = Yi.default.constants.dlopen.RTLD_LAZY | Yi.default.constants.dlopen.RTLD_DEEPBIND), process.dlopen(n3, r, i3), t3[e] = n3.exports, n3.exports;
  }
  function xd(e) {
    return e.item_type === "query" && "query" in e;
  }
  function Pd(e) {
    return "level" in e ? e.level === "error" && e.message === "PANIC" : false;
  }
  function vd(e) {
    return typeof e == "object" && e !== null && e.error_code !== undefined;
  }
  function Xi(e, t3) {
    return Da({ binaryTarget: e.binaryTarget, title: t3, version: e.config.clientVersion, engineVersion: e.versionInfo?.commit, database: e.config.activeProvider, query: e.lastQuery });
  }
  function Ja({ copyEngine: e = true }, t3) {
    let r;
    try {
      r = Dt({ inlineDatasources: t3.inlineDatasources, overrideDatasources: t3.overrideDatasources, env: { ...t3.env, ...process.env }, clientVersion: t3.clientVersion });
    } catch {
    }
    e && r?.startsWith("prisma://") && Zt("recommend--no-engine", "In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)");
    let n3 = Ht(t3.generator), i3 = !!(r?.startsWith("prisma://") || !e), o2 = !!t3.adapter, s3 = n3 === "library", a = n3 === "binary";
    if (i3 && o2 || o2 && false) {
      let l;
      throw e ? r?.startsWith("prisma://") ? l = ["Prisma Client was configured to use the `adapter` option but the URL was a `prisma://` URL.", "Please either use the `prisma://` URL or remove the `adapter` from the Prisma Client constructor."] : l = ["Prisma Client was configured to use both the `adapter` and Accelerate, please chose one."] : l = ["Prisma Client was configured to use the `adapter` option but `prisma generate` was run with `--no-engine`.", "Please run `prisma generate` without `--no-engine` to be able to use Prisma Client with the adapter."], new J(l.join(`
`), { clientVersion: t3.clientVersion });
    }
    if (i3)
      return new Rr(t3);
    if (s3)
      return new Cr(t3);
    throw new J("Invalid client engine type, please use `library` or `binary`", { clientVersion: t3.clientVersion });
  }
  function Cn({ generator: e }) {
    return e?.previewFeatures ?? [];
  }
  function Nt(e) {
    return e.substring(0, 1).toLowerCase() + e.substring(1);
  }
  function za(e, t3, r) {
    let n3 = Ya(e), i3 = Td(n3), o2 = Cd(i3);
    o2 ? Sn(o2, t3, r) : t3.addErrorMessage(() => "Unknown error");
  }
  function Ya(e) {
    return e.errors.flatMap((t3) => t3.kind === "Union" ? Ya(t3) : [t3]);
  }
  function Td(e) {
    let t3 = new Map, r = [];
    for (let n3 of e) {
      if (n3.kind !== "InvalidArgumentType") {
        r.push(n3);
        continue;
      }
      let i3 = `${n3.selectionPath.join(".")}:${n3.argumentPath.join(".")}`, o2 = t3.get(i3);
      o2 ? t3.set(i3, { ...n3, argument: { ...n3.argument, typeNames: Rd(o2.argument.typeNames, n3.argument.typeNames) } }) : t3.set(i3, n3);
    }
    return r.push(...t3.values()), r;
  }
  function Rd(e, t3) {
    return [...new Set(e.concat(t3))];
  }
  function Cd(e) {
    return yi(e, (t3, r) => {
      let n3 = Ha(t3), i3 = Ha(r);
      return n3 !== i3 ? n3 - i3 : Ka(t3) - Ka(r);
    });
  }
  function Ha(e) {
    let t3 = 0;
    return Array.isArray(e.selectionPath) && (t3 += e.selectionPath.length), Array.isArray(e.argumentPath) && (t3 += e.argumentPath.length), t3;
  }
  function Ka(e) {
    switch (e.kind) {
      case "InvalidArgumentValue":
      case "ValueTooLarge":
        return 20;
      case "InvalidArgumentType":
        return 10;
      case "RequiredArgumentMissing":
        return -10;
      default:
        return 0;
    }
  }
  function Sn(e, t3, r) {
    switch (e.kind) {
      case "MutuallyExclusiveFields":
        Sd(e, t3);
        break;
      case "IncludeOnScalar":
        Ad(e, t3);
        break;
      case "EmptySelection":
        Id(e, t3, r);
        break;
      case "UnknownSelectionField":
        _d(e, t3);
        break;
      case "UnknownArgument":
        Ld(e, t3);
        break;
      case "UnknownInputField":
        Fd(e, t3);
        break;
      case "RequiredArgumentMissing":
        Nd(e, t3);
        break;
      case "InvalidArgumentType":
        Md(e, t3);
        break;
      case "InvalidArgumentValue":
        $d(e, t3);
        break;
      case "ValueTooLarge":
        qd(e, t3);
        break;
      case "SomeFieldsMissing":
        jd(e, t3);
        break;
      case "TooManyFieldsGiven":
        Vd(e, t3);
        break;
      case "Union":
        za(e, t3, r);
        break;
      default:
        throw new Error("not implemented: " + e.kind);
    }
  }
  function Sd(e, t3) {
    let r = t3.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
    r && (r.getField(e.firstField)?.markAsError(), r.getField(e.secondField)?.markAsError()), t3.addErrorMessage((n3) => `Please ${n3.bold("either")} use ${n3.green(`\`${e.firstField}\``)} or ${n3.green(`\`${e.secondField}\``)}, but ${n3.red("not both")} at the same time.`);
  }
  function Ad(e, t3) {
    let [r, n3] = Ar(e.selectionPath), i3 = e.outputType, o2 = t3.arguments.getDeepSelectionParent(r)?.value;
    if (o2 && (o2.getField(n3)?.markAsError(), i3))
      for (let s3 of i3.fields)
        s3.isRelation && o2.addSuggestion(new ue(s3.name, "true"));
    t3.addErrorMessage((s3) => {
      let a = `Invalid scalar field ${s3.red(`\`${n3}\``)} for ${s3.bold("include")} statement`;
      return i3 ? a += ` on model ${s3.bold(i3.name)}. ${Ir(s3)}` : a += ".", a += `
Note that ${s3.bold("include")} statements only accept relation fields.`, a;
    });
  }
  function Id(e, t3, r) {
    let n3 = t3.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
    if (n3) {
      let i3 = n3.getField("omit")?.value.asObject();
      if (i3) {
        Od(e, t3, i3);
        return;
      }
      if (n3.hasField("select")) {
        kd(e, t3);
        return;
      }
    }
    if (r?.[Nt(e.outputType.name)]) {
      Dd(e, t3);
      return;
    }
    t3.addErrorMessage(() => `Unknown field at "${e.selectionPath.join(".")} selection"`);
  }
  function Od(e, t3, r) {
    r.removeAllFields();
    for (let n3 of e.outputType.fields)
      r.addSuggestion(new ue(n3.name, "false"));
    t3.addErrorMessage((n3) => `The ${n3.red("omit")} statement includes every field of the model ${n3.bold(e.outputType.name)}. At least one field must be included in the result`);
  }
  function kd(e, t3) {
    let r = e.outputType, n3 = t3.arguments.getDeepSelectionParent(e.selectionPath)?.value, i3 = n3?.isEmpty() ?? false;
    n3 && (n3.removeAllFields(), tl(n3, r)), t3.addErrorMessage((o2) => i3 ? `The ${o2.red("`select`")} statement for type ${o2.bold(r.name)} must not be empty. ${Ir(o2)}` : `The ${o2.red("`select`")} statement for type ${o2.bold(r.name)} needs ${o2.bold("at least one truthy value")}.`);
  }
  function Dd(e, t3) {
    let r = new Sr;
    for (let i3 of e.outputType.fields)
      i3.isRelation || r.addField(i3.name, "false");
    let n3 = new ue("omit", r).makeRequired();
    if (e.selectionPath.length === 0)
      t3.arguments.addSuggestion(n3);
    else {
      let [i3, o2] = Ar(e.selectionPath), a = t3.arguments.getDeepSelectionParent(i3)?.value.asObject()?.getField(o2);
      if (a) {
        let l = a?.value.asObject() ?? new At;
        l.addSuggestion(n3), a.value = l;
      }
    }
    t3.addErrorMessage((i3) => `The global ${i3.red("omit")} configuration excludes every field of the model ${i3.bold(e.outputType.name)}. At least one field must be included in the result`);
  }
  function _d(e, t3) {
    let [r, n3] = Ar(e.selectionPath), i3 = t3.arguments.getDeepSubSelectionValue(r)?.asObject(), o2;
    if (i3) {
      let s3 = i3.getFieldValue("select")?.asObject(), a = i3.getFieldValue("include")?.asObject(), l = i3.getFieldValue("omit")?.asObject();
      s3?.hasField(n3) ? (o2 = "select", s3.getField(n3)?.markAsError(), tl(s3, e.outputType)) : a?.hasField(n3) ? (o2 = "include", a.getField(n3)?.markAsError(), Bd(a, e.outputType)) : l?.hasField(n3) && (o2 = "omit", l.getField(n3)?.markAsError(), Ud(l, e.outputType));
    }
    t3.addErrorMessage((s3) => {
      let a = [`Unknown field ${s3.red(`\`${n3}\``)}`];
      return o2 && a.push(`for ${s3.bold(o2)} statement`), a.push(`on model ${s3.bold(`\`${e.outputType.name}\``)}.`), a.push(Ir(s3)), a.join(" ");
    });
  }
  function Ld(e, t3) {
    let r = e.argumentPath[0], n3 = t3.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
    n3 && (n3.getField(r)?.markAsError(), Gd(n3, e.arguments)), t3.addErrorMessage((i3) => Xa(i3, r, e.arguments.map((o2) => o2.name)));
  }
  function Fd(e, t3) {
    let [r, n3] = Ar(e.argumentPath), i3 = t3.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
    if (i3) {
      i3.getDeepField(e.argumentPath)?.markAsError();
      let o2 = i3.getDeepFieldValue(r)?.asObject();
      o2 && rl(o2, e.inputType);
    }
    t3.addErrorMessage((o2) => Xa(o2, n3, e.inputType.fields.map((s3) => s3.name)));
  }
  function Xa(e, t3, r) {
    let n3 = [`Unknown argument \`${e.red(t3)}\`.`], i3 = Jd(t3, r);
    return i3 && n3.push(`Did you mean \`${e.green(i3)}\`?`), r.length > 0 && n3.push(Ir(e)), n3.join(" ");
  }
  function Nd(e, t3) {
    let r;
    t3.addErrorMessage((l) => r?.value instanceof W && r.value.text === "null" ? `Argument \`${l.green(o2)}\` must not be ${l.red("null")}.` : `Argument \`${l.green(o2)}\` is missing.`);
    let n3 = t3.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
    if (!n3)
      return;
    let [i3, o2] = Ar(e.argumentPath), s3 = new Sr, a = n3.getDeepFieldValue(i3)?.asObject();
    if (a)
      if (r = a.getField(o2), r && a.removeField(o2), e.inputTypes.length === 1 && e.inputTypes[0].kind === "object") {
        for (let l of e.inputTypes[0].fields)
          s3.addField(l.name, l.typeNames.join(" | "));
        a.addSuggestion(new ue(o2, s3).makeRequired());
      } else {
        let l = e.inputTypes.map(el).join(" | ");
        a.addSuggestion(new ue(o2, l).makeRequired());
      }
  }
  function el(e) {
    return e.kind === "list" ? `${el(e.elementType)}[]` : e.name;
  }
  function Md(e, t3) {
    let r = e.argument.name, n3 = t3.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
    n3 && n3.getDeepFieldValue(e.argumentPath)?.markAsError(), t3.addErrorMessage((i3) => {
      let o2 = An("or", e.argument.typeNames.map((s3) => i3.green(s3)));
      return `Argument \`${i3.bold(r)}\`: Invalid value provided. Expected ${o2}, provided ${i3.red(e.inferredType)}.`;
    });
  }
  function $d(e, t3) {
    let r = e.argument.name, n3 = t3.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
    n3 && n3.getDeepFieldValue(e.argumentPath)?.markAsError(), t3.addErrorMessage((i3) => {
      let o2 = [`Invalid value for argument \`${i3.bold(r)}\``];
      if (e.underlyingError && o2.push(`: ${e.underlyingError}`), o2.push("."), e.argument.typeNames.length > 0) {
        let s3 = An("or", e.argument.typeNames.map((a) => i3.green(a)));
        o2.push(` Expected ${s3}.`);
      }
      return o2.join("");
    });
  }
  function qd(e, t3) {
    let r = e.argument.name, n3 = t3.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i3;
    if (n3) {
      let s3 = n3.getDeepField(e.argumentPath)?.value;
      s3?.markAsError(), s3 instanceof W && (i3 = s3.text);
    }
    t3.addErrorMessage((o2) => {
      let s3 = ["Unable to fit value"];
      return i3 && s3.push(o2.red(i3)), s3.push(`into a 64-bit signed integer for field \`${o2.bold(r)}\``), s3.join(" ");
    });
  }
  function jd(e, t3) {
    let r = e.argumentPath[e.argumentPath.length - 1], n3 = t3.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
    if (n3) {
      let i3 = n3.getDeepFieldValue(e.argumentPath)?.asObject();
      i3 && rl(i3, e.inputType);
    }
    t3.addErrorMessage((i3) => {
      let o2 = [`Argument \`${i3.bold(r)}\` of type ${i3.bold(e.inputType.name)} needs`];
      return e.constraints.minFieldCount === 1 ? e.constraints.requiredFields ? o2.push(`${i3.green("at least one of")} ${An("or", e.constraints.requiredFields.map((s3) => `\`${i3.bold(s3)}\``))} arguments.`) : o2.push(`${i3.green("at least one")} argument.`) : o2.push(`${i3.green(`at least ${e.constraints.minFieldCount}`)} arguments.`), o2.push(Ir(i3)), o2.join(" ");
    });
  }
  function Vd(e, t3) {
    let r = e.argumentPath[e.argumentPath.length - 1], n3 = t3.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i3 = [];
    if (n3) {
      let o2 = n3.getDeepFieldValue(e.argumentPath)?.asObject();
      o2 && (o2.markAsError(), i3 = Object.keys(o2.getFields()));
    }
    t3.addErrorMessage((o2) => {
      let s3 = [`Argument \`${o2.bold(r)}\` of type ${o2.bold(e.inputType.name)} needs`];
      return e.constraints.minFieldCount === 1 && e.constraints.maxFieldCount == 1 ? s3.push(`${o2.green("exactly one")} argument,`) : e.constraints.maxFieldCount == 1 ? s3.push(`${o2.green("at most one")} argument,`) : s3.push(`${o2.green(`at most ${e.constraints.maxFieldCount}`)} arguments,`), s3.push(`but you provided ${An("and", i3.map((a) => o2.red(a)))}. Please choose`), e.constraints.maxFieldCount === 1 ? s3.push("one.") : s3.push(`${e.constraints.maxFieldCount}.`), s3.join(" ");
    });
  }
  function tl(e, t3) {
    for (let r of t3.fields)
      e.hasField(r.name) || e.addSuggestion(new ue(r.name, "true"));
  }
  function Bd(e, t3) {
    for (let r of t3.fields)
      r.isRelation && !e.hasField(r.name) && e.addSuggestion(new ue(r.name, "true"));
  }
  function Ud(e, t3) {
    for (let r of t3.fields)
      !e.hasField(r.name) && !r.isRelation && e.addSuggestion(new ue(r.name, "true"));
  }
  function Gd(e, t3) {
    for (let r of t3)
      e.hasField(r.name) || e.addSuggestion(new ue(r.name, r.typeNames.join(" | ")));
  }
  function rl(e, t3) {
    if (t3.kind === "object")
      for (let r of t3.fields)
        e.hasField(r.name) || e.addSuggestion(new ue(r.name, r.typeNames.join(" | ")));
  }
  function Ar(e) {
    let t3 = [...e], r = t3.pop();
    if (!r)
      throw new Error("unexpected empty path");
    return [t3, r];
  }
  function Ir({ green: e, enabled: t3 }) {
    return "Available options are " + (t3 ? `listed in ${e("green")}` : "marked with ?") + ".";
  }
  function An(e, t3) {
    if (t3.length === 1)
      return t3[0];
    let r = [...t3], n3 = r.pop();
    return `${r.join(", ")} ${e} ${n3}`;
  }
  function Jd(e, t3) {
    let r = 1 / 0, n3;
    for (let i3 of t3) {
      let o2 = (0, Za.default)(e, i3);
      o2 > Qd || o2 < r && (r = o2, n3 = i3);
    }
    return n3;
  }
  function In({ args: e, errors: t3, errorFormat: r, callsite: n3, originalMethod: i3, clientVersion: o2, globalOmit: s3 }) {
    let a = It(e);
    for (let p3 of t3)
      Sn(p3, a, s3);
    let { message: l, args: u3 } = fn(a, r), c3 = kt({ message: l, callsite: n3, originalMethod: i3, showColors: r === "pretty", callArguments: u3 });
    throw new J(c3, { clientVersion: o2 });
  }
  function nl({ modelName: e, action: t3, args: r, runtimeDataModel: n3, extensions: i3, callsite: o2, clientMethod: s3, errorFormat: a, clientVersion: l, previewFeatures: u3, globalOmit: c3 }) {
    let p3 = new to({ runtimeDataModel: n3, modelName: e, action: t3, rootArgs: r, callsite: o2, extensions: i3, selectionPath: [], argumentPath: [], originalMethod: s3, errorFormat: a, clientVersion: l, previewFeatures: u3, globalOmit: c3 });
    return { modelName: e, action: Wd[t3], query: Or2(r, p3) };
  }
  function Or2({ select: e, include: t3, ...r } = {}, n3) {
    let i3;
    return n3.isPreviewFeatureOn("omitApi") && (i3 = r.omit, delete r.omit), { arguments: ol(r, n3), selection: Hd(e, t3, i3, n3) };
  }
  function Hd(e, t3, r, n3) {
    return e ? (t3 ? n3.throwValidationError({ kind: "MutuallyExclusiveFields", firstField: "include", secondField: "select", selectionPath: n3.getSelectionPath() }) : r && n3.isPreviewFeatureOn("omitApi") && n3.throwValidationError({ kind: "MutuallyExclusiveFields", firstField: "omit", secondField: "select", selectionPath: n3.getSelectionPath() }), Zd(e, n3)) : Kd(n3, t3, r);
  }
  function Kd(e, t3, r) {
    let n3 = {};
    return e.modelOrType && !e.isRawAction() && (n3.$composites = true, n3.$scalars = true), t3 && zd(n3, t3, e), e.isPreviewFeatureOn("omitApi") && Yd(n3, r, e), n3;
  }
  function zd(e, t3, r) {
    for (let [n3, i3] of Object.entries(t3)) {
      if (i3 === false) {
        e[n3] = false;
        continue;
      }
      let o2 = r.findField(n3);
      if (o2 && o2.kind !== "object" && r.throwValidationError({ kind: "IncludeOnScalar", selectionPath: r.getSelectionPath().concat(n3), outputType: r.getOutputTypeDescription() }), o2) {
        e[n3] = Or2(i3 === true ? {} : i3, r.nestSelection(n3));
        continue;
      }
      if (i3 === true) {
        e[n3] = true;
        continue;
      }
      e[n3] = Or2(i3, r.nestSelection(n3));
    }
  }
  function Yd(e, t3, r) {
    let n3 = r.getComputedFields(), i3 = { ...r.getGlobalOmit(), ...t3 }, o2 = ga(i3, n3);
    for (let [s3, a] of Object.entries(o2)) {
      let l = r.findField(s3);
      n3?.[s3] && !l || (e[s3] = !a);
    }
  }
  function Zd(e, t3) {
    let r = {}, n3 = t3.getComputedFields(), i3 = fa(e, n3);
    for (let [o2, s3] of Object.entries(i3)) {
      let a = t3.findField(o2);
      if (!(n3?.[o2] && !a)) {
        if (s3 === false) {
          r[o2] = false;
          continue;
        }
        if (s3 === true) {
          a?.kind === "object" ? r[o2] = Or2({}, t3.nestSelection(o2)) : r[o2] = true;
          continue;
        }
        r[o2] = Or2(s3, t3.nestSelection(o2));
      }
    }
    return r;
  }
  function il(e, t3) {
    if (e === null)
      return null;
    if (typeof e == "string" || typeof e == "number" || typeof e == "boolean")
      return e;
    if (typeof e == "bigint")
      return { $type: "BigInt", value: String(e) };
    if (xt(e)) {
      if (tn(e))
        return { $type: "DateTime", value: e.toISOString() };
      t3.throwValidationError({ kind: "InvalidArgumentValue", selectionPath: t3.getSelectionPath(), argumentPath: t3.getArgumentPath(), argument: { name: t3.getArgumentName(), typeNames: ["Date"] }, underlyingError: "Provided Date object is invalid" });
    }
    if (Rt(e))
      return { $type: "FieldRef", value: { _ref: e.name, _container: e.modelName } };
    if (Array.isArray(e))
      return Xd(e, t3);
    if (ArrayBuffer.isView(e))
      return { $type: "Bytes", value: Buffer.from(e).toString("base64") };
    if (em(e))
      return e.values;
    if (Tt(e))
      return { $type: "Decimal", value: e.toFixed() };
    if (e instanceof Le) {
      if (e !== Zr.instances[e._getName()])
        throw new Error("Invalid ObjectEnumValue");
      return { $type: "Enum", value: e._getName() };
    }
    if (tm(e))
      return e.toJSON();
    if (typeof e == "object")
      return ol(e, t3);
    t3.throwValidationError({ kind: "InvalidArgumentValue", selectionPath: t3.getSelectionPath(), argumentPath: t3.getArgumentPath(), argument: { name: t3.getArgumentName(), typeNames: [] }, underlyingError: `We could not serialize ${Object.prototype.toString.call(e)} value. Serialize the object to JSON or implement a ".toJSON()" method on it` });
  }
  function ol(e, t3) {
    if (e.$type)
      return { $type: "Raw", value: e };
    let r = {};
    for (let n3 in e) {
      let i3 = e[n3];
      i3 !== undefined && (r[n3] = il(i3, t3.nestArgument(n3)));
    }
    return r;
  }
  function Xd(e, t3) {
    let r = [];
    for (let n3 = 0;n3 < e.length; n3++) {
      let i3 = t3.nestArgument(String(n3)), o2 = e[n3];
      o2 === undefined && t3.throwValidationError({ kind: "InvalidArgumentValue", selectionPath: i3.getSelectionPath(), argumentPath: i3.getArgumentPath(), argument: { name: `${t3.getArgumentName()}[${n3}]`, typeNames: [] }, underlyingError: "Can not use `undefined` value within array. Use `null` or filter out `undefined` values" }), r.push(il(o2, i3));
    }
    return r;
  }
  function em(e) {
    return typeof e == "object" && e !== null && e.__prismaRawParameters__ === true;
  }
  function tm(e) {
    return typeof e == "object" && e !== null && typeof e.toJSON == "function";
  }
  function Mt(e) {
    try {
      return ll(e, "fast");
    } catch {
      return ll(e, "slow");
    }
  }
  function ll(e, t3) {
    return JSON.stringify(e.map((r) => cl(r, t3)));
  }
  function cl(e, t3) {
    return Array.isArray(e) ? e.map((r) => cl(r, t3)) : typeof e == "bigint" ? { prisma__type: "bigint", prisma__value: e.toString() } : xt(e) ? { prisma__type: "date", prisma__value: e.toJSON() } : ve.isDecimal(e) ? { prisma__type: "decimal", prisma__value: e.toJSON() } : Buffer.isBuffer(e) ? { prisma__type: "bytes", prisma__value: e.toString("base64") } : rm(e) || ArrayBuffer.isView(e) ? { prisma__type: "bytes", prisma__value: Buffer.from(e).toString("base64") } : typeof e == "object" && t3 === "slow" ? pl(e) : e;
  }
  function rm(e) {
    return e instanceof ArrayBuffer || e instanceof SharedArrayBuffer ? true : typeof e == "object" && e !== null ? e[Symbol.toStringTag] === "ArrayBuffer" || e[Symbol.toStringTag] === "SharedArrayBuffer" : false;
  }
  function pl(e) {
    if (typeof e != "object" || e === null)
      return e;
    if (typeof e.toJSON == "function")
      return e.toJSON();
    if (Array.isArray(e))
      return e.map(ul);
    let t3 = {};
    for (let r of Object.keys(e))
      t3[r] = ul(e[r]);
    return t3;
  }
  function ul(e) {
    return typeof e == "bigint" ? e.toString() : pl(e);
  }
  function ro(e, t3, r, n3) {
    if (!(e !== "postgresql" && e !== "cockroachdb") && r.length > 0 && im.exec(t3))
      throw new Error(`Running ALTER using ${n3} is not supported
Using the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.

Example:
  await prisma.$executeRawUnsafe(\`ALTER USER prisma WITH PASSWORD '\${password}'\`)

More Information: https://pris.ly/d/execute-raw
`);
  }
  function io(e) {
    return function(r) {
      let n3, i3 = (o2 = e) => {
        try {
          return o2 === undefined || o2?.kind === "itx" ? n3 ??= hl(r(o2)) : hl(r(o2));
        } catch (s3) {
          return Promise.reject(s3);
        }
      };
      return { then(o2, s3) {
        return i3().then(o2, s3);
      }, catch(o2) {
        return i3().catch(o2);
      }, finally(o2) {
        return i3().finally(o2);
      }, requestTransaction(o2) {
        let s3 = i3(o2);
        return s3.requestTransaction ? s3.requestTransaction(o2) : s3;
      }, [Symbol.toStringTag]: "PrismaPromise" };
    };
  }
  function hl(e) {
    return typeof e.then == "function" ? e : Promise.resolve(e);
  }
  function bl(e) {
    return e.includes("tracing") ? new oo : yl;
  }
  function El(e, t3 = () => {
  }) {
    let r, n3 = new Promise((i3) => r = i3);
    return { then(i3) {
      return --e === 0 && r(t3()), i3?.(n3);
    } };
  }
  function wl(e) {
    return typeof e == "string" ? e : e.reduce((t3, r) => {
      let n3 = typeof r == "string" ? r : r.level;
      return n3 === "query" ? t3 : t3 && (r === "info" || t3 === "info") ? "info" : n3;
    }, undefined);
  }
  function kn(e) {
    return typeof e.batchRequestIdx == "number";
  }
  function Dn(e) {
    return e === null ? e : Array.isArray(e) ? e.map(Dn) : typeof e == "object" ? om(e) ? sm(e) : ht(e, Dn) : e;
  }
  function om(e) {
    return e !== null && typeof e == "object" && typeof e.$type == "string";
  }
  function sm({ $type: e, value: t3 }) {
    switch (e) {
      case "BigInt":
        return BigInt(t3);
      case "Bytes":
        return Buffer.from(t3, "base64");
      case "DateTime":
        return new Date(t3);
      case "Decimal":
        return new ve(t3);
      case "Json":
        return JSON.parse(t3);
      default:
        De(t3, "Unknown tagged value");
    }
  }
  function xl(e) {
    if (e.action !== "findUnique" && e.action !== "findUniqueOrThrow")
      return;
    let t3 = [];
    return e.modelName && t3.push(e.modelName), e.query.arguments && t3.push(so(e.query.arguments)), t3.push(so(e.query.selection)), t3.join("");
  }
  function so(e) {
    return `(${Object.keys(e).sort().map((r) => {
      let n3 = e[r];
      return typeof n3 == "object" && n3 !== null ? `(${r} ${so(n3)})` : r;
    }).join(" ")})`;
  }
  function ao(e) {
    return am[e];
  }
  function ct(e, t3) {
    if (t3 === null)
      return t3;
    switch (e) {
      case "bigint":
        return BigInt(t3);
      case "bytes":
        return Buffer.from(t3, "base64");
      case "decimal":
        return new ve(t3);
      case "datetime":
      case "date":
        return new Date(t3);
      case "time":
        return new Date(`1970-01-01T${t3}Z`);
      case "bigint-array":
        return t3.map((r) => ct("bigint", r));
      case "bytes-array":
        return t3.map((r) => ct("bytes", r));
      case "decimal-array":
        return t3.map((r) => ct("decimal", r));
      case "datetime-array":
        return t3.map((r) => ct("datetime", r));
      case "date-array":
        return t3.map((r) => ct("date", r));
      case "time-array":
        return t3.map((r) => ct("time", r));
      default:
        return t3;
    }
  }
  function Pl(e) {
    let t3 = [], r = lm(e);
    for (let n3 = 0;n3 < e.rows.length; n3++) {
      let i3 = e.rows[n3], o2 = { ...r };
      for (let s3 = 0;s3 < i3.length; s3++)
        o2[e.columns[s3]] = ct(e.types[s3], i3[s3]);
      t3.push(o2);
    }
    return t3;
  }
  function lm(e) {
    let t3 = {};
    for (let r = 0;r < e.columns.length; r++)
      t3[e.columns[r]] = null;
    return t3;
  }
  function cm(e) {
    if (e) {
      if (e.kind === "batch")
        return { kind: "batch", options: { isolationLevel: e.isolationLevel } };
      if (e.kind === "itx")
        return { kind: "itx", options: Tl(e) };
      De(e, "Unknown transaction kind");
    }
  }
  function Tl(e) {
    return { id: e.id, payload: e.payload };
  }
  function pm(e, t3) {
    return kn(e) && t3?.kind === "batch" && e.batchRequestIdx !== t3.index;
  }
  function dm(e) {
    return e.code === "P2009" || e.code === "P2012";
  }
  function Rl(e) {
    if (e.kind === "Union")
      return { kind: "Union", errors: e.errors.map(Rl) };
    if (Array.isArray(e.selectionPath)) {
      let [, ...t3] = e.selectionPath;
      return { ...e, selectionPath: t3 };
    }
    return e;
  }
  function _l(e, t3) {
    for (let [r, n3] of Object.entries(e)) {
      if (!Al.includes(r)) {
        let i3 = $t(r, Al);
        throw new L(`Unknown property ${r} provided to PrismaClient constructor.${i3}`);
      }
      fm[r](n3, t3);
    }
    if (e.datasourceUrl && e.datasources)
      throw new L('Can not use "datasourceUrl" and "datasources" options at the same time. Pick one of them');
  }
  function $t(e, t3) {
    if (t3.length === 0 || typeof e != "string")
      return "";
    let r = gm(e, t3);
    return r ? ` Did you mean "${r}"?` : "";
  }
  function gm(e, t3) {
    if (t3.length === 0)
      return null;
    let r = t3.map((i3) => ({ value: i3, distance: (0, Dl.default)(e, i3) }));
    r.sort((i3, o2) => i3.distance < o2.distance ? -1 : 1);
    let n3 = r[0];
    return n3.distance < 3 ? n3.value : null;
  }
  function hm(e, t3) {
    return kl(t3.models, e) ?? kl(t3.types, e);
  }
  function kl(e, t3) {
    let r = Object.keys(e).find((n3) => Nt(n3) === t3);
    if (r)
      return e[r];
  }
  function ym(e, t3) {
    let r = It(e);
    for (let o2 of t3)
      switch (o2.kind) {
        case "UnknownModel":
          r.arguments.getField(o2.modelKey)?.markAsError(), r.addErrorMessage(() => `Unknown model name: ${o2.modelKey}.`);
          break;
        case "UnknownField":
          r.arguments.getDeepField([o2.modelKey, o2.fieldName])?.markAsError(), r.addErrorMessage(() => `Model "${o2.modelKey}" does not have a field named "${o2.fieldName}".`);
          break;
        case "RelationInOmit":
          r.arguments.getDeepField([o2.modelKey, o2.fieldName])?.markAsError(), r.addErrorMessage(() => 'Relations are already excluded by default and can not be specified in "omit".');
          break;
        case "InvalidFieldValue":
          r.arguments.getDeepFieldValue([o2.modelKey, o2.fieldName])?.markAsError(), r.addErrorMessage(() => "Omit field option value must be a boolean.");
          break;
      }
    let { message: n3, args: i3 } = fn(r, "colorless");
    return `Error validating "omit" option:

${i3}

${n3}`;
  }
  function Ll(e) {
    return e.length === 0 ? Promise.resolve([]) : new Promise((t3, r) => {
      let n3 = new Array(e.length), i3 = null, o2 = false, s3 = 0, a = () => {
        o2 || (s3++, s3 === e.length && (o2 = true, i3 ? r(i3) : t3(n3)));
      }, l = (u3) => {
        o2 || (o2 = true, r(u3));
      };
      for (let u3 = 0;u3 < e.length; u3++)
        e[u3].then((c3) => {
          n3[u3] = c3, a();
        }, (c3) => {
          if (!kn(c3)) {
            l(c3);
            return;
          }
          c3.batchRequestIdx === u3 ? l(c3) : (i3 || (i3 = c3), a());
        });
    });
  }
  function jl(e) {

    class t3 {
      constructor(n3) {
        this._originalClient = this;
        this._middlewares = new On;
        this._createPrismaPromise = io();
        this.$extends = ta;
        e = n3?.__internal?.configOverride?.(e) ?? e, ba(e), n3 && _l(n3, e);
        let i3 = new $l.EventEmitter().on("error", () => {
        });
        this._extensions = wn.empty(), this._previewFeatures = Cn(e), this._clientVersion = e.clientVersion ?? Sl, this._activeProvider = e.activeProvider, this._globalOmit = n3?.omit, this._tracingHelper = bl(this._previewFeatures);
        let o2 = { rootEnvPath: e.relativeEnvPaths.rootEnvPath && kr.default.resolve(e.dirname, e.relativeEnvPaths.rootEnvPath), schemaEnvPath: e.relativeEnvPaths.schemaEnvPath && kr.default.resolve(e.dirname, e.relativeEnvPaths.schemaEnvPath) }, s3;
        if (n3?.adapter) {
          s3 = vi(n3.adapter);
          let l = e.activeProvider === "postgresql" ? "postgres" : e.activeProvider;
          if (s3.provider !== l)
            throw new R(`The Driver Adapter \`${s3.adapterName}\`, based on \`${s3.provider}\`, is not compatible with the provider \`${l}\` specified in the Prisma schema.`, this._clientVersion);
          if (n3.datasources || n3.datasourceUrl !== undefined)
            throw new R("Custom datasource configuration is not compatible with Prisma Driver Adapters. Please define the database connection string directly in the Driver Adapter configuration.", this._clientVersion);
        }
        let a = !s3 && Wt(o2, { conflictCheck: "none" }) || e.injectableEdgeEnv?.();
        try {
          let l = n3 ?? {}, u3 = l.__internal ?? {}, c3 = u3.debug === true;
          c3 && F.enable("prisma:client");
          let p3 = kr.default.resolve(e.dirname, e.relativePath);
          ql.default.existsSync(p3) || (p3 = e.dirname), Xe("dirname", e.dirname), Xe("relativePath", e.relativePath), Xe("cwd", p3);
          let d3 = u3.engine || {};
          if (l.errorFormat ? this._errorFormat = l.errorFormat : process.env.NO_COLOR ? this._errorFormat = "colorless" : this._errorFormat = "colorless", this._runtimeDataModel = e.runtimeDataModel, this._engineConfig = { cwd: p3, dirname: e.dirname, enableDebugLogs: c3, allowTriggerPanic: d3.allowTriggerPanic, datamodelPath: kr.default.join(e.dirname, e.filename ?? "schema.prisma"), prismaPath: d3.binaryPath ?? undefined, engineEndpoint: d3.endpoint, generator: e.generator, showColors: this._errorFormat === "pretty", logLevel: l.log && wl(l.log), logQueries: l.log && !!(typeof l.log == "string" ? l.log === "query" : l.log.find((f3) => typeof f3 == "string" ? f3 === "query" : f3.level === "query")), env: a?.parsed ?? {}, flags: [], engineWasm: e.engineWasm, clientVersion: e.clientVersion, engineVersion: e.engineVersion, previewFeatures: this._previewFeatures, activeProvider: e.activeProvider, inlineSchema: e.inlineSchema, overrideDatasources: Ea(l, e.datasourceNames), inlineDatasources: e.inlineDatasources, inlineSchemaHash: e.inlineSchemaHash, tracingHelper: this._tracingHelper, transactionOptions: { maxWait: l.transactionOptions?.maxWait ?? 2000, timeout: l.transactionOptions?.timeout ?? 5000, isolationLevel: l.transactionOptions?.isolationLevel }, logEmitter: i3, isBundled: e.isBundled, adapter: s3 }, this._accelerateEngineConfig = { ...this._engineConfig, accelerateUtils: { resolveDatasourceUrl: Dt, getBatchRequestPayload: Et, prismaGraphQLToJSError: ot, PrismaClientUnknownRequestError: B, PrismaClientInitializationError: R, PrismaClientKnownRequestError: V2, debug: F("prisma:client:accelerateEngine"), engineVersion: Nl.version, clientVersion: e.clientVersion } }, Xe("clientVersion", e.clientVersion), this._engine = Ja(e, this._engineConfig), this._requestHandler = new Ln(this, i3), l.log)
            for (let f3 of l.log) {
              let g = typeof f3 == "string" ? f3 : f3.emit === "stdout" ? f3.level : null;
              g && this.$on(g, (h) => {
                Yt.log(`${Yt.tags[g] ?? ""}`, h.message || h.query);
              });
            }
          this._metrics = new yt(this._engine);
        } catch (l) {
          throw l.clientVersion = this._clientVersion, l;
        }
        return this._appliedParent = cr(this);
      }
      get [Symbol.toStringTag]() {
        return "PrismaClient";
      }
      $use(n3) {
        this._middlewares.use(n3);
      }
      $on(n3, i3) {
        n3 === "beforeExit" ? this._engine.onBeforeExit(i3) : n3 && this._engineConfig.logEmitter.on(n3, i3);
      }
      $connect() {
        try {
          return this._engine.start();
        } catch (n3) {
          throw n3.clientVersion = this._clientVersion, n3;
        }
      }
      async $disconnect() {
        try {
          await this._engine.stop();
        } catch (n3) {
          throw n3.clientVersion = this._clientVersion, n3;
        } finally {
          xo();
        }
      }
      $executeRawInternal(n3, i3, o2, s3) {
        let a = this._activeProvider;
        return this._request({ action: "executeRaw", args: o2, transaction: n3, clientMethod: i3, argsMapper: no({ clientMethod: i3, activeProvider: a }), callsite: ze(this._errorFormat), dataPath: [], middlewareArgsMapper: s3 });
      }
      $executeRaw(n3, ...i3) {
        return this._createPrismaPromise((o2) => {
          if (n3.raw !== undefined || n3.sql !== undefined) {
            let [s3, a] = Fl(n3, i3);
            return ro(this._activeProvider, s3.text, s3.values, Array.isArray(n3) ? "prisma.$executeRaw`<SQL>`" : "prisma.$executeRaw(sql`<SQL>`)"), this.$executeRawInternal(o2, "$executeRaw", s3, a);
          }
          throw new J("`$executeRaw` is a tag function, please use it like the following:\n```\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\n```\n\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\n", { clientVersion: this._clientVersion });
        });
      }
      $executeRawUnsafe(n3, ...i3) {
        return this._createPrismaPromise((o2) => (ro(this._activeProvider, n3, i3, "prisma.$executeRawUnsafe(<SQL>, [...values])"), this.$executeRawInternal(o2, "$executeRawUnsafe", [n3, ...i3])));
      }
      $runCommandRaw(n3) {
        if (e.activeProvider !== "mongodb")
          throw new J(`The ${e.activeProvider} provider does not support \$runCommandRaw. Use the mongodb provider.`, { clientVersion: this._clientVersion });
        return this._createPrismaPromise((i3) => this._request({ args: n3, clientMethod: "$runCommandRaw", dataPath: [], action: "runCommandRaw", argsMapper: sl, callsite: ze(this._errorFormat), transaction: i3 }));
      }
      async $queryRawInternal(n3, i3, o2, s3) {
        let a = this._activeProvider;
        return this._request({ action: "queryRaw", args: o2, transaction: n3, clientMethod: i3, argsMapper: no({ clientMethod: i3, activeProvider: a }), callsite: ze(this._errorFormat), dataPath: [], middlewareArgsMapper: s3 });
      }
      $queryRaw(n3, ...i3) {
        return this._createPrismaPromise((o2) => {
          if (n3.raw !== undefined || n3.sql !== undefined)
            return this.$queryRawInternal(o2, "$queryRaw", ...Fl(n3, i3));
          throw new J("`$queryRaw` is a tag function, please use it like the following:\n```\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\n```\n\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\n", { clientVersion: this._clientVersion });
        });
      }
      $queryRawTyped(n3) {
        return this._createPrismaPromise((i3) => {
          if (!this._hasPreviewFlag("typedSql"))
            throw new J("`typedSql` preview feature must be enabled in order to access $queryRawTyped API", { clientVersion: this._clientVersion });
          return this.$queryRawInternal(i3, "$queryRawTyped", n3);
        });
      }
      $queryRawUnsafe(n3, ...i3) {
        return this._createPrismaPromise((o2) => this.$queryRawInternal(o2, "$queryRawUnsafe", [n3, ...i3]));
      }
      _transactionWithArray({ promises: n3, options: i3 }) {
        let o2 = wm.nextId(), s3 = El(n3.length), a = n3.map((l, u3) => {
          if (l?.[Symbol.toStringTag] !== "PrismaPromise")
            throw new Error("All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.");
          let c3 = i3?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel, p3 = { kind: "batch", id: o2, index: u3, isolationLevel: c3, lock: s3 };
          return l.requestTransaction?.(p3) ?? l;
        });
        return Ll(a);
      }
      async _transactionWithCallback({ callback: n3, options: i3 }) {
        let o2 = { traceparent: this._tracingHelper.getTraceParent() }, s3 = { maxWait: i3?.maxWait ?? this._engineConfig.transactionOptions.maxWait, timeout: i3?.timeout ?? this._engineConfig.transactionOptions.timeout, isolationLevel: i3?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel }, a = await this._engine.transaction("start", o2, s3), l;
        try {
          let u3 = { kind: "itx", ...a };
          l = await n3(this._createItxClient(u3)), await this._engine.transaction("commit", o2, a);
        } catch (u3) {
          throw await this._engine.transaction("rollback", o2, a).catch(() => {
          }), u3;
        }
        return l;
      }
      _createItxClient(n3) {
        return cr(xe(ea(this), [re("_appliedParent", () => this._appliedParent._createItxClient(n3)), re("_createPrismaPromise", () => io(n3)), re(Em, () => n3.id), bt(dl)]));
      }
      $transaction(n3, i3) {
        let o2;
        typeof n3 == "function" ? this._engineConfig.adapter?.adapterName === "@prisma/adapter-d1" ? o2 = () => {
          throw new Error("Cloudflare D1 does not support interactive transactions. We recommend you to refactor your queries with that limitation in mind, and use batch transactions with `prisma.$transactions([])` where applicable.");
        } : o2 = () => this._transactionWithCallback({ callback: n3, options: i3 }) : o2 = () => this._transactionWithArray({ promises: n3, options: i3 });
        let s3 = { name: "transaction", attributes: { method: "$transaction" } };
        return this._tracingHelper.runInChildSpan(s3, o2);
      }
      _request(n3) {
        n3.otelParentCtx = this._tracingHelper.getActiveContext();
        let i3 = n3.middlewareArgsMapper ?? bm, o2 = { args: i3.requestArgsToMiddlewareArgs(n3.args), dataPath: n3.dataPath, runInTransaction: !!n3.transaction, action: n3.action, model: n3.model }, s3 = { middleware: { name: "middleware", middleware: true, attributes: { method: "$use" }, active: false }, operation: { name: "operation", attributes: { method: o2.action, model: o2.model, name: o2.model ? `${o2.model}.${o2.action}` : o2.action } } }, a = -1, l = async (u3) => {
          let c3 = this._middlewares.get(++a);
          if (c3)
            return this._tracingHelper.runInChildSpan(s3.middleware, (O) => c3(u3, (T3) => (O?.end(), l(T3))));
          let { runInTransaction: p3, args: d3, ...f3 } = u3, g = { ...n3, ...f3 };
          d3 && (g.args = i3.middlewareArgsToRequestArgs(d3)), n3.transaction !== undefined && p3 === false && delete g.transaction;
          let h = await la(this, g);
          return g.model ? ia({ result: h, modelName: g.model, args: g.args, extensions: this._extensions, runtimeDataModel: this._runtimeDataModel, globalOmit: this._globalOmit }) : h;
        };
        return this._tracingHelper.runInChildSpan(s3.operation, () => new Ml.AsyncResource("prisma-client-request").runInAsyncScope(() => l(o2)));
      }
      async _executeRequest({ args: n3, clientMethod: i3, dataPath: o2, callsite: s3, action: a, model: l, argsMapper: u3, transaction: c3, unpacker: p3, otelParentCtx: d3, customDataProxyFetch: f3 }) {
        try {
          n3 = u3 ? u3(n3) : n3;
          let g = { name: "serialize" }, h = this._tracingHelper.runInChildSpan(g, () => nl({ modelName: l, runtimeDataModel: this._runtimeDataModel, action: a, args: n3, clientMethod: i3, callsite: s3, extensions: this._extensions, errorFormat: this._errorFormat, clientVersion: this._clientVersion, previewFeatures: this._previewFeatures, globalOmit: this._globalOmit }));
          return F.enabled("prisma:client") && (Xe("Prisma Client call:"), Xe(`prisma.${i3}(${Ns(n3)})`), Xe("Generated request:"), Xe(JSON.stringify(h, null, 2) + `
`)), c3?.kind === "batch" && await c3.lock, this._requestHandler.request({ protocolQuery: h, modelName: l, action: a, clientMethod: i3, dataPath: o2, callsite: s3, args: n3, extensions: this._extensions, transaction: c3, unpacker: p3, otelParentCtx: d3, otelChildCtx: this._tracingHelper.getActiveContext(), globalOmit: this._globalOmit, customDataProxyFetch: f3 });
        } catch (g) {
          throw g.clientVersion = this._clientVersion, g;
        }
      }
      get $metrics() {
        if (!this._hasPreviewFlag("metrics"))
          throw new J("`metrics` preview feature must be enabled in order to access metrics API", { clientVersion: this._clientVersion });
        return this._metrics;
      }
      _hasPreviewFlag(n3) {
        return !!this._engineConfig.previewFeatures?.includes(n3);
      }
      $applyPendingMigrations() {
        return this._engine.applyPendingMigrations();
      }
    }
    return t3;
  }
  function Fl(e, t3) {
    return xm(e) ? [new ie(e, t3), fl] : [e, gl];
  }
  function xm(e) {
    return Array.isArray(e) && Array.isArray(e.raw);
  }
  function Vl(e) {
    return new Proxy(e, { get(t3, r) {
      if (r in t3)
        return t3[r];
      if (!Pm.has(r))
        throw new TypeError(`Invalid enum value: ${String(r)}`);
    } });
  }
  function Bl(e) {
    Wt(e, { conflictCheck: "warn" });
  }
  var __dirname = "C:\\Users\\User\\Desktop\\project\\my-app\\app\\node_modules\\@prisma\\client\\runtime", __filename = "C:\\Users\\User\\Desktop\\project\\my-app\\app\\node_modules\\@prisma\\client\\runtime\\library.js";
  var Ul = Object.create;
  var _r = Object.defineProperty;
  var Gl = Object.getOwnPropertyDescriptor;
  var Ql = Object.getOwnPropertyNames;
  var Jl = Object.getPrototypeOf;
  var Wl = Object.prototype.hasOwnProperty;
  var Z = (e, t3) => () => (t3 || e((t3 = { exports: {} }).exports, t3), t3.exports);
  var jt = (e, t3) => {
    for (var r in t3)
      _r(e, r, { get: t3[r], enumerable: true });
  };
  var lo = (e, t3, r, n3) => {
    if (t3 && typeof t3 == "object" || typeof t3 == "function")
      for (let i3 of Ql(t3))
        !Wl.call(e, i3) && i3 !== r && _r(e, i3, { get: () => t3[i3], enumerable: !(n3 = Gl(t3, i3)) || n3.enumerable });
    return e;
  };
  var k = (e, t3, r) => (r = e != null ? Ul(Jl(e)) : {}, lo(t3 || !e || !e.__esModule ? _r(r, "default", { value: e, enumerable: true }) : r, e));
  var Hl = (e) => lo(_r({}, "__esModule", { value: true }), e);
  var _o = Z((Ym, Hn) => {
    var v3 = Hn.exports;
    Hn.exports.default = v3;
    var D = "\x1B[", Qt = "\x1B]", mt = "\x07", Ur = ";", Do = false;
    v3.cursorTo = (e, t3) => {
      if (typeof e != "number")
        throw new TypeError("The `x` argument is required");
      return typeof t3 != "number" ? D + (e + 1) + "G" : D + (t3 + 1) + ";" + (e + 1) + "H";
    };
    v3.cursorMove = (e, t3) => {
      if (typeof e != "number")
        throw new TypeError("The `x` argument is required");
      let r = "";
      return e < 0 ? r += D + -e + "D" : e > 0 && (r += D + e + "C"), t3 < 0 ? r += D + -t3 + "A" : t3 > 0 && (r += D + t3 + "B"), r;
    };
    v3.cursorUp = (e = 1) => D + e + "A";
    v3.cursorDown = (e = 1) => D + e + "B";
    v3.cursorForward = (e = 1) => D + e + "C";
    v3.cursorBackward = (e = 1) => D + e + "D";
    v3.cursorLeft = D + "G";
    v3.cursorSavePosition = Do ? "\x1B7" : D + "s";
    v3.cursorRestorePosition = Do ? "\x1B8" : D + "u";
    v3.cursorGetPosition = D + "6n";
    v3.cursorNextLine = D + "E";
    v3.cursorPrevLine = D + "F";
    v3.cursorHide = D + "?25l";
    v3.cursorShow = D + "?25h";
    v3.eraseLines = (e) => {
      let t3 = "";
      for (let r = 0;r < e; r++)
        t3 += v3.eraseLine + (r < e - 1 ? v3.cursorUp() : "");
      return e && (t3 += v3.cursorLeft), t3;
    };
    v3.eraseEndLine = D + "K";
    v3.eraseStartLine = D + "1K";
    v3.eraseLine = D + "2K";
    v3.eraseDown = D + "J";
    v3.eraseUp = D + "1J";
    v3.eraseScreen = D + "2J";
    v3.scrollUp = D + "S";
    v3.scrollDown = D + "T";
    v3.clearScreen = "\x1Bc";
    v3.clearTerminal = process.platform === "win32" ? `${v3.eraseScreen}${D}0f` : `${v3.eraseScreen}${D}3J${D}H`;
    v3.beep = mt;
    v3.link = (e, t3) => [Qt, "8", Ur, Ur, t3, mt, e, Qt, "8", Ur, Ur, mt].join("");
    v3.image = (e, t3 = {}) => {
      let r = `${Qt}1337;File=inline=1`;
      return t3.width && (r += `;width=${t3.width}`), t3.height && (r += `;height=${t3.height}`), t3.preserveAspectRatio === false && (r += ";preserveAspectRatio=0"), r + ":" + e.toString("base64") + mt;
    };
    v3.iTerm = { setCwd: (e = process.cwd()) => `${Qt}50;CurrentDir=${e}${mt}`, annotation: (e, t3 = {}) => {
      let r = `${Qt}1337;`, n3 = typeof t3.x < "u", i3 = typeof t3.y < "u";
      if ((n3 || i3) && !(n3 && i3 && typeof t3.length < "u"))
        throw new Error("`x`, `y` and `length` must be defined when `x` or `y` is defined");
      return e = e.replace(/\|/g, ""), r += t3.isHidden ? "AddHiddenAnnotation=" : "AddAnnotation=", t3.length > 0 ? r += (n3 ? [e, t3.length, t3.x, t3.y] : [t3.length, e]).join("|") : r += e, r + mt;
    } };
  });
  var Kn = Z((Zm, Lo) => {
    Lo.exports = (e, t3 = process.argv) => {
      let r = e.startsWith("-") ? "" : e.length === 1 ? "-" : "--", n3 = t3.indexOf(r + e), i3 = t3.indexOf("--");
      return n3 !== -1 && (i3 === -1 || n3 < i3);
    };
  });
  var Mo = Z((Xm, No) => {
    var _u = import.meta.require("os"), Fo = import.meta.require("tty"), de = Kn(), { env: Q } = process, Ue;
    de("no-color") || de("no-colors") || de("color=false") || de("color=never") ? Ue = 0 : (de("color") || de("colors") || de("color=true") || de("color=always")) && (Ue = 1);
    "FORCE_COLOR" in Q && (Q.FORCE_COLOR === "true" ? Ue = 1 : Q.FORCE_COLOR === "false" ? Ue = 0 : Ue = Q.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(Q.FORCE_COLOR, 10), 3));
    function zn(e) {
      return e === 0 ? false : { level: e, hasBasic: true, has256: e >= 2, has16m: e >= 3 };
    }
    function Yn(e, t3) {
      if (Ue === 0)
        return 0;
      if (de("color=16m") || de("color=full") || de("color=truecolor"))
        return 3;
      if (de("color=256"))
        return 2;
      if (e && !t3 && Ue === undefined)
        return 0;
      let r = Ue || 0;
      if (Q.TERM === "dumb")
        return r;
      if (process.platform === "win32") {
        let n3 = _u.release().split(".");
        return Number(n3[0]) >= 10 && Number(n3[2]) >= 10586 ? Number(n3[2]) >= 14931 ? 3 : 2 : 1;
      }
      if ("CI" in Q)
        return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((n3) => (n3 in Q)) || Q.CI_NAME === "codeship" ? 1 : r;
      if ("TEAMCITY_VERSION" in Q)
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(Q.TEAMCITY_VERSION) ? 1 : 0;
      if (Q.COLORTERM === "truecolor")
        return 3;
      if ("TERM_PROGRAM" in Q) {
        let n3 = parseInt((Q.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (Q.TERM_PROGRAM) {
          case "iTerm.app":
            return n3 >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      return /-256(color)?$/i.test(Q.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Q.TERM) || ("COLORTERM" in Q) ? 1 : r;
    }
    function Lu(e) {
      let t3 = Yn(e, e && e.isTTY);
      return zn(t3);
    }
    No.exports = { supportsColor: Lu, stdout: zn(Yn(true, Fo.isatty(1))), stderr: zn(Yn(true, Fo.isatty(2))) };
  });
  var jo = Z((ef, qo) => {
    var Fu = Mo(), ft = Kn();
    function $o(e) {
      if (/^\d{3,4}$/.test(e)) {
        let r = /(\d{1,2})(\d{2})/.exec(e);
        return { major: 0, minor: parseInt(r[1], 10), patch: parseInt(r[2], 10) };
      }
      let t3 = (e || "").split(".").map((r) => parseInt(r, 10));
      return { major: t3[0], minor: t3[1], patch: t3[2] };
    }
    function Zn(e) {
      let { env: t3 } = process;
      if ("FORCE_HYPERLINK" in t3)
        return !(t3.FORCE_HYPERLINK.length > 0 && parseInt(t3.FORCE_HYPERLINK, 10) === 0);
      if (ft("no-hyperlink") || ft("no-hyperlinks") || ft("hyperlink=false") || ft("hyperlink=never"))
        return false;
      if (ft("hyperlink=true") || ft("hyperlink=always") || "NETLIFY" in t3)
        return true;
      if (!Fu.supportsColor(e) || e && !e.isTTY || process.platform === "win32" || "CI" in t3 || "TEAMCITY_VERSION" in t3)
        return false;
      if ("TERM_PROGRAM" in t3) {
        let r = $o(t3.TERM_PROGRAM_VERSION);
        switch (t3.TERM_PROGRAM) {
          case "iTerm.app":
            return r.major === 3 ? r.minor >= 1 : r.major > 3;
          case "WezTerm":
            return r.major >= 20200620;
          case "vscode":
            return r.major > 1 || r.major === 1 && r.minor >= 72;
        }
      }
      if ("VTE_VERSION" in t3) {
        if (t3.VTE_VERSION === "0.50.0")
          return false;
        let r = $o(t3.VTE_VERSION);
        return r.major > 0 || r.minor >= 50;
      }
      return false;
    }
    qo.exports = { supportsHyperlink: Zn, stdout: Zn(process.stdout), stderr: Zn(process.stderr) };
  });
  var Bo = Z((tf, Jt) => {
    var Nu = _o(), Xn = jo(), Vo = (e, t3, { target: r = "stdout", ...n3 } = {}) => Xn[r] ? Nu.link(e, t3) : n3.fallback === false ? e : typeof n3.fallback == "function" ? n3.fallback(e, t3) : `${e} (\u200B${t3}\u200B)`;
    Jt.exports = (e, t3, r = {}) => Vo(e, t3, r);
    Jt.exports.stderr = (e, t3, r = {}) => Vo(e, t3, { target: "stderr", ...r });
    Jt.exports.isSupported = Xn.stdout;
    Jt.exports.stderr.isSupported = Xn.stderr;
  });
  var ti = Z((df, Mu) => {
    Mu.exports = { name: "@prisma/engines-version", version: "5.19.1-2.69d742ee20b815d88e17e54db4a2a7a3b30324e3", main: "index.js", types: "index.d.ts", license: "Apache-2.0", author: "Tim Suchanek <suchanek@prisma.io>", prisma: { enginesVersion: "69d742ee20b815d88e17e54db4a2a7a3b30324e3" }, repository: { type: "git", url: "https://github.com/prisma/engines-wrapper.git", directory: "packages/engines-version" }, devDependencies: { "@types/node": "18.19.34", typescript: "4.9.5" }, files: ["index.js", "index.d.ts"], scripts: { build: "tsc -d" } };
  });
  var ri = Z((Gr) => {
    Object.defineProperty(Gr, "__esModule", { value: true });
    Gr.enginesVersion = undefined;
    Gr.enginesVersion = ti().prisma.enginesVersion;
  });
  var Jo = Z((kf, ju) => {
    ju.exports = { name: "dotenv", version: "16.0.3", description: "Loads environment variables from .env file", main: "lib/main.js", types: "lib/main.d.ts", exports: { ".": { require: "./lib/main.js", types: "./lib/main.d.ts", default: "./lib/main.js" }, "./config": "./config.js", "./config.js": "./config.js", "./lib/env-options": "./lib/env-options.js", "./lib/env-options.js": "./lib/env-options.js", "./lib/cli-options": "./lib/cli-options.js", "./lib/cli-options.js": "./lib/cli-options.js", "./package.json": "./package.json" }, scripts: { "dts-check": "tsc --project tests/types/tsconfig.json", lint: "standard", "lint-readme": "standard-markdown", pretest: "npm run lint && npm run dts-check", test: "tap tests/*.js --100 -Rspec", prerelease: "npm test", release: "standard-version" }, repository: { type: "git", url: "git://github.com/motdotla/dotenv.git" }, keywords: ["dotenv", "env", ".env", "environment", "variables", "config", "settings"], readmeFilename: "README.md", license: "BSD-2-Clause", devDependencies: { "@types/node": "^17.0.9", decache: "^4.6.1", dtslint: "^3.7.0", sinon: "^12.0.1", standard: "^16.0.4", "standard-markdown": "^7.1.0", "standard-version": "^9.3.2", tap: "^15.1.6", tar: "^6.1.11", typescript: "^4.5.4" }, engines: { node: ">=12" } };
  });
  var Ho = Z((Df, Jr) => {
    var Vu = import.meta.require("fs"), Wo = import.meta.require("path"), Bu = import.meta.require("os"), Uu = Jo(), Gu = Uu.version, Qu = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
    function Ju(e) {
      let t3 = {}, r = e.toString();
      r = r.replace(/\r\n?/mg, `
`);
      let n3;
      for (;(n3 = Qu.exec(r)) != null; ) {
        let i3 = n3[1], o2 = n3[2] || "";
        o2 = o2.trim();
        let s3 = o2[0];
        o2 = o2.replace(/^(['"`])([\s\S]*)\1$/mg, "$2"), s3 === '"' && (o2 = o2.replace(/\\n/g, `
`), o2 = o2.replace(/\\r/g, "\r")), t3[i3] = o2;
      }
      return t3;
    }
    function si(e) {
      console.log(`[dotenv@${Gu}][DEBUG] ${e}`);
    }
    function Wu(e) {
      return e[0] === "~" ? Wo.join(Bu.homedir(), e.slice(1)) : e;
    }
    function Hu(e) {
      let t3 = Wo.resolve(process.cwd(), ".env"), r = "utf8", n3 = !!(e && e.debug), i3 = !!(e && e.override);
      e && (e.path != null && (t3 = Wu(e.path)), e.encoding != null && (r = e.encoding));
      try {
        let o2 = Qr.parse(Vu.readFileSync(t3, { encoding: r }));
        return Object.keys(o2).forEach(function(s3) {
          Object.prototype.hasOwnProperty.call(process.env, s3) ? (i3 === true && (process.env[s3] = o2[s3]), n3 && si(i3 === true ? `"${s3}" is already defined in \`process.env\` and WAS overwritten` : `"${s3}" is already defined in \`process.env\` and was NOT overwritten`)) : process.env[s3] = o2[s3];
        }), { parsed: o2 };
      } catch (o2) {
        return n3 && si(`Failed to load ${t3} ${o2.message}`), { error: o2 };
      }
    }
    var Qr = { config: Hu, parse: Ju };
    Jr.exports.config = Qr.config;
    Jr.exports.parse = Qr.parse;
    Jr.exports = Qr;
  });
  var es = Z((qf, Xo) => {
    Xo.exports = (e) => {
      let t3 = e.match(/^[ \t]*(?=\S)/gm);
      return t3 ? t3.reduce((r, n3) => Math.min(r, n3.length), 1 / 0) : 0;
    };
  });
  var rs = Z((jf, ts) => {
    var Zu = es();
    ts.exports = (e) => {
      let t3 = Zu(e);
      if (t3 === 0)
        return e;
      let r = new RegExp(`^[ \\t]{${t3}}`, "gm");
      return e.replace(r, "");
    };
  });
  var ci = Z((Jf, ns) => {
    ns.exports = (e, t3 = 1, r) => {
      if (r = { indent: " ", includeEmptyLines: false, ...r }, typeof e != "string")
        throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof e}\``);
      if (typeof t3 != "number")
        throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof t3}\``);
      if (typeof r.indent != "string")
        throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof r.indent}\``);
      if (t3 === 0)
        return e;
      let n3 = r.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
      return e.replace(n3, r.indent.repeat(t3));
    };
  });
  var as = Z((Kf, ss) => {
    ss.exports = ({ onlyFirst: e = false } = {}) => {
      let t3 = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");
      return new RegExp(t3, e ? undefined : "g");
    };
  });
  var fi = Z((zf, ls) => {
    var sc = as();
    ls.exports = (e) => typeof e == "string" ? e.replace(sc(), "") : e;
  });
  var us = Z((Xf, Kr) => {
    Kr.exports = (e = {}) => {
      let t3;
      if (e.repoUrl)
        t3 = e.repoUrl;
      else if (e.user && e.repo)
        t3 = `https://github.com/${e.user}/${e.repo}`;
      else
        throw new Error("You need to specify either the `repoUrl` option or both the `user` and `repo` options");
      let r = new URL(`${t3}/issues/new`), n3 = ["body", "title", "labels", "template", "milestone", "assignee", "projects"];
      for (let i3 of n3) {
        let o2 = e[i3];
        if (o2 !== undefined) {
          if (i3 === "labels" || i3 === "projects") {
            if (!Array.isArray(o2))
              throw new TypeError(`The \`${i3}\` option should be an array`);
            o2 = o2.join(",");
          }
          r.searchParams.set(i3, o2);
        }
      }
      return r.toString();
    };
    Kr.exports.default = Kr.exports;
  });
  var eo = Z((HP, Wa) => {
    Wa.exports = function() {
      function e(t3, r, n3, i3, o2) {
        return t3 < r || n3 < r ? t3 > n3 ? n3 + 1 : t3 + 1 : i3 === o2 ? r : r + 1;
      }
      return function(t3, r) {
        if (t3 === r)
          return 0;
        if (t3.length > r.length) {
          var n3 = t3;
          t3 = r, r = n3;
        }
        for (var i3 = t3.length, o2 = r.length;i3 > 0 && t3.charCodeAt(i3 - 1) === r.charCodeAt(o2 - 1); )
          i3--, o2--;
        for (var s3 = 0;s3 < i3 && t3.charCodeAt(s3) === r.charCodeAt(s3); )
          s3++;
        if (i3 -= s3, o2 -= s3, i3 === 0 || o2 < 3)
          return o2;
        var a = 0, l, u3, c3, p3, d3, f3, g, h, O, T3, S, C, E = [];
        for (l = 0;l < i3; l++)
          E.push(l + 1), E.push(t3.charCodeAt(s3 + l));
        for (var me = E.length - 1;a < o2 - 3; )
          for (O = r.charCodeAt(s3 + (u3 = a)), T3 = r.charCodeAt(s3 + (c3 = a + 1)), S = r.charCodeAt(s3 + (p3 = a + 2)), C = r.charCodeAt(s3 + (d3 = a + 3)), f3 = a += 4, l = 0;l < me; l += 2)
            g = E[l], h = E[l + 1], u3 = e(g, u3, c3, O, h), c3 = e(u3, c3, p3, T3, h), p3 = e(c3, p3, d3, S, h), f3 = e(p3, d3, f3, C, h), E[l] = f3, d3 = p3, p3 = c3, c3 = u3, u3 = g;
        for (;a < o2; )
          for (O = r.charCodeAt(s3 + (u3 = a)), f3 = ++a, l = 0;l < me; l += 2)
            g = E[l], E[l] = f3 = e(g, u3, f3, O, E[l + 1]), u3 = g;
        return f3;
      };
    }();
  });
  var vm = {};
  jt(vm, { Debug: () => jn, Decimal: () => ve, Extensions: () => Nn, MetricsClient: () => yt, NotFoundError: () => _e, PrismaClientInitializationError: () => R, PrismaClientKnownRequestError: () => V2, PrismaClientRustPanicError: () => le, PrismaClientUnknownRequestError: () => B, PrismaClientValidationError: () => J, Public: () => Mn, Sql: () => ie, defineDmmfProperty: () => ps, empty: () => fs2, getPrismaClient: () => jl, getRuntime: () => xn, join: () => ms, makeStrictEnum: () => Vl, makeTypedQueryFactory: () => ds, objectEnumValues: () => Zr, raw: () => Ti, sqltag: () => Ri, warnEnvConflicts: () => Bl, warnOnce: () => Zt });
  module.exports = Hl(vm);
  var Nn = {};
  jt(Nn, { defineExtension: () => uo, getExtensionContext: () => co });
  var Mn = {};
  jt(Mn, { validator: () => po });
  var Lr = {};
  jt(Lr, { $: () => yo, bgBlack: () => iu, bgBlue: () => lu, bgCyan: () => cu, bgGreen: () => su, bgMagenta: () => uu, bgRed: () => ou, bgWhite: () => pu, bgYellow: () => au, black: () => eu, blue: () => et, bold: () => H, cyan: () => Oe, dim: () => Ae, gray: () => Vt, green: () => Me, grey: () => nu, hidden: () => Zl, inverse: () => Yl, italic: () => zl, magenta: () => tu, red: () => ce, reset: () => Kl, strikethrough: () => Xl, underline: () => X, white: () => ru, yellow: () => Ie });
  var $n;
  var mo;
  var fo;
  var go;
  var ho = true;
  typeof process < "u" && ({ FORCE_COLOR: $n, NODE_DISABLE_COLORS: mo, NO_COLOR: fo, TERM: go } = process.env || {}, ho = process.stdout && process.stdout.isTTY);
  var yo = { enabled: !mo && fo == null && go !== "dumb" && ($n != null && $n !== "0" || ho) };
  var Kl = M(0, 0);
  var H = M(1, 22);
  var Ae = M(2, 22);
  var zl = M(3, 23);
  var X = M(4, 24);
  var Yl = M(7, 27);
  var Zl = M(8, 28);
  var Xl = M(9, 29);
  var eu = M(30, 39);
  var ce = M(31, 39);
  var Me = M(32, 39);
  var Ie = M(33, 39);
  var et = M(34, 39);
  var tu = M(35, 39);
  var Oe = M(36, 39);
  var ru = M(37, 39);
  var Vt = M(90, 39);
  var nu = M(90, 39);
  var iu = M(40, 49);
  var ou = M(41, 49);
  var su = M(42, 49);
  var au = M(43, 49);
  var lu = M(44, 49);
  var uu = M(45, 49);
  var cu = M(46, 49);
  var pu = M(47, 49);
  var du = 100;
  var bo = ["green", "yellow", "blue", "magenta", "cyan", "red"];
  var Bt = [];
  var Eo = Date.now();
  var mu = 0;
  var qn = typeof process < "u" ? process.env : {};
  globalThis.DEBUG ??= qn.DEBUG ?? "";
  globalThis.DEBUG_COLORS ??= qn.DEBUG_COLORS ? qn.DEBUG_COLORS === "true" : true;
  var Ut = { enable(e) {
    typeof e == "string" && (globalThis.DEBUG = e);
  }, disable() {
    let e = globalThis.DEBUG;
    return globalThis.DEBUG = "", e;
  }, enabled(e) {
    let t3 = globalThis.DEBUG.split(",").map((i3) => i3.replace(/[.+?^${}()|[\]\\]/g, "\\$&")), r = t3.some((i3) => i3 === "" || i3[0] === "-" ? false : e.match(RegExp(i3.split("*").join(".*") + "$"))), n3 = t3.some((i3) => i3 === "" || i3[0] !== "-" ? false : e.match(RegExp(i3.slice(1).split("*").join(".*") + "$")));
    return r && !n3;
  }, log: (...e) => {
    let [t3, r, ...n3] = e;
    (console.warn ?? console.log)(`${t3} ${r}`, ...n3);
  }, formatters: {} };
  var jn = new Proxy(fu, { get: (e, t3) => Ut[t3], set: (e, t3, r) => Ut[t3] = r });
  var F = jn;
  var Po = k(import.meta.require("fs"));
  var Bn = ["darwin", "darwin-arm64", "debian-openssl-1.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "rhel-openssl-1.0.x", "rhel-openssl-1.1.x", "rhel-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "linux-arm64-openssl-1.0.x", "linux-arm64-openssl-3.0.x", "linux-arm-openssl-1.1.x", "linux-arm-openssl-1.0.x", "linux-arm-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-1.1.x", "linux-musl-arm64-openssl-3.0.x", "linux-nixos", "linux-static-x64", "linux-static-arm64", "windows", "freebsd11", "freebsd12", "freebsd13", "freebsd14", "freebsd15", "openbsd", "netbsd", "arm"];
  var Fr = "libquery_engine";
  var Co = k(import.meta.require("child_process"));
  var Jn = k(import.meta.require("fs/promises"));
  var Vr = k(import.meta.require("os"));
  var ke = Symbol.for("@ts-pattern/matcher");
  var hu = Symbol.for("@ts-pattern/isVariadic");
  var $r = "@ts-pattern/anonymous-select-key";
  var Un = (e) => !!(e && typeof e == "object");
  var Mr = (e) => e && !!e[ke];
  var Ee = (e, t3, r) => {
    if (Mr(e)) {
      let n3 = e[ke](), { matched: i3, selections: o2 } = n3.match(t3);
      return i3 && o2 && Object.keys(o2).forEach((s3) => r(s3, o2[s3])), i3;
    }
    if (Un(e)) {
      if (!Un(t3))
        return false;
      if (Array.isArray(e)) {
        if (!Array.isArray(t3))
          return false;
        let n3 = [], i3 = [], o2 = [];
        for (let s3 of e.keys()) {
          let a = e[s3];
          Mr(a) && a[hu] ? o2.push(a) : o2.length ? i3.push(a) : n3.push(a);
        }
        if (o2.length) {
          if (o2.length > 1)
            throw new Error("Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.");
          if (t3.length < n3.length + i3.length)
            return false;
          let s3 = t3.slice(0, n3.length), a = i3.length === 0 ? [] : t3.slice(-i3.length), l = t3.slice(n3.length, i3.length === 0 ? 1 / 0 : -i3.length);
          return n3.every((u3, c3) => Ee(u3, s3[c3], r)) && i3.every((u3, c3) => Ee(u3, a[c3], r)) && (o2.length === 0 || Ee(o2[0], l, r));
        }
        return e.length === t3.length && e.every((s3, a) => Ee(s3, t3[a], r));
      }
      return Object.keys(e).every((n3) => {
        let i3 = e[n3];
        return ((n3 in t3) || Mr(o2 = i3) && o2[ke]().matcherType === "optional") && Ee(i3, t3[n3], r);
        var o2;
      });
    }
    return Object.is(t3, e);
  };
  var Be = (e) => {
    var t3, r, n3;
    return Un(e) ? Mr(e) ? (t3 = (r = (n3 = e[ke]()).getSelectionKeys) == null ? undefined : r.call(n3)) != null ? t3 : [] : Array.isArray(e) ? Gt(e, Be) : Gt(Object.values(e), Be) : [];
  };
  var Gt = (e, t3) => e.reduce((r, n3) => r.concat(t3(n3)), []);
  var Nm = pe(I(function(e) {
    return true;
  }));
  var je = (e) => Object.assign(pe(e), { startsWith: (t3) => {
    return je(j(e, (r = t3, I((n3) => $e(n3) && n3.startsWith(r)))));
    var r;
  }, endsWith: (t3) => {
    return je(j(e, (r = t3, I((n3) => $e(n3) && n3.endsWith(r)))));
    var r;
  }, minLength: (t3) => je(j(e, ((r) => I((n3) => $e(n3) && n3.length >= r))(t3))), length: (t3) => je(j(e, ((r) => I((n3) => $e(n3) && n3.length === r))(t3))), maxLength: (t3) => je(j(e, ((r) => I((n3) => $e(n3) && n3.length <= r))(t3))), includes: (t3) => {
    return je(j(e, (r = t3, I((n3) => $e(n3) && n3.includes(r)))));
    var r;
  }, regex: (t3) => {
    return je(j(e, (r = t3, I((n3) => $e(n3) && !!n3.match(r)))));
    var r;
  } });
  var Mm = je(I($e));
  var be = (e) => Object.assign(pe(e), { between: (t3, r) => be(j(e, ((n3, i3) => I((o2) => ye(o2) && n3 <= o2 && i3 >= o2))(t3, r))), lt: (t3) => be(j(e, ((r) => I((n3) => ye(n3) && n3 < r))(t3))), gt: (t3) => be(j(e, ((r) => I((n3) => ye(n3) && n3 > r))(t3))), lte: (t3) => be(j(e, ((r) => I((n3) => ye(n3) && n3 <= r))(t3))), gte: (t3) => be(j(e, ((r) => I((n3) => ye(n3) && n3 >= r))(t3))), int: () => be(j(e, I((t3) => ye(t3) && Number.isInteger(t3)))), finite: () => be(j(e, I((t3) => ye(t3) && Number.isFinite(t3)))), positive: () => be(j(e, I((t3) => ye(t3) && t3 > 0))), negative: () => be(j(e, I((t3) => ye(t3) && t3 < 0))) });
  var $m = be(I(ye));
  var Ve = (e) => Object.assign(pe(e), { between: (t3, r) => Ve(j(e, ((n3, i3) => I((o2) => qe(o2) && n3 <= o2 && i3 >= o2))(t3, r))), lt: (t3) => Ve(j(e, ((r) => I((n3) => qe(n3) && n3 < r))(t3))), gt: (t3) => Ve(j(e, ((r) => I((n3) => qe(n3) && n3 > r))(t3))), lte: (t3) => Ve(j(e, ((r) => I((n3) => qe(n3) && n3 <= r))(t3))), gte: (t3) => Ve(j(e, ((r) => I((n3) => qe(n3) && n3 >= r))(t3))), positive: () => Ve(j(e, I((t3) => qe(t3) && t3 > 0))), negative: () => Ve(j(e, I((t3) => qe(t3) && t3 < 0))) });
  var qm = Ve(I(qe));
  var jm = pe(I(function(e) {
    return typeof e == "boolean";
  }));
  var Vm = pe(I(function(e) {
    return typeof e == "symbol";
  }));
  var Bm = pe(I(function(e) {
    return e == null;
  }));
  var Um = pe(I(function(e) {
    return e != null;
  }));
  var Gn = { matched: false, value: undefined };
  var Qn = class e {
    constructor(t3, r) {
      this.input = undefined, this.state = undefined, this.input = t3, this.state = r;
    }
    with(...t3) {
      if (this.state.matched)
        return this;
      let r = t3[t3.length - 1], n3 = [t3[0]], i3;
      t3.length === 3 && typeof t3[1] == "function" ? i3 = t3[1] : t3.length > 2 && n3.push(...t3.slice(1, t3.length - 1));
      let o2 = false, s3 = {}, a = (u3, c3) => {
        o2 = true, s3[u3] = c3;
      }, l = !n3.some((u3) => Ee(u3, this.input, a)) || i3 && !i3(this.input) ? Gn : { matched: true, value: r(o2 ? $r in s3 ? s3[$r] : s3 : this.input, this.input) };
      return new e(this.input, l);
    }
    when(t3, r) {
      if (this.state.matched)
        return this;
      let n3 = !!t3(this.input);
      return new e(this.input, n3 ? { matched: true, value: r(this.input, this.input) } : Gn);
    }
    otherwise(t3) {
      return this.state.matched ? this.state.value : t3(this.input);
    }
    exhaustive() {
      if (this.state.matched)
        return this.state.value;
      let t3;
      try {
        t3 = JSON.stringify(this.input);
      } catch {
        t3 = this.input;
      }
      throw new Error(`Pattern matching error: no pattern matches value ${t3}`);
    }
    run() {
      return this.exhaustive();
    }
    returnType() {
      return this;
    }
  };
  var So = import.meta.require("util");
  var Eu = { warn: Ie("prisma:warn") };
  var wu = { warn: () => !process.env.PRISMA_DISABLE_WARNINGS };
  var xu = (0, So.promisify)(Co.default.exec);
  var te = F("prisma:get-platform");
  var Pu = ["1.0.x", "1.1.x", "3.0.x"];
  var jr = {};
  var Uo = k(Bo());
  var $u = k(ri());
  var $4 = k(import.meta.require("path"));
  var qu = k(ri());
  var Pf = F("prisma:engines");
  var vf = "libquery-engine";
  $4.default.join(__dirname, "../query-engine-darwin");
  $4.default.join(__dirname, "../query-engine-darwin-arm64");
  $4.default.join(__dirname, "../query-engine-debian-openssl-1.0.x");
  $4.default.join(__dirname, "../query-engine-debian-openssl-1.1.x");
  $4.default.join(__dirname, "../query-engine-debian-openssl-3.0.x");
  $4.default.join(__dirname, "../query-engine-linux-static-x64");
  $4.default.join(__dirname, "../query-engine-linux-static-arm64");
  $4.default.join(__dirname, "../query-engine-rhel-openssl-1.0.x");
  $4.default.join(__dirname, "../query-engine-rhel-openssl-1.1.x");
  $4.default.join(__dirname, "../query-engine-rhel-openssl-3.0.x");
  $4.default.join(__dirname, "../libquery_engine-darwin.dylib.node");
  $4.default.join(__dirname, "../libquery_engine-darwin-arm64.dylib.node");
  $4.default.join(__dirname, "../libquery_engine-debian-openssl-1.0.x.so.node");
  $4.default.join(__dirname, "../libquery_engine-debian-openssl-1.1.x.so.node");
  $4.default.join(__dirname, "../libquery_engine-debian-openssl-3.0.x.so.node");
  $4.default.join(__dirname, "../libquery_engine-linux-arm64-openssl-1.0.x.so.node");
  $4.default.join(__dirname, "../libquery_engine-linux-arm64-openssl-1.1.x.so.node");
  $4.default.join(__dirname, "../libquery_engine-linux-arm64-openssl-3.0.x.so.node");
  $4.default.join(__dirname, "../libquery_engine-linux-musl.so.node");
  $4.default.join(__dirname, "../libquery_engine-linux-musl-openssl-3.0.x.so.node");
  $4.default.join(__dirname, "../libquery_engine-rhel-openssl-1.0.x.so.node");
  $4.default.join(__dirname, "../libquery_engine-rhel-openssl-1.1.x.so.node");
  $4.default.join(__dirname, "../libquery_engine-rhel-openssl-3.0.x.so.node");
  $4.default.join(__dirname, "../query_engine-windows.dll.node");
  var ni = k(import.meta.require("fs"));
  var Qo = F("chmodPlusX");
  var li = k(Ho());
  var Wr = k(import.meta.require("fs"));
  var gt = k(import.meta.require("path"));
  var ai = F("prisma:tryLoadEnv");
  var Zo = "library";
  var Ge;
  ((t3) => {
    let e;
    ((E) => (E.findUnique = "findUnique", E.findUniqueOrThrow = "findUniqueOrThrow", E.findFirst = "findFirst", E.findFirstOrThrow = "findFirstOrThrow", E.findMany = "findMany", E.create = "create", E.createMany = "createMany", E.createManyAndReturn = "createManyAndReturn", E.update = "update", E.updateMany = "updateMany", E.upsert = "upsert", E.delete = "delete", E.deleteMany = "deleteMany", E.groupBy = "groupBy", E.count = "count", E.aggregate = "aggregate", E.findRaw = "findRaw", E.aggregateRaw = "aggregateRaw"))(e = t3.ModelAction ||= {});
  })(Ge ||= {});
  var Kt = k(import.meta.require("path"));
  var is4 = k(ci());
  var pi = class {
    constructor(t3) {
      this.config = t3;
    }
    toString() {
      let { config: t3 } = this, r = t3.provider.fromEnvVar ? `env("${t3.provider.fromEnvVar}")` : t3.provider.value, n3 = JSON.parse(JSON.stringify({ provider: r, binaryTargets: Xu(t3.binaryTargets) }));
      return `generator ${t3.name} {
${(0, is4.default)(ec(n3), 2)}
}`;
    }
  };
  var Yt = {};
  jt(Yt, { error: () => ic, info: () => nc, log: () => rc, query: () => oc, should: () => os, tags: () => zt, warn: () => mi });
  var zt = { error: ce("prisma:error"), warn: Ie("prisma:warn"), info: Oe("prisma:info"), query: et("prisma:query") };
  var os = { warn: () => !process.env.PRISMA_DISABLE_WARNINGS };
  var hi = (e, t3) => e.reduce((r, n3) => (r[t3(n3)] = n3, r), {});
  var cs = new Set;
  var Zt = (e, t3, ...r) => {
    cs.has(e) || (cs.add(e), mi(t3, ...r));
  };
  var V2 = class extends Error {
    constructor(t3, { code: r, clientVersion: n3, meta: i3, batchRequestIdx: o2 }) {
      super(t3), this.name = "PrismaClientKnownRequestError", this.code = r, this.clientVersion = n3, this.meta = i3, Object.defineProperty(this, "batchRequestIdx", { value: o2, enumerable: false, writable: true });
    }
    get [Symbol.toStringTag]() {
      return "PrismaClientKnownRequestError";
    }
  };
  w(V2, "PrismaClientKnownRequestError");
  var _e = class extends V2 {
    constructor(t3, r) {
      super(t3, { code: "P2025", clientVersion: r }), this.name = "NotFoundError";
    }
  };
  w(_e, "NotFoundError");
  var R = class e extends Error {
    constructor(t3, r, n3) {
      super(t3), this.name = "PrismaClientInitializationError", this.clientVersion = r, this.errorCode = n3, Error.captureStackTrace(e);
    }
    get [Symbol.toStringTag]() {
      return "PrismaClientInitializationError";
    }
  };
  w(R, "PrismaClientInitializationError");
  var le = class extends Error {
    constructor(t3, r) {
      super(t3), this.name = "PrismaClientRustPanicError", this.clientVersion = r;
    }
    get [Symbol.toStringTag]() {
      return "PrismaClientRustPanicError";
    }
  };
  w(le, "PrismaClientRustPanicError");
  var B = class extends Error {
    constructor(t3, { clientVersion: r, batchRequestIdx: n3 }) {
      super(t3), this.name = "PrismaClientUnknownRequestError", this.clientVersion = r, Object.defineProperty(this, "batchRequestIdx", { value: n3, writable: true, enumerable: false });
    }
    get [Symbol.toStringTag]() {
      return "PrismaClientUnknownRequestError";
    }
  };
  w(B, "PrismaClientUnknownRequestError");
  var J = class extends Error {
    constructor(r, { clientVersion: n3 }) {
      super(r);
      this.name = "PrismaClientValidationError";
      this.clientVersion = n3;
    }
    get [Symbol.toStringTag]() {
      return "PrismaClientValidationError";
    }
  };
  w(J, "PrismaClientValidationError");
  var yt = class {
    constructor(t3) {
      this._engine = t3;
    }
    prometheus(t3) {
      return this._engine.metrics({ format: "prometheus", ...t3 });
    }
    json(t3) {
      return this._engine.metrics({ format: "json", ...t3 });
    }
  };
  var Yr = Symbol();
  var Ei = new WeakMap;
  var Le = class {
    constructor(t3) {
      t3 === Yr ? Ei.set(this, `Prisma.${this._getName()}`) : Ei.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);
    }
    _getName() {
      return this.constructor.name;
    }
    toString() {
      return Ei.get(this);
    }
  };
  var er = class extends Le {
    _getNamespace() {
      return "NullTypes";
    }
  };
  var tr = class extends er {
  };
  wi(tr, "DbNull");
  var rr = class extends er {
  };
  wi(rr, "JsonNull");
  var nr = class extends er {
  };
  wi(nr, "AnyNull");
  var Zr = { classes: { DbNull: tr, JsonNull: rr, AnyNull: nr }, instances: { DbNull: new tr(Yr), JsonNull: new rr(Yr), AnyNull: new nr(Yr) } };
  var xi = new WeakMap;
  var ir = class {
    constructor(t3, r) {
      xi.set(this, { sql: t3, values: r });
    }
    get sql() {
      return xi.get(this).sql;
    }
    get values() {
      return xi.get(this).values;
    }
  };
  var Pi = class {
    constructor() {
      this.registeredErrors = [];
    }
    consumeError(t3) {
      return this.registeredErrors[t3];
    }
    registerNewError(t3) {
      let r = 0;
      for (;this.registeredErrors[r] !== undefined; )
        r++;
      return this.registeredErrors[r] = { error: t3 }, r;
    }
  };
  var vi = (e) => {
    let t3 = new Pi, r = rt(t3, e.startTransaction.bind(e)), n3 = { adapterName: e.adapterName, errorRegistry: t3, queryRaw: rt(t3, e.queryRaw.bind(e)), executeRaw: rt(t3, e.executeRaw.bind(e)), provider: e.provider, startTransaction: async (...i3) => (await r(...i3)).map((s3) => lc(t3, s3)) };
    return e.getConnectionInfo && (n3.getConnectionInfo = uc(t3, e.getConnectionInfo.bind(e))), n3;
  };
  var lc = (e, t3) => ({ adapterName: t3.adapterName, provider: t3.provider, options: t3.options, queryRaw: rt(e, t3.queryRaw.bind(t3)), executeRaw: rt(e, t3.executeRaw.bind(t3)), commit: rt(e, t3.commit.bind(t3)), rollback: rt(e, t3.rollback.bind(t3)) });
  var Nl = k(ti());
  var Ml = import.meta.require("async_hooks");
  var $l = import.meta.require("events");
  var ql = k(import.meta.require("fs"));
  var kr = k(import.meta.require("path"));
  var ie = class e {
    constructor(t3, r) {
      if (t3.length - 1 !== r.length)
        throw t3.length === 0 ? new TypeError("Expected at least 1 string") : new TypeError(`Expected ${t3.length} strings to have ${t3.length - 1} values`);
      let n3 = r.reduce((s3, a) => s3 + (a instanceof e ? a.values.length : 1), 0);
      this.values = new Array(n3), this.strings = new Array(n3 + 1), this.strings[0] = t3[0];
      let i3 = 0, o2 = 0;
      for (;i3 < r.length; ) {
        let s3 = r[i3++], a = t3[i3];
        if (s3 instanceof e) {
          this.strings[o2] += s3.strings[0];
          let l = 0;
          for (;l < s3.values.length; )
            this.values[o2++] = s3.values[l++], this.strings[o2] = s3.strings[l];
          this.strings[o2] += a;
        } else
          this.values[o2++] = s3, this.strings[o2] = a;
      }
    }
    get sql() {
      let t3 = this.strings.length, r = 1, n3 = this.strings[0];
      for (;r < t3; )
        n3 += `?${this.strings[r++]}`;
      return n3;
    }
    get statement() {
      let t3 = this.strings.length, r = 1, n3 = this.strings[0];
      for (;r < t3; )
        n3 += `:${r}${this.strings[r++]}`;
      return n3;
    }
    get text() {
      let t3 = this.strings.length, r = 1, n3 = this.strings[0];
      for (;r < t3; )
        n3 += `\$${r}${this.strings[r++]}`;
      return n3;
    }
    inspect() {
      return { sql: this.sql, statement: this.statement, text: this.text, values: this.values };
    }
  };
  var fs2 = Ti("");
  var we = class {
    constructor() {
      this._map = new Map;
    }
    get(t3) {
      return this._map.get(t3)?.value;
    }
    set(t3, r) {
      this._map.set(t3, { value: r });
    }
    getOrCreate(t3, r) {
      let n3 = this._map.get(t3);
      if (n3)
        return n3.value;
      let i3 = r();
      return this.set(t3, i3), i3;
    }
  };
  var Xr = { enumerable: true, configurable: true, writable: true };
  var gs = Symbol.for("nodejs.util.inspect.custom");
  var wt = class {
    constructor(t3 = 0, r) {
      this.context = r;
      this.lines = [];
      this.currentLine = "";
      this.currentIndent = 0;
      this.currentIndent = t3;
    }
    write(t3) {
      return typeof t3 == "string" ? this.currentLine += t3 : t3.write(this), this;
    }
    writeJoined(t3, r, n3 = (i3, o2) => o2.write(i3)) {
      let i3 = r.length - 1;
      for (let o2 = 0;o2 < r.length; o2++)
        n3(r[o2], this), o2 !== i3 && this.write(t3);
      return this;
    }
    writeLine(t3) {
      return this.write(t3).newLine();
    }
    newLine() {
      this.lines.push(this.indentedCurrentLine()), this.currentLine = "", this.marginSymbol = undefined;
      let t3 = this.afterNextNewLineCallback;
      return this.afterNextNewLineCallback = undefined, t3?.(), this;
    }
    withIndent(t3) {
      return this.indent(), t3(this), this.unindent(), this;
    }
    afterNextNewline(t3) {
      return this.afterNextNewLineCallback = t3, this;
    }
    indent() {
      return this.currentIndent++, this;
    }
    unindent() {
      return this.currentIndent > 0 && this.currentIndent--, this;
    }
    addMarginSymbol(t3) {
      return this.marginSymbol = t3, this;
    }
    toString() {
      return this.lines.concat(this.indentedCurrentLine()).join(`
`);
    }
    getCurrentLineLength() {
      return this.currentLine.length;
    }
    indentedCurrentLine() {
      let t3 = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);
      return this.marginSymbol ? this.marginSymbol + t3.slice(1) : t3;
    }
  };
  var Pt = 9000000000000000;
  var He = 1e9;
  var Ci = "0123456789abcdef";
  var nn = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058";
  var on = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789";
  var Si = { precision: 20, rounding: 4, modulo: 1, toExpNeg: -7, toExpPos: 21, minE: -Pt, maxE: Pt, crypto: false };
  var xs;
  var Fe;
  var x3 = true;
  var an = "[DecimalError] ";
  var We = an + "Invalid argument: ";
  var Ps = an + "Precision limit exceeded";
  var vs = an + "crypto unavailable";
  var Ts = "[object Decimal]";
  var ee = Math.floor;
  var G = Math.pow;
  var pc = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i;
  var dc = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i;
  var mc = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i;
  var Rs = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
  var ge = 1e7;
  var b = 7;
  var fc = 9007199254740991;
  var gc = nn.length - 1;
  var Ai = on.length - 1;
  var m3 = { toStringTag: Ts };
  m3.absoluteValue = m3.abs = function() {
    var e = new this.constructor(this);
    return e.s < 0 && (e.s = 1), y3(e);
  };
  m3.ceil = function() {
    return y3(new this.constructor(this), this.e + 1, 2);
  };
  m3.clampedTo = m3.clamp = function(e, t3) {
    var r, n3 = this, i3 = n3.constructor;
    if (e = new i3(e), t3 = new i3(t3), !e.s || !t3.s)
      return new i3(NaN);
    if (e.gt(t3))
      throw Error(We + t3);
    return r = n3.cmp(e), r < 0 ? e : n3.cmp(t3) > 0 ? t3 : new i3(n3);
  };
  m3.comparedTo = m3.cmp = function(e) {
    var t3, r, n3, i3, o2 = this, s3 = o2.d, a = (e = new o2.constructor(e)).d, l = o2.s, u3 = e.s;
    if (!s3 || !a)
      return !l || !u3 ? NaN : l !== u3 ? l : s3 === a ? 0 : !s3 ^ l < 0 ? 1 : -1;
    if (!s3[0] || !a[0])
      return s3[0] ? l : a[0] ? -u3 : 0;
    if (l !== u3)
      return l;
    if (o2.e !== e.e)
      return o2.e > e.e ^ l < 0 ? 1 : -1;
    for (n3 = s3.length, i3 = a.length, t3 = 0, r = n3 < i3 ? n3 : i3;t3 < r; ++t3)
      if (s3[t3] !== a[t3])
        return s3[t3] > a[t3] ^ l < 0 ? 1 : -1;
    return n3 === i3 ? 0 : n3 > i3 ^ l < 0 ? 1 : -1;
  };
  m3.cosine = m3.cos = function() {
    var e, t3, r = this, n3 = r.constructor;
    return r.d ? r.d[0] ? (e = n3.precision, t3 = n3.rounding, n3.precision = e + Math.max(r.e, r.sd()) + b, n3.rounding = 1, r = hc(n3, Os(n3, r)), n3.precision = e, n3.rounding = t3, y3(Fe == 2 || Fe == 3 ? r.neg() : r, e, t3, true)) : new n3(1) : new n3(NaN);
  };
  m3.cubeRoot = m3.cbrt = function() {
    var e, t3, r, n3, i3, o2, s3, a, l, u3, c3 = this, p3 = c3.constructor;
    if (!c3.isFinite() || c3.isZero())
      return new p3(c3);
    for (x3 = false, o2 = c3.s * G(c3.s * c3, 1 / 3), !o2 || Math.abs(o2) == 1 / 0 ? (r = K(c3.d), e = c3.e, (o2 = (e - r.length + 1) % 3) && (r += o2 == 1 || o2 == -2 ? "0" : "00"), o2 = G(r, 1 / 3), e = ee((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2)), o2 == 1 / 0 ? r = "5e" + e : (r = o2.toExponential(), r = r.slice(0, r.indexOf("e") + 1) + e), n3 = new p3(r), n3.s = c3.s) : n3 = new p3(o2.toString()), s3 = (e = p3.precision) + 3;; )
      if (a = n3, l = a.times(a).times(a), u3 = l.plus(c3), n3 = N(u3.plus(c3).times(a), u3.plus(l), s3 + 2, 1), K(a.d).slice(0, s3) === (r = K(n3.d)).slice(0, s3))
        if (r = r.slice(s3 - 3, s3 + 1), r == "9999" || !i3 && r == "4999") {
          if (!i3 && (y3(a, e + 1, 0), a.times(a).times(a).eq(c3))) {
            n3 = a;
            break;
          }
          s3 += 4, i3 = 1;
        } else {
          (!+r || !+r.slice(1) && r.charAt(0) == "5") && (y3(n3, e + 1, 1), t3 = !n3.times(n3).times(n3).eq(c3));
          break;
        }
    return x3 = true, y3(n3, e, p3.rounding, t3);
  };
  m3.decimalPlaces = m3.dp = function() {
    var e, t3 = this.d, r = NaN;
    if (t3) {
      if (e = t3.length - 1, r = (e - ee(this.e / b)) * b, e = t3[e], e)
        for (;e % 10 == 0; e /= 10)
          r--;
      r < 0 && (r = 0);
    }
    return r;
  };
  m3.dividedBy = m3.div = function(e) {
    return N(this, new this.constructor(e));
  };
  m3.dividedToIntegerBy = m3.divToInt = function(e) {
    var t3 = this, r = t3.constructor;
    return y3(N(t3, new r(e), 0, 1, 1), r.precision, r.rounding);
  };
  m3.equals = m3.eq = function(e) {
    return this.cmp(e) === 0;
  };
  m3.floor = function() {
    return y3(new this.constructor(this), this.e + 1, 3);
  };
  m3.greaterThan = m3.gt = function(e) {
    return this.cmp(e) > 0;
  };
  m3.greaterThanOrEqualTo = m3.gte = function(e) {
    var t3 = this.cmp(e);
    return t3 == 1 || t3 === 0;
  };
  m3.hyperbolicCosine = m3.cosh = function() {
    var e, t3, r, n3, i3, o2 = this, s3 = o2.constructor, a = new s3(1);
    if (!o2.isFinite())
      return new s3(o2.s ? 1 / 0 : NaN);
    if (o2.isZero())
      return a;
    r = s3.precision, n3 = s3.rounding, s3.precision = r + Math.max(o2.e, o2.sd()) + 4, s3.rounding = 1, i3 = o2.d.length, i3 < 32 ? (e = Math.ceil(i3 / 3), t3 = (1 / un(4, e)).toString()) : (e = 16, t3 = "2.3283064365386962890625e-10"), o2 = vt(s3, 1, o2.times(t3), new s3(1), true);
    for (var l, u3 = e, c3 = new s3(8);u3--; )
      l = o2.times(o2), o2 = a.minus(l.times(c3.minus(l.times(c3))));
    return y3(o2, s3.precision = r, s3.rounding = n3, true);
  };
  m3.hyperbolicSine = m3.sinh = function() {
    var e, t3, r, n3, i3 = this, o2 = i3.constructor;
    if (!i3.isFinite() || i3.isZero())
      return new o2(i3);
    if (t3 = o2.precision, r = o2.rounding, o2.precision = t3 + Math.max(i3.e, i3.sd()) + 4, o2.rounding = 1, n3 = i3.d.length, n3 < 3)
      i3 = vt(o2, 2, i3, i3, true);
    else {
      e = 1.4 * Math.sqrt(n3), e = e > 16 ? 16 : e | 0, i3 = i3.times(1 / un(5, e)), i3 = vt(o2, 2, i3, i3, true);
      for (var s3, a = new o2(5), l = new o2(16), u3 = new o2(20);e--; )
        s3 = i3.times(i3), i3 = i3.times(a.plus(s3.times(l.times(s3).plus(u3))));
    }
    return o2.precision = t3, o2.rounding = r, y3(i3, t3, r, true);
  };
  m3.hyperbolicTangent = m3.tanh = function() {
    var e, t3, r = this, n3 = r.constructor;
    return r.isFinite() ? r.isZero() ? new n3(r) : (e = n3.precision, t3 = n3.rounding, n3.precision = e + 7, n3.rounding = 1, N(r.sinh(), r.cosh(), n3.precision = e, n3.rounding = t3)) : new n3(r.s);
  };
  m3.inverseCosine = m3.acos = function() {
    var e, t3 = this, r = t3.constructor, n3 = t3.abs().cmp(1), i3 = r.precision, o2 = r.rounding;
    return n3 !== -1 ? n3 === 0 ? t3.isNeg() ? fe(r, i3, o2) : new r(0) : new r(NaN) : t3.isZero() ? fe(r, i3 + 4, o2).times(0.5) : (r.precision = i3 + 6, r.rounding = 1, t3 = t3.asin(), e = fe(r, i3 + 4, o2).times(0.5), r.precision = i3, r.rounding = o2, e.minus(t3));
  };
  m3.inverseHyperbolicCosine = m3.acosh = function() {
    var e, t3, r = this, n3 = r.constructor;
    return r.lte(1) ? new n3(r.eq(1) ? 0 : NaN) : r.isFinite() ? (e = n3.precision, t3 = n3.rounding, n3.precision = e + Math.max(Math.abs(r.e), r.sd()) + 4, n3.rounding = 1, x3 = false, r = r.times(r).minus(1).sqrt().plus(r), x3 = true, n3.precision = e, n3.rounding = t3, r.ln()) : new n3(r);
  };
  m3.inverseHyperbolicSine = m3.asinh = function() {
    var e, t3, r = this, n3 = r.constructor;
    return !r.isFinite() || r.isZero() ? new n3(r) : (e = n3.precision, t3 = n3.rounding, n3.precision = e + 2 * Math.max(Math.abs(r.e), r.sd()) + 6, n3.rounding = 1, x3 = false, r = r.times(r).plus(1).sqrt().plus(r), x3 = true, n3.precision = e, n3.rounding = t3, r.ln());
  };
  m3.inverseHyperbolicTangent = m3.atanh = function() {
    var e, t3, r, n3, i3 = this, o2 = i3.constructor;
    return i3.isFinite() ? i3.e >= 0 ? new o2(i3.abs().eq(1) ? i3.s / 0 : i3.isZero() ? i3 : NaN) : (e = o2.precision, t3 = o2.rounding, n3 = i3.sd(), Math.max(n3, e) < 2 * -i3.e - 1 ? y3(new o2(i3), e, t3, true) : (o2.precision = r = n3 - i3.e, i3 = N(i3.plus(1), new o2(1).minus(i3), r + e, 1), o2.precision = e + 4, o2.rounding = 1, i3 = i3.ln(), o2.precision = e, o2.rounding = t3, i3.times(0.5))) : new o2(NaN);
  };
  m3.inverseSine = m3.asin = function() {
    var e, t3, r, n3, i3 = this, o2 = i3.constructor;
    return i3.isZero() ? new o2(i3) : (t3 = i3.abs().cmp(1), r = o2.precision, n3 = o2.rounding, t3 !== -1 ? t3 === 0 ? (e = fe(o2, r + 4, n3).times(0.5), e.s = i3.s, e) : new o2(NaN) : (o2.precision = r + 6, o2.rounding = 1, i3 = i3.div(new o2(1).minus(i3.times(i3)).sqrt().plus(1)).atan(), o2.precision = r, o2.rounding = n3, i3.times(2)));
  };
  m3.inverseTangent = m3.atan = function() {
    var e, t3, r, n3, i3, o2, s3, a, l, u3 = this, c3 = u3.constructor, p3 = c3.precision, d3 = c3.rounding;
    if (u3.isFinite()) {
      if (u3.isZero())
        return new c3(u3);
      if (u3.abs().eq(1) && p3 + 4 <= Ai)
        return s3 = fe(c3, p3 + 4, d3).times(0.25), s3.s = u3.s, s3;
    } else {
      if (!u3.s)
        return new c3(NaN);
      if (p3 + 4 <= Ai)
        return s3 = fe(c3, p3 + 4, d3).times(0.5), s3.s = u3.s, s3;
    }
    for (c3.precision = a = p3 + 10, c3.rounding = 1, r = Math.min(28, a / b + 2 | 0), e = r;e; --e)
      u3 = u3.div(u3.times(u3).plus(1).sqrt().plus(1));
    for (x3 = false, t3 = Math.ceil(a / b), n3 = 1, l = u3.times(u3), s3 = new c3(u3), i3 = u3;e !== -1; )
      if (i3 = i3.times(l), o2 = s3.minus(i3.div(n3 += 2)), i3 = i3.times(l), s3 = o2.plus(i3.div(n3 += 2)), s3.d[t3] !== undefined)
        for (e = t3;s3.d[e] === o2.d[e] && e--; )
          ;
    return r && (s3 = s3.times(2 << r - 1)), x3 = true, y3(s3, c3.precision = p3, c3.rounding = d3, true);
  };
  m3.isFinite = function() {
    return !!this.d;
  };
  m3.isInteger = m3.isInt = function() {
    return !!this.d && ee(this.e / b) > this.d.length - 2;
  };
  m3.isNaN = function() {
    return !this.s;
  };
  m3.isNegative = m3.isNeg = function() {
    return this.s < 0;
  };
  m3.isPositive = m3.isPos = function() {
    return this.s > 0;
  };
  m3.isZero = function() {
    return !!this.d && this.d[0] === 0;
  };
  m3.lessThan = m3.lt = function(e) {
    return this.cmp(e) < 0;
  };
  m3.lessThanOrEqualTo = m3.lte = function(e) {
    return this.cmp(e) < 1;
  };
  m3.logarithm = m3.log = function(e) {
    var t3, r, n3, i3, o2, s3, a, l, u3 = this, c3 = u3.constructor, p3 = c3.precision, d3 = c3.rounding, f3 = 5;
    if (e == null)
      e = new c3(10), t3 = true;
    else {
      if (e = new c3(e), r = e.d, e.s < 0 || !r || !r[0] || e.eq(1))
        return new c3(NaN);
      t3 = e.eq(10);
    }
    if (r = u3.d, u3.s < 0 || !r || !r[0] || u3.eq(1))
      return new c3(r && !r[0] ? -1 / 0 : u3.s != 1 ? NaN : r ? 0 : 1 / 0);
    if (t3)
      if (r.length > 1)
        o2 = true;
      else {
        for (i3 = r[0];i3 % 10 === 0; )
          i3 /= 10;
        o2 = i3 !== 1;
      }
    if (x3 = false, a = p3 + f3, s3 = Je(u3, a), n3 = t3 ? sn(c3, a + 10) : Je(e, a), l = N(s3, n3, a, 1), ar(l.d, i3 = p3, d3))
      do
        if (a += 10, s3 = Je(u3, a), n3 = t3 ? sn(c3, a + 10) : Je(e, a), l = N(s3, n3, a, 1), !o2) {
          +K(l.d).slice(i3 + 1, i3 + 15) + 1 == 100000000000000 && (l = y3(l, p3 + 1, 0));
          break;
        }
      while (ar(l.d, i3 += 10, d3));
    return x3 = true, y3(l, p3, d3);
  };
  m3.minus = m3.sub = function(e) {
    var t3, r, n3, i3, o2, s3, a, l, u3, c3, p3, d3, f3 = this, g = f3.constructor;
    if (e = new g(e), !f3.d || !e.d)
      return !f3.s || !e.s ? e = new g(NaN) : f3.d ? e.s = -e.s : e = new g(e.d || f3.s !== e.s ? f3 : NaN), e;
    if (f3.s != e.s)
      return e.s = -e.s, f3.plus(e);
    if (u3 = f3.d, d3 = e.d, a = g.precision, l = g.rounding, !u3[0] || !d3[0]) {
      if (d3[0])
        e.s = -e.s;
      else if (u3[0])
        e = new g(f3);
      else
        return new g(l === 3 ? -0 : 0);
      return x3 ? y3(e, a, l) : e;
    }
    if (r = ee(e.e / b), c3 = ee(f3.e / b), u3 = u3.slice(), o2 = c3 - r, o2) {
      for (p3 = o2 < 0, p3 ? (t3 = u3, o2 = -o2, s3 = d3.length) : (t3 = d3, r = c3, s3 = u3.length), n3 = Math.max(Math.ceil(a / b), s3) + 2, o2 > n3 && (o2 = n3, t3.length = 1), t3.reverse(), n3 = o2;n3--; )
        t3.push(0);
      t3.reverse();
    } else {
      for (n3 = u3.length, s3 = d3.length, p3 = n3 < s3, p3 && (s3 = n3), n3 = 0;n3 < s3; n3++)
        if (u3[n3] != d3[n3]) {
          p3 = u3[n3] < d3[n3];
          break;
        }
      o2 = 0;
    }
    for (p3 && (t3 = u3, u3 = d3, d3 = t3, e.s = -e.s), s3 = u3.length, n3 = d3.length - s3;n3 > 0; --n3)
      u3[s3++] = 0;
    for (n3 = d3.length;n3 > o2; ) {
      if (u3[--n3] < d3[n3]) {
        for (i3 = n3;i3 && u3[--i3] === 0; )
          u3[i3] = ge - 1;
        --u3[i3], u3[n3] += ge;
      }
      u3[n3] -= d3[n3];
    }
    for (;u3[--s3] === 0; )
      u3.pop();
    for (;u3[0] === 0; u3.shift())
      --r;
    return u3[0] ? (e.d = u3, e.e = ln(u3, r), x3 ? y3(e, a, l) : e) : new g(l === 3 ? -0 : 0);
  };
  m3.modulo = m3.mod = function(e) {
    var t3, r = this, n3 = r.constructor;
    return e = new n3(e), !r.d || !e.s || e.d && !e.d[0] ? new n3(NaN) : !e.d || r.d && !r.d[0] ? y3(new n3(r), n3.precision, n3.rounding) : (x3 = false, n3.modulo == 9 ? (t3 = N(r, e.abs(), 0, 3, 1), t3.s *= e.s) : t3 = N(r, e, 0, n3.modulo, 1), t3 = t3.times(e), x3 = true, r.minus(t3));
  };
  m3.naturalExponential = m3.exp = function() {
    return Ii(this);
  };
  m3.naturalLogarithm = m3.ln = function() {
    return Je(this);
  };
  m3.negated = m3.neg = function() {
    var e = new this.constructor(this);
    return e.s = -e.s, y3(e);
  };
  m3.plus = m3.add = function(e) {
    var t3, r, n3, i3, o2, s3, a, l, u3, c3, p3 = this, d3 = p3.constructor;
    if (e = new d3(e), !p3.d || !e.d)
      return !p3.s || !e.s ? e = new d3(NaN) : p3.d || (e = new d3(e.d || p3.s === e.s ? p3 : NaN)), e;
    if (p3.s != e.s)
      return e.s = -e.s, p3.minus(e);
    if (u3 = p3.d, c3 = e.d, a = d3.precision, l = d3.rounding, !u3[0] || !c3[0])
      return c3[0] || (e = new d3(p3)), x3 ? y3(e, a, l) : e;
    if (o2 = ee(p3.e / b), n3 = ee(e.e / b), u3 = u3.slice(), i3 = o2 - n3, i3) {
      for (i3 < 0 ? (r = u3, i3 = -i3, s3 = c3.length) : (r = c3, n3 = o2, s3 = u3.length), o2 = Math.ceil(a / b), s3 = o2 > s3 ? o2 + 1 : s3 + 1, i3 > s3 && (i3 = s3, r.length = 1), r.reverse();i3--; )
        r.push(0);
      r.reverse();
    }
    for (s3 = u3.length, i3 = c3.length, s3 - i3 < 0 && (i3 = s3, r = c3, c3 = u3, u3 = r), t3 = 0;i3; )
      t3 = (u3[--i3] = u3[i3] + c3[i3] + t3) / ge | 0, u3[i3] %= ge;
    for (t3 && (u3.unshift(t3), ++n3), s3 = u3.length;u3[--s3] == 0; )
      u3.pop();
    return e.d = u3, e.e = ln(u3, n3), x3 ? y3(e, a, l) : e;
  };
  m3.precision = m3.sd = function(e) {
    var t3, r = this;
    if (e !== undefined && e !== !!e && e !== 1 && e !== 0)
      throw Error(We + e);
    return r.d ? (t3 = Cs(r.d), e && r.e + 1 > t3 && (t3 = r.e + 1)) : t3 = NaN, t3;
  };
  m3.round = function() {
    var e = this, t3 = e.constructor;
    return y3(new t3(e), e.e + 1, t3.rounding);
  };
  m3.sine = m3.sin = function() {
    var e, t3, r = this, n3 = r.constructor;
    return r.isFinite() ? r.isZero() ? new n3(r) : (e = n3.precision, t3 = n3.rounding, n3.precision = e + Math.max(r.e, r.sd()) + b, n3.rounding = 1, r = bc(n3, Os(n3, r)), n3.precision = e, n3.rounding = t3, y3(Fe > 2 ? r.neg() : r, e, t3, true)) : new n3(NaN);
  };
  m3.squareRoot = m3.sqrt = function() {
    var e, t3, r, n3, i3, o2, s3 = this, a = s3.d, l = s3.e, u3 = s3.s, c3 = s3.constructor;
    if (u3 !== 1 || !a || !a[0])
      return new c3(!u3 || u3 < 0 && (!a || a[0]) ? NaN : a ? s3 : 1 / 0);
    for (x3 = false, u3 = Math.sqrt(+s3), u3 == 0 || u3 == 1 / 0 ? (t3 = K(a), (t3.length + l) % 2 == 0 && (t3 += "0"), u3 = Math.sqrt(t3), l = ee((l + 1) / 2) - (l < 0 || l % 2), u3 == 1 / 0 ? t3 = "5e" + l : (t3 = u3.toExponential(), t3 = t3.slice(0, t3.indexOf("e") + 1) + l), n3 = new c3(t3)) : n3 = new c3(u3.toString()), r = (l = c3.precision) + 3;; )
      if (o2 = n3, n3 = o2.plus(N(s3, o2, r + 2, 1)).times(0.5), K(o2.d).slice(0, r) === (t3 = K(n3.d)).slice(0, r))
        if (t3 = t3.slice(r - 3, r + 1), t3 == "9999" || !i3 && t3 == "4999") {
          if (!i3 && (y3(o2, l + 1, 0), o2.times(o2).eq(s3))) {
            n3 = o2;
            break;
          }
          r += 4, i3 = 1;
        } else {
          (!+t3 || !+t3.slice(1) && t3.charAt(0) == "5") && (y3(n3, l + 1, 1), e = !n3.times(n3).eq(s3));
          break;
        }
    return x3 = true, y3(n3, l, c3.rounding, e);
  };
  m3.tangent = m3.tan = function() {
    var e, t3, r = this, n3 = r.constructor;
    return r.isFinite() ? r.isZero() ? new n3(r) : (e = n3.precision, t3 = n3.rounding, n3.precision = e + 10, n3.rounding = 1, r = r.sin(), r.s = 1, r = N(r, new n3(1).minus(r.times(r)).sqrt(), e + 10, 0), n3.precision = e, n3.rounding = t3, y3(Fe == 2 || Fe == 4 ? r.neg() : r, e, t3, true)) : new n3(NaN);
  };
  m3.times = m3.mul = function(e) {
    var t3, r, n3, i3, o2, s3, a, l, u3, c3 = this, p3 = c3.constructor, d3 = c3.d, f3 = (e = new p3(e)).d;
    if (e.s *= c3.s, !d3 || !d3[0] || !f3 || !f3[0])
      return new p3(!e.s || d3 && !d3[0] && !f3 || f3 && !f3[0] && !d3 ? NaN : !d3 || !f3 ? e.s / 0 : e.s * 0);
    for (r = ee(c3.e / b) + ee(e.e / b), l = d3.length, u3 = f3.length, l < u3 && (o2 = d3, d3 = f3, f3 = o2, s3 = l, l = u3, u3 = s3), o2 = [], s3 = l + u3, n3 = s3;n3--; )
      o2.push(0);
    for (n3 = u3;--n3 >= 0; ) {
      for (t3 = 0, i3 = l + n3;i3 > n3; )
        a = o2[i3] + f3[n3] * d3[i3 - n3 - 1] + t3, o2[i3--] = a % ge | 0, t3 = a / ge | 0;
      o2[i3] = (o2[i3] + t3) % ge | 0;
    }
    for (;!o2[--s3]; )
      o2.pop();
    return t3 ? ++r : o2.shift(), e.d = o2, e.e = ln(o2, r), x3 ? y3(e, p3.precision, p3.rounding) : e;
  };
  m3.toBinary = function(e, t3) {
    return ki(this, 2, e, t3);
  };
  m3.toDecimalPlaces = m3.toDP = function(e, t3) {
    var r = this, n3 = r.constructor;
    return r = new n3(r), e === undefined ? r : (oe(e, 0, He), t3 === undefined ? t3 = n3.rounding : oe(t3, 0, 8), y3(r, e + r.e + 1, t3));
  };
  m3.toExponential = function(e, t3) {
    var r, n3 = this, i3 = n3.constructor;
    return e === undefined ? r = Pe(n3, true) : (oe(e, 0, He), t3 === undefined ? t3 = i3.rounding : oe(t3, 0, 8), n3 = y3(new i3(n3), e + 1, t3), r = Pe(n3, true, e + 1)), n3.isNeg() && !n3.isZero() ? "-" + r : r;
  };
  m3.toFixed = function(e, t3) {
    var r, n3, i3 = this, o2 = i3.constructor;
    return e === undefined ? r = Pe(i3) : (oe(e, 0, He), t3 === undefined ? t3 = o2.rounding : oe(t3, 0, 8), n3 = y3(new o2(i3), e + i3.e + 1, t3), r = Pe(n3, false, e + n3.e + 1)), i3.isNeg() && !i3.isZero() ? "-" + r : r;
  };
  m3.toFraction = function(e) {
    var t3, r, n3, i3, o2, s3, a, l, u3, c3, p3, d3, f3 = this, g = f3.d, h = f3.constructor;
    if (!g)
      return new h(f3);
    if (u3 = r = new h(1), n3 = l = new h(0), t3 = new h(n3), o2 = t3.e = Cs(g) - f3.e - 1, s3 = o2 % b, t3.d[0] = G(10, s3 < 0 ? b + s3 : s3), e == null)
      e = o2 > 0 ? t3 : u3;
    else {
      if (a = new h(e), !a.isInt() || a.lt(u3))
        throw Error(We + a);
      e = a.gt(t3) ? o2 > 0 ? t3 : u3 : a;
    }
    for (x3 = false, a = new h(K(g)), c3 = h.precision, h.precision = o2 = g.length * b * 2;p3 = N(a, t3, 0, 1, 1), i3 = r.plus(p3.times(n3)), i3.cmp(e) != 1; )
      r = n3, n3 = i3, i3 = u3, u3 = l.plus(p3.times(i3)), l = i3, i3 = t3, t3 = a.minus(p3.times(i3)), a = i3;
    return i3 = N(e.minus(r), n3, 0, 1, 1), l = l.plus(i3.times(u3)), r = r.plus(i3.times(n3)), l.s = u3.s = f3.s, d3 = N(u3, n3, o2, 1).minus(f3).abs().cmp(N(l, r, o2, 1).minus(f3).abs()) < 1 ? [u3, n3] : [l, r], h.precision = c3, x3 = true, d3;
  };
  m3.toHexadecimal = m3.toHex = function(e, t3) {
    return ki(this, 16, e, t3);
  };
  m3.toNearest = function(e, t3) {
    var r = this, n3 = r.constructor;
    if (r = new n3(r), e == null) {
      if (!r.d)
        return r;
      e = new n3(1), t3 = n3.rounding;
    } else {
      if (e = new n3(e), t3 === undefined ? t3 = n3.rounding : oe(t3, 0, 8), !r.d)
        return e.s ? r : e;
      if (!e.d)
        return e.s && (e.s = r.s), e;
    }
    return e.d[0] ? (x3 = false, r = N(r, e, 0, t3, 1).times(e), x3 = true, y3(r)) : (e.s = r.s, r = e), r;
  };
  m3.toNumber = function() {
    return +this;
  };
  m3.toOctal = function(e, t3) {
    return ki(this, 8, e, t3);
  };
  m3.toPower = m3.pow = function(e) {
    var t3, r, n3, i3, o2, s3, a = this, l = a.constructor, u3 = +(e = new l(e));
    if (!a.d || !e.d || !a.d[0] || !e.d[0])
      return new l(G(+a, u3));
    if (a = new l(a), a.eq(1))
      return a;
    if (n3 = l.precision, o2 = l.rounding, e.eq(1))
      return y3(a, n3, o2);
    if (t3 = ee(e.e / b), t3 >= e.d.length - 1 && (r = u3 < 0 ? -u3 : u3) <= fc)
      return i3 = Ss(l, a, r, n3), e.s < 0 ? new l(1).div(i3) : y3(i3, n3, o2);
    if (s3 = a.s, s3 < 0) {
      if (t3 < e.d.length - 1)
        return new l(NaN);
      if (e.d[t3] & 1 || (s3 = 1), a.e == 0 && a.d[0] == 1 && a.d.length == 1)
        return a.s = s3, a;
    }
    return r = G(+a, u3), t3 = r == 0 || !isFinite(r) ? ee(u3 * (Math.log("0." + K(a.d)) / Math.LN10 + a.e + 1)) : new l(r + "").e, t3 > l.maxE + 1 || t3 < l.minE - 1 ? new l(t3 > 0 ? s3 / 0 : 0) : (x3 = false, l.rounding = a.s = 1, r = Math.min(12, (t3 + "").length), i3 = Ii(e.times(Je(a, n3 + r)), n3), i3.d && (i3 = y3(i3, n3 + 5, 1), ar(i3.d, n3, o2) && (t3 = n3 + 10, i3 = y3(Ii(e.times(Je(a, t3 + r)), t3), t3 + 5, 1), +K(i3.d).slice(n3 + 1, n3 + 15) + 1 == 100000000000000 && (i3 = y3(i3, n3 + 1, 0)))), i3.s = s3, x3 = true, l.rounding = o2, y3(i3, n3, o2));
  };
  m3.toPrecision = function(e, t3) {
    var r, n3 = this, i3 = n3.constructor;
    return e === undefined ? r = Pe(n3, n3.e <= i3.toExpNeg || n3.e >= i3.toExpPos) : (oe(e, 1, He), t3 === undefined ? t3 = i3.rounding : oe(t3, 0, 8), n3 = y3(new i3(n3), e, t3), r = Pe(n3, e <= n3.e || n3.e <= i3.toExpNeg, e)), n3.isNeg() && !n3.isZero() ? "-" + r : r;
  };
  m3.toSignificantDigits = m3.toSD = function(e, t3) {
    var r = this, n3 = r.constructor;
    return e === undefined ? (e = n3.precision, t3 = n3.rounding) : (oe(e, 1, He), t3 === undefined ? t3 = n3.rounding : oe(t3, 0, 8)), y3(new n3(r), e, t3);
  };
  m3.toString = function() {
    var e = this, t3 = e.constructor, r = Pe(e, e.e <= t3.toExpNeg || e.e >= t3.toExpPos);
    return e.isNeg() && !e.isZero() ? "-" + r : r;
  };
  m3.truncated = m3.trunc = function() {
    return y3(new this.constructor(this), this.e + 1, 1);
  };
  m3.valueOf = m3.toJSON = function() {
    var e = this, t3 = e.constructor, r = Pe(e, e.e <= t3.toExpNeg || e.e >= t3.toExpPos);
    return e.isNeg() ? "-" + r : r;
  };
  var N = function() {
    function e(n3, i3, o2) {
      var s3, a = 0, l = n3.length;
      for (n3 = n3.slice();l--; )
        s3 = n3[l] * i3 + a, n3[l] = s3 % o2 | 0, a = s3 / o2 | 0;
      return a && n3.unshift(a), n3;
    }
    function t3(n3, i3, o2, s3) {
      var a, l;
      if (o2 != s3)
        l = o2 > s3 ? 1 : -1;
      else
        for (a = l = 0;a < o2; a++)
          if (n3[a] != i3[a]) {
            l = n3[a] > i3[a] ? 1 : -1;
            break;
          }
      return l;
    }
    function r(n3, i3, o2, s3) {
      for (var a = 0;o2--; )
        n3[o2] -= a, a = n3[o2] < i3[o2] ? 1 : 0, n3[o2] = a * s3 + n3[o2] - i3[o2];
      for (;!n3[0] && n3.length > 1; )
        n3.shift();
    }
    return function(n3, i3, o2, s3, a, l) {
      var u3, c3, p3, d3, f3, g, h, O, T3, S, C, E, me, ae, qt, U, ne, Se, z, pt, Dr = n3.constructor, Fn = n3.s == i3.s ? 1 : -1, Y = n3.d, _ = i3.d;
      if (!Y || !Y[0] || !_ || !_[0])
        return new Dr(!n3.s || !i3.s || (Y ? _ && Y[0] == _[0] : !_) ? NaN : Y && Y[0] == 0 || !_ ? Fn * 0 : Fn / 0);
      for (l ? (f3 = 1, c3 = n3.e - i3.e) : (l = ge, f3 = b, c3 = ee(n3.e / f3) - ee(i3.e / f3)), z = _.length, ne = Y.length, T3 = new Dr(Fn), S = T3.d = [], p3 = 0;_[p3] == (Y[p3] || 0); p3++)
        ;
      if (_[p3] > (Y[p3] || 0) && c3--, o2 == null ? (ae = o2 = Dr.precision, s3 = Dr.rounding) : a ? ae = o2 + (n3.e - i3.e) + 1 : ae = o2, ae < 0)
        S.push(1), g = true;
      else {
        if (ae = ae / f3 + 2 | 0, p3 = 0, z == 1) {
          for (d3 = 0, _ = _[0], ae++;(p3 < ne || d3) && ae--; p3++)
            qt = d3 * l + (Y[p3] || 0), S[p3] = qt / _ | 0, d3 = qt % _ | 0;
          g = d3 || p3 < ne;
        } else {
          for (d3 = l / (_[0] + 1) | 0, d3 > 1 && (_ = e(_, d3, l), Y = e(Y, d3, l), z = _.length, ne = Y.length), U = z, C = Y.slice(0, z), E = C.length;E < z; )
            C[E++] = 0;
          pt = _.slice(), pt.unshift(0), Se = _[0], _[1] >= l / 2 && ++Se;
          do
            d3 = 0, u3 = t3(_, C, z, E), u3 < 0 ? (me = C[0], z != E && (me = me * l + (C[1] || 0)), d3 = me / Se | 0, d3 > 1 ? (d3 >= l && (d3 = l - 1), h = e(_, d3, l), O = h.length, E = C.length, u3 = t3(h, C, O, E), u3 == 1 && (d3--, r(h, z < O ? pt : _, O, l))) : (d3 == 0 && (u3 = d3 = 1), h = _.slice()), O = h.length, O < E && h.unshift(0), r(C, h, E, l), u3 == -1 && (E = C.length, u3 = t3(_, C, z, E), u3 < 1 && (d3++, r(C, z < E ? pt : _, E, l))), E = C.length) : u3 === 0 && (d3++, C = [0]), S[p3++] = d3, u3 && C[0] ? C[E++] = Y[U] || 0 : (C = [Y[U]], E = 1);
          while ((U++ < ne || C[0] !== undefined) && ae--);
          g = C[0] !== undefined;
        }
        S[0] || S.shift();
      }
      if (f3 == 1)
        T3.e = c3, xs = g;
      else {
        for (p3 = 1, d3 = S[0];d3 >= 10; d3 /= 10)
          p3++;
        T3.e = p3 + c3 * f3 - 1, y3(T3, a ? o2 + T3.e + 1 : o2, s3, g);
      }
      return T3;
    };
  }();
  m3[Symbol.for("nodejs.util.inspect.custom")] = m3.toString;
  m3[Symbol.toStringTag] = "Decimal";
  var it = m3.constructor = ks(Si);
  nn = new it(nn);
  on = new it(on);
  var ve = it;
  var lr = class {
    constructor(t3, r, n3, i3, o2) {
      this.modelName = t3, this.name = r, this.typeName = n3, this.isList = i3, this.isEnum = o2;
    }
    _toGraphQLInputType() {
      let t3 = this.isList ? "List" : "", r = this.isEnum ? "Enum" : "";
      return `${t3}${r}${this.typeName}FieldRefInput<${this.modelName}>`;
    }
  };
  var cn = class {
    constructor(t3) {
      this.value = t3;
    }
    write(t3) {
      t3.write(this.value);
    }
    markAsError() {
      this.value.markAsError();
    }
  };
  var pn = (e) => e;
  var dn = { bold: pn, red: pn, green: pn, dim: pn, enabled: false };
  var Ds = { bold: H, red: ce, green: Me, dim: Ae, enabled: true };
  var Ct = { write(e) {
    e.writeLine(",");
  } };
  var Te = class {
    constructor(t3) {
      this.contents = t3;
      this.isUnderlined = false;
      this.color = (t4) => t4;
    }
    underline() {
      return this.isUnderlined = true, this;
    }
    setColor(t3) {
      return this.color = t3, this;
    }
    write(t3) {
      let r = t3.getCurrentLineLength();
      t3.write(this.color(this.contents)), this.isUnderlined && t3.afterNextNewline(() => {
        t3.write(" ".repeat(r)).writeLine(this.color("~".repeat(this.contents.length)));
      });
    }
  };
  var Ke = class {
    constructor() {
      this.hasError = false;
    }
    markAsError() {
      return this.hasError = true, this;
    }
  };
  var St = class extends Ke {
    constructor() {
      super(...arguments);
      this.items = [];
    }
    addItem(r) {
      return this.items.push(new cn(r)), this;
    }
    getField(r) {
      return this.items[r];
    }
    getPrintWidth() {
      return this.items.length === 0 ? 2 : Math.max(...this.items.map((n3) => n3.value.getPrintWidth())) + 2;
    }
    write(r) {
      if (this.items.length === 0) {
        this.writeEmpty(r);
        return;
      }
      this.writeWithItems(r);
    }
    writeEmpty(r) {
      let n3 = new Te("[]");
      this.hasError && n3.setColor(r.context.colors.red).underline(), r.write(n3);
    }
    writeWithItems(r) {
      let { colors: n3 } = r.context;
      r.writeLine("[").withIndent(() => r.writeJoined(Ct, this.items).newLine()).write("]"), this.hasError && r.afterNextNewline(() => {
        r.writeLine(n3.red("~".repeat(this.getPrintWidth())));
      });
    }
    asObject() {
    }
  };
  var _s = ": ";
  var mn = class {
    constructor(t3, r) {
      this.name = t3;
      this.value = r;
      this.hasError = false;
    }
    markAsError() {
      this.hasError = true;
    }
    getPrintWidth() {
      return this.name.length + this.value.getPrintWidth() + _s.length;
    }
    write(t3) {
      let r = new Te(this.name);
      this.hasError && r.underline().setColor(t3.context.colors.red), t3.write(r).write(_s).write(this.value);
    }
  };
  var At = class e extends Ke {
    constructor() {
      super(...arguments);
      this.fields = {};
      this.suggestions = [];
    }
    addField(r) {
      this.fields[r.name] = r;
    }
    addSuggestion(r) {
      this.suggestions.push(r);
    }
    getField(r) {
      return this.fields[r];
    }
    getDeepField(r) {
      let [n3, ...i3] = r, o2 = this.getField(n3);
      if (!o2)
        return;
      let s3 = o2;
      for (let a of i3) {
        let l;
        if (s3.value instanceof e ? l = s3.value.getField(a) : s3.value instanceof St && (l = s3.value.getField(Number(a))), !l)
          return;
        s3 = l;
      }
      return s3;
    }
    getDeepFieldValue(r) {
      return r.length === 0 ? this : this.getDeepField(r)?.value;
    }
    hasField(r) {
      return !!this.getField(r);
    }
    removeAllFields() {
      this.fields = {};
    }
    removeField(r) {
      delete this.fields[r];
    }
    getFields() {
      return this.fields;
    }
    isEmpty() {
      return Object.keys(this.fields).length === 0;
    }
    getFieldValue(r) {
      return this.getField(r)?.value;
    }
    getDeepSubSelectionValue(r) {
      let n3 = this;
      for (let i3 of r) {
        if (!(n3 instanceof e))
          return;
        let o2 = n3.getSubSelectionValue(i3);
        if (!o2)
          return;
        n3 = o2;
      }
      return n3;
    }
    getDeepSelectionParent(r) {
      let n3 = this.getSelectionParent();
      if (!n3)
        return;
      let i3 = n3;
      for (let o2 of r) {
        let s3 = i3.value.getFieldValue(o2);
        if (!s3 || !(s3 instanceof e))
          return;
        let a = s3.getSelectionParent();
        if (!a)
          return;
        i3 = a;
      }
      return i3;
    }
    getSelectionParent() {
      let r = this.getField("select")?.value.asObject();
      if (r)
        return { kind: "select", value: r };
      let n3 = this.getField("include")?.value.asObject();
      if (n3)
        return { kind: "include", value: n3 };
    }
    getSubSelectionValue(r) {
      return this.getSelectionParent()?.value.fields[r].value;
    }
    getPrintWidth() {
      let r = Object.values(this.fields);
      return r.length == 0 ? 2 : Math.max(...r.map((i3) => i3.getPrintWidth())) + 2;
    }
    write(r) {
      let n3 = Object.values(this.fields);
      if (n3.length === 0 && this.suggestions.length === 0) {
        this.writeEmpty(r);
        return;
      }
      this.writeWithContents(r, n3);
    }
    asObject() {
      return this;
    }
    writeEmpty(r) {
      let n3 = new Te("{}");
      this.hasError && n3.setColor(r.context.colors.red).underline(), r.write(n3);
    }
    writeWithContents(r, n3) {
      r.writeLine("{").withIndent(() => {
        r.writeJoined(Ct, [...n3, ...this.suggestions]).newLine();
      }), r.write("}"), this.hasError && r.afterNextNewline(() => {
        r.writeLine(r.context.colors.red("~".repeat(this.getPrintWidth())));
      });
    }
  };
  var W = class extends Ke {
    constructor(r) {
      super();
      this.text = r;
    }
    getPrintWidth() {
      return this.text.length;
    }
    write(r) {
      let n3 = new Te(this.text);
      this.hasError && n3.underline().setColor(r.context.colors.red), r.write(n3);
    }
    asObject() {
    }
  };
  var Di = class {
    constructor(t3) {
      this.errorMessages = [];
      this.arguments = t3;
    }
    write(t3) {
      t3.write(this.arguments);
    }
    addErrorMessage(t3) {
      this.errorMessages.push(t3);
    }
    renderAllMessages(t3) {
      return this.errorMessages.map((r) => r(t3)).join(`
`);
    }
  };
  var sp = "P2037";
  var ur = "<unknown>";
  var lp = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
  var up = /\((\S*)(?::(\d+))(?::(\d+))\)/;
  var pp = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
  var mp = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i;
  var fp = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
  var hp = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i;
  var bp = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;
  var _i = class {
    getLocation() {
      return null;
    }
  };
  var Li = class {
    constructor() {
      this._error = new Error;
    }
    getLocation() {
      let t3 = this._error.stack;
      if (!t3)
        return null;
      let n3 = Ms(t3).find((i3) => {
        if (!i3.file)
          return false;
        let o2 = ui(i3.file);
        return o2 !== "<anonymous>" && !o2.includes("@prisma") && !o2.includes("/packages/client/src/runtime/") && !o2.endsWith("/runtime/binary.js") && !o2.endsWith("/runtime/library.js") && !o2.endsWith("/runtime/edge.js") && !o2.endsWith("/runtime/edge-esm.js") && !o2.startsWith("internal/") && !i3.methodName.includes("new ") && !i3.methodName.includes("getCallSite") && !i3.methodName.includes("Proxy.") && i3.methodName.split(".").length < 4;
      });
      return !n3 || !n3.file ? null : { fileName: n3.file, lineNumber: n3.lineNumber, columnNumber: n3.column };
    }
  };
  var $s = { _avg: true, _count: true, _sum: true, _min: true, _max: true };
  var Gs = (e) => Array.isArray(e) ? e : e.split(".");
  var Fi = (e, t3) => Gs(t3).reduce((r, n3) => r && r[n3], e);
  var Qs = (e, t3, r) => Gs(t3).reduceRight((n3, i3, o2, s3) => Object.assign({}, Fi(e, s3.slice(0, o2)), { [i3]: n3 }), r);
  var Ys = k(ci());
  var zs = k(import.meta.require("fs"));
  var Js = { keyword: Oe, entity: Oe, value: (e) => H(et(e)), punctuation: et, directive: Oe, function: Oe, variable: (e) => H(et(e)), string: (e) => H(Me(e)), boolean: Ie, number: Oe, comment: Vt };
  var Ip = (e) => e;
  var hn = {};
  var Op = 0;
  var P = { manual: hn.Prism && hn.Prism.manual, disableWorkerMessageHandler: hn.Prism && hn.Prism.disableWorkerMessageHandler, util: { encode: function(e) {
    if (e instanceof he) {
      let t3 = e;
      return new he(t3.type, P.util.encode(t3.content), t3.alias);
    } else
      return Array.isArray(e) ? e.map(P.util.encode) : e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
  }, type: function(e) {
    return Object.prototype.toString.call(e).slice(8, -1);
  }, objId: function(e) {
    return e.__id || Object.defineProperty(e, "__id", { value: ++Op }), e.__id;
  }, clone: function e(t3, r) {
    let n3, i3, o2 = P.util.type(t3);
    switch (r = r || {}, o2) {
      case "Object":
        if (i3 = P.util.objId(t3), r[i3])
          return r[i3];
        n3 = {}, r[i3] = n3;
        for (let s3 in t3)
          t3.hasOwnProperty(s3) && (n3[s3] = e(t3[s3], r));
        return n3;
      case "Array":
        return i3 = P.util.objId(t3), r[i3] ? r[i3] : (n3 = [], r[i3] = n3, t3.forEach(function(s3, a) {
          n3[a] = e(s3, r);
        }), n3);
      default:
        return t3;
    }
  } }, languages: { extend: function(e, t3) {
    let r = P.util.clone(P.languages[e]);
    for (let n3 in t3)
      r[n3] = t3[n3];
    return r;
  }, insertBefore: function(e, t3, r, n3) {
    n3 = n3 || P.languages;
    let i3 = n3[e], o2 = {};
    for (let a in i3)
      if (i3.hasOwnProperty(a)) {
        if (a == t3)
          for (let l in r)
            r.hasOwnProperty(l) && (o2[l] = r[l]);
        r.hasOwnProperty(a) || (o2[a] = i3[a]);
      }
    let s3 = n3[e];
    return n3[e] = o2, P.languages.DFS(P.languages, function(a, l) {
      l === s3 && a != e && (this[a] = o2);
    }), o2;
  }, DFS: function e(t3, r, n3, i3) {
    i3 = i3 || {};
    let o2 = P.util.objId;
    for (let s3 in t3)
      if (t3.hasOwnProperty(s3)) {
        r.call(t3, s3, t3[s3], n3 || s3);
        let a = t3[s3], l = P.util.type(a);
        l === "Object" && !i3[o2(a)] ? (i3[o2(a)] = true, e(a, r, null, i3)) : l === "Array" && !i3[o2(a)] && (i3[o2(a)] = true, e(a, r, s3, i3));
      }
  } }, plugins: {}, highlight: function(e, t3, r) {
    let n3 = { code: e, grammar: t3, language: r };
    return P.hooks.run("before-tokenize", n3), n3.tokens = P.tokenize(n3.code, n3.grammar), P.hooks.run("after-tokenize", n3), he.stringify(P.util.encode(n3.tokens), n3.language);
  }, matchGrammar: function(e, t3, r, n3, i3, o2, s3) {
    for (let h in r) {
      if (!r.hasOwnProperty(h) || !r[h])
        continue;
      if (h == s3)
        return;
      let O = r[h];
      O = P.util.type(O) === "Array" ? O : [O];
      for (let T3 = 0;T3 < O.length; ++T3) {
        let S = O[T3], C = S.inside, E = !!S.lookbehind, me = !!S.greedy, ae = 0, qt = S.alias;
        if (me && !S.pattern.global) {
          let U = S.pattern.toString().match(/[imuy]*$/)[0];
          S.pattern = RegExp(S.pattern.source, U + "g");
        }
        S = S.pattern || S;
        for (let U = n3, ne = i3;U < t3.length; ne += t3[U].length, ++U) {
          let Se = t3[U];
          if (t3.length > e.length)
            return;
          if (Se instanceof he)
            continue;
          if (me && U != t3.length - 1) {
            S.lastIndex = ne;
            var p3 = S.exec(e);
            if (!p3)
              break;
            var c3 = p3.index + (E ? p3[1].length : 0), d3 = p3.index + p3[0].length, a = U, l = ne;
            for (let _ = t3.length;a < _ && (l < d3 || !t3[a].type && !t3[a - 1].greedy); ++a)
              l += t3[a].length, c3 >= l && (++U, ne = l);
            if (t3[U] instanceof he)
              continue;
            u3 = a - U, Se = e.slice(ne, l), p3.index -= ne;
          } else {
            S.lastIndex = 0;
            var p3 = S.exec(Se), u3 = 1;
          }
          if (!p3) {
            if (o2)
              break;
            continue;
          }
          E && (ae = p3[1] ? p3[1].length : 0);
          var c3 = p3.index + ae, p3 = p3[0].slice(ae), d3 = c3 + p3.length, f3 = Se.slice(0, c3), g = Se.slice(d3);
          let z = [U, u3];
          f3 && (++U, ne += f3.length, z.push(f3));
          let pt = new he(h, C ? P.tokenize(p3, C) : p3, qt, p3, me);
          if (z.push(pt), g && z.push(g), Array.prototype.splice.apply(t3, z), u3 != 1 && P.matchGrammar(e, t3, r, U, ne, true, h), o2)
            break;
        }
      }
    }
  }, tokenize: function(e, t3) {
    let r = [e], n3 = t3.rest;
    if (n3) {
      for (let i3 in n3)
        t3[i3] = n3[i3];
      delete t3.rest;
    }
    return P.matchGrammar(e, r, t3, 0, 0, false), r;
  }, hooks: { all: {}, add: function(e, t3) {
    let r = P.hooks.all;
    r[e] = r[e] || [], r[e].push(t3);
  }, run: function(e, t3) {
    let r = P.hooks.all[e];
    if (!(!r || !r.length))
      for (var n3 = 0, i3;i3 = r[n3++]; )
        i3(t3);
  } }, Token: he };
  P.languages.clike = { comment: [{ pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/, lookbehind: true }, { pattern: /(^|[^\\:])\/\/.*/, lookbehind: true, greedy: true }], string: { pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy: true }, "class-name": { pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i, lookbehind: true, inside: { punctuation: /[.\\]/ } }, keyword: /\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/, boolean: /\b(?:true|false)\b/, function: /\w+(?=\()/, number: /\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i, operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/, punctuation: /[{}[\];(),.:]/ };
  P.languages.javascript = P.languages.extend("clike", { "class-name": [P.languages.clike["class-name"], { pattern: /(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/, lookbehind: true }], keyword: [{ pattern: /((?:^|})\s*)(?:catch|finally)\b/, lookbehind: true }, { pattern: /(^|[^.])\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/, lookbehind: true }], number: /\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/, function: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/, operator: /-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/ });
  P.languages.javascript["class-name"][0].pattern = /(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/;
  P.languages.insertBefore("javascript", "keyword", { regex: { pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyus]{0,6}(?=\s*($|[\r\n,.;})\]]))/, lookbehind: true, greedy: true }, "function-variable": { pattern: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/, alias: "function" }, parameter: [{ pattern: /(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/, lookbehind: true, inside: P.languages.javascript }, { pattern: /[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i, inside: P.languages.javascript }, { pattern: /(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/, lookbehind: true, inside: P.languages.javascript }, { pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/, lookbehind: true, inside: P.languages.javascript }], constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/ });
  P.languages.markup && P.languages.markup.tag.addInlined("script", "javascript");
  P.languages.js = P.languages.javascript;
  P.languages.typescript = P.languages.extend("javascript", { keyword: /\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\b/, builtin: /\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\b/ });
  P.languages.ts = P.languages.typescript;
  he.stringify = function(e, t3) {
    return typeof e == "string" ? e : Array.isArray(e) ? e.map(function(r) {
      return he.stringify(r, t3);
    }).join("") : kp(e.type)(e.content);
  };
  var Hs = k(rs());
  var yn = class e {
    static read(t3) {
      let r;
      try {
        r = zs.default.readFileSync(t3, "utf-8");
      } catch {
        return null;
      }
      return e.fromContent(r);
    }
    static fromContent(t3) {
      let r = t3.split(/\r?\n/);
      return new e(1, r);
    }
    constructor(t3, r) {
      this.firstLineNumber = t3, this.lines = r;
    }
    get lastLineNumber() {
      return this.firstLineNumber + this.lines.length - 1;
    }
    mapLineAt(t3, r) {
      if (t3 < this.firstLineNumber || t3 > this.lines.length + this.firstLineNumber)
        return this;
      let n3 = t3 - this.firstLineNumber, i3 = [...this.lines];
      return i3[n3] = r(i3[n3]), new e(this.firstLineNumber, i3);
    }
    mapLines(t3) {
      return new e(this.firstLineNumber, this.lines.map((r, n3) => t3(r, this.firstLineNumber + n3)));
    }
    lineAt(t3) {
      return this.lines[t3 - this.firstLineNumber];
    }
    prependSymbolAt(t3, r) {
      return this.mapLines((n3, i3) => i3 === t3 ? `${r} ${n3}` : `  ${n3}`);
    }
    slice(t3, r) {
      let n3 = this.lines.slice(t3 - 1, r).join(`
`);
      return new e(t3, Ks(n3).split(`
`));
    }
    highlight() {
      let t3 = Ws(this.toString());
      return new e(this.firstLineNumber, t3.split(`
`));
    }
    toString() {
      return this.lines.join(`
`);
    }
  };
  var _p = { red: ce, gray: Vt, dim: Ae, bold: H, underline: X, highlightSource: (e) => e.highlight() };
  var Lp = { red: (e) => e, gray: (e) => e, dim: (e) => e, bold: (e) => e, underline: (e) => e, highlightSource: (e) => e };
  var Bp = ["findUnique", "findUniqueOrThrow", "findFirst", "findFirstOrThrow", "create", "update", "upsert", "delete"];
  var Up = ["aggregate", "count", "groupBy"];
  var $i = Symbol();
  var sa = (e) => e;
  var En = class {
    constructor(t3, r) {
      this.extension = t3;
      this.previous = r;
      this.computedFieldsCache = new we;
      this.modelExtensionsCache = new we;
      this.queryCallbacksCache = new we;
      this.clientExtensions = Xt(() => this.extension.client ? { ...this.previous?.getAllClientExtensions(), ...this.extension.client } : this.previous?.getAllClientExtensions());
      this.batchCallbacks = Xt(() => {
        let t4 = this.previous?.getAllBatchQueryCallbacks() ?? [], r3 = this.extension.query?.$__internalBatch;
        return r3 ? t4.concat(r3) : t4;
      });
    }
    getAllComputedFields(t3) {
      return this.computedFieldsCache.getOrCreate(t3, () => ma(this.previous?.getAllComputedFields(t3), this.extension, t3));
    }
    getAllClientExtensions() {
      return this.clientExtensions.get();
    }
    getAllModelExtensions(t3) {
      return this.modelExtensionsCache.getOrCreate(t3, () => {
        let r = Re(t3);
        return !this.extension.model || !(this.extension.model[r] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(t3) : { ...this.previous?.getAllModelExtensions(t3), ...this.extension.model.$allModels, ...this.extension.model[r] };
      });
    }
    getAllQueryCallbacks(t3, r) {
      return this.queryCallbacksCache.getOrCreate(`${t3}:${r}`, () => {
        let n3 = this.previous?.getAllQueryCallbacks(t3, r) ?? [], i3 = [], o2 = this.extension.query;
        return !o2 || !(o2[t3] || o2.$allModels || o2[r] || o2.$allOperations) ? n3 : (o2[t3] !== undefined && (o2[t3][r] !== undefined && i3.push(o2[t3][r]), o2[t3].$allOperations !== undefined && i3.push(o2[t3].$allOperations)), t3 !== "$none" && o2.$allModels !== undefined && (o2.$allModels[r] !== undefined && i3.push(o2.$allModels[r]), o2.$allModels.$allOperations !== undefined && i3.push(o2.$allModels.$allOperations)), o2[r] !== undefined && i3.push(o2[r]), o2.$allOperations !== undefined && i3.push(o2.$allOperations), n3.concat(i3));
      });
    }
    getAllBatchQueryCallbacks() {
      return this.batchCallbacks.get();
    }
  };
  var wn = class e {
    constructor(t3) {
      this.head = t3;
    }
    static empty() {
      return new e;
    }
    static single(t3) {
      return new e(new En(t3));
    }
    isEmpty() {
      return this.head === undefined;
    }
    append(t3) {
      return new e(new En(t3, this.head));
    }
    getAllComputedFields(t3) {
      return this.head?.getAllComputedFields(t3);
    }
    getAllClientExtensions() {
      return this.head?.getAllClientExtensions();
    }
    getAllModelExtensions(t3) {
      return this.head?.getAllModelExtensions(t3);
    }
    getAllQueryCallbacks(t3, r) {
      return this.head?.getAllQueryCallbacks(t3, r) ?? [];
    }
    getAllBatchQueryCallbacks() {
      return this.head?.getAllBatchQueryCallbacks() ?? [];
    }
  };
  var ha = F("prisma:client");
  var ya = { Vercel: "vercel", "Netlify CI": "netlify" };
  var Xp = "Cloudflare-Workers";
  var ed = "node";
  var td = { node: "Node.js", workerd: "Cloudflare Workers", deno: "Deno and Deno Deploy", netlify: "Netlify Edge Functions", "edge-light": "Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)" };
  var Ra = k(import.meta.require("fs"));
  var dr = k(import.meta.require("path"));
  var nd = F("prisma:client:engines:resolveEnginePath");
  var id = () => new RegExp("runtime[\\\\/]library\\.m?js$");
  var qi = k(fi());
  var Oa = k(us());
  var Rn = class extends Error {
    constructor(t3, r) {
      super(t3), this.clientVersion = r.clientVersion, this.cause = r.cause;
    }
    get [Symbol.toStringTag]() {
      return this.name;
    }
  };
  var se = class extends Rn {
    constructor(t3, r) {
      super(t3, r), this.isRetryable = r.isRetryable ?? true;
    }
  };
  var _t = class extends se {
    constructor(r) {
      super("This request must be retried", A(r, true));
      this.name = "ForcedRetryError";
      this.code = "P5001";
    }
  };
  w(_t, "ForcedRetryError");
  var st = class extends se {
    constructor(r, n3) {
      super(r, A(n3, false));
      this.name = "InvalidDatasourceError";
      this.code = "P6001";
    }
  };
  w(st, "InvalidDatasourceError");
  var at = class extends se {
    constructor(r, n3) {
      super(r, A(n3, false));
      this.name = "NotImplementedYetError";
      this.code = "P5004";
    }
  };
  w(at, "NotImplementedYetError");
  var q = class extends se {
    constructor(t3, r) {
      super(t3, r), this.response = r.response;
      let n3 = this.response.headers.get("prisma-request-id");
      if (n3) {
        let i3 = `(The request id was: ${n3})`;
        this.message = this.message + " " + i3;
      }
    }
  };
  var lt = class extends q {
    constructor(r) {
      super("Schema needs to be uploaded", A(r, true));
      this.name = "SchemaMissingError";
      this.code = "P5005";
    }
  };
  w(lt, "SchemaMissingError");
  var ji = "This request could not be understood by the server";
  var mr = class extends q {
    constructor(r, n3, i3) {
      super(n3 || ji, A(r, false));
      this.name = "BadRequestError";
      this.code = "P5000";
      i3 && (this.code = i3);
    }
  };
  w(mr, "BadRequestError");
  var fr = class extends q {
    constructor(r, n3) {
      super("Engine not started: healthcheck timeout", A(r, true));
      this.name = "HealthcheckTimeoutError";
      this.code = "P5013";
      this.logs = n3;
    }
  };
  w(fr, "HealthcheckTimeoutError");
  var gr = class extends q {
    constructor(r, n3, i3) {
      super(n3, A(r, true));
      this.name = "EngineStartupError";
      this.code = "P5014";
      this.logs = i3;
    }
  };
  w(gr, "EngineStartupError");
  var hr = class extends q {
    constructor(r) {
      super("Engine version is not supported", A(r, false));
      this.name = "EngineVersionNotSupportedError";
      this.code = "P5012";
    }
  };
  w(hr, "EngineVersionNotSupportedError");
  var Vi = "Request timed out";
  var yr = class extends q {
    constructor(r, n3 = Vi) {
      super(n3, A(r, false));
      this.name = "GatewayTimeoutError";
      this.code = "P5009";
    }
  };
  w(yr, "GatewayTimeoutError");
  var sd = "Interactive transaction error";
  var br = class extends q {
    constructor(r, n3 = sd) {
      super(n3, A(r, false));
      this.name = "InteractiveTransactionError";
      this.code = "P5015";
    }
  };
  w(br, "InteractiveTransactionError");
  var ad = "Request parameters are invalid";
  var Er = class extends q {
    constructor(r, n3 = ad) {
      super(n3, A(r, false));
      this.name = "InvalidRequestError";
      this.code = "P5011";
    }
  };
  w(Er, "InvalidRequestError");
  var Bi = "Requested resource does not exist";
  var wr = class extends q {
    constructor(r, n3 = Bi) {
      super(n3, A(r, false));
      this.name = "NotFoundError";
      this.code = "P5003";
    }
  };
  w(wr, "NotFoundError");
  var Ui = "Unknown server error";
  var Lt = class extends q {
    constructor(r, n3, i3) {
      super(n3 || Ui, A(r, true));
      this.name = "ServerError";
      this.code = "P5006";
      this.logs = i3;
    }
  };
  w(Lt, "ServerError");
  var Gi = "Unauthorized, check your connection string";
  var xr = class extends q {
    constructor(r, n3 = Gi) {
      super(n3, A(r, false));
      this.name = "UnauthorizedError";
      this.code = "P5007";
    }
  };
  w(xr, "UnauthorizedError");
  var Qi = "Usage exceeded, retry again later";
  var Pr = class extends q {
    constructor(r, n3 = Qi) {
      super(n3, A(r, true));
      this.name = "UsageExceededError";
      this.code = "P5008";
    }
  };
  w(Pr, "UsageExceededError");
  var Ne = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var Ma = { "@prisma/debug": "workspace:*", "@prisma/engines-version": "5.19.1-2.69d742ee20b815d88e17e54db4a2a7a3b30324e3", "@prisma/fetch-engine": "workspace:*", "@prisma/get-platform": "workspace:*" };
  var Tr = class extends se {
    constructor(r, n3) {
      super(`Cannot fetch data from service:
${r}`, A(n3, true));
      this.name = "RequestError";
      this.code = "P5010";
    }
  };
  w(Tr, "RequestError");
  var fd = "function" < "u" ? import.meta.require : () => {
  };
  var Wi = class {
    constructor(t3 = {}) {
      this.headers = new Map;
      for (let [r, n3] of Object.entries(t3))
        if (typeof n3 == "string")
          this.headers.set(r, n3);
        else if (Array.isArray(n3))
          for (let i3 of n3)
            this.headers.set(r, i3);
    }
    append(t3, r) {
      this.headers.set(t3, r);
    }
    delete(t3) {
      this.headers.delete(t3);
    }
    get(t3) {
      return this.headers.get(t3) ?? null;
    }
    has(t3) {
      return this.headers.has(t3);
    }
    set(t3, r) {
      this.headers.set(t3, r);
    }
    forEach(t3, r) {
      for (let [n3, i3] of this.headers)
        t3.call(r, i3, n3, this);
    }
  };
  var gd = /^[1-9][0-9]*\.[0-9]+\.[0-9]+$/;
  var $a = F("prisma:client:dataproxyEngine");
  var ja = 3;
  var Hi = F("prisma:client:dataproxyEngine");
  var Ki = class {
    constructor({ apiKey: t3, tracingHelper: r, logLevel: n3, logQueries: i3, engineHash: o2 }) {
      this.apiKey = t3, this.tracingHelper = r, this.logLevel = n3, this.logQueries = i3, this.engineHash = o2;
    }
    build({ traceparent: t3, interactiveTransaction: r } = {}) {
      let n3 = { Authorization: `Bearer ${this.apiKey}`, "Prisma-Engine-Hash": this.engineHash };
      this.tracingHelper.isEnabled() && (n3.traceparent = t3 ?? this.tracingHelper.getTraceParent()), r && (n3["X-transaction-id"] = r.id);
      let i3 = this.buildCaptureSettings();
      return i3.length > 0 && (n3["X-capture-telemetry"] = i3.join(", ")), n3;
    }
    buildCaptureSettings() {
      let t3 = [];
      return this.tracingHelper.isEnabled() && t3.push("tracing"), this.logLevel && t3.push(this.logLevel), this.logQueries && t3.push("query"), t3;
    }
  };
  var Rr = class {
    constructor(t3) {
      this.name = "DataProxyEngine";
      Fa(t3), this.config = t3, this.env = { ...t3.env, ...typeof process < "u" ? process.env : {} }, this.inlineSchema = La(t3.inlineSchema), this.inlineDatasources = t3.inlineDatasources, this.inlineSchemaHash = t3.inlineSchemaHash, this.clientVersion = t3.clientVersion, this.engineHash = t3.engineVersion, this.logEmitter = t3.logEmitter, this.tracingHelper = t3.tracingHelper;
    }
    apiKey() {
      return this.headerBuilder.apiKey;
    }
    version() {
      return this.engineHash;
    }
    async start() {
      this.startPromise !== undefined && await this.startPromise, this.startPromise = (async () => {
        let [t3, r] = this.extractHostAndApiKey();
        this.host = t3, this.headerBuilder = new Ki({ apiKey: r, tracingHelper: this.tracingHelper, logLevel: this.config.logLevel, logQueries: this.config.logQueries, engineHash: this.engineHash }), this.remoteClientVersion = await qa(t3, this.config), Hi("host", this.host);
      })(), await this.startPromise;
    }
    async stop() {
    }
    propagateResponseExtensions(t3) {
      t3?.logs?.length && t3.logs.forEach((r) => {
        switch (r.level) {
          case "debug":
          case "error":
          case "trace":
          case "warn":
          case "info":
            break;
          case "query": {
            let n3 = typeof r.attributes.query == "string" ? r.attributes.query : "";
            if (!this.tracingHelper.isEnabled()) {
              let [i3] = n3.split("/* traceparent");
              n3 = i3;
            }
            this.logEmitter.emit("query", { query: n3, timestamp: Na(r.timestamp), duration: Number(r.attributes.duration_ms), params: r.attributes.params, target: r.attributes.target });
          }
        }
      }), t3?.traces?.length && this.tracingHelper.createEngineSpan({ span: true, spans: t3.traces });
    }
    onBeforeExit() {
      throw new Error('"beforeExit" hook is not applicable to the remote query engine');
    }
    async url(t3) {
      return await this.start(), `https://${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${t3}`;
    }
    async uploadSchema() {
      let t3 = { name: "schemaUpload", internal: true };
      return this.tracingHelper.runInChildSpan(t3, async () => {
        let r = await ut(await this.url("schema"), { method: "PUT", headers: this.headerBuilder.build(), body: this.inlineSchema, clientVersion: this.clientVersion });
        r.ok || Hi("schema response status", r.status);
        let n3 = await vr(r, this.clientVersion);
        if (n3)
          throw this.logEmitter.emit("warn", { message: `Error while uploading schema: ${n3.message}`, timestamp: new Date, target: "" }), n3;
        this.logEmitter.emit("info", { message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`, timestamp: new Date, target: "" });
      });
    }
    request(t3, { traceparent: r, interactiveTransaction: n3, customDataProxyFetch: i3 }) {
      return this.requestInternal({ body: t3, traceparent: r, interactiveTransaction: n3, customDataProxyFetch: i3 });
    }
    async requestBatch(t3, { traceparent: r, transaction: n3, customDataProxyFetch: i3 }) {
      let o2 = n3?.kind === "itx" ? n3.options : undefined, s3 = Et(t3, n3), { batchResult: a, elapsed: l } = await this.requestInternal({ body: s3, customDataProxyFetch: i3, interactiveTransaction: o2, traceparent: r });
      return a.map((u3) => ("errors" in u3) && u3.errors.length > 0 ? ot(u3.errors[0], this.clientVersion, this.config.activeProvider) : { data: u3, elapsed: l });
    }
    requestInternal({ body: t3, traceparent: r, customDataProxyFetch: n3, interactiveTransaction: i3 }) {
      return this.withRetry({ actionGerund: "querying", callback: async ({ logHttpCall: o2 }) => {
        let s3 = i3 ? `${i3.payload.endpoint}/graphql` : await this.url("graphql");
        o2(s3);
        let a = await ut(s3, { method: "POST", headers: this.headerBuilder.build({ traceparent: r, interactiveTransaction: i3 }), body: JSON.stringify(t3), clientVersion: this.clientVersion }, n3);
        a.ok || Hi("graphql response status", a.status), await this.handleError(await vr(a, this.clientVersion));
        let l = await a.json(), u3 = l.extensions;
        if (u3 && this.propagateResponseExtensions(u3), l.errors)
          throw l.errors.length === 1 ? ot(l.errors[0], this.config.clientVersion, this.config.activeProvider) : new B(l.errors, { clientVersion: this.config.clientVersion });
        return l;
      } });
    }
    async transaction(t3, r, n3) {
      let i3 = { start: "starting", commit: "committing", rollback: "rolling back" };
      return this.withRetry({ actionGerund: `${i3[t3]} transaction`, callback: async ({ logHttpCall: o2 }) => {
        if (t3 === "start") {
          let s3 = JSON.stringify({ max_wait: n3.maxWait, timeout: n3.timeout, isolation_level: n3.isolationLevel }), a = await this.url("transaction/start");
          o2(a);
          let l = await ut(a, { method: "POST", headers: this.headerBuilder.build({ traceparent: r.traceparent }), body: s3, clientVersion: this.clientVersion });
          await this.handleError(await vr(l, this.clientVersion));
          let u3 = await l.json(), c3 = u3.extensions;
          c3 && this.propagateResponseExtensions(c3);
          let p3 = u3.id, d3 = u3["data-proxy"].endpoint;
          return { id: p3, payload: { endpoint: d3 } };
        } else {
          let s3 = `${n3.payload.endpoint}/${t3}`;
          o2(s3);
          let a = await ut(s3, { method: "POST", headers: this.headerBuilder.build({ traceparent: r.traceparent }), clientVersion: this.clientVersion });
          await this.handleError(await vr(a, this.clientVersion));
          let u3 = (await a.json()).extensions;
          u3 && this.propagateResponseExtensions(u3);
          return;
        }
      } });
    }
    extractHostAndApiKey() {
      let t3 = { clientVersion: this.clientVersion }, r = Object.keys(this.inlineDatasources)[0], n3 = Dt({ inlineDatasources: this.inlineDatasources, overrideDatasources: this.config.overrideDatasources, clientVersion: this.clientVersion, env: this.env }), i3;
      try {
        i3 = new URL(n3);
      } catch {
        throw new st(`Error validating datasource \`${r}\`: the URL must start with the protocol \`prisma://\``, t3);
      }
      let { protocol: o2, host: s3, searchParams: a } = i3;
      if (o2 !== "prisma:")
        throw new st(`Error validating datasource \`${r}\`: the URL must start with the protocol \`prisma://\``, t3);
      let l = a.get("api_key");
      if (l === null || l.length < 1)
        throw new st(`Error validating datasource \`${r}\`: the URL must contain a valid API key`, t3);
      return [s3, l];
    }
    metrics() {
      throw new at("Metrics are not yet supported for Accelerate", { clientVersion: this.clientVersion });
    }
    async withRetry(t3) {
      for (let r = 0;; r++) {
        let n3 = (i3) => {
          this.logEmitter.emit("info", { message: `Calling ${i3} (n=${r})`, timestamp: new Date, target: "" });
        };
        try {
          return await t3.callback({ logHttpCall: n3 });
        } catch (i3) {
          if (!(i3 instanceof se) || !i3.isRetryable)
            throw i3;
          if (r >= ja)
            throw i3 instanceof _t ? i3.cause : i3;
          this.logEmitter.emit("warn", { message: `Attempt ${r + 1}/${ja} failed for ${t3.actionGerund}: ${i3.message ?? "(unknown)"}`, timestamp: new Date, target: "" });
          let o2 = await _a2(r);
          this.logEmitter.emit("warn", { message: `Retrying after ${o2}ms`, timestamp: new Date, target: "" });
        }
      }
    }
    async handleError(t3) {
      if (t3 instanceof lt)
        throw await this.uploadSchema(), new _t({ clientVersion: this.clientVersion, cause: t3 });
      if (t3)
        throw t3;
    }
    applyPendingMigrations() {
      throw new Error("Method not implemented.");
    }
  };
  var Yi = k(import.meta.require("os"));
  var Ba = k(import.meta.require("path"));
  var zi = Symbol("PrismaLibraryEngineCache");
  var Ua = { async loadLibrary(e) {
    let t3 = await Wn(), r = await Ca("library", e);
    try {
      return e.tracingHelper.runInChildSpan({ name: "loadLibrary", internal: true }, () => Ed(r));
    } catch (n3) {
      let i3 = oi({ e: n3, platformInfo: t3, id: r });
      throw new R(i3, e.clientVersion);
    }
  } };
  var Zi;
  var Ga = { async loadLibrary(e) {
    let { clientVersion: t3, adapter: r, engineWasm: n3 } = e;
    if (r === undefined)
      throw new R(`The \`adapter\` option for \`PrismaClient\` is required in this context (${xn().prettyName})`, t3);
    if (n3 === undefined)
      throw new R("WASM engine was unexpectedly `undefined`", t3);
    Zi === undefined && (Zi = (async () => {
      let o2 = n3.getRuntime(), s3 = await n3.getQueryEngineWasmModule();
      if (s3 == null)
        throw new R("The loaded wasm module was unexpectedly `undefined` or `null` once loaded", t3);
      let a = { "./query_engine_bg.js": o2 }, l = new WebAssembly.Instance(s3, a);
      return o2.__wbg_set_wasm(l.exports), o2.QueryEngine;
    })());
    let i3 = await Zi;
    return { debugPanic() {
      return Promise.reject("{}");
    }, dmmf() {
      return Promise.resolve("{}");
    }, version() {
      return { commit: "unknown", version: "unknown" };
    }, QueryEngine: i3 };
  } };
  var wd = "P2036";
  var Ce = F("prisma:client:libraryEngine");
  var Qa = [...Bn, "native"];
  var Cr = class {
    constructor(t3, r) {
      this.name = "LibraryEngine";
      this.libraryLoader = r ?? Ua, t3.engineWasm !== undefined && (this.libraryLoader = r ?? Ga), this.config = t3, this.libraryStarted = false, this.logQueries = t3.logQueries ?? false, this.logLevel = t3.logLevel ?? "error", this.logEmitter = t3.logEmitter, this.datamodel = t3.inlineSchema, t3.enableDebugLogs && (this.logLevel = "debug");
      let n3 = Object.keys(t3.overrideDatasources)[0], i3 = t3.overrideDatasources[n3]?.url;
      n3 !== undefined && i3 !== undefined && (this.datasourceOverrides = { [n3]: i3 }), this.libraryInstantiationPromise = this.instantiateLibrary();
    }
    async applyPendingMigrations() {
      throw new Error("Cannot call this method from this type of engine instance");
    }
    async transaction(t3, r, n3) {
      await this.start();
      let i3 = JSON.stringify(r), o2;
      if (t3 === "start") {
        let a = JSON.stringify({ max_wait: n3.maxWait, timeout: n3.timeout, isolation_level: n3.isolationLevel });
        o2 = await this.engine?.startTransaction(a, i3);
      } else
        t3 === "commit" ? o2 = await this.engine?.commitTransaction(n3.id, i3) : t3 === "rollback" && (o2 = await this.engine?.rollbackTransaction(n3.id, i3));
      let s3 = this.parseEngineResponse(o2);
      if (vd(s3)) {
        let a = this.getExternalAdapterError(s3);
        throw a ? a.error : new V2(s3.message, { code: s3.error_code, clientVersion: this.config.clientVersion, meta: s3.meta });
      }
      return s3;
    }
    async instantiateLibrary() {
      if (Ce("internalSetup"), this.libraryInstantiationPromise)
        return this.libraryInstantiationPromise;
      Vn(), this.binaryTarget = await this.getCurrentBinaryTarget(), await this.loadEngine(), this.version();
    }
    async getCurrentBinaryTarget() {
      {
        if (this.binaryTarget)
          return this.binaryTarget;
        let t3 = await tt();
        if (!Qa.includes(t3))
          throw new R(`Unknown ${ce("PRISMA_QUERY_ENGINE_LIBRARY")} ${ce(H(t3))}. Possible binaryTargets: ${Me(Qa.join(", "))} or a path to the query engine library.
You may have to run ${Me("prisma generate")} for your changes to take effect.`, this.config.clientVersion);
        return t3;
      }
    }
    parseEngineResponse(t3) {
      if (!t3)
        throw new B("Response from the Engine was empty", { clientVersion: this.config.clientVersion });
      try {
        return JSON.parse(t3);
      } catch {
        throw new B("Unable to JSON.parse response from engine", { clientVersion: this.config.clientVersion });
      }
    }
    async loadEngine() {
      if (!this.engine) {
        this.QueryEngineConstructor || (this.library = await this.libraryLoader.loadLibrary(this.config), this.QueryEngineConstructor = this.library.QueryEngine);
        try {
          let t3 = new WeakRef(this), { adapter: r } = this.config;
          r && Ce("Using driver adapter: %O", r), this.engine = new this.QueryEngineConstructor({ datamodel: this.datamodel, env: process.env, logQueries: this.config.logQueries ?? false, ignoreEnvVarErrors: true, datasourceOverrides: this.datasourceOverrides ?? {}, logLevel: this.logLevel, configDir: this.config.cwd, engineProtocol: "json" }, (n3) => {
            t3.deref()?.logger(n3);
          }, r);
        } catch (t3) {
          let r = t3, n3 = this.parseInitError(r.message);
          throw typeof n3 == "string" ? r : new R(n3.message, this.config.clientVersion, n3.error_code);
        }
      }
    }
    logger(t3) {
      let r = this.parseEngineResponse(t3);
      if (r) {
        if ("span" in r) {
          this.config.tracingHelper.createEngineSpan(r);
          return;
        }
        r.level = r?.level.toLowerCase() ?? "unknown", xd(r) ? this.logEmitter.emit("query", { timestamp: new Date, query: r.query, params: r.params, duration: Number(r.duration_ms), target: r.module_path }) : Pd(r) ? this.loggerRustPanic = new le(Xi(this, `${r.message}: ${r.reason} in ${r.file}:${r.line}:${r.column}`), this.config.clientVersion) : this.logEmitter.emit(r.level, { timestamp: new Date, message: r.message, target: r.module_path });
      }
    }
    parseInitError(t3) {
      try {
        return JSON.parse(t3);
      } catch {
      }
      return t3;
    }
    parseRequestError(t3) {
      try {
        return JSON.parse(t3);
      } catch {
      }
      return t3;
    }
    onBeforeExit() {
      throw new Error('"beforeExit" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.');
    }
    async start() {
      if (await this.libraryInstantiationPromise, await this.libraryStoppingPromise, this.libraryStartingPromise)
        return Ce(`library already starting, this.libraryStarted: ${this.libraryStarted}`), this.libraryStartingPromise;
      if (this.libraryStarted)
        return;
      let t3 = async () => {
        Ce("library starting");
        try {
          let r = { traceparent: this.config.tracingHelper.getTraceParent() };
          await this.engine?.connect(JSON.stringify(r)), this.libraryStarted = true, Ce("library started");
        } catch (r) {
          let n3 = this.parseInitError(r.message);
          throw typeof n3 == "string" ? r : new R(n3.message, this.config.clientVersion, n3.error_code);
        } finally {
          this.libraryStartingPromise = undefined;
        }
      };
      return this.libraryStartingPromise = this.config.tracingHelper.runInChildSpan("connect", t3), this.libraryStartingPromise;
    }
    async stop() {
      if (await this.libraryStartingPromise, await this.executingQueryPromise, this.libraryStoppingPromise)
        return Ce("library is already stopping"), this.libraryStoppingPromise;
      if (!this.libraryStarted)
        return;
      let t3 = async () => {
        await new Promise((n3) => setTimeout(n3, 5)), Ce("library stopping");
        let r = { traceparent: this.config.tracingHelper.getTraceParent() };
        await this.engine?.disconnect(JSON.stringify(r)), this.libraryStarted = false, this.libraryStoppingPromise = undefined, Ce("library stopped");
      };
      return this.libraryStoppingPromise = this.config.tracingHelper.runInChildSpan("disconnect", t3), this.libraryStoppingPromise;
    }
    version() {
      return this.versionInfo = this.library?.version(), this.versionInfo?.version ?? "unknown";
    }
    debugPanic(t3) {
      return this.library?.debugPanic(t3);
    }
    async request(t3, { traceparent: r, interactiveTransaction: n3 }) {
      Ce(`sending request, this.libraryStarted: ${this.libraryStarted}`);
      let i3 = JSON.stringify({ traceparent: r }), o2 = JSON.stringify(t3);
      try {
        await this.start(), this.executingQueryPromise = this.engine?.query(o2, i3, n3?.id), this.lastQuery = o2;
        let s3 = this.parseEngineResponse(await this.executingQueryPromise);
        if (s3.errors)
          throw s3.errors.length === 1 ? this.buildQueryError(s3.errors[0]) : new B(JSON.stringify(s3.errors), { clientVersion: this.config.clientVersion });
        if (this.loggerRustPanic)
          throw this.loggerRustPanic;
        return { data: s3, elapsed: 0 };
      } catch (s3) {
        if (s3 instanceof R)
          throw s3;
        if (s3.code === "GenericFailure" && s3.message?.startsWith("PANIC:"))
          throw new le(Xi(this, s3.message), this.config.clientVersion);
        let a = this.parseRequestError(s3.message);
        throw typeof a == "string" ? s3 : new B(`${a.message}
${a.backtrace}`, { clientVersion: this.config.clientVersion });
      }
    }
    async requestBatch(t3, { transaction: r, traceparent: n3 }) {
      Ce("requestBatch");
      let i3 = Et(t3, r);
      await this.start(), this.lastQuery = JSON.stringify(i3), this.executingQueryPromise = this.engine.query(this.lastQuery, JSON.stringify({ traceparent: n3 }), Va(r));
      let o2 = await this.executingQueryPromise, s3 = this.parseEngineResponse(o2);
      if (s3.errors)
        throw s3.errors.length === 1 ? this.buildQueryError(s3.errors[0]) : new B(JSON.stringify(s3.errors), { clientVersion: this.config.clientVersion });
      let { batchResult: a, errors: l } = s3;
      if (Array.isArray(a))
        return a.map((u3) => u3.errors && u3.errors.length > 0 ? this.loggerRustPanic ?? this.buildQueryError(u3.errors[0]) : { data: u3, elapsed: 0 });
      throw l && l.length === 1 ? new Error(l[0].error) : new Error(JSON.stringify(s3));
    }
    buildQueryError(t3) {
      if (t3.user_facing_error.is_panic)
        return new le(Xi(this, t3.user_facing_error.message), this.config.clientVersion);
      let r = this.getExternalAdapterError(t3.user_facing_error);
      return r ? r.error : ot(t3, this.config.clientVersion, this.config.activeProvider);
    }
    getExternalAdapterError(t3) {
      if (t3.error_code === wd && this.config.adapter) {
        let r = t3.meta?.id;
        Hr(typeof r == "number", "Malformed external JS error received from the engine");
        let n3 = this.config.adapter.errorRegistry.consumeError(r);
        return Hr(n3, "External error with reported id was not registered"), n3;
      }
    }
    async metrics(t3) {
      await this.start();
      let r = await this.engine.metrics(JSON.stringify(t3));
      return t3.format === "prometheus" ? r : this.parseEngineResponse(r);
    }
  };
  var Za = k(eo());
  var ue = class {
    constructor(t3, r) {
      this.name = t3;
      this.value = r;
      this.isRequired = false;
    }
    makeRequired() {
      return this.isRequired = true, this;
    }
    write(t3) {
      let { colors: { green: r } } = t3.context;
      t3.addMarginSymbol(r(this.isRequired ? "+" : "?")), t3.write(r(this.name)), this.isRequired || t3.write(r("?")), t3.write(r(": ")), typeof this.value == "string" ? t3.write(r(this.value)) : t3.write(this.value);
    }
  };
  var Sr = class {
    constructor() {
      this.fields = [];
    }
    addField(t3, r) {
      return this.fields.push({ write(n3) {
        let { green: i3, dim: o2 } = n3.context.colors;
        n3.write(i3(o2(`${t3}: ${r}`))).addMarginSymbol(i3(o2("+")));
      } }), this;
    }
    write(t3) {
      let { colors: { green: r } } = t3.context;
      t3.writeLine(r("{")).withIndent(() => {
        t3.writeJoined(Ct, this.fields).newLine();
      }).write(r("}")).addMarginSymbol(r("+"));
    }
  };
  var Qd = 3;
  var Wd = { findUnique: "findUnique", findUniqueOrThrow: "findUniqueOrThrow", findFirst: "findFirst", findFirstOrThrow: "findFirstOrThrow", findMany: "findMany", count: "aggregate", create: "createOne", createMany: "createMany", createManyAndReturn: "createManyAndReturn", update: "updateOne", updateMany: "updateMany", upsert: "upsertOne", delete: "deleteOne", deleteMany: "deleteMany", executeRaw: "executeRaw", queryRaw: "queryRaw", aggregate: "aggregate", groupBy: "groupBy", runCommandRaw: "runCommandRaw", findRaw: "findRaw", aggregateRaw: "aggregateRaw" };
  var to = class e {
    constructor(t3) {
      this.params = t3;
      this.params.modelName && (this.modelOrType = this.params.runtimeDataModel.models[this.params.modelName] ?? this.params.runtimeDataModel.types[this.params.modelName]);
    }
    throwValidationError(t3) {
      In({ errors: [t3], originalMethod: this.params.originalMethod, args: this.params.rootArgs ?? {}, callsite: this.params.callsite, errorFormat: this.params.errorFormat, clientVersion: this.params.clientVersion, globalOmit: this.params.globalOmit });
    }
    getSelectionPath() {
      return this.params.selectionPath;
    }
    getArgumentPath() {
      return this.params.argumentPath;
    }
    getArgumentName() {
      return this.params.argumentPath[this.params.argumentPath.length - 1];
    }
    getOutputTypeDescription() {
      if (!(!this.params.modelName || !this.modelOrType))
        return { name: this.params.modelName, fields: this.modelOrType.fields.map((t3) => ({ name: t3.name, typeName: "boolean", isRelation: t3.kind === "object" })) };
    }
    isRawAction() {
      return ["executeRaw", "queryRaw", "runCommandRaw", "findRaw", "aggregateRaw"].includes(this.params.action);
    }
    isPreviewFeatureOn(t3) {
      return this.params.previewFeatures.includes(t3);
    }
    getComputedFields() {
      if (this.params.modelName)
        return this.params.extensions.getAllComputedFields(this.params.modelName);
    }
    findField(t3) {
      return this.modelOrType?.fields.find((r) => r.name === t3);
    }
    nestSelection(t3) {
      let r = this.findField(t3), n3 = r?.kind === "object" ? r.type : undefined;
      return new e({ ...this.params, modelName: n3, selectionPath: this.params.selectionPath.concat(t3) });
    }
    getGlobalOmit() {
      return this.params.modelName && this.shouldApplyGlobalOmit() ? this.params.globalOmit?.[Nt(this.params.modelName)] ?? {} : {};
    }
    shouldApplyGlobalOmit() {
      switch (this.params.action) {
        case "findFirst":
        case "findFirstOrThrow":
        case "findUniqueOrThrow":
        case "findMany":
        case "upsert":
        case "findUnique":
        case "createManyAndReturn":
        case "create":
        case "update":
        case "delete":
          return true;
        case "executeRaw":
        case "aggregateRaw":
        case "runCommandRaw":
        case "findRaw":
        case "createMany":
        case "deleteMany":
        case "groupBy":
        case "updateMany":
        case "count":
        case "aggregate":
        case "queryRaw":
          return false;
        default:
          De(this.params.action, "Unknown action");
      }
    }
    nestArgument(t3) {
      return new e({ ...this.params, argumentPath: this.params.argumentPath.concat(t3) });
    }
  };
  var sl = (e) => ({ command: e });
  var al = (e) => e.strings.reduce((t3, r, n3) => `${t3}@P${n3}${r}`);
  var nm = ["$connect", "$disconnect", "$on", "$transaction", "$use", "$extends"];
  var dl = nm;
  var im = /^(\s*alter\s)/i;
  var ml = F("prisma:client");
  var no = ({ clientMethod: e, activeProvider: t3 }) => (r) => {
    let n3 = "", i3;
    if (r instanceof ir)
      n3 = r.sql, i3 = { values: Mt(r.values), __prismaRawParameters__: true };
    else if (Array.isArray(r)) {
      let [o2, ...s3] = r;
      n3 = o2, i3 = { values: Mt(s3 || []), __prismaRawParameters__: true };
    } else
      switch (t3) {
        case "sqlite":
        case "mysql": {
          n3 = r.sql, i3 = { values: Mt(r.values), __prismaRawParameters__: true };
          break;
        }
        case "cockroachdb":
        case "postgresql":
        case "postgres": {
          n3 = r.text, i3 = { values: Mt(r.values), __prismaRawParameters__: true };
          break;
        }
        case "sqlserver": {
          n3 = al(r), i3 = { values: Mt(r.values), __prismaRawParameters__: true };
          break;
        }
        default:
          throw new Error(`The ${t3} provider does not support ${e}`);
      }
    return i3?.values ? ml(`prisma.${e}(${n3}, ${i3.values})`) : ml(`prisma.${e}(${n3})`), { query: n3, parameters: i3 };
  };
  var fl = { requestArgsToMiddlewareArgs(e) {
    return [e.strings, ...e.values];
  }, middlewareArgsToRequestArgs(e) {
    let [t3, ...r] = e;
    return new ie(t3, r);
  } };
  var gl = { requestArgsToMiddlewareArgs(e) {
    return [e];
  }, middlewareArgsToRequestArgs(e) {
    return e[0];
  } };
  var yl = { isEnabled() {
    return false;
  }, getTraceParent() {
    return "00-10-10-00";
  }, async createEngineSpan() {
  }, getActiveContext() {
  }, runInChildSpan(e, t3) {
    return t3();
  } };
  var oo = class {
    isEnabled() {
      return this.getGlobalTracingHelper().isEnabled();
    }
    getTraceParent(t3) {
      return this.getGlobalTracingHelper().getTraceParent(t3);
    }
    createEngineSpan(t3) {
      return this.getGlobalTracingHelper().createEngineSpan(t3);
    }
    getActiveContext() {
      return this.getGlobalTracingHelper().getActiveContext();
    }
    runInChildSpan(t3, r) {
      return this.getGlobalTracingHelper().runInChildSpan(t3, r);
    }
    getGlobalTracingHelper() {
      return globalThis.PRISMA_INSTRUMENTATION?.helper ?? yl;
    }
  };
  var On = class {
    constructor() {
      this._middlewares = [];
    }
    use(t3) {
      this._middlewares.push(t3);
    }
    get(t3) {
      return this._middlewares[t3];
    }
    has(t3) {
      return !!this._middlewares[t3];
    }
    length() {
      return this._middlewares.length;
    }
  };
  var vl = k(fi());
  var am = { aggregate: false, aggregateRaw: false, createMany: true, createManyAndReturn: true, createOne: true, deleteMany: true, deleteOne: true, executeRaw: true, findFirst: false, findFirstOrThrow: false, findMany: false, findRaw: false, findUnique: false, findUniqueOrThrow: false, groupBy: false, queryRaw: false, runCommandRaw: true, updateMany: true, updateOne: true, upsertOne: true };
  var _n = class {
    constructor(t3) {
      this.options = t3;
      this.tickActive = false;
      this.batches = {};
    }
    request(t3) {
      let r = this.options.batchBy(t3);
      return r ? (this.batches[r] || (this.batches[r] = [], this.tickActive || (this.tickActive = true, process.nextTick(() => {
        this.dispatchBatches(), this.tickActive = false;
      }))), new Promise((n3, i3) => {
        this.batches[r].push({ request: t3, resolve: n3, reject: i3 });
      })) : this.options.singleLoader(t3);
    }
    dispatchBatches() {
      for (let t3 in this.batches) {
        let r = this.batches[t3];
        delete this.batches[t3], r.length === 1 ? this.options.singleLoader(r[0].request).then((n3) => {
          n3 instanceof Error ? r[0].reject(n3) : r[0].resolve(n3);
        }).catch((n3) => {
          r[0].reject(n3);
        }) : (r.sort((n3, i3) => this.options.batchOrder(n3.request, i3.request)), this.options.batchLoader(r.map((n3) => n3.request)).then((n3) => {
          if (n3 instanceof Error)
            for (let i3 = 0;i3 < r.length; i3++)
              r[i3].reject(n3);
          else
            for (let i3 = 0;i3 < r.length; i3++) {
              let o2 = n3[i3];
              o2 instanceof Error ? r[i3].reject(o2) : r[i3].resolve(o2);
            }
        }).catch((n3) => {
          for (let i3 = 0;i3 < r.length; i3++)
            r[i3].reject(n3);
        }));
      }
    }
    get [Symbol.toStringTag]() {
      return "DataLoader";
    }
  };
  var um = F("prisma:client:request_handler");
  var Ln = class {
    constructor(t3, r) {
      this.logEmitter = r, this.client = t3, this.dataloader = new _n({ batchLoader: ua(async ({ requests: n3, customDataProxyFetch: i3 }) => {
        let { transaction: o2, otelParentCtx: s3 } = n3[0], a = n3.map((p3) => p3.protocolQuery), l = this.client._tracingHelper.getTraceParent(s3), u3 = n3.some((p3) => ao(p3.protocolQuery.action));
        return (await this.client._engine.requestBatch(a, { traceparent: l, transaction: cm(o2), containsWrite: u3, customDataProxyFetch: i3 })).map((p3, d3) => {
          if (p3 instanceof Error)
            return p3;
          try {
            return this.mapQueryEngineResult(n3[d3], p3);
          } catch (f3) {
            return f3;
          }
        });
      }), singleLoader: async (n3) => {
        let i3 = n3.transaction?.kind === "itx" ? Tl(n3.transaction) : undefined, o2 = await this.client._engine.request(n3.protocolQuery, { traceparent: this.client._tracingHelper.getTraceParent(), interactiveTransaction: i3, isWrite: ao(n3.protocolQuery.action), customDataProxyFetch: n3.customDataProxyFetch });
        return this.mapQueryEngineResult(n3, o2);
      }, batchBy: (n3) => n3.transaction?.id ? `transaction-${n3.transaction.id}` : xl(n3.protocolQuery), batchOrder(n3, i3) {
        return n3.transaction?.kind === "batch" && i3.transaction?.kind === "batch" ? n3.transaction.index - i3.transaction.index : 0;
      } });
    }
    async request(t3) {
      try {
        return await this.dataloader.request(t3);
      } catch (r) {
        let { clientMethod: n3, callsite: i3, transaction: o2, args: s3, modelName: a } = t3;
        this.handleAndLogRequestError({ error: r, clientMethod: n3, callsite: i3, transaction: o2, args: s3, modelName: a, globalOmit: t3.globalOmit });
      }
    }
    mapQueryEngineResult({ dataPath: t3, unpacker: r }, n3) {
      let i3 = n3?.data, o2 = n3?.elapsed, s3 = this.unpack(i3, t3, r);
      return process.env.PRISMA_CLIENT_GET_TIME ? { data: s3, elapsed: o2 } : s3;
    }
    handleAndLogRequestError(t3) {
      try {
        this.handleRequestError(t3);
      } catch (r) {
        throw this.logEmitter && this.logEmitter.emit("error", { message: r.message, target: t3.clientMethod, timestamp: new Date }), r;
      }
    }
    handleRequestError({ error: t3, clientMethod: r, callsite: n3, transaction: i3, args: o2, modelName: s3, globalOmit: a }) {
      if (um(t3), pm(t3, i3) || t3 instanceof _e)
        throw t3;
      if (t3 instanceof V2 && dm(t3)) {
        let u3 = Rl(t3.meta);
        In({ args: o2, errors: [u3], callsite: n3, errorFormat: this.client._errorFormat, originalMethod: r, clientVersion: this.client._clientVersion, globalOmit: a });
      }
      let l = t3.message;
      if (n3 && (l = kt({ callsite: n3, originalMethod: r, isPanic: t3.isPanic, showColors: this.client._errorFormat === "pretty", message: l })), l = this.sanitizeMessage(l), t3.code) {
        let u3 = s3 ? { modelName: s3, ...t3.meta } : t3.meta;
        throw new V2(l, { code: t3.code, clientVersion: this.client._clientVersion, meta: u3, batchRequestIdx: t3.batchRequestIdx });
      } else {
        if (t3.isPanic)
          throw new le(l, this.client._clientVersion);
        if (t3 instanceof B)
          throw new B(l, { clientVersion: this.client._clientVersion, batchRequestIdx: t3.batchRequestIdx });
        if (t3 instanceof R)
          throw new R(l, this.client._clientVersion);
        if (t3 instanceof le)
          throw new le(l, this.client._clientVersion);
      }
      throw t3.clientVersion = this.client._clientVersion, t3;
    }
    sanitizeMessage(t3) {
      return this.client._errorFormat && this.client._errorFormat !== "pretty" ? (0, vl.default)(t3) : t3;
    }
    unpack(t3, r, n3) {
      if (!t3 || (t3.data && (t3 = t3.data), !t3))
        return t3;
      let i3 = Object.keys(t3)[0], o2 = Object.values(t3)[0], s3 = r.filter((u3) => u3 !== "select" && u3 !== "include"), a = Fi(o2, s3), l = i3 === "queryRaw" ? Pl(a) : Dn(a);
      return n3 ? n3(l) : l;
    }
    get [Symbol.toStringTag]() {
      return "RequestHandler";
    }
  };
  var Cl = "5.19.1";
  var Sl = Cl;
  var Dl = k(eo());
  var L = class extends Error {
    constructor(t3) {
      super(t3 + `
Read more at https://pris.ly/d/client-constructor`), this.name = "PrismaClientConstructorValidationError";
    }
    get [Symbol.toStringTag]() {
      return "PrismaClientConstructorValidationError";
    }
  };
  w(L, "PrismaClientConstructorValidationError");
  var Al = ["datasources", "datasourceUrl", "errorFormat", "adapter", "log", "transactionOptions", "omit", "__internal"];
  var Il = ["pretty", "colorless", "minimal"];
  var Ol = ["info", "query", "warn", "error"];
  var fm = { datasources: (e, { datasourceNames: t3 }) => {
    if (e) {
      if (typeof e != "object" || Array.isArray(e))
        throw new L(`Invalid value ${JSON.stringify(e)} for "datasources" provided to PrismaClient constructor`);
      for (let [r, n3] of Object.entries(e)) {
        if (!t3.includes(r)) {
          let i3 = $t(r, t3) || ` Available datasources: ${t3.join(", ")}`;
          throw new L(`Unknown datasource ${r} provided to PrismaClient constructor.${i3}`);
        }
        if (typeof n3 != "object" || Array.isArray(n3))
          throw new L(`Invalid value ${JSON.stringify(e)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
        if (n3 && typeof n3 == "object")
          for (let [i3, o2] of Object.entries(n3)) {
            if (i3 !== "url")
              throw new L(`Invalid value ${JSON.stringify(e)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
            if (typeof o2 != "string")
              throw new L(`Invalid value ${JSON.stringify(o2)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
          }
      }
    }
  }, adapter: (e, t3) => {
    if (e === null)
      return;
    if (e === undefined)
      throw new L('"adapter" property must not be undefined, use null to conditionally disable driver adapters.');
    if (!Cn(t3).includes("driverAdapters"))
      throw new L('"adapter" property can only be provided to PrismaClient constructor when "driverAdapters" preview feature is enabled.');
    if (Ht() === "binary")
      throw new L('Cannot use a driver adapter with the "binary" Query Engine. Please use the "library" Query Engine.');
  }, datasourceUrl: (e) => {
    if (typeof e < "u" && typeof e != "string")
      throw new L(`Invalid value ${JSON.stringify(e)} for "datasourceUrl" provided to PrismaClient constructor.
Expected string or undefined.`);
  }, errorFormat: (e) => {
    if (e) {
      if (typeof e != "string")
        throw new L(`Invalid value ${JSON.stringify(e)} for "errorFormat" provided to PrismaClient constructor.`);
      if (!Il.includes(e)) {
        let t3 = $t(e, Il);
        throw new L(`Invalid errorFormat ${e} provided to PrismaClient constructor.${t3}`);
      }
    }
  }, log: (e) => {
    if (!e)
      return;
    if (!Array.isArray(e))
      throw new L(`Invalid value ${JSON.stringify(e)} for "log" provided to PrismaClient constructor.`);
    function t3(r) {
      if (typeof r == "string" && !Ol.includes(r)) {
        let n3 = $t(r, Ol);
        throw new L(`Invalid log level "${r}" provided to PrismaClient constructor.${n3}`);
      }
    }
    for (let r of e) {
      t3(r);
      let n3 = { level: t3, emit: (i3) => {
        let o2 = ["stdout", "event"];
        if (!o2.includes(i3)) {
          let s3 = $t(i3, o2);
          throw new L(`Invalid value ${JSON.stringify(i3)} for "emit" in logLevel provided to PrismaClient constructor.${s3}`);
        }
      } };
      if (r && typeof r == "object")
        for (let [i3, o2] of Object.entries(r))
          if (n3[i3])
            n3[i3](o2);
          else
            throw new L(`Invalid property ${i3} for "log" provided to PrismaClient constructor`);
    }
  }, transactionOptions: (e) => {
    if (!e)
      return;
    let t3 = e.maxWait;
    if (t3 != null && t3 <= 0)
      throw new L(`Invalid value ${t3} for maxWait in "transactionOptions" provided to PrismaClient constructor. maxWait needs to be greater than 0`);
    let r = e.timeout;
    if (r != null && r <= 0)
      throw new L(`Invalid value ${r} for timeout in "transactionOptions" provided to PrismaClient constructor. timeout needs to be greater than 0`);
  }, omit: (e, t3) => {
    if (typeof e != "object")
      throw new L('"omit" option is expected to be an object.');
    if (e === null)
      throw new L('"omit" option can not be `null`');
    let r = [];
    for (let [n3, i3] of Object.entries(e)) {
      let o2 = hm(n3, t3.runtimeDataModel);
      if (!o2) {
        r.push({ kind: "UnknownModel", modelKey: n3 });
        continue;
      }
      for (let [s3, a] of Object.entries(i3)) {
        let l = o2.fields.find((u3) => u3.name === s3);
        if (!l) {
          r.push({ kind: "UnknownField", modelKey: n3, fieldName: s3 });
          continue;
        }
        if (l.relationName) {
          r.push({ kind: "RelationInOmit", modelKey: n3, fieldName: s3 });
          continue;
        }
        typeof a != "boolean" && r.push({ kind: "InvalidFieldValue", modelKey: n3, fieldName: s3 });
      }
    }
    if (r.length > 0)
      throw new L(ym(e, r));
  }, __internal: (e) => {
    if (!e)
      return;
    let t3 = ["debug", "engine", "configOverride"];
    if (typeof e != "object")
      throw new L(`Invalid value ${JSON.stringify(e)} for "__internal" to PrismaClient constructor`);
    for (let [r] of Object.entries(e))
      if (!t3.includes(r)) {
        let n3 = $t(r, t3);
        throw new L(`Invalid property ${JSON.stringify(r)} for "__internal" provided to PrismaClient constructor.${n3}`);
      }
  } };
  var Xe = F("prisma:client");
  typeof globalThis == "object" && (globalThis.NODE_CLIENT = true);
  var bm = { requestArgsToMiddlewareArgs: (e) => e, middlewareArgsToRequestArgs: (e) => e };
  var Em = Symbol.for("prisma.client.transaction.id");
  var wm = { id: 0, nextId() {
    return ++this.id;
  } };
  var Pm = new Set(["toJSON", "$$typeof", "asymmetricMatch", Symbol.iterator, Symbol.toStringTag, Symbol.isConcatSpreadable, Symbol.toPrimitive]);
  /*! Bundled license information:
  
  decimal.js/decimal.mjs:
    (*!
     *  decimal.js v10.4.3
     *  An arbitrary-precision Decimal type for JavaScript.
     *  https://github.com/MikeMcl/decimal.js
     *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
     *  MIT Licence
     *)
  */
});

// node_modules/.prisma/client/index.js
var require_client = __commonJS((exports) => {
  var __dirname = "C:\\Users\\User\\Desktop\\project\\my-app\\app\\node_modules\\.prisma\\client";
  Object.defineProperty(exports, "__esModule", { value: true });
  var {
    PrismaClientKnownRequestError: PrismaClientKnownRequestError2,
    PrismaClientUnknownRequestError: PrismaClientUnknownRequestError2,
    PrismaClientRustPanicError: PrismaClientRustPanicError2,
    PrismaClientInitializationError: PrismaClientInitializationError2,
    PrismaClientValidationError: PrismaClientValidationError2,
    NotFoundError: NotFoundError2,
    getPrismaClient: getPrismaClient2,
    sqltag: sqltag2,
    empty: empty3,
    join: join3,
    raw: raw2,
    Decimal: Decimal2,
    Debug: Debug2,
    objectEnumValues: objectEnumValues2,
    makeStrictEnum: makeStrictEnum2,
    Extensions: Extensions2,
    warnOnce: warnOnce2,
    defineDmmfProperty: defineDmmfProperty2,
    Public: Public2,
    getRuntime: getRuntime2
  } = require_library();
  var Prisma = {};
  exports.Prisma = Prisma;
  exports.$Enums = {};
  Prisma.prismaVersion = {
    client: "5.19.1",
    engine: "69d742ee20b815d88e17e54db4a2a7a3b30324e3"
  };
  Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError2;
  Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError2;
  Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError2;
  Prisma.PrismaClientInitializationError = PrismaClientInitializationError2;
  Prisma.PrismaClientValidationError = PrismaClientValidationError2;
  Prisma.NotFoundError = NotFoundError2;
  Prisma.Decimal = Decimal2;
  Prisma.sql = sqltag2;
  Prisma.empty = empty3;
  Prisma.join = join3;
  Prisma.raw = raw2;
  Prisma.validator = Public2.validator;
  Prisma.getExtensionContext = Extensions2.getExtensionContext;
  Prisma.defineExtension = Extensions2.defineExtension;
  Prisma.DbNull = objectEnumValues2.instances.DbNull;
  Prisma.JsonNull = objectEnumValues2.instances.JsonNull;
  Prisma.AnyNull = objectEnumValues2.instances.AnyNull;
  Prisma.NullTypes = {
    DbNull: objectEnumValues2.classes.DbNull,
    JsonNull: objectEnumValues2.classes.JsonNull,
    AnyNull: objectEnumValues2.classes.AnyNull
  };
  var path2 = import.meta.require("path");
  exports.Prisma.TransactionIsolationLevel = makeStrictEnum2({
    Serializable: "Serializable"
  });
  exports.Prisma.SourceScalarFieldEnum = {
    id: "id",
    sourceId: "sourceId",
    name: "name",
    url: "url"
  };
  exports.Prisma.SortOrder = {
    asc: "asc",
    desc: "desc"
  };
  exports.Prisma.ModelName = {
    Source: "Source"
  };
  var config3 = {
    generator: {
      name: "client",
      provider: {
        fromEnvVar: null,
        value: "prisma-client-js"
      },
      output: {
        value: "C:\\Users\\User\\Desktop\\project\\my-app\\app\\node_modules\\@prisma\\client",
        fromEnvVar: null
      },
      config: {
        engineType: "library"
      },
      binaryTargets: [
        {
          fromEnvVar: null,
          value: "windows",
          native: true
        }
      ],
      previewFeatures: [],
      sourceFilePath: "C:\\Users\\User\\Desktop\\project\\my-app\\app\\prisma\\schema.prisma"
    },
    relativeEnvPaths: {
      rootEnvPath: null,
      schemaEnvPath: "../../../.env"
    },
    relativePath: "../../../prisma",
    clientVersion: "5.19.1",
    engineVersion: "69d742ee20b815d88e17e54db4a2a7a3b30324e3",
    datasourceNames: [
      "db"
    ],
    activeProvider: "sqlite",
    inlineDatasources: {
      db: {
        url: {
          fromEnvVar: null,
          value: "file:./dev.db"
        }
      }
    },
    inlineSchema: "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n\nmodel Source {\n  id       Int    @id @default(autoincrement())\n  sourceId String @unique\n  name     String\n  url      String\n}\n",
    inlineSchemaHash: "e7076333de5116b08261275181d29e20bf6e0f2b0386a35afba9a2ff69d834df",
    copyEngine: true
  };
  var fs2 = import.meta.require("fs");
  config3.dirname = __dirname;
  if (!fs2.existsSync(path2.join(__dirname, "schema.prisma"))) {
    const alternativePaths = [
      "node_modules/.prisma/client",
      ".prisma/client"
    ];
    const alternativePath = alternativePaths.find((altPath) => {
      return fs2.existsSync(path2.join(process.cwd(), altPath, "schema.prisma"));
    }) ?? alternativePaths[0];
    config3.dirname = path2.join(process.cwd(), alternativePath);
    config3.isBundled = true;
  }
  config3.runtimeDataModel = JSON.parse("{\"models\":{\"Source\":{\"dbName\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"default\":{\"name\":\"autoincrement\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"sourceId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"url\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false}},\"enums\":{},\"types\":{}}");
  defineDmmfProperty2(exports.Prisma, config3.runtimeDataModel);
  config3.engineWasm = undefined;
  var { warnEnvConflicts: warnEnvConflicts2 } = require_library();
  warnEnvConflicts2({
    rootEnvPath: config3.relativeEnvPaths.rootEnvPath && path2.resolve(config3.dirname, config3.relativeEnvPaths.rootEnvPath),
    schemaEnvPath: config3.relativeEnvPaths.schemaEnvPath && path2.resolve(config3.dirname, config3.relativeEnvPaths.schemaEnvPath)
  });
  var PrismaClient = getPrismaClient2(config3);
  exports.PrismaClient = PrismaClient;
  Object.assign(exports, Prisma);
  path2.join(__dirname, "query_engine-windows.dll.node");
  path2.join(process.cwd(), "node_modules/.prisma/client/query_engine-windows.dll.node");
  path2.join(__dirname, "schema.prisma");
  path2.join(process.cwd(), "node_modules/.prisma/client/schema.prisma");
});

// node_modules/.prisma/client/default.js
var require_default = __commonJS((exports, module) => {
  module.exports = { ...require_client() };
});

// node_modules/@prisma/client/default.js
var require_default2 = __commonJS((exports, module) => {
  module.exports = {
    ...require_default()
  };
});

// node_modules/pino-std-serializers/lib/err-helpers.js
var require_err_helpers = __commonJS((exports, module) => {
  var isErrorLike = (err) => {
    return err && typeof err.message === "string";
  };
  var getErrorCause = (err) => {
    if (!err)
      return;
    const cause = err.cause;
    if (typeof cause === "function") {
      const causeResult = err.cause();
      return isErrorLike(causeResult) ? causeResult : undefined;
    } else {
      return isErrorLike(cause) ? cause : undefined;
    }
  };
  var _stackWithCauses = (err, seen) => {
    if (!isErrorLike(err))
      return "";
    const stack = err.stack || "";
    if (seen.has(err)) {
      return stack + "\ncauses have become circular...";
    }
    const cause = getErrorCause(err);
    if (cause) {
      seen.add(err);
      return stack + "\ncaused by: " + _stackWithCauses(cause, seen);
    } else {
      return stack;
    }
  };
  var stackWithCauses = (err) => _stackWithCauses(err, new Set);
  var _messageWithCauses = (err, seen, skip) => {
    if (!isErrorLike(err))
      return "";
    const message = skip ? "" : err.message || "";
    if (seen.has(err)) {
      return message + ": ...";
    }
    const cause = getErrorCause(err);
    if (cause) {
      seen.add(err);
      const skipIfVErrorStyleCause = typeof err.cause === "function";
      return message + (skipIfVErrorStyleCause ? "" : ": ") + _messageWithCauses(cause, seen, skipIfVErrorStyleCause);
    } else {
      return message;
    }
  };
  var messageWithCauses = (err) => _messageWithCauses(err, new Set);
  module.exports = {
    isErrorLike,
    getErrorCause,
    stackWithCauses,
    messageWithCauses
  };
});

// node_modules/pino-std-serializers/lib/err-proto.js
var require_err_proto = __commonJS((exports, module) => {
  var seen = Symbol("circular-ref-tag");
  var rawSymbol = Symbol("pino-raw-err-ref");
  var pinoErrProto = Object.create({}, {
    type: {
      enumerable: true,
      writable: true,
      value: undefined
    },
    message: {
      enumerable: true,
      writable: true,
      value: undefined
    },
    stack: {
      enumerable: true,
      writable: true,
      value: undefined
    },
    aggregateErrors: {
      enumerable: true,
      writable: true,
      value: undefined
    },
    raw: {
      enumerable: false,
      get: function() {
        return this[rawSymbol];
      },
      set: function(val2) {
        this[rawSymbol] = val2;
      }
    }
  });
  Object.defineProperty(pinoErrProto, rawSymbol, {
    writable: true,
    value: {}
  });
  module.exports = {
    pinoErrProto,
    pinoErrorSymbols: {
      seen,
      rawSymbol
    }
  };
});

// node_modules/pino-std-serializers/lib/err.js
var require_err = __commonJS((exports, module) => {
  function errSerializer(err) {
    if (!isErrorLike(err)) {
      return err;
    }
    err[seen] = undefined;
    const _err = Object.create(pinoErrProto);
    _err.type = toString2.call(err.constructor) === "[object Function]" ? err.constructor.name : err.name;
    _err.message = messageWithCauses(err);
    _err.stack = stackWithCauses(err);
    if (Array.isArray(err.errors)) {
      _err.aggregateErrors = err.errors.map((err2) => errSerializer(err2));
    }
    for (const key in err) {
      if (_err[key] === undefined) {
        const val2 = err[key];
        if (isErrorLike(val2)) {
          if (key !== "cause" && !Object.prototype.hasOwnProperty.call(val2, seen)) {
            _err[key] = errSerializer(val2);
          }
        } else {
          _err[key] = val2;
        }
      }
    }
    delete err[seen];
    _err.raw = err;
    return _err;
  }
  module.exports = errSerializer;
  var { messageWithCauses, stackWithCauses, isErrorLike } = require_err_helpers();
  var { pinoErrProto, pinoErrorSymbols } = require_err_proto();
  var { seen } = pinoErrorSymbols;
  var { toString: toString2 } = Object.prototype;
});

// node_modules/pino-std-serializers/lib/err-with-cause.js
var require_err_with_cause = __commonJS((exports, module) => {
  function errWithCauseSerializer(err) {
    if (!isErrorLike(err)) {
      return err;
    }
    err[seen] = undefined;
    const _err = Object.create(pinoErrProto);
    _err.type = toString2.call(err.constructor) === "[object Function]" ? err.constructor.name : err.name;
    _err.message = err.message;
    _err.stack = err.stack;
    if (Array.isArray(err.errors)) {
      _err.aggregateErrors = err.errors.map((err2) => errWithCauseSerializer(err2));
    }
    if (isErrorLike(err.cause) && !Object.prototype.hasOwnProperty.call(err.cause, seen)) {
      _err.cause = errWithCauseSerializer(err.cause);
    }
    for (const key in err) {
      if (_err[key] === undefined) {
        const val2 = err[key];
        if (isErrorLike(val2)) {
          if (!Object.prototype.hasOwnProperty.call(val2, seen)) {
            _err[key] = errWithCauseSerializer(val2);
          }
        } else {
          _err[key] = val2;
        }
      }
    }
    delete err[seen];
    _err.raw = err;
    return _err;
  }
  module.exports = errWithCauseSerializer;
  var { isErrorLike } = require_err_helpers();
  var { pinoErrProto, pinoErrorSymbols } = require_err_proto();
  var { seen } = pinoErrorSymbols;
  var { toString: toString2 } = Object.prototype;
});

// node_modules/pino-std-serializers/lib/req.js
var require_req = __commonJS((exports, module) => {
  function reqSerializer(req) {
    const connection = req.info || req.socket;
    const _req = Object.create(pinoReqProto);
    _req.id = typeof req.id === "function" ? req.id() : req.id || (req.info ? req.info.id : undefined);
    _req.method = req.method;
    if (req.originalUrl) {
      _req.url = req.originalUrl;
    } else {
      const path2 = req.path;
      _req.url = typeof path2 === "string" ? path2 : req.url ? req.url.path || req.url : undefined;
    }
    if (req.query) {
      _req.query = req.query;
    }
    if (req.params) {
      _req.params = req.params;
    }
    _req.headers = req.headers;
    _req.remoteAddress = connection && connection.remoteAddress;
    _req.remotePort = connection && connection.remotePort;
    _req.raw = req.raw || req;
    return _req;
  }
  function mapHttpRequest(req) {
    return {
      req: reqSerializer(req)
    };
  }
  module.exports = {
    mapHttpRequest,
    reqSerializer
  };
  var rawSymbol = Symbol("pino-raw-req-ref");
  var pinoReqProto = Object.create({}, {
    id: {
      enumerable: true,
      writable: true,
      value: ""
    },
    method: {
      enumerable: true,
      writable: true,
      value: ""
    },
    url: {
      enumerable: true,
      writable: true,
      value: ""
    },
    query: {
      enumerable: true,
      writable: true,
      value: ""
    },
    params: {
      enumerable: true,
      writable: true,
      value: ""
    },
    headers: {
      enumerable: true,
      writable: true,
      value: {}
    },
    remoteAddress: {
      enumerable: true,
      writable: true,
      value: ""
    },
    remotePort: {
      enumerable: true,
      writable: true,
      value: ""
    },
    raw: {
      enumerable: false,
      get: function() {
        return this[rawSymbol];
      },
      set: function(val2) {
        this[rawSymbol] = val2;
      }
    }
  });
  Object.defineProperty(pinoReqProto, rawSymbol, {
    writable: true,
    value: {}
  });
});

// node_modules/pino-std-serializers/lib/res.js
var require_res = __commonJS((exports, module) => {
  function resSerializer(res) {
    const _res = Object.create(pinoResProto);
    _res.statusCode = res.headersSent ? res.statusCode : null;
    _res.headers = res.getHeaders ? res.getHeaders() : res._headers;
    _res.raw = res;
    return _res;
  }
  function mapHttpResponse(res) {
    return {
      res: resSerializer(res)
    };
  }
  module.exports = {
    mapHttpResponse,
    resSerializer
  };
  var rawSymbol = Symbol("pino-raw-res-ref");
  var pinoResProto = Object.create({}, {
    statusCode: {
      enumerable: true,
      writable: true,
      value: 0
    },
    headers: {
      enumerable: true,
      writable: true,
      value: ""
    },
    raw: {
      enumerable: false,
      get: function() {
        return this[rawSymbol];
      },
      set: function(val2) {
        this[rawSymbol] = val2;
      }
    }
  });
  Object.defineProperty(pinoResProto, rawSymbol, {
    writable: true,
    value: {}
  });
});

// node_modules/pino-std-serializers/index.js
var require_pino_std_serializers = __commonJS((exports, module) => {
  var errSerializer = require_err();
  var errWithCauseSerializer = require_err_with_cause();
  var reqSerializers = require_req();
  var resSerializers = require_res();
  module.exports = {
    err: errSerializer,
    errWithCause: errWithCauseSerializer,
    mapHttpRequest: reqSerializers.mapHttpRequest,
    mapHttpResponse: resSerializers.mapHttpResponse,
    req: reqSerializers.reqSerializer,
    res: resSerializers.resSerializer,
    wrapErrorSerializer: function wrapErrorSerializer(customSerializer) {
      if (customSerializer === errSerializer)
        return customSerializer;
      return function wrapErrSerializer(err) {
        return customSerializer(errSerializer(err));
      };
    },
    wrapRequestSerializer: function wrapRequestSerializer(customSerializer) {
      if (customSerializer === reqSerializers.reqSerializer)
        return customSerializer;
      return function wrappedReqSerializer(req) {
        return customSerializer(reqSerializers.reqSerializer(req));
      };
    },
    wrapResponseSerializer: function wrapResponseSerializer(customSerializer) {
      if (customSerializer === resSerializers.resSerializer)
        return customSerializer;
      return function wrappedResSerializer(res) {
        return customSerializer(resSerializers.resSerializer(res));
      };
    }
  };
});

// node_modules/pino/lib/caller.js
var require_caller = __commonJS((exports, module) => {
  function noOpPrepareStackTrace(_, stack) {
    return stack;
  }
  module.exports = function getCallers() {
    const originalPrepare = Error.prepareStackTrace;
    Error.prepareStackTrace = noOpPrepareStackTrace;
    const stack = new Error().stack;
    Error.prepareStackTrace = originalPrepare;
    if (!Array.isArray(stack)) {
      return;
    }
    const entries = stack.slice(2);
    const fileNames = [];
    for (const entry of entries) {
      if (!entry) {
        continue;
      }
      fileNames.push(entry.getFileName());
    }
    return fileNames;
  };
});

// node_modules/fast-redact/lib/validator.js
var require_validator = __commonJS((exports, module) => {
  function validator(opts = {}) {
    const {
      ERR_PATHS_MUST_BE_STRINGS = () => "fast-redact - Paths must be (non-empty) strings",
      ERR_INVALID_PATH = (s3) => `fast-redact \u2013 Invalid path (${s3})`
    } = opts;
    return function validate({ paths }) {
      paths.forEach((s3) => {
        if (typeof s3 !== "string") {
          throw Error(ERR_PATHS_MUST_BE_STRINGS());
        }
        try {
          if (/\u3007/.test(s3))
            throw Error();
          const expr = (s3[0] === "[" ? "" : ".") + s3.replace(/^\*/, "\u3007").replace(/\.\*/g, ".\u3007").replace(/\[\*\]/g, "[\u3007]");
          if (/\n|\r|;/.test(expr))
            throw Error();
          if (/\/\*/.test(expr))
            throw Error();
          Function(`
            'use strict'
            const o = new Proxy({}, { get: () => o, set: () => { throw Error() } });
            const \u3007 = null;
            o${expr}
            if ([o${expr}].length !== 1) throw Error()`)();
        } catch (e) {
          throw Error(ERR_INVALID_PATH(s3));
        }
      });
    };
  }
  module.exports = validator;
});

// node_modules/fast-redact/lib/rx.js
var require_rx = __commonJS((exports, module) => {
  module.exports = /[^.[\]]+|\[((?:.)*?)\]/g;
});

// node_modules/fast-redact/lib/parse.js
var require_parse = __commonJS((exports, module) => {
  function parse13({ paths }) {
    const wildcards = [];
    var wcLen = 0;
    const secret = paths.reduce(function(o2, strPath, ix) {
      var path2 = strPath.match(rx).map((p3) => p3.replace(/'|"|`/g, ""));
      const leadingBracket = strPath[0] === "[";
      path2 = path2.map((p3) => {
        if (p3[0] === "[")
          return p3.substr(1, p3.length - 2);
        else
          return p3;
      });
      const star = path2.indexOf("*");
      if (star > -1) {
        const before2 = path2.slice(0, star);
        const beforeStr = before2.join(".");
        const after2 = path2.slice(star + 1, path2.length);
        const nested = after2.length > 0;
        wcLen++;
        wildcards.push({
          before: before2,
          beforeStr,
          after: after2,
          nested
        });
      } else {
        o2[strPath] = {
          path: path2,
          val: undefined,
          precensored: false,
          circle: "",
          escPath: JSON.stringify(strPath),
          leadingBracket
        };
      }
      return o2;
    }, {});
    return { wildcards, wcLen, secret };
  }
  var rx = require_rx();
  module.exports = parse13;
});

// node_modules/fast-redact/lib/redactor.js
var require_redactor = __commonJS((exports, module) => {
  function redactor({ secret, serialize: serialize3, wcLen, strict: strict4, isCensorFct, censorFctTakesPath }, state) {
    const redact = Function("o", `
    if (typeof o !== 'object' || o == null) {
      ${strictImpl(strict4, serialize3)}
    }
    const { censor, secret } = this
    const originalSecret = {}
    const secretKeys = Object.keys(secret)
    for (var i = 0; i < secretKeys.length; i++) {
      originalSecret[secretKeys[i]] = secret[secretKeys[i]]
    }

    ${redactTmpl(secret, isCensorFct, censorFctTakesPath)}
    this.compileRestore()
    ${dynamicRedactTmpl(wcLen > 0, isCensorFct, censorFctTakesPath)}
    this.secret = originalSecret
    ${resultTmpl(serialize3)}
  `).bind(state);
    redact.state = state;
    if (serialize3 === false) {
      redact.restore = (o2) => state.restore(o2);
    }
    return redact;
  }
  function redactTmpl(secret, isCensorFct, censorFctTakesPath) {
    return Object.keys(secret).map((path2) => {
      const { escPath, leadingBracket, path: arrPath } = secret[path2];
      const skip = leadingBracket ? 1 : 0;
      const delim = leadingBracket ? "" : ".";
      const hops = [];
      var match;
      while ((match = rx.exec(path2)) !== null) {
        const [, ix] = match;
        const { index: index2, input } = match;
        if (index2 > skip)
          hops.push(input.substring(0, index2 - (ix ? 0 : 1)));
      }
      var existence = hops.map((p3) => `o${delim}${p3}`).join(" && ");
      if (existence.length === 0)
        existence += `o${delim}${path2} != null`;
      else
        existence += ` && o${delim}${path2} != null`;
      const circularDetection = `
      switch (true) {
        ${hops.reverse().map((p3) => `
          case o${delim}${p3} === censor:
            secret[${escPath}].circle = ${JSON.stringify(p3)}
            break
        `).join("\n")}
      }
    `;
      const censorArgs = censorFctTakesPath ? `val, ${JSON.stringify(arrPath)}` : `val`;
      return `
      if (${existence}) {
        const val = o${delim}${path2}
        if (val === censor) {
          secret[${escPath}].precensored = true
        } else {
          secret[${escPath}].val = val
          o${delim}${path2} = ${isCensorFct ? `censor(${censorArgs})` : "censor"}
          ${circularDetection}
        }
      }
    `;
    }).join("\n");
  }
  function dynamicRedactTmpl(hasWildcards, isCensorFct, censorFctTakesPath) {
    return hasWildcards === true ? `
    {
      const { wildcards, wcLen, groupRedact, nestedRedact } = this
      for (var i = 0; i < wcLen; i++) {
        const { before, beforeStr, after, nested } = wildcards[i]
        if (nested === true) {
          secret[beforeStr] = secret[beforeStr] || []
          nestedRedact(secret[beforeStr], o, before, after, censor, ${isCensorFct}, ${censorFctTakesPath})
        } else secret[beforeStr] = groupRedact(o, before, censor, ${isCensorFct}, ${censorFctTakesPath})
      }
    }
  ` : "";
  }
  function resultTmpl(serialize3) {
    return serialize3 === false ? `return o` : `
    var s = this.serialize(o)
    this.restore(o)
    return s
  `;
  }
  function strictImpl(strict4, serialize3) {
    return strict4 === true ? `throw Error('fast-redact: primitives cannot be redacted')` : serialize3 === false ? `return o` : `return this.serialize(o)`;
  }
  var rx = require_rx();
  module.exports = redactor;
});

// node_modules/fast-redact/lib/modifiers.js
var require_modifiers = __commonJS((exports, module) => {
  function groupRestore({ keys, values, target }) {
    if (target == null || typeof target === "string")
      return;
    const length = keys.length;
    for (var i3 = 0;i3 < length; i3++) {
      const k = keys[i3];
      target[k] = values[i3];
    }
  }
  function groupRedact(o2, path2, censor, isCensorFct, censorFctTakesPath) {
    const target = get2(o2, path2);
    if (target == null || typeof target === "string")
      return { keys: null, values: null, target, flat: true };
    const keys = Object.keys(target);
    const keysLength = keys.length;
    const pathLength = path2.length;
    const pathWithKey = censorFctTakesPath ? [...path2] : undefined;
    const values = new Array(keysLength);
    for (var i3 = 0;i3 < keysLength; i3++) {
      const key = keys[i3];
      values[i3] = target[key];
      if (censorFctTakesPath) {
        pathWithKey[pathLength] = key;
        target[key] = censor(target[key], pathWithKey);
      } else if (isCensorFct) {
        target[key] = censor(target[key]);
      } else {
        target[key] = censor;
      }
    }
    return { keys, values, target, flat: true };
  }
  function nestedRestore(instructions) {
    for (let i3 = 0;i3 < instructions.length; i3++) {
      const { target, path: path2, value: value15 } = instructions[i3];
      let current = target;
      for (let i4 = path2.length - 1;i4 > 0; i4--) {
        current = current[path2[i4]];
      }
      current[path2[0]] = value15;
    }
  }
  function nestedRedact(store, o2, path2, ns, censor, isCensorFct, censorFctTakesPath) {
    const target = get2(o2, path2);
    if (target == null)
      return;
    const keys = Object.keys(target);
    const keysLength = keys.length;
    for (var i3 = 0;i3 < keysLength; i3++) {
      const key = keys[i3];
      specialSet(store, target, key, path2, ns, censor, isCensorFct, censorFctTakesPath);
    }
    return store;
  }
  function has3(obj, prop2) {
    return obj !== undefined && obj !== null ? "hasOwn" in Object ? Object.hasOwn(obj, prop2) : Object.prototype.hasOwnProperty.call(obj, prop2) : false;
  }
  function specialSet(store, o2, k, path2, afterPath, censor, isCensorFct, censorFctTakesPath) {
    const afterPathLen = afterPath.length;
    const lastPathIndex = afterPathLen - 1;
    const originalKey = k;
    var i3 = -1;
    var n3;
    var nv;
    var ov;
    var oov = null;
    var wc = null;
    var kIsWc;
    var wcov;
    var consecutive = false;
    var level = 0;
    var depth = 0;
    var redactPathCurrent = tree();
    ov = n3 = o2[k];
    if (typeof n3 !== "object")
      return;
    while (n3 != null && ++i3 < afterPathLen) {
      depth += 1;
      k = afterPath[i3];
      oov = ov;
      if (k !== "*" && !wc && !(typeof n3 === "object" && (k in n3))) {
        break;
      }
      if (k === "*") {
        if (wc === "*") {
          consecutive = true;
        }
        wc = k;
        if (i3 !== lastPathIndex) {
          continue;
        }
      }
      if (wc) {
        const wcKeys = Object.keys(n3);
        for (var j = 0;j < wcKeys.length; j++) {
          const wck = wcKeys[j];
          wcov = n3[wck];
          kIsWc = k === "*";
          if (consecutive) {
            redactPathCurrent = node3(redactPathCurrent, wck, depth);
            level = i3;
            ov = iterateNthLevel(wcov, level - 1, k, path2, afterPath, censor, isCensorFct, censorFctTakesPath, originalKey, n3, nv, ov, kIsWc, wck, i3, lastPathIndex, redactPathCurrent, store, o2[originalKey], depth + 1);
          } else {
            if (kIsWc || typeof wcov === "object" && wcov !== null && k in wcov) {
              if (kIsWc) {
                ov = wcov;
              } else {
                ov = wcov[k];
              }
              nv = i3 !== lastPathIndex ? ov : isCensorFct ? censorFctTakesPath ? censor(ov, [...path2, originalKey, ...afterPath]) : censor(ov) : censor;
              if (kIsWc) {
                const rv = restoreInstr(node3(redactPathCurrent, wck, depth), ov, o2[originalKey]);
                store.push(rv);
                n3[wck] = nv;
              } else {
                if (wcov[k] === nv) {
                } else if (nv === undefined && censor !== undefined || has3(wcov, k) && nv === ov) {
                  redactPathCurrent = node3(redactPathCurrent, wck, depth);
                } else {
                  redactPathCurrent = node3(redactPathCurrent, wck, depth);
                  const rv = restoreInstr(node3(redactPathCurrent, k, depth + 1), ov, o2[originalKey]);
                  store.push(rv);
                  wcov[k] = nv;
                }
              }
            }
          }
        }
        wc = null;
      } else {
        ov = n3[k];
        redactPathCurrent = node3(redactPathCurrent, k, depth);
        nv = i3 !== lastPathIndex ? ov : isCensorFct ? censorFctTakesPath ? censor(ov, [...path2, originalKey, ...afterPath]) : censor(ov) : censor;
        if (has3(n3, k) && nv === ov || nv === undefined && censor !== undefined) {
        } else {
          const rv = restoreInstr(redactPathCurrent, ov, o2[originalKey]);
          store.push(rv);
          n3[k] = nv;
        }
        n3 = n3[k];
      }
      if (typeof n3 !== "object")
        break;
      if (ov === oov || typeof ov === "undefined") {
      }
    }
  }
  function get2(o2, p3) {
    var i3 = -1;
    var l = p3.length;
    var n3 = o2;
    while (n3 != null && ++i3 < l) {
      n3 = n3[p3[i3]];
    }
    return n3;
  }
  function iterateNthLevel(wcov, level, k, path2, afterPath, censor, isCensorFct, censorFctTakesPath, originalKey, n3, nv, ov, kIsWc, wck, i3, lastPathIndex, redactPathCurrent, store, parent2, depth) {
    if (level === 0) {
      if (kIsWc || typeof wcov === "object" && wcov !== null && k in wcov) {
        if (kIsWc) {
          ov = wcov;
        } else {
          ov = wcov[k];
        }
        nv = i3 !== lastPathIndex ? ov : isCensorFct ? censorFctTakesPath ? censor(ov, [...path2, originalKey, ...afterPath]) : censor(ov) : censor;
        if (kIsWc) {
          const rv = restoreInstr(redactPathCurrent, ov, parent2);
          store.push(rv);
          n3[wck] = nv;
        } else {
          if (wcov[k] === nv) {
          } else if (nv === undefined && censor !== undefined || has3(wcov, k) && nv === ov) {
          } else {
            const rv = restoreInstr(node3(redactPathCurrent, k, depth + 1), ov, parent2);
            store.push(rv);
            wcov[k] = nv;
          }
        }
      }
    }
    for (const key in wcov) {
      if (typeof wcov[key] === "object") {
        redactPathCurrent = node3(redactPathCurrent, key, depth);
        iterateNthLevel(wcov[key], level - 1, k, path2, afterPath, censor, isCensorFct, censorFctTakesPath, originalKey, n3, nv, ov, kIsWc, wck, i3, lastPathIndex, redactPathCurrent, store, parent2, depth + 1);
      }
    }
  }
  function tree() {
    return { parent: null, key: null, children: [], depth: 0 };
  }
  function node3(parent2, key, depth) {
    if (parent2.depth === depth) {
      return node3(parent2.parent, key, depth);
    }
    var child = {
      parent: parent2,
      key,
      depth,
      children: []
    };
    parent2.children.push(child);
    return child;
  }
  function restoreInstr(node4, value15, target) {
    let current = node4;
    const path2 = [];
    do {
      path2.push(current.key);
      current = current.parent;
    } while (current.parent != null);
    return { path: path2, value: value15, target };
  }
  module.exports = {
    groupRedact,
    groupRestore,
    nestedRedact,
    nestedRestore
  };
});

// node_modules/fast-redact/lib/restorer.js
var require_restorer = __commonJS((exports, module) => {
  function restorer() {
    return function compileRestore() {
      if (this.restore) {
        this.restore.state.secret = this.secret;
        return;
      }
      const { secret, wcLen } = this;
      const paths = Object.keys(secret);
      const resetters = resetTmpl(secret, paths);
      const hasWildcards = wcLen > 0;
      const state = hasWildcards ? { secret, groupRestore, nestedRestore } : { secret };
      this.restore = Function("o", restoreTmpl(resetters, paths, hasWildcards)).bind(state);
      this.restore.state = state;
    };
  }
  function resetTmpl(secret, paths) {
    return paths.map((path2) => {
      const { circle, escPath, leadingBracket } = secret[path2];
      const delim = leadingBracket ? "" : ".";
      const reset = circle ? `o.${circle} = secret[${escPath}].val` : `o${delim}${path2} = secret[${escPath}].val`;
      const clear = `secret[${escPath}].val = undefined`;
      return `
      if (secret[${escPath}].val !== undefined) {
        try { ${reset} } catch (e) {}
        ${clear}
      }
    `;
    }).join("");
  }
  function restoreTmpl(resetters, paths, hasWildcards) {
    const dynamicReset = hasWildcards === true ? `
    const keys = Object.keys(secret)
    const len = keys.length
    for (var i = len - 1; i >= ${paths.length}; i--) {
      const k = keys[i]
      const o = secret[k]
      if (o) {
        if (o.flat === true) this.groupRestore(o)
        else this.nestedRestore(o)
        secret[k] = null
      }
    }
  ` : "";
    return `
    const secret = this.secret
    ${dynamicReset}
    ${resetters}
    return o
  `;
  }
  var { groupRestore, nestedRestore } = require_modifiers();
  module.exports = restorer;
});

// node_modules/fast-redact/lib/state.js
var require_state = __commonJS((exports, module) => {
  function state(o2) {
    const {
      secret,
      censor,
      compileRestore,
      serialize: serialize3,
      groupRedact,
      nestedRedact,
      wildcards,
      wcLen
    } = o2;
    const builder = [{ secret, censor, compileRestore }];
    if (serialize3 !== false)
      builder.push({ serialize: serialize3 });
    if (wcLen > 0)
      builder.push({ groupRedact, nestedRedact, wildcards, wcLen });
    return Object.assign(...builder);
  }
  module.exports = state;
});

// node_modules/fast-redact/index.js
var require_fast_redact = __commonJS((exports, module) => {
  function fastRedact(opts = {}) {
    const paths = Array.from(new Set(opts.paths || []));
    const serialize3 = "serialize" in opts ? opts.serialize === false ? opts.serialize : typeof opts.serialize === "function" ? opts.serialize : JSON.stringify : JSON.stringify;
    const remove2 = opts.remove;
    if (remove2 === true && serialize3 !== JSON.stringify) {
      throw Error("fast-redact \u2013 remove option may only be set when serializer is JSON.stringify");
    }
    const censor = remove2 === true ? undefined : ("censor" in opts) ? opts.censor : DEFAULT_CENSOR;
    const isCensorFct = typeof censor === "function";
    const censorFctTakesPath = isCensorFct && censor.length > 1;
    if (paths.length === 0)
      return serialize3 || noop;
    validate({ paths, serialize: serialize3, censor });
    const { wildcards, wcLen, secret } = parse13({ paths, censor });
    const compileRestore = restorer();
    const strict4 = "strict" in opts ? opts.strict : true;
    return redactor({ secret, wcLen, serialize: serialize3, strict: strict4, isCensorFct, censorFctTakesPath }, state({
      secret,
      censor,
      compileRestore,
      serialize: serialize3,
      groupRedact,
      nestedRedact,
      wildcards,
      wcLen
    }));
  }
  var validator = require_validator();
  var parse13 = require_parse();
  var redactor = require_redactor();
  var restorer = require_restorer();
  var { groupRedact, nestedRedact } = require_modifiers();
  var state = require_state();
  var rx = require_rx();
  var validate = validator();
  var noop = (o2) => o2;
  noop.restore = noop;
  var DEFAULT_CENSOR = "[REDACTED]";
  fastRedact.rx = rx;
  fastRedact.validator = validator;
  module.exports = fastRedact;
});

// node_modules/pino/lib/symbols.js
var require_symbols = __commonJS((exports, module) => {
  var setLevelSym = Symbol("pino.setLevel");
  var getLevelSym = Symbol("pino.getLevel");
  var levelValSym = Symbol("pino.levelVal");
  var levelCompSym = Symbol("pino.levelComp");
  var useLevelLabelsSym = Symbol("pino.useLevelLabels");
  var useOnlyCustomLevelsSym = Symbol("pino.useOnlyCustomLevels");
  var mixinSym = Symbol("pino.mixin");
  var lsCacheSym = Symbol("pino.lsCache");
  var chindingsSym = Symbol("pino.chindings");
  var asJsonSym = Symbol("pino.asJson");
  var writeSym = Symbol("pino.write");
  var redactFmtSym = Symbol("pino.redactFmt");
  var timeSym = Symbol("pino.time");
  var timeSliceIndexSym = Symbol("pino.timeSliceIndex");
  var streamSym = Symbol("pino.stream");
  var stringifySym = Symbol("pino.stringify");
  var stringifySafeSym = Symbol("pino.stringifySafe");
  var stringifiersSym = Symbol("pino.stringifiers");
  var endSym = Symbol("pino.end");
  var formatOptsSym = Symbol("pino.formatOpts");
  var messageKeySym = Symbol("pino.messageKey");
  var errorKeySym = Symbol("pino.errorKey");
  var nestedKeySym = Symbol("pino.nestedKey");
  var nestedKeyStrSym = Symbol("pino.nestedKeyStr");
  var mixinMergeStrategySym = Symbol("pino.mixinMergeStrategy");
  var msgPrefixSym = Symbol("pino.msgPrefix");
  var wildcardFirstSym = Symbol("pino.wildcardFirst");
  var serializersSym = Symbol.for("pino.serializers");
  var formattersSym = Symbol.for("pino.formatters");
  var hooksSym = Symbol.for("pino.hooks");
  var needsMetadataGsym = Symbol.for("pino.metadata");
  module.exports = {
    setLevelSym,
    getLevelSym,
    levelValSym,
    levelCompSym,
    useLevelLabelsSym,
    mixinSym,
    lsCacheSym,
    chindingsSym,
    asJsonSym,
    writeSym,
    serializersSym,
    redactFmtSym,
    timeSym,
    timeSliceIndexSym,
    streamSym,
    stringifySym,
    stringifySafeSym,
    stringifiersSym,
    endSym,
    formatOptsSym,
    messageKeySym,
    errorKeySym,
    nestedKeySym,
    wildcardFirstSym,
    needsMetadataGsym,
    useOnlyCustomLevelsSym,
    formattersSym,
    hooksSym,
    nestedKeyStrSym,
    mixinMergeStrategySym,
    msgPrefixSym
  };
});

// node_modules/pino/lib/redaction.js
var require_redaction = __commonJS((exports, module) => {
  function redaction(opts, serialize3) {
    const { paths, censor } = handle(opts);
    const shape = paths.reduce((o2, str) => {
      rx.lastIndex = 0;
      const first3 = rx.exec(str);
      const next2 = rx.exec(str);
      let ns = first3[1] !== undefined ? first3[1].replace(/^(?:"|'|`)(.*)(?:"|'|`)$/, "$1") : first3[0];
      if (ns === "*") {
        ns = wildcardFirstSym;
      }
      if (next2 === null) {
        o2[ns] = null;
        return o2;
      }
      if (o2[ns] === null) {
        return o2;
      }
      const { index: index2 } = next2;
      const nextPath = `${str.substr(index2, str.length - 1)}`;
      o2[ns] = o2[ns] || [];
      if (ns !== wildcardFirstSym && o2[ns].length === 0) {
        o2[ns].push(...o2[wildcardFirstSym] || []);
      }
      if (ns === wildcardFirstSym) {
        Object.keys(o2).forEach(function(k) {
          if (o2[k]) {
            o2[k].push(nextPath);
          }
        });
      }
      o2[ns].push(nextPath);
      return o2;
    }, {});
    const result = {
      [redactFmtSym]: fastRedact({ paths, censor, serialize: serialize3, strict: strict4 })
    };
    const topCensor = (...args) => {
      return typeof censor === "function" ? serialize3(censor(...args)) : serialize3(censor);
    };
    return [...Object.keys(shape), ...Object.getOwnPropertySymbols(shape)].reduce((o2, k) => {
      if (shape[k] === null) {
        o2[k] = (value15) => topCensor(value15, [k]);
      } else {
        const wrappedCensor = typeof censor === "function" ? (value15, path2) => {
          return censor(value15, [k, ...path2]);
        } : censor;
        o2[k] = fastRedact({
          paths: shape[k],
          censor: wrappedCensor,
          serialize: serialize3,
          strict: strict4
        });
      }
      return o2;
    }, result);
  }
  function handle(opts) {
    if (Array.isArray(opts)) {
      opts = { paths: opts, censor: CENSOR };
      validate(opts);
      return opts;
    }
    let { paths, censor = CENSOR, remove: remove2 } = opts;
    if (Array.isArray(paths) === false) {
      throw Error("pino \u2013 redact must contain an array of strings");
    }
    if (remove2 === true)
      censor = undefined;
    validate({ paths, censor });
    return { paths, censor };
  }
  var fastRedact = require_fast_redact();
  var { redactFmtSym, wildcardFirstSym } = require_symbols();
  var { rx, validator } = fastRedact;
  var validate = validator({
    ERR_PATHS_MUST_BE_STRINGS: () => "pino \u2013 redacted paths must be strings",
    ERR_INVALID_PATH: (s3) => `pino \u2013 redact paths array contains an invalid path (${s3})`
  });
  var CENSOR = "[Redacted]";
  var strict4 = false;
  module.exports = redaction;
});

// node_modules/pino/lib/time.js
var require_time = __commonJS((exports, module) => {
  var nullTime = () => "";
  var epochTime = () => `,"time":${Date.now()}`;
  var unixTime = () => `,"time":${Math.round(Date.now() / 1000)}`;
  var isoTime = () => `,"time":"${new Date(Date.now()).toISOString()}"`;
  module.exports = { nullTime, epochTime, unixTime, isoTime };
});

// node_modules/quick-format-unescaped/index.js
var require_quick_format_unescaped = __commonJS((exports, module) => {
  function tryStringify(o2) {
    try {
      return JSON.stringify(o2);
    } catch (e) {
      return '"[Circular]"';
    }
  }
  function format(f3, args, opts) {
    var ss = opts && opts.stringify || tryStringify;
    var offset = 1;
    if (typeof f3 === "object" && f3 !== null) {
      var len = args.length + offset;
      if (len === 1)
        return f3;
      var objects = new Array(len);
      objects[0] = ss(f3);
      for (var index2 = 1;index2 < len; index2++) {
        objects[index2] = ss(args[index2]);
      }
      return objects.join(" ");
    }
    if (typeof f3 !== "string") {
      return f3;
    }
    var argLen = args.length;
    if (argLen === 0)
      return f3;
    var str = "";
    var a = 1 - offset;
    var lastPos = -1;
    var flen = f3 && f3.length || 0;
    for (var i3 = 0;i3 < flen; ) {
      if (f3.charCodeAt(i3) === 37 && i3 + 1 < flen) {
        lastPos = lastPos > -1 ? lastPos : 0;
        switch (f3.charCodeAt(i3 + 1)) {
          case 100:
          case 102:
            if (a >= argLen)
              break;
            if (args[a] == null)
              break;
            if (lastPos < i3)
              str += f3.slice(lastPos, i3);
            str += Number(args[a]);
            lastPos = i3 + 2;
            i3++;
            break;
          case 105:
            if (a >= argLen)
              break;
            if (args[a] == null)
              break;
            if (lastPos < i3)
              str += f3.slice(lastPos, i3);
            str += Math.floor(Number(args[a]));
            lastPos = i3 + 2;
            i3++;
            break;
          case 79:
          case 111:
          case 106:
            if (a >= argLen)
              break;
            if (args[a] === undefined)
              break;
            if (lastPos < i3)
              str += f3.slice(lastPos, i3);
            var type47 = typeof args[a];
            if (type47 === "string") {
              str += "\'" + args[a] + "\'";
              lastPos = i3 + 2;
              i3++;
              break;
            }
            if (type47 === "function") {
              str += args[a].name || "<anonymous>";
              lastPos = i3 + 2;
              i3++;
              break;
            }
            str += ss(args[a]);
            lastPos = i3 + 2;
            i3++;
            break;
          case 115:
            if (a >= argLen)
              break;
            if (lastPos < i3)
              str += f3.slice(lastPos, i3);
            str += String(args[a]);
            lastPos = i3 + 2;
            i3++;
            break;
          case 37:
            if (lastPos < i3)
              str += f3.slice(lastPos, i3);
            str += "%";
            lastPos = i3 + 2;
            i3++;
            a--;
            break;
        }
        ++a;
      }
      ++i3;
    }
    if (lastPos === -1)
      return f3;
    else if (lastPos < flen) {
      str += f3.slice(lastPos);
    }
    return str;
  }
  module.exports = format;
});

// node_modules/atomic-sleep/index.js
var require_atomic_sleep = __commonJS((exports, module) => {
  if (typeof SharedArrayBuffer !== "undefined" && typeof Atomics !== "undefined") {
    let sleep = function(ms) {
      const valid = ms > 0 && ms < Infinity;
      if (valid === false) {
        if (typeof ms !== "number" && typeof ms !== "bigint") {
          throw TypeError("sleep: ms must be a number");
        }
        throw RangeError("sleep: ms must be a number that is greater than 0 but less than Infinity");
      }
      Atomics.wait(nil, 0, 0, Number(ms));
    };
    const nil = new Int32Array(new SharedArrayBuffer(4));
    module.exports = sleep;
  } else {
    let sleep = function(ms) {
      const valid = ms > 0 && ms < Infinity;
      if (valid === false) {
        if (typeof ms !== "number" && typeof ms !== "bigint") {
          throw TypeError("sleep: ms must be a number");
        }
        throw RangeError("sleep: ms must be a number that is greater than 0 but less than Infinity");
      }
      const target = Date.now() + Number(ms);
      while (target > Date.now()) {
      }
    };
    module.exports = sleep;
  }
});

// node_modules/sonic-boom/index.js
var require_sonic_boom = __commonJS((exports, module) => {
  function openFile(file, sonic) {
    sonic._opening = true;
    sonic._writing = true;
    sonic._asyncDrainScheduled = false;
    function fileOpened(err, fd) {
      if (err) {
        sonic._reopening = false;
        sonic._writing = false;
        sonic._opening = false;
        if (sonic.sync) {
          process.nextTick(() => {
            if (sonic.listenerCount("error") > 0) {
              sonic.emit("error", err);
            }
          });
        } else {
          sonic.emit("error", err);
        }
        return;
      }
      const reopening = sonic._reopening;
      sonic.fd = fd;
      sonic.file = file;
      sonic._reopening = false;
      sonic._opening = false;
      sonic._writing = false;
      if (sonic.sync) {
        process.nextTick(() => sonic.emit("ready"));
      } else {
        sonic.emit("ready");
      }
      if (sonic.destroyed) {
        return;
      }
      if (!sonic._writing && sonic._len > sonic.minLength || sonic._flushPending) {
        sonic._actualWrite();
      } else if (reopening) {
        process.nextTick(() => sonic.emit("drain"));
      }
    }
    const flags = sonic.append ? "a" : "w";
    const mode = sonic.mode;
    if (sonic.sync) {
      try {
        if (sonic.mkdir)
          fs2.mkdirSync(path2.dirname(file), { recursive: true });
        const fd = fs2.openSync(file, flags, mode);
        fileOpened(null, fd);
      } catch (err) {
        fileOpened(err);
        throw err;
      }
    } else if (sonic.mkdir) {
      fs2.mkdir(path2.dirname(file), { recursive: true }, (err) => {
        if (err)
          return fileOpened(err);
        fs2.open(file, flags, mode, fileOpened);
      });
    } else {
      fs2.open(file, flags, mode, fileOpened);
    }
  }
  function SonicBoom(opts) {
    if (!(this instanceof SonicBoom)) {
      return new SonicBoom(opts);
    }
    let { fd, dest, minLength, maxLength, maxWrite, periodicFlush, sync, append: append3 = true, mkdir, retryEAGAIN, fsync, contentMode, mode } = opts || {};
    fd = fd || dest;
    this._len = 0;
    this.fd = -1;
    this._bufs = [];
    this._lens = [];
    this._writing = false;
    this._ending = false;
    this._reopening = false;
    this._asyncDrainScheduled = false;
    this._flushPending = false;
    this._hwm = Math.max(minLength || 0, 16387);
    this.file = null;
    this.destroyed = false;
    this.minLength = minLength || 0;
    this.maxLength = maxLength || 0;
    this.maxWrite = maxWrite || MAX_WRITE;
    this._periodicFlush = periodicFlush || 0;
    this._periodicFlushTimer = undefined;
    this.sync = sync || false;
    this.writable = true;
    this._fsync = fsync || false;
    this.append = append3 || false;
    this.mode = mode;
    this.retryEAGAIN = retryEAGAIN || (() => true);
    this.mkdir = mkdir || false;
    let fsWriteSync;
    let fsWrite;
    if (contentMode === kContentModeBuffer) {
      this._writingBuf = kEmptyBuffer;
      this.write = writeBuffer;
      this.flush = flushBuffer;
      this.flushSync = flushBufferSync;
      this._actualWrite = actualWriteBuffer;
      fsWriteSync = () => fs2.writeSync(this.fd, this._writingBuf);
      fsWrite = () => fs2.write(this.fd, this._writingBuf, this.release);
    } else if (contentMode === undefined || contentMode === kContentModeUtf8) {
      this._writingBuf = "";
      this.write = write;
      this.flush = flush;
      this.flushSync = flushSync;
      this._actualWrite = actualWrite;
      fsWriteSync = () => fs2.writeSync(this.fd, this._writingBuf, "utf8");
      fsWrite = () => fs2.write(this.fd, this._writingBuf, "utf8", this.release);
    } else {
      throw new Error(`SonicBoom supports "${kContentModeUtf8}" and "${kContentModeBuffer}", but passed ${contentMode}`);
    }
    if (typeof fd === "number") {
      this.fd = fd;
      process.nextTick(() => this.emit("ready"));
    } else if (typeof fd === "string") {
      openFile(fd, this);
    } else {
      throw new Error("SonicBoom supports only file descriptors and files");
    }
    if (this.minLength >= this.maxWrite) {
      throw new Error(`minLength should be smaller than maxWrite (${this.maxWrite})`);
    }
    this.release = (err, n3) => {
      if (err) {
        if ((err.code === "EAGAIN" || err.code === "EBUSY") && this.retryEAGAIN(err, this._writingBuf.length, this._len - this._writingBuf.length)) {
          if (this.sync) {
            try {
              sleep(BUSY_WRITE_TIMEOUT);
              this.release(undefined, 0);
            } catch (err2) {
              this.release(err2);
            }
          } else {
            setTimeout(fsWrite, BUSY_WRITE_TIMEOUT);
          }
        } else {
          this._writing = false;
          this.emit("error", err);
        }
        return;
      }
      this.emit("write", n3);
      const releasedBufObj = releaseWritingBuf(this._writingBuf, this._len, n3);
      this._len = releasedBufObj.len;
      this._writingBuf = releasedBufObj.writingBuf;
      if (this._writingBuf.length) {
        if (!this.sync) {
          fsWrite();
          return;
        }
        try {
          do {
            const n4 = fsWriteSync();
            const releasedBufObj2 = releaseWritingBuf(this._writingBuf, this._len, n4);
            this._len = releasedBufObj2.len;
            this._writingBuf = releasedBufObj2.writingBuf;
          } while (this._writingBuf.length);
        } catch (err2) {
          this.release(err2);
          return;
        }
      }
      if (this._fsync) {
        fs2.fsyncSync(this.fd);
      }
      const len = this._len;
      if (this._reopening) {
        this._writing = false;
        this._reopening = false;
        this.reopen();
      } else if (len > this.minLength) {
        this._actualWrite();
      } else if (this._ending) {
        if (len > 0) {
          this._actualWrite();
        } else {
          this._writing = false;
          actualClose(this);
        }
      } else {
        this._writing = false;
        if (this.sync) {
          if (!this._asyncDrainScheduled) {
            this._asyncDrainScheduled = true;
            process.nextTick(emitDrain, this);
          }
        } else {
          this.emit("drain");
        }
      }
    };
    this.on("newListener", function(name) {
      if (name === "drain") {
        this._asyncDrainScheduled = false;
      }
    });
    if (this._periodicFlush !== 0) {
      this._periodicFlushTimer = setInterval(() => this.flush(null), this._periodicFlush);
      this._periodicFlushTimer.unref();
    }
  }
  function releaseWritingBuf(writingBuf, len, n3) {
    if (typeof writingBuf === "string" && Buffer.byteLength(writingBuf) !== n3) {
      n3 = Buffer.from(writingBuf).subarray(0, n3).toString().length;
    }
    len = Math.max(len - n3, 0);
    writingBuf = writingBuf.slice(n3);
    return { writingBuf, len };
  }
  function emitDrain(sonic) {
    const hasListeners = sonic.listenerCount("drain") > 0;
    if (!hasListeners)
      return;
    sonic._asyncDrainScheduled = false;
    sonic.emit("drain");
  }
  function mergeBuf(bufs, len) {
    if (bufs.length === 0) {
      return kEmptyBuffer;
    }
    if (bufs.length === 1) {
      return bufs[0];
    }
    return Buffer.concat(bufs, len);
  }
  function write(data2) {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    const len = this._len + data2.length;
    const bufs = this._bufs;
    if (this.maxLength && len > this.maxLength) {
      this.emit("drop", data2);
      return this._len < this._hwm;
    }
    if (bufs.length === 0 || bufs[bufs.length - 1].length + data2.length > this.maxWrite) {
      bufs.push("" + data2);
    } else {
      bufs[bufs.length - 1] += data2;
    }
    this._len = len;
    if (!this._writing && this._len >= this.minLength) {
      this._actualWrite();
    }
    return this._len < this._hwm;
  }
  function writeBuffer(data2) {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    const len = this._len + data2.length;
    const bufs = this._bufs;
    const lens = this._lens;
    if (this.maxLength && len > this.maxLength) {
      this.emit("drop", data2);
      return this._len < this._hwm;
    }
    if (bufs.length === 0 || lens[lens.length - 1] + data2.length > this.maxWrite) {
      bufs.push([data2]);
      lens.push(data2.length);
    } else {
      bufs[bufs.length - 1].push(data2);
      lens[lens.length - 1] += data2.length;
    }
    this._len = len;
    if (!this._writing && this._len >= this.minLength) {
      this._actualWrite();
    }
    return this._len < this._hwm;
  }
  function callFlushCallbackOnDrain(cb) {
    this._flushPending = true;
    const onDrain = () => {
      if (!this._fsync) {
        fs2.fsync(this.fd, (err) => {
          this._flushPending = false;
          cb(err);
        });
      } else {
        this._flushPending = false;
        cb();
      }
      this.off("error", onError);
    };
    const onError = (err) => {
      this._flushPending = false;
      cb(err);
      this.off("drain", onDrain);
    };
    this.once("drain", onDrain);
    this.once("error", onError);
  }
  function flush(cb) {
    if (cb != null && typeof cb !== "function") {
      throw new Error("flush cb must be a function");
    }
    if (this.destroyed) {
      const error22 = new Error("SonicBoom destroyed");
      if (cb) {
        cb(error22);
        return;
      }
      throw error22;
    }
    if (this.minLength <= 0) {
      cb?.();
      return;
    }
    if (cb) {
      callFlushCallbackOnDrain.call(this, cb);
    }
    if (this._writing) {
      return;
    }
    if (this._bufs.length === 0) {
      this._bufs.push("");
    }
    this._actualWrite();
  }
  function flushBuffer(cb) {
    if (cb != null && typeof cb !== "function") {
      throw new Error("flush cb must be a function");
    }
    if (this.destroyed) {
      const error22 = new Error("SonicBoom destroyed");
      if (cb) {
        cb(error22);
        return;
      }
      throw error22;
    }
    if (this.minLength <= 0) {
      cb?.();
      return;
    }
    if (cb) {
      callFlushCallbackOnDrain.call(this, cb);
    }
    if (this._writing) {
      return;
    }
    if (this._bufs.length === 0) {
      this._bufs.push([]);
      this._lens.push(0);
    }
    this._actualWrite();
  }
  function flushSync() {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    if (this.fd < 0) {
      throw new Error("sonic boom is not ready yet");
    }
    if (!this._writing && this._writingBuf.length > 0) {
      this._bufs.unshift(this._writingBuf);
      this._writingBuf = "";
    }
    let buf = "";
    while (this._bufs.length || buf) {
      if (buf.length <= 0) {
        buf = this._bufs[0];
      }
      try {
        const n3 = fs2.writeSync(this.fd, buf, "utf8");
        const releasedBufObj = releaseWritingBuf(buf, this._len, n3);
        buf = releasedBufObj.writingBuf;
        this._len = releasedBufObj.len;
        if (buf.length <= 0) {
          this._bufs.shift();
        }
      } catch (err) {
        const shouldRetry = err.code === "EAGAIN" || err.code === "EBUSY";
        if (shouldRetry && !this.retryEAGAIN(err, buf.length, this._len - buf.length)) {
          throw err;
        }
        sleep(BUSY_WRITE_TIMEOUT);
      }
    }
    try {
      fs2.fsyncSync(this.fd);
    } catch {
    }
  }
  function flushBufferSync() {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    if (this.fd < 0) {
      throw new Error("sonic boom is not ready yet");
    }
    if (!this._writing && this._writingBuf.length > 0) {
      this._bufs.unshift([this._writingBuf]);
      this._writingBuf = kEmptyBuffer;
    }
    let buf = kEmptyBuffer;
    while (this._bufs.length || buf.length) {
      if (buf.length <= 0) {
        buf = mergeBuf(this._bufs[0], this._lens[0]);
      }
      try {
        const n3 = fs2.writeSync(this.fd, buf);
        buf = buf.subarray(n3);
        this._len = Math.max(this._len - n3, 0);
        if (buf.length <= 0) {
          this._bufs.shift();
          this._lens.shift();
        }
      } catch (err) {
        const shouldRetry = err.code === "EAGAIN" || err.code === "EBUSY";
        if (shouldRetry && !this.retryEAGAIN(err, buf.length, this._len - buf.length)) {
          throw err;
        }
        sleep(BUSY_WRITE_TIMEOUT);
      }
    }
  }
  function actualWrite() {
    const release = this.release;
    this._writing = true;
    this._writingBuf = this._writingBuf || this._bufs.shift() || "";
    if (this.sync) {
      try {
        const written = fs2.writeSync(this.fd, this._writingBuf, "utf8");
        release(null, written);
      } catch (err) {
        release(err);
      }
    } else {
      fs2.write(this.fd, this._writingBuf, "utf8", release);
    }
  }
  function actualWriteBuffer() {
    const release = this.release;
    this._writing = true;
    this._writingBuf = this._writingBuf.length ? this._writingBuf : mergeBuf(this._bufs.shift(), this._lens.shift());
    if (this.sync) {
      try {
        const written = fs2.writeSync(this.fd, this._writingBuf);
        release(null, written);
      } catch (err) {
        release(err);
      }
    } else {
      if (kCopyBuffer) {
        this._writingBuf = Buffer.from(this._writingBuf);
      }
      fs2.write(this.fd, this._writingBuf, release);
    }
  }
  function actualClose(sonic) {
    if (sonic.fd === -1) {
      sonic.once("ready", actualClose.bind(null, sonic));
      return;
    }
    if (sonic._periodicFlushTimer !== undefined) {
      clearInterval(sonic._periodicFlushTimer);
    }
    sonic.destroyed = true;
    sonic._bufs = [];
    sonic._lens = [];
    fs2.fsync(sonic.fd, closeWrapped);
    function closeWrapped() {
      if (sonic.fd !== 1 && sonic.fd !== 2) {
        fs2.close(sonic.fd, done);
      } else {
        done();
      }
    }
    function done(err) {
      if (err) {
        sonic.emit("error", err);
        return;
      }
      if (sonic._ending && !sonic._writing) {
        sonic.emit("finish");
      }
      sonic.emit("close");
    }
  }
  var fs2 = import.meta.require("fs");
  var EventEmitter2 = import.meta.require("events");
  var inherits = import.meta.require("util").inherits;
  var path2 = import.meta.require("path");
  var sleep = require_atomic_sleep();
  var BUSY_WRITE_TIMEOUT = 100;
  var kEmptyBuffer = Buffer.allocUnsafe(0);
  var MAX_WRITE = 16 * 1024;
  var kContentModeBuffer = "buffer";
  var kContentModeUtf8 = "utf8";
  var [major, minor] = process.versions.node.split(".").map(Number);
  var kCopyBuffer = major >= 22 && minor >= 7;
  inherits(SonicBoom, EventEmitter2);
  SonicBoom.prototype.reopen = function(file) {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    if (this._opening) {
      this.once("ready", () => {
        this.reopen(file);
      });
      return;
    }
    if (this._ending) {
      return;
    }
    if (!this.file) {
      throw new Error("Unable to reopen a file descriptor, you must pass a file to SonicBoom");
    }
    if (file) {
      this.file = file;
    }
    this._reopening = true;
    if (this._writing) {
      return;
    }
    const fd = this.fd;
    this.once("ready", () => {
      if (fd !== this.fd) {
        fs2.close(fd, (err) => {
          if (err) {
            return this.emit("error", err);
          }
        });
      }
    });
    openFile(this.file, this);
  };
  SonicBoom.prototype.end = function() {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    if (this._opening) {
      this.once("ready", () => {
        this.end();
      });
      return;
    }
    if (this._ending) {
      return;
    }
    this._ending = true;
    if (this._writing) {
      return;
    }
    if (this._len > 0 && this.fd >= 0) {
      this._actualWrite();
    } else {
      actualClose(this);
    }
  };
  SonicBoom.prototype.destroy = function() {
    if (this.destroyed) {
      return;
    }
    actualClose(this);
  };
  SonicBoom.SonicBoom = SonicBoom;
  SonicBoom.default = SonicBoom;
  module.exports = SonicBoom;
});

// node_modules/on-exit-leak-free/index.js
var require_on_exit_leak_free = __commonJS((exports, module) => {
  function ensureRegistry() {
    if (registry7 === undefined) {
      registry7 = new FinalizationRegistry(clear);
    }
  }
  function install(event) {
    if (refs[event].length > 0) {
      return;
    }
    process.on(event, functions[event]);
  }
  function uninstall(event) {
    if (refs[event].length > 0) {
      return;
    }
    process.removeListener(event, functions[event]);
    if (refs.exit.length === 0 && refs.beforeExit.length === 0) {
      registry7 = undefined;
    }
  }
  function onExit() {
    callRefs("exit");
  }
  function onBeforeExit() {
    callRefs("beforeExit");
  }
  function callRefs(event) {
    for (const ref4 of refs[event]) {
      const obj = ref4.deref();
      const fn = ref4.fn;
      if (obj !== undefined) {
        fn(obj, event);
      }
    }
    refs[event] = [];
  }
  function clear(ref4) {
    for (const event of ["exit", "beforeExit"]) {
      const index2 = refs[event].indexOf(ref4);
      refs[event].splice(index2, index2 + 1);
      uninstall(event);
    }
  }
  function _register(event, obj, fn) {
    if (obj === undefined) {
      throw new Error("the object can\'t be undefined");
    }
    install(event);
    const ref4 = new WeakRef(obj);
    ref4.fn = fn;
    ensureRegistry();
    registry7.register(obj, ref4);
    refs[event].push(ref4);
  }
  function register(obj, fn) {
    _register("exit", obj, fn);
  }
  function registerBeforeExit(obj, fn) {
    _register("beforeExit", obj, fn);
  }
  function unregister(obj) {
    if (registry7 === undefined) {
      return;
    }
    registry7.unregister(obj);
    for (const event of ["exit", "beforeExit"]) {
      refs[event] = refs[event].filter((ref4) => {
        const _obj = ref4.deref();
        return _obj && _obj !== obj;
      });
      uninstall(event);
    }
  }
  var refs = {
    exit: [],
    beforeExit: []
  };
  var functions = {
    exit: onExit,
    beforeExit: onBeforeExit
  };
  var registry7;
  module.exports = {
    register,
    registerBeforeExit,
    unregister
  };
});

// node_modules/thread-stream/package.json
var require_package = __commonJS((exports, module) => {
  module.exports = {
    name: "thread-stream",
    version: "3.1.0",
    description: "A streaming way to send data to a Node.js Worker Thread",
    main: "index.js",
    types: "index.d.ts",
    dependencies: {
      "real-require": "^0.2.0"
    },
    devDependencies: {
      "@types/node": "^20.1.0",
      "@types/tap": "^15.0.0",
      "@yao-pkg/pkg": "^5.11.5",
      desm: "^1.3.0",
      fastbench: "^1.0.1",
      husky: "^9.0.6",
      "pino-elasticsearch": "^8.0.0",
      "sonic-boom": "^4.0.1",
      standard: "^17.0.0",
      tap: "^16.2.0",
      "ts-node": "^10.8.0",
      typescript: "^5.3.2",
      "why-is-node-running": "^2.2.2"
    },
    scripts: {
      build: "tsc --noEmit",
      test: "standard && npm run build && npm run transpile && tap \"test/**/*.test.*js\" && tap --ts test/*.test.*ts",
      "test:ci": "standard && npm run transpile && npm run test:ci:js && npm run test:ci:ts",
      "test:ci:js": "tap --no-check-coverage --timeout=120 --coverage-report=lcovonly \"test/**/*.test.*js\"",
      "test:ci:ts": "tap --ts --no-check-coverage --coverage-report=lcovonly \"test/**/*.test.*ts\"",
      "test:yarn": "npm run transpile && tap \"test/**/*.test.js\" --no-check-coverage",
      transpile: "sh ./test/ts/transpile.sh",
      prepare: "husky install"
    },
    standard: {
      ignore: [
        "test/ts/**/*",
        "test/syntax-error.mjs"
      ]
    },
    repository: {
      type: "git",
      url: "git+https://github.com/mcollina/thread-stream.git"
    },
    keywords: [
      "worker",
      "thread",
      "threads",
      "stream"
    ],
    author: "Matteo Collina <hello@matteocollina.com>",
    license: "MIT",
    bugs: {
      url: "https://github.com/mcollina/thread-stream/issues"
    },
    homepage: "https://github.com/mcollina/thread-stream#readme"
  };
});

// node_modules/thread-stream/lib/wait.js
var require_wait = __commonJS((exports, module) => {
  function wait(state, index2, expected, timeout, done) {
    const max = Date.now() + timeout;
    let current = Atomics.load(state, index2);
    if (current === expected) {
      done(null, "ok");
      return;
    }
    let prior = current;
    const check11 = (backoff) => {
      if (Date.now() > max) {
        done(null, "timed-out");
      } else {
        setTimeout(() => {
          prior = current;
          current = Atomics.load(state, index2);
          if (current === prior) {
            check11(backoff >= MAX_TIMEOUT ? MAX_TIMEOUT : backoff * 2);
          } else {
            if (current === expected)
              done(null, "ok");
            else
              done(null, "not-equal");
          }
        }, backoff);
      }
    };
    check11(1);
  }
  function waitDiff(state, index2, expected, timeout, done) {
    const max = Date.now() + timeout;
    let current = Atomics.load(state, index2);
    if (current !== expected) {
      done(null, "ok");
      return;
    }
    const check11 = (backoff) => {
      if (Date.now() > max) {
        done(null, "timed-out");
      } else {
        setTimeout(() => {
          current = Atomics.load(state, index2);
          if (current !== expected) {
            done(null, "ok");
          } else {
            check11(backoff >= MAX_TIMEOUT ? MAX_TIMEOUT : backoff * 2);
          }
        }, backoff);
      }
    };
    check11(1);
  }
  var MAX_TIMEOUT = 1000;
  module.exports = { wait, waitDiff };
});

// node_modules/thread-stream/lib/indexes.js
var require_indexes = __commonJS((exports, module) => {
  var WRITE_INDEX = 4;
  var READ_INDEX = 8;
  module.exports = {
    WRITE_INDEX,
    READ_INDEX
  };
});

// node_modules/thread-stream/index.js
var require_thread_stream = __commonJS((exports, module) => {
  function createWorker(stream2, opts) {
    const { filename, workerData } = opts;
    const bundlerOverrides = "__bundlerPathsOverrides" in globalThis ? globalThis.__bundlerPathsOverrides : {};
    const toExecute = bundlerOverrides["thread-stream-worker"] || join3(__dirname, "lib", "worker.js");
    const worker = new Worker(toExecute, {
      ...opts.workerOpts,
      trackUnmanagedFds: false,
      workerData: {
        filename: filename.indexOf("file://") === 0 ? filename : pathToFileURL(filename).href,
        dataBuf: stream2[kImpl].dataBuf,
        stateBuf: stream2[kImpl].stateBuf,
        workerData: {
          $context: {
            threadStreamVersion: version
          },
          ...workerData
        }
      }
    });
    worker.stream = new FakeWeakRef(stream2);
    worker.on("message", onWorkerMessage);
    worker.on("exit", onWorkerExit);
    registry7.register(stream2, worker);
    return worker;
  }
  function drain(stream2) {
    assert(!stream2[kImpl].sync);
    if (stream2[kImpl].needDrain) {
      stream2[kImpl].needDrain = false;
      stream2.emit("drain");
    }
  }
  function nextFlush(stream2) {
    const writeIndex = Atomics.load(stream2[kImpl].state, WRITE_INDEX);
    let leftover = stream2[kImpl].data.length - writeIndex;
    if (leftover > 0) {
      if (stream2[kImpl].buf.length === 0) {
        stream2[kImpl].flushing = false;
        if (stream2[kImpl].ending) {
          end2(stream2);
        } else if (stream2[kImpl].needDrain) {
          process.nextTick(drain, stream2);
        }
        return;
      }
      let toWrite = stream2[kImpl].buf.slice(0, leftover);
      let toWriteBytes = Buffer.byteLength(toWrite);
      if (toWriteBytes <= leftover) {
        stream2[kImpl].buf = stream2[kImpl].buf.slice(leftover);
        write(stream2, toWrite, nextFlush.bind(null, stream2));
      } else {
        stream2.flush(() => {
          if (stream2.destroyed) {
            return;
          }
          Atomics.store(stream2[kImpl].state, READ_INDEX, 0);
          Atomics.store(stream2[kImpl].state, WRITE_INDEX, 0);
          while (toWriteBytes > stream2[kImpl].data.length) {
            leftover = leftover / 2;
            toWrite = stream2[kImpl].buf.slice(0, leftover);
            toWriteBytes = Buffer.byteLength(toWrite);
          }
          stream2[kImpl].buf = stream2[kImpl].buf.slice(leftover);
          write(stream2, toWrite, nextFlush.bind(null, stream2));
        });
      }
    } else if (leftover === 0) {
      if (writeIndex === 0 && stream2[kImpl].buf.length === 0) {
        return;
      }
      stream2.flush(() => {
        Atomics.store(stream2[kImpl].state, READ_INDEX, 0);
        Atomics.store(stream2[kImpl].state, WRITE_INDEX, 0);
        nextFlush(stream2);
      });
    } else {
      destroy(stream2, new Error("overwritten"));
    }
  }
  function onWorkerMessage(msg) {
    const stream2 = this.stream.deref();
    if (stream2 === undefined) {
      this.exited = true;
      this.terminate();
      return;
    }
    switch (msg.code) {
      case "READY":
        this.stream = new WeakRef2(stream2);
        stream2.flush(() => {
          stream2[kImpl].ready = true;
          stream2.emit("ready");
        });
        break;
      case "ERROR":
        destroy(stream2, msg.err);
        break;
      case "EVENT":
        if (Array.isArray(msg.args)) {
          stream2.emit(msg.name, ...msg.args);
        } else {
          stream2.emit(msg.name, msg.args);
        }
        break;
      case "WARNING":
        process.emitWarning(msg.err);
        break;
      default:
        destroy(stream2, new Error("this should not happen: " + msg.code));
    }
  }
  function onWorkerExit(code) {
    const stream2 = this.stream.deref();
    if (stream2 === undefined) {
      return;
    }
    registry7.unregister(stream2);
    stream2.worker.exited = true;
    stream2.worker.off("exit", onWorkerExit);
    destroy(stream2, code !== 0 ? new Error("the worker thread exited") : null);
  }
  function error22(stream2, err) {
    setImmediate(() => {
      stream2.emit("error", err);
    });
  }
  function destroy(stream2, err) {
    if (stream2[kImpl].destroyed) {
      return;
    }
    stream2[kImpl].destroyed = true;
    if (err) {
      stream2[kImpl].errored = err;
      error22(stream2, err);
    }
    if (!stream2.worker.exited) {
      stream2.worker.terminate().catch(() => {
      }).then(() => {
        stream2[kImpl].closed = true;
        stream2.emit("close");
      });
    } else {
      setImmediate(() => {
        stream2[kImpl].closed = true;
        stream2.emit("close");
      });
    }
  }
  function write(stream2, data2, cb) {
    const current = Atomics.load(stream2[kImpl].state, WRITE_INDEX);
    const length = Buffer.byteLength(data2);
    stream2[kImpl].data.write(data2, current);
    Atomics.store(stream2[kImpl].state, WRITE_INDEX, current + length);
    Atomics.notify(stream2[kImpl].state, WRITE_INDEX);
    cb();
    return true;
  }
  function end2(stream2) {
    if (stream2[kImpl].ended || !stream2[kImpl].ending || stream2[kImpl].flushing) {
      return;
    }
    stream2[kImpl].ended = true;
    try {
      stream2.flushSync();
      let readIndex = Atomics.load(stream2[kImpl].state, READ_INDEX);
      Atomics.store(stream2[kImpl].state, WRITE_INDEX, -1);
      Atomics.notify(stream2[kImpl].state, WRITE_INDEX);
      let spins = 0;
      while (readIndex !== -1) {
        Atomics.wait(stream2[kImpl].state, READ_INDEX, readIndex, 1000);
        readIndex = Atomics.load(stream2[kImpl].state, READ_INDEX);
        if (readIndex === -2) {
          destroy(stream2, new Error("end() failed"));
          return;
        }
        if (++spins === 10) {
          destroy(stream2, new Error("end() took too long (10s)"));
          return;
        }
      }
      process.nextTick(() => {
        stream2[kImpl].finished = true;
        stream2.emit("finish");
      });
    } catch (err) {
      destroy(stream2, err);
    }
  }
  function writeSync(stream2) {
    const cb = () => {
      if (stream2[kImpl].ending) {
        end2(stream2);
      } else if (stream2[kImpl].needDrain) {
        process.nextTick(drain, stream2);
      }
    };
    stream2[kImpl].flushing = false;
    while (stream2[kImpl].buf.length !== 0) {
      const writeIndex = Atomics.load(stream2[kImpl].state, WRITE_INDEX);
      let leftover = stream2[kImpl].data.length - writeIndex;
      if (leftover === 0) {
        flushSync(stream2);
        Atomics.store(stream2[kImpl].state, READ_INDEX, 0);
        Atomics.store(stream2[kImpl].state, WRITE_INDEX, 0);
        continue;
      } else if (leftover < 0) {
        throw new Error("overwritten");
      }
      let toWrite = stream2[kImpl].buf.slice(0, leftover);
      let toWriteBytes = Buffer.byteLength(toWrite);
      if (toWriteBytes <= leftover) {
        stream2[kImpl].buf = stream2[kImpl].buf.slice(leftover);
        write(stream2, toWrite, cb);
      } else {
        flushSync(stream2);
        Atomics.store(stream2[kImpl].state, READ_INDEX, 0);
        Atomics.store(stream2[kImpl].state, WRITE_INDEX, 0);
        while (toWriteBytes > stream2[kImpl].buf.length) {
          leftover = leftover / 2;
          toWrite = stream2[kImpl].buf.slice(0, leftover);
          toWriteBytes = Buffer.byteLength(toWrite);
        }
        stream2[kImpl].buf = stream2[kImpl].buf.slice(leftover);
        write(stream2, toWrite, cb);
      }
    }
  }
  function flushSync(stream2) {
    if (stream2[kImpl].flushing) {
      throw new Error("unable to flush while flushing");
    }
    const writeIndex = Atomics.load(stream2[kImpl].state, WRITE_INDEX);
    let spins = 0;
    while (true) {
      const readIndex = Atomics.load(stream2[kImpl].state, READ_INDEX);
      if (readIndex === -2) {
        throw Error("_flushSync failed");
      }
      if (readIndex !== writeIndex) {
        Atomics.wait(stream2[kImpl].state, READ_INDEX, readIndex, 1000);
      } else {
        break;
      }
      if (++spins === 10) {
        throw new Error("_flushSync took too long (10s)");
      }
    }
  }
  var __dirname = "C:\\Users\\User\\Desktop\\project\\my-app\\app\\node_modules\\thread-stream";
  var { version } = require_package();
  var { EventEmitter: EventEmitter2 } = import.meta.require("events");
  var { Worker } = import.meta.require("worker_threads");
  var { join: join3 } = import.meta.require("path");
  var { pathToFileURL } = import.meta.require("url");
  var { wait } = require_wait();
  var {
    WRITE_INDEX,
    READ_INDEX
  } = require_indexes();
  var buffer = import.meta.require("buffer");
  var assert = import.meta.require("assert");
  var kImpl = Symbol("kImpl");
  var MAX_STRING = buffer.constants.MAX_STRING_LENGTH;

  class FakeWeakRef {
    constructor(value15) {
      this._value = value15;
    }
    deref() {
      return this._value;
    }
  }

  class FakeFinalizationRegistry {
    register() {
    }
    unregister() {
    }
  }
  var FinalizationRegistry2 = process.env.NODE_V8_COVERAGE ? FakeFinalizationRegistry : global.FinalizationRegistry || FakeFinalizationRegistry;
  var WeakRef2 = process.env.NODE_V8_COVERAGE ? FakeWeakRef : global.WeakRef || FakeWeakRef;
  var registry7 = new FinalizationRegistry2((worker) => {
    if (worker.exited) {
      return;
    }
    worker.terminate();
  });

  class ThreadStream extends EventEmitter2 {
    constructor(opts = {}) {
      super();
      if (opts.bufferSize < 4) {
        throw new Error("bufferSize must at least fit a 4-byte utf-8 char");
      }
      this[kImpl] = {};
      this[kImpl].stateBuf = new SharedArrayBuffer(128);
      this[kImpl].state = new Int32Array(this[kImpl].stateBuf);
      this[kImpl].dataBuf = new SharedArrayBuffer(opts.bufferSize || 4 * 1024 * 1024);
      this[kImpl].data = Buffer.from(this[kImpl].dataBuf);
      this[kImpl].sync = opts.sync || false;
      this[kImpl].ending = false;
      this[kImpl].ended = false;
      this[kImpl].needDrain = false;
      this[kImpl].destroyed = false;
      this[kImpl].flushing = false;
      this[kImpl].ready = false;
      this[kImpl].finished = false;
      this[kImpl].errored = null;
      this[kImpl].closed = false;
      this[kImpl].buf = "";
      this.worker = createWorker(this, opts);
      this.on("message", (message, transferList) => {
        this.worker.postMessage(message, transferList);
      });
    }
    write(data2) {
      if (this[kImpl].destroyed) {
        error22(this, new Error("the worker has exited"));
        return false;
      }
      if (this[kImpl].ending) {
        error22(this, new Error("the worker is ending"));
        return false;
      }
      if (this[kImpl].flushing && this[kImpl].buf.length + data2.length >= MAX_STRING) {
        try {
          writeSync(this);
          this[kImpl].flushing = true;
        } catch (err) {
          destroy(this, err);
          return false;
        }
      }
      this[kImpl].buf += data2;
      if (this[kImpl].sync) {
        try {
          writeSync(this);
          return true;
        } catch (err) {
          destroy(this, err);
          return false;
        }
      }
      if (!this[kImpl].flushing) {
        this[kImpl].flushing = true;
        setImmediate(nextFlush, this);
      }
      this[kImpl].needDrain = this[kImpl].data.length - this[kImpl].buf.length - Atomics.load(this[kImpl].state, WRITE_INDEX) <= 0;
      return !this[kImpl].needDrain;
    }
    end() {
      if (this[kImpl].destroyed) {
        return;
      }
      this[kImpl].ending = true;
      end2(this);
    }
    flush(cb) {
      if (this[kImpl].destroyed) {
        if (typeof cb === "function") {
          process.nextTick(cb, new Error("the worker has exited"));
        }
        return;
      }
      const writeIndex = Atomics.load(this[kImpl].state, WRITE_INDEX);
      wait(this[kImpl].state, READ_INDEX, writeIndex, Infinity, (err, res) => {
        if (err) {
          destroy(this, err);
          process.nextTick(cb, err);
          return;
        }
        if (res === "not-equal") {
          this.flush(cb);
          return;
        }
        process.nextTick(cb);
      });
    }
    flushSync() {
      if (this[kImpl].destroyed) {
        return;
      }
      writeSync(this);
      flushSync(this);
    }
    unref() {
      this.worker.unref();
    }
    ref() {
      this.worker.ref();
    }
    get ready() {
      return this[kImpl].ready;
    }
    get destroyed() {
      return this[kImpl].destroyed;
    }
    get closed() {
      return this[kImpl].closed;
    }
    get writable() {
      return !this[kImpl].destroyed && !this[kImpl].ending;
    }
    get writableEnded() {
      return this[kImpl].ending;
    }
    get writableFinished() {
      return this[kImpl].finished;
    }
    get writableNeedDrain() {
      return this[kImpl].needDrain;
    }
    get writableObjectMode() {
      return false;
    }
    get writableErrored() {
      return this[kImpl].errored;
    }
  }
  module.exports = ThreadStream;
});

// node_modules/pino/lib/transport.js
var require_transport = __commonJS((exports, module) => {
  function setupOnExit(stream2) {
    onExit.register(stream2, autoEnd);
    onExit.registerBeforeExit(stream2, flush);
    stream2.on("close", function() {
      onExit.unregister(stream2);
    });
  }
  function buildStream(filename, workerData, workerOpts) {
    const stream2 = new ThreadStream({
      filename,
      workerData,
      workerOpts
    });
    stream2.on("ready", onReady);
    stream2.on("close", function() {
      process.removeListener("exit", onExit2);
    });
    process.on("exit", onExit2);
    function onReady() {
      process.removeListener("exit", onExit2);
      stream2.unref();
      if (workerOpts.autoEnd !== false) {
        setupOnExit(stream2);
      }
    }
    function onExit2() {
      if (stream2.closed) {
        return;
      }
      stream2.flushSync();
      sleep(100);
      stream2.end();
    }
    return stream2;
  }
  function autoEnd(stream2) {
    stream2.ref();
    stream2.flushSync();
    stream2.end();
    stream2.once("close", function() {
      stream2.unref();
    });
  }
  function flush(stream2) {
    stream2.flushSync();
  }
  function transport(fullOptions) {
    const { pipeline, targets, levels, dedupe, worker = {}, caller = getCallers() } = fullOptions;
    const options4 = {
      ...fullOptions.options
    };
    const callers = typeof caller === "string" ? [caller] : caller;
    const bundlerOverrides = "__bundlerPathsOverrides" in globalThis ? globalThis.__bundlerPathsOverrides : {};
    let target = fullOptions.target;
    if (target && targets) {
      throw new Error("only one of target or targets can be specified");
    }
    if (targets) {
      target = bundlerOverrides["pino-worker"] || join3(__dirname, "worker.js");
      options4.targets = targets.filter((dest) => dest.target).map((dest) => {
        return {
          ...dest,
          target: fixTarget(dest.target)
        };
      });
      options4.pipelines = targets.filter((dest) => dest.pipeline).map((dest) => {
        return dest.pipeline.map((t3) => {
          return {
            ...t3,
            level: dest.level,
            target: fixTarget(t3.target)
          };
        });
      });
    } else if (pipeline) {
      target = bundlerOverrides["pino-worker"] || join3(__dirname, "worker.js");
      options4.pipelines = [pipeline.map((dest) => {
        return {
          ...dest,
          target: fixTarget(dest.target)
        };
      })];
    }
    if (levels) {
      options4.levels = levels;
    }
    if (dedupe) {
      options4.dedupe = dedupe;
    }
    options4.pinoWillSendConfig = true;
    return buildStream(fixTarget(target), options4, worker);
    function fixTarget(origin) {
      origin = bundlerOverrides[origin] || origin;
      if (isAbsolute(origin) || origin.indexOf("file://") === 0) {
        return origin;
      }
      if (origin === "pino/file") {
        return join3(__dirname, "..", "file.js");
      }
      let fixTarget2;
      for (const filePath of callers) {
        try {
          const context = filePath === "node:repl" ? process.cwd() + sep2 : filePath;
          fixTarget2 = createRequire(context).resolve(origin);
          break;
        } catch (err) {
          continue;
        }
      }
      if (!fixTarget2) {
        throw new Error(`unable to determine transport target for "${origin}"`);
      }
      return fixTarget2;
    }
  }
  var __dirname = "C:\\Users\\User\\Desktop\\project\\my-app\\app\\node_modules\\pino\\lib";
  var { createRequire } = import.meta.require("module");
  var getCallers = require_caller();
  var { join: join3, isAbsolute, sep: sep2 } = import.meta.require("path");
  var sleep = require_atomic_sleep();
  var onExit = require_on_exit_leak_free();
  var ThreadStream = require_thread_stream();
  module.exports = transport;
});

// node_modules/pino/lib/tools.js
var require_tools = __commonJS((exports, module) => {
  function noop() {
  }
  function genLog(level, hook) {
    if (!hook)
      return LOG;
    return function hookWrappedLog(...args) {
      hook.call(this, args, LOG, level);
    };
    function LOG(o2, ...n3) {
      if (typeof o2 === "object") {
        let msg = o2;
        if (o2 !== null) {
          if (o2.method && o2.headers && o2.socket) {
            o2 = mapHttpRequest(o2);
          } else if (typeof o2.setHeader === "function") {
            o2 = mapHttpResponse(o2);
          }
        }
        let formatParams;
        if (msg === null && n3.length === 0) {
          formatParams = [null];
        } else {
          msg = n3.shift();
          formatParams = n3;
        }
        if (typeof this[msgPrefixSym] === "string" && msg !== undefined && msg !== null) {
          msg = this[msgPrefixSym] + msg;
        }
        this[writeSym](o2, format(msg, formatParams, this[formatOptsSym]), level);
      } else {
        let msg = o2 === undefined ? n3.shift() : o2;
        if (typeof this[msgPrefixSym] === "string" && msg !== undefined && msg !== null) {
          msg = this[msgPrefixSym] + msg;
        }
        this[writeSym](null, format(msg, n3, this[formatOptsSym]), level);
      }
    }
  }
  function asString(str) {
    let result = "";
    let last3 = 0;
    let found = false;
    let point = 255;
    const l = str.length;
    if (l > 100) {
      return JSON.stringify(str);
    }
    for (var i3 = 0;i3 < l && point >= 32; i3++) {
      point = str.charCodeAt(i3);
      if (point === 34 || point === 92) {
        result += str.slice(last3, i3) + "\\";
        last3 = i3;
        found = true;
      }
    }
    if (!found) {
      result = str;
    } else {
      result += str.slice(last3);
    }
    return point < 32 ? JSON.stringify(str) : '"' + result + '"';
  }
  function asJson(obj, msg, num, time) {
    const stringify5 = this[stringifySym];
    const stringifySafe = this[stringifySafeSym];
    const stringifiers = this[stringifiersSym];
    const end2 = this[endSym];
    const chindings = this[chindingsSym];
    const serializers = this[serializersSym];
    const formatters = this[formattersSym];
    const messageKey = this[messageKeySym];
    const errorKey = this[errorKeySym];
    let data2 = this[lsCacheSym][num] + time;
    data2 = data2 + chindings;
    let value15;
    if (formatters.log) {
      obj = formatters.log(obj);
    }
    const wildcardStringifier = stringifiers[wildcardFirstSym];
    let propStr = "";
    for (const key in obj) {
      value15 = obj[key];
      if (Object.prototype.hasOwnProperty.call(obj, key) && value15 !== undefined) {
        if (serializers[key]) {
          value15 = serializers[key](value15);
        } else if (key === errorKey && serializers.err) {
          value15 = serializers.err(value15);
        }
        const stringifier = stringifiers[key] || wildcardStringifier;
        switch (typeof value15) {
          case "undefined":
          case "function":
            continue;
          case "number":
            if (Number.isFinite(value15) === false) {
              value15 = null;
            }
          case "boolean":
            if (stringifier)
              value15 = stringifier(value15);
            break;
          case "string":
            value15 = (stringifier || asString)(value15);
            break;
          default:
            value15 = (stringifier || stringify5)(value15, stringifySafe);
        }
        if (value15 === undefined)
          continue;
        const strKey = asString(key);
        propStr += "," + strKey + ":" + value15;
      }
    }
    let msgStr = "";
    if (msg !== undefined) {
      value15 = serializers[messageKey] ? serializers[messageKey](msg) : msg;
      const stringifier = stringifiers[messageKey] || wildcardStringifier;
      switch (typeof value15) {
        case "function":
          break;
        case "number":
          if (Number.isFinite(value15) === false) {
            value15 = null;
          }
        case "boolean":
          if (stringifier)
            value15 = stringifier(value15);
          msgStr = ',"' + messageKey + '":' + value15;
          break;
        case "string":
          value15 = (stringifier || asString)(value15);
          msgStr = ',"' + messageKey + '":' + value15;
          break;
        default:
          value15 = (stringifier || stringify5)(value15, stringifySafe);
          msgStr = ',"' + messageKey + '":' + value15;
      }
    }
    if (this[nestedKeySym] && propStr) {
      return data2 + this[nestedKeyStrSym] + propStr.slice(1) + "}" + msgStr + end2;
    } else {
      return data2 + propStr + msgStr + end2;
    }
  }
  function asChindings(instance, bindings) {
    let value15;
    let data2 = instance[chindingsSym];
    const stringify5 = instance[stringifySym];
    const stringifySafe = instance[stringifySafeSym];
    const stringifiers = instance[stringifiersSym];
    const wildcardStringifier = stringifiers[wildcardFirstSym];
    const serializers = instance[serializersSym];
    const formatter = instance[formattersSym].bindings;
    bindings = formatter(bindings);
    for (const key in bindings) {
      value15 = bindings[key];
      const valid = key !== "level" && key !== "serializers" && key !== "formatters" && key !== "customLevels" && bindings.hasOwnProperty(key) && value15 !== undefined;
      if (valid === true) {
        value15 = serializers[key] ? serializers[key](value15) : value15;
        value15 = (stringifiers[key] || wildcardStringifier || stringify5)(value15, stringifySafe);
        if (value15 === undefined)
          continue;
        data2 += ',"' + key + '":' + value15;
      }
    }
    return data2;
  }
  function hasBeenTampered(stream2) {
    return stream2.write !== stream2.constructor.prototype.write;
  }
  function buildSafeSonicBoom(opts) {
    const stream2 = new SonicBoom(opts);
    stream2.on("error", filterBrokenPipe);
    if (!hasNodeCodeCoverage && !opts.sync && isMainThread) {
      onExit.register(stream2, autoEnd);
      stream2.on("close", function() {
        onExit.unregister(stream2);
      });
    }
    return stream2;
    function filterBrokenPipe(err) {
      if (err.code === "EPIPE") {
        stream2.write = noop;
        stream2.end = noop;
        stream2.flushSync = noop;
        stream2.destroy = noop;
        return;
      }
      stream2.removeListener("error", filterBrokenPipe);
      stream2.emit("error", err);
    }
  }
  function autoEnd(stream2, eventName) {
    if (stream2.destroyed) {
      return;
    }
    if (eventName === "beforeExit") {
      stream2.flush();
      stream2.on("drain", function() {
        stream2.end();
      });
    } else {
      stream2.flushSync();
    }
  }
  function createArgsNormalizer(defaultOptions2) {
    return function normalizeArgs(instance, caller, opts = {}, stream2) {
      if (typeof opts === "string") {
        stream2 = buildSafeSonicBoom({ dest: opts });
        opts = {};
      } else if (typeof stream2 === "string") {
        if (opts && opts.transport) {
          throw Error("only one of option.transport or stream can be specified");
        }
        stream2 = buildSafeSonicBoom({ dest: stream2 });
      } else if (opts instanceof SonicBoom || opts.writable || opts._writableState) {
        stream2 = opts;
        opts = {};
      } else if (opts.transport) {
        if (opts.transport instanceof SonicBoom || opts.transport.writable || opts.transport._writableState) {
          throw Error("option.transport do not allow stream, please pass to option directly. e.g. pino(transport)");
        }
        if (opts.transport.targets && opts.transport.targets.length && opts.formatters && typeof opts.formatters.level === "function") {
          throw Error("option.transport.targets do not allow custom level formatters");
        }
        let customLevels;
        if (opts.customLevels) {
          customLevels = opts.useOnlyCustomLevels ? opts.customLevels : Object.assign({}, opts.levels, opts.customLevels);
        }
        stream2 = transport({ caller, ...opts.transport, levels: customLevels });
      }
      opts = Object.assign({}, defaultOptions2, opts);
      opts.serializers = Object.assign({}, defaultOptions2.serializers, opts.serializers);
      opts.formatters = Object.assign({}, defaultOptions2.formatters, opts.formatters);
      if (opts.prettyPrint) {
        throw new Error("prettyPrint option is no longer supported, see the pino-pretty package (https://github.com/pinojs/pino-pretty)");
      }
      const { enabled, onChild } = opts;
      if (enabled === false)
        opts.level = "silent";
      if (!onChild)
        opts.onChild = noop;
      if (!stream2) {
        if (!hasBeenTampered(process.stdout)) {
          stream2 = buildSafeSonicBoom({ fd: process.stdout.fd || 1 });
        } else {
          stream2 = process.stdout;
        }
      }
      return { opts, stream: stream2 };
    };
  }
  function stringify4(obj, stringifySafeFn) {
    try {
      return JSON.stringify(obj);
    } catch (_) {
      try {
        const stringify5 = stringifySafeFn || this[stringifySafeSym];
        return stringify5(obj);
      } catch (_4) {
        return '"[unable to serialize, circular reference is too complex to analyze]"';
      }
    }
  }
  function buildFormatters(level, bindings, log) {
    return {
      level,
      bindings,
      log
    };
  }
  function normalizeDestFileDescriptor(destination) {
    const fd = Number(destination);
    if (typeof destination === "string" && Number.isFinite(fd)) {
      return fd;
    }
    if (destination === undefined) {
      return 1;
    }
    return destination;
  }
  var format = require_quick_format_unescaped();
  var { mapHttpRequest, mapHttpResponse } = require_pino_std_serializers();
  var SonicBoom = require_sonic_boom();
  var onExit = require_on_exit_leak_free();
  var {
    lsCacheSym,
    chindingsSym,
    writeSym,
    serializersSym,
    formatOptsSym,
    endSym,
    stringifiersSym,
    stringifySym,
    stringifySafeSym,
    wildcardFirstSym,
    nestedKeySym,
    formattersSym,
    messageKeySym,
    errorKeySym,
    nestedKeyStrSym,
    msgPrefixSym
  } = require_symbols();
  var { isMainThread } = import.meta.require("worker_threads");
  var transport = require_transport();
  var hasNodeCodeCoverage = process.env.NODE_V8_COVERAGE || process.env.V8_COVERAGE;
  module.exports = {
    noop,
    buildSafeSonicBoom,
    asChindings,
    asJson,
    genLog,
    createArgsNormalizer,
    stringify: stringify4,
    buildFormatters,
    normalizeDestFileDescriptor
  };
});

// node_modules/pino/lib/constants.js
var require_constants = __commonJS((exports, module) => {
  var DEFAULT_LEVELS = {
    trace: 10,
    debug: 20,
    info: 30,
    warn: 40,
    error: 50,
    fatal: 60
  };
  var SORTING_ORDER = {
    ASC: "ASC",
    DESC: "DESC"
  };
  module.exports = {
    DEFAULT_LEVELS,
    SORTING_ORDER
  };
});

// node_modules/pino/lib/levels.js
var require_levels = __commonJS((exports, module) => {
  function genLsCache(instance) {
    const formatter = instance[formattersSym].level;
    const { labels } = instance.levels;
    const cache = {};
    for (const label in labels) {
      const level = formatter(labels[label], Number(label));
      cache[label] = JSON.stringify(level).slice(0, -1);
    }
    instance[lsCacheSym] = cache;
    return instance;
  }
  function isStandardLevel(level, useOnlyCustomLevels) {
    if (useOnlyCustomLevels) {
      return false;
    }
    switch (level) {
      case "fatal":
      case "error":
      case "warn":
      case "info":
      case "debug":
      case "trace":
        return true;
      default:
        return false;
    }
  }
  function setLevel(level) {
    const { labels, values } = this.levels;
    if (typeof level === "number") {
      if (labels[level] === undefined)
        throw Error("unknown level value" + level);
      level = labels[level];
    }
    if (values[level] === undefined)
      throw Error("unknown level " + level);
    const preLevelVal = this[levelValSym];
    const levelVal = this[levelValSym] = values[level];
    const useOnlyCustomLevelsVal = this[useOnlyCustomLevelsSym];
    const levelComparison = this[levelCompSym];
    const hook = this[hooksSym].logMethod;
    for (const key in values) {
      if (levelComparison(values[key], levelVal) === false) {
        this[key] = noop;
        continue;
      }
      this[key] = isStandardLevel(key, useOnlyCustomLevelsVal) ? levelMethods[key](hook) : genLog(values[key], hook);
    }
    this.emit("level-change", level, levelVal, labels[preLevelVal], preLevelVal, this);
  }
  function getLevel(level) {
    const { levels, levelVal } = this;
    return levels && levels.labels ? levels.labels[levelVal] : "";
  }
  function isLevelEnabled(logLevel) {
    const { values } = this.levels;
    const logLevelVal = values[logLevel];
    return logLevelVal !== undefined && this[levelCompSym](logLevelVal, this[levelValSym]);
  }
  function compareLevel(direction, current, expected) {
    if (direction === SORTING_ORDER.DESC) {
      return current <= expected;
    }
    return current >= expected;
  }
  function genLevelComparison(levelComparison) {
    if (typeof levelComparison === "string") {
      return compareLevel.bind(null, levelComparison);
    }
    return levelComparison;
  }
  function mappings(customLevels = null, useOnlyCustomLevels = false) {
    const customNums = customLevels ? Object.keys(customLevels).reduce((o2, k) => {
      o2[customLevels[k]] = k;
      return o2;
    }, {}) : null;
    const labels = Object.assign(Object.create(Object.prototype, { Infinity: { value: "silent" } }), useOnlyCustomLevels ? null : nums, customNums);
    const values = Object.assign(Object.create(Object.prototype, { silent: { value: Infinity } }), useOnlyCustomLevels ? null : DEFAULT_LEVELS, customLevels);
    return { labels, values };
  }
  function assertDefaultLevelFound(defaultLevel, customLevels, useOnlyCustomLevels) {
    if (typeof defaultLevel === "number") {
      const values = [].concat(Object.keys(customLevels || {}).map((key) => customLevels[key]), useOnlyCustomLevels ? [] : Object.keys(nums).map((level) => +level), Infinity);
      if (!values.includes(defaultLevel)) {
        throw Error(`default level:${defaultLevel} must be included in custom levels`);
      }
      return;
    }
    const labels = Object.assign(Object.create(Object.prototype, { silent: { value: Infinity } }), useOnlyCustomLevels ? null : DEFAULT_LEVELS, customLevels);
    if (!(defaultLevel in labels)) {
      throw Error(`default level:${defaultLevel} must be included in custom levels`);
    }
  }
  function assertNoLevelCollisions(levels, customLevels) {
    const { labels, values } = levels;
    for (const k in customLevels) {
      if (k in values) {
        throw Error("levels cannot be overridden");
      }
      if (customLevels[k] in labels) {
        throw Error("pre-existing level values cannot be used for new levels");
      }
    }
  }
  function assertLevelComparison(levelComparison) {
    if (typeof levelComparison === "function") {
      return;
    }
    if (typeof levelComparison === "string" && Object.values(SORTING_ORDER).includes(levelComparison)) {
      return;
    }
    throw new Error('Levels comparison should be one of "ASC", "DESC" or "function" type');
  }
  var {
    lsCacheSym,
    levelValSym,
    useOnlyCustomLevelsSym,
    streamSym,
    formattersSym,
    hooksSym,
    levelCompSym
  } = require_symbols();
  var { noop, genLog } = require_tools();
  var { DEFAULT_LEVELS, SORTING_ORDER } = require_constants();
  var levelMethods = {
    fatal: (hook) => {
      const logFatal = genLog(DEFAULT_LEVELS.fatal, hook);
      return function(...args) {
        const stream2 = this[streamSym];
        logFatal.call(this, ...args);
        if (typeof stream2.flushSync === "function") {
          try {
            stream2.flushSync();
          } catch (e) {
          }
        }
      };
    },
    error: (hook) => genLog(DEFAULT_LEVELS.error, hook),
    warn: (hook) => genLog(DEFAULT_LEVELS.warn, hook),
    info: (hook) => genLog(DEFAULT_LEVELS.info, hook),
    debug: (hook) => genLog(DEFAULT_LEVELS.debug, hook),
    trace: (hook) => genLog(DEFAULT_LEVELS.trace, hook)
  };
  var nums = Object.keys(DEFAULT_LEVELS).reduce((o2, k) => {
    o2[DEFAULT_LEVELS[k]] = k;
    return o2;
  }, {});
  var initialLsCache = Object.keys(nums).reduce((o2, k) => {
    o2[k] = '{"level":' + Number(k);
    return o2;
  }, {});
  module.exports = {
    initialLsCache,
    genLsCache,
    levelMethods,
    getLevel,
    setLevel,
    isLevelEnabled,
    mappings,
    assertNoLevelCollisions,
    assertDefaultLevelFound,
    genLevelComparison,
    assertLevelComparison
  };
});

// node_modules/pino/lib/meta.js
var require_meta = __commonJS((exports, module) => {
  module.exports = { version: "9.4.0" };
});

// node_modules/pino/lib/proto.js
var require_proto = __commonJS((exports, module) => {
  function child(bindings2, options4) {
    if (!bindings2) {
      throw Error("missing bindings for child Pino");
    }
    options4 = options4 || {};
    const serializers = this[serializersSym];
    const formatters = this[formattersSym];
    const instance = Object.create(this);
    if (options4.hasOwnProperty("serializers") === true) {
      instance[serializersSym] = Object.create(null);
      for (const k in serializers) {
        instance[serializersSym][k] = serializers[k];
      }
      const parentSymbols = Object.getOwnPropertySymbols(serializers);
      for (var i3 = 0;i3 < parentSymbols.length; i3++) {
        const ks = parentSymbols[i3];
        instance[serializersSym][ks] = serializers[ks];
      }
      for (const bk in options4.serializers) {
        instance[serializersSym][bk] = options4.serializers[bk];
      }
      const bindingsSymbols = Object.getOwnPropertySymbols(options4.serializers);
      for (var bi = 0;bi < bindingsSymbols.length; bi++) {
        const bks = bindingsSymbols[bi];
        instance[serializersSym][bks] = options4.serializers[bks];
      }
    } else
      instance[serializersSym] = serializers;
    if (options4.hasOwnProperty("formatters")) {
      const { level, bindings: chindings, log } = options4.formatters;
      instance[formattersSym] = buildFormatters(level || formatters.level, chindings || resetChildingsFormatter, log || formatters.log);
    } else {
      instance[formattersSym] = buildFormatters(formatters.level, resetChildingsFormatter, formatters.log);
    }
    if (options4.hasOwnProperty("customLevels") === true) {
      assertNoLevelCollisions(this.levels, options4.customLevels);
      instance.levels = mappings(options4.customLevels, instance[useOnlyCustomLevelsSym]);
      genLsCache(instance);
    }
    if (typeof options4.redact === "object" && options4.redact !== null || Array.isArray(options4.redact)) {
      instance.redact = options4.redact;
      const stringifiers = redaction(instance.redact, stringify4);
      const formatOpts = { stringify: stringifiers[redactFmtSym] };
      instance[stringifySym] = stringify4;
      instance[stringifiersSym] = stringifiers;
      instance[formatOptsSym] = formatOpts;
    }
    if (typeof options4.msgPrefix === "string") {
      instance[msgPrefixSym] = (this[msgPrefixSym] || "") + options4.msgPrefix;
    }
    instance[chindingsSym] = asChindings(instance, bindings2);
    const childLevel = options4.level || this.level;
    instance[setLevelSym](childLevel);
    this.onChild(instance);
    return instance;
  }
  function bindings() {
    const chindings = this[chindingsSym];
    const chindingsJson = `{${chindings.substr(1)}}`;
    const bindingsFromJson = JSON.parse(chindingsJson);
    delete bindingsFromJson.pid;
    delete bindingsFromJson.hostname;
    return bindingsFromJson;
  }
  function setBindings(newBindings) {
    const chindings = asChindings(this, newBindings);
    this[chindingsSym] = chindings;
    delete this[parsedChindingsSym];
  }
  function defaultMixinMergeStrategy(mergeObject, mixinObject) {
    return Object.assign(mixinObject, mergeObject);
  }
  function write(_obj, msg, num) {
    const t3 = this[timeSym]();
    const mixin2 = this[mixinSym];
    const errorKey = this[errorKeySym];
    const messageKey = this[messageKeySym];
    const mixinMergeStrategy = this[mixinMergeStrategySym] || defaultMixinMergeStrategy;
    let obj;
    if (_obj === undefined || _obj === null) {
      obj = {};
    } else if (_obj instanceof Error) {
      obj = { [errorKey]: _obj };
      if (msg === undefined) {
        msg = _obj.message;
      }
    } else {
      obj = _obj;
      if (msg === undefined && _obj[messageKey] === undefined && _obj[errorKey]) {
        msg = _obj[errorKey].message;
      }
    }
    if (mixin2) {
      obj = mixinMergeStrategy(obj, mixin2(obj, num, this));
    }
    const s3 = this[asJsonSym](obj, msg, num, t3);
    const stream2 = this[streamSym];
    if (stream2[needsMetadataGsym] === true) {
      stream2.lastLevel = num;
      stream2.lastObj = obj;
      stream2.lastMsg = msg;
      stream2.lastTime = t3.slice(this[timeSliceIndexSym]);
      stream2.lastLogger = this;
    }
    stream2.write(s3);
  }
  function noop() {
  }
  function flush(cb) {
    if (cb != null && typeof cb !== "function") {
      throw Error("callback must be a function");
    }
    const stream2 = this[streamSym];
    if (typeof stream2.flush === "function") {
      stream2.flush(cb || noop);
    } else if (cb)
      cb();
  }
  var { EventEmitter: EventEmitter2 } = import.meta.require("events");
  var {
    lsCacheSym,
    levelValSym,
    setLevelSym,
    getLevelSym,
    chindingsSym,
    parsedChindingsSym,
    mixinSym,
    asJsonSym,
    writeSym,
    mixinMergeStrategySym,
    timeSym,
    timeSliceIndexSym,
    streamSym,
    serializersSym,
    formattersSym,
    errorKeySym,
    messageKeySym,
    useOnlyCustomLevelsSym,
    needsMetadataGsym,
    redactFmtSym,
    stringifySym,
    formatOptsSym,
    stringifiersSym,
    msgPrefixSym
  } = require_symbols();
  var {
    getLevel,
    setLevel,
    isLevelEnabled,
    mappings,
    initialLsCache,
    genLsCache,
    assertNoLevelCollisions
  } = require_levels();
  var {
    asChindings,
    asJson,
    buildFormatters,
    stringify: stringify4
  } = require_tools();
  var {
    version
  } = require_meta();
  var redaction = require_redaction();
  var constructor5 = class Pino {
  };
  var prototype = {
    constructor: constructor5,
    child,
    bindings,
    setBindings,
    flush,
    isLevelEnabled,
    version,
    get level() {
      return this[getLevelSym]();
    },
    set level(lvl) {
      this[setLevelSym](lvl);
    },
    get levelVal() {
      return this[levelValSym];
    },
    set levelVal(n3) {
      throw Error("levelVal is read-only");
    },
    [lsCacheSym]: initialLsCache,
    [writeSym]: write,
    [asJsonSym]: asJson,
    [getLevelSym]: getLevel,
    [setLevelSym]: setLevel
  };
  Object.setPrototypeOf(prototype, EventEmitter2.prototype);
  module.exports = function() {
    return Object.create(prototype);
  };
  var resetChildingsFormatter = (bindings2) => bindings2;
});

// node_modules/safe-stable-stringify/index.js
var require_safe_stable_stringify = __commonJS((exports, module) => {
  function strEscape(str) {
    if (str.length < 5000 && !strEscapeSequencesRegExp.test(str)) {
      return `"${str}"`;
    }
    return JSON.stringify(str);
  }
  function sort3(array5, comparator) {
    if (array5.length > 200 || comparator) {
      return array5.sort(comparator);
    }
    for (let i3 = 1;i3 < array5.length; i3++) {
      const currentValue = array5[i3];
      let position = i3;
      while (position !== 0 && array5[position - 1] > currentValue) {
        array5[position] = array5[position - 1];
        position--;
      }
      array5[position] = currentValue;
    }
    return array5;
  }
  function isTypedArrayWithEntries(value15) {
    return typedArrayPrototypeGetSymbolToStringTag.call(value15) !== undefined && value15.length !== 0;
  }
  function stringifyTypedArray(array5, separator, maximumBreadth) {
    if (array5.length < maximumBreadth) {
      maximumBreadth = array5.length;
    }
    const whitespace2 = separator === "," ? "" : " ";
    let res = `"0":${whitespace2}${array5[0]}`;
    for (let i3 = 1;i3 < maximumBreadth; i3++) {
      res += `${separator}"${i3}":${whitespace2}${array5[i3]}`;
    }
    return res;
  }
  function getCircularValueOption(options4) {
    if (hasOwnProperty.call(options4, "circularValue")) {
      const circularValue = options4.circularValue;
      if (typeof circularValue === "string") {
        return `"${circularValue}"`;
      }
      if (circularValue == null) {
        return circularValue;
      }
      if (circularValue === Error || circularValue === TypeError) {
        return {
          toString() {
            throw new TypeError("Converting circular structure to JSON");
          }
        };
      }
      throw new TypeError('The "circularValue" argument must be of type string or the value null or undefined');
    }
    return '"[Circular]"';
  }
  function getDeterministicOption(options4) {
    let value15;
    if (hasOwnProperty.call(options4, "deterministic")) {
      value15 = options4.deterministic;
      if (typeof value15 !== "boolean" && typeof value15 !== "function") {
        throw new TypeError('The "deterministic" argument must be of type boolean or comparator function');
      }
    }
    return value15 === undefined ? true : value15;
  }
  function getBooleanOption(options4, key) {
    let value15;
    if (hasOwnProperty.call(options4, key)) {
      value15 = options4[key];
      if (typeof value15 !== "boolean") {
        throw new TypeError(`The "${key}" argument must be of type boolean`);
      }
    }
    return value15 === undefined ? true : value15;
  }
  function getPositiveIntegerOption(options4, key) {
    let value15;
    if (hasOwnProperty.call(options4, key)) {
      value15 = options4[key];
      if (typeof value15 !== "number") {
        throw new TypeError(`The "${key}" argument must be of type number`);
      }
      if (!Number.isInteger(value15)) {
        throw new TypeError(`The "${key}" argument must be an integer`);
      }
      if (value15 < 1) {
        throw new RangeError(`The "${key}" argument must be >= 1`);
      }
    }
    return value15 === undefined ? Infinity : value15;
  }
  function getItemCount(number8) {
    if (number8 === 1) {
      return "1 item";
    }
    return `${number8} items`;
  }
  function getUniqueReplacerSet(replacerArray) {
    const replacerSet = new Set;
    for (const value15 of replacerArray) {
      if (typeof value15 === "string" || typeof value15 === "number") {
        replacerSet.add(String(value15));
      }
    }
    return replacerSet;
  }
  function getStrictOption(options4) {
    if (hasOwnProperty.call(options4, "strict")) {
      const value15 = options4.strict;
      if (typeof value15 !== "boolean") {
        throw new TypeError('The "strict" argument must be of type boolean');
      }
      if (value15) {
        return (value16) => {
          let message = `Object can not safely be stringified. Received type ${typeof value16}`;
          if (typeof value16 !== "function")
            message += ` (${value16.toString()})`;
          throw new Error(message);
        };
      }
    }
  }
  function configure(options4) {
    options4 = { ...options4 };
    const fail = getStrictOption(options4);
    if (fail) {
      if (options4.bigint === undefined) {
        options4.bigint = false;
      }
      if (!("circularValue" in options4)) {
        options4.circularValue = Error;
      }
    }
    const circularValue = getCircularValueOption(options4);
    const bigint6 = getBooleanOption(options4, "bigint");
    const deterministic = getDeterministicOption(options4);
    const comparator = typeof deterministic === "function" ? deterministic : undefined;
    const maximumDepth = getPositiveIntegerOption(options4, "maximumDepth");
    const maximumBreadth = getPositiveIntegerOption(options4, "maximumBreadth");
    function stringifyFnReplacer(key, parent2, stack, replacer, spacer, indentation) {
      let value15 = parent2[key];
      if (typeof value15 === "object" && value15 !== null && typeof value15.toJSON === "function") {
        value15 = value15.toJSON(key);
      }
      value15 = replacer.call(parent2, key, value15);
      switch (typeof value15) {
        case "string":
          return strEscape(value15);
        case "object": {
          if (value15 === null) {
            return "null";
          }
          if (stack.indexOf(value15) !== -1) {
            return circularValue;
          }
          let res = "";
          let join3 = ",";
          const originalIndentation = indentation;
          if (Array.isArray(value15)) {
            if (value15.length === 0) {
              return "[]";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Array]"';
            }
            stack.push(value15);
            if (spacer !== "") {
              indentation += spacer;
              res += `\n${indentation}`;
              join3 = `,\n${indentation}`;
            }
            const maximumValuesToStringify = Math.min(value15.length, maximumBreadth);
            let i3 = 0;
            for (;i3 < maximumValuesToStringify - 1; i3++) {
              const tmp2 = stringifyFnReplacer(String(i3), value15, stack, replacer, spacer, indentation);
              res += tmp2 !== undefined ? tmp2 : "null";
              res += join3;
            }
            const tmp = stringifyFnReplacer(String(i3), value15, stack, replacer, spacer, indentation);
            res += tmp !== undefined ? tmp : "null";
            if (value15.length - 1 > maximumBreadth) {
              const removedKeys = value15.length - maximumBreadth - 1;
              res += `${join3}"... ${getItemCount(removedKeys)} not stringified"`;
            }
            if (spacer !== "") {
              res += `\n${originalIndentation}`;
            }
            stack.pop();
            return `[${res}]`;
          }
          let keys = Object.keys(value15);
          const keyLength = keys.length;
          if (keyLength === 0) {
            return "{}";
          }
          if (maximumDepth < stack.length + 1) {
            return '"[Object]"';
          }
          let whitespace2 = "";
          let separator = "";
          if (spacer !== "") {
            indentation += spacer;
            join3 = `,\n${indentation}`;
            whitespace2 = " ";
          }
          const maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
          if (deterministic && !isTypedArrayWithEntries(value15)) {
            keys = sort3(keys, comparator);
          }
          stack.push(value15);
          for (let i3 = 0;i3 < maximumPropertiesToStringify; i3++) {
            const key2 = keys[i3];
            const tmp = stringifyFnReplacer(key2, value15, stack, replacer, spacer, indentation);
            if (tmp !== undefined) {
              res += `${separator}${strEscape(key2)}:${whitespace2}${tmp}`;
              separator = join3;
            }
          }
          if (keyLength > maximumBreadth) {
            const removedKeys = keyLength - maximumBreadth;
            res += `${separator}"...":${whitespace2}"${getItemCount(removedKeys)} not stringified"`;
            separator = join3;
          }
          if (spacer !== "" && separator.length > 1) {
            res = `\n${indentation}${res}\n${originalIndentation}`;
          }
          stack.pop();
          return `{${res}}`;
        }
        case "number":
          return isFinite(value15) ? String(value15) : fail ? fail(value15) : "null";
        case "boolean":
          return value15 === true ? "true" : "false";
        case "undefined":
          return;
        case "bigint":
          if (bigint6) {
            return String(value15);
          }
        default:
          return fail ? fail(value15) : undefined;
      }
    }
    function stringifyArrayReplacer(key, value15, stack, replacer, spacer, indentation) {
      if (typeof value15 === "object" && value15 !== null && typeof value15.toJSON === "function") {
        value15 = value15.toJSON(key);
      }
      switch (typeof value15) {
        case "string":
          return strEscape(value15);
        case "object": {
          if (value15 === null) {
            return "null";
          }
          if (stack.indexOf(value15) !== -1) {
            return circularValue;
          }
          const originalIndentation = indentation;
          let res = "";
          let join3 = ",";
          if (Array.isArray(value15)) {
            if (value15.length === 0) {
              return "[]";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Array]"';
            }
            stack.push(value15);
            if (spacer !== "") {
              indentation += spacer;
              res += `\n${indentation}`;
              join3 = `,\n${indentation}`;
            }
            const maximumValuesToStringify = Math.min(value15.length, maximumBreadth);
            let i3 = 0;
            for (;i3 < maximumValuesToStringify - 1; i3++) {
              const tmp2 = stringifyArrayReplacer(String(i3), value15[i3], stack, replacer, spacer, indentation);
              res += tmp2 !== undefined ? tmp2 : "null";
              res += join3;
            }
            const tmp = stringifyArrayReplacer(String(i3), value15[i3], stack, replacer, spacer, indentation);
            res += tmp !== undefined ? tmp : "null";
            if (value15.length - 1 > maximumBreadth) {
              const removedKeys = value15.length - maximumBreadth - 1;
              res += `${join3}"... ${getItemCount(removedKeys)} not stringified"`;
            }
            if (spacer !== "") {
              res += `\n${originalIndentation}`;
            }
            stack.pop();
            return `[${res}]`;
          }
          stack.push(value15);
          let whitespace2 = "";
          if (spacer !== "") {
            indentation += spacer;
            join3 = `,\n${indentation}`;
            whitespace2 = " ";
          }
          let separator = "";
          for (const key2 of replacer) {
            const tmp = stringifyArrayReplacer(key2, value15[key2], stack, replacer, spacer, indentation);
            if (tmp !== undefined) {
              res += `${separator}${strEscape(key2)}:${whitespace2}${tmp}`;
              separator = join3;
            }
          }
          if (spacer !== "" && separator.length > 1) {
            res = `\n${indentation}${res}\n${originalIndentation}`;
          }
          stack.pop();
          return `{${res}}`;
        }
        case "number":
          return isFinite(value15) ? String(value15) : fail ? fail(value15) : "null";
        case "boolean":
          return value15 === true ? "true" : "false";
        case "undefined":
          return;
        case "bigint":
          if (bigint6) {
            return String(value15);
          }
        default:
          return fail ? fail(value15) : undefined;
      }
    }
    function stringifyIndent(key, value15, stack, spacer, indentation) {
      switch (typeof value15) {
        case "string":
          return strEscape(value15);
        case "object": {
          if (value15 === null) {
            return "null";
          }
          if (typeof value15.toJSON === "function") {
            value15 = value15.toJSON(key);
            if (typeof value15 !== "object") {
              return stringifyIndent(key, value15, stack, spacer, indentation);
            }
            if (value15 === null) {
              return "null";
            }
          }
          if (stack.indexOf(value15) !== -1) {
            return circularValue;
          }
          const originalIndentation = indentation;
          if (Array.isArray(value15)) {
            if (value15.length === 0) {
              return "[]";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Array]"';
            }
            stack.push(value15);
            indentation += spacer;
            let res2 = `\n${indentation}`;
            const join4 = `,\n${indentation}`;
            const maximumValuesToStringify = Math.min(value15.length, maximumBreadth);
            let i3 = 0;
            for (;i3 < maximumValuesToStringify - 1; i3++) {
              const tmp2 = stringifyIndent(String(i3), value15[i3], stack, spacer, indentation);
              res2 += tmp2 !== undefined ? tmp2 : "null";
              res2 += join4;
            }
            const tmp = stringifyIndent(String(i3), value15[i3], stack, spacer, indentation);
            res2 += tmp !== undefined ? tmp : "null";
            if (value15.length - 1 > maximumBreadth) {
              const removedKeys = value15.length - maximumBreadth - 1;
              res2 += `${join4}"... ${getItemCount(removedKeys)} not stringified"`;
            }
            res2 += `\n${originalIndentation}`;
            stack.pop();
            return `[${res2}]`;
          }
          let keys = Object.keys(value15);
          const keyLength = keys.length;
          if (keyLength === 0) {
            return "{}";
          }
          if (maximumDepth < stack.length + 1) {
            return '"[Object]"';
          }
          indentation += spacer;
          const join3 = `,\n${indentation}`;
          let res = "";
          let separator = "";
          let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
          if (isTypedArrayWithEntries(value15)) {
            res += stringifyTypedArray(value15, join3, maximumBreadth);
            keys = keys.slice(value15.length);
            maximumPropertiesToStringify -= value15.length;
            separator = join3;
          }
          if (deterministic) {
            keys = sort3(keys, comparator);
          }
          stack.push(value15);
          for (let i3 = 0;i3 < maximumPropertiesToStringify; i3++) {
            const key2 = keys[i3];
            const tmp = stringifyIndent(key2, value15[key2], stack, spacer, indentation);
            if (tmp !== undefined) {
              res += `${separator}${strEscape(key2)}: ${tmp}`;
              separator = join3;
            }
          }
          if (keyLength > maximumBreadth) {
            const removedKeys = keyLength - maximumBreadth;
            res += `${separator}"...": "${getItemCount(removedKeys)} not stringified"`;
            separator = join3;
          }
          if (separator !== "") {
            res = `\n${indentation}${res}\n${originalIndentation}`;
          }
          stack.pop();
          return `{${res}}`;
        }
        case "number":
          return isFinite(value15) ? String(value15) : fail ? fail(value15) : "null";
        case "boolean":
          return value15 === true ? "true" : "false";
        case "undefined":
          return;
        case "bigint":
          if (bigint6) {
            return String(value15);
          }
        default:
          return fail ? fail(value15) : undefined;
      }
    }
    function stringifySimple(key, value15, stack) {
      switch (typeof value15) {
        case "string":
          return strEscape(value15);
        case "object": {
          if (value15 === null) {
            return "null";
          }
          if (typeof value15.toJSON === "function") {
            value15 = value15.toJSON(key);
            if (typeof value15 !== "object") {
              return stringifySimple(key, value15, stack);
            }
            if (value15 === null) {
              return "null";
            }
          }
          if (stack.indexOf(value15) !== -1) {
            return circularValue;
          }
          let res = "";
          const hasLength = value15.length !== undefined;
          if (hasLength && Array.isArray(value15)) {
            if (value15.length === 0) {
              return "[]";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Array]"';
            }
            stack.push(value15);
            const maximumValuesToStringify = Math.min(value15.length, maximumBreadth);
            let i3 = 0;
            for (;i3 < maximumValuesToStringify - 1; i3++) {
              const tmp2 = stringifySimple(String(i3), value15[i3], stack);
              res += tmp2 !== undefined ? tmp2 : "null";
              res += ",";
            }
            const tmp = stringifySimple(String(i3), value15[i3], stack);
            res += tmp !== undefined ? tmp : "null";
            if (value15.length - 1 > maximumBreadth) {
              const removedKeys = value15.length - maximumBreadth - 1;
              res += `,"... ${getItemCount(removedKeys)} not stringified"`;
            }
            stack.pop();
            return `[${res}]`;
          }
          let keys = Object.keys(value15);
          const keyLength = keys.length;
          if (keyLength === 0) {
            return "{}";
          }
          if (maximumDepth < stack.length + 1) {
            return '"[Object]"';
          }
          let separator = "";
          let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
          if (hasLength && isTypedArrayWithEntries(value15)) {
            res += stringifyTypedArray(value15, ",", maximumBreadth);
            keys = keys.slice(value15.length);
            maximumPropertiesToStringify -= value15.length;
            separator = ",";
          }
          if (deterministic) {
            keys = sort3(keys, comparator);
          }
          stack.push(value15);
          for (let i3 = 0;i3 < maximumPropertiesToStringify; i3++) {
            const key2 = keys[i3];
            const tmp = stringifySimple(key2, value15[key2], stack);
            if (tmp !== undefined) {
              res += `${separator}${strEscape(key2)}:${tmp}`;
              separator = ",";
            }
          }
          if (keyLength > maximumBreadth) {
            const removedKeys = keyLength - maximumBreadth;
            res += `${separator}"...":"${getItemCount(removedKeys)} not stringified"`;
          }
          stack.pop();
          return `{${res}}`;
        }
        case "number":
          return isFinite(value15) ? String(value15) : fail ? fail(value15) : "null";
        case "boolean":
          return value15 === true ? "true" : "false";
        case "undefined":
          return;
        case "bigint":
          if (bigint6) {
            return String(value15);
          }
        default:
          return fail ? fail(value15) : undefined;
      }
    }
    function stringify5(value15, replacer, space) {
      if (arguments.length > 1) {
        let spacer = "";
        if (typeof space === "number") {
          spacer = " ".repeat(Math.min(space, 10));
        } else if (typeof space === "string") {
          spacer = space.slice(0, 10);
        }
        if (replacer != null) {
          if (typeof replacer === "function") {
            return stringifyFnReplacer("", { "": value15 }, [], replacer, spacer, "");
          }
          if (Array.isArray(replacer)) {
            return stringifyArrayReplacer("", value15, [], getUniqueReplacerSet(replacer), spacer, "");
          }
        }
        if (spacer.length !== 0) {
          return stringifyIndent("", value15, [], spacer, "");
        }
      }
      return stringifySimple("", value15, []);
    }
    return stringify5;
  }
  var { hasOwnProperty } = Object.prototype;
  var stringify4 = configure();
  stringify4.configure = configure;
  stringify4.stringify = stringify4;
  stringify4.default = stringify4;
  exports.stringify = stringify4;
  exports.configure = configure;
  module.exports = stringify4;
  var strEscapeSequencesRegExp = /[\u0000-\u001f\u0022\u005c\ud800-\udfff]/;
  var typedArrayPrototypeGetSymbolToStringTag = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(Object.getPrototypeOf(new Int8Array)), Symbol.toStringTag).get;
});

// node_modules/pino/lib/multistream.js
var require_multistream = __commonJS((exports, module) => {
  function multistream(streamsArray, opts) {
    let counter = 0;
    streamsArray = streamsArray || [];
    opts = opts || { dedupe: false };
    const streamLevels = Object.create(DEFAULT_LEVELS);
    streamLevels.silent = Infinity;
    if (opts.levels && typeof opts.levels === "object") {
      Object.keys(opts.levels).forEach((i3) => {
        streamLevels[i3] = opts.levels[i3];
      });
    }
    const res = {
      write,
      add: add2,
      emit,
      flushSync,
      end: end2,
      minLevel: 0,
      streams: [],
      clone: clone14,
      [metadata]: true,
      streamLevels
    };
    if (Array.isArray(streamsArray)) {
      streamsArray.forEach(add2, res);
    } else {
      add2.call(res, streamsArray);
    }
    streamsArray = null;
    return res;
    function write(data2) {
      let dest;
      const level = this.lastLevel;
      const { streams } = this;
      let recordedLevel = 0;
      let stream2;
      for (let i3 = initLoopVar(streams.length, opts.dedupe);checkLoopVar(i3, streams.length, opts.dedupe); i3 = adjustLoopVar(i3, opts.dedupe)) {
        dest = streams[i3];
        if (dest.level <= level) {
          if (recordedLevel !== 0 && recordedLevel !== dest.level) {
            break;
          }
          stream2 = dest.stream;
          if (stream2[metadata]) {
            const { lastTime, lastMsg, lastObj, lastLogger } = this;
            stream2.lastLevel = level;
            stream2.lastTime = lastTime;
            stream2.lastMsg = lastMsg;
            stream2.lastObj = lastObj;
            stream2.lastLogger = lastLogger;
          }
          stream2.write(data2);
          if (opts.dedupe) {
            recordedLevel = dest.level;
          }
        } else if (!opts.dedupe) {
          break;
        }
      }
    }
    function emit(...args) {
      for (const { stream: stream2 } of this.streams) {
        if (typeof stream2.emit === "function") {
          stream2.emit(...args);
        }
      }
    }
    function flushSync() {
      for (const { stream: stream2 } of this.streams) {
        if (typeof stream2.flushSync === "function") {
          stream2.flushSync();
        }
      }
    }
    function add2(dest) {
      if (!dest) {
        return res;
      }
      const isStream = typeof dest.write === "function" || dest.stream;
      const stream_ = dest.write ? dest : dest.stream;
      if (!isStream) {
        throw Error("stream object needs to implement either StreamEntry or DestinationStream interface");
      }
      const { streams, streamLevels: streamLevels2 } = this;
      let level;
      if (typeof dest.levelVal === "number") {
        level = dest.levelVal;
      } else if (typeof dest.level === "string") {
        level = streamLevels2[dest.level];
      } else if (typeof dest.level === "number") {
        level = dest.level;
      } else {
        level = DEFAULT_INFO_LEVEL;
      }
      const dest_ = {
        stream: stream_,
        level,
        levelVal: undefined,
        id: counter++
      };
      streams.unshift(dest_);
      streams.sort(compareByLevel);
      this.minLevel = streams[0].level;
      return res;
    }
    function end2() {
      for (const { stream: stream2 } of this.streams) {
        if (typeof stream2.flushSync === "function") {
          stream2.flushSync();
        }
        stream2.end();
      }
    }
    function clone14(level) {
      const streams = new Array(this.streams.length);
      for (let i3 = 0;i3 < streams.length; i3++) {
        streams[i3] = {
          level,
          stream: this.streams[i3].stream
        };
      }
      return {
        write,
        add: add2,
        minLevel: level,
        streams,
        clone: clone14,
        emit,
        flushSync,
        [metadata]: true
      };
    }
  }
  function compareByLevel(a, b) {
    return a.level - b.level;
  }
  function initLoopVar(length, dedupe) {
    return dedupe ? length - 1 : 0;
  }
  function adjustLoopVar(i3, dedupe) {
    return dedupe ? i3 - 1 : i3 + 1;
  }
  function checkLoopVar(i3, length, dedupe) {
    return dedupe ? i3 >= 0 : i3 < length;
  }
  var metadata = Symbol.for("pino.metadata");
  var { DEFAULT_LEVELS } = require_constants();
  var DEFAULT_INFO_LEVEL = DEFAULT_LEVELS.info;
  module.exports = multistream;
});

// node_modules/pino/pino.js
var require_pino = __commonJS((exports, module) => {
  function pino(...args) {
    const instance = {};
    const { opts, stream: stream2 } = normalize(instance, caller(), ...args);
    if (opts.level && typeof opts.level === "string" && DEFAULT_LEVELS[opts.level.toLowerCase()] !== undefined)
      opts.level = opts.level.toLowerCase();
    const {
      redact,
      crlf,
      serializers: serializers2,
      timestamp,
      messageKey,
      errorKey,
      nestedKey,
      base,
      name,
      level,
      customLevels,
      levelComparison,
      mixin: mixin2,
      mixinMergeStrategy,
      useOnlyCustomLevels,
      formatters,
      hooks,
      depthLimit,
      edgeLimit,
      onChild,
      msgPrefix
    } = opts;
    const stringifySafe = configure({
      maximumDepth: depthLimit,
      maximumBreadth: edgeLimit
    });
    const allFormatters = buildFormatters(formatters.level, formatters.bindings, formatters.log);
    const stringifyFn = stringify4.bind({
      [stringifySafeSym]: stringifySafe
    });
    const stringifiers = redact ? redaction(redact, stringifyFn) : {};
    const formatOpts = redact ? { stringify: stringifiers[redactFmtSym] } : { stringify: stringifyFn };
    const end2 = "}" + (crlf ? "\r\n" : "\n");
    const coreChindings = asChindings.bind(null, {
      [chindingsSym]: "",
      [serializersSym]: serializers2,
      [stringifiersSym]: stringifiers,
      [stringifySym]: stringify4,
      [stringifySafeSym]: stringifySafe,
      [formattersSym]: allFormatters
    });
    let chindings = "";
    if (base !== null) {
      if (name === undefined) {
        chindings = coreChindings(base);
      } else {
        chindings = coreChindings(Object.assign({}, base, { name }));
      }
    }
    const time2 = timestamp instanceof Function ? timestamp : timestamp ? epochTime : nullTime;
    const timeSliceIndex = time2().indexOf(":") + 1;
    if (useOnlyCustomLevels && !customLevels)
      throw Error("customLevels is required if useOnlyCustomLevels is set true");
    if (mixin2 && typeof mixin2 !== "function")
      throw Error(`Unknown mixin type "${typeof mixin2}" - expected "function"`);
    if (msgPrefix && typeof msgPrefix !== "string")
      throw Error(`Unknown msgPrefix type "${typeof msgPrefix}" - expected "string"`);
    assertDefaultLevelFound(level, customLevels, useOnlyCustomLevels);
    const levels = mappings(customLevels, useOnlyCustomLevels);
    if (typeof stream2.emit === "function") {
      stream2.emit("message", { code: "PINO_CONFIG", config: { levels, messageKey, errorKey } });
    }
    assertLevelComparison(levelComparison);
    const levelCompFunc = genLevelComparison(levelComparison);
    Object.assign(instance, {
      levels,
      [levelCompSym]: levelCompFunc,
      [useOnlyCustomLevelsSym]: useOnlyCustomLevels,
      [streamSym]: stream2,
      [timeSym]: time2,
      [timeSliceIndexSym]: timeSliceIndex,
      [stringifySym]: stringify4,
      [stringifySafeSym]: stringifySafe,
      [stringifiersSym]: stringifiers,
      [endSym]: end2,
      [formatOptsSym]: formatOpts,
      [messageKeySym]: messageKey,
      [errorKeySym]: errorKey,
      [nestedKeySym]: nestedKey,
      [nestedKeyStrSym]: nestedKey ? `,${JSON.stringify(nestedKey)}:{` : "",
      [serializersSym]: serializers2,
      [mixinSym]: mixin2,
      [mixinMergeStrategySym]: mixinMergeStrategy,
      [chindingsSym]: chindings,
      [formattersSym]: allFormatters,
      [hooksSym]: hooks,
      silent: noop,
      onChild,
      [msgPrefixSym]: msgPrefix
    });
    Object.setPrototypeOf(instance, proto());
    genLsCache(instance);
    instance[setLevelSym](level);
    return instance;
  }
  var os = import.meta.require("os");
  var stdSerializers = require_pino_std_serializers();
  var caller = require_caller();
  var redaction = require_redaction();
  var time = require_time();
  var proto = require_proto();
  var symbols70 = require_symbols();
  var { configure } = require_safe_stable_stringify();
  var { assertDefaultLevelFound, mappings, genLsCache, genLevelComparison, assertLevelComparison } = require_levels();
  var { DEFAULT_LEVELS, SORTING_ORDER } = require_constants();
  var {
    createArgsNormalizer,
    asChindings,
    buildSafeSonicBoom,
    buildFormatters,
    stringify: stringify4,
    normalizeDestFileDescriptor,
    noop
  } = require_tools();
  var { version } = require_meta();
  var {
    chindingsSym,
    redactFmtSym,
    serializersSym,
    timeSym,
    timeSliceIndexSym,
    streamSym,
    stringifySym,
    stringifySafeSym,
    stringifiersSym,
    setLevelSym,
    endSym,
    formatOptsSym,
    messageKeySym,
    errorKeySym,
    nestedKeySym,
    mixinSym,
    levelCompSym,
    useOnlyCustomLevelsSym,
    formattersSym,
    hooksSym,
    nestedKeyStrSym,
    mixinMergeStrategySym,
    msgPrefixSym
  } = symbols70;
  var { epochTime, nullTime } = time;
  var { pid } = process;
  var hostname = os.hostname();
  var defaultErrorSerializer = stdSerializers.err;
  var defaultOptions2 = {
    level: "info",
    levelComparison: SORTING_ORDER.ASC,
    levels: DEFAULT_LEVELS,
    messageKey: "msg",
    errorKey: "err",
    nestedKey: null,
    enabled: true,
    base: { pid, hostname },
    serializers: Object.assign(Object.create(null), {
      err: defaultErrorSerializer
    }),
    formatters: Object.assign(Object.create(null), {
      bindings(bindings) {
        return bindings;
      },
      level(label, number8) {
        return { level: number8 };
      }
    }),
    hooks: {
      logMethod: undefined
    },
    timestamp: epochTime,
    name: undefined,
    redact: null,
    customLevels: null,
    useOnlyCustomLevels: false,
    depthLimit: 5,
    edgeLimit: 100
  };
  var normalize = createArgsNormalizer(defaultOptions2);
  var serializers = Object.assign(Object.create(null), stdSerializers);
  module.exports = pino;
  module.exports.destination = (dest = process.stdout.fd) => {
    if (typeof dest === "object") {
      dest.dest = normalizeDestFileDescriptor(dest.dest || process.stdout.fd);
      return buildSafeSonicBoom(dest);
    } else {
      return buildSafeSonicBoom({ dest: normalizeDestFileDescriptor(dest), minLength: 0 });
    }
  };
  module.exports.transport = require_transport();
  module.exports.multistream = require_multistream();
  module.exports.levels = mappings();
  module.exports.stdSerializers = serializers;
  module.exports.stdTimeFunctions = Object.assign({}, time);
  module.exports.symbols = symbols70;
  module.exports.version = version;
  module.exports.default = pino;
  module.exports.pino = pino;
});

// node_modules/uuid/dist/max.js
var require_max = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = exports.default = "ffffffff-ffff-ffff-ffff-ffffffffffff";
});

// node_modules/uuid/dist/nil.js
var require_nil = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = exports.default = "00000000-0000-0000-0000-000000000000";
});

// node_modules/uuid/dist/regex.js
var require_regex = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = exports.default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;
});

// node_modules/uuid/dist/validate.js
var require_validate = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  function validate(uuid) {
    return typeof uuid === "string" && _regex.default.test(uuid);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _regex = _interopRequireDefault(require_regex());
  var _default = exports.default = validate;
});

// node_modules/uuid/dist/parse.js
var require_parse2 = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  function parse13(uuid) {
    if (!(0, _validate.default)(uuid)) {
      throw TypeError("Invalid UUID");
    }
    let v3;
    const arr = new Uint8Array(16);
    arr[0] = (v3 = parseInt(uuid.slice(0, 8), 16)) >>> 24;
    arr[1] = v3 >>> 16 & 255;
    arr[2] = v3 >>> 8 & 255;
    arr[3] = v3 & 255;
    arr[4] = (v3 = parseInt(uuid.slice(9, 13), 16)) >>> 8;
    arr[5] = v3 & 255;
    arr[6] = (v3 = parseInt(uuid.slice(14, 18), 16)) >>> 8;
    arr[7] = v3 & 255;
    arr[8] = (v3 = parseInt(uuid.slice(19, 23), 16)) >>> 8;
    arr[9] = v3 & 255;
    arr[10] = (v3 = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
    arr[11] = v3 / 4294967296 & 255;
    arr[12] = v3 >>> 24 & 255;
    arr[13] = v3 >>> 16 & 255;
    arr[14] = v3 >>> 8 & 255;
    arr[15] = v3 & 255;
    return arr;
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _validate = _interopRequireDefault(require_validate());
  var _default = exports.default = parse13;
});

// node_modules/uuid/dist/stringify.js
var require_stringify = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  function unsafeStringify(arr, offset = 0) {
    return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  }
  function stringify4(arr, offset = 0) {
    const uuid = unsafeStringify(arr, offset);
    if (!(0, _validate.default)(uuid)) {
      throw TypeError("Stringified UUID is invalid");
    }
    return uuid;
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.unsafeStringify = unsafeStringify;
  var _validate = _interopRequireDefault(require_validate());
  var byteToHex = [];
  for (let i3 = 0;i3 < 256; ++i3) {
    byteToHex.push((i3 + 256).toString(16).slice(1));
  }
  var _default = exports.default = stringify4;
});

// node_modules/uuid/dist/rng.js
var require_rng = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  function rng() {
    if (poolPtr > rnds8Pool.length - 16) {
      _nodeCrypto.default.randomFillSync(rnds8Pool);
      poolPtr = 0;
    }
    return rnds8Pool.slice(poolPtr, poolPtr += 16);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = rng;
  var _nodeCrypto = _interopRequireDefault(import.meta.require("crypto"));
  var rnds8Pool = new Uint8Array(256);
  var poolPtr = rnds8Pool.length;
});

// node_modules/uuid/dist/v1.js
var require_v1 = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  function v12(options4, buf, offset) {
    let i3 = buf && offset || 0;
    const b = buf || new Array(16);
    options4 = options4 || {};
    let node3 = options4.node;
    let clockseq = options4.clockseq;
    if (!options4._v6) {
      if (!node3) {
        node3 = _nodeId;
      }
      if (clockseq == null) {
        clockseq = _clockseq;
      }
    }
    if (node3 == null || clockseq == null) {
      const seedBytes = options4.random || (options4.rng || _rng.default)();
      if (node3 == null) {
        node3 = [seedBytes[0], seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        if (!_nodeId && !options4._v6) {
          node3[0] |= 1;
          _nodeId = node3;
        }
      }
      if (clockseq == null) {
        clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        if (_clockseq === undefined && !options4._v6) {
          _clockseq = clockseq;
        }
      }
    }
    let msecs = options4.msecs !== undefined ? options4.msecs : Date.now();
    let nsecs = options4.nsecs !== undefined ? options4.nsecs : _lastNSecs + 1;
    const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
    if (dt < 0 && options4.clockseq === undefined) {
      clockseq = clockseq + 1 & 16383;
    }
    if ((dt < 0 || msecs > _lastMSecs) && options4.nsecs === undefined) {
      nsecs = 0;
    }
    if (nsecs >= 1e4) {
      throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    }
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
    msecs += 12219292800000;
    const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
    b[i3++] = tl >>> 24 & 255;
    b[i3++] = tl >>> 16 & 255;
    b[i3++] = tl >>> 8 & 255;
    b[i3++] = tl & 255;
    const tmh = msecs / 4294967296 * 1e4 & 268435455;
    b[i3++] = tmh >>> 8 & 255;
    b[i3++] = tmh & 255;
    b[i3++] = tmh >>> 24 & 15 | 16;
    b[i3++] = tmh >>> 16 & 255;
    b[i3++] = clockseq >>> 8 | 128;
    b[i3++] = clockseq & 255;
    for (let n3 = 0;n3 < 6; ++n3) {
      b[i3 + n3] = node3[n3];
    }
    return buf || (0, _stringify.unsafeStringify)(b);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _rng = _interopRequireDefault(require_rng());
  var _stringify = require_stringify();
  var _nodeId;
  var _clockseq;
  var _lastMSecs = 0;
  var _lastNSecs = 0;
  var _default = exports.default = v12;
});

// node_modules/uuid/dist/v1ToV6.js
var require_v1ToV6 = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  function v1ToV6(uuid) {
    const v1Bytes = typeof uuid === "string" ? (0, _parse.default)(uuid) : uuid;
    const v6Bytes = _v1ToV6(v1Bytes);
    return typeof uuid === "string" ? (0, _stringify.unsafeStringify)(v6Bytes) : v6Bytes;
  }
  function _v1ToV6(v1Bytes, randomize = false) {
    return Uint8Array.of((v1Bytes[6] & 15) << 4 | v1Bytes[7] >> 4 & 15, (v1Bytes[7] & 15) << 4 | (v1Bytes[4] & 240) >> 4, (v1Bytes[4] & 15) << 4 | (v1Bytes[5] & 240) >> 4, (v1Bytes[5] & 15) << 4 | (v1Bytes[0] & 240) >> 4, (v1Bytes[0] & 15) << 4 | (v1Bytes[1] & 240) >> 4, (v1Bytes[1] & 15) << 4 | (v1Bytes[2] & 240) >> 4, 96 | v1Bytes[2] & 15, v1Bytes[3], v1Bytes[8], v1Bytes[9], v1Bytes[10], v1Bytes[11], v1Bytes[12], v1Bytes[13], v1Bytes[14], v1Bytes[15]);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = v1ToV6;
  var _parse = _interopRequireDefault(require_parse2());
  var _stringify = require_stringify();
});

// node_modules/uuid/dist/v35.js
var require_v35 = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  function stringToBytes(str) {
    str = unescape(encodeURIComponent(str));
    const bytes = [];
    for (let i3 = 0;i3 < str.length; ++i3) {
      bytes.push(str.charCodeAt(i3));
    }
    return bytes;
  }
  function v35(name, version, hashfunc) {
    function generateUUID(value15, namespace, buf, offset) {
      var _namespace;
      if (typeof value15 === "string") {
        value15 = stringToBytes(value15);
      }
      if (typeof namespace === "string") {
        namespace = (0, _parse.default)(namespace);
      }
      if (((_namespace = namespace) === null || _namespace === undefined ? undefined : _namespace.length) !== 16) {
        throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
      }
      let bytes = new Uint8Array(16 + value15.length);
      bytes.set(namespace);
      bytes.set(value15, namespace.length);
      bytes = hashfunc(bytes);
      bytes[6] = bytes[6] & 15 | version;
      bytes[8] = bytes[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i3 = 0;i3 < 16; ++i3) {
          buf[offset + i3] = bytes[i3];
        }
        return buf;
      }
      return (0, _stringify.unsafeStringify)(bytes);
    }
    try {
      generateUUID.name = name;
    } catch (err) {
    }
    generateUUID.DNS = DNS;
    generateUUID.URL = URL2;
    return generateUUID;
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.URL = exports.DNS = undefined;
  exports.default = v35;
  var _stringify = require_stringify();
  var _parse = _interopRequireDefault(require_parse2());
  var DNS = exports.DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
  var URL2 = exports.URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
});

// node_modules/uuid/dist/md5.js
var require_md52 = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  function md5(bytes) {
    if (Array.isArray(bytes)) {
      bytes = Buffer.from(bytes);
    } else if (typeof bytes === "string") {
      bytes = Buffer.from(bytes, "utf8");
    }
    return _nodeCrypto.default.createHash("md5").update(bytes).digest();
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _nodeCrypto = _interopRequireDefault(import.meta.require("crypto"));
  var _default = exports.default = md5;
});

// node_modules/uuid/dist/v3.js
var require_v3 = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _v = _interopRequireDefault(require_v35());
  var _md = _interopRequireDefault(require_md52());
  var v3 = (0, _v.default)("v3", 48, _md.default);
  var _default = exports.default = v3;
});

// node_modules/uuid/dist/native.js
var require_native = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _nodeCrypto = _interopRequireDefault(import.meta.require("crypto"));
  var _default = exports.default = {
    randomUUID: _nodeCrypto.default.randomUUID
  };
});

// node_modules/uuid/dist/v4.js
var require_v4 = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  function v4(options4, buf, offset) {
    if (_native.default.randomUUID && !buf && !options4) {
      return _native.default.randomUUID();
    }
    options4 = options4 || {};
    const rnds = options4.random || (options4.rng || _rng.default)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i3 = 0;i3 < 16; ++i3) {
        buf[offset + i3] = rnds[i3];
      }
      return buf;
    }
    return (0, _stringify.unsafeStringify)(rnds);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _native = _interopRequireDefault(require_native());
  var _rng = _interopRequireDefault(require_rng());
  var _stringify = require_stringify();
  var _default = exports.default = v4;
});

// node_modules/uuid/dist/sha1.js
var require_sha12 = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  function sha1(bytes) {
    if (Array.isArray(bytes)) {
      bytes = Buffer.from(bytes);
    } else if (typeof bytes === "string") {
      bytes = Buffer.from(bytes, "utf8");
    }
    return _nodeCrypto.default.createHash("sha1").update(bytes).digest();
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _nodeCrypto = _interopRequireDefault(import.meta.require("crypto"));
  var _default = exports.default = sha1;
});

// node_modules/uuid/dist/v5.js
var require_v5 = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _v = _interopRequireDefault(require_v35());
  var _sha = _interopRequireDefault(require_sha12());
  var v5 = (0, _v.default)("v5", 80, _sha.default);
  var _default = exports.default = v5;
});

// node_modules/uuid/dist/v6.js
var require_v6 = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  function v6(options4 = {}, buf, offset = 0) {
    let bytes = (0, _v.default)({
      ...options4,
      _v6: true
    }, new Uint8Array(16));
    bytes = (0, _v1ToV.default)(bytes);
    if (buf) {
      for (let i3 = 0;i3 < 16; i3++) {
        buf[offset + i3] = bytes[i3];
      }
      return buf;
    }
    return (0, _stringify.unsafeStringify)(bytes);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = v6;
  var _stringify = require_stringify();
  var _v = _interopRequireDefault(require_v1());
  var _v1ToV = _interopRequireDefault(require_v1ToV6());
});

// node_modules/uuid/dist/v6ToV1.js
var require_v6ToV1 = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  function v6ToV1(uuid) {
    const v6Bytes = typeof uuid === "string" ? (0, _parse.default)(uuid) : uuid;
    const v1Bytes = _v6ToV1(v6Bytes);
    return typeof uuid === "string" ? (0, _stringify.unsafeStringify)(v1Bytes) : v1Bytes;
  }
  function _v6ToV1(v6Bytes) {
    return Uint8Array.of((v6Bytes[3] & 15) << 4 | v6Bytes[4] >> 4 & 15, (v6Bytes[4] & 15) << 4 | (v6Bytes[5] & 240) >> 4, (v6Bytes[5] & 15) << 4 | v6Bytes[6] & 15, v6Bytes[7], (v6Bytes[1] & 15) << 4 | (v6Bytes[2] & 240) >> 4, (v6Bytes[2] & 15) << 4 | (v6Bytes[3] & 240) >> 4, 16 | (v6Bytes[0] & 240) >> 4, (v6Bytes[0] & 15) << 4 | (v6Bytes[1] & 240) >> 4, v6Bytes[8], v6Bytes[9], v6Bytes[10], v6Bytes[11], v6Bytes[12], v6Bytes[13], v6Bytes[14], v6Bytes[15]);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = v6ToV1;
  var _parse = _interopRequireDefault(require_parse2());
  var _stringify = require_stringify();
});

// node_modules/uuid/dist/v7.js
var require_v7 = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  function v7(options4, buf, offset) {
    options4 = options4 || {};
    let i3 = buf && offset || 0;
    const b = buf || new Uint8Array(16);
    const rnds = options4.random || (options4.rng || _rng.default)();
    const msecs = options4.msecs !== undefined ? options4.msecs : Date.now();
    let seq = options4.seq !== undefined ? options4.seq : null;
    let seqHigh = _seqHigh;
    let seqLow = _seqLow;
    if (msecs > _msecs && options4.msecs === undefined) {
      _msecs = msecs;
      if (seq !== null) {
        seqHigh = null;
        seqLow = null;
      }
    }
    if (seq !== null) {
      if (seq > 2147483647) {
        seq = 2147483647;
      }
      seqHigh = seq >>> 19 & 4095;
      seqLow = seq & 524287;
    }
    if (seqHigh === null || seqLow === null) {
      seqHigh = rnds[6] & 127;
      seqHigh = seqHigh << 8 | rnds[7];
      seqLow = rnds[8] & 63;
      seqLow = seqLow << 8 | rnds[9];
      seqLow = seqLow << 5 | rnds[10] >>> 3;
    }
    if (msecs + 1e4 > _msecs && seq === null) {
      if (++seqLow > 524287) {
        seqLow = 0;
        if (++seqHigh > 4095) {
          seqHigh = 0;
          _msecs++;
        }
      }
    } else {
      _msecs = msecs;
    }
    _seqHigh = seqHigh;
    _seqLow = seqLow;
    b[i3++] = _msecs / 1099511627776 & 255;
    b[i3++] = _msecs / 4294967296 & 255;
    b[i3++] = _msecs / 16777216 & 255;
    b[i3++] = _msecs / 65536 & 255;
    b[i3++] = _msecs / 256 & 255;
    b[i3++] = _msecs & 255;
    b[i3++] = seqHigh >>> 4 & 15 | 112;
    b[i3++] = seqHigh & 255;
    b[i3++] = seqLow >>> 13 & 63 | 128;
    b[i3++] = seqLow >>> 5 & 255;
    b[i3++] = seqLow << 3 & 255 | rnds[10] & 7;
    b[i3++] = rnds[11];
    b[i3++] = rnds[12];
    b[i3++] = rnds[13];
    b[i3++] = rnds[14];
    b[i3++] = rnds[15];
    return buf || (0, _stringify.unsafeStringify)(b);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _rng = _interopRequireDefault(require_rng());
  var _stringify = require_stringify();
  var _seqLow = null;
  var _seqHigh = null;
  var _msecs = 0;
  var _default = exports.default = v7;
});

// node_modules/uuid/dist/version.js
var require_version = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  function version(uuid) {
    if (!(0, _validate.default)(uuid)) {
      throw TypeError("Invalid UUID");
    }
    return parseInt(uuid.slice(14, 15), 16);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _validate = _interopRequireDefault(require_validate());
  var _default = exports.default = version;
});

// node_modules/uuid/dist/index.js
var require_dist = __commonJS((exports) => {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "MAX", {
    enumerable: true,
    get: function() {
      return _max.default;
    }
  });
  Object.defineProperty(exports, "NIL", {
    enumerable: true,
    get: function() {
      return _nil.default;
    }
  });
  Object.defineProperty(exports, "parse", {
    enumerable: true,
    get: function() {
      return _parse.default;
    }
  });
  Object.defineProperty(exports, "stringify", {
    enumerable: true,
    get: function() {
      return _stringify.default;
    }
  });
  Object.defineProperty(exports, "v1", {
    enumerable: true,
    get: function() {
      return _v.default;
    }
  });
  Object.defineProperty(exports, "v1ToV6", {
    enumerable: true,
    get: function() {
      return _v1ToV.default;
    }
  });
  Object.defineProperty(exports, "v3", {
    enumerable: true,
    get: function() {
      return _v2.default;
    }
  });
  Object.defineProperty(exports, "v4", {
    enumerable: true,
    get: function() {
      return _v3.default;
    }
  });
  Object.defineProperty(exports, "v5", {
    enumerable: true,
    get: function() {
      return _v4.default;
    }
  });
  Object.defineProperty(exports, "v6", {
    enumerable: true,
    get: function() {
      return _v5.default;
    }
  });
  Object.defineProperty(exports, "v6ToV1", {
    enumerable: true,
    get: function() {
      return _v6ToV.default;
    }
  });
  Object.defineProperty(exports, "v7", {
    enumerable: true,
    get: function() {
      return _v6.default;
    }
  });
  Object.defineProperty(exports, "validate", {
    enumerable: true,
    get: function() {
      return _validate.default;
    }
  });
  Object.defineProperty(exports, "version", {
    enumerable: true,
    get: function() {
      return _version.default;
    }
  });
  var _max = _interopRequireDefault(require_max());
  var _nil = _interopRequireDefault(require_nil());
  var _parse = _interopRequireDefault(require_parse2());
  var _stringify = _interopRequireDefault(require_stringify());
  var _v = _interopRequireDefault(require_v1());
  var _v1ToV = _interopRequireDefault(require_v1ToV6());
  var _v2 = _interopRequireDefault(require_v3());
  var _v3 = _interopRequireDefault(require_v4());
  var _v4 = _interopRequireDefault(require_v5());
  var _v5 = _interopRequireDefault(require_v6());
  var _v6ToV = _interopRequireDefault(require_v6ToV1());
  var _v6 = _interopRequireDefault(require_v7());
  var _validate = _interopRequireDefault(require_validate());
  var _version = _interopRequireDefault(require_version());
});

// node_modules/@sinclair/typebox/build/esm/value/guard/guard.mjs
function IsAsyncIterator(value) {
  return IsObject(value) && Symbol.asyncIterator in value;
}
function IsIterator(value) {
  return IsObject(value) && Symbol.iterator in value;
}
function IsStandardObject(value) {
  return IsObject(value) && (Object.getPrototypeOf(value) === Object.prototype || Object.getPrototypeOf(value) === null);
}
function IsPromise(value) {
  return value instanceof Promise;
}
function IsDate(value) {
  return value instanceof Date && Number.isFinite(value.getTime());
}
function IsTypedArray(value) {
  return ArrayBuffer.isView(value);
}
function IsUint8Array(value) {
  return value instanceof globalThis.Uint8Array;
}
function HasPropertyKey(value, key) {
  return key in value;
}
function IsObject(value) {
  return value !== null && typeof value === "object";
}
function IsArray(value) {
  return Array.isArray(value) && !ArrayBuffer.isView(value);
}
function IsUndefined(value) {
  return value === undefined;
}
function IsNull(value) {
  return value === null;
}
function IsBoolean(value) {
  return typeof value === "boolean";
}
function IsNumber(value) {
  return typeof value === "number";
}
function IsInteger(value) {
  return Number.isInteger(value);
}
function IsBigInt(value) {
  return typeof value === "bigint";
}
function IsString(value) {
  return typeof value === "string";
}
function IsFunction(value) {
  return typeof value === "function";
}
function IsSymbol(value) {
  return typeof value === "symbol";
}
function IsValueType(value) {
  return IsBigInt(value) || IsBoolean(value) || IsNull(value) || IsNumber(value) || IsString(value) || IsSymbol(value) || IsUndefined(value);
}
// node_modules/@sinclair/typebox/build/esm/system/policy.mjs
var TypeSystemPolicy;
(function(TypeSystemPolicy2) {
  TypeSystemPolicy2.ExactOptionalPropertyTypes = false;
  TypeSystemPolicy2.AllowArrayObject = false;
  TypeSystemPolicy2.AllowNaN = false;
  TypeSystemPolicy2.AllowNullVoid = false;
  function IsExactOptionalProperty(value, key) {
    return TypeSystemPolicy2.ExactOptionalPropertyTypes ? key in value : value[key] !== undefined;
  }
  TypeSystemPolicy2.IsExactOptionalProperty = IsExactOptionalProperty;
  function IsObjectLike(value) {
    const isObject = IsObject(value);
    return TypeSystemPolicy2.AllowArrayObject ? isObject : isObject && !IsArray(value);
  }
  TypeSystemPolicy2.IsObjectLike = IsObjectLike;
  function IsRecordLike(value) {
    return IsObjectLike(value) && !(value instanceof Date) && !(value instanceof Uint8Array);
  }
  TypeSystemPolicy2.IsRecordLike = IsRecordLike;
  function IsNumberLike(value) {
    return TypeSystemPolicy2.AllowNaN ? IsNumber(value) : Number.isFinite(value);
  }
  TypeSystemPolicy2.IsNumberLike = IsNumberLike;
  function IsVoidLike(value) {
    const isUndefined = IsUndefined(value);
    return TypeSystemPolicy2.AllowNullVoid ? isUndefined || value === null : isUndefined;
  }
  TypeSystemPolicy2.IsVoidLike = IsVoidLike;
})(TypeSystemPolicy || (TypeSystemPolicy = {}));
// node_modules/@sinclair/typebox/build/esm/type/registry/format.mjs
var exports_format = {};
__export(exports_format, {
  Set: () => Set2,
  Has: () => Has,
  Get: () => Get,
  Entries: () => Entries,
  Delete: () => Delete,
  Clear: () => Clear
});
function Entries() {
  return new Map(map);
}
function Clear() {
  return map.clear();
}
function Delete(format) {
  return map.delete(format);
}
function Has(format) {
  return map.has(format);
}
function Set2(format, func) {
  map.set(format, func);
}
function Get(format) {
  return map.get(format);
}
var map = new Map;
// node_modules/@sinclair/typebox/build/esm/type/registry/type.mjs
var exports_type = {};
__export(exports_type, {
  Set: () => Set3,
  Has: () => Has2,
  Get: () => Get2,
  Entries: () => Entries2,
  Delete: () => Delete2,
  Clear: () => Clear2
});
function Entries2() {
  return new Map(map2);
}
function Clear2() {
  return map2.clear();
}
function Delete2(kind) {
  return map2.delete(kind);
}
function Has2(kind) {
  return map2.has(kind);
}
function Set3(kind, func) {
  map2.set(kind, func);
}
function Get2(kind) {
  return map2.get(kind);
}
var map2 = new Map;
// node_modules/@sinclair/typebox/build/esm/type/symbols/symbols.mjs
var TransformKind = Symbol.for("TypeBox.Transform");
var ReadonlyKind = Symbol.for("TypeBox.Readonly");
var OptionalKind = Symbol.for("TypeBox.Optional");
var Hint = Symbol.for("TypeBox.Hint");
var Kind = Symbol.for("TypeBox.Kind");
// node_modules/@sinclair/typebox/build/esm/type/unsafe/unsafe.mjs
function Unsafe(options = {}) {
  return {
    ...options,
    [Kind]: options[Kind] ?? "Unsafe"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/error/error.mjs
class TypeBoxError extends Error {
  constructor(message) {
    super(message);
  }
}
// node_modules/@sinclair/typebox/build/esm/system/system.mjs
class TypeSystemDuplicateTypeKind extends TypeBoxError {
  constructor(kind) {
    super(`Duplicate type kind '${kind}' detected`);
  }
}

class TypeSystemDuplicateFormat extends TypeBoxError {
  constructor(kind) {
    super(`Duplicate string format '${kind}' detected`);
  }
}
var TypeSystem;
(function(TypeSystem2) {
  function Type(kind, check) {
    if (exports_type.Has(kind))
      throw new TypeSystemDuplicateTypeKind(kind);
    exports_type.Set(kind, check);
    return (options = {}) => Unsafe({ ...options, [Kind]: kind });
  }
  TypeSystem2.Type = Type;
  function Format(format, check) {
    if (exports_format.Has(format))
      throw new TypeSystemDuplicateFormat(format);
    exports_format.Set(format, check);
    return format;
  }
  TypeSystem2.Format = Format;
})(TypeSystem || (TypeSystem = {}));
// node_modules/@sinclair/typebox/build/esm/type/mapped/mapped-result.mjs
function MappedResult(properties) {
  return {
    [Kind]: "MappedResult",
    properties
  };
}
// node_modules/@sinclair/typebox/build/esm/type/guard/value.mjs
var exports_value = {};
__export(exports_value, {
  IsUndefined: () => IsUndefined2,
  IsUint8Array: () => IsUint8Array2,
  IsSymbol: () => IsSymbol2,
  IsString: () => IsString2,
  IsRegExp: () => IsRegExp,
  IsObject: () => IsObject2,
  IsNumber: () => IsNumber2,
  IsNull: () => IsNull2,
  IsIterator: () => IsIterator2,
  IsFunction: () => IsFunction2,
  IsDate: () => IsDate2,
  IsBoolean: () => IsBoolean2,
  IsBigInt: () => IsBigInt2,
  IsAsyncIterator: () => IsAsyncIterator2,
  IsArray: () => IsArray2
});
function IsAsyncIterator2(value) {
  return IsObject2(value) && !IsArray2(value) && !IsUint8Array2(value) && Symbol.asyncIterator in value;
}
function IsArray2(value) {
  return Array.isArray(value);
}
function IsBigInt2(value) {
  return typeof value === "bigint";
}
function IsBoolean2(value) {
  return typeof value === "boolean";
}
function IsDate2(value) {
  return value instanceof globalThis.Date;
}
function IsFunction2(value) {
  return typeof value === "function";
}
function IsIterator2(value) {
  return IsObject2(value) && !IsArray2(value) && !IsUint8Array2(value) && Symbol.iterator in value;
}
function IsNull2(value) {
  return value === null;
}
function IsNumber2(value) {
  return typeof value === "number";
}
function IsObject2(value) {
  return typeof value === "object" && value !== null;
}
function IsRegExp(value) {
  return value instanceof globalThis.RegExp;
}
function IsString2(value) {
  return typeof value === "string";
}
function IsSymbol2(value) {
  return typeof value === "symbol";
}
function IsUint8Array2(value) {
  return value instanceof globalThis.Uint8Array;
}
function IsUndefined2(value) {
  return value === undefined;
}

// node_modules/@sinclair/typebox/build/esm/type/clone/value.mjs
function ArrayType(value) {
  return value.map((value2) => Visit(value2));
}
function DateType(value) {
  return new Date(value.getTime());
}
function Uint8ArrayType(value) {
  return new Uint8Array(value);
}
function RegExpType(value) {
  return new RegExp(value.source, value.flags);
}
function ObjectType(value) {
  const result = {};
  for (const key of Object.getOwnPropertyNames(value)) {
    result[key] = Visit(value[key]);
  }
  for (const key of Object.getOwnPropertySymbols(value)) {
    result[key] = Visit(value[key]);
  }
  return result;
}
function Visit(value) {
  return IsArray2(value) ? ArrayType(value) : IsDate2(value) ? DateType(value) : IsUint8Array2(value) ? Uint8ArrayType(value) : IsRegExp(value) ? RegExpType(value) : IsObject2(value) ? ObjectType(value) : value;
}
function Clone(value) {
  return Visit(value);
}

// node_modules/@sinclair/typebox/build/esm/type/clone/type.mjs
function CloneRest(schemas) {
  return schemas.map((schema) => CloneType(schema));
}
function CloneType(schema, options = {}) {
  return { ...Clone(schema), ...options };
}

// node_modules/@sinclair/typebox/build/esm/type/discard/discard.mjs
function DiscardKey(value2, key) {
  const { [key]: _, ...rest } = value2;
  return rest;
}
function Discard(value2, keys) {
  return keys.reduce((acc, key) => DiscardKey(acc, key), value2);
}
// node_modules/@sinclair/typebox/build/esm/type/array/array.mjs
function Array2(schema, options = {}) {
  return {
    ...options,
    [Kind]: "Array",
    type: "array",
    items: CloneType(schema)
  };
}
// node_modules/@sinclair/typebox/build/esm/type/async-iterator/async-iterator.mjs
function AsyncIterator(items, options = {}) {
  return {
    ...options,
    [Kind]: "AsyncIterator",
    type: "AsyncIterator",
    items: CloneType(items)
  };
}
// node_modules/@sinclair/typebox/build/esm/type/constructor/constructor.mjs
function Constructor(parameters, returns, options) {
  return {
    ...options,
    [Kind]: "Constructor",
    type: "Constructor",
    parameters: CloneRest(parameters),
    returns: CloneType(returns)
  };
}
// node_modules/@sinclair/typebox/build/esm/type/function/function.mjs
function Function2(parameters, returns, options) {
  return {
    ...options,
    [Kind]: "Function",
    type: "Function",
    parameters: CloneRest(parameters),
    returns: CloneType(returns)
  };
}
// node_modules/@sinclair/typebox/build/esm/type/never/never.mjs
function Never(options = {}) {
  return {
    ...options,
    [Kind]: "Never",
    not: {}
  };
}
// node_modules/@sinclair/typebox/build/esm/type/guard/kind.mjs
function IsReadonly(value2) {
  return IsObject2(value2) && value2[ReadonlyKind] === "Readonly";
}
function IsOptional(value2) {
  return IsObject2(value2) && value2[OptionalKind] === "Optional";
}
function IsAny(value2) {
  return IsKindOf(value2, "Any");
}
function IsArray3(value2) {
  return IsKindOf(value2, "Array");
}
function IsAsyncIterator3(value2) {
  return IsKindOf(value2, "AsyncIterator");
}
function IsBigInt3(value2) {
  return IsKindOf(value2, "BigInt");
}
function IsBoolean3(value2) {
  return IsKindOf(value2, "Boolean");
}
function IsConstructor(value2) {
  return IsKindOf(value2, "Constructor");
}
function IsDate3(value2) {
  return IsKindOf(value2, "Date");
}
function IsFunction3(value2) {
  return IsKindOf(value2, "Function");
}
function IsInteger2(value2) {
  return IsKindOf(value2, "Integer");
}
function IsIntersect(value2) {
  return IsKindOf(value2, "Intersect");
}
function IsIterator3(value2) {
  return IsKindOf(value2, "Iterator");
}
function IsKindOf(value2, kind) {
  return IsObject2(value2) && Kind in value2 && value2[Kind] === kind;
}
function IsLiteral(value2) {
  return IsKindOf(value2, "Literal");
}
function IsMappedKey(value2) {
  return IsKindOf(value2, "MappedKey");
}
function IsMappedResult(value2) {
  return IsKindOf(value2, "MappedResult");
}
function IsNever(value2) {
  return IsKindOf(value2, "Never");
}
function IsNot(value2) {
  return IsKindOf(value2, "Not");
}
function IsNull3(value2) {
  return IsKindOf(value2, "Null");
}
function IsNumber3(value2) {
  return IsKindOf(value2, "Number");
}
function IsObject3(value2) {
  return IsKindOf(value2, "Object");
}
function IsPromise2(value2) {
  return IsKindOf(value2, "Promise");
}
function IsRecord(value2) {
  return IsKindOf(value2, "Record");
}
function IsRef(value2) {
  return IsKindOf(value2, "Ref");
}
function IsRegExp2(value2) {
  return IsKindOf(value2, "RegExp");
}
function IsString3(value2) {
  return IsKindOf(value2, "String");
}
function IsSymbol3(value2) {
  return IsKindOf(value2, "Symbol");
}
function IsTemplateLiteral(value2) {
  return IsKindOf(value2, "TemplateLiteral");
}
function IsThis(value2) {
  return IsKindOf(value2, "This");
}
function IsTransform(value2) {
  return IsObject2(value2) && TransformKind in value2;
}
function IsTuple(value2) {
  return IsKindOf(value2, "Tuple");
}
function IsUndefined3(value2) {
  return IsKindOf(value2, "Undefined");
}
function IsUnion(value2) {
  return IsKindOf(value2, "Union");
}
function IsUint8Array3(value2) {
  return IsKindOf(value2, "Uint8Array");
}
function IsUnknown(value2) {
  return IsKindOf(value2, "Unknown");
}
function IsUnsafe(value2) {
  return IsKindOf(value2, "Unsafe");
}
function IsVoid(value2) {
  return IsKindOf(value2, "Void");
}
function IsKind(value2) {
  return IsObject2(value2) && Kind in value2 && IsString2(value2[Kind]);
}
function IsSchema(value2) {
  return IsAny(value2) || IsArray3(value2) || IsBoolean3(value2) || IsBigInt3(value2) || IsAsyncIterator3(value2) || IsConstructor(value2) || IsDate3(value2) || IsFunction3(value2) || IsInteger2(value2) || IsIntersect(value2) || IsIterator3(value2) || IsLiteral(value2) || IsMappedKey(value2) || IsMappedResult(value2) || IsNever(value2) || IsNot(value2) || IsNull3(value2) || IsNumber3(value2) || IsObject3(value2) || IsPromise2(value2) || IsRecord(value2) || IsRef(value2) || IsRegExp2(value2) || IsString3(value2) || IsSymbol3(value2) || IsTemplateLiteral(value2) || IsThis(value2) || IsTuple(value2) || IsUndefined3(value2) || IsUnion(value2) || IsUint8Array3(value2) || IsUnknown(value2) || IsUnsafe(value2) || IsVoid(value2) || IsKind(value2);
}

// node_modules/@sinclair/typebox/build/esm/type/optional/optional.mjs
function RemoveOptional(schema) {
  return Discard(CloneType(schema), [OptionalKind]);
}
function AddOptional(schema) {
  return { ...CloneType(schema), [OptionalKind]: "Optional" };
}
function OptionalWithFlag(schema, F) {
  return F === false ? RemoveOptional(schema) : AddOptional(schema);
}
function Optional(schema, enable) {
  const F = enable ?? true;
  return IsMappedResult(schema) ? OptionalFromMappedResult(schema, F) : OptionalWithFlag(schema, F);
}

// node_modules/@sinclair/typebox/build/esm/type/optional/optional-from-mapped-result.mjs
function FromProperties(P, F) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Optional(P[K2], F);
  return Acc;
}
function FromMappedResult(R, F) {
  return FromProperties(R.properties, F);
}
function OptionalFromMappedResult(R, F) {
  const P = FromMappedResult(R, F);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/intersect/intersect-create.mjs
function IntersectCreate(T, options) {
  const allObjects = T.every((schema) => IsObject3(schema));
  const clonedUnevaluatedProperties = IsSchema(options.unevaluatedProperties) ? { unevaluatedProperties: CloneType(options.unevaluatedProperties) } : {};
  return options.unevaluatedProperties === false || IsSchema(options.unevaluatedProperties) || allObjects ? { ...options, ...clonedUnevaluatedProperties, [Kind]: "Intersect", type: "object", allOf: CloneRest(T) } : { ...options, ...clonedUnevaluatedProperties, [Kind]: "Intersect", allOf: CloneRest(T) };
}

// node_modules/@sinclair/typebox/build/esm/type/intersect/intersect-evaluated.mjs
function IsIntersectOptional(T) {
  return T.every((L) => IsOptional(L));
}
function RemoveOptionalFromType(T) {
  return Discard(T, [OptionalKind]);
}
function RemoveOptionalFromRest(T) {
  return T.map((L) => IsOptional(L) ? RemoveOptionalFromType(L) : L);
}
function ResolveIntersect(T, options) {
  return IsIntersectOptional(T) ? Optional(IntersectCreate(RemoveOptionalFromRest(T), options)) : IntersectCreate(RemoveOptionalFromRest(T), options);
}
function IntersectEvaluated(T, options = {}) {
  if (T.length === 0)
    return Never(options);
  if (T.length === 1)
    return CloneType(T[0], options);
  if (T.some((schema) => IsTransform(schema)))
    throw new Error("Cannot intersect transform types");
  return ResolveIntersect(T, options);
}
// node_modules/@sinclair/typebox/build/esm/type/intersect/intersect.mjs
function Intersect(T, options = {}) {
  if (T.length === 0)
    return Never(options);
  if (T.length === 1)
    return CloneType(T[0], options);
  if (T.some((schema) => IsTransform(schema)))
    throw new Error("Cannot intersect transform types");
  return IntersectCreate(T, options);
}
// node_modules/@sinclair/typebox/build/esm/type/union/union-create.mjs
function UnionCreate(T, options) {
  return { ...options, [Kind]: "Union", anyOf: CloneRest(T) };
}

// node_modules/@sinclair/typebox/build/esm/type/union/union-evaluated.mjs
function IsUnionOptional(T) {
  return T.some((L) => IsOptional(L));
}
function RemoveOptionalFromRest2(T) {
  return T.map((L) => IsOptional(L) ? RemoveOptionalFromType2(L) : L);
}
function RemoveOptionalFromType2(T) {
  return Discard(T, [OptionalKind]);
}
function ResolveUnion(T, options) {
  return IsUnionOptional(T) ? Optional(UnionCreate(RemoveOptionalFromRest2(T), options)) : UnionCreate(RemoveOptionalFromRest2(T), options);
}
function UnionEvaluated(T, options = {}) {
  return T.length === 0 ? Never(options) : T.length === 1 ? CloneType(T[0], options) : ResolveUnion(T, options);
}
// node_modules/@sinclair/typebox/build/esm/type/union/union.mjs
function Union(T, options = {}) {
  return T.length === 0 ? Never(options) : T.length === 1 ? CloneType(T[0], options) : UnionCreate(T, options);
}
// node_modules/@sinclair/typebox/build/esm/type/template-literal/parse.mjs
function Unescape(pattern) {
  return pattern.replace(/\\\$/g, "$").replace(/\\\*/g, "*").replace(/\\\^/g, "^").replace(/\\\|/g, "|").replace(/\\\(/g, "(").replace(/\\\)/g, ")");
}
function IsNonEscaped(pattern, index, char) {
  return pattern[index] === char && pattern.charCodeAt(index - 1) !== 92;
}
function IsOpenParen(pattern, index) {
  return IsNonEscaped(pattern, index, "(");
}
function IsCloseParen(pattern, index) {
  return IsNonEscaped(pattern, index, ")");
}
function IsSeparator(pattern, index) {
  return IsNonEscaped(pattern, index, "|");
}
function IsGroup(pattern) {
  if (!(IsOpenParen(pattern, 0) && IsCloseParen(pattern, pattern.length - 1)))
    return false;
  let count = 0;
  for (let index = 0;index < pattern.length; index++) {
    if (IsOpenParen(pattern, index))
      count += 1;
    if (IsCloseParen(pattern, index))
      count -= 1;
    if (count === 0 && index !== pattern.length - 1)
      return false;
  }
  return true;
}
function InGroup(pattern) {
  return pattern.slice(1, pattern.length - 1);
}
function IsPrecedenceOr(pattern) {
  let count = 0;
  for (let index = 0;index < pattern.length; index++) {
    if (IsOpenParen(pattern, index))
      count += 1;
    if (IsCloseParen(pattern, index))
      count -= 1;
    if (IsSeparator(pattern, index) && count === 0)
      return true;
  }
  return false;
}
function IsPrecedenceAnd(pattern) {
  for (let index = 0;index < pattern.length; index++) {
    if (IsOpenParen(pattern, index))
      return true;
  }
  return false;
}
function Or(pattern) {
  let [count, start] = [0, 0];
  const expressions = [];
  for (let index = 0;index < pattern.length; index++) {
    if (IsOpenParen(pattern, index))
      count += 1;
    if (IsCloseParen(pattern, index))
      count -= 1;
    if (IsSeparator(pattern, index) && count === 0) {
      const range2 = pattern.slice(start, index);
      if (range2.length > 0)
        expressions.push(TemplateLiteralParse(range2));
      start = index + 1;
    }
  }
  const range = pattern.slice(start);
  if (range.length > 0)
    expressions.push(TemplateLiteralParse(range));
  if (expressions.length === 0)
    return { type: "const", const: "" };
  if (expressions.length === 1)
    return expressions[0];
  return { type: "or", expr: expressions };
}
function And(pattern) {
  function Group(value2, index) {
    if (!IsOpenParen(value2, index))
      throw new TemplateLiteralParserError(`TemplateLiteralParser: Index must point to open parens`);
    let count = 0;
    for (let scan = index;scan < value2.length; scan++) {
      if (IsOpenParen(value2, scan))
        count += 1;
      if (IsCloseParen(value2, scan))
        count -= 1;
      if (count === 0)
        return [index, scan];
    }
    throw new TemplateLiteralParserError(`TemplateLiteralParser: Unclosed group parens in expression`);
  }
  function Range(pattern2, index) {
    for (let scan = index;scan < pattern2.length; scan++) {
      if (IsOpenParen(pattern2, scan))
        return [index, scan];
    }
    return [index, pattern2.length];
  }
  const expressions = [];
  for (let index = 0;index < pattern.length; index++) {
    if (IsOpenParen(pattern, index)) {
      const [start, end] = Group(pattern, index);
      const range = pattern.slice(start, end + 1);
      expressions.push(TemplateLiteralParse(range));
      index = end;
    } else {
      const [start, end] = Range(pattern, index);
      const range = pattern.slice(start, end);
      if (range.length > 0)
        expressions.push(TemplateLiteralParse(range));
      index = end - 1;
    }
  }
  return expressions.length === 0 ? { type: "const", const: "" } : expressions.length === 1 ? expressions[0] : { type: "and", expr: expressions };
}
function TemplateLiteralParse(pattern) {
  return IsGroup(pattern) ? TemplateLiteralParse(InGroup(pattern)) : IsPrecedenceOr(pattern) ? Or(pattern) : IsPrecedenceAnd(pattern) ? And(pattern) : { type: "const", const: Unescape(pattern) };
}
function TemplateLiteralParseExact(pattern) {
  return TemplateLiteralParse(pattern.slice(1, pattern.length - 1));
}

class TemplateLiteralParserError extends TypeBoxError {
}

// node_modules/@sinclair/typebox/build/esm/type/template-literal/finite.mjs
function IsNumberExpression(expression) {
  return expression.type === "or" && expression.expr.length === 2 && expression.expr[0].type === "const" && expression.expr[0].const === "0" && expression.expr[1].type === "const" && expression.expr[1].const === "[1-9][0-9]*";
}
function IsBooleanExpression(expression) {
  return expression.type === "or" && expression.expr.length === 2 && expression.expr[0].type === "const" && expression.expr[0].const === "true" && expression.expr[1].type === "const" && expression.expr[1].const === "false";
}
function IsStringExpression(expression) {
  return expression.type === "const" && expression.const === ".*";
}
function IsTemplateLiteralExpressionFinite(expression) {
  return IsNumberExpression(expression) || IsStringExpression(expression) ? false : IsBooleanExpression(expression) ? true : expression.type === "and" ? expression.expr.every((expr) => IsTemplateLiteralExpressionFinite(expr)) : expression.type === "or" ? expression.expr.every((expr) => IsTemplateLiteralExpressionFinite(expr)) : expression.type === "const" ? true : (() => {
    throw new TemplateLiteralFiniteError(`Unknown expression type`);
  })();
}
function IsTemplateLiteralFinite(schema) {
  const expression = TemplateLiteralParseExact(schema.pattern);
  return IsTemplateLiteralExpressionFinite(expression);
}

class TemplateLiteralFiniteError extends TypeBoxError {
}
// node_modules/@sinclair/typebox/build/esm/type/template-literal/generate.mjs
function* GenerateReduce(buffer) {
  if (buffer.length === 1)
    return yield* buffer[0];
  for (const left of buffer[0]) {
    for (const right of GenerateReduce(buffer.slice(1))) {
      yield `${left}${right}`;
    }
  }
}
function* GenerateAnd(expression) {
  return yield* GenerateReduce(expression.expr.map((expr) => [...TemplateLiteralExpressionGenerate(expr)]));
}
function* GenerateOr(expression) {
  for (const expr of expression.expr)
    yield* TemplateLiteralExpressionGenerate(expr);
}
function* GenerateConst(expression) {
  return yield expression.const;
}
function* TemplateLiteralExpressionGenerate(expression) {
  return expression.type === "and" ? yield* GenerateAnd(expression) : expression.type === "or" ? yield* GenerateOr(expression) : expression.type === "const" ? yield* GenerateConst(expression) : (() => {
    throw new TemplateLiteralGenerateError("Unknown expression");
  })();
}
function TemplateLiteralGenerate(schema) {
  const expression = TemplateLiteralParseExact(schema.pattern);
  return IsTemplateLiteralExpressionFinite(expression) ? [...TemplateLiteralExpressionGenerate(expression)] : [];
}

class TemplateLiteralGenerateError extends TypeBoxError {
}
// node_modules/@sinclair/typebox/build/esm/type/literal/literal.mjs
function Literal(value2, options = {}) {
  return {
    ...options,
    [Kind]: "Literal",
    const: value2,
    type: typeof value2
  };
}
// node_modules/@sinclair/typebox/build/esm/type/boolean/boolean.mjs
function Boolean2(options = {}) {
  return {
    ...options,
    [Kind]: "Boolean",
    type: "boolean"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/bigint/bigint.mjs
function BigInt2(options = {}) {
  return {
    ...options,
    [Kind]: "BigInt",
    type: "bigint"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/number/number.mjs
function Number2(options = {}) {
  return {
    ...options,
    [Kind]: "Number",
    type: "number"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/string/string.mjs
function String2(options = {}) {
  return { ...options, [Kind]: "String", type: "string" };
}
// node_modules/@sinclair/typebox/build/esm/type/template-literal/syntax.mjs
function* FromUnion(syntax) {
  const trim = syntax.trim().replace(/"|'/g, "");
  return trim === "boolean" ? yield Boolean2() : trim === "number" ? yield Number2() : trim === "bigint" ? yield BigInt2() : trim === "string" ? yield String2() : yield (() => {
    const literals = trim.split("|").map((literal3) => Literal(literal3.trim()));
    return literals.length === 0 ? Never() : literals.length === 1 ? literals[0] : UnionEvaluated(literals);
  })();
}
function* FromTerminal(syntax) {
  if (syntax[1] !== "{") {
    const L = Literal("$");
    const R = FromSyntax(syntax.slice(1));
    return yield* [L, ...R];
  }
  for (let i = 2;i < syntax.length; i++) {
    if (syntax[i] === "}") {
      const L = FromUnion(syntax.slice(2, i));
      const R = FromSyntax(syntax.slice(i + 1));
      return yield* [...L, ...R];
    }
  }
  yield Literal(syntax);
}
function* FromSyntax(syntax) {
  for (let i = 0;i < syntax.length; i++) {
    if (syntax[i] === "$") {
      const L = Literal(syntax.slice(0, i));
      const R = FromTerminal(syntax.slice(i));
      return yield* [L, ...R];
    }
  }
  yield Literal(syntax);
}
function TemplateLiteralSyntax(syntax) {
  return [...FromSyntax(syntax)];
}
// node_modules/@sinclair/typebox/build/esm/type/patterns/patterns.mjs
var PatternBoolean = "(true|false)";
var PatternNumber = "(0|[1-9][0-9]*)";
var PatternString = "(.*)";
var PatternBooleanExact = `^${PatternBoolean}\$`;
var PatternNumberExact = `^${PatternNumber}\$`;
var PatternStringExact = `^${PatternString}\$`;
// node_modules/@sinclair/typebox/build/esm/type/template-literal/pattern.mjs
function Escape(value2) {
  return value2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function Visit2(schema, acc) {
  return IsTemplateLiteral(schema) ? schema.pattern.slice(1, schema.pattern.length - 1) : IsUnion(schema) ? `(${schema.anyOf.map((schema2) => Visit2(schema2, acc)).join("|")})` : IsNumber3(schema) ? `${acc}${PatternNumber}` : IsInteger2(schema) ? `${acc}${PatternNumber}` : IsBigInt3(schema) ? `${acc}${PatternNumber}` : IsString3(schema) ? `${acc}${PatternString}` : IsLiteral(schema) ? `${acc}${Escape(schema.const.toString())}` : IsBoolean3(schema) ? `${acc}${PatternBoolean}` : (() => {
    throw new TemplateLiteralPatternError(`Unexpected Kind '${schema[Kind]}'`);
  })();
}
function TemplateLiteralPattern(kinds) {
  return `^${kinds.map((schema) => Visit2(schema, "")).join("")}$`;
}

class TemplateLiteralPatternError extends TypeBoxError {
}
// node_modules/@sinclair/typebox/build/esm/type/template-literal/union.mjs
function TemplateLiteralToUnion(schema) {
  const R = TemplateLiteralGenerate(schema);
  const L = R.map((S) => Literal(S));
  return UnionEvaluated(L);
}
// node_modules/@sinclair/typebox/build/esm/type/template-literal/template-literal.mjs
function TemplateLiteral(unresolved, options = {}) {
  const pattern2 = IsString2(unresolved) ? TemplateLiteralPattern(TemplateLiteralSyntax(unresolved)) : TemplateLiteralPattern(unresolved);
  return { ...options, [Kind]: "TemplateLiteral", type: "string", pattern: pattern2 };
}
// node_modules/@sinclair/typebox/build/esm/type/indexed/indexed-property-keys.mjs
function FromTemplateLiteral(T) {
  const R = TemplateLiteralGenerate(T);
  return R.map((S) => S.toString());
}
function FromUnion2(T) {
  const Acc = [];
  for (const L of T)
    Acc.push(...IndexPropertyKeys(L));
  return Acc;
}
function FromLiteral(T) {
  return [T.toString()];
}
function IndexPropertyKeys(T) {
  return [...new Set(IsTemplateLiteral(T) ? FromTemplateLiteral(T) : IsUnion(T) ? FromUnion2(T.anyOf) : IsLiteral(T) ? FromLiteral(T.const) : IsNumber3(T) ? ["[number]"] : IsInteger2(T) ? ["[number]"] : [])];
}

// node_modules/@sinclair/typebox/build/esm/type/indexed/indexed-from-mapped-result.mjs
function FromProperties2(T, P, options) {
  const Acc = {};
  for (const K2 of Object.getOwnPropertyNames(P)) {
    Acc[K2] = Index(T, IndexPropertyKeys(P[K2]), options);
  }
  return Acc;
}
function FromMappedResult2(T, R, options) {
  return FromProperties2(T, R.properties, options);
}
function IndexFromMappedResult(T, R, options) {
  const P = FromMappedResult2(T, R, options);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/indexed/indexed.mjs
function FromRest(T, K) {
  return T.map((L) => IndexFromPropertyKey(L, K));
}
function FromIntersectRest(T) {
  return T.filter((L) => !IsNever(L));
}
function FromIntersect(T, K) {
  return IntersectEvaluated(FromIntersectRest(FromRest(T, K)));
}
function FromUnionRest(T) {
  return T.some((L) => IsNever(L)) ? [] : T;
}
function FromUnion3(T, K) {
  return UnionEvaluated(FromUnionRest(FromRest(T, K)));
}
function FromTuple(T, K) {
  return K in T ? T[K] : K === "[number]" ? UnionEvaluated(T) : Never();
}
function FromArray(T, K) {
  return K === "[number]" ? T : Never();
}
function FromProperty(T, K) {
  return K in T ? T[K] : Never();
}
function IndexFromPropertyKey(T, K) {
  return IsIntersect(T) ? FromIntersect(T.allOf, K) : IsUnion(T) ? FromUnion3(T.anyOf, K) : IsTuple(T) ? FromTuple(T.items ?? [], K) : IsArray3(T) ? FromArray(T.items, K) : IsObject3(T) ? FromProperty(T.properties, K) : Never();
}
function IndexFromPropertyKeys(T, K) {
  return K.map((L) => IndexFromPropertyKey(T, L));
}
function FromSchema(T, K) {
  return UnionEvaluated(IndexFromPropertyKeys(T, K));
}
function Index(T, K, options = {}) {
  return IsMappedResult(K) ? CloneType(IndexFromMappedResult(T, K, options)) : IsMappedKey(K) ? CloneType(IndexFromMappedKey(T, K, options)) : IsSchema(K) ? CloneType(FromSchema(T, IndexPropertyKeys(K)), options) : CloneType(FromSchema(T, K), options);
}

// node_modules/@sinclair/typebox/build/esm/type/indexed/indexed-from-mapped-key.mjs
function MappedIndexPropertyKey(T, K, options) {
  return { [K]: Index(T, [K], options) };
}
function MappedIndexPropertyKeys(T, K, options) {
  return K.reduce((Acc, L) => {
    return { ...Acc, ...MappedIndexPropertyKey(T, L, options) };
  }, {});
}
function MappedIndexProperties(T, K, options) {
  return MappedIndexPropertyKeys(T, K.keys, options);
}
function IndexFromMappedKey(T, K, options) {
  const P = MappedIndexProperties(T, K, options);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/iterator/iterator.mjs
function Iterator(items, options = {}) {
  return {
    ...options,
    [Kind]: "Iterator",
    type: "Iterator",
    items: CloneType(items)
  };
}
// node_modules/@sinclair/typebox/build/esm/type/object/object.mjs
function _Object(properties, options = {}) {
  const propertyKeys = globalThis.Object.getOwnPropertyNames(properties);
  const optionalKeys = propertyKeys.filter((key) => IsOptional(properties[key]));
  const requiredKeys = propertyKeys.filter((name) => !optionalKeys.includes(name));
  const clonedAdditionalProperties = IsSchema(options.additionalProperties) ? { additionalProperties: CloneType(options.additionalProperties) } : {};
  const clonedProperties = {};
  for (const key of propertyKeys)
    clonedProperties[key] = CloneType(properties[key]);
  return requiredKeys.length > 0 ? { ...options, ...clonedAdditionalProperties, [Kind]: "Object", type: "object", properties: clonedProperties, required: requiredKeys } : { ...options, ...clonedAdditionalProperties, [Kind]: "Object", type: "object", properties: clonedProperties };
}
var Object2 = _Object;
// node_modules/@sinclair/typebox/build/esm/type/promise/promise.mjs
function Promise2(item, options = {}) {
  return {
    ...options,
    [Kind]: "Promise",
    type: "Promise",
    item: CloneType(item)
  };
}
// node_modules/@sinclair/typebox/build/esm/type/readonly/readonly.mjs
function RemoveReadonly(schema) {
  return Discard(CloneType(schema), [ReadonlyKind]);
}
function AddReadonly(schema) {
  return { ...CloneType(schema), [ReadonlyKind]: "Readonly" };
}
function ReadonlyWithFlag(schema, F) {
  return F === false ? RemoveReadonly(schema) : AddReadonly(schema);
}
function Readonly(schema, enable) {
  const F = enable ?? true;
  return IsMappedResult(schema) ? ReadonlyFromMappedResult(schema, F) : ReadonlyWithFlag(schema, F);
}

// node_modules/@sinclair/typebox/build/esm/type/readonly/readonly-from-mapped-result.mjs
function FromProperties3(K, F) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(K))
    Acc[K2] = Readonly(K[K2], F);
  return Acc;
}
function FromMappedResult3(R, F) {
  return FromProperties3(R.properties, F);
}
function ReadonlyFromMappedResult(R, F) {
  const P = FromMappedResult3(R, F);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/tuple/tuple.mjs
function Tuple(items, options = {}) {
  const [additionalItems, minItems, maxItems] = [false, items.length, items.length];
  return items.length > 0 ? { ...options, [Kind]: "Tuple", type: "array", items: CloneRest(items), additionalItems, minItems, maxItems } : { ...options, [Kind]: "Tuple", type: "array", minItems, maxItems };
}
// node_modules/@sinclair/typebox/build/esm/type/sets/set.mjs
function SetIncludes(T, S) {
  return T.includes(S);
}
function SetDistinct(T) {
  return [...new Set(T)];
}
function SetIntersect(T, S) {
  return T.filter((L) => S.includes(L));
}
function SetIntersectManyResolve(T, Init) {
  return T.reduce((Acc, L) => {
    return SetIntersect(Acc, L);
  }, Init);
}
function SetIntersectMany(T) {
  return T.length === 1 ? T[0] : T.length > 1 ? SetIntersectManyResolve(T.slice(1), T[0]) : [];
}
function SetUnionMany(T) {
  const Acc = [];
  for (const L of T)
    Acc.push(...L);
  return Acc;
}
// node_modules/@sinclair/typebox/build/esm/type/mapped/mapped.mjs
function FromMappedResult4(K, P) {
  return K in P ? FromSchemaType(K, P[K]) : MappedResult(P);
}
function MappedKeyToKnownMappedResultProperties(K) {
  return { [K]: Literal(K) };
}
function MappedKeyToUnknownMappedResultProperties(P) {
  const Acc = {};
  for (const L of P)
    Acc[L] = Literal(L);
  return Acc;
}
function MappedKeyToMappedResultProperties(K, P) {
  return SetIncludes(P, K) ? MappedKeyToKnownMappedResultProperties(K) : MappedKeyToUnknownMappedResultProperties(P);
}
function FromMappedKey(K, P) {
  const R = MappedKeyToMappedResultProperties(K, P);
  return FromMappedResult4(K, R);
}
function FromRest2(K, T) {
  return T.map((L) => FromSchemaType(K, L));
}
function FromProperties4(K, T) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(T))
    Acc[K2] = FromSchemaType(K, T[K2]);
  return Acc;
}
function FromSchemaType(K, T) {
  return IsOptional(T) ? Optional(FromSchemaType(K, Discard(T, [OptionalKind]))) : IsReadonly(T) ? Readonly(FromSchemaType(K, Discard(T, [ReadonlyKind]))) : IsMappedResult(T) ? FromMappedResult4(K, T.properties) : IsMappedKey(T) ? FromMappedKey(K, T.keys) : IsConstructor(T) ? Constructor(FromRest2(K, T.parameters), FromSchemaType(K, T.returns)) : IsFunction3(T) ? Function2(FromRest2(K, T.parameters), FromSchemaType(K, T.returns)) : IsAsyncIterator3(T) ? AsyncIterator(FromSchemaType(K, T.items)) : IsIterator3(T) ? Iterator(FromSchemaType(K, T.items)) : IsIntersect(T) ? Intersect(FromRest2(K, T.allOf)) : IsUnion(T) ? Union(FromRest2(K, T.anyOf)) : IsTuple(T) ? Tuple(FromRest2(K, T.items ?? [])) : IsObject3(T) ? Object2(FromProperties4(K, T.properties)) : IsArray3(T) ? Array2(FromSchemaType(K, T.items)) : IsPromise2(T) ? Promise2(FromSchemaType(K, T.item)) : T;
}
function MappedFunctionReturnType(K, T) {
  const Acc = {};
  for (const L of K)
    Acc[L] = FromSchemaType(L, T);
  return Acc;
}
function Mapped(key, map3, options = {}) {
  const K = IsSchema(key) ? IndexPropertyKeys(key) : key;
  const RT = map3({ [Kind]: "MappedKey", keys: K });
  const R = MappedFunctionReturnType(K, RT);
  return CloneType(Object2(R), options);
}
// node_modules/@sinclair/typebox/build/esm/type/keyof/keyof-property-keys.mjs
function FromRest3(T) {
  const Acc = [];
  for (const L of T)
    Acc.push(KeyOfPropertyKeys(L));
  return Acc;
}
function FromIntersect2(T) {
  const C = FromRest3(T);
  const R = SetUnionMany(C);
  return R;
}
function FromUnion4(T) {
  const C = FromRest3(T);
  const R = SetIntersectMany(C);
  return R;
}
function FromTuple2(T) {
  return T.map((_, I) => I.toString());
}
function FromArray2(_) {
  return ["[number]"];
}
function FromProperties5(T) {
  return globalThis.Object.getOwnPropertyNames(T);
}
function FromPatternProperties(patternProperties) {
  if (!includePatternProperties)
    return [];
  const patternPropertyKeys = globalThis.Object.getOwnPropertyNames(patternProperties);
  return patternPropertyKeys.map((key) => {
    return key[0] === "^" && key[key.length - 1] === "$" ? key.slice(1, key.length - 1) : key;
  });
}
function KeyOfPropertyKeys(T) {
  return IsIntersect(T) ? FromIntersect2(T.allOf) : IsUnion(T) ? FromUnion4(T.anyOf) : IsTuple(T) ? FromTuple2(T.items ?? []) : IsArray3(T) ? FromArray2(T.items) : IsObject3(T) ? FromProperties5(T.properties) : IsRecord(T) ? FromPatternProperties(T.patternProperties) : [];
}
function KeyOfPattern(schema) {
  includePatternProperties = true;
  const keys = KeyOfPropertyKeys(schema);
  includePatternProperties = false;
  const pattern3 = keys.map((key) => `(${key})`);
  return `^(${pattern3.join("|")})\$`;
}
var includePatternProperties = false;

// node_modules/@sinclair/typebox/build/esm/type/keyof/keyof.mjs
function KeyOfPropertyKeysToRest(T) {
  return T.map((L) => L === "[number]" ? Number2() : Literal(L));
}
function KeyOf(T, options = {}) {
  if (IsMappedResult(T)) {
    return KeyOfFromMappedResult(T, options);
  } else {
    const K = KeyOfPropertyKeys(T);
    const S = KeyOfPropertyKeysToRest(K);
    const U = UnionEvaluated(S);
    return CloneType(U, options);
  }
}

// node_modules/@sinclair/typebox/build/esm/type/keyof/keyof-from-mapped-result.mjs
function FromProperties6(K, options) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(K))
    Acc[K2] = KeyOf(K[K2], options);
  return Acc;
}
function FromMappedResult5(R, options) {
  return FromProperties6(R.properties, options);
}
function KeyOfFromMappedResult(R, options) {
  const P = FromMappedResult5(R, options);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/keyof/keyof-property-entries.mjs
function KeyOfPropertyEntries(schema) {
  const keys = KeyOfPropertyKeys(schema);
  const schemas = IndexFromPropertyKeys(schema, keys);
  return keys.map((_, index) => [keys[index], schemas[index]]);
}
// node_modules/@sinclair/typebox/build/esm/type/extends/extends-undefined.mjs
function Intersect2(schema) {
  return schema.allOf.every((schema2) => ExtendsUndefinedCheck(schema2));
}
function Union2(schema) {
  return schema.anyOf.some((schema2) => ExtendsUndefinedCheck(schema2));
}
function Not(schema) {
  return !ExtendsUndefinedCheck(schema.not);
}
function ExtendsUndefinedCheck(schema) {
  return schema[Kind] === "Intersect" ? Intersect2(schema) : schema[Kind] === "Union" ? Union2(schema) : schema[Kind] === "Not" ? Not(schema) : schema[Kind] === "Undefined" ? true : false;
}

// node_modules/@sinclair/typebox/build/esm/errors/function.mjs
function DefaultErrorFunction(error7) {
  switch (error7.errorType) {
    case ValueErrorType.ArrayContains:
      return "Expected array to contain at least one matching value";
    case ValueErrorType.ArrayMaxContains:
      return `Expected array to contain no more than ${error7.schema.maxContains} matching values`;
    case ValueErrorType.ArrayMinContains:
      return `Expected array to contain at least ${error7.schema.minContains} matching values`;
    case ValueErrorType.ArrayMaxItems:
      return `Expected array length to be less or equal to ${error7.schema.maxItems}`;
    case ValueErrorType.ArrayMinItems:
      return `Expected array length to be greater or equal to ${error7.schema.minItems}`;
    case ValueErrorType.ArrayUniqueItems:
      return "Expected array elements to be unique";
    case ValueErrorType.Array:
      return "Expected array";
    case ValueErrorType.AsyncIterator:
      return "Expected AsyncIterator";
    case ValueErrorType.BigIntExclusiveMaximum:
      return `Expected bigint to be less than ${error7.schema.exclusiveMaximum}`;
    case ValueErrorType.BigIntExclusiveMinimum:
      return `Expected bigint to be greater than ${error7.schema.exclusiveMinimum}`;
    case ValueErrorType.BigIntMaximum:
      return `Expected bigint to be less or equal to ${error7.schema.maximum}`;
    case ValueErrorType.BigIntMinimum:
      return `Expected bigint to be greater or equal to ${error7.schema.minimum}`;
    case ValueErrorType.BigIntMultipleOf:
      return `Expected bigint to be a multiple of ${error7.schema.multipleOf}`;
    case ValueErrorType.BigInt:
      return "Expected bigint";
    case ValueErrorType.Boolean:
      return "Expected boolean";
    case ValueErrorType.DateExclusiveMinimumTimestamp:
      return `Expected Date timestamp to be greater than ${error7.schema.exclusiveMinimumTimestamp}`;
    case ValueErrorType.DateExclusiveMaximumTimestamp:
      return `Expected Date timestamp to be less than ${error7.schema.exclusiveMaximumTimestamp}`;
    case ValueErrorType.DateMinimumTimestamp:
      return `Expected Date timestamp to be greater or equal to ${error7.schema.minimumTimestamp}`;
    case ValueErrorType.DateMaximumTimestamp:
      return `Expected Date timestamp to be less or equal to ${error7.schema.maximumTimestamp}`;
    case ValueErrorType.DateMultipleOfTimestamp:
      return `Expected Date timestamp to be a multiple of ${error7.schema.multipleOfTimestamp}`;
    case ValueErrorType.Date:
      return "Expected Date";
    case ValueErrorType.Function:
      return "Expected function";
    case ValueErrorType.IntegerExclusiveMaximum:
      return `Expected integer to be less than ${error7.schema.exclusiveMaximum}`;
    case ValueErrorType.IntegerExclusiveMinimum:
      return `Expected integer to be greater than ${error7.schema.exclusiveMinimum}`;
    case ValueErrorType.IntegerMaximum:
      return `Expected integer to be less or equal to ${error7.schema.maximum}`;
    case ValueErrorType.IntegerMinimum:
      return `Expected integer to be greater or equal to ${error7.schema.minimum}`;
    case ValueErrorType.IntegerMultipleOf:
      return `Expected integer to be a multiple of ${error7.schema.multipleOf}`;
    case ValueErrorType.Integer:
      return "Expected integer";
    case ValueErrorType.IntersectUnevaluatedProperties:
      return "Unexpected property";
    case ValueErrorType.Intersect:
      return "Expected all values to match";
    case ValueErrorType.Iterator:
      return "Expected Iterator";
    case ValueErrorType.Literal:
      return `Expected ${typeof error7.schema.const === "string" ? `'${error7.schema.const}'` : error7.schema.const}`;
    case ValueErrorType.Never:
      return "Never";
    case ValueErrorType.Not:
      return "Value should not match";
    case ValueErrorType.Null:
      return "Expected null";
    case ValueErrorType.NumberExclusiveMaximum:
      return `Expected number to be less than ${error7.schema.exclusiveMaximum}`;
    case ValueErrorType.NumberExclusiveMinimum:
      return `Expected number to be greater than ${error7.schema.exclusiveMinimum}`;
    case ValueErrorType.NumberMaximum:
      return `Expected number to be less or equal to ${error7.schema.maximum}`;
    case ValueErrorType.NumberMinimum:
      return `Expected number to be greater or equal to ${error7.schema.minimum}`;
    case ValueErrorType.NumberMultipleOf:
      return `Expected number to be a multiple of ${error7.schema.multipleOf}`;
    case ValueErrorType.Number:
      return "Expected number";
    case ValueErrorType.Object:
      return "Expected object";
    case ValueErrorType.ObjectAdditionalProperties:
      return "Unexpected property";
    case ValueErrorType.ObjectMaxProperties:
      return `Expected object to have no more than ${error7.schema.maxProperties} properties`;
    case ValueErrorType.ObjectMinProperties:
      return `Expected object to have at least ${error7.schema.minProperties} properties`;
    case ValueErrorType.ObjectRequiredProperty:
      return "Required property";
    case ValueErrorType.Promise:
      return "Expected Promise";
    case ValueErrorType.RegExp:
      return "Expected string to match regular expression";
    case ValueErrorType.StringFormatUnknown:
      return `Unknown format '${error7.schema.format}'`;
    case ValueErrorType.StringFormat:
      return `Expected string to match '${error7.schema.format}' format`;
    case ValueErrorType.StringMaxLength:
      return `Expected string length less or equal to ${error7.schema.maxLength}`;
    case ValueErrorType.StringMinLength:
      return `Expected string length greater or equal to ${error7.schema.minLength}`;
    case ValueErrorType.StringPattern:
      return `Expected string to match '${error7.schema.pattern}'`;
    case ValueErrorType.String:
      return "Expected string";
    case ValueErrorType.Symbol:
      return "Expected symbol";
    case ValueErrorType.TupleLength:
      return `Expected tuple to have ${error7.schema.maxItems || 0} elements`;
    case ValueErrorType.Tuple:
      return "Expected tuple";
    case ValueErrorType.Uint8ArrayMaxByteLength:
      return `Expected byte length less or equal to ${error7.schema.maxByteLength}`;
    case ValueErrorType.Uint8ArrayMinByteLength:
      return `Expected byte length greater or equal to ${error7.schema.minByteLength}`;
    case ValueErrorType.Uint8Array:
      return "Expected Uint8Array";
    case ValueErrorType.Undefined:
      return "Expected undefined";
    case ValueErrorType.Union:
      return "Expected union value";
    case ValueErrorType.Void:
      return "Expected void";
    case ValueErrorType.Kind:
      return `Expected kind '${error7.schema[Kind]}'`;
    default:
      return "Unknown error type";
  }
}
function GetErrorFunction() {
  return errorFunction;
}
var errorFunction = DefaultErrorFunction;

// node_modules/@sinclair/typebox/build/esm/value/deref/deref.mjs
function Resolve(schema, references) {
  const target = references.find((target2) => target2.$id === schema.$ref);
  if (target === undefined)
    throw new TypeDereferenceError(schema);
  return Deref(target, references);
}
function Deref(schema, references) {
  return schema[Kind] === "This" || schema[Kind] === "Ref" ? Resolve(schema, references) : schema;
}

class TypeDereferenceError extends TypeBoxError {
  constructor(schema) {
    super(`Unable to dereference schema with \$id '${schema.$id}'`);
    this.schema = schema;
  }
}
// node_modules/@sinclair/typebox/build/esm/value/hash/hash.mjs
function* NumberToBytes(value3) {
  const byteCount = value3 === 0 ? 1 : Math.ceil(Math.floor(Math.log2(value3) + 1) / 8);
  for (let i = 0;i < byteCount; i++) {
    yield value3 >> 8 * (byteCount - 1 - i) & 255;
  }
}
function ArrayType2(value3) {
  FNV1A64(ByteMarker.Array);
  for (const item of value3) {
    Visit3(item);
  }
}
function BooleanType(value3) {
  FNV1A64(ByteMarker.Boolean);
  FNV1A64(value3 ? 1 : 0);
}
function BigIntType(value3) {
  FNV1A64(ByteMarker.BigInt);
  F64In.setBigInt64(0, value3);
  for (const byte of F64Out) {
    FNV1A64(byte);
  }
}
function DateType2(value3) {
  FNV1A64(ByteMarker.Date);
  Visit3(value3.getTime());
}
function NullType(value3) {
  FNV1A64(ByteMarker.Null);
}
function NumberType(value3) {
  FNV1A64(ByteMarker.Number);
  F64In.setFloat64(0, value3);
  for (const byte of F64Out) {
    FNV1A64(byte);
  }
}
function ObjectType2(value3) {
  FNV1A64(ByteMarker.Object);
  for (const key of globalThis.Object.getOwnPropertyNames(value3).sort()) {
    Visit3(key);
    Visit3(value3[key]);
  }
}
function StringType(value3) {
  FNV1A64(ByteMarker.String);
  for (let i = 0;i < value3.length; i++) {
    for (const byte of NumberToBytes(value3.charCodeAt(i))) {
      FNV1A64(byte);
    }
  }
}
function SymbolType(value3) {
  FNV1A64(ByteMarker.Symbol);
  Visit3(value3.description);
}
function Uint8ArrayType2(value3) {
  FNV1A64(ByteMarker.Uint8Array);
  for (let i = 0;i < value3.length; i++) {
    FNV1A64(value3[i]);
  }
}
function UndefinedType(value3) {
  return FNV1A64(ByteMarker.Undefined);
}
function Visit3(value3) {
  if (IsArray(value3))
    return ArrayType2(value3);
  if (IsBoolean(value3))
    return BooleanType(value3);
  if (IsBigInt(value3))
    return BigIntType(value3);
  if (IsDate(value3))
    return DateType2(value3);
  if (IsNull(value3))
    return NullType(value3);
  if (IsNumber(value3))
    return NumberType(value3);
  if (IsStandardObject(value3))
    return ObjectType2(value3);
  if (IsString(value3))
    return StringType(value3);
  if (IsSymbol(value3))
    return SymbolType(value3);
  if (IsUint8Array(value3))
    return Uint8ArrayType2(value3);
  if (IsUndefined(value3))
    return UndefinedType(value3);
  throw new ValueHashError(value3);
}
function FNV1A64(byte) {
  Accumulator = Accumulator ^ Bytes[byte];
  Accumulator = Accumulator * Prime % Size;
}
function Hash(value3) {
  Accumulator = BigInt("14695981039346656037");
  Visit3(value3);
  return Accumulator;
}

class ValueHashError extends TypeBoxError {
  constructor(value3) {
    super(`Unable to hash value`);
    this.value = value3;
  }
}
var ByteMarker;
(function(ByteMarker2) {
  ByteMarker2[ByteMarker2["Undefined"] = 0] = "Undefined";
  ByteMarker2[ByteMarker2["Null"] = 1] = "Null";
  ByteMarker2[ByteMarker2["Boolean"] = 2] = "Boolean";
  ByteMarker2[ByteMarker2["Number"] = 3] = "Number";
  ByteMarker2[ByteMarker2["String"] = 4] = "String";
  ByteMarker2[ByteMarker2["Object"] = 5] = "Object";
  ByteMarker2[ByteMarker2["Array"] = 6] = "Array";
  ByteMarker2[ByteMarker2["Date"] = 7] = "Date";
  ByteMarker2[ByteMarker2["Uint8Array"] = 8] = "Uint8Array";
  ByteMarker2[ByteMarker2["Symbol"] = 9] = "Symbol";
  ByteMarker2[ByteMarker2["BigInt"] = 10] = "BigInt";
})(ByteMarker || (ByteMarker = {}));
var Accumulator = BigInt("14695981039346656037");
var [Prime, Size] = [BigInt("1099511628211"), BigInt("2") ** BigInt("64")];
var Bytes = Array.from({ length: 256 }).map((_, i) => BigInt(i));
var F64 = new Float64Array(1);
var F64In = new DataView(F64.buffer);
var F64Out = new Uint8Array(F64.buffer);
// node_modules/@sinclair/typebox/build/esm/errors/errors.mjs
function EscapeKey(key) {
  return key.replace(/~/g, "~0").replace(/\//g, "~1");
}
function IsDefined(value3) {
  return value3 !== undefined;
}
function Create(errorType, schema, path, value3) {
  return { type: errorType, schema, path, value: value3, message: GetErrorFunction()({ errorType, path, schema, value: value3 }) };
}
function* FromAny(schema, references, path, value3) {
}
function* FromArray3(schema, references, path, value3) {
  if (!IsArray(value3)) {
    return yield Create(ValueErrorType.Array, schema, path, value3);
  }
  if (IsDefined(schema.minItems) && !(value3.length >= schema.minItems)) {
    yield Create(ValueErrorType.ArrayMinItems, schema, path, value3);
  }
  if (IsDefined(schema.maxItems) && !(value3.length <= schema.maxItems)) {
    yield Create(ValueErrorType.ArrayMaxItems, schema, path, value3);
  }
  for (let i = 0;i < value3.length; i++) {
    yield* Visit4(schema.items, references, `${path}/${i}`, value3[i]);
  }
  if (schema.uniqueItems === true && !function() {
    const set2 = new Set;
    for (const element of value3) {
      const hashed = Hash(element);
      if (set2.has(hashed)) {
        return false;
      } else {
        set2.add(hashed);
      }
    }
    return true;
  }()) {
    yield Create(ValueErrorType.ArrayUniqueItems, schema, path, value3);
  }
  if (!(IsDefined(schema.contains) || IsDefined(schema.minContains) || IsDefined(schema.maxContains))) {
    return;
  }
  const containsSchema = IsDefined(schema.contains) ? schema.contains : Never();
  const containsCount = value3.reduce((acc, value4, index) => Visit4(containsSchema, references, `${path}${index}`, value4).next().done === true ? acc + 1 : acc, 0);
  if (containsCount === 0) {
    yield Create(ValueErrorType.ArrayContains, schema, path, value3);
  }
  if (IsNumber(schema.minContains) && containsCount < schema.minContains) {
    yield Create(ValueErrorType.ArrayMinContains, schema, path, value3);
  }
  if (IsNumber(schema.maxContains) && containsCount > schema.maxContains) {
    yield Create(ValueErrorType.ArrayMaxContains, schema, path, value3);
  }
}
function* FromAsyncIterator(schema, references, path, value3) {
  if (!IsAsyncIterator(value3))
    yield Create(ValueErrorType.AsyncIterator, schema, path, value3);
}
function* FromBigInt(schema, references, path, value3) {
  if (!IsBigInt(value3))
    return yield Create(ValueErrorType.BigInt, schema, path, value3);
  if (IsDefined(schema.exclusiveMaximum) && !(value3 < schema.exclusiveMaximum)) {
    yield Create(ValueErrorType.BigIntExclusiveMaximum, schema, path, value3);
  }
  if (IsDefined(schema.exclusiveMinimum) && !(value3 > schema.exclusiveMinimum)) {
    yield Create(ValueErrorType.BigIntExclusiveMinimum, schema, path, value3);
  }
  if (IsDefined(schema.maximum) && !(value3 <= schema.maximum)) {
    yield Create(ValueErrorType.BigIntMaximum, schema, path, value3);
  }
  if (IsDefined(schema.minimum) && !(value3 >= schema.minimum)) {
    yield Create(ValueErrorType.BigIntMinimum, schema, path, value3);
  }
  if (IsDefined(schema.multipleOf) && !(value3 % schema.multipleOf === BigInt(0))) {
    yield Create(ValueErrorType.BigIntMultipleOf, schema, path, value3);
  }
}
function* FromBoolean(schema, references, path, value3) {
  if (!IsBoolean(value3))
    yield Create(ValueErrorType.Boolean, schema, path, value3);
}
function* FromConstructor(schema, references, path, value3) {
  yield* Visit4(schema.returns, references, path, value3.prototype);
}
function* FromDate(schema, references, path, value3) {
  if (!IsDate(value3))
    return yield Create(ValueErrorType.Date, schema, path, value3);
  if (IsDefined(schema.exclusiveMaximumTimestamp) && !(value3.getTime() < schema.exclusiveMaximumTimestamp)) {
    yield Create(ValueErrorType.DateExclusiveMaximumTimestamp, schema, path, value3);
  }
  if (IsDefined(schema.exclusiveMinimumTimestamp) && !(value3.getTime() > schema.exclusiveMinimumTimestamp)) {
    yield Create(ValueErrorType.DateExclusiveMinimumTimestamp, schema, path, value3);
  }
  if (IsDefined(schema.maximumTimestamp) && !(value3.getTime() <= schema.maximumTimestamp)) {
    yield Create(ValueErrorType.DateMaximumTimestamp, schema, path, value3);
  }
  if (IsDefined(schema.minimumTimestamp) && !(value3.getTime() >= schema.minimumTimestamp)) {
    yield Create(ValueErrorType.DateMinimumTimestamp, schema, path, value3);
  }
  if (IsDefined(schema.multipleOfTimestamp) && !(value3.getTime() % schema.multipleOfTimestamp === 0)) {
    yield Create(ValueErrorType.DateMultipleOfTimestamp, schema, path, value3);
  }
}
function* FromFunction(schema, references, path, value3) {
  if (!IsFunction(value3))
    yield Create(ValueErrorType.Function, schema, path, value3);
}
function* FromInteger(schema, references, path, value3) {
  if (!IsInteger(value3))
    return yield Create(ValueErrorType.Integer, schema, path, value3);
  if (IsDefined(schema.exclusiveMaximum) && !(value3 < schema.exclusiveMaximum)) {
    yield Create(ValueErrorType.IntegerExclusiveMaximum, schema, path, value3);
  }
  if (IsDefined(schema.exclusiveMinimum) && !(value3 > schema.exclusiveMinimum)) {
    yield Create(ValueErrorType.IntegerExclusiveMinimum, schema, path, value3);
  }
  if (IsDefined(schema.maximum) && !(value3 <= schema.maximum)) {
    yield Create(ValueErrorType.IntegerMaximum, schema, path, value3);
  }
  if (IsDefined(schema.minimum) && !(value3 >= schema.minimum)) {
    yield Create(ValueErrorType.IntegerMinimum, schema, path, value3);
  }
  if (IsDefined(schema.multipleOf) && !(value3 % schema.multipleOf === 0)) {
    yield Create(ValueErrorType.IntegerMultipleOf, schema, path, value3);
  }
}
function* FromIntersect3(schema, references, path, value3) {
  for (const inner of schema.allOf) {
    const next = Visit4(inner, references, path, value3).next();
    if (!next.done) {
      yield Create(ValueErrorType.Intersect, schema, path, value3);
      yield next.value;
    }
  }
  if (schema.unevaluatedProperties === false) {
    const keyCheck = new RegExp(KeyOfPattern(schema));
    for (const valueKey of Object.getOwnPropertyNames(value3)) {
      if (!keyCheck.test(valueKey)) {
        yield Create(ValueErrorType.IntersectUnevaluatedProperties, schema, `${path}/${valueKey}`, value3);
      }
    }
  }
  if (typeof schema.unevaluatedProperties === "object") {
    const keyCheck = new RegExp(KeyOfPattern(schema));
    for (const valueKey of Object.getOwnPropertyNames(value3)) {
      if (!keyCheck.test(valueKey)) {
        const next = Visit4(schema.unevaluatedProperties, references, `${path}/${valueKey}`, value3[valueKey]).next();
        if (!next.done)
          yield next.value;
      }
    }
  }
}
function* FromIterator(schema, references, path, value3) {
  if (!IsIterator(value3))
    yield Create(ValueErrorType.Iterator, schema, path, value3);
}
function* FromLiteral2(schema, references, path, value3) {
  if (!(value3 === schema.const))
    yield Create(ValueErrorType.Literal, schema, path, value3);
}
function* FromNever(schema, references, path, value3) {
  yield Create(ValueErrorType.Never, schema, path, value3);
}
function* FromNot(schema, references, path, value3) {
  if (Visit4(schema.not, references, path, value3).next().done === true)
    yield Create(ValueErrorType.Not, schema, path, value3);
}
function* FromNull(schema, references, path, value3) {
  if (!IsNull(value3))
    yield Create(ValueErrorType.Null, schema, path, value3);
}
function* FromNumber(schema, references, path, value3) {
  if (!TypeSystemPolicy.IsNumberLike(value3))
    return yield Create(ValueErrorType.Number, schema, path, value3);
  if (IsDefined(schema.exclusiveMaximum) && !(value3 < schema.exclusiveMaximum)) {
    yield Create(ValueErrorType.NumberExclusiveMaximum, schema, path, value3);
  }
  if (IsDefined(schema.exclusiveMinimum) && !(value3 > schema.exclusiveMinimum)) {
    yield Create(ValueErrorType.NumberExclusiveMinimum, schema, path, value3);
  }
  if (IsDefined(schema.maximum) && !(value3 <= schema.maximum)) {
    yield Create(ValueErrorType.NumberMaximum, schema, path, value3);
  }
  if (IsDefined(schema.minimum) && !(value3 >= schema.minimum)) {
    yield Create(ValueErrorType.NumberMinimum, schema, path, value3);
  }
  if (IsDefined(schema.multipleOf) && !(value3 % schema.multipleOf === 0)) {
    yield Create(ValueErrorType.NumberMultipleOf, schema, path, value3);
  }
}
function* FromObject(schema, references, path, value3) {
  if (!TypeSystemPolicy.IsObjectLike(value3))
    return yield Create(ValueErrorType.Object, schema, path, value3);
  if (IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value3).length >= schema.minProperties)) {
    yield Create(ValueErrorType.ObjectMinProperties, schema, path, value3);
  }
  if (IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value3).length <= schema.maxProperties)) {
    yield Create(ValueErrorType.ObjectMaxProperties, schema, path, value3);
  }
  const requiredKeys = Array.isArray(schema.required) ? schema.required : [];
  const knownKeys = Object.getOwnPropertyNames(schema.properties);
  const unknownKeys = Object.getOwnPropertyNames(value3);
  for (const requiredKey of requiredKeys) {
    if (unknownKeys.includes(requiredKey))
      continue;
    yield Create(ValueErrorType.ObjectRequiredProperty, schema.properties[requiredKey], `${path}/${EscapeKey(requiredKey)}`, undefined);
  }
  if (schema.additionalProperties === false) {
    for (const valueKey of unknownKeys) {
      if (!knownKeys.includes(valueKey)) {
        yield Create(ValueErrorType.ObjectAdditionalProperties, schema, `${path}/${EscapeKey(valueKey)}`, value3[valueKey]);
      }
    }
  }
  if (typeof schema.additionalProperties === "object") {
    for (const valueKey of unknownKeys) {
      if (knownKeys.includes(valueKey))
        continue;
      yield* Visit4(schema.additionalProperties, references, `${path}/${EscapeKey(valueKey)}`, value3[valueKey]);
    }
  }
  for (const knownKey of knownKeys) {
    const property = schema.properties[knownKey];
    if (schema.required && schema.required.includes(knownKey)) {
      yield* Visit4(property, references, `${path}/${EscapeKey(knownKey)}`, value3[knownKey]);
      if (ExtendsUndefinedCheck(schema) && !(knownKey in value3)) {
        yield Create(ValueErrorType.ObjectRequiredProperty, property, `${path}/${EscapeKey(knownKey)}`, undefined);
      }
    } else {
      if (TypeSystemPolicy.IsExactOptionalProperty(value3, knownKey)) {
        yield* Visit4(property, references, `${path}/${EscapeKey(knownKey)}`, value3[knownKey]);
      }
    }
  }
}
function* FromPromise(schema, references, path, value3) {
  if (!IsPromise(value3))
    yield Create(ValueErrorType.Promise, schema, path, value3);
}
function* FromRecord(schema, references, path, value3) {
  if (!TypeSystemPolicy.IsRecordLike(value3))
    return yield Create(ValueErrorType.Object, schema, path, value3);
  if (IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value3).length >= schema.minProperties)) {
    yield Create(ValueErrorType.ObjectMinProperties, schema, path, value3);
  }
  if (IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value3).length <= schema.maxProperties)) {
    yield Create(ValueErrorType.ObjectMaxProperties, schema, path, value3);
  }
  const [patternKey, patternSchema] = Object.entries(schema.patternProperties)[0];
  const regex = new RegExp(patternKey);
  for (const [propertyKey, propertyValue] of Object.entries(value3)) {
    if (regex.test(propertyKey))
      yield* Visit4(patternSchema, references, `${path}/${EscapeKey(propertyKey)}`, propertyValue);
  }
  if (typeof schema.additionalProperties === "object") {
    for (const [propertyKey, propertyValue] of Object.entries(value3)) {
      if (!regex.test(propertyKey))
        yield* Visit4(schema.additionalProperties, references, `${path}/${EscapeKey(propertyKey)}`, propertyValue);
    }
  }
  if (schema.additionalProperties === false) {
    for (const [propertyKey, propertyValue] of Object.entries(value3)) {
      if (regex.test(propertyKey))
        continue;
      return yield Create(ValueErrorType.ObjectAdditionalProperties, schema, `${path}/${EscapeKey(propertyKey)}`, propertyValue);
    }
  }
}
function* FromRef(schema, references, path, value3) {
  yield* Visit4(Deref(schema, references), references, path, value3);
}
function* FromRegExp(schema, references, path, value3) {
  if (!IsString(value3))
    return yield Create(ValueErrorType.String, schema, path, value3);
  if (IsDefined(schema.minLength) && !(value3.length >= schema.minLength)) {
    yield Create(ValueErrorType.StringMinLength, schema, path, value3);
  }
  if (IsDefined(schema.maxLength) && !(value3.length <= schema.maxLength)) {
    yield Create(ValueErrorType.StringMaxLength, schema, path, value3);
  }
  const regex = new RegExp(schema.source, schema.flags);
  if (!regex.test(value3)) {
    return yield Create(ValueErrorType.RegExp, schema, path, value3);
  }
}
function* FromString(schema, references, path, value3) {
  if (!IsString(value3))
    return yield Create(ValueErrorType.String, schema, path, value3);
  if (IsDefined(schema.minLength) && !(value3.length >= schema.minLength)) {
    yield Create(ValueErrorType.StringMinLength, schema, path, value3);
  }
  if (IsDefined(schema.maxLength) && !(value3.length <= schema.maxLength)) {
    yield Create(ValueErrorType.StringMaxLength, schema, path, value3);
  }
  if (IsString(schema.pattern)) {
    const regex = new RegExp(schema.pattern);
    if (!regex.test(value3)) {
      yield Create(ValueErrorType.StringPattern, schema, path, value3);
    }
  }
  if (IsString(schema.format)) {
    if (!exports_format.Has(schema.format)) {
      yield Create(ValueErrorType.StringFormatUnknown, schema, path, value3);
    } else {
      const format = exports_format.Get(schema.format);
      if (!format(value3)) {
        yield Create(ValueErrorType.StringFormat, schema, path, value3);
      }
    }
  }
}
function* FromSymbol(schema, references, path, value3) {
  if (!IsSymbol(value3))
    yield Create(ValueErrorType.Symbol, schema, path, value3);
}
function* FromTemplateLiteral2(schema, references, path, value3) {
  if (!IsString(value3))
    return yield Create(ValueErrorType.String, schema, path, value3);
  const regex = new RegExp(schema.pattern);
  if (!regex.test(value3)) {
    yield Create(ValueErrorType.StringPattern, schema, path, value3);
  }
}
function* FromThis(schema, references, path, value3) {
  yield* Visit4(Deref(schema, references), references, path, value3);
}
function* FromTuple3(schema, references, path, value3) {
  if (!IsArray(value3))
    return yield Create(ValueErrorType.Tuple, schema, path, value3);
  if (schema.items === undefined && !(value3.length === 0)) {
    return yield Create(ValueErrorType.TupleLength, schema, path, value3);
  }
  if (!(value3.length === schema.maxItems)) {
    return yield Create(ValueErrorType.TupleLength, schema, path, value3);
  }
  if (!schema.items) {
    return;
  }
  for (let i = 0;i < schema.items.length; i++) {
    yield* Visit4(schema.items[i], references, `${path}/${i}`, value3[i]);
  }
}
function* FromUndefined(schema, references, path, value3) {
  if (!IsUndefined(value3))
    yield Create(ValueErrorType.Undefined, schema, path, value3);
}
function* FromUnion5(schema, references, path, value3) {
  let count = 0;
  for (const subschema of schema.anyOf) {
    const errors2 = [...Visit4(subschema, references, path, value3)];
    if (errors2.length === 0)
      return;
    count += errors2.length;
  }
  if (count > 0) {
    yield Create(ValueErrorType.Union, schema, path, value3);
  }
}
function* FromUint8Array(schema, references, path, value3) {
  if (!IsUint8Array(value3))
    return yield Create(ValueErrorType.Uint8Array, schema, path, value3);
  if (IsDefined(schema.maxByteLength) && !(value3.length <= schema.maxByteLength)) {
    yield Create(ValueErrorType.Uint8ArrayMaxByteLength, schema, path, value3);
  }
  if (IsDefined(schema.minByteLength) && !(value3.length >= schema.minByteLength)) {
    yield Create(ValueErrorType.Uint8ArrayMinByteLength, schema, path, value3);
  }
}
function* FromUnknown(schema, references, path, value3) {
}
function* FromVoid(schema, references, path, value3) {
  if (!TypeSystemPolicy.IsVoidLike(value3))
    yield Create(ValueErrorType.Void, schema, path, value3);
}
function* FromKind(schema, references, path, value3) {
  const check = exports_type.Get(schema[Kind]);
  if (!check(schema, value3))
    yield Create(ValueErrorType.Kind, schema, path, value3);
}
function* Visit4(schema, references, path, value3) {
  const references_ = IsDefined(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema_[Kind]) {
    case "Any":
      return yield* FromAny(schema_, references_, path, value3);
    case "Array":
      return yield* FromArray3(schema_, references_, path, value3);
    case "AsyncIterator":
      return yield* FromAsyncIterator(schema_, references_, path, value3);
    case "BigInt":
      return yield* FromBigInt(schema_, references_, path, value3);
    case "Boolean":
      return yield* FromBoolean(schema_, references_, path, value3);
    case "Constructor":
      return yield* FromConstructor(schema_, references_, path, value3);
    case "Date":
      return yield* FromDate(schema_, references_, path, value3);
    case "Function":
      return yield* FromFunction(schema_, references_, path, value3);
    case "Integer":
      return yield* FromInteger(schema_, references_, path, value3);
    case "Intersect":
      return yield* FromIntersect3(schema_, references_, path, value3);
    case "Iterator":
      return yield* FromIterator(schema_, references_, path, value3);
    case "Literal":
      return yield* FromLiteral2(schema_, references_, path, value3);
    case "Never":
      return yield* FromNever(schema_, references_, path, value3);
    case "Not":
      return yield* FromNot(schema_, references_, path, value3);
    case "Null":
      return yield* FromNull(schema_, references_, path, value3);
    case "Number":
      return yield* FromNumber(schema_, references_, path, value3);
    case "Object":
      return yield* FromObject(schema_, references_, path, value3);
    case "Promise":
      return yield* FromPromise(schema_, references_, path, value3);
    case "Record":
      return yield* FromRecord(schema_, references_, path, value3);
    case "Ref":
      return yield* FromRef(schema_, references_, path, value3);
    case "RegExp":
      return yield* FromRegExp(schema_, references_, path, value3);
    case "String":
      return yield* FromString(schema_, references_, path, value3);
    case "Symbol":
      return yield* FromSymbol(schema_, references_, path, value3);
    case "TemplateLiteral":
      return yield* FromTemplateLiteral2(schema_, references_, path, value3);
    case "This":
      return yield* FromThis(schema_, references_, path, value3);
    case "Tuple":
      return yield* FromTuple3(schema_, references_, path, value3);
    case "Undefined":
      return yield* FromUndefined(schema_, references_, path, value3);
    case "Union":
      return yield* FromUnion5(schema_, references_, path, value3);
    case "Uint8Array":
      return yield* FromUint8Array(schema_, references_, path, value3);
    case "Unknown":
      return yield* FromUnknown(schema_, references_, path, value3);
    case "Void":
      return yield* FromVoid(schema_, references_, path, value3);
    default:
      if (!exports_type.Has(schema_[Kind]))
        throw new ValueErrorsUnknownTypeError(schema);
      return yield* FromKind(schema_, references_, path, value3);
  }
}
function Errors(...args) {
  const iterator3 = args.length === 3 ? Visit4(args[0], args[1], "", args[2]) : Visit4(args[0], [], "", args[1]);
  return new ValueErrorIterator(iterator3);
}
var ValueErrorType;
(function(ValueErrorType2) {
  ValueErrorType2[ValueErrorType2["ArrayContains"] = 0] = "ArrayContains";
  ValueErrorType2[ValueErrorType2["ArrayMaxContains"] = 1] = "ArrayMaxContains";
  ValueErrorType2[ValueErrorType2["ArrayMaxItems"] = 2] = "ArrayMaxItems";
  ValueErrorType2[ValueErrorType2["ArrayMinContains"] = 3] = "ArrayMinContains";
  ValueErrorType2[ValueErrorType2["ArrayMinItems"] = 4] = "ArrayMinItems";
  ValueErrorType2[ValueErrorType2["ArrayUniqueItems"] = 5] = "ArrayUniqueItems";
  ValueErrorType2[ValueErrorType2["Array"] = 6] = "Array";
  ValueErrorType2[ValueErrorType2["AsyncIterator"] = 7] = "AsyncIterator";
  ValueErrorType2[ValueErrorType2["BigIntExclusiveMaximum"] = 8] = "BigIntExclusiveMaximum";
  ValueErrorType2[ValueErrorType2["BigIntExclusiveMinimum"] = 9] = "BigIntExclusiveMinimum";
  ValueErrorType2[ValueErrorType2["BigIntMaximum"] = 10] = "BigIntMaximum";
  ValueErrorType2[ValueErrorType2["BigIntMinimum"] = 11] = "BigIntMinimum";
  ValueErrorType2[ValueErrorType2["BigIntMultipleOf"] = 12] = "BigIntMultipleOf";
  ValueErrorType2[ValueErrorType2["BigInt"] = 13] = "BigInt";
  ValueErrorType2[ValueErrorType2["Boolean"] = 14] = "Boolean";
  ValueErrorType2[ValueErrorType2["DateExclusiveMaximumTimestamp"] = 15] = "DateExclusiveMaximumTimestamp";
  ValueErrorType2[ValueErrorType2["DateExclusiveMinimumTimestamp"] = 16] = "DateExclusiveMinimumTimestamp";
  ValueErrorType2[ValueErrorType2["DateMaximumTimestamp"] = 17] = "DateMaximumTimestamp";
  ValueErrorType2[ValueErrorType2["DateMinimumTimestamp"] = 18] = "DateMinimumTimestamp";
  ValueErrorType2[ValueErrorType2["DateMultipleOfTimestamp"] = 19] = "DateMultipleOfTimestamp";
  ValueErrorType2[ValueErrorType2["Date"] = 20] = "Date";
  ValueErrorType2[ValueErrorType2["Function"] = 21] = "Function";
  ValueErrorType2[ValueErrorType2["IntegerExclusiveMaximum"] = 22] = "IntegerExclusiveMaximum";
  ValueErrorType2[ValueErrorType2["IntegerExclusiveMinimum"] = 23] = "IntegerExclusiveMinimum";
  ValueErrorType2[ValueErrorType2["IntegerMaximum"] = 24] = "IntegerMaximum";
  ValueErrorType2[ValueErrorType2["IntegerMinimum"] = 25] = "IntegerMinimum";
  ValueErrorType2[ValueErrorType2["IntegerMultipleOf"] = 26] = "IntegerMultipleOf";
  ValueErrorType2[ValueErrorType2["Integer"] = 27] = "Integer";
  ValueErrorType2[ValueErrorType2["IntersectUnevaluatedProperties"] = 28] = "IntersectUnevaluatedProperties";
  ValueErrorType2[ValueErrorType2["Intersect"] = 29] = "Intersect";
  ValueErrorType2[ValueErrorType2["Iterator"] = 30] = "Iterator";
  ValueErrorType2[ValueErrorType2["Kind"] = 31] = "Kind";
  ValueErrorType2[ValueErrorType2["Literal"] = 32] = "Literal";
  ValueErrorType2[ValueErrorType2["Never"] = 33] = "Never";
  ValueErrorType2[ValueErrorType2["Not"] = 34] = "Not";
  ValueErrorType2[ValueErrorType2["Null"] = 35] = "Null";
  ValueErrorType2[ValueErrorType2["NumberExclusiveMaximum"] = 36] = "NumberExclusiveMaximum";
  ValueErrorType2[ValueErrorType2["NumberExclusiveMinimum"] = 37] = "NumberExclusiveMinimum";
  ValueErrorType2[ValueErrorType2["NumberMaximum"] = 38] = "NumberMaximum";
  ValueErrorType2[ValueErrorType2["NumberMinimum"] = 39] = "NumberMinimum";
  ValueErrorType2[ValueErrorType2["NumberMultipleOf"] = 40] = "NumberMultipleOf";
  ValueErrorType2[ValueErrorType2["Number"] = 41] = "Number";
  ValueErrorType2[ValueErrorType2["ObjectAdditionalProperties"] = 42] = "ObjectAdditionalProperties";
  ValueErrorType2[ValueErrorType2["ObjectMaxProperties"] = 43] = "ObjectMaxProperties";
  ValueErrorType2[ValueErrorType2["ObjectMinProperties"] = 44] = "ObjectMinProperties";
  ValueErrorType2[ValueErrorType2["ObjectRequiredProperty"] = 45] = "ObjectRequiredProperty";
  ValueErrorType2[ValueErrorType2["Object"] = 46] = "Object";
  ValueErrorType2[ValueErrorType2["Promise"] = 47] = "Promise";
  ValueErrorType2[ValueErrorType2["RegExp"] = 48] = "RegExp";
  ValueErrorType2[ValueErrorType2["StringFormatUnknown"] = 49] = "StringFormatUnknown";
  ValueErrorType2[ValueErrorType2["StringFormat"] = 50] = "StringFormat";
  ValueErrorType2[ValueErrorType2["StringMaxLength"] = 51] = "StringMaxLength";
  ValueErrorType2[ValueErrorType2["StringMinLength"] = 52] = "StringMinLength";
  ValueErrorType2[ValueErrorType2["StringPattern"] = 53] = "StringPattern";
  ValueErrorType2[ValueErrorType2["String"] = 54] = "String";
  ValueErrorType2[ValueErrorType2["Symbol"] = 55] = "Symbol";
  ValueErrorType2[ValueErrorType2["TupleLength"] = 56] = "TupleLength";
  ValueErrorType2[ValueErrorType2["Tuple"] = 57] = "Tuple";
  ValueErrorType2[ValueErrorType2["Uint8ArrayMaxByteLength"] = 58] = "Uint8ArrayMaxByteLength";
  ValueErrorType2[ValueErrorType2["Uint8ArrayMinByteLength"] = 59] = "Uint8ArrayMinByteLength";
  ValueErrorType2[ValueErrorType2["Uint8Array"] = 60] = "Uint8Array";
  ValueErrorType2[ValueErrorType2["Undefined"] = 61] = "Undefined";
  ValueErrorType2[ValueErrorType2["Union"] = 62] = "Union";
  ValueErrorType2[ValueErrorType2["Void"] = 63] = "Void";
})(ValueErrorType || (ValueErrorType = {}));

class ValueErrorsUnknownTypeError extends TypeBoxError {
  constructor(schema) {
    super("Unknown type");
    this.schema = schema;
  }
}

class ValueErrorIterator {
  constructor(iterator3) {
    this.iterator = iterator3;
  }
  [Symbol.iterator]() {
    return this.iterator;
  }
  First() {
    const next = this.iterator.next();
    return next.done ? undefined : next.value;
  }
}
// node_modules/@sinclair/typebox/build/esm/type/any/any.mjs
function Any(options = {}) {
  return { ...options, [Kind]: "Any" };
}
// node_modules/@sinclair/typebox/build/esm/type/unknown/unknown.mjs
function Unknown(options = {}) {
  return {
    ...options,
    [Kind]: "Unknown"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/guard/type.mjs
var exports_type2 = {};
__export(exports_type2, {
  TypeGuardUnknownTypeError: () => TypeGuardUnknownTypeError,
  IsVoid: () => IsVoid2,
  IsUnsafe: () => IsUnsafe2,
  IsUnknown: () => IsUnknown2,
  IsUnionLiteral: () => IsUnionLiteral,
  IsUnion: () => IsUnion2,
  IsUndefined: () => IsUndefined4,
  IsUint8Array: () => IsUint8Array4,
  IsTuple: () => IsTuple2,
  IsTransform: () => IsTransform2,
  IsThis: () => IsThis2,
  IsTemplateLiteral: () => IsTemplateLiteral2,
  IsSymbol: () => IsSymbol4,
  IsString: () => IsString4,
  IsSchema: () => IsSchema2,
  IsRegExp: () => IsRegExp3,
  IsRef: () => IsRef2,
  IsRecursive: () => IsRecursive,
  IsRecord: () => IsRecord2,
  IsReadonly: () => IsReadonly2,
  IsProperties: () => IsProperties,
  IsPromise: () => IsPromise3,
  IsOptional: () => IsOptional2,
  IsObject: () => IsObject4,
  IsNumber: () => IsNumber4,
  IsNull: () => IsNull4,
  IsNot: () => IsNot2,
  IsNever: () => IsNever2,
  IsMappedResult: () => IsMappedResult2,
  IsMappedKey: () => IsMappedKey2,
  IsLiteralValue: () => IsLiteralValue,
  IsLiteralString: () => IsLiteralString,
  IsLiteralNumber: () => IsLiteralNumber,
  IsLiteralBoolean: () => IsLiteralBoolean,
  IsLiteral: () => IsLiteral2,
  IsKindOf: () => IsKindOf2,
  IsKind: () => IsKind2,
  IsIterator: () => IsIterator4,
  IsIntersect: () => IsIntersect2,
  IsInteger: () => IsInteger3,
  IsFunction: () => IsFunction4,
  IsDate: () => IsDate4,
  IsConstructor: () => IsConstructor2,
  IsBoolean: () => IsBoolean4,
  IsBigInt: () => IsBigInt4,
  IsAsyncIterator: () => IsAsyncIterator4,
  IsArray: () => IsArray4,
  IsAny: () => IsAny2
});
function IsPattern(value3) {
  try {
    new RegExp(value3);
    return true;
  } catch {
    return false;
  }
}
function IsControlCharacterFree(value3) {
  if (!IsString2(value3))
    return false;
  for (let i = 0;i < value3.length; i++) {
    const code = value3.charCodeAt(i);
    if (code >= 7 && code <= 13 || code === 27 || code === 127) {
      return false;
    }
  }
  return true;
}
function IsAdditionalProperties(value3) {
  return IsOptionalBoolean(value3) || IsSchema2(value3);
}
function IsOptionalBigInt(value3) {
  return IsUndefined2(value3) || IsBigInt2(value3);
}
function IsOptionalNumber(value3) {
  return IsUndefined2(value3) || IsNumber2(value3);
}
function IsOptionalBoolean(value3) {
  return IsUndefined2(value3) || IsBoolean2(value3);
}
function IsOptionalString(value3) {
  return IsUndefined2(value3) || IsString2(value3);
}
function IsOptionalPattern(value3) {
  return IsUndefined2(value3) || IsString2(value3) && IsControlCharacterFree(value3) && IsPattern(value3);
}
function IsOptionalFormat(value3) {
  return IsUndefined2(value3) || IsString2(value3) && IsControlCharacterFree(value3);
}
function IsOptionalSchema(value3) {
  return IsUndefined2(value3) || IsSchema2(value3);
}
function IsReadonly2(value3) {
  return IsObject2(value3) && value3[ReadonlyKind] === "Readonly";
}
function IsOptional2(value3) {
  return IsObject2(value3) && value3[OptionalKind] === "Optional";
}
function IsAny2(value3) {
  return IsKindOf2(value3, "Any") && IsOptionalString(value3.$id);
}
function IsArray4(value3) {
  return IsKindOf2(value3, "Array") && value3.type === "array" && IsOptionalString(value3.$id) && IsSchema2(value3.items) && IsOptionalNumber(value3.minItems) && IsOptionalNumber(value3.maxItems) && IsOptionalBoolean(value3.uniqueItems) && IsOptionalSchema(value3.contains) && IsOptionalNumber(value3.minContains) && IsOptionalNumber(value3.maxContains);
}
function IsAsyncIterator4(value3) {
  return IsKindOf2(value3, "AsyncIterator") && value3.type === "AsyncIterator" && IsOptionalString(value3.$id) && IsSchema2(value3.items);
}
function IsBigInt4(value3) {
  return IsKindOf2(value3, "BigInt") && value3.type === "bigint" && IsOptionalString(value3.$id) && IsOptionalBigInt(value3.exclusiveMaximum) && IsOptionalBigInt(value3.exclusiveMinimum) && IsOptionalBigInt(value3.maximum) && IsOptionalBigInt(value3.minimum) && IsOptionalBigInt(value3.multipleOf);
}
function IsBoolean4(value3) {
  return IsKindOf2(value3, "Boolean") && value3.type === "boolean" && IsOptionalString(value3.$id);
}
function IsConstructor2(value3) {
  return IsKindOf2(value3, "Constructor") && value3.type === "Constructor" && IsOptionalString(value3.$id) && IsArray2(value3.parameters) && value3.parameters.every((schema) => IsSchema2(schema)) && IsSchema2(value3.returns);
}
function IsDate4(value3) {
  return IsKindOf2(value3, "Date") && value3.type === "Date" && IsOptionalString(value3.$id) && IsOptionalNumber(value3.exclusiveMaximumTimestamp) && IsOptionalNumber(value3.exclusiveMinimumTimestamp) && IsOptionalNumber(value3.maximumTimestamp) && IsOptionalNumber(value3.minimumTimestamp) && IsOptionalNumber(value3.multipleOfTimestamp);
}
function IsFunction4(value3) {
  return IsKindOf2(value3, "Function") && value3.type === "Function" && IsOptionalString(value3.$id) && IsArray2(value3.parameters) && value3.parameters.every((schema) => IsSchema2(schema)) && IsSchema2(value3.returns);
}
function IsInteger3(value3) {
  return IsKindOf2(value3, "Integer") && value3.type === "integer" && IsOptionalString(value3.$id) && IsOptionalNumber(value3.exclusiveMaximum) && IsOptionalNumber(value3.exclusiveMinimum) && IsOptionalNumber(value3.maximum) && IsOptionalNumber(value3.minimum) && IsOptionalNumber(value3.multipleOf);
}
function IsProperties(value3) {
  return IsObject2(value3) && Object.entries(value3).every(([key, schema]) => IsControlCharacterFree(key) && IsSchema2(schema));
}
function IsIntersect2(value3) {
  return IsKindOf2(value3, "Intersect") && (IsString2(value3.type) && value3.type !== "object" ? false : true) && IsArray2(value3.allOf) && value3.allOf.every((schema) => IsSchema2(schema) && !IsTransform2(schema)) && IsOptionalString(value3.type) && (IsOptionalBoolean(value3.unevaluatedProperties) || IsOptionalSchema(value3.unevaluatedProperties)) && IsOptionalString(value3.$id);
}
function IsIterator4(value3) {
  return IsKindOf2(value3, "Iterator") && value3.type === "Iterator" && IsOptionalString(value3.$id) && IsSchema2(value3.items);
}
function IsKindOf2(value3, kind14) {
  return IsObject2(value3) && Kind in value3 && value3[Kind] === kind14;
}
function IsLiteralString(value3) {
  return IsLiteral2(value3) && IsString2(value3.const);
}
function IsLiteralNumber(value3) {
  return IsLiteral2(value3) && IsNumber2(value3.const);
}
function IsLiteralBoolean(value3) {
  return IsLiteral2(value3) && IsBoolean2(value3.const);
}
function IsLiteral2(value3) {
  return IsKindOf2(value3, "Literal") && IsOptionalString(value3.$id) && IsLiteralValue(value3.const);
}
function IsLiteralValue(value3) {
  return IsBoolean2(value3) || IsNumber2(value3) || IsString2(value3);
}
function IsMappedKey2(value3) {
  return IsKindOf2(value3, "MappedKey") && IsArray2(value3.keys) && value3.keys.every((key) => IsNumber2(key) || IsString2(key));
}
function IsMappedResult2(value3) {
  return IsKindOf2(value3, "MappedResult") && IsProperties(value3.properties);
}
function IsNever2(value3) {
  return IsKindOf2(value3, "Never") && IsObject2(value3.not) && Object.getOwnPropertyNames(value3.not).length === 0;
}
function IsNot2(value3) {
  return IsKindOf2(value3, "Not") && IsSchema2(value3.not);
}
function IsNull4(value3) {
  return IsKindOf2(value3, "Null") && value3.type === "null" && IsOptionalString(value3.$id);
}
function IsNumber4(value3) {
  return IsKindOf2(value3, "Number") && value3.type === "number" && IsOptionalString(value3.$id) && IsOptionalNumber(value3.exclusiveMaximum) && IsOptionalNumber(value3.exclusiveMinimum) && IsOptionalNumber(value3.maximum) && IsOptionalNumber(value3.minimum) && IsOptionalNumber(value3.multipleOf);
}
function IsObject4(value3) {
  return IsKindOf2(value3, "Object") && value3.type === "object" && IsOptionalString(value3.$id) && IsProperties(value3.properties) && IsAdditionalProperties(value3.additionalProperties) && IsOptionalNumber(value3.minProperties) && IsOptionalNumber(value3.maxProperties);
}
function IsPromise3(value3) {
  return IsKindOf2(value3, "Promise") && value3.type === "Promise" && IsOptionalString(value3.$id) && IsSchema2(value3.item);
}
function IsRecord2(value3) {
  return IsKindOf2(value3, "Record") && value3.type === "object" && IsOptionalString(value3.$id) && IsAdditionalProperties(value3.additionalProperties) && IsObject2(value3.patternProperties) && ((schema) => {
    const keys = Object.getOwnPropertyNames(schema.patternProperties);
    return keys.length === 1 && IsPattern(keys[0]) && IsObject2(schema.patternProperties) && IsSchema2(schema.patternProperties[keys[0]]);
  })(value3);
}
function IsRecursive(value3) {
  return IsObject2(value3) && Hint in value3 && value3[Hint] === "Recursive";
}
function IsRef2(value3) {
  return IsKindOf2(value3, "Ref") && IsOptionalString(value3.$id) && IsString2(value3.$ref);
}
function IsRegExp3(value3) {
  return IsKindOf2(value3, "RegExp") && IsOptionalString(value3.$id) && IsString2(value3.source) && IsString2(value3.flags) && IsOptionalNumber(value3.maxLength) && IsOptionalNumber(value3.minLength);
}
function IsString4(value3) {
  return IsKindOf2(value3, "String") && value3.type === "string" && IsOptionalString(value3.$id) && IsOptionalNumber(value3.minLength) && IsOptionalNumber(value3.maxLength) && IsOptionalPattern(value3.pattern) && IsOptionalFormat(value3.format);
}
function IsSymbol4(value3) {
  return IsKindOf2(value3, "Symbol") && value3.type === "symbol" && IsOptionalString(value3.$id);
}
function IsTemplateLiteral2(value3) {
  return IsKindOf2(value3, "TemplateLiteral") && value3.type === "string" && IsString2(value3.pattern) && value3.pattern[0] === "^" && value3.pattern[value3.pattern.length - 1] === "$";
}
function IsThis2(value3) {
  return IsKindOf2(value3, "This") && IsOptionalString(value3.$id) && IsString2(value3.$ref);
}
function IsTransform2(value3) {
  return IsObject2(value3) && TransformKind in value3;
}
function IsTuple2(value3) {
  return IsKindOf2(value3, "Tuple") && value3.type === "array" && IsOptionalString(value3.$id) && IsNumber2(value3.minItems) && IsNumber2(value3.maxItems) && value3.minItems === value3.maxItems && (IsUndefined2(value3.items) && IsUndefined2(value3.additionalItems) && value3.minItems === 0 || IsArray2(value3.items) && value3.items.every((schema) => IsSchema2(schema)));
}
function IsUndefined4(value3) {
  return IsKindOf2(value3, "Undefined") && value3.type === "undefined" && IsOptionalString(value3.$id);
}
function IsUnionLiteral(value3) {
  return IsUnion2(value3) && value3.anyOf.every((schema) => IsLiteralString(schema) || IsLiteralNumber(schema));
}
function IsUnion2(value3) {
  return IsKindOf2(value3, "Union") && IsOptionalString(value3.$id) && IsObject2(value3) && IsArray2(value3.anyOf) && value3.anyOf.every((schema) => IsSchema2(schema));
}
function IsUint8Array4(value3) {
  return IsKindOf2(value3, "Uint8Array") && value3.type === "Uint8Array" && IsOptionalString(value3.$id) && IsOptionalNumber(value3.minByteLength) && IsOptionalNumber(value3.maxByteLength);
}
function IsUnknown2(value3) {
  return IsKindOf2(value3, "Unknown") && IsOptionalString(value3.$id);
}
function IsUnsafe2(value3) {
  return IsKindOf2(value3, "Unsafe");
}
function IsVoid2(value3) {
  return IsKindOf2(value3, "Void") && value3.type === "void" && IsOptionalString(value3.$id);
}
function IsKind2(value3) {
  return IsObject2(value3) && Kind in value3 && IsString2(value3[Kind]) && !KnownTypes.includes(value3[Kind]);
}
function IsSchema2(value3) {
  return IsObject2(value3) && (IsAny2(value3) || IsArray4(value3) || IsBoolean4(value3) || IsBigInt4(value3) || IsAsyncIterator4(value3) || IsConstructor2(value3) || IsDate4(value3) || IsFunction4(value3) || IsInteger3(value3) || IsIntersect2(value3) || IsIterator4(value3) || IsLiteral2(value3) || IsMappedKey2(value3) || IsMappedResult2(value3) || IsNever2(value3) || IsNot2(value3) || IsNull4(value3) || IsNumber4(value3) || IsObject4(value3) || IsPromise3(value3) || IsRecord2(value3) || IsRef2(value3) || IsRegExp3(value3) || IsString4(value3) || IsSymbol4(value3) || IsTemplateLiteral2(value3) || IsThis2(value3) || IsTuple2(value3) || IsUndefined4(value3) || IsUnion2(value3) || IsUint8Array4(value3) || IsUnknown2(value3) || IsUnsafe2(value3) || IsVoid2(value3) || IsKind2(value3));
}

class TypeGuardUnknownTypeError extends TypeBoxError {
}
var KnownTypes = [
  "Any",
  "Array",
  "AsyncIterator",
  "BigInt",
  "Boolean",
  "Constructor",
  "Date",
  "Enum",
  "Function",
  "Integer",
  "Intersect",
  "Iterator",
  "Literal",
  "MappedKey",
  "MappedResult",
  "Not",
  "Null",
  "Number",
  "Object",
  "Promise",
  "Record",
  "Ref",
  "RegExp",
  "String",
  "Symbol",
  "TemplateLiteral",
  "This",
  "Tuple",
  "Undefined",
  "Union",
  "Uint8Array",
  "Unknown",
  "Void"
];
// node_modules/@sinclair/typebox/build/esm/type/extends/extends-check.mjs
function IntoBooleanResult(result) {
  return result === ExtendsResult.False ? result : ExtendsResult.True;
}
function Throw(message) {
  throw new ExtendsResolverError(message);
}
function IsStructuralRight(right) {
  return exports_type2.IsNever(right) || exports_type2.IsIntersect(right) || exports_type2.IsUnion(right) || exports_type2.IsUnknown(right) || exports_type2.IsAny(right);
}
function StructuralRight(left, right) {
  return exports_type2.IsNever(right) ? FromNeverRight(left, right) : exports_type2.IsIntersect(right) ? FromIntersectRight(left, right) : exports_type2.IsUnion(right) ? FromUnionRight(left, right) : exports_type2.IsUnknown(right) ? FromUnknownRight(left, right) : exports_type2.IsAny(right) ? FromAnyRight(left, right) : Throw("StructuralRight");
}
function FromAnyRight(left, right) {
  return ExtendsResult.True;
}
function FromAny2(left, right) {
  return exports_type2.IsIntersect(right) ? FromIntersectRight(left, right) : exports_type2.IsUnion(right) && right.anyOf.some((schema) => exports_type2.IsAny(schema) || exports_type2.IsUnknown(schema)) ? ExtendsResult.True : exports_type2.IsUnion(right) ? ExtendsResult.Union : exports_type2.IsUnknown(right) ? ExtendsResult.True : exports_type2.IsAny(right) ? ExtendsResult.True : ExtendsResult.Union;
}
function FromArrayRight(left, right) {
  return exports_type2.IsUnknown(left) ? ExtendsResult.False : exports_type2.IsAny(left) ? ExtendsResult.Union : exports_type2.IsNever(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromArray4(left, right) {
  return exports_type2.IsObject(right) && IsObjectArrayLike(right) ? ExtendsResult.True : IsStructuralRight(right) ? StructuralRight(left, right) : !exports_type2.IsArray(right) ? ExtendsResult.False : IntoBooleanResult(Visit5(left.items, right.items));
}
function FromAsyncIterator2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : !exports_type2.IsAsyncIterator(right) ? ExtendsResult.False : IntoBooleanResult(Visit5(left.items, right.items));
}
function FromBigInt2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsBigInt(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromBooleanRight(left, right) {
  return exports_type2.IsLiteralBoolean(left) ? ExtendsResult.True : exports_type2.IsBoolean(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromBoolean2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsBoolean(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromConstructor2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : !exports_type2.IsConstructor(right) ? ExtendsResult.False : left.parameters.length > right.parameters.length ? ExtendsResult.False : !left.parameters.every((schema, index) => IntoBooleanResult(Visit5(right.parameters[index], schema)) === ExtendsResult.True) ? ExtendsResult.False : IntoBooleanResult(Visit5(left.returns, right.returns));
}
function FromDate2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsDate(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromFunction2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : !exports_type2.IsFunction(right) ? ExtendsResult.False : left.parameters.length > right.parameters.length ? ExtendsResult.False : !left.parameters.every((schema, index) => IntoBooleanResult(Visit5(right.parameters[index], schema)) === ExtendsResult.True) ? ExtendsResult.False : IntoBooleanResult(Visit5(left.returns, right.returns));
}
function FromIntegerRight(left, right) {
  return exports_type2.IsLiteral(left) && exports_value.IsNumber(left.const) ? ExtendsResult.True : exports_type2.IsNumber(left) || exports_type2.IsInteger(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromInteger2(left, right) {
  return exports_type2.IsInteger(right) || exports_type2.IsNumber(right) ? ExtendsResult.True : IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : ExtendsResult.False;
}
function FromIntersectRight(left, right) {
  return right.allOf.every((schema) => Visit5(left, schema) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
}
function FromIntersect4(left, right) {
  return left.allOf.some((schema) => Visit5(schema, right) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
}
function FromIterator2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : !exports_type2.IsIterator(right) ? ExtendsResult.False : IntoBooleanResult(Visit5(left.items, right.items));
}
function FromLiteral3(left, right) {
  return exports_type2.IsLiteral(right) && right.const === left.const ? ExtendsResult.True : IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsString(right) ? FromStringRight(left, right) : exports_type2.IsNumber(right) ? FromNumberRight(left, right) : exports_type2.IsInteger(right) ? FromIntegerRight(left, right) : exports_type2.IsBoolean(right) ? FromBooleanRight(left, right) : ExtendsResult.False;
}
function FromNeverRight(left, right) {
  return ExtendsResult.False;
}
function FromNever2(left, right) {
  return ExtendsResult.True;
}
function UnwrapTNot(schema) {
  let [current, depth] = [schema, 0];
  while (true) {
    if (!exports_type2.IsNot(current))
      break;
    current = current.not;
    depth += 1;
  }
  return depth % 2 === 0 ? current : Unknown();
}
function FromNot2(left, right) {
  return exports_type2.IsNot(left) ? Visit5(UnwrapTNot(left), right) : exports_type2.IsNot(right) ? Visit5(left, UnwrapTNot(right)) : Throw("Invalid fallthrough for Not");
}
function FromNull2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsNull(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromNumberRight(left, right) {
  return exports_type2.IsLiteralNumber(left) ? ExtendsResult.True : exports_type2.IsNumber(left) || exports_type2.IsInteger(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromNumber2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsInteger(right) || exports_type2.IsNumber(right) ? ExtendsResult.True : ExtendsResult.False;
}
function IsObjectPropertyCount(schema, count) {
  return Object.getOwnPropertyNames(schema.properties).length === count;
}
function IsObjectStringLike(schema) {
  return IsObjectArrayLike(schema);
}
function IsObjectSymbolLike(schema) {
  return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && "description" in schema.properties && exports_type2.IsUnion(schema.properties.description) && schema.properties.description.anyOf.length === 2 && (exports_type2.IsString(schema.properties.description.anyOf[0]) && exports_type2.IsUndefined(schema.properties.description.anyOf[1]) || exports_type2.IsString(schema.properties.description.anyOf[1]) && exports_type2.IsUndefined(schema.properties.description.anyOf[0]));
}
function IsObjectNumberLike(schema) {
  return IsObjectPropertyCount(schema, 0);
}
function IsObjectBooleanLike(schema) {
  return IsObjectPropertyCount(schema, 0);
}
function IsObjectBigIntLike(schema) {
  return IsObjectPropertyCount(schema, 0);
}
function IsObjectDateLike(schema) {
  return IsObjectPropertyCount(schema, 0);
}
function IsObjectUint8ArrayLike(schema) {
  return IsObjectArrayLike(schema);
}
function IsObjectFunctionLike(schema) {
  const length = Number2();
  return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && "length" in schema.properties && IntoBooleanResult(Visit5(schema.properties["length"], length)) === ExtendsResult.True;
}
function IsObjectConstructorLike(schema) {
  return IsObjectPropertyCount(schema, 0);
}
function IsObjectArrayLike(schema) {
  const length = Number2();
  return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && "length" in schema.properties && IntoBooleanResult(Visit5(schema.properties["length"], length)) === ExtendsResult.True;
}
function IsObjectPromiseLike(schema) {
  const then = Function2([Any()], Any());
  return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && "then" in schema.properties && IntoBooleanResult(Visit5(schema.properties["then"], then)) === ExtendsResult.True;
}
function Property(left, right) {
  return Visit5(left, right) === ExtendsResult.False ? ExtendsResult.False : exports_type2.IsOptional(left) && !exports_type2.IsOptional(right) ? ExtendsResult.False : ExtendsResult.True;
}
function FromObjectRight(left, right) {
  return exports_type2.IsUnknown(left) ? ExtendsResult.False : exports_type2.IsAny(left) ? ExtendsResult.Union : exports_type2.IsNever(left) || exports_type2.IsLiteralString(left) && IsObjectStringLike(right) || exports_type2.IsLiteralNumber(left) && IsObjectNumberLike(right) || exports_type2.IsLiteralBoolean(left) && IsObjectBooleanLike(right) || exports_type2.IsSymbol(left) && IsObjectSymbolLike(right) || exports_type2.IsBigInt(left) && IsObjectBigIntLike(right) || exports_type2.IsString(left) && IsObjectStringLike(right) || exports_type2.IsSymbol(left) && IsObjectSymbolLike(right) || exports_type2.IsNumber(left) && IsObjectNumberLike(right) || exports_type2.IsInteger(left) && IsObjectNumberLike(right) || exports_type2.IsBoolean(left) && IsObjectBooleanLike(right) || exports_type2.IsUint8Array(left) && IsObjectUint8ArrayLike(right) || exports_type2.IsDate(left) && IsObjectDateLike(right) || exports_type2.IsConstructor(left) && IsObjectConstructorLike(right) || exports_type2.IsFunction(left) && IsObjectFunctionLike(right) ? ExtendsResult.True : exports_type2.IsRecord(left) && exports_type2.IsString(RecordKey(left)) ? (() => {
    return right[Hint] === "Record" ? ExtendsResult.True : ExtendsResult.False;
  })() : exports_type2.IsRecord(left) && exports_type2.IsNumber(RecordKey(left)) ? (() => {
    return IsObjectPropertyCount(right, 0) ? ExtendsResult.True : ExtendsResult.False;
  })() : ExtendsResult.False;
}
function FromObject2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : !exports_type2.IsObject(right) ? ExtendsResult.False : (() => {
    for (const key of Object.getOwnPropertyNames(right.properties)) {
      if (!(key in left.properties) && !exports_type2.IsOptional(right.properties[key])) {
        return ExtendsResult.False;
      }
      if (exports_type2.IsOptional(right.properties[key])) {
        return ExtendsResult.True;
      }
      if (Property(left.properties[key], right.properties[key]) === ExtendsResult.False) {
        return ExtendsResult.False;
      }
    }
    return ExtendsResult.True;
  })();
}
function FromPromise2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) && IsObjectPromiseLike(right) ? ExtendsResult.True : !exports_type2.IsPromise(right) ? ExtendsResult.False : IntoBooleanResult(Visit5(left.item, right.item));
}
function RecordKey(schema) {
  return PatternNumberExact in schema.patternProperties ? Number2() : (PatternStringExact in schema.patternProperties) ? String2() : Throw("Unknown record key pattern");
}
function RecordValue(schema) {
  return PatternNumberExact in schema.patternProperties ? schema.patternProperties[PatternNumberExact] : (PatternStringExact in schema.patternProperties) ? schema.patternProperties[PatternStringExact] : Throw("Unable to get record value schema");
}
function FromRecordRight(left, right) {
  const [Key, Value] = [RecordKey(right), RecordValue(right)];
  return exports_type2.IsLiteralString(left) && exports_type2.IsNumber(Key) && IntoBooleanResult(Visit5(left, Value)) === ExtendsResult.True ? ExtendsResult.True : exports_type2.IsUint8Array(left) && exports_type2.IsNumber(Key) ? Visit5(left, Value) : exports_type2.IsString(left) && exports_type2.IsNumber(Key) ? Visit5(left, Value) : exports_type2.IsArray(left) && exports_type2.IsNumber(Key) ? Visit5(left, Value) : exports_type2.IsObject(left) ? (() => {
    for (const key of Object.getOwnPropertyNames(left.properties)) {
      if (Property(Value, left.properties[key]) === ExtendsResult.False) {
        return ExtendsResult.False;
      }
    }
    return ExtendsResult.True;
  })() : ExtendsResult.False;
}
function FromRecord2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : !exports_type2.IsRecord(right) ? ExtendsResult.False : Visit5(RecordValue(left), RecordValue(right));
}
function FromRegExp2(left, right) {
  const L = exports_type2.IsRegExp(left) ? String2() : left;
  const R = exports_type2.IsRegExp(right) ? String2() : right;
  return Visit5(L, R);
}
function FromStringRight(left, right) {
  return exports_type2.IsLiteral(left) && exports_value.IsString(left.const) ? ExtendsResult.True : exports_type2.IsString(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromString2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsString(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromSymbol2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsSymbol(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromTemplateLiteral3(left, right) {
  return exports_type2.IsTemplateLiteral(left) ? Visit5(TemplateLiteralToUnion(left), right) : exports_type2.IsTemplateLiteral(right) ? Visit5(left, TemplateLiteralToUnion(right)) : Throw("Invalid fallthrough for TemplateLiteral");
}
function IsArrayOfTuple(left, right) {
  return exports_type2.IsArray(right) && left.items !== undefined && left.items.every((schema) => Visit5(schema, right.items) === ExtendsResult.True);
}
function FromTupleRight(left, right) {
  return exports_type2.IsNever(left) ? ExtendsResult.True : exports_type2.IsUnknown(left) ? ExtendsResult.False : exports_type2.IsAny(left) ? ExtendsResult.Union : ExtendsResult.False;
}
function FromTuple4(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) && IsObjectArrayLike(right) ? ExtendsResult.True : exports_type2.IsArray(right) && IsArrayOfTuple(left, right) ? ExtendsResult.True : !exports_type2.IsTuple(right) ? ExtendsResult.False : exports_value.IsUndefined(left.items) && !exports_value.IsUndefined(right.items) || !exports_value.IsUndefined(left.items) && exports_value.IsUndefined(right.items) ? ExtendsResult.False : exports_value.IsUndefined(left.items) && !exports_value.IsUndefined(right.items) ? ExtendsResult.True : left.items.every((schema, index) => Visit5(schema, right.items[index]) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
}
function FromUint8Array2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsUint8Array(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromUndefined2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsVoid(right) ? FromVoidRight(left, right) : exports_type2.IsUndefined(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromUnionRight(left, right) {
  return right.anyOf.some((schema) => Visit5(left, schema) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
}
function FromUnion6(left, right) {
  return left.anyOf.every((schema) => Visit5(schema, right) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
}
function FromUnknownRight(left, right) {
  return ExtendsResult.True;
}
function FromUnknown2(left, right) {
  return exports_type2.IsNever(right) ? FromNeverRight(left, right) : exports_type2.IsIntersect(right) ? FromIntersectRight(left, right) : exports_type2.IsUnion(right) ? FromUnionRight(left, right) : exports_type2.IsAny(right) ? FromAnyRight(left, right) : exports_type2.IsString(right) ? FromStringRight(left, right) : exports_type2.IsNumber(right) ? FromNumberRight(left, right) : exports_type2.IsInteger(right) ? FromIntegerRight(left, right) : exports_type2.IsBoolean(right) ? FromBooleanRight(left, right) : exports_type2.IsArray(right) ? FromArrayRight(left, right) : exports_type2.IsTuple(right) ? FromTupleRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsUnknown(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromVoidRight(left, right) {
  return exports_type2.IsUndefined(left) ? ExtendsResult.True : exports_type2.IsUndefined(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromVoid2(left, right) {
  return exports_type2.IsIntersect(right) ? FromIntersectRight(left, right) : exports_type2.IsUnion(right) ? FromUnionRight(left, right) : exports_type2.IsUnknown(right) ? FromUnknownRight(left, right) : exports_type2.IsAny(right) ? FromAnyRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsVoid(right) ? ExtendsResult.True : ExtendsResult.False;
}
function Visit5(left, right) {
  return exports_type2.IsTemplateLiteral(left) || exports_type2.IsTemplateLiteral(right) ? FromTemplateLiteral3(left, right) : exports_type2.IsRegExp(left) || exports_type2.IsRegExp(right) ? FromRegExp2(left, right) : exports_type2.IsNot(left) || exports_type2.IsNot(right) ? FromNot2(left, right) : exports_type2.IsAny(left) ? FromAny2(left, right) : exports_type2.IsArray(left) ? FromArray4(left, right) : exports_type2.IsBigInt(left) ? FromBigInt2(left, right) : exports_type2.IsBoolean(left) ? FromBoolean2(left, right) : exports_type2.IsAsyncIterator(left) ? FromAsyncIterator2(left, right) : exports_type2.IsConstructor(left) ? FromConstructor2(left, right) : exports_type2.IsDate(left) ? FromDate2(left, right) : exports_type2.IsFunction(left) ? FromFunction2(left, right) : exports_type2.IsInteger(left) ? FromInteger2(left, right) : exports_type2.IsIntersect(left) ? FromIntersect4(left, right) : exports_type2.IsIterator(left) ? FromIterator2(left, right) : exports_type2.IsLiteral(left) ? FromLiteral3(left, right) : exports_type2.IsNever(left) ? FromNever2(left, right) : exports_type2.IsNull(left) ? FromNull2(left, right) : exports_type2.IsNumber(left) ? FromNumber2(left, right) : exports_type2.IsObject(left) ? FromObject2(left, right) : exports_type2.IsRecord(left) ? FromRecord2(left, right) : exports_type2.IsString(left) ? FromString2(left, right) : exports_type2.IsSymbol(left) ? FromSymbol2(left, right) : exports_type2.IsTuple(left) ? FromTuple4(left, right) : exports_type2.IsPromise(left) ? FromPromise2(left, right) : exports_type2.IsUint8Array(left) ? FromUint8Array2(left, right) : exports_type2.IsUndefined(left) ? FromUndefined2(left, right) : exports_type2.IsUnion(left) ? FromUnion6(left, right) : exports_type2.IsUnknown(left) ? FromUnknown2(left, right) : exports_type2.IsVoid(left) ? FromVoid2(left, right) : Throw(`Unknown left type operand '${left[Kind]}'`);
}
function ExtendsCheck(left, right) {
  return Visit5(left, right);
}

class ExtendsResolverError extends TypeBoxError {
}
var ExtendsResult;
(function(ExtendsResult2) {
  ExtendsResult2[ExtendsResult2["Union"] = 0] = "Union";
  ExtendsResult2[ExtendsResult2["True"] = 1] = "True";
  ExtendsResult2[ExtendsResult2["False"] = 2] = "False";
})(ExtendsResult || (ExtendsResult = {}));
// node_modules/@sinclair/typebox/build/esm/type/extends/extends-from-mapped-result.mjs
function FromProperties7(P, Right, True, False, options) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Extends(P[K2], Right, True, False, options);
  return Acc;
}
function FromMappedResult6(Left, Right, True, False, options) {
  return FromProperties7(Left.properties, Right, True, False, options);
}
function ExtendsFromMappedResult(Left, Right, True, False, options) {
  const P = FromMappedResult6(Left, Right, True, False, options);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/extends/extends.mjs
function ExtendsResolve(left, right, trueType, falseType) {
  const R = ExtendsCheck(left, right);
  return R === ExtendsResult.Union ? Union([trueType, falseType]) : R === ExtendsResult.True ? trueType : falseType;
}
function Extends(L, R, T, F, options = {}) {
  return IsMappedResult(L) ? ExtendsFromMappedResult(L, R, T, F, options) : IsMappedKey(L) ? CloneType(ExtendsFromMappedKey(L, R, T, F, options)) : CloneType(ExtendsResolve(L, R, T, F), options);
}

// node_modules/@sinclair/typebox/build/esm/type/extends/extends-from-mapped-key.mjs
function FromPropertyKey(K, U, L, R, options) {
  return {
    [K]: Extends(Literal(K), U, L, R, options)
  };
}
function FromPropertyKeys(K, U, L, R, options) {
  return K.reduce((Acc, LK) => {
    return { ...Acc, ...FromPropertyKey(LK, U, L, R, options) };
  }, {});
}
function FromMappedKey2(K, U, L, R, options) {
  return FromPropertyKeys(K.keys, U, L, R, options);
}
function ExtendsFromMappedKey(T, U, L, R, options) {
  const P = FromMappedKey2(T, U, L, R, options);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/value/check/check.mjs
function IsAnyOrUnknown(schema) {
  return schema[Kind] === "Any" || schema[Kind] === "Unknown";
}
function IsDefined2(value3) {
  return value3 !== undefined;
}
function FromAny3(schema, references, value3) {
  return true;
}
function FromArray5(schema, references, value3) {
  if (!IsArray(value3))
    return false;
  if (IsDefined2(schema.minItems) && !(value3.length >= schema.minItems)) {
    return false;
  }
  if (IsDefined2(schema.maxItems) && !(value3.length <= schema.maxItems)) {
    return false;
  }
  if (!value3.every((value4) => Visit6(schema.items, references, value4))) {
    return false;
  }
  if (schema.uniqueItems === true && !function() {
    const set2 = new Set;
    for (const element of value3) {
      const hashed = Hash(element);
      if (set2.has(hashed)) {
        return false;
      } else {
        set2.add(hashed);
      }
    }
    return true;
  }()) {
    return false;
  }
  if (!(IsDefined2(schema.contains) || IsNumber(schema.minContains) || IsNumber(schema.maxContains))) {
    return true;
  }
  const containsSchema = IsDefined2(schema.contains) ? schema.contains : Never();
  const containsCount = value3.reduce((acc, value4) => Visit6(containsSchema, references, value4) ? acc + 1 : acc, 0);
  if (containsCount === 0) {
    return false;
  }
  if (IsNumber(schema.minContains) && containsCount < schema.minContains) {
    return false;
  }
  if (IsNumber(schema.maxContains) && containsCount > schema.maxContains) {
    return false;
  }
  return true;
}
function FromAsyncIterator3(schema, references, value3) {
  return IsAsyncIterator(value3);
}
function FromBigInt3(schema, references, value3) {
  if (!IsBigInt(value3))
    return false;
  if (IsDefined2(schema.exclusiveMaximum) && !(value3 < schema.exclusiveMaximum)) {
    return false;
  }
  if (IsDefined2(schema.exclusiveMinimum) && !(value3 > schema.exclusiveMinimum)) {
    return false;
  }
  if (IsDefined2(schema.maximum) && !(value3 <= schema.maximum)) {
    return false;
  }
  if (IsDefined2(schema.minimum) && !(value3 >= schema.minimum)) {
    return false;
  }
  if (IsDefined2(schema.multipleOf) && !(value3 % schema.multipleOf === BigInt(0))) {
    return false;
  }
  return true;
}
function FromBoolean3(schema, references, value3) {
  return IsBoolean(value3);
}
function FromConstructor3(schema, references, value3) {
  return Visit6(schema.returns, references, value3.prototype);
}
function FromDate3(schema, references, value3) {
  if (!IsDate(value3))
    return false;
  if (IsDefined2(schema.exclusiveMaximumTimestamp) && !(value3.getTime() < schema.exclusiveMaximumTimestamp)) {
    return false;
  }
  if (IsDefined2(schema.exclusiveMinimumTimestamp) && !(value3.getTime() > schema.exclusiveMinimumTimestamp)) {
    return false;
  }
  if (IsDefined2(schema.maximumTimestamp) && !(value3.getTime() <= schema.maximumTimestamp)) {
    return false;
  }
  if (IsDefined2(schema.minimumTimestamp) && !(value3.getTime() >= schema.minimumTimestamp)) {
    return false;
  }
  if (IsDefined2(schema.multipleOfTimestamp) && !(value3.getTime() % schema.multipleOfTimestamp === 0)) {
    return false;
  }
  return true;
}
function FromFunction3(schema, references, value3) {
  return IsFunction(value3);
}
function FromInteger3(schema, references, value3) {
  if (!IsInteger(value3)) {
    return false;
  }
  if (IsDefined2(schema.exclusiveMaximum) && !(value3 < schema.exclusiveMaximum)) {
    return false;
  }
  if (IsDefined2(schema.exclusiveMinimum) && !(value3 > schema.exclusiveMinimum)) {
    return false;
  }
  if (IsDefined2(schema.maximum) && !(value3 <= schema.maximum)) {
    return false;
  }
  if (IsDefined2(schema.minimum) && !(value3 >= schema.minimum)) {
    return false;
  }
  if (IsDefined2(schema.multipleOf) && !(value3 % schema.multipleOf === 0)) {
    return false;
  }
  return true;
}
function FromIntersect5(schema, references, value3) {
  const check1 = schema.allOf.every((schema2) => Visit6(schema2, references, value3));
  if (schema.unevaluatedProperties === false) {
    const keyPattern = new RegExp(KeyOfPattern(schema));
    const check2 = Object.getOwnPropertyNames(value3).every((key) => keyPattern.test(key));
    return check1 && check2;
  } else if (IsSchema2(schema.unevaluatedProperties)) {
    const keyCheck = new RegExp(KeyOfPattern(schema));
    const check2 = Object.getOwnPropertyNames(value3).every((key) => keyCheck.test(key) || Visit6(schema.unevaluatedProperties, references, value3[key]));
    return check1 && check2;
  } else {
    return check1;
  }
}
function FromIterator3(schema, references, value3) {
  return IsIterator(value3);
}
function FromLiteral4(schema, references, value3) {
  return value3 === schema.const;
}
function FromNever3(schema, references, value3) {
  return false;
}
function FromNot3(schema, references, value3) {
  return !Visit6(schema.not, references, value3);
}
function FromNull3(schema, references, value3) {
  return IsNull(value3);
}
function FromNumber3(schema, references, value3) {
  if (!TypeSystemPolicy.IsNumberLike(value3))
    return false;
  if (IsDefined2(schema.exclusiveMaximum) && !(value3 < schema.exclusiveMaximum)) {
    return false;
  }
  if (IsDefined2(schema.exclusiveMinimum) && !(value3 > schema.exclusiveMinimum)) {
    return false;
  }
  if (IsDefined2(schema.minimum) && !(value3 >= schema.minimum)) {
    return false;
  }
  if (IsDefined2(schema.maximum) && !(value3 <= schema.maximum)) {
    return false;
  }
  if (IsDefined2(schema.multipleOf) && !(value3 % schema.multipleOf === 0)) {
    return false;
  }
  return true;
}
function FromObject3(schema, references, value3) {
  if (!TypeSystemPolicy.IsObjectLike(value3))
    return false;
  if (IsDefined2(schema.minProperties) && !(Object.getOwnPropertyNames(value3).length >= schema.minProperties)) {
    return false;
  }
  if (IsDefined2(schema.maxProperties) && !(Object.getOwnPropertyNames(value3).length <= schema.maxProperties)) {
    return false;
  }
  const knownKeys = Object.getOwnPropertyNames(schema.properties);
  for (const knownKey of knownKeys) {
    const property = schema.properties[knownKey];
    if (schema.required && schema.required.includes(knownKey)) {
      if (!Visit6(property, references, value3[knownKey])) {
        return false;
      }
      if ((ExtendsUndefinedCheck(property) || IsAnyOrUnknown(property)) && !(knownKey in value3)) {
        return false;
      }
    } else {
      if (TypeSystemPolicy.IsExactOptionalProperty(value3, knownKey) && !Visit6(property, references, value3[knownKey])) {
        return false;
      }
    }
  }
  if (schema.additionalProperties === false) {
    const valueKeys = Object.getOwnPropertyNames(value3);
    if (schema.required && schema.required.length === knownKeys.length && valueKeys.length === knownKeys.length) {
      return true;
    } else {
      return valueKeys.every((valueKey) => knownKeys.includes(valueKey));
    }
  } else if (typeof schema.additionalProperties === "object") {
    const valueKeys = Object.getOwnPropertyNames(value3);
    return valueKeys.every((key) => knownKeys.includes(key) || Visit6(schema.additionalProperties, references, value3[key]));
  } else {
    return true;
  }
}
function FromPromise3(schema, references, value3) {
  return IsPromise(value3);
}
function FromRecord3(schema, references, value3) {
  if (!TypeSystemPolicy.IsRecordLike(value3)) {
    return false;
  }
  if (IsDefined2(schema.minProperties) && !(Object.getOwnPropertyNames(value3).length >= schema.minProperties)) {
    return false;
  }
  if (IsDefined2(schema.maxProperties) && !(Object.getOwnPropertyNames(value3).length <= schema.maxProperties)) {
    return false;
  }
  const [patternKey, patternSchema] = Object.entries(schema.patternProperties)[0];
  const regex = new RegExp(patternKey);
  const check1 = Object.entries(value3).every(([key, value4]) => {
    return regex.test(key) ? Visit6(patternSchema, references, value4) : true;
  });
  const check2 = typeof schema.additionalProperties === "object" ? Object.entries(value3).every(([key, value4]) => {
    return !regex.test(key) ? Visit6(schema.additionalProperties, references, value4) : true;
  }) : true;
  const check3 = schema.additionalProperties === false ? Object.getOwnPropertyNames(value3).every((key) => {
    return regex.test(key);
  }) : true;
  return check1 && check2 && check3;
}
function FromRef2(schema, references, value3) {
  return Visit6(Deref(schema, references), references, value3);
}
function FromRegExp3(schema, references, value3) {
  const regex = new RegExp(schema.source, schema.flags);
  if (IsDefined2(schema.minLength)) {
    if (!(value3.length >= schema.minLength))
      return false;
  }
  if (IsDefined2(schema.maxLength)) {
    if (!(value3.length <= schema.maxLength))
      return false;
  }
  return regex.test(value3);
}
function FromString3(schema, references, value3) {
  if (!IsString(value3)) {
    return false;
  }
  if (IsDefined2(schema.minLength)) {
    if (!(value3.length >= schema.minLength))
      return false;
  }
  if (IsDefined2(schema.maxLength)) {
    if (!(value3.length <= schema.maxLength))
      return false;
  }
  if (IsDefined2(schema.pattern)) {
    const regex = new RegExp(schema.pattern);
    if (!regex.test(value3))
      return false;
  }
  if (IsDefined2(schema.format)) {
    if (!exports_format.Has(schema.format))
      return false;
    const func = exports_format.Get(schema.format);
    return func(value3);
  }
  return true;
}
function FromSymbol3(schema, references, value3) {
  return IsSymbol(value3);
}
function FromTemplateLiteral4(schema, references, value3) {
  return IsString(value3) && new RegExp(schema.pattern).test(value3);
}
function FromThis2(schema, references, value3) {
  return Visit6(Deref(schema, references), references, value3);
}
function FromTuple5(schema, references, value3) {
  if (!IsArray(value3)) {
    return false;
  }
  if (schema.items === undefined && !(value3.length === 0)) {
    return false;
  }
  if (!(value3.length === schema.maxItems)) {
    return false;
  }
  if (!schema.items) {
    return true;
  }
  for (let i = 0;i < schema.items.length; i++) {
    if (!Visit6(schema.items[i], references, value3[i]))
      return false;
  }
  return true;
}
function FromUndefined3(schema, references, value3) {
  return IsUndefined(value3);
}
function FromUnion7(schema, references, value3) {
  return schema.anyOf.some((inner) => Visit6(inner, references, value3));
}
function FromUint8Array3(schema, references, value3) {
  if (!IsUint8Array(value3)) {
    return false;
  }
  if (IsDefined2(schema.maxByteLength) && !(value3.length <= schema.maxByteLength)) {
    return false;
  }
  if (IsDefined2(schema.minByteLength) && !(value3.length >= schema.minByteLength)) {
    return false;
  }
  return true;
}
function FromUnknown3(schema, references, value3) {
  return true;
}
function FromVoid3(schema, references, value3) {
  return TypeSystemPolicy.IsVoidLike(value3);
}
function FromKind2(schema, references, value3) {
  if (!exports_type.Has(schema[Kind]))
    return false;
  const func = exports_type.Get(schema[Kind]);
  return func(schema, value3);
}
function Visit6(schema, references, value3) {
  const references_ = IsDefined2(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema_[Kind]) {
    case "Any":
      return FromAny3(schema_, references_, value3);
    case "Array":
      return FromArray5(schema_, references_, value3);
    case "AsyncIterator":
      return FromAsyncIterator3(schema_, references_, value3);
    case "BigInt":
      return FromBigInt3(schema_, references_, value3);
    case "Boolean":
      return FromBoolean3(schema_, references_, value3);
    case "Constructor":
      return FromConstructor3(schema_, references_, value3);
    case "Date":
      return FromDate3(schema_, references_, value3);
    case "Function":
      return FromFunction3(schema_, references_, value3);
    case "Integer":
      return FromInteger3(schema_, references_, value3);
    case "Intersect":
      return FromIntersect5(schema_, references_, value3);
    case "Iterator":
      return FromIterator3(schema_, references_, value3);
    case "Literal":
      return FromLiteral4(schema_, references_, value3);
    case "Never":
      return FromNever3(schema_, references_, value3);
    case "Not":
      return FromNot3(schema_, references_, value3);
    case "Null":
      return FromNull3(schema_, references_, value3);
    case "Number":
      return FromNumber3(schema_, references_, value3);
    case "Object":
      return FromObject3(schema_, references_, value3);
    case "Promise":
      return FromPromise3(schema_, references_, value3);
    case "Record":
      return FromRecord3(schema_, references_, value3);
    case "Ref":
      return FromRef2(schema_, references_, value3);
    case "RegExp":
      return FromRegExp3(schema_, references_, value3);
    case "String":
      return FromString3(schema_, references_, value3);
    case "Symbol":
      return FromSymbol3(schema_, references_, value3);
    case "TemplateLiteral":
      return FromTemplateLiteral4(schema_, references_, value3);
    case "This":
      return FromThis2(schema_, references_, value3);
    case "Tuple":
      return FromTuple5(schema_, references_, value3);
    case "Undefined":
      return FromUndefined3(schema_, references_, value3);
    case "Union":
      return FromUnion7(schema_, references_, value3);
    case "Uint8Array":
      return FromUint8Array3(schema_, references_, value3);
    case "Unknown":
      return FromUnknown3(schema_, references_, value3);
    case "Void":
      return FromVoid3(schema_, references_, value3);
    default:
      if (!exports_type.Has(schema_[Kind]))
        throw new ValueCheckUnknownTypeError(schema_);
      return FromKind2(schema_, references_, value3);
  }
}
function Check(...args) {
  return args.length === 3 ? Visit6(args[0], args[1], args[2]) : Visit6(args[0], [], args[1]);
}

class ValueCheckUnknownTypeError extends TypeBoxError {
  constructor(schema) {
    super(`Unknown type`);
    this.schema = schema;
  }
}
// node_modules/@sinclair/typebox/build/esm/value/clone/clone.mjs
function ObjectType3(value3) {
  const Acc = {};
  for (const key of Object.getOwnPropertyNames(value3)) {
    Acc[key] = Clone2(value3[key]);
  }
  for (const key of Object.getOwnPropertySymbols(value3)) {
    Acc[key] = Clone2(value3[key]);
  }
  return Acc;
}
function ArrayType3(value3) {
  return value3.map((element) => Clone2(element));
}
function TypedArrayType(value3) {
  return value3.slice();
}
function DateType3(value3) {
  return new Date(value3.toISOString());
}
function ValueType(value3) {
  return value3;
}
function Clone2(value3) {
  if (IsArray(value3))
    return ArrayType3(value3);
  if (IsDate(value3))
    return DateType3(value3);
  if (IsStandardObject(value3))
    return ObjectType3(value3);
  if (IsTypedArray(value3))
    return TypedArrayType(value3);
  if (IsValueType(value3))
    return ValueType(value3);
  throw new Error("ValueClone: Unable to clone value");
}
// node_modules/@sinclair/typebox/build/esm/value/create/create.mjs
function FromDefault(value3) {
  return typeof value3 === "function" ? value3 : Clone2(value3);
}
function FromAny4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return {};
  }
}
function FromArray6(schema, references) {
  if (schema.uniqueItems === true && !HasPropertyKey(schema, "default")) {
    throw new ValueCreateError(schema, "Array with the uniqueItems constraint requires a default value");
  } else if ("contains" in schema && !HasPropertyKey(schema, "default")) {
    throw new ValueCreateError(schema, "Array with the contains constraint requires a default value");
  } else if ("default" in schema) {
    return FromDefault(schema.default);
  } else if (schema.minItems !== undefined) {
    return Array.from({ length: schema.minItems }).map((item) => {
      return Visit7(schema.items, references);
    });
  } else {
    return [];
  }
}
function FromAsyncIterator4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return async function* () {
    }();
  }
}
function FromBigInt4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return BigInt(0);
  }
}
function FromBoolean4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return false;
  }
}
function FromConstructor4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    const value3 = Visit7(schema.returns, references);
    if (typeof value3 === "object" && !Array.isArray(value3)) {
      return class {
        constructor() {
          for (const [key, val] of Object.entries(value3)) {
            const self2 = this;
            self2[key] = val;
          }
        }
      };
    } else {
      return class {
      };
    }
  }
}
function FromDate4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else if (schema.minimumTimestamp !== undefined) {
    return new Date(schema.minimumTimestamp);
  } else {
    return new Date;
  }
}
function FromFunction4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return () => Visit7(schema.returns, references);
  }
}
function FromInteger4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else if (schema.minimum !== undefined) {
    return schema.minimum;
  } else {
    return 0;
  }
}
function FromIntersect6(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    const value3 = schema.allOf.reduce((acc, schema2) => {
      const next = Visit7(schema2, references);
      return typeof next === "object" ? { ...acc, ...next } : next;
    }, {});
    if (!Check(schema, references, value3))
      throw new ValueCreateError(schema, "Intersect produced invalid value. Consider using a default value.");
    return value3;
  }
}
function FromIterator4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return function* () {
    }();
  }
}
function FromLiteral5(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return schema.const;
  }
}
function FromNever4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    throw new ValueCreateError(schema, "Never types cannot be created. Consider using a default value.");
  }
}
function FromNot4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    throw new ValueCreateError(schema, "Not types must have a default value");
  }
}
function FromNull4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return null;
  }
}
function FromNumber4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else if (schema.minimum !== undefined) {
    return schema.minimum;
  } else {
    return 0;
  }
}
function FromObject4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    const required = new Set(schema.required);
    const Acc = {};
    for (const [key, subschema] of Object.entries(schema.properties)) {
      if (!required.has(key))
        continue;
      Acc[key] = Visit7(subschema, references);
    }
    return Acc;
  }
}
function FromPromise4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return Promise.resolve(Visit7(schema.item, references));
  }
}
function FromRecord4(schema, references) {
  const [keyPattern, valueSchema] = Object.entries(schema.patternProperties)[0];
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else if (!(keyPattern === PatternStringExact || keyPattern === PatternNumberExact)) {
    const propertyKeys = keyPattern.slice(1, keyPattern.length - 1).split("|");
    const Acc = {};
    for (const key of propertyKeys)
      Acc[key] = Visit7(valueSchema, references);
    return Acc;
  } else {
    return {};
  }
}
function FromRef3(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return Visit7(Deref(schema, references), references);
  }
}
function FromRegExp4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    throw new ValueCreateError(schema, "RegExp types cannot be created. Consider using a default value.");
  }
}
function FromString4(schema, references) {
  if (schema.pattern !== undefined) {
    if (!HasPropertyKey(schema, "default")) {
      throw new ValueCreateError(schema, "String types with patterns must specify a default value");
    } else {
      return FromDefault(schema.default);
    }
  } else if (schema.format !== undefined) {
    if (!HasPropertyKey(schema, "default")) {
      throw new ValueCreateError(schema, "String types with formats must specify a default value");
    } else {
      return FromDefault(schema.default);
    }
  } else {
    if (HasPropertyKey(schema, "default")) {
      return FromDefault(schema.default);
    } else if (schema.minLength !== undefined) {
      return Array.from({ length: schema.minLength }).map(() => " ").join("");
    } else {
      return "";
    }
  }
}
function FromSymbol4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else if ("value" in schema) {
    return Symbol.for(schema.value);
  } else {
    return Symbol();
  }
}
function FromTemplateLiteral5(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  }
  if (!IsTemplateLiteralFinite(schema))
    throw new ValueCreateError(schema, "Can only create template literals that produce a finite variants. Consider using a default value.");
  const generated = TemplateLiteralGenerate(schema);
  return generated[0];
}
function FromThis3(schema, references) {
  if (recursiveDepth++ > recursiveMaxDepth)
    throw new ValueCreateError(schema, "Cannot create recursive type as it appears possibly infinite. Consider using a default.");
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return Visit7(Deref(schema, references), references);
  }
}
function FromTuple6(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  }
  if (schema.items === undefined) {
    return [];
  } else {
    return Array.from({ length: schema.minItems }).map((_, index) => Visit7(schema.items[index], references));
  }
}
function FromUndefined4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return;
  }
}
function FromUnion8(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else if (schema.anyOf.length === 0) {
    throw new Error("ValueCreate.Union: Cannot create Union with zero variants");
  } else {
    return Visit7(schema.anyOf[0], references);
  }
}
function FromUint8Array4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else if (schema.minByteLength !== undefined) {
    return new Uint8Array(schema.minByteLength);
  } else {
    return new Uint8Array(0);
  }
}
function FromUnknown4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return {};
  }
}
function FromVoid4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return;
  }
}
function FromKind3(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    throw new Error("User defined types must specify a default value");
  }
}
function Visit7(schema, references) {
  const references_ = IsString(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema_[Kind]) {
    case "Any":
      return FromAny4(schema_, references_);
    case "Array":
      return FromArray6(schema_, references_);
    case "AsyncIterator":
      return FromAsyncIterator4(schema_, references_);
    case "BigInt":
      return FromBigInt4(schema_, references_);
    case "Boolean":
      return FromBoolean4(schema_, references_);
    case "Constructor":
      return FromConstructor4(schema_, references_);
    case "Date":
      return FromDate4(schema_, references_);
    case "Function":
      return FromFunction4(schema_, references_);
    case "Integer":
      return FromInteger4(schema_, references_);
    case "Intersect":
      return FromIntersect6(schema_, references_);
    case "Iterator":
      return FromIterator4(schema_, references_);
    case "Literal":
      return FromLiteral5(schema_, references_);
    case "Never":
      return FromNever4(schema_, references_);
    case "Not":
      return FromNot4(schema_, references_);
    case "Null":
      return FromNull4(schema_, references_);
    case "Number":
      return FromNumber4(schema_, references_);
    case "Object":
      return FromObject4(schema_, references_);
    case "Promise":
      return FromPromise4(schema_, references_);
    case "Record":
      return FromRecord4(schema_, references_);
    case "Ref":
      return FromRef3(schema_, references_);
    case "RegExp":
      return FromRegExp4(schema_, references_);
    case "String":
      return FromString4(schema_, references_);
    case "Symbol":
      return FromSymbol4(schema_, references_);
    case "TemplateLiteral":
      return FromTemplateLiteral5(schema_, references_);
    case "This":
      return FromThis3(schema_, references_);
    case "Tuple":
      return FromTuple6(schema_, references_);
    case "Undefined":
      return FromUndefined4(schema_, references_);
    case "Union":
      return FromUnion8(schema_, references_);
    case "Uint8Array":
      return FromUint8Array4(schema_, references_);
    case "Unknown":
      return FromUnknown4(schema_, references_);
    case "Void":
      return FromVoid4(schema_, references_);
    default:
      if (!exports_type.Has(schema_[Kind]))
        throw new ValueCreateError(schema_, "Unknown type");
      return FromKind3(schema_, references_);
  }
}
function Create2(...args) {
  recursiveDepth = 0;
  return args.length === 2 ? Visit7(args[0], args[1]) : Visit7(args[0], []);
}

class ValueCreateError extends TypeBoxError {
  constructor(schema, message) {
    super(message);
    this.schema = schema;
  }
}
var recursiveMaxDepth = 512;
var recursiveDepth = 0;
// node_modules/@sinclair/typebox/build/esm/value/cast/cast.mjs
function ScoreUnion(schema, references, value3) {
  if (schema[Kind] === "Object" && typeof value3 === "object" && !IsNull(value3)) {
    const object3 = schema;
    const keys = Object.getOwnPropertyNames(value3);
    const entries = Object.entries(object3.properties);
    const [point, max] = [1 / entries.length, entries.length];
    return entries.reduce((acc, [key, schema2]) => {
      const literal7 = schema2[Kind] === "Literal" && schema2.const === value3[key] ? max : 0;
      const checks = Check(schema2, references, value3[key]) ? point : 0;
      const exists = keys.includes(key) ? point : 0;
      return acc + (literal7 + checks + exists);
    }, 0);
  } else {
    return Check(schema, references, value3) ? 1 : 0;
  }
}
function SelectUnion(union9, references, value3) {
  const schemas = union9.anyOf.map((schema) => Deref(schema, references));
  let [select, best] = [schemas[0], 0];
  for (const schema of schemas) {
    const score = ScoreUnion(schema, references, value3);
    if (score > best) {
      select = schema;
      best = score;
    }
  }
  return select;
}
function CastUnion(union9, references, value3) {
  if ("default" in union9) {
    return typeof value3 === "function" ? union9.default : Clone2(union9.default);
  } else {
    const schema = SelectUnion(union9, references, value3);
    return Cast(schema, references, value3);
  }
}
function DefaultClone(schema, references, value3) {
  return Check(schema, references, value3) ? Clone2(value3) : Create2(schema, references);
}
function Default(schema, references, value3) {
  return Check(schema, references, value3) ? value3 : Create2(schema, references);
}
function FromArray7(schema, references, value3) {
  if (Check(schema, references, value3))
    return Clone2(value3);
  const created = IsArray(value3) ? Clone2(value3) : Create2(schema, references);
  const minimum = IsNumber(schema.minItems) && created.length < schema.minItems ? [...created, ...Array.from({ length: schema.minItems - created.length }, () => null)] : created;
  const maximum = IsNumber(schema.maxItems) && minimum.length > schema.maxItems ? minimum.slice(0, schema.maxItems) : minimum;
  const casted = maximum.map((value4) => Visit8(schema.items, references, value4));
  if (schema.uniqueItems !== true)
    return casted;
  const unique = [...new Set(casted)];
  if (!Check(schema, references, unique))
    throw new ValueCastError(schema, "Array cast produced invalid data due to uniqueItems constraint");
  return unique;
}
function FromConstructor5(schema, references, value3) {
  if (Check(schema, references, value3))
    return Create2(schema, references);
  const required = new Set(schema.returns.required || []);
  const result = function() {
  };
  for (const [key, property] of Object.entries(schema.returns.properties)) {
    if (!required.has(key) && value3.prototype[key] === undefined)
      continue;
    result.prototype[key] = Visit8(property, references, value3.prototype[key]);
  }
  return result;
}
function FromIntersect7(schema, references, value3) {
  const created = Create2(schema, references);
  const mapped9 = IsStandardObject(created) && IsStandardObject(value3) ? { ...created, ...value3 } : value3;
  return Check(schema, references, mapped9) ? mapped9 : Create2(schema, references);
}
function FromNever5(schema, references, value3) {
  throw new ValueCastError(schema, "Never types cannot be cast");
}
function FromObject5(schema, references, value3) {
  if (Check(schema, references, value3))
    return value3;
  if (value3 === null || typeof value3 !== "object")
    return Create2(schema, references);
  const required = new Set(schema.required || []);
  const result = {};
  for (const [key, property] of Object.entries(schema.properties)) {
    if (!required.has(key) && value3[key] === undefined)
      continue;
    result[key] = Visit8(property, references, value3[key]);
  }
  if (typeof schema.additionalProperties === "object") {
    const propertyNames = Object.getOwnPropertyNames(schema.properties);
    for (const propertyName of Object.getOwnPropertyNames(value3)) {
      if (propertyNames.includes(propertyName))
        continue;
      result[propertyName] = Visit8(schema.additionalProperties, references, value3[propertyName]);
    }
  }
  return result;
}
function FromRecord5(schema, references, value3) {
  if (Check(schema, references, value3))
    return Clone2(value3);
  if (value3 === null || typeof value3 !== "object" || Array.isArray(value3) || value3 instanceof Date)
    return Create2(schema, references);
  const subschemaPropertyName = Object.getOwnPropertyNames(schema.patternProperties)[0];
  const subschema = schema.patternProperties[subschemaPropertyName];
  const result = {};
  for (const [propKey, propValue] of Object.entries(value3)) {
    result[propKey] = Visit8(subschema, references, propValue);
  }
  return result;
}
function FromRef4(schema, references, value3) {
  return Visit8(Deref(schema, references), references, value3);
}
function FromThis4(schema, references, value3) {
  return Visit8(Deref(schema, references), references, value3);
}
function FromTuple7(schema, references, value3) {
  if (Check(schema, references, value3))
    return Clone2(value3);
  if (!IsArray(value3))
    return Create2(schema, references);
  if (schema.items === undefined)
    return [];
  return schema.items.map((schema2, index) => Visit8(schema2, references, value3[index]));
}
function FromUnion9(schema, references, value3) {
  return Check(schema, references, value3) ? Clone2(value3) : CastUnion(schema, references, value3);
}
function Visit8(schema, references, value3) {
  const references_ = IsString(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema[Kind]) {
    case "Array":
      return FromArray7(schema_, references_, value3);
    case "Constructor":
      return FromConstructor5(schema_, references_, value3);
    case "Intersect":
      return FromIntersect7(schema_, references_, value3);
    case "Never":
      return FromNever5(schema_, references_, value3);
    case "Object":
      return FromObject5(schema_, references_, value3);
    case "Record":
      return FromRecord5(schema_, references_, value3);
    case "Ref":
      return FromRef4(schema_, references_, value3);
    case "This":
      return FromThis4(schema_, references_, value3);
    case "Tuple":
      return FromTuple7(schema_, references_, value3);
    case "Union":
      return FromUnion9(schema_, references_, value3);
    case "Date":
    case "Symbol":
    case "Uint8Array":
      return DefaultClone(schema, references, value3);
    default:
      return Default(schema_, references_, value3);
  }
}
function Cast(...args) {
  return args.length === 3 ? Visit8(args[0], args[1], args[2]) : Visit8(args[0], [], args[1]);
}

class ValueCastError extends TypeBoxError {
  constructor(schema, message) {
    super(message);
    this.schema = schema;
  }
}
// node_modules/@sinclair/typebox/build/esm/value/clean/clean.mjs
function IsCheckable(schema) {
  return IsSchema2(schema) && schema[Kind] !== "Unsafe";
}
function FromArray8(schema, references, value3) {
  if (!IsArray(value3))
    return value3;
  return value3.map((value4) => Visit9(schema.items, references, value4));
}
function FromIntersect8(schema, references, value3) {
  const unevaluatedProperties = schema.unevaluatedProperties;
  const intersections = schema.allOf.map((schema2) => Visit9(schema2, references, Clone2(value3)));
  const composite = intersections.reduce((acc, value4) => IsObject(value4) ? { ...acc, ...value4 } : value4, {});
  if (!IsObject(value3) || !IsObject(composite) || !IsSchema2(unevaluatedProperties))
    return composite;
  const knownkeys = KeyOfPropertyKeys(schema);
  for (const key of Object.getOwnPropertyNames(value3)) {
    if (knownkeys.includes(key))
      continue;
    if (Check(unevaluatedProperties, references, value3[key])) {
      composite[key] = Visit9(unevaluatedProperties, references, value3[key]);
    }
  }
  return composite;
}
function FromObject6(schema, references, value3) {
  if (!IsObject(value3) || IsArray(value3))
    return value3;
  const additionalProperties = schema.additionalProperties;
  for (const key of Object.getOwnPropertyNames(value3)) {
    if (key in schema.properties) {
      value3[key] = Visit9(schema.properties[key], references, value3[key]);
      continue;
    }
    if (IsSchema2(additionalProperties) && Check(additionalProperties, references, value3[key])) {
      value3[key] = Visit9(additionalProperties, references, value3[key]);
      continue;
    }
    delete value3[key];
  }
  return value3;
}
function FromRecord6(schema, references, value3) {
  if (!IsObject(value3))
    return value3;
  const additionalProperties = schema.additionalProperties;
  const propertyKeys = Object.getOwnPropertyNames(value3);
  const [propertyKey, propertySchema] = Object.entries(schema.patternProperties)[0];
  const propertyKeyTest = new RegExp(propertyKey);
  for (const key of propertyKeys) {
    if (propertyKeyTest.test(key)) {
      value3[key] = Visit9(propertySchema, references, value3[key]);
      continue;
    }
    if (IsSchema2(additionalProperties) && Check(additionalProperties, references, value3[key])) {
      value3[key] = Visit9(additionalProperties, references, value3[key]);
      continue;
    }
    delete value3[key];
  }
  return value3;
}
function FromRef5(schema, references, value3) {
  return Visit9(Deref(schema, references), references, value3);
}
function FromThis5(schema, references, value3) {
  return Visit9(Deref(schema, references), references, value3);
}
function FromTuple8(schema, references, value3) {
  if (!IsArray(value3))
    return value3;
  if (IsUndefined(schema.items))
    return [];
  const length = Math.min(value3.length, schema.items.length);
  for (let i = 0;i < length; i++) {
    value3[i] = Visit9(schema.items[i], references, value3[i]);
  }
  return value3.length > length ? value3.slice(0, length) : value3;
}
function FromUnion10(schema, references, value3) {
  for (const inner of schema.anyOf) {
    if (IsCheckable(inner) && Check(inner, references, value3)) {
      return Visit9(inner, references, value3);
    }
  }
  return value3;
}
function Visit9(schema, references, value3) {
  const references_ = IsString(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema_[Kind]) {
    case "Array":
      return FromArray8(schema_, references_, value3);
    case "Intersect":
      return FromIntersect8(schema_, references_, value3);
    case "Object":
      return FromObject6(schema_, references_, value3);
    case "Record":
      return FromRecord6(schema_, references_, value3);
    case "Ref":
      return FromRef5(schema_, references_, value3);
    case "This":
      return FromThis5(schema_, references_, value3);
    case "Tuple":
      return FromTuple8(schema_, references_, value3);
    case "Union":
      return FromUnion10(schema_, references_, value3);
    default:
      return value3;
  }
}
function Clean(...args) {
  return args.length === 3 ? Visit9(args[0], args[1], args[2]) : Visit9(args[0], [], args[1]);
}
// node_modules/@sinclair/typebox/build/esm/value/convert/convert.mjs
function IsStringNumeric(value3) {
  return IsString(value3) && !isNaN(value3) && !isNaN(parseFloat(value3));
}
function IsValueToString(value3) {
  return IsBigInt(value3) || IsBoolean(value3) || IsNumber(value3);
}
function IsValueTrue(value3) {
  return value3 === true || IsNumber(value3) && value3 === 1 || IsBigInt(value3) && value3 === BigInt("1") || IsString(value3) && (value3.toLowerCase() === "true" || value3 === "1");
}
function IsValueFalse(value3) {
  return value3 === false || IsNumber(value3) && (value3 === 0 || Object.is(value3, -0)) || IsBigInt(value3) && value3 === BigInt("0") || IsString(value3) && (value3.toLowerCase() === "false" || value3 === "0" || value3 === "-0");
}
function IsTimeStringWithTimeZone(value3) {
  return IsString(value3) && /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i.test(value3);
}
function IsTimeStringWithoutTimeZone(value3) {
  return IsString(value3) && /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)?$/i.test(value3);
}
function IsDateTimeStringWithTimeZone(value3) {
  return IsString(value3) && /^\d\d\d\d-[0-1]\d-[0-3]\dt(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i.test(value3);
}
function IsDateTimeStringWithoutTimeZone(value3) {
  return IsString(value3) && /^\d\d\d\d-[0-1]\d-[0-3]\dt(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)?$/i.test(value3);
}
function IsDateString(value3) {
  return IsString(value3) && /^\d\d\d\d-[0-1]\d-[0-3]\d$/i.test(value3);
}
function TryConvertLiteralString(value3, target) {
  const conversion = TryConvertString(value3);
  return conversion === target ? conversion : value3;
}
function TryConvertLiteralNumber(value3, target) {
  const conversion = TryConvertNumber(value3);
  return conversion === target ? conversion : value3;
}
function TryConvertLiteralBoolean(value3, target) {
  const conversion = TryConvertBoolean(value3);
  return conversion === target ? conversion : value3;
}
function TryConvertLiteral(schema, value3) {
  return IsString(schema.const) ? TryConvertLiteralString(value3, schema.const) : IsNumber(schema.const) ? TryConvertLiteralNumber(value3, schema.const) : IsBoolean(schema.const) ? TryConvertLiteralBoolean(value3, schema.const) : Clone2(value3);
}
function TryConvertBoolean(value3) {
  return IsValueTrue(value3) ? true : IsValueFalse(value3) ? false : value3;
}
function TryConvertBigInt(value3) {
  return IsStringNumeric(value3) ? BigInt(parseInt(value3)) : IsNumber(value3) ? BigInt(value3 | 0) : IsValueFalse(value3) ? BigInt(0) : IsValueTrue(value3) ? BigInt(1) : value3;
}
function TryConvertString(value3) {
  return IsValueToString(value3) ? value3.toString() : IsSymbol(value3) && value3.description !== undefined ? value3.description.toString() : value3;
}
function TryConvertNumber(value3) {
  return IsStringNumeric(value3) ? parseFloat(value3) : IsValueTrue(value3) ? 1 : IsValueFalse(value3) ? 0 : value3;
}
function TryConvertInteger(value3) {
  return IsStringNumeric(value3) ? parseInt(value3) : IsNumber(value3) ? value3 | 0 : IsValueTrue(value3) ? 1 : IsValueFalse(value3) ? 0 : value3;
}
function TryConvertNull(value3) {
  return IsString(value3) && value3.toLowerCase() === "null" ? null : value3;
}
function TryConvertUndefined(value3) {
  return IsString(value3) && value3 === "undefined" ? undefined : value3;
}
function TryConvertDate(value3) {
  return IsDate(value3) ? value3 : IsNumber(value3) ? new Date(value3) : IsValueTrue(value3) ? new Date(1) : IsValueFalse(value3) ? new Date(0) : IsStringNumeric(value3) ? new Date(parseInt(value3)) : IsTimeStringWithoutTimeZone(value3) ? new Date(`1970-01-01T${value3}.000Z`) : IsTimeStringWithTimeZone(value3) ? new Date(`1970-01-01T${value3}`) : IsDateTimeStringWithoutTimeZone(value3) ? new Date(`${value3}.000Z`) : IsDateTimeStringWithTimeZone(value3) ? new Date(value3) : IsDateString(value3) ? new Date(`${value3}T00:00:00.000Z`) : value3;
}
function Default2(value3) {
  return value3;
}
function FromArray9(schema, references, value3) {
  const elements = IsArray(value3) ? value3 : [value3];
  return elements.map((element) => Visit10(schema.items, references, element));
}
function FromBigInt5(schema, references, value3) {
  return TryConvertBigInt(value3);
}
function FromBoolean5(schema, references, value3) {
  return TryConvertBoolean(value3);
}
function FromDate5(schema, references, value3) {
  return TryConvertDate(value3);
}
function FromInteger5(schema, references, value3) {
  return TryConvertInteger(value3);
}
function FromIntersect9(schema, references, value3) {
  return schema.allOf.reduce((value4, schema2) => Visit10(schema2, references, value4), value3);
}
function FromLiteral6(schema, references, value3) {
  return TryConvertLiteral(schema, value3);
}
function FromNull5(schema, references, value3) {
  return TryConvertNull(value3);
}
function FromNumber5(schema, references, value3) {
  return TryConvertNumber(value3);
}
function FromObject7(schema, references, value3) {
  const isConvertable = IsObject(value3);
  if (!isConvertable)
    return value3;
  const result = {};
  for (const key of Object.keys(value3)) {
    result[key] = HasPropertyKey(schema.properties, key) ? Visit10(schema.properties[key], references, value3[key]) : value3[key];
  }
  return result;
}
function FromRecord7(schema, references, value3) {
  const propertyKey = Object.getOwnPropertyNames(schema.patternProperties)[0];
  const property = schema.patternProperties[propertyKey];
  const result = {};
  for (const [propKey, propValue] of Object.entries(value3)) {
    result[propKey] = Visit10(property, references, propValue);
  }
  return result;
}
function FromRef6(schema, references, value3) {
  return Visit10(Deref(schema, references), references, value3);
}
function FromString5(schema, references, value3) {
  return TryConvertString(value3);
}
function FromSymbol5(schema, references, value3) {
  return IsString(value3) || IsNumber(value3) ? Symbol(value3) : value3;
}
function FromThis6(schema, references, value3) {
  return Visit10(Deref(schema, references), references, value3);
}
function FromTuple9(schema, references, value3) {
  const isConvertable = IsArray(value3) && !IsUndefined(schema.items);
  if (!isConvertable)
    return value3;
  return value3.map((value4, index) => {
    return index < schema.items.length ? Visit10(schema.items[index], references, value4) : value4;
  });
}
function FromUndefined5(schema, references, value3) {
  return TryConvertUndefined(value3);
}
function FromUnion11(schema, references, value3) {
  for (const subschema of schema.anyOf) {
    const converted = Visit10(subschema, references, value3);
    if (!Check(subschema, references, converted))
      continue;
    return converted;
  }
  return value3;
}
function Visit10(schema, references, value3) {
  const references_ = IsString(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema[Kind]) {
    case "Array":
      return FromArray9(schema_, references_, value3);
    case "BigInt":
      return FromBigInt5(schema_, references_, value3);
    case "Boolean":
      return FromBoolean5(schema_, references_, value3);
    case "Date":
      return FromDate5(schema_, references_, value3);
    case "Integer":
      return FromInteger5(schema_, references_, value3);
    case "Intersect":
      return FromIntersect9(schema_, references_, value3);
    case "Literal":
      return FromLiteral6(schema_, references_, value3);
    case "Null":
      return FromNull5(schema_, references_, value3);
    case "Number":
      return FromNumber5(schema_, references_, value3);
    case "Object":
      return FromObject7(schema_, references_, value3);
    case "Record":
      return FromRecord7(schema_, references_, value3);
    case "Ref":
      return FromRef6(schema_, references_, value3);
    case "String":
      return FromString5(schema_, references_, value3);
    case "Symbol":
      return FromSymbol5(schema_, references_, value3);
    case "This":
      return FromThis6(schema_, references_, value3);
    case "Tuple":
      return FromTuple9(schema_, references_, value3);
    case "Undefined":
      return FromUndefined5(schema_, references_, value3);
    case "Union":
      return FromUnion11(schema_, references_, value3);
    default:
      return Default2(value3);
  }
}
function Convert(...args) {
  return args.length === 3 ? Visit10(args[0], args[1], args[2]) : Visit10(args[0], [], args[1]);
}
// node_modules/@sinclair/typebox/build/esm/value/default/default.mjs
function ValueOrDefault(schema, value3) {
  return value3 === undefined && "default" in schema ? Clone2(schema.default) : value3;
}
function IsCheckable2(schema) {
  return IsSchema2(schema) && schema[Kind] !== "Unsafe";
}
function IsDefaultSchema(value3) {
  return IsSchema2(value3) && "default" in value3;
}
function FromArray10(schema, references, value3) {
  const defaulted = ValueOrDefault(schema, value3);
  if (!IsArray(defaulted))
    return defaulted;
  for (let i = 0;i < defaulted.length; i++) {
    defaulted[i] = Visit11(schema.items, references, defaulted[i]);
  }
  return defaulted;
}
function FromIntersect10(schema, references, value3) {
  const defaulted = ValueOrDefault(schema, value3);
  return schema.allOf.reduce((acc, schema2) => {
    const next = Visit11(schema2, references, defaulted);
    return IsObject(next) ? { ...acc, ...next } : next;
  }, {});
}
function FromObject8(schema, references, value3) {
  const defaulted = ValueOrDefault(schema, value3);
  if (!IsObject(defaulted))
    return defaulted;
  const additionalPropertiesSchema = schema.additionalProperties;
  const knownPropertyKeys = Object.getOwnPropertyNames(schema.properties);
  for (const key of knownPropertyKeys) {
    if (!IsDefaultSchema(schema.properties[key]))
      continue;
    defaulted[key] = Visit11(schema.properties[key], references, defaulted[key]);
  }
  if (!IsDefaultSchema(additionalPropertiesSchema))
    return defaulted;
  for (const key of Object.getOwnPropertyNames(defaulted)) {
    if (knownPropertyKeys.includes(key))
      continue;
    defaulted[key] = Visit11(additionalPropertiesSchema, references, defaulted[key]);
  }
  return defaulted;
}
function FromRecord8(schema, references, value3) {
  const defaulted = ValueOrDefault(schema, value3);
  if (!IsObject(defaulted))
    return defaulted;
  const additionalPropertiesSchema = schema.additionalProperties;
  const [propertyKeyPattern, propertySchema] = Object.entries(schema.patternProperties)[0];
  const knownPropertyKey = new RegExp(propertyKeyPattern);
  for (const key of Object.getOwnPropertyNames(defaulted)) {
    if (!(knownPropertyKey.test(key) && IsDefaultSchema(propertySchema)))
      continue;
    defaulted[key] = Visit11(propertySchema, references, defaulted[key]);
  }
  if (!IsDefaultSchema(additionalPropertiesSchema))
    return defaulted;
  for (const key of Object.getOwnPropertyNames(defaulted)) {
    if (knownPropertyKey.test(key))
      continue;
    defaulted[key] = Visit11(additionalPropertiesSchema, references, defaulted[key]);
  }
  return defaulted;
}
function FromRef7(schema, references, value3) {
  return Visit11(Deref(schema, references), references, ValueOrDefault(schema, value3));
}
function FromThis7(schema, references, value3) {
  return Visit11(Deref(schema, references), references, value3);
}
function FromTuple10(schema, references, value3) {
  const defaulted = ValueOrDefault(schema, value3);
  if (!IsArray(defaulted) || IsUndefined(schema.items))
    return defaulted;
  const [items, max] = [schema.items, Math.max(schema.items.length, defaulted.length)];
  for (let i = 0;i < max; i++) {
    if (i < items.length)
      defaulted[i] = Visit11(items[i], references, defaulted[i]);
  }
  return defaulted;
}
function FromUnion12(schema, references, value3) {
  const defaulted = ValueOrDefault(schema, value3);
  for (const inner of schema.anyOf) {
    const result = Visit11(inner, references, defaulted);
    if (IsCheckable2(inner) && Check(inner, result)) {
      return result;
    }
  }
  return defaulted;
}
function Visit11(schema, references, value3) {
  const references_ = IsString(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema_[Kind]) {
    case "Array":
      return FromArray10(schema_, references_, value3);
    case "Intersect":
      return FromIntersect10(schema_, references_, value3);
    case "Object":
      return FromObject8(schema_, references_, value3);
    case "Record":
      return FromRecord8(schema_, references_, value3);
    case "Ref":
      return FromRef7(schema_, references_, value3);
    case "This":
      return FromThis7(schema_, references_, value3);
    case "Tuple":
      return FromTuple10(schema_, references_, value3);
    case "Union":
      return FromUnion12(schema_, references_, value3);
    default:
      return ValueOrDefault(schema_, value3);
  }
}
function Default3(...args) {
  return args.length === 3 ? Visit11(args[0], args[1], args[2]) : Visit11(args[0], [], args[1]);
}
// node_modules/@sinclair/typebox/build/esm/value/pointer/pointer.mjs
var exports_pointer = {};
__export(exports_pointer, {
  ValuePointerRootSetError: () => ValuePointerRootSetError,
  ValuePointerRootDeleteError: () => ValuePointerRootDeleteError,
  Set: () => Set4,
  Has: () => Has3,
  Get: () => Get3,
  Format: () => Format,
  Delete: () => Delete3
});
function Escape2(component) {
  return component.indexOf("~") === -1 ? component : component.replace(/~1/g, "/").replace(/~0/g, "~");
}
function* Format(pointer) {
  if (pointer === "")
    return;
  let [start, end] = [0, 0];
  for (let i = 0;i < pointer.length; i++) {
    const char = pointer.charAt(i);
    if (char === "/") {
      if (i === 0) {
        start = i + 1;
      } else {
        end = i;
        yield Escape2(pointer.slice(start, end));
        start = i + 1;
      }
    } else {
      end = i;
    }
  }
  yield Escape2(pointer.slice(start));
}
function Set4(value3, pointer, update) {
  if (pointer === "")
    throw new ValuePointerRootSetError(value3, pointer, update);
  let [owner, next, key] = [null, value3, ""];
  for (const component of Format(pointer)) {
    if (next[component] === undefined)
      next[component] = {};
    owner = next;
    next = next[component];
    key = component;
  }
  owner[key] = update;
}
function Delete3(value3, pointer) {
  if (pointer === "")
    throw new ValuePointerRootDeleteError(value3, pointer);
  let [owner, next, key] = [null, value3, ""];
  for (const component of Format(pointer)) {
    if (next[component] === undefined || next[component] === null)
      return;
    owner = next;
    next = next[component];
    key = component;
  }
  if (Array.isArray(owner)) {
    const index = parseInt(key);
    owner.splice(index, 1);
  } else {
    delete owner[key];
  }
}
function Has3(value3, pointer) {
  if (pointer === "")
    return true;
  let [owner, next, key] = [null, value3, ""];
  for (const component of Format(pointer)) {
    if (next[component] === undefined)
      return false;
    owner = next;
    next = next[component];
    key = component;
  }
  return Object.getOwnPropertyNames(owner).includes(key);
}
function Get3(value3, pointer) {
  if (pointer === "")
    return value3;
  let current = value3;
  for (const component of Format(pointer)) {
    if (current[component] === undefined)
      return;
    current = current[component];
  }
  return current;
}

class ValuePointerRootSetError extends TypeBoxError {
  constructor(value3, path, update) {
    super("Cannot set root value");
    this.value = value3;
    this.path = path;
    this.update = update;
  }
}

class ValuePointerRootDeleteError extends TypeBoxError {
  constructor(value3, path) {
    super("Cannot delete root value");
    this.value = value3;
    this.path = path;
  }
}
// node_modules/@sinclair/typebox/build/esm/value/delta/delta.mjs
function CreateUpdate(path, value3) {
  return { type: "update", path, value: value3 };
}
function CreateInsert(path, value3) {
  return { type: "insert", path, value: value3 };
}
function CreateDelete(path) {
  return { type: "delete", path };
}
function* ObjectType4(path, current, next) {
  if (!IsStandardObject(next))
    return yield CreateUpdate(path, next);
  const currentKeys = [...globalThis.Object.keys(current), ...globalThis.Object.getOwnPropertySymbols(current)];
  const nextKeys = [...globalThis.Object.keys(next), ...globalThis.Object.getOwnPropertySymbols(next)];
  for (const key of currentKeys) {
    if (IsSymbol(key))
      throw new ValueDeltaSymbolError(key);
    if (IsUndefined(next[key]) && nextKeys.includes(key))
      yield CreateUpdate(`${path}/${globalThis.String(key)}`, undefined);
  }
  for (const key of nextKeys) {
    if (IsUndefined(current[key]) || IsUndefined(next[key]))
      continue;
    if (IsSymbol(key))
      throw new ValueDeltaSymbolError(key);
    yield* Visit12(`${path}/${globalThis.String(key)}`, current[key], next[key]);
  }
  for (const key of nextKeys) {
    if (IsSymbol(key))
      throw new ValueDeltaSymbolError(key);
    if (IsUndefined(current[key]))
      yield CreateInsert(`${path}/${globalThis.String(key)}`, next[key]);
  }
  for (const key of currentKeys.reverse()) {
    if (IsSymbol(key))
      throw new ValueDeltaSymbolError(key);
    if (IsUndefined(next[key]) && !nextKeys.includes(key))
      yield CreateDelete(`${path}/${globalThis.String(key)}`);
  }
}
function* ArrayType4(path, current, next) {
  if (!IsArray(next))
    return yield CreateUpdate(path, next);
  for (let i = 0;i < Math.min(current.length, next.length); i++) {
    yield* Visit12(`${path}/${i}`, current[i], next[i]);
  }
  for (let i = 0;i < next.length; i++) {
    if (i < current.length)
      continue;
    yield CreateInsert(`${path}/${i}`, next[i]);
  }
  for (let i = current.length - 1;i >= 0; i--) {
    if (i < next.length)
      continue;
    yield CreateDelete(`${path}/${i}`);
  }
}
function* TypedArrayType2(path, current, next) {
  if (!IsTypedArray(next) || current.length !== next.length || globalThis.Object.getPrototypeOf(current).constructor.name !== globalThis.Object.getPrototypeOf(next).constructor.name)
    return yield CreateUpdate(path, next);
  for (let i = 0;i < Math.min(current.length, next.length); i++) {
    yield* Visit12(`${path}/${i}`, current[i], next[i]);
  }
}
function* ValueType2(path, current, next) {
  if (current === next)
    return;
  yield CreateUpdate(path, next);
}
function* Visit12(path, current, next) {
  if (IsStandardObject(current))
    return yield* ObjectType4(path, current, next);
  if (IsArray(current))
    return yield* ArrayType4(path, current, next);
  if (IsTypedArray(current))
    return yield* TypedArrayType2(path, current, next);
  if (IsValueType(current))
    return yield* ValueType2(path, current, next);
  throw new ValueDeltaError(current, "Unable to create diff edits for unknown value");
}
function Diff(current, next) {
  return [...Visit12("", current, next)];
}
function IsRootUpdate(edits) {
  return edits.length > 0 && edits[0].path === "" && edits[0].type === "update";
}
function IsIdentity(edits) {
  return edits.length === 0;
}
function Patch(current, edits) {
  if (IsRootUpdate(edits)) {
    return Clone2(edits[0].value);
  }
  if (IsIdentity(edits)) {
    return Clone2(current);
  }
  const clone8 = Clone2(current);
  for (const edit of edits) {
    switch (edit.type) {
      case "insert": {
        exports_pointer.Set(clone8, edit.path, edit.value);
        break;
      }
      case "update": {
        exports_pointer.Set(clone8, edit.path, edit.value);
        break;
      }
      case "delete": {
        exports_pointer.Delete(clone8, edit.path);
        break;
      }
    }
  }
  return clone8;
}
var Insert = Object2({
  type: Literal("insert"),
  path: String2(),
  value: Unknown()
});
var Update = Object2({
  type: Literal("update"),
  path: String2(),
  value: Unknown()
});
var Delete4 = Object2({
  type: Literal("delete"),
  path: String2()
});
var Edit = Union([Insert, Update, Delete4]);

class ValueDeltaError extends TypeBoxError {
  constructor(value3, message) {
    super(message);
    this.value = value3;
  }
}

class ValueDeltaSymbolError extends ValueDeltaError {
  constructor(value3) {
    super(value3, "Cannot diff objects with symbol keys");
    this.value = value3;
  }
}
// node_modules/@sinclair/typebox/build/esm/value/equal/equal.mjs
function ObjectType5(left, right) {
  if (!IsStandardObject(right))
    return false;
  const leftKeys = [...Object.keys(left), ...Object.getOwnPropertySymbols(left)];
  const rightKeys = [...Object.keys(right), ...Object.getOwnPropertySymbols(right)];
  if (leftKeys.length !== rightKeys.length)
    return false;
  return leftKeys.every((key) => Equal(left[key], right[key]));
}
function DateType4(left, right) {
  return IsDate(right) && left.getTime() === right.getTime();
}
function ArrayType5(left, right) {
  if (!IsArray(right) || left.length !== right.length)
    return false;
  return left.every((value3, index) => Equal(value3, right[index]));
}
function TypedArrayType3(left, right) {
  if (!IsTypedArray(right) || left.length !== right.length || Object.getPrototypeOf(left).constructor.name !== Object.getPrototypeOf(right).constructor.name)
    return false;
  return left.every((value3, index) => Equal(value3, right[index]));
}
function ValueType3(left, right) {
  return left === right;
}
function Equal(left, right) {
  if (IsStandardObject(left))
    return ObjectType5(left, right);
  if (IsDate(left))
    return DateType4(left, right);
  if (IsTypedArray(left))
    return TypedArrayType3(left, right);
  if (IsArray(left))
    return ArrayType5(left, right);
  if (IsValueType(left))
    return ValueType3(left, right);
  throw new Error("ValueEquals: Unable to compare value");
}
// node_modules/@sinclair/typebox/build/esm/value/mutate/mutate.mjs
function ObjectType6(root, path, current, next) {
  if (!IsStandardObject(current)) {
    exports_pointer.Set(root, path, Clone2(next));
  } else {
    const currentKeys = Object.getOwnPropertyNames(current);
    const nextKeys = Object.getOwnPropertyNames(next);
    for (const currentKey of currentKeys) {
      if (!nextKeys.includes(currentKey)) {
        delete current[currentKey];
      }
    }
    for (const nextKey of nextKeys) {
      if (!currentKeys.includes(nextKey)) {
        current[nextKey] = null;
      }
    }
    for (const nextKey of nextKeys) {
      Visit13(root, `${path}/${nextKey}`, current[nextKey], next[nextKey]);
    }
  }
}
function ArrayType6(root, path, current, next) {
  if (!IsArray(current)) {
    exports_pointer.Set(root, path, Clone2(next));
  } else {
    for (let index = 0;index < next.length; index++) {
      Visit13(root, `${path}/${index}`, current[index], next[index]);
    }
    current.splice(next.length);
  }
}
function TypedArrayType4(root, path, current, next) {
  if (IsTypedArray(current) && current.length === next.length) {
    for (let i = 0;i < current.length; i++) {
      current[i] = next[i];
    }
  } else {
    exports_pointer.Set(root, path, Clone2(next));
  }
}
function ValueType4(root, path, current, next) {
  if (current === next)
    return;
  exports_pointer.Set(root, path, next);
}
function Visit13(root, path, current, next) {
  if (IsArray(next))
    return ArrayType6(root, path, current, next);
  if (IsTypedArray(next))
    return TypedArrayType4(root, path, current, next);
  if (IsStandardObject(next))
    return ObjectType6(root, path, current, next);
  if (IsValueType(next))
    return ValueType4(root, path, current, next);
}
function IsNonMutableValue(value3) {
  return IsTypedArray(value3) || IsValueType(value3);
}
function IsMismatchedValue(current, next) {
  return IsStandardObject(current) && IsArray(next) || IsArray(current) && IsStandardObject(next);
}
function Mutate(current, next) {
  if (IsNonMutableValue(current) || IsNonMutableValue(next))
    throw new ValueMutateError("Only object and array types can be mutated at the root level");
  if (IsMismatchedValue(current, next))
    throw new ValueMutateError("Cannot assign due type mismatch of assignable values");
  Visit13(current, "", current, next);
}

class ValueMutateError extends TypeBoxError {
  constructor(message) {
    super(message);
  }
}
// node_modules/@sinclair/typebox/build/esm/value/transform/decode.mjs
function Default4(schema, path, value3) {
  try {
    return IsTransform2(schema) ? schema[TransformKind].Decode(value3) : value3;
  } catch (error19) {
    throw new TransformDecodeError(schema, path, value3, error19);
  }
}
function FromArray11(schema, references, path, value3) {
  return IsArray(value3) ? Default4(schema, path, value3.map((value4, index) => Visit14(schema.items, references, `${path}/${index}`, value4))) : Default4(schema, path, value3);
}
function FromIntersect11(schema, references, path, value3) {
  if (!IsStandardObject(value3) || IsValueType(value3))
    return Default4(schema, path, value3);
  const knownEntries = KeyOfPropertyEntries(schema);
  const knownKeys = knownEntries.map((entry) => entry[0]);
  const knownProperties = { ...value3 };
  for (const [knownKey, knownSchema] of knownEntries)
    if (knownKey in knownProperties) {
      knownProperties[knownKey] = Visit14(knownSchema, references, `${path}/${knownKey}`, knownProperties[knownKey]);
    }
  if (!IsTransform2(schema.unevaluatedProperties)) {
    return Default4(schema, path, knownProperties);
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const unevaluatedProperties = schema.unevaluatedProperties;
  const unknownProperties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.includes(key)) {
      unknownProperties[key] = Default4(unevaluatedProperties, `${path}/${key}`, unknownProperties[key]);
    }
  return Default4(schema, path, unknownProperties);
}
function FromNot5(schema, references, path, value3) {
  return Default4(schema, path, Visit14(schema.not, references, path, value3));
}
function FromObject9(schema, references, path, value3) {
  if (!IsStandardObject(value3))
    return Default4(schema, path, value3);
  const knownKeys = KeyOfPropertyKeys(schema);
  const knownProperties = { ...value3 };
  for (const key of knownKeys)
    if (key in knownProperties) {
      knownProperties[key] = Visit14(schema.properties[key], references, `${path}/${key}`, knownProperties[key]);
    }
  if (!IsSchema2(schema.additionalProperties)) {
    return Default4(schema, path, knownProperties);
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const additionalProperties = schema.additionalProperties;
  const unknownProperties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.includes(key)) {
      unknownProperties[key] = Default4(additionalProperties, `${path}/${key}`, unknownProperties[key]);
    }
  return Default4(schema, path, unknownProperties);
}
function FromRecord9(schema, references, path, value3) {
  if (!IsStandardObject(value3))
    return Default4(schema, path, value3);
  const pattern3 = Object.getOwnPropertyNames(schema.patternProperties)[0];
  const knownKeys = new RegExp(pattern3);
  const knownProperties = { ...value3 };
  for (const key of Object.getOwnPropertyNames(value3))
    if (knownKeys.test(key)) {
      knownProperties[key] = Visit14(schema.patternProperties[pattern3], references, `${path}/${key}`, knownProperties[key]);
    }
  if (!IsSchema2(schema.additionalProperties)) {
    return Default4(schema, path, knownProperties);
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const additionalProperties = schema.additionalProperties;
  const unknownProperties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.test(key)) {
      unknownProperties[key] = Default4(additionalProperties, `${path}/${key}`, unknownProperties[key]);
    }
  return Default4(schema, path, unknownProperties);
}
function FromRef8(schema, references, path, value3) {
  const target = Deref(schema, references);
  return Default4(schema, path, Visit14(target, references, path, value3));
}
function FromThis8(schema, references, path, value3) {
  const target = Deref(schema, references);
  return Default4(schema, path, Visit14(target, references, path, value3));
}
function FromTuple11(schema, references, path, value3) {
  return IsArray(value3) && IsArray(schema.items) ? Default4(schema, path, schema.items.map((schema2, index) => Visit14(schema2, references, `${path}/${index}`, value3[index]))) : Default4(schema, path, value3);
}
function FromUnion13(schema, references, path, value3) {
  for (const subschema of schema.anyOf) {
    if (!Check(subschema, references, value3))
      continue;
    const decoded = Visit14(subschema, references, path, value3);
    return Default4(schema, path, decoded);
  }
  return Default4(schema, path, value3);
}
function Visit14(schema, references, path, value3) {
  const references_ = typeof schema.$id === "string" ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema[Kind]) {
    case "Array":
      return FromArray11(schema_, references_, path, value3);
    case "Intersect":
      return FromIntersect11(schema_, references_, path, value3);
    case "Not":
      return FromNot5(schema_, references_, path, value3);
    case "Object":
      return FromObject9(schema_, references_, path, value3);
    case "Record":
      return FromRecord9(schema_, references_, path, value3);
    case "Ref":
      return FromRef8(schema_, references_, path, value3);
    case "Symbol":
      return Default4(schema_, path, value3);
    case "This":
      return FromThis8(schema_, references_, path, value3);
    case "Tuple":
      return FromTuple11(schema_, references_, path, value3);
    case "Union":
      return FromUnion13(schema_, references_, path, value3);
    default:
      return Default4(schema_, path, value3);
  }
}
function TransformDecode(schema, references, value3) {
  return Visit14(schema, references, "", value3);
}

class TransformDecodeCheckError extends TypeBoxError {
  constructor(schema, value3, error19) {
    super(`Unable to decode value as it does not match the expected schema`);
    this.schema = schema;
    this.value = value3;
    this.error = error19;
  }
}

class TransformDecodeError extends TypeBoxError {
  constructor(schema, path, value3, error19) {
    super(error19 instanceof Error ? error19.message : "Unknown error");
    this.schema = schema;
    this.path = path;
    this.value = value3;
    this.error = error19;
  }
}
// node_modules/@sinclair/typebox/build/esm/value/transform/encode.mjs
function Default5(schema, path, value3) {
  try {
    return IsTransform2(schema) ? schema[TransformKind].Encode(value3) : value3;
  } catch (error20) {
    throw new TransformEncodeError(schema, path, value3, error20);
  }
}
function FromArray12(schema, references, path, value3) {
  const defaulted = Default5(schema, path, value3);
  return IsArray(defaulted) ? defaulted.map((value4, index) => Visit15(schema.items, references, `${path}/${index}`, value4)) : defaulted;
}
function FromIntersect12(schema, references, path, value3) {
  const defaulted = Default5(schema, path, value3);
  if (!IsStandardObject(value3) || IsValueType(value3))
    return defaulted;
  const knownEntries = KeyOfPropertyEntries(schema);
  const knownKeys = knownEntries.map((entry) => entry[0]);
  const knownProperties = { ...defaulted };
  for (const [knownKey, knownSchema] of knownEntries)
    if (knownKey in knownProperties) {
      knownProperties[knownKey] = Visit15(knownSchema, references, `${path}/${knownKey}`, knownProperties[knownKey]);
    }
  if (!IsTransform2(schema.unevaluatedProperties)) {
    return Default5(schema, path, knownProperties);
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const unevaluatedProperties = schema.unevaluatedProperties;
  const properties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.includes(key)) {
      properties[key] = Default5(unevaluatedProperties, `${path}/${key}`, properties[key]);
    }
  return properties;
}
function FromNot6(schema, references, path, value3) {
  return Default5(schema.not, path, Default5(schema, path, value3));
}
function FromObject10(schema, references, path, value3) {
  const defaulted = Default5(schema, path, value3);
  if (!IsStandardObject(defaulted))
    return defaulted;
  const knownKeys = KeyOfPropertyKeys(schema);
  const knownProperties = { ...defaulted };
  for (const key of knownKeys)
    if (key in knownProperties) {
      knownProperties[key] = Visit15(schema.properties[key], references, `${path}/${key}`, knownProperties[key]);
    }
  if (!IsSchema2(schema.additionalProperties)) {
    return knownProperties;
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const additionalProperties = schema.additionalProperties;
  const properties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.includes(key)) {
      properties[key] = Default5(additionalProperties, `${path}/${key}`, properties[key]);
    }
  return properties;
}
function FromRecord10(schema, references, path, value3) {
  const defaulted = Default5(schema, path, value3);
  if (!IsStandardObject(value3))
    return defaulted;
  const pattern3 = Object.getOwnPropertyNames(schema.patternProperties)[0];
  const knownKeys = new RegExp(pattern3);
  const knownProperties = { ...defaulted };
  for (const key of Object.getOwnPropertyNames(value3))
    if (knownKeys.test(key)) {
      knownProperties[key] = Visit15(schema.patternProperties[pattern3], references, `${path}/${key}`, knownProperties[key]);
    }
  if (!IsSchema2(schema.additionalProperties)) {
    return Default5(schema, path, knownProperties);
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const additionalProperties = schema.additionalProperties;
  const properties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.test(key)) {
      properties[key] = Default5(additionalProperties, `${path}/${key}`, properties[key]);
    }
  return properties;
}
function FromRef9(schema, references, path, value3) {
  const target = Deref(schema, references);
  const resolved = Visit15(target, references, path, value3);
  return Default5(schema, path, resolved);
}
function FromThis9(schema, references, path, value3) {
  const target = Deref(schema, references);
  const resolved = Visit15(target, references, path, value3);
  return Default5(schema, path, resolved);
}
function FromTuple12(schema, references, path, value3) {
  const value1 = Default5(schema, path, value3);
  return IsArray(schema.items) ? schema.items.map((schema2, index) => Visit15(schema2, references, `${path}/${index}`, value1[index])) : [];
}
function FromUnion14(schema, references, path, value3) {
  for (const subschema of schema.anyOf) {
    if (!Check(subschema, references, value3))
      continue;
    const value1 = Visit15(subschema, references, path, value3);
    return Default5(schema, path, value1);
  }
  for (const subschema of schema.anyOf) {
    const value1 = Visit15(subschema, references, path, value3);
    if (!Check(schema, references, value1))
      continue;
    return Default5(schema, path, value1);
  }
  return Default5(schema, path, value3);
}
function Visit15(schema, references, path, value3) {
  const references_ = typeof schema.$id === "string" ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema[Kind]) {
    case "Array":
      return FromArray12(schema_, references_, path, value3);
    case "Intersect":
      return FromIntersect12(schema_, references_, path, value3);
    case "Not":
      return FromNot6(schema_, references_, path, value3);
    case "Object":
      return FromObject10(schema_, references_, path, value3);
    case "Record":
      return FromRecord10(schema_, references_, path, value3);
    case "Ref":
      return FromRef9(schema_, references_, path, value3);
    case "This":
      return FromThis9(schema_, references_, path, value3);
    case "Tuple":
      return FromTuple12(schema_, references_, path, value3);
    case "Union":
      return FromUnion14(schema_, references_, path, value3);
    default:
      return Default5(schema_, path, value3);
  }
}
function TransformEncode(schema, references, value3) {
  return Visit15(schema, references, "", value3);
}

class TransformEncodeCheckError extends TypeBoxError {
  constructor(schema, value3, error20) {
    super(`The encoded value does not match the expected schema`);
    this.schema = schema;
    this.value = value3;
    this.error = error20;
  }
}

class TransformEncodeError extends TypeBoxError {
  constructor(schema, path, value3, error20) {
    super(`${error20 instanceof Error ? error20.message : "Unknown error"}`);
    this.schema = schema;
    this.path = path;
    this.value = value3;
    this.error = error20;
  }
}
// node_modules/@sinclair/typebox/build/esm/value/transform/has.mjs
function FromArray13(schema, references) {
  return IsTransform2(schema) || Visit16(schema.items, references);
}
function FromAsyncIterator5(schema, references) {
  return IsTransform2(schema) || Visit16(schema.items, references);
}
function FromConstructor6(schema, references) {
  return IsTransform2(schema) || Visit16(schema.returns, references) || schema.parameters.some((schema2) => Visit16(schema2, references));
}
function FromFunction5(schema, references) {
  return IsTransform2(schema) || Visit16(schema.returns, references) || schema.parameters.some((schema2) => Visit16(schema2, references));
}
function FromIntersect13(schema, references) {
  return IsTransform2(schema) || IsTransform2(schema.unevaluatedProperties) || schema.allOf.some((schema2) => Visit16(schema2, references));
}
function FromIterator5(schema, references) {
  return IsTransform2(schema) || Visit16(schema.items, references);
}
function FromNot7(schema, references) {
  return IsTransform2(schema) || Visit16(schema.not, references);
}
function FromObject11(schema, references) {
  return IsTransform2(schema) || Object.values(schema.properties).some((schema2) => Visit16(schema2, references)) || IsSchema2(schema.additionalProperties) && Visit16(schema.additionalProperties, references);
}
function FromPromise5(schema, references) {
  return IsTransform2(schema) || Visit16(schema.item, references);
}
function FromRecord11(schema, references) {
  const pattern3 = Object.getOwnPropertyNames(schema.patternProperties)[0];
  const property = schema.patternProperties[pattern3];
  return IsTransform2(schema) || Visit16(property, references) || IsSchema2(schema.additionalProperties) && IsTransform2(schema.additionalProperties);
}
function FromRef10(schema, references) {
  if (IsTransform2(schema))
    return true;
  return Visit16(Deref(schema, references), references);
}
function FromThis10(schema, references) {
  if (IsTransform2(schema))
    return true;
  return Visit16(Deref(schema, references), references);
}
function FromTuple13(schema, references) {
  return IsTransform2(schema) || !IsUndefined(schema.items) && schema.items.some((schema2) => Visit16(schema2, references));
}
function FromUnion15(schema, references) {
  return IsTransform2(schema) || schema.anyOf.some((schema2) => Visit16(schema2, references));
}
function Visit16(schema, references) {
  const references_ = IsString(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  if (schema.$id && visited.has(schema.$id))
    return false;
  if (schema.$id)
    visited.add(schema.$id);
  switch (schema[Kind]) {
    case "Array":
      return FromArray13(schema_, references_);
    case "AsyncIterator":
      return FromAsyncIterator5(schema_, references_);
    case "Constructor":
      return FromConstructor6(schema_, references_);
    case "Function":
      return FromFunction5(schema_, references_);
    case "Intersect":
      return FromIntersect13(schema_, references_);
    case "Iterator":
      return FromIterator5(schema_, references_);
    case "Not":
      return FromNot7(schema_, references_);
    case "Object":
      return FromObject11(schema_, references_);
    case "Promise":
      return FromPromise5(schema_, references_);
    case "Record":
      return FromRecord11(schema_, references_);
    case "Ref":
      return FromRef10(schema_, references_);
    case "This":
      return FromThis10(schema_, references_);
    case "Tuple":
      return FromTuple13(schema_, references_);
    case "Union":
      return FromUnion15(schema_, references_);
    default:
      return IsTransform2(schema);
  }
}
function HasTransform(schema, references) {
  visited.clear();
  return Visit16(schema, references);
}
var visited = new Set;
// node_modules/@sinclair/typebox/build/esm/value/value/value.mjs
var exports_value2 = {};
__export(exports_value2, {
  Patch: () => Patch2,
  Mutate: () => Mutate2,
  Hash: () => Hash2,
  Errors: () => Errors2,
  Equal: () => Equal2,
  Encode: () => Encode,
  Diff: () => Diff2,
  Default: () => Default6,
  Decode: () => Decode,
  Create: () => Create3,
  Convert: () => Convert2,
  Clone: () => Clone3,
  Clean: () => Clean2,
  Check: () => Check2,
  Cast: () => Cast2
});
function Cast2(...args) {
  return Cast.apply(Cast, args);
}
function Create3(...args) {
  return Create2.apply(Create2, args);
}
function Check2(...args) {
  return Check.apply(Check, args);
}
function Clean2(...args) {
  return Clean.apply(Clean, args);
}
function Convert2(...args) {
  return Convert.apply(Convert, args);
}
function Clone3(value3) {
  return Clone2(value3);
}
function Decode(...args) {
  const [schema, references, value3] = args.length === 3 ? [args[0], args[1], args[2]] : [args[0], [], args[1]];
  if (!Check2(schema, references, value3))
    throw new TransformDecodeCheckError(schema, value3, Errors2(schema, references, value3).First());
  return HasTransform(schema, references) ? TransformDecode(schema, references, value3) : value3;
}
function Default6(...args) {
  return Default3.apply(Default3, args);
}
function Encode(...args) {
  const [schema, references, value3] = args.length === 3 ? [args[0], args[1], args[2]] : [args[0], [], args[1]];
  const encoded = HasTransform(schema, references) ? TransformEncode(schema, references, value3) : value3;
  if (!Check2(schema, references, encoded))
    throw new TransformEncodeCheckError(schema, encoded, Errors2(schema, references, encoded).First());
  return encoded;
}
function Errors2(...args) {
  return Errors.apply(Errors, args);
}
function Equal2(left, right) {
  return Equal(left, right);
}
function Diff2(current, next) {
  return Diff(current, next);
}
function Hash2(value3) {
  return Hash(value3);
}
function Patch2(current, edits) {
  return Patch(current, edits);
}
function Mutate2(current, next) {
  Mutate(current, next);
}
// node_modules/@sinclair/typebox/build/esm/type/awaited/awaited.mjs
function FromRest4(T) {
  return T.map((L) => AwaitedResolve(L));
}
function FromIntersect14(T) {
  return Intersect(FromRest4(T));
}
function FromUnion16(T) {
  return Union(FromRest4(T));
}
function FromPromise6(T) {
  return AwaitedResolve(T);
}
function AwaitedResolve(T) {
  return IsIntersect(T) ? FromIntersect14(T.allOf) : IsUnion(T) ? FromUnion16(T.anyOf) : IsPromise2(T) ? FromPromise6(T.item) : T;
}
function Awaited(T, options = {}) {
  return CloneType(AwaitedResolve(T), options);
}
// node_modules/@sinclair/typebox/build/esm/type/composite/composite.mjs
function CompositeKeys(T) {
  const Acc = [];
  for (const L of T)
    Acc.push(...KeyOfPropertyKeys(L));
  return SetDistinct(Acc);
}
function FilterNever(T) {
  return T.filter((L) => !IsNever(L));
}
function CompositeProperty(T, K) {
  const Acc = [];
  for (const L of T)
    Acc.push(...IndexFromPropertyKeys(L, [K]));
  return FilterNever(Acc);
}
function CompositeProperties(T, K) {
  const Acc = {};
  for (const L of K) {
    Acc[L] = IntersectEvaluated(CompositeProperty(T, L));
  }
  return Acc;
}
function Composite(T, options = {}) {
  const K = CompositeKeys(T);
  const P = CompositeProperties(T, K);
  const R = Object2(P, options);
  return R;
}
// node_modules/@sinclair/typebox/build/esm/type/date/date.mjs
function Date2(options = {}) {
  return {
    ...options,
    [Kind]: "Date",
    type: "Date"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/null/null.mjs
function Null(options = {}) {
  return {
    ...options,
    [Kind]: "Null",
    type: "null"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/symbol/symbol.mjs
function Symbol2(options) {
  return { ...options, [Kind]: "Symbol", type: "symbol" };
}
// node_modules/@sinclair/typebox/build/esm/type/undefined/undefined.mjs
function Undefined(options = {}) {
  return { ...options, [Kind]: "Undefined", type: "undefined" };
}
// node_modules/@sinclair/typebox/build/esm/type/uint8array/uint8array.mjs
function Uint8Array2(options = {}) {
  return { ...options, [Kind]: "Uint8Array", type: "Uint8Array" };
}
// node_modules/@sinclair/typebox/build/esm/type/const/const.mjs
function FromArray14(T) {
  return T.map((L) => FromValue(L, false));
}
function FromProperties8(value5) {
  const Acc = {};
  for (const K of globalThis.Object.getOwnPropertyNames(value5))
    Acc[K] = Readonly(FromValue(value5[K], false));
  return Acc;
}
function ConditionalReadonly(T, root) {
  return root === true ? T : Readonly(T);
}
function FromValue(value5, root) {
  return IsAsyncIterator2(value5) ? ConditionalReadonly(Any(), root) : IsIterator2(value5) ? ConditionalReadonly(Any(), root) : IsArray2(value5) ? Readonly(Tuple(FromArray14(value5))) : IsUint8Array2(value5) ? Uint8Array2() : IsDate2(value5) ? Date2() : IsObject2(value5) ? ConditionalReadonly(Object2(FromProperties8(value5)), root) : IsFunction2(value5) ? ConditionalReadonly(Function2([], Unknown()), root) : IsUndefined2(value5) ? Undefined() : IsNull2(value5) ? Null() : IsSymbol2(value5) ? Symbol2() : IsBigInt2(value5) ? BigInt2() : IsNumber2(value5) ? Literal(value5) : IsBoolean2(value5) ? Literal(value5) : IsString2(value5) ? Literal(value5) : Object2({});
}
function Const(T, options = {}) {
  return CloneType(FromValue(T, true), options);
}
// node_modules/@sinclair/typebox/build/esm/type/constructor-parameters/constructor-parameters.mjs
function ConstructorParameters(schema, options = {}) {
  return Tuple(CloneRest(schema.parameters), { ...options });
}
// node_modules/@sinclair/typebox/build/esm/type/deref/deref.mjs
function FromRest5(schema, references) {
  return schema.map((schema2) => Deref2(schema2, references));
}
function FromProperties9(properties, references) {
  const Acc = {};
  for (const K of globalThis.Object.getOwnPropertyNames(properties)) {
    Acc[K] = Deref2(properties[K], references);
  }
  return Acc;
}
function FromConstructor7(schema, references) {
  schema.parameters = FromRest5(schema.parameters, references);
  schema.returns = Deref2(schema.returns, references);
  return schema;
}
function FromFunction6(schema, references) {
  schema.parameters = FromRest5(schema.parameters, references);
  schema.returns = Deref2(schema.returns, references);
  return schema;
}
function FromIntersect15(schema, references) {
  schema.allOf = FromRest5(schema.allOf, references);
  return schema;
}
function FromUnion17(schema, references) {
  schema.anyOf = FromRest5(schema.anyOf, references);
  return schema;
}
function FromTuple14(schema, references) {
  if (IsUndefined2(schema.items))
    return schema;
  schema.items = FromRest5(schema.items, references);
  return schema;
}
function FromArray15(schema, references) {
  schema.items = Deref2(schema.items, references);
  return schema;
}
function FromObject12(schema, references) {
  schema.properties = FromProperties9(schema.properties, references);
  return schema;
}
function FromPromise7(schema, references) {
  schema.item = Deref2(schema.item, references);
  return schema;
}
function FromAsyncIterator6(schema, references) {
  schema.items = Deref2(schema.items, references);
  return schema;
}
function FromIterator6(schema, references) {
  schema.items = Deref2(schema.items, references);
  return schema;
}
function FromRef11(schema, references) {
  const target = references.find((remote) => remote.$id === schema.$ref);
  if (target === undefined)
    throw Error(`Unable to dereference schema with \$id ${schema.$ref}`);
  const discard8 = Discard(target, ["$id"]);
  return Deref2(discard8, references);
}
function DerefResolve(schema, references) {
  return IsConstructor(schema) ? FromConstructor7(schema, references) : IsFunction3(schema) ? FromFunction6(schema, references) : IsIntersect(schema) ? FromIntersect15(schema, references) : IsUnion(schema) ? FromUnion17(schema, references) : IsTuple(schema) ? FromTuple14(schema, references) : IsArray3(schema) ? FromArray15(schema, references) : IsObject3(schema) ? FromObject12(schema, references) : IsPromise2(schema) ? FromPromise7(schema, references) : IsAsyncIterator3(schema) ? FromAsyncIterator6(schema, references) : IsIterator3(schema) ? FromIterator6(schema, references) : IsRef(schema) ? FromRef11(schema, references) : schema;
}
function Deref2(schema, references) {
  return DerefResolve(CloneType(schema), CloneRest(references));
}
// node_modules/@sinclair/typebox/build/esm/type/enum/enum.mjs
function Enum(item, options = {}) {
  if (IsUndefined2(item))
    throw new Error("Enum undefined or empty");
  const values1 = globalThis.Object.getOwnPropertyNames(item).filter((key) => isNaN(key)).map((key) => item[key]);
  const values2 = [...new Set(values1)];
  const anyOf = values2.map((value7) => Literal(value7));
  return Union(anyOf, { ...options, [Hint]: "Enum" });
}
// node_modules/@sinclair/typebox/build/esm/type/exclude/exclude-from-template-literal.mjs
function ExcludeFromTemplateLiteral(L, R) {
  return Exclude(TemplateLiteralToUnion(L), R);
}

// node_modules/@sinclair/typebox/build/esm/type/exclude/exclude.mjs
function ExcludeRest(L, R) {
  const excluded = L.filter((inner) => ExtendsCheck(inner, R) === ExtendsResult.False);
  return excluded.length === 1 ? excluded[0] : Union(excluded);
}
function Exclude(L, R, options = {}) {
  if (IsTemplateLiteral(L))
    return CloneType(ExcludeFromTemplateLiteral(L, R), options);
  if (IsMappedResult(L))
    return CloneType(ExcludeFromMappedResult(L, R), options);
  return CloneType(IsUnion(L) ? ExcludeRest(L.anyOf, R) : ExtendsCheck(L, R) !== ExtendsResult.False ? Never() : L, options);
}

// node_modules/@sinclair/typebox/build/esm/type/exclude/exclude-from-mapped-result.mjs
function FromProperties10(P, U) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Exclude(P[K2], U);
  return Acc;
}
function FromMappedResult7(R, T) {
  return FromProperties10(R.properties, T);
}
function ExcludeFromMappedResult(R, T) {
  const P = FromMappedResult7(R, T);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/extract/extract-from-template-literal.mjs
function ExtractFromTemplateLiteral(L, R) {
  return Extract(TemplateLiteralToUnion(L), R);
}

// node_modules/@sinclair/typebox/build/esm/type/extract/extract.mjs
function ExtractRest(L, R) {
  const extracted = L.filter((inner) => ExtendsCheck(inner, R) !== ExtendsResult.False);
  return extracted.length === 1 ? extracted[0] : Union(extracted);
}
function Extract(L, R, options = {}) {
  if (IsTemplateLiteral(L))
    return CloneType(ExtractFromTemplateLiteral(L, R), options);
  if (IsMappedResult(L))
    return CloneType(ExtractFromMappedResult(L, R), options);
  return CloneType(IsUnion(L) ? ExtractRest(L.anyOf, R) : ExtendsCheck(L, R) !== ExtendsResult.False ? L : Never(), options);
}

// node_modules/@sinclair/typebox/build/esm/type/extract/extract-from-mapped-result.mjs
function FromProperties11(P, T) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Extract(P[K2], T);
  return Acc;
}
function FromMappedResult8(R, T) {
  return FromProperties11(R.properties, T);
}
function ExtractFromMappedResult(R, T) {
  const P = FromMappedResult8(R, T);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/instance-type/instance-type.mjs
function InstanceType(schema, options = {}) {
  return CloneType(schema.returns, options);
}
// node_modules/@sinclair/typebox/build/esm/type/integer/integer.mjs
function Integer(options = {}) {
  return {
    ...options,
    [Kind]: "Integer",
    type: "integer"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/intrinsic/intrinsic-from-mapped-key.mjs
function MappedIntrinsicPropertyKey(K, M, options) {
  return {
    [K]: Intrinsic(Literal(K), M, options)
  };
}
function MappedIntrinsicPropertyKeys(K, M, options) {
  return K.reduce((Acc, L) => {
    return { ...Acc, ...MappedIntrinsicPropertyKey(L, M, options) };
  }, {});
}
function MappedIntrinsicProperties(T, M, options) {
  return MappedIntrinsicPropertyKeys(T["keys"], M, options);
}
function IntrinsicFromMappedKey(T, M, options) {
  const P = MappedIntrinsicProperties(T, M, options);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/intrinsic/intrinsic.mjs
function ApplyUncapitalize(value7) {
  const [first, rest] = [value7.slice(0, 1), value7.slice(1)];
  return [first.toLowerCase(), rest].join("");
}
function ApplyCapitalize(value7) {
  const [first, rest] = [value7.slice(0, 1), value7.slice(1)];
  return [first.toUpperCase(), rest].join("");
}
function ApplyUppercase(value7) {
  return value7.toUpperCase();
}
function ApplyLowercase(value7) {
  return value7.toLowerCase();
}
function FromTemplateLiteral6(schema, mode, options) {
  const expression = TemplateLiteralParseExact(schema.pattern);
  const finite3 = IsTemplateLiteralExpressionFinite(expression);
  if (!finite3)
    return { ...schema, pattern: FromLiteralValue(schema.pattern, mode) };
  const strings = [...TemplateLiteralExpressionGenerate(expression)];
  const literals = strings.map((value7) => Literal(value7));
  const mapped12 = FromRest6(literals, mode);
  const union15 = Union(mapped12);
  return TemplateLiteral([union15], options);
}
function FromLiteralValue(value7, mode) {
  return typeof value7 === "string" ? mode === "Uncapitalize" ? ApplyUncapitalize(value7) : mode === "Capitalize" ? ApplyCapitalize(value7) : mode === "Uppercase" ? ApplyUppercase(value7) : mode === "Lowercase" ? ApplyLowercase(value7) : value7 : value7.toString();
}
function FromRest6(T, M) {
  return T.map((L) => Intrinsic(L, M));
}
function Intrinsic(schema, mode, options = {}) {
  return IsMappedKey(schema) ? IntrinsicFromMappedKey(schema, mode, options) : IsTemplateLiteral(schema) ? FromTemplateLiteral6(schema, mode, schema) : IsUnion(schema) ? Union(FromRest6(schema.anyOf, mode), options) : IsLiteral(schema) ? Literal(FromLiteralValue(schema.const, mode), options) : schema;
}

// node_modules/@sinclair/typebox/build/esm/type/intrinsic/capitalize.mjs
function Capitalize(T, options = {}) {
  return Intrinsic(T, "Capitalize", options);
}
// node_modules/@sinclair/typebox/build/esm/type/intrinsic/lowercase.mjs
function Lowercase(T, options = {}) {
  return Intrinsic(T, "Lowercase", options);
}
// node_modules/@sinclair/typebox/build/esm/type/intrinsic/uncapitalize.mjs
function Uncapitalize(T, options = {}) {
  return Intrinsic(T, "Uncapitalize", options);
}
// node_modules/@sinclair/typebox/build/esm/type/intrinsic/uppercase.mjs
function Uppercase(T, options = {}) {
  return Intrinsic(T, "Uppercase", options);
}
// node_modules/@sinclair/typebox/build/esm/type/not/not.mjs
function Not2(schema, options) {
  return {
    ...options,
    [Kind]: "Not",
    not: CloneType(schema)
  };
}
// node_modules/@sinclair/typebox/build/esm/type/omit/omit-from-mapped-result.mjs
function FromProperties12(P, K, options) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Omit(P[K2], K, options);
  return Acc;
}
function FromMappedResult9(R, K, options) {
  return FromProperties12(R.properties, K, options);
}
function OmitFromMappedResult(R, K, options) {
  const P = FromMappedResult9(R, K, options);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/omit/omit.mjs
function FromIntersect16(T, K) {
  return T.map((T2) => OmitResolve(T2, K));
}
function FromUnion18(T, K) {
  return T.map((T2) => OmitResolve(T2, K));
}
function FromProperty2(T, K) {
  const { [K]: _, ...R } = T;
  return R;
}
function FromProperties13(T, K) {
  return K.reduce((T2, K2) => FromProperty2(T2, K2), T);
}
function OmitResolve(T, K) {
  return IsIntersect(T) ? Intersect(FromIntersect16(T.allOf, K)) : IsUnion(T) ? Union(FromUnion18(T.anyOf, K)) : IsObject3(T) ? Object2(FromProperties13(T.properties, K)) : Object2({});
}
function Omit(T, K, options = {}) {
  if (IsMappedKey(K))
    return OmitFromMappedKey(T, K, options);
  if (IsMappedResult(T))
    return OmitFromMappedResult(T, K, options);
  const I = IsSchema(K) ? IndexPropertyKeys(K) : K;
  const D = Discard(T, [TransformKind, "$id", "required"]);
  const R = CloneType(OmitResolve(T, I), options);
  return { ...D, ...R };
}

// node_modules/@sinclair/typebox/build/esm/type/omit/omit-from-mapped-key.mjs
function FromPropertyKey2(T, K, options) {
  return {
    [K]: Omit(T, [K], options)
  };
}
function FromPropertyKeys2(T, K, options) {
  return K.reduce((Acc, LK) => {
    return { ...Acc, ...FromPropertyKey2(T, LK, options) };
  }, {});
}
function FromMappedKey3(T, K, options) {
  return FromPropertyKeys2(T, K.keys, options);
}
function OmitFromMappedKey(T, K, options) {
  const P = FromMappedKey3(T, K, options);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/parameters/parameters.mjs
function Parameters(schema, options = {}) {
  return Tuple(CloneRest(schema.parameters), { ...options });
}
// node_modules/@sinclair/typebox/build/esm/type/partial/partial.mjs
function FromRest7(T) {
  return T.map((L) => PartialResolve(L));
}
function FromProperties14(T) {
  const Acc = {};
  for (const K of globalThis.Object.getOwnPropertyNames(T))
    Acc[K] = Optional(T[K]);
  return Acc;
}
function PartialResolve(T) {
  return IsIntersect(T) ? Intersect(FromRest7(T.allOf)) : IsUnion(T) ? Union(FromRest7(T.anyOf)) : IsObject3(T) ? Object2(FromProperties14(T.properties)) : Object2({});
}
function Partial(T, options = {}) {
  if (IsMappedResult(T))
    return PartialFromMappedResult(T, options);
  const D = Discard(T, [TransformKind, "$id", "required"]);
  const R = CloneType(PartialResolve(T), options);
  return { ...D, ...R };
}

// node_modules/@sinclair/typebox/build/esm/type/partial/partial-from-mapped-result.mjs
function FromProperties15(K, options) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(K))
    Acc[K2] = Partial(K[K2], options);
  return Acc;
}
function FromMappedResult10(R, options) {
  return FromProperties15(R.properties, options);
}
function PartialFromMappedResult(R, options) {
  const P = FromMappedResult10(R, options);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/pick/pick-from-mapped-result.mjs
function FromProperties16(P, K, options) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Pick(P[K2], K, options);
  return Acc;
}
function FromMappedResult11(R, K, options) {
  return FromProperties16(R.properties, K, options);
}
function PickFromMappedResult(R, K, options) {
  const P = FromMappedResult11(R, K, options);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/pick/pick.mjs
function FromIntersect17(T, K) {
  return T.map((T2) => PickResolve(T2, K));
}
function FromUnion19(T, K) {
  return T.map((T2) => PickResolve(T2, K));
}
function FromProperties17(T, K) {
  const Acc = {};
  for (const K2 of K)
    if (K2 in T)
      Acc[K2] = T[K2];
  return Acc;
}
function PickResolve(T, K) {
  return IsIntersect(T) ? Intersect(FromIntersect17(T.allOf, K)) : IsUnion(T) ? Union(FromUnion19(T.anyOf, K)) : IsObject3(T) ? Object2(FromProperties17(T.properties, K)) : Object2({});
}
function Pick(T, K, options = {}) {
  if (IsMappedKey(K))
    return PickFromMappedKey(T, K, options);
  if (IsMappedResult(T))
    return PickFromMappedResult(T, K, options);
  const I = IsSchema(K) ? IndexPropertyKeys(K) : K;
  const D = Discard(T, [TransformKind, "$id", "required"]);
  const R = CloneType(PickResolve(T, I), options);
  return { ...D, ...R };
}

// node_modules/@sinclair/typebox/build/esm/type/pick/pick-from-mapped-key.mjs
function FromPropertyKey3(T, K, options) {
  return {
    [K]: Pick(T, [K], options)
  };
}
function FromPropertyKeys3(T, K, options) {
  return K.reduce((Acc, LK) => {
    return { ...Acc, ...FromPropertyKey3(T, LK, options) };
  }, {});
}
function FromMappedKey4(T, K, options) {
  return FromPropertyKeys3(T, K.keys, options);
}
function PickFromMappedKey(T, K, options) {
  const P = FromMappedKey4(T, K, options);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/readonly-optional/readonly-optional.mjs
function ReadonlyOptional(schema) {
  return Readonly(Optional(schema));
}
// node_modules/@sinclair/typebox/build/esm/type/record/record.mjs
function RecordCreateFromPattern(pattern3, T, options) {
  return {
    ...options,
    [Kind]: "Record",
    type: "object",
    patternProperties: { [pattern3]: CloneType(T) }
  };
}
function RecordCreateFromKeys(K, T, options) {
  const Acc = {};
  for (const K2 of K)
    Acc[K2] = CloneType(T);
  return Object2(Acc, { ...options, [Hint]: "Record" });
}
function FromTemplateLiteralKey(K, T, options) {
  return IsTemplateLiteralFinite(K) ? RecordCreateFromKeys(IndexPropertyKeys(K), T, options) : RecordCreateFromPattern(K.pattern, T, options);
}
function FromUnionKey(K, T, options) {
  return RecordCreateFromKeys(IndexPropertyKeys(Union(K)), T, options);
}
function FromLiteralKey(K, T, options) {
  return RecordCreateFromKeys([K.toString()], T, options);
}
function FromRegExpKey(K, T, options) {
  return RecordCreateFromPattern(K.source, T, options);
}
function FromStringKey(K, T, options) {
  const pattern3 = IsUndefined2(K.pattern) ? PatternStringExact : K.pattern;
  return RecordCreateFromPattern(pattern3, T, options);
}
function FromIntegerKey(_, T, options) {
  return RecordCreateFromPattern(PatternNumberExact, T, options);
}
function FromNumberKey(_, T, options) {
  return RecordCreateFromPattern(PatternNumberExact, T, options);
}
function Record(K, T, options = {}) {
  return IsUnion(K) ? FromUnionKey(K.anyOf, T, options) : IsTemplateLiteral(K) ? FromTemplateLiteralKey(K, T, options) : IsLiteral(K) ? FromLiteralKey(K.const, T, options) : IsInteger2(K) ? FromIntegerKey(K, T, options) : IsNumber3(K) ? FromNumberKey(K, T, options) : IsRegExp2(K) ? FromRegExpKey(K, T, options) : IsString3(K) ? FromStringKey(K, T, options) : Never(options);
}
// node_modules/@sinclair/typebox/build/esm/type/recursive/recursive.mjs
function Recursive(callback, options = {}) {
  if (IsUndefined2(options.$id))
    options.$id = `T${Ordinal++}`;
  const thisType = callback({ [Kind]: "This", $ref: `${options.$id}` });
  thisType.$id = options.$id;
  return CloneType({ ...options, [Hint]: "Recursive", ...thisType });
}
var Ordinal = 0;
// node_modules/@sinclair/typebox/build/esm/type/ref/ref.mjs
function Ref(unresolved, options = {}) {
  if (IsString2(unresolved))
    return { ...options, [Kind]: "Ref", $ref: unresolved };
  if (IsUndefined2(unresolved.$id))
    throw new Error("Reference target type must specify an $id");
  return {
    ...options,
    [Kind]: "Ref",
    $ref: unresolved.$id
  };
}
// node_modules/@sinclair/typebox/build/esm/type/regexp/regexp.mjs
function RegExp2(unresolved, options = {}) {
  const expr = IsString2(unresolved) ? new globalThis.RegExp(unresolved) : unresolved;
  return { ...options, [Kind]: "RegExp", type: "RegExp", source: expr.source, flags: expr.flags };
}
// node_modules/@sinclair/typebox/build/esm/type/required/required.mjs
function FromRest8(T) {
  return T.map((L) => RequiredResolve(L));
}
function FromProperties18(T) {
  const Acc = {};
  for (const K of globalThis.Object.getOwnPropertyNames(T))
    Acc[K] = Discard(T[K], [OptionalKind]);
  return Acc;
}
function RequiredResolve(T) {
  return IsIntersect(T) ? Intersect(FromRest8(T.allOf)) : IsUnion(T) ? Union(FromRest8(T.anyOf)) : IsObject3(T) ? Object2(FromProperties18(T.properties)) : Object2({});
}
function Required(T, options = {}) {
  if (IsMappedResult(T)) {
    return RequiredFromMappedResult(T, options);
  } else {
    const D = Discard(T, [TransformKind, "$id", "required"]);
    const R = CloneType(RequiredResolve(T), options);
    return { ...D, ...R };
  }
}

// node_modules/@sinclair/typebox/build/esm/type/required/required-from-mapped-result.mjs
function FromProperties19(P, options) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Required(P[K2], options);
  return Acc;
}
function FromMappedResult12(R, options) {
  return FromProperties19(R.properties, options);
}
function RequiredFromMappedResult(R, options) {
  const P = FromMappedResult12(R, options);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/rest/rest.mjs
function RestResolve(T) {
  return IsIntersect(T) ? CloneRest(T.allOf) : IsUnion(T) ? CloneRest(T.anyOf) : IsTuple(T) ? CloneRest(T.items ?? []) : [];
}
function Rest(T) {
  return CloneRest(RestResolve(T));
}
// node_modules/@sinclair/typebox/build/esm/type/return-type/return-type.mjs
function ReturnType(schema, options = {}) {
  return CloneType(schema.returns, options);
}
// node_modules/@sinclair/typebox/build/esm/type/strict/strict.mjs
function Strict(schema2) {
  return JSON.parse(JSON.stringify(schema2));
}
// node_modules/@sinclair/typebox/build/esm/type/transform/transform.mjs
function Transform(schema2) {
  return new TransformDecodeBuilder(schema2);
}

class TransformDecodeBuilder {
  constructor(schema2) {
    this.schema = schema2;
  }
  Decode(decode2) {
    return new TransformEncodeBuilder(this.schema, decode2);
  }
}

class TransformEncodeBuilder {
  constructor(schema2, decode2) {
    this.schema = schema2;
    this.decode = decode2;
  }
  EncodeTransform(encode2, schema2) {
    const Encode2 = (value11) => schema2[TransformKind].Encode(encode2(value11));
    const Decode2 = (value11) => this.decode(schema2[TransformKind].Decode(value11));
    const Codec = { Encode: Encode2, Decode: Decode2 };
    return { ...schema2, [TransformKind]: Codec };
  }
  EncodeSchema(encode2, schema2) {
    const Codec = { Decode: this.decode, Encode: encode2 };
    return { ...schema2, [TransformKind]: Codec };
  }
  Encode(encode2) {
    const schema2 = CloneType(this.schema);
    return IsTransform(schema2) ? this.EncodeTransform(encode2, schema2) : this.EncodeSchema(encode2, schema2);
  }
}
// node_modules/@sinclair/typebox/build/esm/type/void/void.mjs
function Void(options = {}) {
  return {
    ...options,
    [Kind]: "Void",
    type: "void"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/type/type.mjs
var exports_type3 = {};
__export(exports_type3, {
  Void: () => Void,
  Uppercase: () => Uppercase,
  Unsafe: () => Unsafe,
  Unknown: () => Unknown,
  Union: () => Union,
  Undefined: () => Undefined,
  Uncapitalize: () => Uncapitalize,
  Uint8Array: () => Uint8Array2,
  Tuple: () => Tuple,
  Transform: () => Transform,
  TemplateLiteral: () => TemplateLiteral,
  Symbol: () => Symbol2,
  String: () => String2,
  Strict: () => Strict,
  ReturnType: () => ReturnType,
  Rest: () => Rest,
  Required: () => Required,
  RegExp: () => RegExp2,
  Ref: () => Ref,
  Recursive: () => Recursive,
  Record: () => Record,
  ReadonlyOptional: () => ReadonlyOptional,
  Readonly: () => Readonly,
  Promise: () => Promise2,
  Pick: () => Pick,
  Partial: () => Partial,
  Parameters: () => Parameters,
  Optional: () => Optional,
  Omit: () => Omit,
  Object: () => Object2,
  Number: () => Number2,
  Null: () => Null,
  Not: () => Not2,
  Never: () => Never,
  Mapped: () => Mapped,
  Lowercase: () => Lowercase,
  Literal: () => Literal,
  KeyOf: () => KeyOf,
  Iterator: () => Iterator,
  Intersect: () => Intersect,
  Integer: () => Integer,
  InstanceType: () => InstanceType,
  Index: () => Index,
  Function: () => Function2,
  Extract: () => Extract,
  Extends: () => Extends,
  Exclude: () => Exclude,
  Enum: () => Enum,
  Deref: () => Deref2,
  Date: () => Date2,
  ConstructorParameters: () => ConstructorParameters,
  Constructor: () => Constructor,
  Const: () => Const,
  Composite: () => Composite,
  Capitalize: () => Capitalize,
  Boolean: () => Boolean2,
  BigInt: () => BigInt2,
  Awaited: () => Awaited,
  AsyncIterator: () => AsyncIterator,
  Array: () => Array2,
  Any: () => Any
});

// node_modules/@sinclair/typebox/build/esm/type/type/index.mjs
var Type = exports_type3;
// node_modules/@sinclair/typebox/build/esm/compiler/compiler.mjs
class TypeCheck {
  constructor(schema3, references, checkFunc, code) {
    this.schema = schema3;
    this.references = references;
    this.checkFunc = checkFunc;
    this.code = code;
    this.hasTransform = HasTransform(schema3, references);
  }
  Code() {
    return this.code;
  }
  Errors(value11) {
    return Errors(this.schema, this.references, value11);
  }
  Check(value11) {
    return this.checkFunc(value11);
  }
  Decode(value11) {
    if (!this.checkFunc(value11))
      throw new TransformDecodeCheckError(this.schema, value11, this.Errors(value11).First());
    return this.hasTransform ? TransformDecode(this.schema, this.references, value11) : value11;
  }
  Encode(value11) {
    const encoded = this.hasTransform ? TransformEncode(this.schema, this.references, value11) : value11;
    if (!this.checkFunc(encoded))
      throw new TransformEncodeCheckError(this.schema, value11, this.Errors(value11).First());
    return encoded;
  }
}
var Character;
(function(Character2) {
  function DollarSign(code) {
    return code === 36;
  }
  Character2.DollarSign = DollarSign;
  function IsUnderscore(code) {
    return code === 95;
  }
  Character2.IsUnderscore = IsUnderscore;
  function IsAlpha(code) {
    return code >= 65 && code <= 90 || code >= 97 && code <= 122;
  }
  Character2.IsAlpha = IsAlpha;
  function IsNumeric(code) {
    return code >= 48 && code <= 57;
  }
  Character2.IsNumeric = IsNumeric;
})(Character || (Character = {}));
var MemberExpression;
(function(MemberExpression2) {
  function IsFirstCharacterNumeric(value11) {
    if (value11.length === 0)
      return false;
    return Character.IsNumeric(value11.charCodeAt(0));
  }
  function IsAccessor(value11) {
    if (IsFirstCharacterNumeric(value11))
      return false;
    for (let i = 0;i < value11.length; i++) {
      const code = value11.charCodeAt(i);
      const check11 = Character.IsAlpha(code) || Character.IsNumeric(code) || Character.DollarSign(code) || Character.IsUnderscore(code);
      if (!check11)
        return false;
    }
    return true;
  }
  function EscapeHyphen(key) {
    return key.replace(/'/g, "\\'");
  }
  function Encode2(object13, key) {
    return IsAccessor(key) ? `${object13}.${key}` : `${object13}['${EscapeHyphen(key)}']`;
  }
  MemberExpression2.Encode = Encode2;
})(MemberExpression || (MemberExpression = {}));
var Identifier;
(function(Identifier2) {
  function Encode2($id) {
    const buffer = [];
    for (let i = 0;i < $id.length; i++) {
      const code = $id.charCodeAt(i);
      if (Character.IsNumeric(code) || Character.IsAlpha(code)) {
        buffer.push($id.charAt(i));
      } else {
        buffer.push(`_${code}_`);
      }
    }
    return buffer.join("").replace(/__/g, "_");
  }
  Identifier2.Encode = Encode2;
})(Identifier || (Identifier = {}));
var LiteralString;
(function(LiteralString2) {
  function Escape3(content) {
    return content.replace(/'/g, "\\'");
  }
  LiteralString2.Escape = Escape3;
})(LiteralString || (LiteralString = {}));

class TypeCompilerUnknownTypeError extends TypeBoxError {
  constructor(schema3) {
    super("Unknown type");
    this.schema = schema3;
  }
}

class TypeCompilerTypeGuardError extends TypeBoxError {
  constructor(schema3) {
    super("Preflight validation check failed to guard for the given schema");
    this.schema = schema3;
  }
}
var Policy;
(function(Policy2) {
  function IsExactOptionalProperty(value11, key, expression) {
    return TypeSystemPolicy.ExactOptionalPropertyTypes ? `('${key}' in ${value11} ? ${expression} : true)` : `(${MemberExpression.Encode(value11, key)} !== undefined ? ${expression} : true)`;
  }
  Policy2.IsExactOptionalProperty = IsExactOptionalProperty;
  function IsObjectLike(value11) {
    return !TypeSystemPolicy.AllowArrayObject ? `(typeof ${value11} === 'object' && ${value11} !== null && !Array.isArray(${value11}))` : `(typeof ${value11} === 'object' && ${value11} !== null)`;
  }
  Policy2.IsObjectLike = IsObjectLike;
  function IsRecordLike(value11) {
    return !TypeSystemPolicy.AllowArrayObject ? `(typeof ${value11} === 'object' && ${value11} !== null && !Array.isArray(${value11}) && !(${value11} instanceof Date) && !(${value11} instanceof Uint8Array))` : `(typeof ${value11} === 'object' && ${value11} !== null && !(${value11} instanceof Date) && !(${value11} instanceof Uint8Array))`;
  }
  Policy2.IsRecordLike = IsRecordLike;
  function IsNumberLike(value11) {
    return TypeSystemPolicy.AllowNaN ? `typeof ${value11} === 'number'` : `Number.isFinite(${value11})`;
  }
  Policy2.IsNumberLike = IsNumberLike;
  function IsVoidLike(value11) {
    return TypeSystemPolicy.AllowNullVoid ? `(${value11} === undefined || ${value11} === null)` : `${value11} === undefined`;
  }
  Policy2.IsVoidLike = IsVoidLike;
})(Policy || (Policy = {}));
var TypeCompiler;
(function(TypeCompiler2) {
  function IsAnyOrUnknown2(schema3) {
    return schema3[Kind] === "Any" || schema3[Kind] === "Unknown";
  }
  function* FromAny5(schema3, references, value11) {
    yield "true";
  }
  function* FromArray16(schema3, references, value11) {
    yield `Array.isArray(${value11})`;
    const [parameter, accumulator] = [CreateParameter("value", "any"), CreateParameter("acc", "number")];
    if (IsNumber(schema3.maxItems))
      yield `${value11}.length <= ${schema3.maxItems}`;
    if (IsNumber(schema3.minItems))
      yield `${value11}.length >= ${schema3.minItems}`;
    const elementExpression = CreateExpression(schema3.items, references, "value");
    yield `${value11}.every((${parameter}) => ${elementExpression})`;
    if (IsSchema2(schema3.contains) || IsNumber(schema3.minContains) || IsNumber(schema3.maxContains)) {
      const containsSchema = IsSchema2(schema3.contains) ? schema3.contains : Never();
      const checkExpression = CreateExpression(containsSchema, references, "value");
      const checkMinContains = IsNumber(schema3.minContains) ? [`(count >= ${schema3.minContains})`] : [];
      const checkMaxContains = IsNumber(schema3.maxContains) ? [`(count <= ${schema3.maxContains})`] : [];
      const checkCount = `const count = value.reduce((${accumulator}, ${parameter}) => ${checkExpression} ? acc + 1 : acc, 0)`;
      const check11 = [`(count > 0)`, ...checkMinContains, ...checkMaxContains].join(" && ");
      yield `((${parameter}) => { ${checkCount}; return ${check11}})(${value11})`;
    }
    if (schema3.uniqueItems === true) {
      const check11 = `const hashed = hash(element); if(set.has(hashed)) { return false } else { set.add(hashed) } } return true`;
      const block = `const set = new Set(); for(const element of value) { ${check11} }`;
      yield `((${parameter}) => { ${block} )(${value11})`;
    }
  }
  function* FromAsyncIterator7(schema3, references, value11) {
    yield `(typeof value === 'object' && Symbol.asyncIterator in ${value11})`;
  }
  function* FromBigInt6(schema3, references, value11) {
    yield `(typeof ${value11} === 'bigint')`;
    if (IsBigInt(schema3.exclusiveMaximum))
      yield `${value11} < BigInt(${schema3.exclusiveMaximum})`;
    if (IsBigInt(schema3.exclusiveMinimum))
      yield `${value11} > BigInt(${schema3.exclusiveMinimum})`;
    if (IsBigInt(schema3.maximum))
      yield `${value11} <= BigInt(${schema3.maximum})`;
    if (IsBigInt(schema3.minimum))
      yield `${value11} >= BigInt(${schema3.minimum})`;
    if (IsBigInt(schema3.multipleOf))
      yield `(${value11} % BigInt(${schema3.multipleOf})) === 0`;
  }
  function* FromBoolean6(schema3, references, value11) {
    yield `(typeof ${value11} === 'boolean')`;
  }
  function* FromConstructor8(schema3, references, value11) {
    yield* Visit17(schema3.returns, references, `${value11}.prototype`);
  }
  function* FromDate6(schema3, references, value11) {
    yield `(${value11} instanceof Date) && Number.isFinite(${value11}.getTime())`;
    if (IsNumber(schema3.exclusiveMaximumTimestamp))
      yield `${value11}.getTime() < ${schema3.exclusiveMaximumTimestamp}`;
    if (IsNumber(schema3.exclusiveMinimumTimestamp))
      yield `${value11}.getTime() > ${schema3.exclusiveMinimumTimestamp}`;
    if (IsNumber(schema3.maximumTimestamp))
      yield `${value11}.getTime() <= ${schema3.maximumTimestamp}`;
    if (IsNumber(schema3.minimumTimestamp))
      yield `${value11}.getTime() >= ${schema3.minimumTimestamp}`;
    if (IsNumber(schema3.multipleOfTimestamp))
      yield `(${value11}.getTime() % ${schema3.multipleOfTimestamp}) === 0`;
  }
  function* FromFunction7(schema3, references, value11) {
    yield `(typeof ${value11} === 'function')`;
  }
  function* FromInteger6(schema3, references, value11) {
    yield `Number.isInteger(${value11})`;
    if (IsNumber(schema3.exclusiveMaximum))
      yield `${value11} < ${schema3.exclusiveMaximum}`;
    if (IsNumber(schema3.exclusiveMinimum))
      yield `${value11} > ${schema3.exclusiveMinimum}`;
    if (IsNumber(schema3.maximum))
      yield `${value11} <= ${schema3.maximum}`;
    if (IsNumber(schema3.minimum))
      yield `${value11} >= ${schema3.minimum}`;
    if (IsNumber(schema3.multipleOf))
      yield `(${value11} % ${schema3.multipleOf}) === 0`;
  }
  function* FromIntersect18(schema3, references, value11) {
    const check1 = schema3.allOf.map((schema4) => CreateExpression(schema4, references, value11)).join(" && ");
    if (schema3.unevaluatedProperties === false) {
      const keyCheck = CreateVariable(`${new RegExp(KeyOfPattern(schema3))};`);
      const check22 = `Object.getOwnPropertyNames(${value11}).every(key => ${keyCheck}.test(key))`;
      yield `(${check1} && ${check22})`;
    } else if (IsSchema2(schema3.unevaluatedProperties)) {
      const keyCheck = CreateVariable(`${new RegExp(KeyOfPattern(schema3))};`);
      const check22 = `Object.getOwnPropertyNames(${value11}).every(key => ${keyCheck}.test(key) || ${CreateExpression(schema3.unevaluatedProperties, references, `${value11}[key]`)})`;
      yield `(${check1} && ${check22})`;
    } else {
      yield `(${check1})`;
    }
  }
  function* FromIterator7(schema3, references, value11) {
    yield `(typeof value === 'object' && Symbol.iterator in ${value11})`;
  }
  function* FromLiteral7(schema3, references, value11) {
    if (typeof schema3.const === "number" || typeof schema3.const === "boolean") {
      yield `(${value11} === ${schema3.const})`;
    } else {
      yield `(${value11} === '${LiteralString.Escape(schema3.const)}')`;
    }
  }
  function* FromNever6(schema3, references, value11) {
    yield `false`;
  }
  function* FromNot8(schema3, references, value11) {
    const expression = CreateExpression(schema3.not, references, value11);
    yield `(!${expression})`;
  }
  function* FromNull6(schema3, references, value11) {
    yield `(${value11} === null)`;
  }
  function* FromNumber6(schema3, references, value11) {
    yield Policy.IsNumberLike(value11);
    if (IsNumber(schema3.exclusiveMaximum))
      yield `${value11} < ${schema3.exclusiveMaximum}`;
    if (IsNumber(schema3.exclusiveMinimum))
      yield `${value11} > ${schema3.exclusiveMinimum}`;
    if (IsNumber(schema3.maximum))
      yield `${value11} <= ${schema3.maximum}`;
    if (IsNumber(schema3.minimum))
      yield `${value11} >= ${schema3.minimum}`;
    if (IsNumber(schema3.multipleOf))
      yield `(${value11} % ${schema3.multipleOf}) === 0`;
  }
  function* FromObject13(schema3, references, value11) {
    yield Policy.IsObjectLike(value11);
    if (IsNumber(schema3.minProperties))
      yield `Object.getOwnPropertyNames(${value11}).length >= ${schema3.minProperties}`;
    if (IsNumber(schema3.maxProperties))
      yield `Object.getOwnPropertyNames(${value11}).length <= ${schema3.maxProperties}`;
    const knownKeys = Object.getOwnPropertyNames(schema3.properties);
    for (const knownKey of knownKeys) {
      const memberExpression = MemberExpression.Encode(value11, knownKey);
      const property = schema3.properties[knownKey];
      if (schema3.required && schema3.required.includes(knownKey)) {
        yield* Visit17(property, references, memberExpression);
        if (ExtendsUndefinedCheck(property) || IsAnyOrUnknown2(property))
          yield `('${knownKey}' in ${value11})`;
      } else {
        const expression = CreateExpression(property, references, memberExpression);
        yield Policy.IsExactOptionalProperty(value11, knownKey, expression);
      }
    }
    if (schema3.additionalProperties === false) {
      if (schema3.required && schema3.required.length === knownKeys.length) {
        yield `Object.getOwnPropertyNames(${value11}).length === ${knownKeys.length}`;
      } else {
        const keys = `[${knownKeys.map((key) => `'${key}'`).join(", ")}]`;
        yield `Object.getOwnPropertyNames(${value11}).every(key => ${keys}.includes(key))`;
      }
    }
    if (typeof schema3.additionalProperties === "object") {
      const expression = CreateExpression(schema3.additionalProperties, references, `${value11}[key]`);
      const keys = `[${knownKeys.map((key) => `'${key}'`).join(", ")}]`;
      yield `(Object.getOwnPropertyNames(${value11}).every(key => ${keys}.includes(key) || ${expression}))`;
    }
  }
  function* FromPromise8(schema3, references, value11) {
    yield `(typeof value === 'object' && typeof ${value11}.then === 'function')`;
  }
  function* FromRecord12(schema3, references, value11) {
    yield Policy.IsRecordLike(value11);
    if (IsNumber(schema3.minProperties))
      yield `Object.getOwnPropertyNames(${value11}).length >= ${schema3.minProperties}`;
    if (IsNumber(schema3.maxProperties))
      yield `Object.getOwnPropertyNames(${value11}).length <= ${schema3.maxProperties}`;
    const [patternKey, patternSchema] = Object.entries(schema3.patternProperties)[0];
    const variable = CreateVariable(`${new RegExp(patternKey)}`);
    const check1 = CreateExpression(patternSchema, references, "value");
    const check22 = IsSchema2(schema3.additionalProperties) ? CreateExpression(schema3.additionalProperties, references, value11) : schema3.additionalProperties === false ? "false" : "true";
    const expression = `(${variable}.test(key) ? ${check1} : ${check22})`;
    yield `(Object.entries(${value11}).every(([key, value]) => ${expression}))`;
  }
  function* FromRef12(schema3, references, value11) {
    const target = Deref(schema3, references);
    if (state.functions.has(schema3.$ref))
      return yield `${CreateFunctionName(schema3.$ref)}(${value11})`;
    yield* Visit17(target, references, value11);
  }
  function* FromRegExp5(schema3, references, value11) {
    const variable = CreateVariable(`${new RegExp(schema3.source, schema3.flags)};`);
    yield `(typeof ${value11} === 'string')`;
    if (IsNumber(schema3.maxLength))
      yield `${value11}.length <= ${schema3.maxLength}`;
    if (IsNumber(schema3.minLength))
      yield `${value11}.length >= ${schema3.minLength}`;
    yield `${variable}.test(${value11})`;
  }
  function* FromString6(schema3, references, value11) {
    yield `(typeof ${value11} === 'string')`;
    if (IsNumber(schema3.maxLength))
      yield `${value11}.length <= ${schema3.maxLength}`;
    if (IsNumber(schema3.minLength))
      yield `${value11}.length >= ${schema3.minLength}`;
    if (schema3.pattern !== undefined) {
      const variable = CreateVariable(`${new RegExp(schema3.pattern)};`);
      yield `${variable}.test(${value11})`;
    }
    if (schema3.format !== undefined) {
      yield `format('${schema3.format}', ${value11})`;
    }
  }
  function* FromSymbol6(schema3, references, value11) {
    yield `(typeof ${value11} === 'symbol')`;
  }
  function* FromTemplateLiteral7(schema3, references, value11) {
    yield `(typeof ${value11} === 'string')`;
    const variable = CreateVariable(`${new RegExp(schema3.pattern)};`);
    yield `${variable}.test(${value11})`;
  }
  function* FromThis11(schema3, references, value11) {
    yield `${CreateFunctionName(schema3.$ref)}(${value11})`;
  }
  function* FromTuple15(schema3, references, value11) {
    yield `Array.isArray(${value11})`;
    if (schema3.items === undefined)
      return yield `${value11}.length === 0`;
    yield `(${value11}.length === ${schema3.maxItems})`;
    for (let i = 0;i < schema3.items.length; i++) {
      const expression = CreateExpression(schema3.items[i], references, `${value11}[${i}]`);
      yield `${expression}`;
    }
  }
  function* FromUndefined6(schema3, references, value11) {
    yield `${value11} === undefined`;
  }
  function* FromUnion20(schema3, references, value11) {
    const expressions = schema3.anyOf.map((schema4) => CreateExpression(schema4, references, value11));
    yield `(${expressions.join(" || ")})`;
  }
  function* FromUint8Array5(schema3, references, value11) {
    yield `${value11} instanceof Uint8Array`;
    if (IsNumber(schema3.maxByteLength))
      yield `(${value11}.length <= ${schema3.maxByteLength})`;
    if (IsNumber(schema3.minByteLength))
      yield `(${value11}.length >= ${schema3.minByteLength})`;
  }
  function* FromUnknown5(schema3, references, value11) {
    yield "true";
  }
  function* FromVoid5(schema3, references, value11) {
    yield Policy.IsVoidLike(value11);
  }
  function* FromKind4(schema3, references, value11) {
    const instance = state.instances.size;
    state.instances.set(instance, schema3);
    yield `kind('${schema3[Kind]}', ${instance}, ${value11})`;
  }
  function* Visit17(schema3, references, value11, useHoisting = true) {
    const references_ = IsString(schema3.$id) ? [...references, schema3] : references;
    const schema_ = schema3;
    if (useHoisting && IsString(schema3.$id)) {
      const functionName = CreateFunctionName(schema3.$id);
      if (state.functions.has(functionName)) {
        return yield `${functionName}(${value11})`;
      } else {
        const functionCode = CreateFunction(functionName, schema3, references, "value", false);
        state.functions.set(functionName, functionCode);
        return yield `${functionName}(${value11})`;
      }
    }
    switch (schema_[Kind]) {
      case "Any":
        return yield* FromAny5(schema_, references_, value11);
      case "Array":
        return yield* FromArray16(schema_, references_, value11);
      case "AsyncIterator":
        return yield* FromAsyncIterator7(schema_, references_, value11);
      case "BigInt":
        return yield* FromBigInt6(schema_, references_, value11);
      case "Boolean":
        return yield* FromBoolean6(schema_, references_, value11);
      case "Constructor":
        return yield* FromConstructor8(schema_, references_, value11);
      case "Date":
        return yield* FromDate6(schema_, references_, value11);
      case "Function":
        return yield* FromFunction7(schema_, references_, value11);
      case "Integer":
        return yield* FromInteger6(schema_, references_, value11);
      case "Intersect":
        return yield* FromIntersect18(schema_, references_, value11);
      case "Iterator":
        return yield* FromIterator7(schema_, references_, value11);
      case "Literal":
        return yield* FromLiteral7(schema_, references_, value11);
      case "Never":
        return yield* FromNever6(schema_, references_, value11);
      case "Not":
        return yield* FromNot8(schema_, references_, value11);
      case "Null":
        return yield* FromNull6(schema_, references_, value11);
      case "Number":
        return yield* FromNumber6(schema_, references_, value11);
      case "Object":
        return yield* FromObject13(schema_, references_, value11);
      case "Promise":
        return yield* FromPromise8(schema_, references_, value11);
      case "Record":
        return yield* FromRecord12(schema_, references_, value11);
      case "Ref":
        return yield* FromRef12(schema_, references_, value11);
      case "RegExp":
        return yield* FromRegExp5(schema_, references_, value11);
      case "String":
        return yield* FromString6(schema_, references_, value11);
      case "Symbol":
        return yield* FromSymbol6(schema_, references_, value11);
      case "TemplateLiteral":
        return yield* FromTemplateLiteral7(schema_, references_, value11);
      case "This":
        return yield* FromThis11(schema_, references_, value11);
      case "Tuple":
        return yield* FromTuple15(schema_, references_, value11);
      case "Undefined":
        return yield* FromUndefined6(schema_, references_, value11);
      case "Union":
        return yield* FromUnion20(schema_, references_, value11);
      case "Uint8Array":
        return yield* FromUint8Array5(schema_, references_, value11);
      case "Unknown":
        return yield* FromUnknown5(schema_, references_, value11);
      case "Void":
        return yield* FromVoid5(schema_, references_, value11);
      default:
        if (!exports_type.Has(schema_[Kind]))
          throw new TypeCompilerUnknownTypeError(schema3);
        return yield* FromKind4(schema_, references_, value11);
    }
  }
  const state = {
    language: "javascript",
    functions: new Map,
    variables: new Map,
    instances: new Map
  };
  function CreateExpression(schema3, references, value11, useHoisting = true) {
    return `(${[...Visit17(schema3, references, value11, useHoisting)].join(" && ")})`;
  }
  function CreateFunctionName($id) {
    return `check_${Identifier.Encode($id)}`;
  }
  function CreateVariable(expression) {
    const variableName = `local_${state.variables.size}`;
    state.variables.set(variableName, `const ${variableName} = ${expression}`);
    return variableName;
  }
  function CreateFunction(name, schema3, references, value11, useHoisting = true) {
    const [newline, pad] = ["\n", (length) => "".padStart(length, " ")];
    const parameter = CreateParameter("value", "any");
    const returns = CreateReturns("boolean");
    const expression = [...Visit17(schema3, references, value11, useHoisting)].map((expression2) => `${pad(4)}${expression2}`).join(` &&${newline}`);
    return `function ${name}(${parameter})${returns} {${newline}${pad(2)}return (${newline}${expression}${newline}${pad(2)})\n}`;
  }
  function CreateParameter(name, type47) {
    const annotation = state.language === "typescript" ? `: ${type47}` : "";
    return `${name}${annotation}`;
  }
  function CreateReturns(type47) {
    return state.language === "typescript" ? `: ${type47}` : "";
  }
  function Build(schema3, references, options) {
    const functionCode = CreateFunction("check", schema3, references, "value");
    const parameter = CreateParameter("value", "any");
    const returns = CreateReturns("boolean");
    const functions = [...state.functions.values()];
    const variables = [...state.variables.values()];
    const checkFunction = IsString(schema3.$id) ? `return function check(${parameter})${returns} {\n  return ${CreateFunctionName(schema3.$id)}(value)\n}` : `return ${functionCode}`;
    return [...variables, ...functions, checkFunction].join("\n");
  }
  function Code(...args) {
    const defaults = { language: "javascript" };
    const [schema3, references, options] = args.length === 2 && IsArray(args[1]) ? [args[0], args[1], defaults] : args.length === 2 && !IsArray(args[1]) ? [args[0], [], args[1]] : args.length === 3 ? [args[0], args[1], args[2]] : args.length === 1 ? [args[0], [], defaults] : [null, [], defaults];
    state.language = options.language;
    state.variables.clear();
    state.functions.clear();
    state.instances.clear();
    if (!IsSchema2(schema3))
      throw new TypeCompilerTypeGuardError(schema3);
    for (const schema4 of references)
      if (!IsSchema2(schema4))
        throw new TypeCompilerTypeGuardError(schema4);
    return Build(schema3, references, options);
  }
  TypeCompiler2.Code = Code;
  function Compile(schema3, references = []) {
    const generatedCode = Code(schema3, references, { language: "javascript" });
    const compiledFunction = globalThis.Function("kind", "format", "hash", generatedCode);
    const instances = new Map(state.instances);
    function typeRegistryFunction(kind28, instance, value11) {
      if (!exports_type.Has(kind28) || !instances.has(instance))
        return false;
      const checkFunc = exports_type.Get(kind28);
      const schema4 = instances.get(instance);
      return checkFunc(schema4, value11);
    }
    function formatRegistryFunction(format, value11) {
      if (!exports_format.Has(format))
        return false;
      const checkFunc = exports_format.Get(format);
      return checkFunc(value11);
    }
    function hashFunction(value11) {
      return Hash(value11);
    }
    const checkFunction = compiledFunction(typeRegistryFunction, formatRegistryFunction, hashFunction);
    return new TypeCheck(schema3, references, checkFunction, generatedCode);
  }
  TypeCompiler2.Compile = Compile;
})(TypeCompiler || (TypeCompiler = {}));
// node_modules/elysia/dist/bun/index.js
function k2($) {
  return $ % 4 === 0 && ($ % 100 !== 0 || $ % 400 === 0);
}
function p1($) {
  const W = v2.exec($);
  if (!W)
    return false;
  const X = +W[1], Z = +W[2], J = +W[3];
  return Z >= 1 && Z <= 12 && J >= 1 && J <= (Z === 2 && k2(X) ? 29 : u2[Z]);
}
function F1($) {
  return function W(X) {
    const Z = h2.exec(X);
    if (!Z)
      return false;
    const J = +Z[1], j = +Z[2], Q = +Z[3], Y = Z[4], K = Z[5] === "-" ? -1 : 1, B = +(Z[6] || 0), U = +(Z[7] || 0);
    if (B > 23 || U > 59 || $ && !Y)
      return false;
    if (J <= 23 && j <= 59 && Q < 60)
      return true;
    const w = j - U * K, F = J - B * K - (w < 0 ? 1 : 0);
    return (F === 23 || F === -1) && (w === 59 || w === -1) && Q < 61;
  };
}
function m1($) {
  const W = F1($);
  return function X(Z) {
    const J = Z.split(m2);
    return J.length === 2 && p1(J[0]) && W(J[1]);
  };
}
function p2($) {
  return d2.test($) && c2.test($);
}
function l2($) {
  return d1.lastIndex = 0, d1.test($);
}
function t2($) {
  return Number.isInteger($) && $ <= n2 && $ >= i2;
}
function s2($) {
  return Number.isInteger($);
}
function c1() {
  return true;
}
function a2($) {
  if (r2.test($))
    return false;
  try {
    return new RegExp($), true;
  } catch (W) {
    return false;
  }
}
function J3($, W) {
  if (typeof $ !== "string")
    throw new TypeError("argument str must be a string");
  var X = {}, Z = W || {}, J = Z.decode || Q3, j = 0;
  while (j < $.length) {
    var Q = $.indexOf("=", j);
    if (Q === -1)
      break;
    var Y = $.indexOf(";", j);
    if (Y === -1)
      Y = $.length;
    else if (Y < Q) {
      j = $.lastIndexOf(";", Q - 1) + 1;
      continue;
    }
    var K = $.slice(j, Q).trim();
    if (X[K] === undefined) {
      var B = $.slice(Q + 1, Y).trim();
      if (B.charCodeAt(0) === 34)
        B = B.slice(1, -1);
      X[K] = B3(B, J);
    }
    j = Y + 1;
  }
  return X;
}
function j3($, W, X) {
  var Z = X || {}, J = Z.encode || G3;
  if (typeof J !== "function")
    throw new TypeError("option encode is invalid");
  if (!o0.test($))
    throw new TypeError("argument name is invalid");
  var j = J(W);
  if (j && !o0.test(j))
    throw new TypeError("argument val is invalid");
  var Q = $ + "=" + j;
  if (Z.maxAge != null) {
    var Y = Z.maxAge - 0;
    if (isNaN(Y) || !isFinite(Y))
      throw new TypeError("option maxAge is invalid");
    Q += "; Max-Age=" + Math.floor(Y);
  }
  if (Z.domain) {
    if (!o0.test(Z.domain))
      throw new TypeError("option domain is invalid");
    Q += "; Domain=" + Z.domain;
  }
  if (Z.path) {
    if (!o0.test(Z.path))
      throw new TypeError("option path is invalid");
    Q += "; Path=" + Z.path;
  }
  if (Z.expires) {
    var K = Z.expires;
    if (!Y3(K) || isNaN(K.valueOf()))
      throw new TypeError("option expires is invalid");
    Q += "; Expires=" + K.toUTCString();
  }
  if (Z.httpOnly)
    Q += "; HttpOnly";
  if (Z.secure)
    Q += "; Secure";
  if (Z.partitioned)
    Q += "; Partitioned";
  if (Z.priority) {
    var B = typeof Z.priority === "string" ? Z.priority.toLowerCase() : Z.priority;
    switch (B) {
      case "low":
        Q += "; Priority=Low";
        break;
      case "medium":
        Q += "; Priority=Medium";
        break;
      case "high":
        Q += "; Priority=High";
        break;
      default:
        throw new TypeError("option priority is invalid");
    }
  }
  if (Z.sameSite) {
    var U = typeof Z.sameSite === "string" ? Z.sameSite.toLowerCase() : Z.sameSite;
    switch (U) {
      case true:
        Q += "; SameSite=Strict";
        break;
      case "lax":
        Q += "; SameSite=Lax";
        break;
      case "strict":
        Q += "; SameSite=Strict";
        break;
      case "none":
        Q += "; SameSite=None";
        break;
      default:
        throw new TypeError("option sameSite is invalid");
    }
  }
  return Q;
}
function Q3($) {
  return $.indexOf("%") !== -1 ? decodeURIComponent($) : $;
}
function G3($) {
  return encodeURIComponent($);
}
function Y3($) {
  return Z3.call($) === "[object Date]" || $ instanceof Date;
}
function B3($, W) {
  try {
    return W($);
  } catch (X) {
    return $;
  }
}
async function* m0($) {
  const W = $.body;
  if (!W)
    return;
  const X = W.getReader(), Z = new TextDecoder;
  try {
    while (true) {
      const { done: J, value: j } = await X.read();
      if (J)
        break;
      yield Z.decode(j);
    }
  } finally {
    X.releaseLock();
  }
}
function P3($) {
  let W = $;
  while (W.endsWith("="))
    W = W.slice(0, -1);
  return W;
}
function B1($) {
  const W = {};
  if (typeof $ !== "string")
    return W;
  let X = "", Z = "", J = -1, j = -1, Q = 0;
  const Y = $.length;
  for (let K = 0;K < Y; K++)
    switch ($.charCodeAt(K)) {
      case 38:
        const B = j > J;
        if (!B)
          j = K;
        if (X = $.slice(J + 1, j), B || X.length > 0) {
          if (Q & 1)
            X = X.replace(y0, " ");
          if (Q & 2)
            X = V0.default(X) || X;
          if (!W[X]) {
            if (B) {
              if (Z = $.slice(j + 1, K), Q & 4)
                Z = Z.replace(y0, " ");
              if (Q & 8)
                Z = V0.default(Z) || Z;
            }
            W[X] = Z;
          }
        }
        X = "", Z = "", J = K, j = K, Q = 0;
        break;
      case 61:
        if (j <= J)
          j = K;
        else
          Q |= 8;
        break;
      case 43:
        if (j > J)
          Q |= 4;
        else
          Q |= 1;
        break;
      case 37:
        if (j > J)
          Q |= 8;
        else
          Q |= 2;
        break;
    }
  if (J < Y) {
    const K = j > J;
    if (X = $.slice(J + 1, K ? j : Y), K || X.length > 0) {
      if (Q & 1)
        X = X.replace(y0, " ");
      if (Q & 2)
        X = V0.default(X) || X;
      if (!W[X]) {
        if (K) {
          if (Z = $.slice(j + 1, Y), Q & 4)
            Z = Z.replace(y0, " ");
          if (Q & 8)
            Z = V0.default(Z) || Z;
        }
        W[X] = Z;
      }
    }
  }
  return W;
}
var C2 = Object.create;
var { getPrototypeOf: S2, defineProperty: f1, getOwnPropertyNames: L2 } = Object;
var T2 = Object.prototype.hasOwnProperty;
var w1 = ($, W, X) => {
  X = $ != null ? C2(S2($)) : {};
  const Z = W || !$ || !$.__esModule ? f1(X, "default", { value: $, enumerable: true }) : X;
  for (let J of L2($))
    if (!T2.call(Z, J))
      f1(Z, J, { get: () => $[J], enumerable: true });
  return Z;
};
var q2 = ($, W) => () => (W || $((W = { exports: {} }).exports, W), W.exports);
var e0 = q2((J8, o1) => {
  function U3($) {
    var W = $.indexOf("%");
    if (W === -1)
      return $;
    var X = $.length, Z = "", J = 0, j = 0, Q = W, Y = r1;
    while (W > -1 && W < X) {
      var K = a1($[W + 1], 4), B = a1($[W + 2], 0), U = K | B, w = P1[U];
      if (Y = P1[256 + Y + w], j = j << 6 | U & P1[364 + w], Y === r1)
        Z += $.slice(J, Q), Z += j <= 65535 ? String.fromCharCode(j) : String.fromCharCode(55232 + (j >> 10), 56320 + (j & 1023)), j = 0, J = W + 3, W = Q = $.indexOf("%", J);
      else if (Y === K3)
        return null;
      else {
        if (W += 3, W < X && $.charCodeAt(W) === 37)
          continue;
        return null;
      }
    }
    return Z + $.slice(J);
  }
  function a1($, W) {
    var X = w3[$];
    return X === undefined ? 255 : X << W;
  }
  var r1 = 12, K3 = 0, P1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 10, 9, 9, 9, 11, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 24, 36, 48, 60, 72, 84, 96, 0, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 63, 63, 63, 0, 31, 15, 15, 15, 7, 7, 7], w3 = { "0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, a: 10, A: 10, b: 11, B: 11, c: 12, C: 12, d: 13, D: 13, e: 14, E: 14, f: 15, F: 15 };
  o1.exports = U3;
});
var q0 = ($, W) => {
  const X = W?.length ? {} : null;
  if (X)
    for (let Z of W)
      X[Z.part.charCodeAt(0)] = Z;
  return { part: $, store: null, inert: X, params: null, wildcardStore: null };
};
var y1 = ($, W) => ({ ...$, part: W });
var k1 = ($) => ({ name: $, store: null, inert: null });

class M0 {
  root = {};
  history = [];
  static regex = { static: /:.+?(?=\/|$)/, params: /:.+?(?=\/|$)/g, optionalParams: /:.+?\?(?=\/|$)/g };
  add($, W, X, { ignoreError: Z = false, ignoreHistory: J = false } = {}) {
    if (typeof W !== "string")
      throw new TypeError("Route path must be a string");
    if (W === "")
      W = "/";
    else if (W[0] !== "/")
      W = `/${W}`;
    const j = W[W.length - 1] === "*", Q = W.match(M0.regex.optionalParams);
    if (Q) {
      const w = W.replaceAll("?", "");
      this.add($, w, X, { ignoreError: Z });
      for (let F = 0;F < Q.length; F++) {
        let G = W.replace("/" + Q[F], "");
        this.add($, G, X, { ignoreError: true });
      }
      return X;
    }
    if (Q)
      W = W.replaceAll("?", "");
    if (this.history.find(([w, F, G]) => w === $ && F === W))
      return X;
    if (j || Q && W.charCodeAt(W.length - 1) === 63)
      W = W.slice(0, -1);
    if (!J)
      this.history.push([$, W, X]);
    const Y = W.split(M0.regex.static), K = W.match(M0.regex.params) || [];
    if (Y[Y.length - 1] === "")
      Y.pop();
    let B;
    if (!this.root[$])
      B = this.root[$] = q0("/");
    else
      B = this.root[$];
    let U = 0;
    for (let w = 0;w < Y.length; ++w) {
      let F = Y[w];
      if (w > 0) {
        const G = K[U++].slice(1);
        if (B.params === null)
          B.params = k1(G);
        else if (B.params.name !== G)
          if (Z)
            return X;
          else
            throw new Error(`Cannot create route "${W}" with parameter "${G}" because a route already exists with a different parameter name ("${B.params.name}") in the same location`);
        const z = B.params;
        if (z.inert === null) {
          B = z.inert = q0(F);
          continue;
        }
        B = z.inert;
      }
      for (let G = 0;; ) {
        if (G === F.length) {
          if (G < B.part.length) {
            const z = y1(B, B.part.slice(G));
            Object.assign(B, q0(F, [z]));
          }
          break;
        }
        if (G === B.part.length) {
          if (B.inert === null)
            B.inert = {};
          const z = B.inert[F.charCodeAt(G)];
          if (z) {
            B = z, F = F.slice(G), G = 0;
            continue;
          }
          const D = q0(F.slice(G));
          B.inert[F.charCodeAt(G)] = D, B = D;
          break;
        }
        if (F[G] !== B.part[G]) {
          const z = y1(B, B.part.slice(G)), D = q0(F.slice(G));
          Object.assign(B, q0(B.part.slice(0, G), [z, D])), B = D;
          break;
        }
        ++G;
      }
    }
    if (U < K.length) {
      const w = K[U].slice(1);
      if (B.params === null)
        B.params = k1(w);
      else if (B.params.name !== w)
        if (Z)
          return X;
        else
          throw new Error(`Cannot create route "${W}" with parameter "${w}" because a route already exists with a different parameter name ("${B.params.name}") in the same location`);
      if (B.params.store === null)
        B.params.store = X;
      return B.params.store;
    }
    if (j) {
      if (B.wildcardStore === null)
        B.wildcardStore = X;
      return B.wildcardStore;
    }
    if (B.store === null)
      B.store = X;
    return B.store;
  }
  find($, W) {
    const X = this.root[$];
    if (!X)
      return null;
    return _1(W, W.length, X, 0);
  }
}
var _1 = ($, W, X, Z) => {
  const J = X.part, j = J.length, Q = Z + j;
  if (j > 1) {
    if (Q > W)
      return null;
    if (j < 15) {
      for (let Y = 1, K = Z + 1;Y < j; ++Y, ++K)
        if (J.charCodeAt(Y) !== $.charCodeAt(K))
          return null;
    } else if ($.slice(Z, Q) !== J)
      return null;
  }
  if (Q === W) {
    if (X.store !== null)
      return { store: X.store, params: {} };
    if (X.wildcardStore !== null)
      return { store: X.wildcardStore, params: { "*": "" } };
    return null;
  }
  if (X.inert !== null) {
    const Y = X.inert[$.charCodeAt(Q)];
    if (Y !== undefined) {
      const K = _1($, W, Y, Q);
      if (K !== null)
        return K;
    }
  }
  if (X.params !== null) {
    const { store: Y, name: K, inert: B } = X.params, U = $.indexOf("/", Q);
    if (U !== Q) {
      if (U === -1 || U >= W) {
        if (Y !== null) {
          const w = {};
          return w[K] = $.substring(Q, W), { store: Y, params: w };
        }
      } else if (B !== null) {
        const w = _1($, W, B, U);
        if (w !== null)
          return w.params[K] = $.substring(Q, U), w;
      }
    }
  }
  if (X.wildcardStore !== null)
    return { store: X.wildcardStore, params: { "*": $.substring(Q, W) } };
  return null;
};
var E0 = ($) => {
  const W = typeof $ === "object" ? $.fn.toString() : typeof $ === "string" ? $.toString() : $, X = W.indexOf(")");
  if (W.charCodeAt(X + 2) === 61 && W.charCodeAt(X + 5) !== 123)
    return true;
  return W.includes("return");
};
var E2 = ($) => {
  if ($.startsWith("async"))
    $ = $.slice(5);
  $ = $.trimStart();
  let W = -1;
  if ($.charCodeAt(0) === 40) {
    if (W = $.indexOf("=>", $.indexOf(")")), W !== -1) {
      let J = W;
      while (J > 0)
        if ($.charCodeAt(--J) === 41)
          break;
      let j = $.slice(W + 2);
      if (j.charCodeAt(0) === 32)
        j = j.trimStart();
      return [$.slice(1, J), j, { isArrowReturn: j.charCodeAt(0) !== 123 }];
    }
  }
  if ($.startsWith("function")) {
    W = $.indexOf("(");
    const J = $.indexOf(")");
    return [$.slice(W + 1, J), $.slice(J + 2), { isArrowReturn: false }];
  }
  const X = $.indexOf("(");
  if (X !== -1) {
    const J = $.indexOf("\n", 2), j = $.slice(0, J), Q = j.lastIndexOf(")") + 1, Y = $.slice(J + 1);
    return [j.slice(X, Q), "{" + Y, { isArrowReturn: false }];
  }
  const Z = $.split("\n", 2);
  return [Z[0], Z[1], { isArrowReturn: false }];
};
var H2 = ($) => {
  const W = $.indexOf("{");
  if (W === -1)
    return [-1, 0];
  let X = W + 1, Z = 1;
  for (;X < $.length; X++) {
    const J = $.charCodeAt(X);
    if (J === 123)
      Z++;
    else if (J === 125)
      Z--;
    if (Z === 0)
      break;
  }
  if (Z !== 0)
    return [0, $.length];
  return [W, X + 1];
};
var R2 = ($) => {
  const W = $.lastIndexOf("}");
  if (W === -1)
    return [-1, 0];
  let X = W - 1, Z = 1;
  for (;X >= 0; X--) {
    const J = $.charCodeAt(X);
    if (J === 125)
      Z++;
    else if (J === 123)
      Z--;
    if (Z === 0)
      break;
  }
  if (Z !== 0)
    return [-1, 0];
  return [X, W + 1];
};
var v1 = ($) => {
  while (true) {
    const W = $.indexOf(":");
    if (W === -1)
      break;
    let X = $.indexOf(",", W);
    if (X === -1)
      X = $.indexOf("}", W) - 1;
    if (X === -2)
      X = $.length;
    $ = $.slice(0, W) + $.slice(X);
  }
  return $;
};
var u1 = ($) => {
  let W = false;
  if ($.charCodeAt(0) === 40)
    $ = $.slice(1, -1);
  if ($.charCodeAt(0) === 123)
    W = true, $ = $.slice(1, -1);
  $ = $.replace(/( |\t|\n)/g, "").trim();
  let X = [];
  while (true) {
    let [J, j] = H2($);
    if (J === -1)
      break;
    if (X.push($.slice(0, J - 1)), $.charCodeAt(j) === 44)
      j++;
    $ = $.slice(j);
  }
  if ($ = v1($), $)
    X = X.concat($.split(","));
  const Z = [];
  for (let J of X) {
    if (J.indexOf(",") === -1) {
      Z.push(J);
      continue;
    }
    for (let j of J.split(","))
      Z.push(j.trim());
  }
  return X = Z, { hasParenthesis: W, parameters: X };
};
var b2 = ($, W) => {
  const { parameters: X, hasParenthesis: Z } = u1($);
  if (!W.query && X.includes("query"))
    W.query = true;
  if (!W.headers && X.includes("headers"))
    W.headers = true;
  if (!W.body && X.includes("body"))
    W.body = true;
  if (!W.cookie && X.includes("cookie"))
    W.cookie = true;
  if (!W.set && X.includes("set"))
    W.set = true;
  if (!W.server && X.includes("server"))
    W.server = true;
  if (Z)
    return `{ ${X.join(", ")} }`;
  return X.join(", ");
};
var x2 = ($, W, X) => {
  const Z = W.indexOf($ + "\n", X), J = W.indexOf($ + "\t", X), j = W.indexOf($ + ",", X), Q = W.indexOf($ + ";", X), Y = W.indexOf($ + " ", X);
  return [Z, J, j, Q, Y].filter((K) => K > 0).sort((K, B) => K - B)[0] || -1;
};
var h1 = ($, W, X = 0) => {
  if (X > 5)
    return [];
  const Z = [];
  let J = W;
  while (true) {
    let j = x2(" = " + $, J);
    if (j === -1) {
      const K = J.indexOf(" = " + $);
      if (K + 3 + $.length !== J.length)
        break;
      j = K;
    }
    const Q = J.slice(0, j);
    let Y = Q.slice(Q.lastIndexOf(" ") + 1);
    if (Y === "}") {
      const [K, B] = R2(Q);
      Z.push(v1(J.slice(K, B))), J = J.slice(j + 3 + $.length);
      continue;
    }
    while (Y.charCodeAt(0) === 44)
      Y = Y.slice(1);
    while (Y.charCodeAt(0) === 9)
      Y = Y.slice(1);
    if (!Y.includes("("))
      Z.push(Y);
    J = J.slice(j + 3 + $.length);
  }
  for (let j of Z) {
    if (j.charCodeAt(0) === 123)
      continue;
    const Q = h1(j, W);
    if (Q.length > 0)
      Z.push(...Q);
  }
  return Z;
};
var g2 = ($) => {
  if (!$)
    return;
  if ($.charCodeAt(0) !== 123)
    return $;
  if ($ = $.slice(2, -2), !$.includes(",")) {
    if ($.includes("..."))
      return $.slice($.indexOf("...") + 3);
    return;
  }
  const X = $.indexOf("...");
  if (X === -1)
    return;
  return $.slice(X + 3).trimEnd();
};
var f2 = ($, W, X) => {
  const Z = (J, j) => $.includes(j + "." + J) || $.includes(j + '["' + J + '"]') || $.includes(j + "['" + J + "']");
  for (let J of W) {
    if (!J)
      continue;
    if (J.charCodeAt(0) === 123) {
      const j = u1(J).parameters;
      if (!X.query && j.includes("query"))
        X.query = true;
      if (!X.headers && j.includes("headers"))
        X.headers = true;
      if (!X.body && j.includes("body"))
        X.body = true;
      if (!X.cookie && j.includes("cookie"))
        X.cookie = true;
      if (!X.set && j.includes("set"))
        X.set = true;
      if (!X.query && j.includes("server"))
        X.server = true;
      continue;
    }
    if (!X.query && Z("query", J))
      X.query = true;
    if ($.includes("return " + J) || $.includes("return " + J + ".query"))
      X.query = true;
    if (!X.headers && Z("headers", J))
      X.headers = true;
    if (!X.body && Z("body", J))
      X.body = true;
    if (!X.cookie && Z("cookie", J))
      X.cookie = true;
    if (!X.set && Z("set", J))
      X.set = true;
    if (!X.server && Z("server", J))
      X.server = true;
    if (X.query && X.headers && X.body && X.cookie && X.set && X.server)
      break;
  }
  return W;
};
var y2 = ($, W, X) => {
  try {
    const Z = new RegExp(`(?:\\w)\\((?:.*)?${$}`, "gs");
    Z.test(W);
    const J = W.charCodeAt(Z.lastIndex);
    if (J === 41 || J === 44)
      return X.query = true, X.headers = true, X.body = true, X.cookie = true, X.set = true, X.server = true, true;
    return false;
  } catch (Z) {
    return console.log("[Sucrose] warning: unexpected isContextPassToFunction error, you may continue development as usual but please report the following to maintainers:"), console.log("--- body ---"), console.log(W), console.log("--- context ---"), console.log($), true;
  }
};
var r0 = ($, W = { query: false, headers: false, body: false, cookie: false, set: false, server: false }) => {
  const X = [];
  if ($.handler && typeof $.handler === "function")
    X.push($.handler);
  if ($.request?.length)
    X.push(...$.request);
  if ($.beforeHandle?.length)
    X.push(...$.beforeHandle);
  if ($.parse?.length)
    X.push(...$.parse);
  if ($.error?.length)
    X.push(...$.error);
  if ($.transform?.length)
    X.push(...$.transform);
  if ($.afterHandle?.length)
    X.push(...$.afterHandle);
  if ($.mapResponse?.length)
    X.push(...$.mapResponse);
  if ($.afterResponse?.length)
    X.push(...$.afterResponse);
  for (let Z of X) {
    if (!Z)
      continue;
    const J = "fn" in Z ? Z.fn : Z, [j, Q, { isArrowReturn: Y }] = E2(J.toString()), K = b2(j, W), B = g2(K);
    if (B) {
      const U = h1(B, Q);
      if (U.splice(0, -1, B), !y2(B, Q, W))
        f2(Q, U, W);
      if (!W.query && Q.includes("return " + B + ".query"))
        W.query = true;
    }
    if (W.query && W.headers && W.body && W.cookie && W.set && W.server)
      break;
  }
  return W;
};
var a0 = { date: p1, time: F1(true), "date-time": m1(true), "iso-time": F1(false), "iso-date-time": m1(false), duration: /^P(?!$)((\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?|(\d+W)?)$/, uri: p2, "uri-reference": /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i, "uri-template": /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i, url: /^(?:https?|ftp):\/\/(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)(?:\.(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu, email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i, hostname: /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i, ipv4: /^(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)$/, ipv6: /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i, regex: a2, uuid: /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i, "json-pointer": /^(?:\/(?:[^~/]|~0|~1)*)*$/, "json-pointer-uri-fragment": /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i, "relative-json-pointer": /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/, byte: l2, int32: { type: "number", validate: t2 }, int64: { type: "number", validate: s2 }, float: { type: "number", validate: c1 }, double: { type: "number", validate: c1 }, password: true, binary: true };
var v2 = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
var u2 = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var h2 = /^(\d\d):(\d\d):(\d\d(?:\.\d+)?)(z|([+-])(\d\d)(?::?(\d\d))?)?$/i;
var m2 = /t|\s/i;
var d2 = /\/|:/;
var c2 = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
var d1 = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/gm;
var i2 = -2147483648;
var n2 = 2147483647;
var r2 = /[^\\]\\Z/;
var n1 = /(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/;
var t1 = /(?:Sun|Mon|Tue|Wed|Thu|Fri|Sat)\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s\d{2}\s\d{4}\s\d{2}:\d{2}:\d{2}\sGMT(?:\+|-)\d{4}\s\([^)]+\)/;
var s1 = /^(?:(?:(?:(?:0?[1-9]|[12][0-9]|3[01])[/\s-](?:0?[1-9]|1[0-2])[/\s-](?:19|20)\d{2})|(?:(?:19|20)\d{2}[/\s-](?:0?[1-9]|1[0-2])[/\s-](?:0?[1-9]|[12][0-9]|3[01]))))(?:\s(?:1[012]|0?[1-9]):[0-5][0-9](?::[0-5][0-9])?(?:\s[AP]M)?)?$/;
var e2 = a0.date;
var $3 = a0["date-time"];
if (!exports_format.Has("date"))
  TypeSystem.Format("date", ($) => {
    const W = $.replace(/"/g, "");
    if (n1.test(W) || t1.test(W) || s1.test(W) || e2(W)) {
      const X = new Date(W);
      if (!Number.isNaN(X.getTime()))
        return true;
    }
    return false;
  });
if (!exports_format.Has("date-time"))
  TypeSystem.Format("date-time", ($) => {
    const W = $.replace(/"/g, "");
    if (n1.test(W) || t1.test(W) || s1.test(W) || $3(W)) {
      const X = new Date(W);
      if (!Number.isNaN(X.getTime()))
        return true;
    }
    return false;
  });
Object.entries(a0).forEach(($) => {
  const [W, X] = $;
  if (!exports_format.Has(W)) {
    if (X instanceof RegExp)
      TypeSystem.Format(W, (Z) => X.test(Z));
    else if (typeof X === "function")
      TypeSystem.Format(W, X);
  }
});
var V = Object.assign({}, Type);
var i1 = ($) => {
  if (typeof $ === "string")
    switch ($.slice(-1)) {
      case "k":
        return +$.slice(0, $.length - 1) * 1024;
      case "m":
        return +$.slice(0, $.length - 1) * 1048576;
      default:
        return +$;
    }
  return $;
};
var M1 = ($, W) => {
  if (!(W instanceof Blob))
    return false;
  if ($.minSize && W.size < i1($.minSize))
    return false;
  if ($.maxSize && W.size > i1($.maxSize))
    return false;
  if ($.extension)
    if (typeof $.extension === "string") {
      if (!W.type.startsWith($.extension))
        return false;
    } else {
      for (let X = 0;X < $.extension.length; X++)
        if (W.type.startsWith($.extension[X]))
          return true;
      return false;
    }
  return true;
};
var W3 = exports_type.Get("Files") ?? TypeSystem.Type("File", M1);
var X3 = exports_type.Get("Files") ?? TypeSystem.Type("Files", ($, W) => {
  if (!Array.isArray(W))
    return M1($, W);
  if ($.minItems && W.length < $.minItems)
    return false;
  if ($.maxItems && W.length > $.maxItems)
    return false;
  for (let X = 0;X < W.length; X++)
    if (!M1($, W[X]))
      return false;
  return true;
});
if (!exports_format.Has("numeric"))
  exports_format.Set("numeric", ($) => !!$ && !isNaN(+$));
if (!exports_format.Has("boolean"))
  exports_format.Set("boolean", ($) => $ === "true" || $ === "false");
if (!exports_format.Has("ObjectString"))
  exports_format.Set("ObjectString", ($) => {
    let W = $.charCodeAt(0);
    if (W === 9 || W === 10 || W === 32)
      W = $.trimStart().charCodeAt(0);
    if (W !== 123 && W !== 91)
      return false;
    try {
      return JSON.parse($), true;
    } catch {
      return false;
    }
  });
if (!exports_format.Has("ArrayString"))
  exports_format.Set("ArrayString", ($) => {
    let W = $.charCodeAt(0);
    if (W === 9 || W === 10 || W === 32)
      W = $.trimStart().charCodeAt(0);
    if (W !== 123 && W !== 91)
      return false;
    try {
      return JSON.parse($), true;
    } catch {
      return false;
    }
  });
exports_type.Set("UnionEnum", ($, W) => {
  return (typeof W === "number" || typeof W === "string" || W === null) && $.enum.includes(W);
});
var X0 = { Numeric: ($) => {
  const W = Type.Number($);
  return V.Transform(V.Union([V.String({ format: "numeric", default: 0 }), V.Number($)], $)).Decode((X) => {
    const Z = +X;
    if (isNaN(Z))
      return X;
    if ($ && !exports_value2.Check(W, Z))
      throw new T("property", W, Z);
    return Z;
  }).Encode((X) => X);
}, Date: ($) => {
  const W = Type.Date($);
  return V.Transform(V.Union([Type.Date($), V.String({ format: "date", default: new Date().toISOString() }), V.String({ format: "date-time", default: new Date().toISOString() })], $)).Decode((X) => {
    if (X instanceof Date)
      return X;
    const Z = new Date(X);
    if (!exports_value2.Check(W, Z))
      throw new T("property", W, Z);
    return Z;
  }).Encode((X) => {
    if (typeof X === "string")
      return new Date(X);
    return X;
  });
}, BooleanString: ($) => {
  const W = Type.Boolean($);
  return V.Transform(V.Union([V.String({ format: "boolean", default: false }), V.Boolean($)], $)).Decode((X) => {
    if (typeof X === "string")
      return X === "true";
    if ($ && !exports_value2.Check(W, X))
      throw new T("property", W, X);
    return X;
  }).Encode((X) => X);
}, ObjectString: ($, W) => {
  const X = V.Object($, W), Z = JSON.stringify(exports_value2.Create(X));
  let J;
  try {
    J = TypeCompiler.Compile(X);
  } catch {
  }
  return V.Transform(V.Union([V.String({ format: "ObjectString", default: Z }), X])).Decode((j) => {
    if (typeof j === "string") {
      if (j.charCodeAt(0) !== 123)
        throw new T("property", X, j);
      try {
        j = JSON.parse(j);
      } catch {
        throw new T("property", X, j);
      }
      if (J) {
        if (!J.Check(j))
          throw new T("property", X, j);
        return J.Decode(j);
      }
      if (!exports_value2.Check(X, j))
        throw new T("property", X, j);
      return exports_value2.Decode(X, j);
    }
    return j;
  }).Encode((j) => {
    if (typeof j === "string")
      try {
        j = JSON.parse(j);
      } catch {
        throw new T("property", X, j);
      }
    if (!exports_value2.Check(X, j))
      throw new T("property", X, j);
    return JSON.stringify(j);
  });
}, ArrayString: ($ = {}, W) => {
  const X = V.Array($, W), Z = JSON.stringify(exports_value2.Create(X));
  let J;
  try {
    J = TypeCompiler.Compile(X);
  } catch {
  }
  return V.Transform(V.Union([V.String({ format: "ArrayString", default: Z }), X])).Decode((j) => {
    if (typeof j === "string") {
      if (j.charCodeAt(0) !== 91)
        throw new T("property", X, j);
      try {
        j = JSON.parse(j);
      } catch {
        throw new T("property", X, j);
      }
      if (J) {
        if (!J.Check(j))
          throw new T("property", X, j);
        return J.Decode(j);
      }
      if (!exports_value2.Check(X, j))
        throw new T("property", X, j);
      return exports_value2.Decode(X, j);
    }
    return j;
  }).Encode((j) => {
    if (typeof j === "string")
      try {
        j = JSON.parse(j);
      } catch {
        throw new T("property", X, j);
      }
    if (!exports_value2.Check(X, j))
      throw new T("property", X, j);
    return JSON.stringify(j);
  });
}, File: W3, Files: ($ = {}) => V.Transform(X3($)).Decode((W) => {
  if (Array.isArray(W))
    return W;
  return [W];
}).Encode((W) => W), Nullable: ($) => V.Union([$, V.Null()]), MaybeEmpty: ($) => V.Union([$, V.Null(), V.Undefined()]), Cookie: ($, { domain: W, expires: X, httpOnly: Z, maxAge: J, path: j, priority: Q, sameSite: Y, secure: K, secrets: B, sign: U, ...w } = {}) => {
  const F = V.Object($, w);
  return F.config = { domain: W, expires: X, httpOnly: Z, maxAge: J, path: j, priority: Q, sameSite: Y, secure: K, secrets: B, sign: U }, F;
}, UnionEnum: ($, W = {}) => {
  const X = $.every((Z) => typeof Z === "string") ? { type: "string" } : $.every((Z) => typeof Z === "number") ? { type: "number" } : $.every((Z) => Z === null) ? { type: "null" } : {};
  if ($.some((Z) => typeof Z === "object" && Z !== null))
    throw new Error("This type does not support objects or arrays");
  return { default: $[0], ...W, [Kind]: "UnionEnum", ...X, enum: $ };
} };
V.BooleanString = X0.BooleanString;
V.ObjectString = X0.ObjectString;
V.ArrayString = X0.ArrayString;
V.Numeric = X0.Numeric;
V.File = ($ = {}) => X0.File({ default: "File", ...$, extension: $?.type, type: "string", format: "binary" });
V.Files = ($ = {}) => X0.Files({ ...$, elysiaMeta: "Files", default: "Files", extension: $?.type, type: "array", items: { ...$, default: "Files", type: "string", format: "binary" } });
V.Nullable = ($) => X0.Nullable($);
V.MaybeEmpty = X0.MaybeEmpty;
V.Cookie = X0.Cookie;
V.Date = X0.Date;
V.UnionEnum = X0.UnionEnum;
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
var D1 = J3;
var N1 = j3;
var Z3 = Object.prototype.toString;
var o0 = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
var $2 = w1(e0(), 1);

class w0 {
  $;
  W;
  X;
  constructor($, W, X = {}) {
    this.name = $;
    this.jar = W;
    this.initial = X;
  }
  get cookie() {
    if (!(this.name in this.jar))
      return this.initial;
    return this.jar[this.name];
  }
  set cookie($) {
    if (!(this.name in this.jar))
      this.jar[this.name] = this.initial;
    this.jar[this.name] = $;
  }
  get value() {
    return this.cookie.value;
  }
  set value($) {
    if (!(this.name in this.jar))
      this.jar[this.name] = this.initial;
    this.jar[this.name].value = $;
  }
  get expires() {
    return this.cookie.expires;
  }
  set expires($) {
    this.cookie.expires = $;
  }
  get maxAge() {
    return this.cookie.maxAge;
  }
  set maxAge($) {
    this.cookie.maxAge = $;
  }
  get domain() {
    return this.cookie.domain;
  }
  set domain($) {
    this.cookie.domain = $;
  }
  get path() {
    return this.cookie.path;
  }
  set path($) {
    this.cookie.path = $;
  }
  get secure() {
    return this.cookie.secure;
  }
  set secure($) {
    this.cookie.secure = $;
  }
  get httpOnly() {
    return this.cookie.httpOnly;
  }
  set httpOnly($) {
    this.cookie.httpOnly = $;
  }
  get sameSite() {
    return this.cookie.sameSite;
  }
  set sameSite($) {
    this.cookie.sameSite = $;
  }
  get priority() {
    return this.cookie.priority;
  }
  set priority($) {
    this.cookie.priority = $;
  }
  get partitioned() {
    return this.cookie.partitioned;
  }
  set partitioned($) {
    this.cookie.partitioned = $;
  }
  get secrets() {
    return this.cookie.secrets;
  }
  set secrets($) {
    this.cookie.secrets = $;
  }
  update($) {
    return this.cookie = Object.assign(this.cookie, typeof $ === "function" ? $(this.cookie) : $), this;
  }
  set($) {
    return this.cookie = Object.assign({ ...this.initial, value: this.value }, typeof $ === "function" ? $(this.cookie) : $), this;
  }
  remove() {
    if (this.value === undefined)
      return;
    return this.set({ expires: new Date(0), maxAge: 0, value: "" }), this;
  }
  toString() {
    return typeof this.value === "object" ? JSON.stringify(this.value) : this.value?.toString() ?? "";
  }
}
var e1 = ($, W, X) => {
  if (!$.cookie)
    $.cookie = {};
  return new Proxy(W, { get(Z, J) {
    if (J in W)
      return new w0(J, $.cookie, Object.assign({}, X ?? {}, W[J]));
    return new w0(J, $.cookie, Object.assign({}, X));
  } });
};
var $1 = async ($, W, { secrets: X, sign: Z, ...J } = {}) => {
  if (!W)
    return e1($, {}, J);
  const j = typeof X === "string";
  if (Z && Z !== true && !Array.isArray(Z))
    Z = [Z];
  const Q = {}, Y = D1(W);
  for (let [K, B] of Object.entries(Y)) {
    let U = $2.default(B);
    if (Z === true || Z?.includes(K)) {
      if (!X)
        throw new Error("No secret is provided to cookie plugin");
      if (j) {
        const w = await I1(U, X);
        if (w === false)
          throw new u0(K);
        U = w;
      } else {
        let w = true;
        for (let F = 0;F < X.length; F++) {
          const G = await I1(U, X[F]);
          if (G !== false) {
            w = true, U = G;
            break;
          }
        }
        if (!w)
          throw new u0(K);
      }
    }
    Q[K] = { value: U };
  }
  return e1($, Q, J);
};
var W2 = "toJSON" in new Headers;
var n = ($) => {
  if (!$)
    return false;
  for (let W in $)
    return true;
  return false;
};
var h0 = ($, W) => {
  const X = $.size;
  if (!W && X || X && W && W.status !== 206 && W.status !== 304 && W.status !== 412 && W.status !== 416) {
    if (W) {
      if (W.headers instanceof Headers) {
        if (W2)
          W.headers = W.headers.toJSON();
        else
          for (let [Z, J] of W.headers.entries())
            if (Z in W.headers)
              W.headers[Z] = J;
      }
      return new Response($, { status: W.status, headers: Object.assign({ "accept-ranges": "bytes", "content-range": `bytes 0-${X - 1}/${X}` }, W.headers) });
    }
    return new Response($, { headers: { "accept-ranges": "bytes", "content-range": `bytes 0-${X - 1}/${X}` } });
  }
  return new Response($);
};
var X2 = ($, W) => {
  if (!$)
    return $;
  $.delete("set-cookie");
  for (let X = 0;X < W.length; X++) {
    const Z = W[X].indexOf("=");
    $.append("set-cookie", `${W[X].slice(0, Z)}=${W[X].slice(Z + 1) || ""}`);
  }
  return $;
};
var Z2 = ($) => {
  if (!$ || !n($))
    return;
  const W = [];
  for (let [X, Z] of Object.entries($)) {
    if (!X || !Z)
      continue;
    const J = Z.value;
    if (J === undefined || J === null)
      continue;
    W.push(N1(X, typeof J === "object" ? JSON.stringify(J) : J + "", Z));
  }
  if (W.length === 0)
    return;
  if (W.length === 1)
    return W[0];
  return W;
};
var B0 = async ($, W, X) => {
  let Z = $.next();
  if (Z instanceof Promise)
    Z = await Z;
  if (Z.done) {
    if (W)
      return f(Z.value, W, X);
    return Z0(Z.value, X);
  }
  return new Response(new ReadableStream({ async start(J) {
    let j = false;
    if (X?.signal.addEventListener("abort", () => {
      j = true;
      try {
        J.close();
      } catch {
      }
    }), Z.value !== undefined && Z.value !== null)
      if (typeof Z.value === "object")
        try {
          J.enqueue(Buffer.from(JSON.stringify(Z.value)));
        } catch {
          J.enqueue(Buffer.from(Z.value.toString()));
        }
      else
        J.enqueue(Buffer.from(Z.value.toString()));
    for await (let Q of $) {
      if (j)
        break;
      if (Q === undefined || Q === null)
        continue;
      if (typeof Q === "object")
        try {
          J.enqueue(Buffer.from(JSON.stringify(Q)));
        } catch {
          J.enqueue(Buffer.from(Q.toString()));
        }
      else
        J.enqueue(Buffer.from(Q.toString()));
      await new Promise((Y) => setTimeout(() => Y(), 0));
    }
    try {
      J.close();
    } catch {
    }
  } }), { ...W, headers: { "transfer-encoding": "chunked", "content-type": "text/event-stream; charset=utf-8", ...W?.headers } });
};
var f = ($, W, X) => {
  if (n(W.headers) || W.status !== 200 || W.redirect || W.cookie) {
    if (typeof W.status === "string")
      W.status = _0[W.status];
    if (W.redirect) {
      if (W.headers.Location = W.redirect, !W.status || W.status < 300 || W.status >= 400)
        W.status = 302;
    }
    if (W.cookie && n(W.cookie)) {
      const Z = Z2(W.cookie);
      if (Z)
        W.headers["set-cookie"] = Z;
    }
    if (W.headers["set-cookie"] && Array.isArray(W.headers["set-cookie"]))
      W.headers = X2(new Headers(W.headers), W.headers["set-cookie"]);
    switch ($?.constructor?.name) {
      case "String":
        return new Response($, W);
      case "Blob":
        return h0($, W);
      case "Array":
        return Response.json($, W);
      case "Object":
        const Z = $[c];
        if (Z)
          return W.status = Z, f($.response, W, X);
        for (let j in Object.values($))
          switch (j?.constructor?.name) {
            case "Blob":
            case "File":
            case "ArrayBuffer":
            case "FileRef":
              return new Response(N0($));
            default:
              break;
          }
        return Response.json($, W);
      case "ReadableStream":
        if (!W.headers["content-type"]?.startsWith("text/event-stream"))
          W.headers["content-type"] = "text/event-stream; charset=utf-8";
        return X?.signal.addEventListener("abort", { handleEvent() {
          if (!X?.signal.aborted)
            $.cancel(X);
        } }, { once: true }), new Response($, W);
      case undefined:
        if (!$)
          return new Response("", W);
        return Response.json($, W);
      case "Response":
        let J = false;
        if (W.headers instanceof Headers)
          for (let j of W.headers.keys())
            if (j === "set-cookie") {
              if (J)
                continue;
              J = true;
              for (let Q of W.headers.getSetCookie())
                $.headers.append("set-cookie", Q);
            } else
              $.headers.append(j, W.headers?.get(j) ?? "");
        else
          for (let j in W.headers)
            $.headers.append(j, W.headers[j]);
        if ($.status !== W.status)
          W.status = $.status;
        if ($.headers.get("transfer-encoding") === "chunked")
          return B0(m0($), W, X);
        return $;
      case "Error":
        return K0($, W);
      case "Promise":
        return $.then((j) => f(j, W));
      case "Function":
        return f($(), W);
      case "Number":
      case "Boolean":
        return new Response($.toString(), W);
      case "Cookie":
        if ($ instanceof w0)
          return new Response($.value, W);
        return new Response($?.toString(), W);
      case "FormData":
        return new Response($, W);
      default:
        if ($ instanceof Response) {
          let j = false;
          if (W.headers instanceof Headers)
            for (let Q of W.headers.keys())
              if (Q === "set-cookie") {
                if (j)
                  continue;
                j = true;
                for (let Y of W.headers.getSetCookie())
                  $.headers.append("set-cookie", Y);
              } else
                $.headers.append(Q, W.headers?.get(Q) ?? "");
          else
            for (let Q in W.headers)
              $.headers.append(Q, W.headers[Q]);
          if (W2)
            W.headers = $.headers.toJSON();
          else
            for (let [Q, Y] of $.headers.entries())
              if (Q in W.headers)
                W.headers[Q] = Y;
          return $;
        }
        if ($ instanceof Promise)
          return $.then((j) => f(j, W));
        if ($ instanceof Error)
          return K0($, W);
        if (typeof $?.next === "function")
          return B0($, W, X);
        if ("toResponse" in $)
          return f($.toResponse(), W);
        if ("charCodeAt" in $) {
          const j = $.charCodeAt(0);
          if (j === 123 || j === 91) {
            if (!W.headers["Content-Type"])
              W.headers["Content-Type"] = "application/json";
            return new Response(JSON.stringify($), W);
          }
        }
        return new Response($, W);
    }
  } else
    switch ($?.constructor?.name) {
      case "String":
        return new Response($);
      case "Blob":
        return h0($, W);
      case "Array":
        return Response.json($);
      case "Object":
        const Z = $[c];
        if (Z)
          return W.status = Z, f($.response, W, X);
        for (let J in Object.values($))
          switch (J?.constructor?.name) {
            case "Blob":
            case "File":
            case "ArrayBuffer":
            case "FileRef":
              return new Response(N0($), W);
            default:
              break;
          }
        return Response.json($, W);
      case "ReadableStream":
        return X?.signal.addEventListener("abort", { handleEvent() {
          if (!X?.signal.aborted)
            $.cancel(X);
        } }, { once: true }), new Response($, { headers: { "Content-Type": "text/event-stream; charset=utf-8" } });
      case undefined:
        if (!$)
          return new Response("");
        return new Response(JSON.stringify($), { headers: { "content-type": "application/json" } });
      case "Response":
        if ($.headers.get("transfer-encoding") === "chunked")
          return B0(m0($), W, X);
        return $;
      case "Error":
        return K0($, W);
      case "Promise":
        return $.then((J) => {
          const j = Z0(J, X);
          if (j !== undefined)
            return j;
          return new Response("");
        });
      case "Function":
        return Z0($(), X);
      case "Number":
      case "Boolean":
        return new Response($.toString());
      case "Cookie":
        if ($ instanceof w0)
          return new Response($.value, W);
        return new Response($?.toString(), W);
      case "FormData":
        return new Response($, W);
      default:
        if ($ instanceof Response)
          return new Response($.body, { headers: { "Content-Type": "application/json" } });
        if ($ instanceof Promise)
          return $.then((J) => f(J, W));
        if ($ instanceof Error)
          return K0($, W);
        if (typeof $?.next === "function")
          return B0($, W, X);
        if ("toResponse" in $)
          return f($.toResponse(), W);
        if ("charCodeAt" in $) {
          const J = $.charCodeAt(0);
          if (J === 123 || J === 91) {
            if (!W.headers["Content-Type"])
              W.headers["Content-Type"] = "application/json";
            return new Response(JSON.stringify($), W);
          }
        }
        return new Response($);
    }
};
var v = ($, W, X) => {
  if ($ === undefined || $ === null)
    return;
  if (n(W.headers) || W.status !== 200 || W.redirect || W.cookie) {
    if (typeof W.status === "string")
      W.status = _0[W.status];
    if (W.redirect) {
      if (W.headers.Location = W.redirect, !W.status || W.status < 300 || W.status >= 400)
        W.status = 302;
    }
    if (W.cookie && n(W.cookie)) {
      const Z = Z2(W.cookie);
      if (Z)
        W.headers["set-cookie"] = Z;
    }
    if (W.headers["set-cookie"] && Array.isArray(W.headers["set-cookie"]))
      W.headers = X2(new Headers(W.headers), W.headers["set-cookie"]);
    switch ($?.constructor?.name) {
      case "String":
        return new Response($, W);
      case "Blob":
        return h0($, W);
      case "Array":
        return Response.json($, W);
      case "Object":
        const Z = $[c];
        if (Z)
          return W.status = Z, v($.response, W, X);
        for (let j in Object.values($))
          switch (j?.constructor?.name) {
            case "Blob":
            case "File":
            case "ArrayBuffer":
            case "FileRef":
              return new Response(N0($), W);
            default:
              break;
          }
        return Response.json($, W);
      case "ReadableStream":
        if (!W.headers["content-type"]?.startsWith("text/event-stream"))
          W.headers["content-type"] = "text/event-stream; charset=utf-8";
        return X?.signal.addEventListener("abort", { handleEvent() {
          if (!X?.signal.aborted)
            $.cancel(X);
        } }, { once: true }), new Response($, W);
      case undefined:
        if (!$)
          return;
        return Response.json($, W);
      case "Response":
        let J = false;
        if (W.headers instanceof Headers)
          for (let j of W.headers.keys())
            if (j === "set-cookie") {
              if (J)
                continue;
              J = true;
              for (let Q of W.headers.getSetCookie())
                $.headers.append("set-cookie", Q);
            } else
              $.headers.append(j, W.headers?.get(j) ?? "");
        else
          for (let j in W.headers)
            $.headers.append(j, W.headers[j]);
        if ($.status !== W.status)
          W.status = $.status;
        if ($.headers.get("transfer-encoding") === "chunked")
          return B0(m0($), W, X);
        return $;
      case "Promise":
        return $.then((j) => {
          const Q = v(j, W);
          if (Q !== undefined)
            return Q;
        });
      case "Error":
        return K0($, W);
      case "Function":
        return v($(), W);
      case "Number":
      case "Boolean":
        return new Response($.toString(), W);
      case "FormData":
        return new Response($);
      case "Cookie":
        if ($ instanceof w0)
          return new Response($.value, W);
        return new Response($?.toString(), W);
      default:
        if ($ instanceof Response) {
          let j = false;
          if (W.headers instanceof Headers)
            for (let Q of W.headers.keys())
              if (Q === "set-cookie") {
                if (j)
                  continue;
                j = true;
                for (let Y of W.headers.getSetCookie())
                  $.headers.append("set-cookie", Y);
              } else
                $.headers.append(Q, W.headers?.get(Q) ?? "");
          else
            for (let Q in W.headers)
              $.headers.append(Q, W.headers[Q]);
          if ($.status !== W.status)
            W.status = $.status;
          return $;
        }
        if ($ instanceof Promise)
          return $.then((j) => v(j, W));
        if ($ instanceof Error)
          return K0($, W);
        if (typeof $?.next === "function")
          return B0($, W, X);
        if ("toResponse" in $)
          return v($.toResponse(), W);
        if ("charCodeAt" in $) {
          const j = $.charCodeAt(0);
          if (j === 123 || j === 91) {
            if (!W.headers["Content-Type"])
              W.headers["Content-Type"] = "application/json";
            return new Response(JSON.stringify($), W);
          }
        }
        return new Response($, W);
    }
  } else
    switch ($?.constructor?.name) {
      case "String":
        return new Response($);
      case "Blob":
        return h0($, W);
      case "Array":
        return Response.json($);
      case "Object":
        const Z = $[c];
        if (Z)
          return W.status = Z, v($.response, W, X);
        for (let J in Object.values($))
          switch (J?.constructor?.name) {
            case "Blob":
            case "File":
            case "ArrayBuffer":
            case "FileRef":
              return new Response(N0($), W);
            default:
              break;
          }
        return Response.json($, W);
      case "ReadableStream":
        return X?.signal.addEventListener("abort", { handleEvent() {
          if (!X?.signal.aborted)
            $.cancel(X);
        } }, { once: true }), new Response($, { headers: { "Content-Type": "text/event-stream; charset=utf-8" } });
      case undefined:
        if (!$)
          return new Response("");
        return new Response(JSON.stringify($), { headers: { "content-type": "application/json" } });
      case "Response":
        if ($.headers.get("transfer-encoding") === "chunked")
          return B0(m0($));
        return $;
      case "Promise":
        return $.then((J) => {
          const j = v(J, W);
          if (j !== undefined)
            return j;
        });
      case "Error":
        return K0($, W);
      case "Function":
        return Z0($(), X);
      case "Number":
      case "Boolean":
        return new Response($.toString());
      case "Cookie":
        if ($ instanceof w0)
          return new Response($.value, W);
        return new Response($?.toString(), W);
      case "FormData":
        return new Response($);
      default:
        if ($ instanceof Response)
          return new Response($.body, { headers: { "Content-Type": "application/json" } });
        if ($ instanceof Promise)
          return $.then((J) => v(J, W));
        if ($ instanceof Error)
          return K0($, W);
        if (typeof $?.next === "function")
          return B0($, W, X);
        if ("toResponse" in $)
          return v($.toResponse(), W);
        if ("charCodeAt" in $) {
          const J = $.charCodeAt(0);
          if (J === 123 || J === 91) {
            if (!W.headers["Content-Type"])
              W.headers["Content-Type"] = "application/json";
            return new Response(JSON.stringify($), W);
          }
        }
        return new Response($);
    }
};
var Z0 = ($, W) => {
  switch ($?.constructor?.name) {
    case "String":
      return new Response($);
    case "Blob":
      return h0($);
    case "Array":
      return Response.json($);
    case "Object":
      if ($[c])
        return f($.response, { status: $[c], headers: {} });
      $:
        for (let X of Object.values($))
          switch (X?.constructor?.name) {
            case "Blob":
            case "File":
            case "ArrayBuffer":
            case "FileRef":
              return new Response(N0($));
            case "Object":
              break $;
            default:
              break;
          }
      return Response.json($);
    case "ReadableStream":
      return W?.signal.addEventListener("abort", { handleEvent() {
        if (!W?.signal.aborted)
          $.cancel(W);
      } }, { once: true }), new Response($, { headers: { "Content-Type": "text/event-stream; charset=utf-8" } });
    case undefined:
      if (!$)
        return new Response("");
      return new Response(JSON.stringify($), { headers: { "content-type": "application/json" } });
    case "Response":
      if ($.headers.get("transfer-encoding") === "chunked")
        return B0(m0($));
      return $;
    case "Error":
      return K0($);
    case "Promise":
      return $.then((X) => Z0(X, W));
    case "Function":
      return Z0($(), W);
    case "Number":
    case "Boolean":
      return new Response($.toString());
    case "FormData":
      return new Response($);
    default:
      if ($ instanceof Response)
        return new Response($.body, { headers: { "Content-Type": "application/json" } });
      if ($ instanceof Promise)
        return $.then((X) => Z0(X, W));
      if ($ instanceof Error)
        return K0($);
      if (typeof $?.next === "function")
        return B0($, undefined, W);
      if ("toResponse" in $)
        return Z0($.toResponse());
      if ("charCodeAt" in $) {
        const X = $.charCodeAt(0);
        if (X === 123 || X === 91)
          return new Response(JSON.stringify($), { headers: { "Content-Type": "application/json" } });
      }
      return new Response($);
  }
};
var K0 = ($, W) => new Response(JSON.stringify({ name: $?.name, message: $?.message, cause: $?.cause }), { status: W?.status !== 200 ? W?.status ?? 500 : 500, headers: W?.headers });
var J2 = ($, W, X = {}) => {
  if (typeof $ === "function")
    return;
  const Z = f($, { headers: X });
  if (W.parse.length === 0 && W.transform.length === 0 && W.beforeHandle.length === 0 && W.afterHandle.length === 0)
    return Z.clone.bind(Z);
};
var b0 = ($, W) => {
  const X = new URL($);
  return X.pathname = W, X.toString();
};
var _3 = ($) => typeof $ === "function" && /^\s*class\s+/.test($.toString()) || $.toString().startsWith("[object ") && $.toString() !== "[object Object]" || n(Object.getPrototypeOf($));
var A1 = ($) => $ && typeof $ === "object" && !Array.isArray($);
var p = ($, W, { skipKeys: X, override: Z = true } = {}) => {
  if (!A1($) || !A1(W))
    return $;
  for (let [J, j] of Object.entries(W)) {
    if (X?.includes(J))
      continue;
    if (!A1(j) || !(J in $) || _3(j)) {
      if (Z || !(J in $))
        $[J] = j;
      continue;
    }
    $[J] = p($[J], j, { skipKeys: X, override: Z });
  }
  return $;
};
var F3 = ($, W) => {
  const { properties: X, ...Z } = $ ?? {}, { properties: J, ...j } = W ?? {};
  return p(Z, j);
};
var x = ($ = [], W = []) => {
  if (!$)
    return [];
  if (!W)
    return $;
  const X = [], Z = [];
  if (!Array.isArray($))
    $ = [$];
  if (!Array.isArray(W))
    W = [W];
  for (let J of $)
    if (X.push(J), J.checksum)
      Z.push(J.checksum);
  for (let J of W)
    if (!Z.includes(J.checksum))
      X.push(J);
  return X;
};
var M3 = ["start", "request", "parse", "transform", "resolve", "beforeHandle", "afterHandle", "mapResponse", "afterResponse", "trace", "error", "stop", "body", "headers", "params", "query", "response", "type", "detail"];
var z3 = M3.reduce(($, W) => ($[W] = true, $), {});
var Y2 = ($, W) => {
  const X = (Z) => typeof Z === "object" && Object.keys(Z).every(J1);
  if (X($) && X(W))
    return { ...$, ...W };
  return W ?? $;
};
var x0 = ($, W) => {
  return { body: W?.body ?? $?.body, headers: W?.headers ?? $?.headers, params: W?.params ?? $?.params, query: W?.query ?? $?.query, cookie: W?.cookie ?? $?.cookie, response: Y2($?.response, W?.response) };
};
var i = ($, W) => {
  return { ...$, ...W, body: W?.body ?? $?.body, headers: W?.headers ?? $?.headers, params: W?.params ?? $?.params, query: W?.query ?? $?.query, cookie: W?.cookie ?? $?.cookie, response: Y2($?.response, W?.response), type: $?.type || W?.type, detail: p(W?.detail ?? {}, $?.detail ?? {}), parse: x($?.parse, W?.parse), transform: x($?.transform, W?.transform), beforeHandle: x($?.beforeHandle, W?.beforeHandle), afterHandle: x($?.afterHandle, W?.afterHandle), mapResponse: x($?.mapResponse, W?.mapResponse), afterResponse: x($?.afterResponse, W?.afterResponse), trace: x($?.trace, W?.trace), error: x($?.error, W?.error) };
};
var B2 = ($, W, X = true) => {
  if (!Array.isArray(W))
    return m($, W, X);
  for (let Z of W)
    $ = m($, Z, X);
  return $;
};
var m = ($, W, X = true) => {
  if (!$)
    return $;
  if (W.untilObjectFound && !X && $.type === "object")
    return $;
  const Z = W.from[Kind];
  if ($.oneOf) {
    for (let Q = 0;Q < $.oneOf.length; Q++)
      $.oneOf[Q] = m($.oneOf[Q], W, X);
    return $;
  }
  if ($.anyOf) {
    for (let Q = 0;Q < $.anyOf.length; Q++)
      $.anyOf[Q] = m($.anyOf[Q], W, X);
    return $;
  }
  if ($.allOf) {
    for (let Q = 0;Q < $.allOf.length; Q++)
      $.allOf[Q] = m($.allOf[Q], W, X);
    return $;
  }
  if ($.not) {
    for (let Q = 0;Q < $.not.length; Q++)
      $.not[Q] = m($.not[Q], W, X);
    return $;
  }
  const J = X && !!W.excludeRoot;
  if ($[Kind] === Z) {
    const { anyOf: Q, oneOf: Y, allOf: K, not: B, properties: U, items: w, ...F } = $, G = W.to();
    let z;
    const D = (M) => {
      if (U && M.type === "object") {
        const I = {};
        for (let [O, H] of Object.entries(U))
          I[O] = m(H, W, false);
        return { ...F, ...M, properties: I };
      }
      if (w && M.type === "array")
        return { ...F, ...M, items: m(w, W, false) };
      const N = { ...F, ...M };
      if (delete N.required, U && M.type === "string" && M.format === "ObjectString" && M.default === "{}")
        z = V.ObjectString(U, F), N.default = JSON.stringify(exports_value2.Create(V.Object(U))), N.properties = U;
      if (w && M.type === "string" && M.format === "ArrayString" && M.default === "[]")
        z = V.ArrayString(w, F), N.default = JSON.stringify(exports_value2.Create(V.Array(w))), N.items = w;
      return N;
    };
    if (J) {
      if (U) {
        const M = {};
        for (let [N, I] of Object.entries(U))
          M[N] = m(I, W, false);
        return { ...F, properties: M };
      } else if (w?.map)
        return { ...F, items: w.map((M) => m(M, W, false)) };
      return F;
    }
    if (G.anyOf)
      for (let M = 0;M < G.anyOf.length; M++)
        G.anyOf[M] = D(G.anyOf[M]);
    else if (G.oneOf)
      for (let M = 0;M < G.oneOf.length; M++)
        G.oneOf[M] = D(G.oneOf[M]);
    else if (G.allOf)
      for (let M = 0;M < G.allOf.length; M++)
        G.allOf[M] = D(G.allOf[M]);
    else if (G.not)
      for (let M = 0;M < G.not.length; M++)
        G.not[M] = D(G.not[M]);
    if (z)
      G[TransformKind] = z[TransformKind];
    if (G.anyOf || G.oneOf || G.allOf || G.not)
      return G;
    if (U) {
      const M = {};
      for (let [N, I] of Object.entries(U))
        M[N] = m(I, W, false);
      return { ...F, ...G, properties: M };
    } else if (w?.map)
      return { ...F, ...G, items: w.map((M) => m(M, W, false)) };
    return { ...F, ...G };
  }
  const j = $?.properties;
  if (j)
    for (let [Q, Y] of Object.entries(j))
      switch (Y[Kind]) {
        case Z:
          const { anyOf: K, oneOf: B, allOf: U, not: w, type: F, ...G } = Y, z = W.to();
          if (z.anyOf)
            for (let D = 0;D < z.anyOf.length; D++)
              z.anyOf[D] = { ...G, ...z.anyOf[D] };
          else if (z.oneOf)
            for (let D = 0;D < z.oneOf.length; D++)
              z.oneOf[D] = { ...G, ...z.oneOf[D] };
          else if (z.allOf)
            for (let D = 0;D < z.allOf.length; D++)
              z.allOf[D] = { ...G, ...z.allOf[D] };
          else if (z.not)
            for (let D = 0;D < z.not.length; D++)
              z.not[D] = { ...G, ...z.not[D] };
          j[Q] = { ...G, ...m(G, W, false) };
          break;
        case "Object":
        case "Union":
          j[Q] = m(Y, W, false);
          break;
        default:
          if (Y.items)
            for (let D = 0;D < Y.items.length; D++)
              Y.items[D] = m(Y.items[D], W, false);
          else if (Y.anyOf || Y.oneOf || Y.allOf || Y.not)
            j[Q] = m(Y, W, false);
          break;
      }
  return $;
};
var d = ($, { models: W = {}, dynamic: X = false, normalize: Z = false, additionalProperties: J = false, coerce: j = false, additionalCoerce: Q = [] } = {}) => {
  if (!$)
    return;
  if (typeof $ === "string" && !($ in W))
    return;
  let Y = typeof $ === "string" ? W[$] : $;
  if (j)
    Y = B2(Y, [{ from: V.Number(), to: () => V.Numeric(), untilObjectFound: true }, { from: V.Boolean(), to: () => V.BooleanString(), untilObjectFound: true }, ...Array.isArray(Q) ? Q : [Q]]);
  if (Y.type === "object" && "additionalProperties" in Y === false)
    Y.additionalProperties = J;
  const K = (U) => exports_value2.Clean(Y, U);
  if (X) {
    const U = { schema: Y, references: "", checkFunc: () => {
    }, code: "", Check: (w) => exports_value2.Check(Y, w), Errors: (w) => exports_value2.Errors(Y, w), Code: () => "", Clean: K, Decode: (w) => exports_value2.Decode(Y, w), Encode: (w) => exports_value2.Encode(Y, w) };
    if (Z && Y.additionalProperties === false)
      U.Clean = K;
    if (Y.config) {
      if (U.config = Y.config, U?.schema?.config)
        delete U.schema.config;
    }
    return U.parse = (w) => {
      try {
        return U.Decode(w);
      } catch (F) {
        throw [...U.Errors(w)].map(o);
      }
    }, U.safeParse = (w) => {
      try {
        return { success: true, data: U.Decode(w), error: null };
      } catch (F) {
        const G = [...B.Errors(w)].map(o);
        return { success: false, data: null, error: G[0]?.summary, errors: G };
      }
    }, U;
  }
  const B = TypeCompiler.Compile(Y, Object.values(W));
  if (B.Clean = K, Y.config) {
    if (B.config = Y.config, B?.schema?.config)
      delete B.schema.config;
  }
  return B.parse = (U) => {
    try {
      return B.Decode(U);
    } catch (w) {
      throw [...B.Errors(U)].map(o);
    }
  }, B.safeParse = (U) => {
    try {
      return { success: true, data: B.Decode(U), error: null };
    } catch (w) {
      const F = [...B.Errors(U)].map(o);
      return { success: false, data: null, error: F[0]?.summary, errors: F };
    }
  }, B;
};
var W1 = ($, { models: W = {}, dynamic: X = false, normalize: Z = false, additionalProperties: J = false }) => {
  if (!$)
    return;
  if (typeof $ === "string" && !($ in W))
    return;
  const j = typeof $ === "string" ? W[$] : $, Q = (K, B) => {
    const U = (F) => {
      if (!F || typeof F !== "object")
        return exports_value2.Clean(K, F);
      if (Array.isArray(F))
        F = exports_value2.Clean(K, F);
      else
        F = exports_value2.Clean(K, F);
      return F;
    };
    if (X)
      return { schema: K, references: "", checkFunc: () => {
      }, code: "", Check: (F) => exports_value2.Check(K, F), Errors: (F) => exports_value2.Errors(K, F), Code: () => "", Decode: (F) => exports_value2.Decode(K, F), Encode: (F) => exports_value2.Encode(K, F) };
    const w = TypeCompiler.Compile(K, B);
    if (Z && K.additionalProperties === false)
      w.Clean = U;
    return w;
  };
  if (Kind in j) {
    if ("additionalProperties" in j === false)
      j.additionalProperties = J;
    return { 200: Q(j, Object.values(W)) };
  }
  const Y = {};
  return Object.keys(j).forEach((K) => {
    const B = j[+K];
    if (typeof B === "string") {
      if (B in W) {
        const U = W[B];
        U.type === "object" && "additionalProperties" in U, Y[+K] = Kind in U ? Q(U, Object.values(W)) : U;
      }
      return;
    }
    if (B.type === "object" && "additionalProperties" in B === false)
      B.additionalProperties = J;
    Y[+K] = Kind in B ? Q(B, Object.values(W)) : B;
  }), Y;
};
var D3 = typeof Bun !== "undefined";
var N3 = D3 && typeof Bun.hash === "function";
var P0 = ($) => {
  if (N3)
    return Bun.hash($);
  let W = 9;
  for (let X = 0;X < $.length; )
    W = Math.imul(W ^ $.charCodeAt(X++), 387420489);
  return W = W ^ W >>> 9;
};
var O1;
var D0 = () => {
  if (!O1)
    O1 = [{ from: V.Object({}), to: () => V.ObjectString({}), excludeRoot: true }, { from: V.Array(V.Any()), to: () => V.ArrayString(V.Any()) }];
  return O1;
};
var X1 = ({ validator: $, defaultConfig: W = {}, config: X, dynamic: Z, models: J }) => {
  let j = d($, { dynamic: Z, models: J, additionalProperties: true, coerce: true, additionalCoerce: D0() });
  if (n(W))
    if (j)
      j.config = F3(j.config, X);
    else
      j = d(V.Cookie({}), { dynamic: Z, models: J, additionalProperties: true }), j.config = W;
  return j;
};
var J0 = ($, W) => {
  if (!W)
    return;
  if (!Array.isArray(W)) {
    const Z = W;
    if ($ && !Z.checksum)
      Z.checksum = $;
    if (Z.scope === "scoped")
      Z.scope = "local";
    return Z;
  }
  const X = [...W];
  for (let Z of X) {
    if ($ && !Z.checksum)
      Z.checksum = $;
    if (Z.scope === "scoped")
      Z.scope = "local";
  }
  return X;
};
var V1 = ($, W, X) => {
  return { start: x($.start, J0(X, W?.start)), request: x($.request, J0(X, W?.request)), parse: x($.parse, J0(X, W?.parse)), transform: x($.transform, J0(X, W?.transform)), beforeHandle: x($.beforeHandle, J0(X, W?.beforeHandle)), afterHandle: x($.afterHandle, J0(X, W?.afterHandle)), mapResponse: x($.mapResponse, J0(X, W?.mapResponse)), afterResponse: x($.afterResponse, J0(X, W?.afterResponse)), trace: x($.trace, J0(X, W?.trace)), error: x($.error, J0(X, W?.error)), stop: x($.stop, J0(X, W?.stop)) };
};
var K2 = ($, W, { skipIfHasType: X = false } = {}) => {
  if (!$)
    return $;
  if (!Array.isArray($)) {
    if (X)
      $.scope ??= W;
    else
      $.scope = W;
    return $;
  }
  for (let Z of $)
    if (X)
      Z.scope ??= W;
    else
      Z.scope = W;
  return $;
};
var z0 = ($) => {
  if (!$)
    return $;
  if (!Array.isArray($))
    switch ($.scope) {
      case "global":
      case "scoped":
        return { ...$ };
      default:
        return { fn: $ };
    }
  const W = [];
  for (let X of $)
    switch (X.scope) {
      case "global":
      case "scoped":
        W.push({ ...X });
        break;
    }
  return W;
};
var C1 = ($) => {
  return { ...$, type: $?.type, detail: $?.detail, parse: z0($?.parse), transform: z0($?.transform), beforeHandle: z0($?.beforeHandle), afterHandle: z0($?.afterHandle), mapResponse: z0($?.mapResponse), afterResponse: z0($?.afterResponse), error: z0($?.error), trace: z0($?.trace) };
};
var _0 = { Continue: 100, "Switching Protocols": 101, Processing: 102, "Early Hints": 103, OK: 200, Created: 201, Accepted: 202, "Non-Authoritative Information": 203, "No Content": 204, "Reset Content": 205, "Partial Content": 206, "Multi-Status": 207, "Already Reported": 208, "Multiple Choices": 300, "Moved Permanently": 301, Found: 302, "See Other": 303, "Not Modified": 304, "Temporary Redirect": 307, "Permanent Redirect": 308, "Bad Request": 400, Unauthorized: 401, "Payment Required": 402, Forbidden: 403, "Not Found": 404, "Method Not Allowed": 405, "Not Acceptable": 406, "Proxy Authentication Required": 407, "Request Timeout": 408, Conflict: 409, Gone: 410, "Length Required": 411, "Precondition Failed": 412, "Payload Too Large": 413, "URI Too Long": 414, "Unsupported Media Type": 415, "Range Not Satisfiable": 416, "Expectation Failed": 417, "I'm a teapot": 418, "Misdirected Request": 421, "Unprocessable Content": 422, Locked: 423, "Failed Dependency": 424, "Too Early": 425, "Upgrade Required": 426, "Precondition Required": 428, "Too Many Requests": 429, "Request Header Fields Too Large": 431, "Unavailable For Legal Reasons": 451, "Internal Server Error": 500, "Not Implemented": 501, "Bad Gateway": 502, "Service Unavailable": 503, "Gateway Timeout": 504, "HTTP Version Not Supported": 505, "Variant Also Negotiates": 506, "Insufficient Storage": 507, "Loop Detected": 508, "Not Extended": 510, "Network Authentication Required": 511 };
var Z1 = Object.fromEntries(Object.entries(_0).map(([$, W]) => [W, $]));
var Q2 = new TextEncoder;
var g0 = async ($, W) => {
  if (typeof $ !== "string")
    throw new TypeError("Cookie value must be provided as a string.");
  if (W === null)
    throw new TypeError("Secret key must be provided.");
  const X = await crypto.subtle.importKey("raw", Q2.encode(W), { name: "HMAC", hash: "SHA-256" }, false, ["sign"]), Z = await crypto.subtle.sign("HMAC", X, Q2.encode($));
  return $ + "." + P3(Buffer.from(Z).toString("base64"));
};
var I1 = async ($, W) => {
  if (typeof $ !== "string")
    throw new TypeError("Signed cookie string must be provided.");
  if (W === null)
    throw new TypeError("Secret key must be provided.");
  const X = $.slice(0, $.lastIndexOf("."));
  return await g0(X, W) === $ ? X : false;
};
var U2 = ($, W) => {
  if (!$ || typeof $ !== "object" || !W)
    return;
  for (let [X, Z] of Object.entries(W)) {
    if (X in z3 || !(X in $))
      continue;
    const J = $[X];
    if (typeof J === "function")
      J(Z), delete W[X];
  }
};
var w2 = ({ globalHook: $, localHook: W }) => (X) => (Z, J) => {
  if (typeof Z === "function")
    Z = { fn: Z };
  if ("fn" in Z || Array.isArray(Z)) {
    if (!W[X])
      W[X] = [];
    if (typeof W[X] === "function")
      W[X] = [W[X]];
    if (Array.isArray(Z))
      W[X] = W[X].concat(Z);
    else
      W[X].push(Z);
    return;
  }
  const { insert: j = "after", stack: Q = "local" } = Z;
  if (typeof J === "function")
    J = { fn: J };
  if (Q === "global")
    if (!Array.isArray(J))
      if (j === "before")
        $[X].unshift(J);
      else
        $[X].push(J);
    else if (j === "before")
      $[X] = J.concat($[X]);
    else
      $[X] = $[X].concat(J);
  else {
    if (!W[X])
      W[X] = [];
    if (typeof W[X] === "function")
      W[X] = [W[X]];
    if (!Array.isArray(J))
      if (j === "before")
        W[X].unshift(J);
      else
        W[X].push(J);
    else if (j === "before")
      W[X] = J.concat(W[X]);
    else
      W[X] = W[X].concat(J);
  }
};
var I3 = ($) => {
  if (typeof $ === "number")
    return $;
  if ($.length < 16) {
    if ($.trim().length === 0)
      return null;
    const W = Number($);
    if (Number.isNaN(W))
      return null;
    return W;
  }
  if ($.length === 16) {
    if ($.trim().length === 0)
      return null;
    const W = Number($);
    if (Number.isNaN(W) || W.toString() !== $)
      return null;
    return W;
  }
  return null;
};
var J1 = ($) => I3($) !== null;

class S1 {
  $;
  root = null;
  promises = [];
  constructor($ = console.error) {
    this.onError = $;
  }
  get size() {
    return this.promises.length;
  }
  add($) {
    return this.promises.push($), this.root ||= this.drain(), $;
  }
  async drain() {
    while (this.promises.length > 0) {
      try {
        await this.promises[0];
      } catch ($) {
        this.onError($);
      }
      this.promises.shift();
    }
    this.root = null;
  }
  then($, W) {
    return (this.root ?? Promise.resolve()).then($, W);
  }
}
var t = ($) => {
  if (!$)
    return $;
  if (!Array.isArray($)) {
    if (typeof $ === "function")
      return { fn: $ };
    else if ("fn" in $)
      return $;
  }
  const W = [];
  for (let X of $)
    if (typeof X === "function")
      W.push({ fn: X });
    else if ("fn" in X)
      W.push(X);
  return W;
};
var _2 = ($) => {
  return { ...$, start: t($?.start), request: t($?.request), parse: t($?.parse), transform: t($?.transform), beforeHandle: t($?.beforeHandle), afterHandle: t($?.afterHandle), mapResponse: t($?.mapResponse), afterResponse: t($?.afterResponse), trace: t($?.trace), error: t($?.error), stop: t($?.stop) };
};
var L1 = ($) => {
  return { ...$, start: $.start?.map((W) => W.fn), request: $.request?.map((W) => W.fn), parse: $.parse?.map((W) => W.fn), transform: $.transform?.map((W) => W.fn), beforeHandle: $.beforeHandle?.map((W) => W.fn), afterHandle: $.afterHandle?.map((W) => W.fn), afterResponse: $.afterResponse?.map((W) => W.fn), mapResponse: $.mapResponse?.map((W) => W.fn), trace: $.trace?.map((W) => W.fn), error: $.error?.map((W) => W.fn), stop: $.stop?.map((W) => W.fn) };
};
var d0 = ($) => ({ body: $.body, cookie: $.cookie, headers: $.headers, query: $.query, set: $.set, server: $.server });
var c0 = ($, W = 302) => Response.redirect($, W);
var A3 = Symbol("ElysiaFormData");
var I0 = Symbol("ElysiaRequestId");
var N0 = ($) => {
  const W = new FormData;
  for (let [X, Z] of Object.entries($)) {
    if (Array.isArray(Z)) {
      for (let J of Z) {
        if (Z instanceof File)
          W.append(X, Z, Z.name);
        W.append(X, J);
      }
      continue;
    }
    if (Z instanceof File)
      W.append(X, Z, Z.name);
    W.append(X, Z);
  }
  return W;
};
var j1 = () => crypto.getRandomValues(new Uint32Array(1))[0];
var Q1 = ($) => {
  const W = [];
  for (let X = 0;X < $.length; X++) {
    const Z = $[X];
    if (Z.checksum) {
      if (W.includes(Z.checksum))
        $.splice(X, 1), X--;
      W.push(Z.checksum);
    }
  }
  return $;
};
var u = ($, W = "scoped") => {
  if (W === "scoped") {
    for (let X of $)
      if ("scope" in X && X.scope === "local")
        X.scope = "scoped";
    return;
  }
  for (let X of $)
    if ("scope" in X)
      X.scope = "global";
};
var F2 = typeof Bun !== "undefined" ? Bun.env : typeof process !== "undefined" ? process?.env : undefined;
var A0 = Symbol("ElysiaErrorCode");
var c = Symbol("ElysiaResponse");
var l0 = (F2?.NODE_ENV ?? F2?.ENV) === "production";
var T1 = ($, W) => {
  const X = W ?? ($ in Z1 ? Z1[$] : $);
  return { [c]: _0[$] ?? $, response: X, _type: undefined, error: new Error(X) };
};

class G1 extends Error {
  code = "INTERNAL_SERVER_ERROR";
  status = 500;
  constructor($) {
    super($ ?? "INTERNAL_SERVER_ERROR");
  }
}

class O0 extends Error {
  code = "NOT_FOUND";
  status = 404;
  constructor($) {
    super($ ?? "NOT_FOUND");
  }
}

class Y1 extends Error {
  code = "PARSE";
  status = 400;
  constructor() {
    super("Failed to parse body");
  }
}

class u0 extends Error {
  $;
  code = "INVALID_COOKIE_SIGNATURE";
  status = 400;
  constructor($, W) {
    super(W ?? `"${$}" has invalid cookie signature`);
    this.key = $;
  }
}
var o = ($) => {
  if (!$)
    return { summary: undefined };
  const { message: W, path: X, value: Z, type: J } = $, j = X.slice(1).replaceAll("/", "."), Q = X === "";
  switch (J) {
    case 42:
      return { ...$, summary: Q ? "Value should not be provided" : `Property '${j}' should not be provided` };
    case 45:
      return { ...$, summary: Q ? "Value is missing" : `Property '${j}' is missing` };
    case 50:
      const Y = W.indexOf("'"), K = W.slice(Y + 1, W.indexOf("'", Y + 1));
      return { ...$, summary: Q ? "Value should be an email" : `Property '${j}' should be ${K}` };
    case 54:
      return { ...$, summary: `${W.slice(0, 9)} property '${j}' to be ${W.slice(8)} but found: ${Z}` };
    case 62:
      const B = $.schema.anyOf.map((U) => `'${U?.format ?? U.type}'`).join(", ");
      return { ...$, summary: Q ? `Value should be one of ${B}` : `Property '${j}' should be one of: ${B}` };
    default:
      return { summary: W, ...$ };
  }
};

class T extends Error {
  $;
  W;
  X;
  code = "VALIDATION";
  status = 422;
  constructor($, W, X) {
    if (X && typeof X === "object" && c in X)
      X = X.response;
    const Z = l0 ? undefined : ("Errors" in W) ? W.Errors(X).First() : exports_value2.Errors(W, X).First(), J = Z?.schema.error !== undefined ? typeof Z.schema.error === "function" ? Z.schema.error({ type: $, validator: W, value: X, get errors() {
      return [...W.Errors(X)].map(o);
    } }) : Z.schema.error : undefined, j = Z?.path || "root";
    let Q = "";
    if (J !== undefined)
      Q = typeof J === "object" ? JSON.stringify(J) : J + "";
    else if (l0)
      Q = JSON.stringify({ type: "validation", on: $, summary: o(Z).summary, message: Z?.message, found: X });
    else {
      const Y = W?.schema ?? W, K = "Errors" in W ? [...W.Errors(X)].map(o) : [...exports_value2.Errors(W, X)].map(o);
      let B;
      try {
        B = exports_value2.Create(Y);
      } catch (U) {
        B = { type: "Could not create expected value", message: U?.message, error: U };
      }
      Q = JSON.stringify({ type: "validation", on: $, summary: K[0]?.summary, property: j, message: Z?.message, expected: B, found: X, errors: K }, null, 2);
    }
    super(Q);
    this.type = $;
    this.validator = W;
    this.value = X;
    Object.setPrototypeOf(this, T.prototype);
  }
  get all() {
    return "Errors" in this.validator ? [...this.validator.Errors(this.value)].map(o) : [...exports_value2.Errors(this.validator, this.value)].map(o);
  }
  static simplifyModel($) {
    const W = "schema" in $ ? $.schema : $;
    try {
      return exports_value2.Create(W);
    } catch {
      return W;
    }
  }
  get model() {
    return T.simplifyModel(this.validator);
  }
  toResponse($) {
    return new Response(this.message, { status: 400, headers: { ...$, "content-type": "application/json" } });
  }
}
var q1 = { open($) {
  $.data.open?.($);
}, message($, W) {
  $.data.message?.($, W);
}, drain($) {
  $.data.drain?.($);
}, close($, W, X) {
  $.data.close?.($, W, X);
} };

class f0 {
  $;
  W;
  validator;
  _validator;
  constructor($, W) {
    this.raw = $;
    this.data = W;
    if (this.validator = $.data.validator, $.data.id)
      this.id = $.data.id;
    else
      this.id = j1().toString();
  }
  get id() {
    return this.raw.data.id;
  }
  set id($) {
    this.raw.data.id = $;
  }
  get publish() {
    return ($, W = undefined, X) => {
      if (this.validator?.Check(W) === false)
        throw new T("message", this.validator, W);
      if (typeof W === "object")
        W = JSON.stringify(W);
      return this.raw.publish($, W, X), this;
    };
  }
  get send() {
    return ($) => {
      if (this.validator?.Check($) === false)
        throw new T("message", this.validator, $);
      if (Buffer.isBuffer($))
        return this.raw.send($), this;
      if (typeof $ === "object")
        $ = JSON.stringify($);
      return this.raw.send($), this;
    };
  }
  get subscribe() {
    return ($) => {
      return this.raw.subscribe($), this;
    };
  }
  get unsubscribe() {
    return ($) => {
      return this.raw.unsubscribe($), this;
    };
  }
  get cork() {
    return ($) => {
      return this.raw.cork($), this;
    };
  }
  get close() {
    return () => {
      return this.raw.close(), this;
    };
  }
  get terminate() {
    return this.raw.terminate.bind(this.raw);
  }
  get isSubscribed() {
    return this.raw.isSubscribed.bind(this.raw);
  }
  get remoteAddress() {
    return this.raw.remoteAddress;
  }
}
var E1 = "1.1.12";
var V0 = w1(e0(), 1);
var y0 = /\+/g;
var i0 = ($) => {
  const W = {};
  if (typeof $ !== "string")
    return W;
  const X = $.length;
  let Z = "", J = "", j = -1, Q = -1, Y = false, K = false, B = false, U = false, w = false, F = 0;
  for (let G = 0;G < X + 1; G++) {
    if (G !== X)
      F = $.charCodeAt(G);
    else
      F = 38;
    switch (F) {
      case 38: {
        if (w = Q > j, !w)
          Q = G;
        if (Z = $.slice(j + 1, Q), w || Z.length > 0) {
          if (B)
            Z = Z.replace(y0, " ");
          if (Y)
            Z = V0.default(Z) || Z;
          if (w) {
            if (J = $.slice(Q + 1, G), U)
              J = J.replace(y0, " ");
            if (K)
              J = V0.default(J) || J;
          }
          const z = W[Z];
          if (z === undefined)
            W[Z] = J;
          else if (z.pop)
            z.push(J);
          else
            W[Z] = [z, J];
        }
        J = "", j = G, Q = G, Y = false, K = false, B = false, U = false;
        break;
      }
      case 61:
        if (Q <= j)
          Q = G;
        else
          K = true;
        break;
      case 43:
        if (Q > j)
          U = true;
        else
          B = true;
        break;
      case 37:
        if (Q > j)
          K = true;
        else
          Y = true;
        break;
    }
  }
  return W;
};
var z2 = w1(e0(), 1);
var n0 = Symbol("ElysiaTrace");
var F0 = () => {
  const { promise: $, resolve: W } = Promise.withResolvers(), { promise: X, resolve: Z } = Promise.withResolvers(), { promise: J, resolve: j } = Promise.withResolvers(), Q = [], Y = [];
  return [(K) => {
    if (K)
      Q.push(K);
    return $;
  }, (K) => {
    const B = [], U = [];
    let w = null;
    for (let G = 0;G < (K.total ?? 0); G++) {
      const { promise: z, resolve: D } = Promise.withResolvers(), { promise: M, resolve: N } = Promise.withResolvers(), { promise: I, resolve: O } = Promise.withResolvers(), H = [], C = [];
      B.push((g) => {
        if (g)
          H.push(g);
        return z;
      }), U.push((g) => {
        const R = { ...g, end: M, error: I, index: G, onStop(E) {
          if (E)
            C.push(E);
          return M;
        } };
        D(R);
        for (let E = 0;E < H.length; E++)
          H[E](R);
        return (E = null) => {
          const k = performance.now();
          if (E)
            w = E;
          const b = { end: k, error: E, get elapsed() {
            return k - g.begin;
          } };
          for (let G0 = 0;G0 < C.length; G0++)
            C[G0](b);
          N(k), O(E);
        };
      });
    }
    const F = { ...K, end: X, error: J, onEvent(G) {
      for (let z = 0;z < B.length; z++)
        B[z](G);
    }, onStop(G) {
      if (G)
        Y.push(G);
      return X;
    } };
    W(F);
    for (let G = 0;G < Q.length; G++)
      Q[G](F);
    return { resolveChild: U, resolve(G = null) {
      const z = performance.now();
      if (!G && w)
        G = w;
      const D = { end: z, error: G, get elapsed() {
        return z - K.begin;
      } };
      for (let M = 0;M < Y.length; M++)
        Y[M](D);
      Z(z), j(G);
    } };
  }];
};
var M2 = ($) => {
  return (W) => {
    const [X, Z] = F0(), [J, j] = F0(), [Q, Y] = F0(), [K, B] = F0(), [U, w] = F0(), [F, G] = F0(), [z, D] = F0(), [M, N] = F0(), [I, O] = F0();
    return $({ id: W[I0], context: W, set: W.set, onRequest: X, onParse: J, onTransform: Q, onBeforeHandle: K, onHandle: U, onAfterHandle: F, onMapResponse: M, onAfterResponse: I, onError: z }), { request: Z, parse: j, transform: Y, beforeHandle: B, handle: w, afterHandle: G, error: D, mapResponse: N, afterResponse: O };
  };
};
var V3 = new Headers().toJSON;
var D2 = { optional: Symbol.for("TypeBox.Optional"), kind: Symbol.for("TypeBox.Kind") };
var s = ($) => {
  if (!$)
    return false;
  const W = $?.schema;
  return !!W && D2.optional in W;
};
var j0 = ($) => {
  if (!$)
    return false;
  const W = $?.schema ?? $;
  if (W.anyOf)
    return W.anyOf.some(j0);
  if (W.someOf)
    return W.someOf.some(j0);
  if (W.allOf)
    return W.allOf.some(j0);
  if (W.not)
    return W.not.some(j0);
  if (W.type === "object") {
    const X = W.properties;
    if ("additionalProperties" in W)
      return W.additionalProperties;
    for (let Z of Object.keys(X)) {
      const J = X[Z];
      if (J.type === "object") {
        if (j0(J))
          return true;
      } else if (J.anyOf) {
        for (let j = 0;j < J.anyOf.length; j++)
          if (j0(J.anyOf[j]))
            return true;
      }
      return J.additionalProperties;
    }
    return false;
  }
  return false;
};
var R1 = ({ context: $ = "c", trace: W, addFn: X }) => {
  if (!W.length)
    return () => {
      return { resolveChild() {
        return () => {
        };
      }, resolve() {
      } };
    };
  for (let Z = 0;Z < W.length; Z++)
    X(`let report${Z}, reportChild${Z}, reportErr${Z}, reportErrChild${Z}; let trace${Z} = ${$}[ELYSIA_TRACE]?.[${Z}] ?? trace[${Z}](${$});\n`);
  return (Z, { name: J, total: j = 0 } = {}) => {
    if (!J)
      J = "anonymous";
    const Q = Z === "error" ? "reportErr" : "report";
    for (let Y = 0;Y < W.length; Y++)
      X(`\n${Q}${Y} = trace${Y}.${Z}({id,event: '${Z}',name: '${J}',begin: performance.now(),total: ${j}})\n`);
    return { resolve() {
      for (let Y = 0;Y < W.length; Y++)
        X(`\n${Q}${Y}.resolve()\n`);
    }, resolveChild(Y) {
      for (let K = 0;K < W.length; K++)
        X(`${Q}Child${K} = ${Q}${K}.resolveChild?.shift()?.({id,event: '${Z}',name: '${Y}',begin: performance.now()})\n`);
      return (K) => {
        for (let B = 0;B < W.length; B++)
          if (K)
            X(`
                             	if (${K} instanceof Error)
                    				${Q}Child${B}?.(${K})
                           		else
                             		${Q}Child${B}?.()\n`);
          else
            X(`${Q}Child${B}?.()\n`);
      };
    } };
  };
};
var C3 = ({ injectResponse: $ = "", normalize: W = false, validator: X }) => ({ composeValidation: (Z, J = `c.${Z}`) => `c.set.status = 422; throw new ValidationError('${Z}', validator.${Z}, ${J})`, composeResponseValidation: (Z = "r") => {
  let J = "\n" + $ + "\n";
  J += `if(typeof ${Z} === "object" && ${Z} && ELYSIA_RESPONSE in ${Z}) {
			c.set.status = ${Z}[ELYSIA_RESPONSE]
			${Z} = ${Z}.response
		}

		const isResponse = ${Z} instanceof Response\n\n`, J += "switch(c.set.status) {\n";
  for (let [j, Q] of Object.entries(X.response)) {
    if (J += `\tcase ${j}:
				if (!isResponse) {\n`, W && "Clean" in Q && !j0(Q))
      J += `${Z} = validator.response['${j}'].Clean(${Z})\n`;
    J += `if(validator.response['${j}'].Check(${Z}) === false) {
					c.set.status = 422

					throw new ValidationError('response', validator.response['${j}'], ${Z})
				}

				c.set.status = ${j}
			}

			break\n\n`;
  }
  return J += "\n}\n", J;
} });
var d8 = Symbol.for("TypeBox.Kind");
var C0 = ($, W) => {
  if (!W)
    return;
  if (W.type === "object") {
    const X = W.properties;
    if (!X)
      return false;
    for (let Z of Object.keys(X)) {
      const J = X[Z];
      if ($ in J)
        return true;
      if (J.type === "object") {
        if (C0($, J))
          return true;
      } else if (J.anyOf) {
        for (let j = 0;j < J.anyOf.length; j++)
          if (C0($, J.anyOf[j]))
            return true;
      }
    }
    return false;
  }
  return $ in W;
};
var H1 = Symbol.for("TypeBox.Transform");
var S0 = ($) => {
  if (!$)
    return;
  if ($.type === "object" && $.properties) {
    const W = $.properties;
    for (let X of Object.keys(W)) {
      const Z = W[X];
      if (Z.type === "object") {
        if (S0(Z))
          return true;
      } else if (Z.anyOf) {
        for (let j = 0;j < Z.anyOf.length; j++)
          if (S0(Z.anyOf[j]))
            return true;
      }
      if (H1 in Z)
        return true;
    }
    return false;
  }
  return H1 in $ || $.properties && H1 in $.properties;
};
var S3 = /(?:return|=>) \S+\(/g;
var L0 = ($) => {
  return ($?.fn ?? $).constructor.name === "AsyncFunction";
};
var y = ($) => {
  const W = $?.fn ?? $;
  if (W.constructor.name === "AsyncFunction")
    return true;
  const X = W.toString();
  if (X.includes("=> response.clone("))
    return false;
  if (X.includes("await"))
    return true;
  if (X.includes("async"))
    return true;
  return !!X.match(S3);
};
var K1 = ($) => {
  const W = $?.fn ?? $;
  return W.constructor.name === "AsyncGeneratorFunction" || W.constructor.name === "GeneratorFunction";
};
var N2 = ({ app: $, path: W, method: X, localHook: Z, hooks: J, validator: j, handler: Q, allowMeta: Y = false, inference: K }) => {
  const B = typeof Q === "function";
  if (!B) {
    if (Q = f(Q, { headers: $.setHeaders ?? {} }), J.parse.length === 0 && J.transform.length === 0 && J.beforeHandle.length === 0 && J.afterHandle.length === 0)
      return Function("a", "return function () { return a.clone() }")(Q);
  }
  const U = B ? "handler(c)" : "handler", w = J.afterResponse.length > 0, F = J.trace.length > 0;
  let G = "";
  if (K = r0(Object.assign(Z, { handler: Q }), K), K.server)
    G += `\nObject.defineProperty(c, 'server', {
			get: function() { return getServer() }
		})\n`;
  if (K.body)
    G += "let isParsing = false\n";
  j.createBody?.(), j.createQuery?.(), j.createHeaders?.(), j.createParams?.(), j.createCookie?.(), j.createResponse?.();
  const z = K.query || !!j.query, D = X !== "$INTERNALWS" && X !== "GET" && X !== "HEAD" && (K.body || !!j.body || J.parse.length), M = $.setHeaders, N = M && !!Object.keys(M).length, I = K.headers || j.headers, O = K.cookie || !!j.cookie, H = O ? X1({ validator: j.cookie, defaultConfig: $.config.cookie, dynamic: !!$.config.aot, config: j.cookie?.config ?? {}, models: $.definitions.type }) : undefined, C = H?.config;
  let g = "";
  if (C?.sign) {
    if (!C.secrets)
      throw new Error(`t.Cookie required secret which is not set in (${X}) ${W}.`);
    const P = !C.secrets ? undefined : typeof C.secrets === "string" ? C.secrets : C.secrets[0];
    if (g += `const _setCookie = c.set.cookie
		if(_setCookie) {`, C.sign === true)
      g += `for(const [key, cookie] of Object.entries(_setCookie)) {
				c.set.cookie[key].value = await signCookie(cookie.value, '${P}')
			}`;
    else
      for (let _ of C.sign)
        g += `if(_setCookie['${_}']?.value) { c.set.cookie['${_}'].value = await signCookie(_setCookie['${_}'].value, '${P}') }\n`;
    g += "}\n";
  }
  const R = $.config.normalize, { composeValidation: E, composeResponseValidation: k } = C3({ normalize: R, validator: j });
  if (I)
    G += V3 ? "c.headers = c.request.headers.toJSON()\n" : `c.headers = {}
                for (const [key, value] of c.request.headers.entries())
					c.headers[key] = value
				`;
  if (O) {
    const P = (A, S) => {
      const L = C?.[A] ?? S;
      if (!L)
        return typeof S === "string" ? `${A}: "${S}",` : `${A}: ${S},`;
      if (typeof L === "string")
        return `${A}: '${L}',`;
      if (L instanceof Date)
        return `${A}: new Date(${L.getTime()}),`;
      return `${A}: ${L},`;
    }, _ = C ? `{
			secrets: ${C.secrets !== undefined ? typeof C.secrets === "string" ? `'${C.secrets}'` : "[" + C.secrets.reduce((A, S) => A + `'${S}',`, "") + "]" : "undefined"},
			sign: ${C.sign === true ? true : C.sign !== undefined ? "[" + C.sign.reduce((A, S) => A + `'${S}',`, "") + "]" : "undefined"},
			${P("domain")}
			${P("expires")}
			${P("httpOnly")}
			${P("maxAge")}
			${P("path", "/")}
			${P("priority")}
			${P("sameSite")}
			${P("secure")}
		}` : "undefined";
    if (I)
      G += `\nc.cookie = await parseCookie(c.set, c.headers.cookie, ${_})\n`;
    else
      G += `\nc.cookie = await parseCookie(c.set, c.request.headers.get('cookie'), ${_})\n`;
  }
  if (z) {
    const P = [];
    if (j.query && j.query.schema.type === "object") {
      const _ = j.query.schema.properties;
      if (!j0(j.query))
        for (let [A, S] of Object.entries(_)) {
          let L = S;
          if (L && D2.optional in L && L.type === "array" && L.items)
            L = L.items;
          const { type: a, anyOf: q } = L, U0 = a === "array" || q?.some((h) => h.type === "string" && h.format === "ArrayString");
          P.push({ key: A, isArray: U0, isNestedObjectArray: U0 && L.items?.type === "object" || !!L.items?.anyOf?.some((h) => h.type === "object" || h.type === "array"), isObject: a === "object" || q?.some((h) => h.type === "string" && h.format === "ArrayString"), anyOf: !!q });
        }
    }
    if (!P.length)
      G += `if(c.qi === -1) {
				c.query = {}
			} else {
				c.query = parseQueryFromURL(c.url.slice(c.qi + 1))
			}`;
    else
      G += `if(c.qi !== -1) {
				let url = '&' + c.url.slice(c.qi + 1)

				${P.map(({ key: _, isArray: A, isObject: S, isNestedObjectArray: L, anyOf: a }, q) => {
        const U0 = `${q === 0 ? "let" : ""} memory = url.indexOf('&${_}=')
							let a${q}\n`;
        if (A)
          return U0 + (L ? `while (memory !== -1) {
											const start = memory + ${_.length + 2}
											memory = url.indexOf('&', start)

											if(a${q} === undefined)
												a${q} = ''
											else
												a${q} += ','

											let temp

											if(memory === -1) temp = decodeURIComponent(url.slice(start))
											else temp = decodeURIComponent(url.slice(start, memory))

											const charCode = temp.charCodeAt(0)
											if(charCode !== 91 && charCode !== 123)
												temp = '"' + temp + '"'

											a${q} += temp

											if(memory === -1) break

											memory = url.indexOf('&${_}=', memory)
											if(memory === -1) break
										}

										try {
										    if(a${q}.charCodeAt(0) === 91)
												a${q} = JSON.parse(a${q})
											else
												a${q} = JSON.parse('[' + a${q} + ']')
										} catch {}\n` : `while (memory !== -1) {
											const start = memory + ${_.length + 2}
											memory = url.indexOf('&', start)

											if(a${q} === undefined)
												a${q} = []

											if(memory === -1) {
												a${q}.push(decodeURIComponent(url.slice(start)))
												break
											}
											else a${q}.push(decodeURIComponent(url.slice(start, memory)))

											memory = url.indexOf('&${_}=', memory)
											if(memory === -1) break
										}\n`);
        if (S)
          return U0 + `if (memory !== -1) {
										const start = memory + ${_.length + 2}
										memory = url.indexOf('&', start)

										if(memory === -1) a${q} = decodeURIComponent(url.slice(start))
										else a${q} = decodeURIComponent(url.slice(start, memory))

										if (a${q} !== undefined) {
											try {
												a${q} = JSON.parse(a${q})
											} catch {}
										}
									}`;
        return U0 + `if (memory !== -1) {
										const start = memory + ${_.length + 2}
										memory = url.indexOf('&', start)

										if(memory === -1) a${q} = decodeURIComponent(url.slice(start))
										else {
											a${q} = decodeURIComponent(url.slice(start, memory))

											${a ? `
											let deepMemory = url.indexOf('&${_}=', memory)

											if(deepMemory !== -1) {
												a${q} = [a${q}]
												let first = true

												while(true) {
													const start = deepMemory + ${_.length + 2}
													if(first)
														first = false
													else
														deepMemory = url.indexOf('&', start)

													let value
													if(deepMemory === -1) value = decodeURIComponent(url.slice(start))
													else value = decodeURIComponent(url.slice(start, deepMemory))

													const vStart = value.charCodeAt(0)
													const vEnd = value.charCodeAt(value.length - 1)

													if((vStart === 91 && vEnd === 93) || (vStart === 123 && vEnd === 125))
														try {
															a${q}.push(JSON.parse(value))
														} catch {
														 	a${q}.push(value)
														}

													if(deepMemory === -1) break
												}
											}
												` : ""}
										}
									}`;
      }).join("\n")}

				c.query = {
					${P.map(({ key: _ }, A) => `'${_}': a${A}`).join(", ")}
				}
			} else {
				c.query = {}
			}`;
  }
  if (F)
    G += "\nconst id = c[ELYSIA_REQUEST_ID]\n";
  const b = R1({ trace: J.trace, addFn: (P) => {
    G += P;
  } });
  G += "\ntry {\n";
  const G0 = typeof Q === "function" && y(Q), e = F || J.afterResponse.length > 0 ? "c.response = " : "", k0 = O || D || G0 || J.parse.length > 0 || J.afterHandle.some(y) || J.beforeHandle.some(y) || J.transform.some(y) || J.mapResponse.some(y), I2 = (typeof Q === "function" ? K1(Q) : false) || J.beforeHandle.some(K1) || J.afterHandle.some(K1) || J.transform.some(K1), s0 = K.cookie || K.set || I || F || j.response || B && N || I2, r = ", c.request";
  G += `c.route = \`${W}\`\n`;
  const A2 = b("parse", { total: J.parse.length });
  if (D) {
    const P = J.parse.length || K.body || j.body;
    if (G += "isParsing = true\n", J.type && !J.parse.length)
      switch (J.type) {
        case "json":
        case "application/json":
          if (s(j.body))
            G += "try { c.body = await c.request.json() } catch {}";
          else
            G += "c.body = await c.request.json()";
          break;
        case "text":
        case "text/plain":
          G += "c.body = await c.request.text()\n";
          break;
        case "urlencoded":
        case "application/x-www-form-urlencoded":
          G += "c.body = parseQuery(await c.request.text())\n";
          break;
        case "arrayBuffer":
        case "application/octet-stream":
          G += "c.body = await c.request.arrayBuffer()\n";
          break;
        case "formdata":
        case "multipart/form-data":
          if (G += "c.body = {}\n", s(j.body))
            G += "let form; try { form = await c.request.formData() } catch {}";
          else
            G += "const form = await c.request.formData()";
          G += `\nif(form)
						for (const key of form.keys()) {
							if (c.body[key])
								continue

							const value = form.getAll(key)
							if (value.length === 1)
								c.body[key] = value[0]
							else c.body[key] = value
						} else form = {}\n`;
          break;
      }
    else if (P) {
      if (G += "\n", G += I ? "let contentType = c.headers['content-type']" : "let contentType = c.request.headers.get('content-type')", G += `
				if (contentType) {
					const index = contentType.indexOf(';')
					if (index !== -1) contentType = contentType.substring(0, index)\n
					c.contentType = contentType\n`, J.parse.length) {
        G += "let used = false\n";
        const _ = b("parse", { total: J.parse.length });
        for (let A = 0;A < J.parse.length; A++) {
          const S = _.resolveChild(J.parse[A].fn.name), L = `bo${A}`;
          if (A !== 0)
            G += "if(!used) {\n";
          if (G += `let ${L} = parse[${A}](c, contentType)\n`, G += `if(${L} instanceof Promise) ${L} = await ${L}\n`, G += `if(${L} !== undefined) { c.body = ${L}; used = true }\n`, S(), A !== 0)
            G += "}";
        }
        _.resolve();
      }
      if (G += "\ndelete c.contentType\n", J.parse.length)
        G += "if (!used) {";
      if (J.type && !Array.isArray(J.type))
        switch (J.type) {
          case "json":
          case "application/json":
            if (s(j.body))
              G += "try { c.body = await c.request.json() } catch {}";
            else
              G += "c.body = await c.request.json()";
            break;
          case "text":
          case "text/plain":
            G += "c.body = await c.request.text()\n";
            break;
          case "urlencoded":
          case "application/x-www-form-urlencoded":
            G += "c.body = parseQuery(await c.request.text())\n";
            break;
          case "arrayBuffer":
          case "application/octet-stream":
            G += "c.body = await c.request.arrayBuffer()\n";
            break;
          case "formdata":
          case "multipart/form-data":
            G += `c.body = {}

							const form = await c.request.formData()
							for (const key of form.keys()) {
								if (c.body[key])
									continue

								const value = form.getAll(key)
								if (value.length === 1)
									c.body[key] = value[0]
								else c.body[key] = value
							}\n`;
            break;
        }
      else
        G += `
					switch (contentType) {
						case 'application/json':
							${s(j.body) ? "try { c.body = await c.request.json() } catch {}" : "c.body = await c.request.json()"}
							break

						case 'text/plain':
							c.body = await c.request.text()
							break

						case 'application/x-www-form-urlencoded':
							c.body = parseQuery(await c.request.text())
							break

						case 'application/octet-stream':
							c.body = await c.request.arrayBuffer();
							break

						case 'multipart/form-data':
							c.body = {}

							const form = await c.request.formData()
							for (const key of form.keys()) {
								if (c.body[key])
									continue

								const value = form.getAll(key)
								if (value.length === 1)
									c.body[key] = value[0]
								else c.body[key] = value
							}

							break
					}`;
      if (J.parse.length)
        G += "}";
      G += "}\n";
    }
    G += "\nisParsing = false\n";
  }
  if (A2.resolve(), J?.transform) {
    const P = b("transform", { total: J.transform.length });
    if (J.transform.length)
      G += "\nlet transformed\n";
    for (let _ = 0;_ < J.transform.length; _++) {
      const A = J.transform[_], S = P.resolveChild(A.fn.name);
      if (G += y(A) ? `transformed = await transform[${_}](c)\n` : `transformed = transform[${_}](c)\n`, A.subType === "mapDerive")
        G += `if(transformed?.[ELYSIA_RESPONSE])
					throw transformed
				else {
					transformed.request = c.request
					transformed.store = c.store
					transformed.qi = c.qi
					transformed.path = c.path
					transformed.url = c.url
					transformed.redirect = c.redirect
					transformed.set = c.set
					transformed.error = c.error

					c = transformed
			}`;
      else
        G += `if(transformed?.[ELYSIA_RESPONSE])
					throw transformed
				else
					Object.assign(c, transformed)\n`;
      S();
    }
    P.resolve();
  }
  if (j) {
    if (G += "\n", j.headers) {
      if (R && "Clean" in j.headers && !j0(j.headers))
        G += "c.headers = validator.headers.Clean(c.headers);\n";
      if (C0("default", j.headers.schema))
        for (let [P, _] of Object.entries(exports_value2.Default(j.headers.schema, {}))) {
          const A = typeof _ === "object" ? JSON.stringify(_) : typeof _ === "string" ? `'${_}'` : _;
          if (A !== undefined)
            G += `c.headers['${P}'] ??= ${A}\n`;
        }
      if (s(j.headers))
        G += "if(isNotEmpty(c.headers)) {";
      if (G += `if(validator.headers.Check(c.headers) === false) {
				${E("headers")}
			}`, S0(j.headers.schema))
        G += "c.headers = validator.headers.Decode(c.headers)\n";
      if (s(j.headers))
        G += "}";
    }
    if (j.params) {
      if (C0("default", j.params.schema))
        for (let [P, _] of Object.entries(exports_value2.Default(j.params.schema, {}))) {
          const A = typeof _ === "object" ? JSON.stringify(_) : typeof _ === "string" ? `'${_}'` : _;
          if (A !== undefined)
            G += `c.params['${P}'] ??= ${A}\n`;
        }
      if (G += `if(validator.params.Check(c.params) === false) {
				${E("params")}
			}`, S0(j.params.schema))
        G += "\nc.params = validator.params.Decode(c.params)\n";
    }
    if (j.query) {
      if (R && "Clean" in j.query && !j0(j.query))
        G += "c.query = validator.query.Clean(c.query);\n";
      if (C0("default", j.query.schema))
        for (let [P, _] of Object.entries(exports_value2.Default(j.query.schema, {}))) {
          const A = typeof _ === "object" ? JSON.stringify(_) : typeof _ === "string" ? `'${_}'` : _;
          if (A !== undefined)
            G += `if(c.query['${P}'] === undefined) c.query['${P}'] = ${A}\n`;
        }
      if (s(j.query))
        G += "if(isNotEmpty(c.query)) {";
      if (G += `if(validator.query.Check(c.query) === false) {
          		${E("query")}
			}`, S0(j.query.schema))
        G += "\nc.query = validator.query.Decode(Object.assign({}, c.query))\n";
      if (s(j.query))
        G += "}";
    }
    if (j.body) {
      if (R && "Clean" in j.body && !j0(j.body))
        G += "c.body = validator.body.Clean(c.body);\n";
      const P = S0(j.body.schema);
      if (P || s(j.body))
        G += '\nconst isNotEmptyObject = c.body && (typeof c.body === "object" && isNotEmpty(c.body))\n';
      if (C0("default", j.body.schema)) {
        const _ = exports_value2.Default(j.body.schema, j.body.schema.type === "object" ? {} : undefined), A = typeof _ === "object" ? JSON.stringify(_) : typeof _ === "string" ? `'${_}'` : _;
        if (G += `if(validator.body.Check(c.body) === false) {
					if (typeof c.body === 'object') {
						c.body = Object.assign(${A}, c.body)
					} else { c.body = ${A} }`, s(j.body))
          G += `
					    if(isNotEmptyObject && validator.body.Check(c.body) === false) {
            				${E("body")}
             			}
                    }`;
        else
          G += `
    				if(validator.body.Check(c.body) === false) {
        				${E("body")}
         			}
                }`;
      } else if (s(j.body))
        G += `if(isNotEmptyObject && validator.body.Check(c.body) === false) {
         			${E("body")}
          		}`;
      else
        G += `if(validator.body.Check(c.body) === false) {
         			${E("body")}
          		}`;
      if (P)
        G += "\nif(isNotEmptyObject) c.body = validator.body.Decode(c.body)\n";
    }
    if (n(H?.schema?.properties ?? H?.schema?.schema ?? {})) {
      if (G += `const cookieValue = {}
    			for(const [key, value] of Object.entries(c.cookie))
    				cookieValue[key] = value.value\n`, C0("default", H.schema))
        for (let [P, _] of Object.entries(exports_value2.Default(H.schema, {})))
          G += `cookieValue['${P}'] = ${typeof _ === "object" ? JSON.stringify(_) : _}\n`;
      if (s(j.cookie))
        G += "if(isNotEmpty(c.cookie)) {";
      if (G += `if(validator.cookie.Check(cookieValue) === false) {
				${E("cookie", "cookieValue")}
			}`, S0(j.cookie.schema))
        G += `\nfor(const [key, value] of Object.entries(validator.cookie.Decode(cookieValue)))
					c.cookie[key].value = value\n`;
      if (s(j.cookie))
        G += "}";
    }
  }
  if (J?.beforeHandle) {
    const P = b("beforeHandle", { total: J.beforeHandle.length });
    let _ = false;
    for (let A = 0;A < J.beforeHandle.length; A++) {
      const S = J.beforeHandle[A], L = P.resolveChild(S.fn.name), a = E0(S);
      if (S.subType === "resolve" || S.subType === "mapResolve") {
        if (!_)
          _ = true, G += "\nlet resolved\n";
        if (G += y(S) ? `resolved = await beforeHandle[${A}](c);\n` : `resolved = beforeHandle[${A}](c);\n`, S.subType === "mapResolve")
          G += `if(resolved[ELYSIA_RESPONSE])
						throw resolved
					else {
						resolved.request = c.request
						resolved.store = c.store
						resolved.qi = c.qi
						resolved.path = c.path
						resolved.url = c.url
						resolved.redirect = c.redirect
						resolved.set = c.set
						resolved.error = c.error

						c = resolved
					}`;
        else
          G += `if(resolved[ELYSIA_RESPONSE])
						throw resolved
					else
						Object.assign(c, resolved)\n`;
      } else if (!a)
        G += y(S) ? `await beforeHandle[${A}](c);\n` : `beforeHandle[${A}](c);\n`, L();
      else {
        if (G += y(S) ? `be = await beforeHandle[${A}](c);\n` : `be = beforeHandle[${A}](c);\n`, L("be"), G += "if(be !== undefined) {\n", P.resolve(), J.afterHandle?.length) {
          b("handle", { name: B ? Q.name : undefined }).resolve();
          const h = b("afterHandle", { total: J.afterHandle.length });
          for (let Y0 = 0;Y0 < J.afterHandle.length; Y0++) {
            const T0 = J.afterHandle[Y0], O2 = E0(T0), V2 = h.resolveChild(T0.fn.name);
            if (G += "c.response = be\n", !O2)
              G += y(T0.fn) ? `await afterHandle[${Y0}](c, be)\n` : `afterHandle[${Y0}](c, be)\n`;
            else
              G += y(T0.fn) ? `af = await afterHandle[${Y0}](c)\n` : `af = afterHandle[${Y0}](c)\n`, G += "if(af !== undefined) { c.response = be = af }\n";
            V2("af");
          }
          h.resolve();
        }
        if (j.response)
          G += k("be");
        const U0 = b("mapResponse", { total: J.mapResponse.length });
        if (J.mapResponse.length) {
          G += "\nc.response = be\n";
          for (let h = 0;h < J.mapResponse.length; h++) {
            const Y0 = J.mapResponse[h], T0 = U0.resolveChild(Y0.fn.name);
            G += `\nif(mr === undefined) {
							mr = ${L0(Y0) ? "await" : ""} onMapResponse[${h}](c)
							if(mr !== undefined) be = c.response = mr
						}\n`, T0();
          }
        }
        U0.resolve(), G += g, G += `return mapEarlyResponse(${e} be, c.set ${r})}\n`;
      }
    }
    P.resolve();
  }
  if (J?.afterHandle.length) {
    const P = b("handle", { name: B ? Q.name : undefined });
    if (J.afterHandle.length)
      G += G0 ? `let r = c.response = await ${U};\n` : `let r = c.response = ${U};\n`;
    else
      G += G0 ? `let r = await ${U};\n` : `let r = ${U};\n`;
    P.resolve();
    const _ = b("afterHandle", { total: J.afterHandle.length });
    for (let S = 0;S < J.afterHandle.length; S++) {
      const L = J.afterHandle[S], a = E0(L), q = _.resolveChild(L.fn.name);
      if (!a)
        G += y(L.fn) ? `await afterHandle[${S}](c)\n` : `afterHandle[${S}](c)\n`, q();
      else if (G += y(L.fn) ? `af = await afterHandle[${S}](c)\n` : `af = afterHandle[${S}](c)\n`, q("af"), j.response)
        G += "if(af !== undefined) {", _.resolve(), G += k("af"), G += "c.response = af }";
      else
        G += "if(af !== undefined) {", _.resolve(), G += "c.response = af}\n";
    }
    if (_.resolve(), G += "r = c.response\n", j.response)
      G += k();
    G += g;
    const A = b("mapResponse", { total: J.mapResponse.length });
    if (J.mapResponse.length)
      for (let S = 0;S < J.mapResponse.length; S++) {
        const L = J.mapResponse[S], a = A.resolveChild(L.fn.name);
        G += `\nmr = ${L0(L) ? "await" : ""} onMapResponse[${S}](c)
				if(mr !== undefined) r = c.response = mr\n`, a();
      }
    if (A.resolve(), s0)
      G += `return mapResponse(${e} r, c.set ${r})\n`;
    else
      G += `return mapCompactResponse(${e} r ${r})\n`;
  } else {
    const P = b("handle", { name: B ? Q.name : undefined });
    if (j.response || J.mapResponse.length) {
      if (G += G0 ? `let r = await ${U};\n` : `let r = ${U};\n`, P.resolve(), j.response)
        G += k();
      b("afterHandle").resolve();
      const _ = b("mapResponse", { total: J.mapResponse.length });
      if (J.mapResponse.length) {
        G += "\nc.response = r\n";
        for (let A = 0;A < J.mapResponse.length; A++) {
          const S = J.mapResponse[A], L = _.resolveChild(S.fn.name);
          G += `\nif(mr === undefined) {
						mr = ${L0(S) ? "await" : ""} onMapResponse[${A}](c)
    					if(mr !== undefined) r = c.response = mr
					}\n`, L();
        }
      }
      if (_.resolve(), G += g, Q instanceof Response)
        G += K.set ? `if(
					isNotEmpty(c.set.headers) ||
					c.set.status !== 200 ||
					c.set.redirect ||
					c.set.cookie
				)
					return mapResponse(${e} ${U}.clone(), c.set ${r})
				else
					return ${U}.clone()` : `return ${U}.clone()`, G += "\n";
      else if (s0)
        G += `return mapResponse(${e} r, c.set ${r})\n`;
      else
        G += `return mapCompactResponse(${e} r ${r})\n`;
    } else if (O || F) {
      G += G0 ? `let r = await ${U};\n` : `let r = ${U};\n`, P.resolve(), b("afterHandle").resolve();
      const _ = b("mapResponse", { total: J.mapResponse.length });
      if (J.mapResponse.length) {
        G += "\nc.response = r\n";
        for (let A = 0;A < J.mapResponse.length; A++) {
          const S = J.mapResponse[A], L = _.resolveChild(S.fn.name);
          G += `\nif(mr === undefined) {
							mr = ${L0(S) ? "await" : ""} onMapResponse[${A}](c)
    						if(mr !== undefined) r = c.response = mr
						}\n`, L();
        }
      }
      if (_.resolve(), G += g, s0)
        G += `return mapResponse(${e} r, c.set ${r})\n`;
      else
        G += `return mapCompactResponse(${e} r ${r})\n`;
    } else {
      P.resolve();
      const _ = G0 ? `await ${U}` : U;
      if (b("afterHandle").resolve(), Q instanceof Response)
        G += K.set ? `if(
					isNotEmpty(c.set.headers) ||
					c.set.status !== 200 ||
					c.set.redirect ||
					c.set.cookie
				)
					return mapResponse(${e} ${U}.clone(), c.set ${r})
				else
					return ${U}.clone()` : `return ${U}.clone()`, G += "\n";
      else if (s0)
        G += `return mapResponse(${e} ${_}, c.set ${r})\n`;
      else
        G += `return mapCompactResponse(${e} ${_} ${r})\n`;
    }
  }
  if (G += "\n} catch(error) {", D)
    G += "\nif(isParsing) error = new ParseError()\n";
  if (!k0)
    G += "\nreturn (async () => {\n";
  if (G += "\nconst set = c.set\nif (!set.status || set.status < 300) set.status = error?.status || 500\n", F)
    for (let P = 0;P < J.trace.length; P++)
      G += `report${P}?.resolve(error);reportChild${P}?.(error);\n`;
  const U1 = b("error", { total: J.error.length });
  if (J.error.length) {
    G += `
				c.error = error
				c.code = error.code ?? error[ERROR_CODE] ?? "UNKNOWN"
				let er
			`;
    for (let P = 0;P < J.error.length; P++) {
      const _ = U1.resolveChild(J.error[P].fn.name);
      if (y(J.error[P]))
        G += `\ner = await handleErrors[${P}](c)\n`;
      else
        G += `\ner = handleErrors[${P}](c)\nif (er instanceof Promise) er = await er\n`;
      _();
      const A = b("mapResponse", { total: J.mapResponse.length });
      if (J.mapResponse.length)
        for (let S = 0;S < J.mapResponse.length; S++) {
          const L = J.mapResponse[S], a = A.resolveChild(L.fn.name);
          G += `\nc.response = er\n
							er = ${L0(L) ? "await" : ""} onMapResponse[${S}](c)
							if(er instanceof Promise) er = await er\n`, a();
        }
      if (A.resolve(), G += `er = mapEarlyResponse(er, set ${r})\n`, G += "if (er) {", F) {
        for (let S = 0;S < J.trace.length; S++)
          G += `\nreport${S}.resolve()\n`;
        U1.resolve();
      }
      G += "return er\n}\n";
    }
  }
  if (U1.resolve(), G += "return handleError(c, error, true)\n", !k0)
    G += "})()";
  if (G += "}", w || F) {
    if (G += " finally { ", !k0)
      G += ";(async () => {";
    const P = b("afterResponse", { total: J.afterResponse.length });
    if (w)
      for (let _ = 0;_ < J.afterResponse.length; _++) {
        const A = P.resolveChild(J.afterResponse[_].fn.name);
        G += `\nawait afterResponse[${_}](c);\n`, A();
      }
    if (P.resolve(), !k0)
      G += "})();";
    G += "}";
  }
  G = `const {
		handler,
		handleError,
		hooks: {
			transform,
			resolve,
			beforeHandle,
			afterHandle,
			mapResponse: onMapResponse,
			parse,
			error: handleErrors,
			afterResponse,
			trace: _trace
		},
		validator,
		utils: {
			mapResponse,
			mapCompactResponse,
			mapEarlyResponse,
			parseQuery,
			parseQueryFromURL,
			isNotEmpty
		},
		error: {
			NotFoundError,
			ValidationError,
			InternalServerError,
			ParseError
		},
		schema,
		definitions,
		ERROR_CODE,
		parseCookie,
		signCookie,
		decodeURIComponent,
		ELYSIA_RESPONSE,
		ELYSIA_TRACE,
		ELYSIA_REQUEST_ID,
		getServer
	} = hooks

	const trace = _trace.map(x => typeof x === 'function' ? x : x.fn)

	return ${k0 ? "async" : ""} function handle(c) {
		${J.beforeHandle.length ? "let be" : ""}
		${J.afterHandle.length ? "let af" : ""}
		${J.mapResponse.length ? "let mr" : ""}

		${Y ? "c.schema = schema; c.defs = definitions" : ""}
		${G}
	}`;
  try {
    return Function("hooks", G)({ handler: Q, hooks: L1(J), validator: j, handleError: $.handleError, utils: { mapResponse: f, mapCompactResponse: Z0, mapEarlyResponse: v, parseQuery: i0, parseQueryFromURL: B1, isNotEmpty: n }, error: { NotFoundError: O0, ValidationError: T, InternalServerError: G1, ParseError: Y1 }, schema: $.router.history, definitions: $.definitions.type, ERROR_CODE: A0, parseCookie: $1, signCookie: g0, decodeURIComponent: z2.default, ELYSIA_RESPONSE: c, ELYSIA_TRACE: n0, ELYSIA_REQUEST_ID: I0, getServer: () => $.getServer() });
  } catch {
    const P = L1(J);
    console.log("[Composer] failed to generate optimized handler"), console.log("Please report the following to SaltyAom privately as it may include sensitive information about your codebase:"), console.log("---"), console.log({ handler: typeof Q === "function" ? Q.toString() : Q, hooks: { ...P, transform: P?.transform?.map?.((_) => _.toString()), resolve: P?.resolve?.map?.((_) => _.toString()), beforeHandle: P?.beforeHandle?.map?.((_) => _.toString()), afterHandle: P?.afterHandle?.map?.((_) => _.toString()), mapResponse: P?.mapResponse?.map?.((_) => _.toString()), parse: P?.parse?.map?.((_) => _.toString()), error: P?.error?.map?.((_) => _.toString()), afterResponse: P?.afterResponse?.map?.((_) => _.toString()), stop: P?.stop?.map?.((_) => _.toString()) }, validator: j, definitions: $.definitions.type }), console.log("---"), process.exit(1);
  }
};
var b1 = ($) => {
  const W = $.config.handler?.standardHostname ?? true;
  let X = "", Z = "";
  const J = $.setHeaders;
  for (let D of Object.keys($.singleton.decorator))
    X += `,${D}: app.singleton.decorator.${D}`;
  const j = $.router, Q = $.event.trace.length > 0;
  let Y = `
	const route = router.find(request.method, path) ${j.http.root.ALL ? '?? router.find("ALL", path)' : ""}

	if (route === null)
		return ${$.event.error.length ? "app.handleError(ctx, notFound)" : $.event.request.length ? `new Response(error404Message, {
					status: ctx.set.status === 200 ? 404 : ctx.set.status,
					headers: ctx.set.headers
				})` : "error404.clone()"}

	ctx.params = route.params\n`;
  Y += `if(route.store.handler) return route.store.handler(ctx)
	return (route.store.handler = route.store.compile())(ctx)\n`;
  let K = "";
  for (let [D, { code: M, all: N, static: I }] of Object.entries(j.static.http.map)) {
    if (I)
      K += `case '${D}':\nswitch(request.method) {\n${M}\n${N ?? "default: break map"}}\n\n`;
    K += `case '${D}':\nswitch(request.method) {\n${M}\n${N ?? "default: break map"}}\n\n`;
  }
  const B = $.event.request.some(y);
  if (Z += `const {
		app,
		mapEarlyResponse,
		NotFoundError,
		randomId,
		handleError,
		error,
		redirect,
		ELYSIA_TRACE,
		ELYSIA_REQUEST_ID,
		getServer
	} = data

	const store = app.singleton.store
	const staticRouter = app.router.static.http
	const st = staticRouter.handlers
	const wsRouter = app.router.ws
	const router = app.router.http
	const trace = app.event.trace.map(x => typeof x === 'function' ? x : x.fn)

	const notFound = new NotFoundError()
	const hoc = app.extender.higherOrderFunctions.map(x => x.fn)

	${$.event.request.length ? "const onRequest = app.event.request.map(x => x.fn)" : ""}
	${$.event.error.length ? "" : `\nconst error404Message = notFound.message.toString()
	const error404 = new Response(error404Message, { status: 404 });\n`}

	${$.event.trace.length ? `const ${$.event.trace.map((D, M) => `tr${M} = app.event.trace[${M}].fn`).join(",")}` : ""}

	${B ? "async" : ""} function map(request) {\n`, $.event.request.length)
    Z += "let re";
  if (Z += `\nconst url = request.url
		const s = url.indexOf('/', ${W ? 11 : 7})
		const qi = url.indexOf('?', s + 1)
		let path
		if(qi === -1)
			path = url.substring(s)
		else
			path = url.substring(s, qi)\n`, Z += `${Q ? "const id = randomId()" : ""}
		const ctx = {
			request,
			store,
			qi,
			path,
			url,
			redirect,
			set: {
				headers: ${Object.keys(J ?? {}).length ? "Object.assign({}, app.setHeaders)" : "{}"},
				status: 200
			},
			error
			${$.inference.server ? `, get server() {
							return getServer()
						}` : ""}
			${Q ? ",[ELYSIA_REQUEST_ID]: id" : ""}
			${X}
		}\n`, $.event.trace.length)
    Z += `\nctx[ELYSIA_TRACE] = [${$.event.trace.map((D, M) => `tr${M}(ctx)`).join(",")}]\n`;
  const w = R1({ context: "ctx", trace: $.event.trace, addFn(D) {
    Z += D;
  } })("request", { attribute: "ctx", total: $.event.request.length });
  if ($.event.request.length) {
    Z += "\n try {\n";
    for (let D = 0;D < $.event.request.length; D++) {
      const M = $.event.request[D], N = E0(M), I = y(M), O = w.resolveChild($.event.request[D].fn.name);
      if (N)
        Z += `re = mapEarlyResponse(
					${I ? "await" : ""} onRequest[${D}](ctx),
					ctx.set,
					request
				)\n`, O("re"), Z += "if(re !== undefined) return re\n";
      else
        Z += `${I ? "await" : ""} onRequest[${D}](ctx)\n`, O();
    }
    Z += `} catch (error) {
			return app.handleError(ctx, error)
		}`;
  }
  w.resolve();
  const F = $.router.static.ws, G = $.router.ws;
  if (Object.keys(F).length || G.history.length) {
    Z += `
			if(request.method === 'GET') {
				switch(path) {`;
    for (let [D, M] of Object.entries(F))
      Z += `
					case '${D}':
						if(request.headers.get('upgrade') === 'websocket')
							return st[${M}](ctx)

						break`;
    Z += `
				default:
					if(request.headers.get('upgrade') === 'websocket') {
						const route = wsRouter.find('ws', path)

						if(route) {
							ctx.params = route.params

							if(route.store.handler)
							    return route.store.handler(ctx)

							return (route.store.handler = route.store.compile())(ctx)
						}
					}

					break
			}
		}\n`;
  }
  if (Z += `
		map: switch(path) {
			${K}

			default:
				break
		}

		${Y}
	}\n`, $.extender.higherOrderFunctions.length) {
    let D = "map";
    for (let M = 0;M < $.extender.higherOrderFunctions.length; M++)
      D = `hoc[${M}](${D}, request)`;
    Z += `return function hocMap(request) { return ${D}(request) }`;
  } else
    Z += "return map";
  const z = x1($);
  return $.handleError = z, Function("data", Z)({ app: $, mapEarlyResponse: v, NotFoundError: O0, randomId: j1, handleError: z, error: T1, redirect: c0, ELYSIA_TRACE: n0, ELYSIA_REQUEST_ID: I0, getServer: () => $.getServer() });
};
var x1 = ($) => {
  const W = $.event;
  let X = "";
  X += `const {
		app: { event: { error: onErrorContainer, afterResponse: resContainer, mapResponse: _onMapResponse, trace: _trace } },
		mapResponse,
		ERROR_CODE,
		ELYSIA_RESPONSE,
		ELYSIA_TRACE,
		ELYSIA_REQUEST_ID
	} = inject

	const trace = _trace.map(x => typeof x === 'function' ? x : x.fn)
	const onMapResponse = []

	for(let i = 0; i < _onMapResponse.length; i++)
		onMapResponse.push(_onMapResponse[i].fn ?? _onMapResponse[i])

	delete _onMapResponse

	const onError = onErrorContainer.map(x => x.fn)
	const res = resContainer.map(x => x.fn)

	return ${$.event.error.find(y) || $.event.mapResponse.find(y) ? "async" : ""} function(context, error, skipGlobal) {`;
  const Z = $.event.trace.length > 0;
  if (Z)
    X += "\nconst id = context[ELYSIA_REQUEST_ID]\n";
  const J = R1({ context: "context", trace: W.trace, addFn: (Y) => {
    X += Y;
  } });
  X += `
		const set = context.set
		let r

		if(!context.code)
			context.code = error.code ?? error[ERROR_CODE]

		if(!(context.error instanceof Error))
			context.error = error

		if(typeof error === "object" && error && ELYSIA_RESPONSE in error) {
			error.status = error[ELYSIA_RESPONSE]
			error.message = error.response
		}\n`;
  const j = Z || W.afterResponse.length > 0 || W.afterResponse.length > 0 ? "context.response = " : "";
  for (let Y = 0;Y < $.event.error.length; Y++) {
    const K = $.event.error[Y], B = `${y(K) ? "await " : ""}onError[${Y}](context)`;
    if (X += "\nif(skipGlobal !== true) {\n", E0(K)) {
      X += `r = ${B}; if(r !== undefined) {
				if(r instanceof Response) return r

				if(r[ELYSIA_RESPONSE]) {
					error.status = error[ELYSIA_RESPONSE]
					error.message = error.response
				}

				if(set.status === 200) set.status = error.status\n`;
      const U = J("mapResponse", { total: W.mapResponse.length, name: "context" });
      if (W.mapResponse.length)
        for (let w = 0;w < W.mapResponse.length; w++) {
          const F = W.mapResponse[w], G = U.resolveChild(F.fn.name);
          X += `\ncontext.response = r
						r = ${L0(F) ? "await" : ""} onMapResponse[${w}](context)\n`, G();
        }
      U.resolve(), X += `return mapResponse(${j} r, set, context.request)}\n`;
    } else
      X += B + "\n";
    X += "\n}\n";
  }
  X += `if(error.constructor.name === "ValidationError" || error.constructor.name === "TransformDecodeError") {
		set.status = error.status ?? 422
		return new Response(
			error.message,
			{
				headers: Object.assign(
					{ 'content-type': 'application/json'},
					set.headers
				),
				status: set.status
			}
		)
	} else {
		if(error.code && typeof error.status === "number")
			return new Response(
				error.message,
				{ headers: set.headers, status: error.status }
			)\n`;
  const Q = J("mapResponse", { total: W.mapResponse.length, name: "context" });
  if (W.mapResponse.length)
    for (let Y = 0;Y < W.mapResponse.length; Y++) {
      const K = W.mapResponse[Y], B = Q.resolveChild(K.fn.name);
      X += `\ncontext.response = error
			error = ${L0(K) ? "await" : ""} onMapResponse[${Y}](context)\n`, B();
    }
  return Q.resolve(), X += `\nreturn mapResponse(${j} error, set, context.request)\n}\n}`, Function("inject", X)({ app: $, mapResponse: f, ERROR_CODE: A0, ELYSIA_RESPONSE: c, ELYSIA_TRACE: n0, ELYSIA_REQUEST_ID: I0 });
};
var g1 = ($) => async (W) => {
  const X = W.url, Z = X.indexOf("/", 11), J = X.indexOf("?", Z + 1), j = J === -1 ? X.substring(Z) : X.substring(Z, J), Q = { cookie: {}, status: 200, headers: {} }, Y = Object.assign({}, $.singleton.decorator, { set: Q, store: $.singleton.store, request: W, path: j, qi: J, redirect: c0 });
  try {
    for (let N = 0;N < $.event.request.length; N++) {
      const I = $.event.request[N].fn;
      let O = I(Y);
      if (O instanceof Promise)
        O = await O;
      if (O = v(O, Q), O)
        return Y.response = O;
    }
    const K = $.router.dynamic.find(W.method, j) ?? $.router.dynamic.find("ALL", j);
    if (!K)
      throw new O0;
    const { handle: B, hooks: U, validator: w, content: F } = K.store;
    let G;
    if (W.method !== "GET" && W.method !== "HEAD")
      if (F)
        switch (F) {
          case "application/json":
            G = await W.json();
            break;
          case "text/plain":
            G = await W.text();
            break;
          case "application/x-www-form-urlencoded":
            G = i0(await W.text());
            break;
          case "application/octet-stream":
            G = await W.arrayBuffer();
            break;
          case "multipart/form-data":
            G = {};
            const N = await W.formData();
            for (let I of N.keys()) {
              if (G[I])
                continue;
              const O = N.getAll(I);
              if (O.length === 1)
                G[I] = O[0];
              else
                G[I] = O;
            }
            break;
        }
      else {
        let N = W.headers.get("content-type");
        if (N) {
          const I = N.indexOf(";");
          if (I !== -1)
            N = N.slice(0, I);
          Y.contentType = N;
          for (let O = 0;O < U.parse.length; O++) {
            const H = U.parse[O].fn;
            let C = H(Y, N);
            if (C instanceof Promise)
              C = await C;
            if (C) {
              G = C;
              break;
            }
          }
          if (delete Y.contentType, G === undefined)
            switch (N) {
              case "application/json":
                G = await W.json();
                break;
              case "text/plain":
                G = await W.text();
                break;
              case "application/x-www-form-urlencoded":
                G = i0(await W.text());
                break;
              case "application/octet-stream":
                G = await W.arrayBuffer();
                break;
              case "multipart/form-data":
                G = {};
                const O = await W.formData();
                for (let H of O.keys()) {
                  if (G[H])
                    continue;
                  const C = O.getAll(H);
                  if (C.length === 1)
                    G[H] = C[0];
                  else
                    G[H] = C;
                }
                break;
            }
        }
      }
    Y.body = G, Y.params = K?.params || undefined, Y.query = J === -1 ? {} : B1(X.substring(J + 1)), Y.headers = {};
    for (let [N, I] of W.headers.entries())
      Y.headers[N] = I;
    const z = Object.assign({}, $.config?.cookie, w?.cookie?.config), D = W.headers.get("cookie");
    Y.cookie = await $1(Y.set, D, z ? { secrets: z.secrets !== undefined ? typeof z.secrets === "string" ? z.secrets : z.secrets.join(",") : undefined, sign: z.sign === true ? true : z.sign !== undefined ? typeof z.sign === "string" ? z.sign : z.sign.join(",") : undefined } : undefined);
    for (let N = 0;N < U.transform.length; N++) {
      const I = U.transform[N], O = I.fn(Y);
      if (I.subType === "derive")
        if (O instanceof Promise)
          Object.assign(Y, await O);
        else
          Object.assign(Y, O);
      else if (O instanceof Promise)
        await O;
    }
    if (w) {
      if (w.createHeaders?.()) {
        const N = {};
        for (let I in W.headers)
          N[I] = W.headers.get(I);
        if (w.headers.Check(N) === false)
          throw new T("header", w.headers, N);
      } else if (w.headers?.Decode)
        Y.headers = w.headers.Decode(Y.headers);
      if (w.createParams?.()?.Check(Y.params) === false)
        throw new T("params", w.params, Y.params);
      else if (w.params?.Decode)
        Y.params = w.params.Decode(Y.params);
      if (w.createQuery?.()?.Check(Y.query) === false)
        throw new T("query", w.query, Y.query);
      else if (w.query?.Decode)
        Y.query = w.query.Decode(Y.query);
      if (w.createCookie?.()) {
        let N = {};
        for (let [I, O] of Object.entries(Y.cookie))
          N[I] = O.value;
        if (w.cookie.Check(N) === false)
          throw new T("cookie", w.cookie, N);
        else if (w.cookie?.Decode)
          N = w.cookie.Decode(N);
      }
      if (w.createBody?.()?.Check(G) === false)
        throw new T("body", w.body, G);
      else if (w.body?.Decode)
        Y.body = w.body.Decode(G);
    }
    for (let N = 0;N < U.beforeHandle.length; N++) {
      let I = U.beforeHandle[N].fn(Y);
      if (I instanceof Promise)
        I = await I;
      if (I !== undefined) {
        Y.response = I;
        for (let H = 0;H < U.afterHandle.length; H++) {
          let C = U.afterHandle[H].fn(Y);
          if (C instanceof Promise)
            C = await C;
          if (C)
            I = C;
        }
        const O = v(I, Y.set);
        if (O)
          return Y.response = O;
      }
    }
    let M = B(Y);
    if (M instanceof Promise)
      M = await M;
    if (!U.afterHandle.length) {
      const N = M?.[c] ?? (Q.status ? typeof Q.status === "string" ? _0[Q.status] : Q.status : 200), I = w?.createResponse?.()?.[N];
      if (I?.Check(M) === false)
        throw new T("response", I, M);
      else if (I?.Decode)
        M = I.Decode(M);
    } else {
      Y.response = M;
      for (let N = 0;N < U.afterHandle.length; N++) {
        let I = U.afterHandle[N].fn(Y);
        if (I instanceof Promise)
          I = await I;
        const O = v(I, Y.set);
        if (O !== undefined) {
          const H = w?.response?.[O.status];
          if (H?.Check(O) === false)
            throw new T("response", H, O);
          else if (H?.Decode)
            M = H.Decode(M);
          return Y.response = O;
        }
      }
    }
    if (Y.set.cookie && z?.sign) {
      const N = !z.secrets ? undefined : typeof z.secrets === "string" ? z.secrets : z.secrets[0];
      if (z.sign === true)
        for (let [I, O] of Object.entries(Y.set.cookie))
          Y.set.cookie[I].value = await g0(O.value, "${secret}");
      else {
        const I = w?.cookie?.schema?.properties;
        for (let O of z.sign) {
          if (!(O in I))
            continue;
          if (Y.set.cookie[O]?.value)
            Y.set.cookie[O].value = await g0(Y.set.cookie[O].value, N);
        }
      }
    }
    return Y.response = f(M, Y.set);
  } catch (K) {
    if (K.status)
      Q.status = K.status;
    return $.handleError(Y, K);
  } finally {
    for (let K of $.event.afterResponse)
      await K.fn(Y);
  }
};
var P2 = ($) => async (W, X) => {
  const Z = Object.assign(W, { error: X, code: X.code });
  Z.set = W.set;
  for (let J = 0;J < $.event.error.length; J++) {
    let Q = $.event.error[J].fn(Z);
    if (Q instanceof Promise)
      Q = await Q;
    if (Q !== undefined && Q !== null)
      return W.response = f(Q, W.set);
  }
  return new Response(typeof X.cause === "string" ? X.cause : X.message, { headers: W.set.headers, status: X.status ?? 500 });
};

class Q0 {
  config;
  server = null;
  dependencies = {};
  _routes = {};
  _types = { Prefix: "", Scoped: false, Singleton: {}, Definitions: {}, Metadata: {} };
  _ephemeral = {};
  _volatile = {};
  static version = E1;
  version = E1;
  singleton = { decorator: {}, store: {}, derive: {}, resolve: {} };
  get store() {
    return this.singleton.store;
  }
  get decorator() {
    return this.singleton.decorator;
  }
  get _scoped() {
    return this.config.scoped;
  }
  definitions = { type: {}, error: {} };
  extender = { macros: [], higherOrderFunctions: [] };
  validator = { global: null, scoped: null, local: null, getCandidate() {
    return x0(x0(this.global, this.scoped), this.local);
  } };
  event = { start: [], request: [], parse: [], transform: [], beforeHandle: [], afterHandle: [], mapResponse: [], afterResponse: [], trace: [], error: [], stop: [] };
  telemetry = { stack: undefined };
  router = { http: new M0, ws: new M0, dynamic: new M0, static: { http: { static: {}, handlers: [], map: {}, all: "" }, ws: {} }, history: [] };
  routeTree = new Map;
  get routes() {
    return this.router.history;
  }
  getGlobalRoutes() {
    return this.router.history;
  }
  inference = { body: false, cookie: false, headers: false, query: false, set: false, server: false };
  getServer() {
    return this.server;
  }
  _promisedModules;
  get promisedModules() {
    if (!this._promisedModules)
      this._promisedModules = new S1;
    return this._promisedModules;
  }
  constructor($ = {}) {
    if ($.tags)
      if (!$.detail)
        $.detail = { tags: $.tags };
      else
        $.detail.tags = $.tags;
    if ($.nativeStaticResponse === undefined)
      $.nativeStaticResponse = true;
    if (this.config = {}, this.applyConfig($ ?? {}), $?.analytic && ($?.name || $?.seed !== undefined))
      this.telemetry.stack = new Error().stack;
  }
  env($, W = Bun?.env ?? process.env) {
    if (d($, { dynamic: true, additionalProperties: true, coerce: true }).Check(W) === false) {
      const Z = new T("env", $, W);
      throw new Error(Z.all.map((J) => J.summary).join("\n"));
    }
    return this;
  }
  wrap($) {
    return this.extender.higherOrderFunctions.push({ checksum: P0(JSON.stringify({ name: this.config.name, seed: this.config.seed, content: $.toString() })), fn: $ }), this;
  }
  applyMacro($) {
    if (this.extender.macros.length) {
      const W = w2({ globalHook: this.event, localHook: $ }), X = { events: { global: this.event, local: $ }, onParse: W("parse"), onTransform: W("transform"), onBeforeHandle: W("beforeHandle"), onAfterHandle: W("afterHandle"), mapResponse: W("mapResponse"), onAfterResponse: W("afterResponse"), onError: W("error") };
      for (let Z of this.extender.macros)
        U2(Z.fn(X), $);
    }
  }
  applyConfig($) {
    return this.config = { prefix: "", aot: true, strictPath: false, global: false, analytic: false, normalize: true, ...$, cookie: { path: "/", ...$?.cookie }, experimental: $?.experimental ?? {}, seed: $?.seed === undefined ? "" : $?.seed }, this;
  }
  get models() {
    const $ = {};
    for (let [W, X] of Object.entries(this.definitions.type))
      $[W] = d(X);
    return $;
  }
  add($, W, X, Z, { allowMeta: J = false, skipPrefix: j = false } = { allowMeta: false, skipPrefix: false }) {
    if (Z = _2(Z), W !== "" && W.charCodeAt(0) !== 47)
      W = "/" + W;
    if (this.config.prefix && !j && !this.config.scoped)
      W = this.config.prefix + W;
    if (Z?.type)
      switch (Z.type) {
        case "text":
          Z.type = "text/plain";
          break;
        case "json":
          Z.type = "application/json";
          break;
        case "formdata":
          Z.type = "multipart/form-data";
          break;
        case "urlencoded":
          Z.type = "application/x-www-form-urlencoded";
          break;
        case "arrayBuffer":
          Z.type = "application/octet-stream";
          break;
        default:
          break;
      }
    const Q = this.definitions.type, Y = !this.config.aot, K = { ...this.validator.getCandidate() }, B = { body: Z?.body ?? K?.body, headers: Z?.headers ?? K?.headers, params: Z?.params ?? K?.params, query: Z?.query ?? K?.query, cookie: Z?.cookie ?? K?.cookie, response: Z?.response ?? K?.response }, U = () => B.cookie ? X1({ validator: B.cookie, defaultConfig: this.config.cookie, config: B.cookie?.config ?? {}, dynamic: Y, models: Q }) : undefined, w = this.config.normalize, F = this.config.precompile === true || typeof this.config.precompile === "object" && this.config.precompile.schema === true ? { body: d(B.body, { dynamic: Y, models: Q, normalize: w }), headers: d(B.headers, { dynamic: Y, models: Q, additionalProperties: !this.config.normalize, coerce: true, additionalCoerce: D0() }), params: d(B.params, { dynamic: Y, models: Q, coerce: true, additionalCoerce: D0() }), query: d(B.query, { dynamic: Y, models: Q, normalize: w, coerce: true, additionalCoerce: D0() }), cookie: U(), response: W1(B.response, { dynamic: Y, models: Q, normalize: w }) } : { createBody() {
      if (this.body)
        return this.body;
      return this.body = d(B.body, { dynamic: Y, models: Q, normalize: w });
    }, createHeaders() {
      if (this.headers)
        return this.headers;
      return this.headers = d(B.headers, { dynamic: Y, models: Q, additionalProperties: !w, coerce: true, additionalCoerce: D0() });
    }, createParams() {
      if (this.params)
        return this.params;
      return this.params = d(B.params, { dynamic: Y, models: Q, coerce: true, additionalCoerce: D0() });
    }, createQuery() {
      if (this.query)
        return this.query;
      return this.query = d(B.query, { dynamic: Y, models: Q, coerce: true, additionalCoerce: D0() });
    }, createCookie() {
      if (this.cookie)
        return this.cookie;
      return this.cookie = U();
    }, createResponse() {
      if (this.response)
        return this.response;
      return this.response = W1(B.response, { dynamic: Y, models: Q, normalize: w });
    } }, G = W.endsWith("/") ? W.slice(0, W.length - 1) : W + "/";
    if (Z = i(Z, K), Z.tags)
      if (!Z.detail)
        Z.detail = { tags: Z.tags };
      else
        Z.detail.tags = Z.tags;
    if (n(this.config.detail))
      Z.detail = p(Object.assign({}, this.config.detail), Z.detail);
    this.applyMacro(Z);
    const z = i(this.event, Z);
    if (this.config.aot === false) {
      if (this.router.dynamic.add($, W, { validator: F, hooks: z, content: Z?.type, handle: X }), this.config.strictPath === false)
        this.router.dynamic.add($, G, { validator: F, hooks: z, content: Z?.type, handle: X });
      this.router.history.push({ method: $, path: W, composed: null, handler: X, hooks: z });
      return;
    }
    const D = this.config.precompile === true || typeof this.config.precompile === "object" && this.config.precompile.compose === true, M = d0(this.inference), N = typeof X !== "function" ? J2(X, z, this.setHeaders) : undefined;
    if (this.config.nativeStaticResponse === true && N && ($ === "GET" || $ === "ALL"))
      this.router.static.http.static[W] = N();
    const I = () => N2({ app: this, path: W, method: $, localHook: i(Z), hooks: z, validator: F, handler: X, allowMeta: J, inference: M }), O = D ? I() : (R) => {
      return I()(R);
    }, H = this.router.history.length;
    if (this.routeTree.has($ + W))
      for (let R = 0;R < this.router.history.length; R++) {
        const E = this.router.history[R];
        if (E.path === W && E.method === $) {
          const k = this.router.history.splice(R, 1)[0];
          if (k && this.routeTree.has(k?.method + k?.path))
            this.routeTree.delete(k.method + k.path);
        }
      }
    else
      this.routeTree.set($ + W, H);
    this.router.history.push({ method: $, path: W, composed: O, handler: X, hooks: z });
    const C = this.router.static.http, g = { handler: D ? O : undefined, compile: I };
    if ($ === "$INTERNALWS") {
      const R = this.config.strictPath ? undefined : W.endsWith("/") ? W.slice(0, W.length - 1) : W + "/";
      if (W.indexOf(":") === -1 && W.indexOf("*") === -1) {
        const E = C.handlers.length;
        if (C.handlers.push((k) => (C.handlers[E] = I())(k)), this.router.static.ws[W] = E, R)
          this.router.static.ws[R] = E;
      } else if (this.router.ws.add("ws", W, g), R)
        this.router.ws.add("ws", R, g);
      return;
    }
    if (W.indexOf(":") === -1 && W.indexOf("*") === -1) {
      const R = C.handlers.length;
      if (C.handlers.push(N ?? ((k) => (C.handlers[R] = I())(k))), !C.map[W])
        C.map[W] = { code: "" };
      const E = N ? "" : "ctx";
      if ($ === "ALL")
        C.map[W].all = `default: return st[${R}](${E})\n`;
      else
        C.map[W].code = `case '${$}': return st[${R}](${E})\n${C.map[W].code}`;
      if (!this.config.strictPath) {
        if (!C.map[G])
          C.map[G] = { code: "" };
        if (this.config.nativeStaticResponse === true && N && ($ === "GET" || $ === "ALL"))
          this.router.static.http.static[G] = N();
        if ($ === "ALL")
          C.map[G].all = `default: return st[${R}](${E})\n`;
        else
          C.map[G].code = `case '${$}': return st[${R}](${E})\n${C.map[G].code}`;
      }
    } else if (this.router.http.add($, W, g), !this.config.strictPath) {
      const R = W.endsWith("/") ? W.slice(0, W.length - 1) : W + "/";
      if (this.config.nativeStaticResponse === true && N && ($ === "GET" || $ === "ALL"))
        this.router.static.http.static[R] = N();
      this.router.http.add($, R, g);
    }
  }
  setHeaders;
  headers($) {
    if (!$)
      return this;
    if (!this.setHeaders)
      this.setHeaders = {};
    return this.setHeaders = p(this.setHeaders, $), this;
  }
  onStart($) {
    return this.on("start", $), this;
  }
  onRequest($) {
    return this.on("request", $), this;
  }
  onParse($, W) {
    if (!W)
      return this.on("parse", $);
    return this.on($, "parse", W);
  }
  onTransform($, W) {
    if (!W)
      return this.on("transform", $);
    return this.on($, "transform", W);
  }
  resolve($, W) {
    if (!W)
      W = $, $ = { as: "local" };
    const X = { subType: "resolve", fn: W };
    return this.onBeforeHandle($, X);
  }
  mapResolve($, W) {
    if (!W)
      W = $, $ = { as: "local" };
    const X = { subType: "mapResolve", fn: W };
    return this.onBeforeHandle($, X);
  }
  onBeforeHandle($, W) {
    if (!W)
      return this.on("beforeHandle", $);
    return this.on($, "beforeHandle", W);
  }
  onAfterHandle($, W) {
    if (!W)
      return this.on("afterHandle", $);
    return this.on($, "afterHandle", W);
  }
  mapResponse($, W) {
    if (!W)
      return this.on("mapResponse", $);
    return this.on($, "mapResponse", W);
  }
  onAfterResponse($, W) {
    if (!W)
      return this.on("afterResponse", $);
    return this.on($, "afterResponse", W);
  }
  trace($, W) {
    if (!W)
      W = $, $ = { as: "local" };
    if (!Array.isArray(W))
      W = [W];
    for (let X of W)
      this.on($, "trace", M2(X));
    return this;
  }
  error($, W) {
    switch (typeof $) {
      case "string":
        return W.prototype[A0] = $, this.definitions.error[$] = W, this;
      case "function":
        return this.definitions.error = $(this.definitions.error), this;
    }
    for (let [X, Z] of Object.entries($))
      Z.prototype[A0] = X, this.definitions.error[X] = Z;
    return this;
  }
  onError($, W) {
    if (!W)
      return this.on("error", $);
    return this.on($, "error", W);
  }
  onStop($) {
    return this.on("stop", $), this;
  }
  on($, W, X) {
    let Z;
    switch (typeof $) {
      case "string":
        Z = $, X = W;
        break;
      case "object":
        if (Z = W, !Array.isArray(W) && typeof W === "object")
          X = W;
        break;
    }
    if (Array.isArray(X))
      X = t(X);
    else if (typeof X === "function")
      X = [{ fn: X }];
    else
      X = [X];
    const J = X;
    for (let j of J)
      j.scope = typeof $ === "string" ? "local" : $?.as ?? "local";
    if (Z !== "trace")
      r0({ [Z]: J.map((j) => j.fn) }, this.inference);
    for (let j of J) {
      const Q = K2(j, "global", { skipIfHasType: true });
      switch (Z) {
        case "start":
          this.event.start.push(Q);
          break;
        case "request":
          this.event.request.push(Q);
          break;
        case "parse":
          this.event.parse.push(Q);
          break;
        case "transform":
          this.event.transform.push(Q);
          break;
        case "beforeHandle":
          this.event.beforeHandle.push(Q);
          break;
        case "afterHandle":
          this.event.afterHandle.push(Q);
          break;
        case "mapResponse":
          this.event.mapResponse.push(Q);
          break;
        case "afterResponse":
          this.event.afterResponse.push(Q);
          break;
        case "trace":
          this.event.trace.push(Q);
          break;
        case "error":
          this.event.error.push(Q);
          break;
        case "stop":
          this.event.stop.push(Q);
          break;
      }
    }
    return this;
  }
  propagate() {
    return u(this.event.parse), u(this.event.transform), u(this.event.beforeHandle), u(this.event.afterHandle), u(this.event.mapResponse), u(this.event.afterResponse), u(this.event.trace), u(this.event.error), this;
  }
  as($) {
    const W = { plugin: "scoped", global: "global" }[$];
    if (u(this.event.parse, W), u(this.event.transform, W), u(this.event.beforeHandle, W), u(this.event.afterHandle, W), u(this.event.mapResponse, W), u(this.event.afterResponse, W), u(this.event.trace, W), u(this.event.error, W), $ === "plugin")
      this.validator.scoped = x0(this.validator.scoped, this.validator.local), this.validator.local = null;
    else if ($ === "global")
      this.validator.global = x0(this.validator.global, x0(this.validator.scoped, this.validator.local)), this.validator.scoped = null, this.validator.local = null;
    return this;
  }
  group($, W, X) {
    const Z = new Q0({ ...this.config, prefix: "" });
    Z.singleton = { ...this.singleton }, Z.definitions = { ...this.definitions }, Z.getServer = () => this.getServer(), Z.inference = d0(this.inference), Z.extender = { ...this.extender };
    const J = typeof W === "object", j = (J ? X : W)(Z);
    if (this.singleton = p(this.singleton, Z.singleton), this.definitions = p(this.definitions, Z.definitions), j.event.request.length)
      this.event.request = [...this.event.request || [], ...j.event.request || []];
    if (j.event.mapResponse.length)
      this.event.mapResponse = [...this.event.mapResponse || [], ...j.event.mapResponse || []];
    return this.model(j.definitions.type), Object.values(Z.router.history).forEach(({ method: Q, path: Y, handler: K, hooks: B }) => {
      if (Y = (J ? "" : this.config.prefix) + $ + Y, J) {
        const U = W, w = B;
        this.add(Q, Y, K, i(U, { ...w || {}, error: !w.error ? j.event.error : Array.isArray(w.error) ? [...w.error || {}, ...j.event.error || {}] : [w.error, ...j.event.error || {}] }));
      } else
        this.add(Q, Y, K, i(B, { error: j.event.error }), { skipPrefix: true });
    }), this;
  }
  guard($, W) {
    if (!W) {
      if (typeof $ === "object") {
        this.applyMacro($);
        const J = $.as ?? "local";
        if (this.validator[J] = { body: $.body ?? this.validator[J]?.body, headers: $.headers ?? this.validator[J]?.headers, params: $.params ?? this.validator[J]?.params, query: $.query ?? this.validator[J]?.query, response: $.response ?? this.validator[J]?.response, cookie: $.cookie ?? this.validator[J]?.cookie }, $.parse)
          this.on({ as: J }, "parse", $.parse);
        if ($.transform)
          this.on({ as: J }, "transform", $.transform);
        if ($.beforeHandle)
          this.on({ as: J }, "beforeHandle", $.beforeHandle);
        if ($.afterHandle)
          this.on({ as: J }, "afterHandle", $.afterHandle);
        if ($.mapResponse)
          this.on({ as: J }, "mapResponse", $.mapResponse);
        if ($.afterResponse)
          this.on({ as: J }, "afterResponse", $.afterResponse);
        if ($.error)
          this.on({ as: J }, "error", $.error);
        if ($.detail)
          if (this.config.detail)
            this.config.detail = p(Object.assign({}, this.config.detail), $.detail);
          else
            this.config.detail = $.detail;
        if ($?.tags)
          if (!this.config.detail)
            this.config.detail = { tags: $.tags };
          else
            this.config.detail.tags = $.tags;
        return this;
      }
      return this.guard({}, $);
    }
    const X = new Q0({ ...this.config, prefix: "" });
    X.singleton = { ...this.singleton }, X.definitions = { ...this.definitions }, X.inference = d0(this.inference), X.extender = { ...this.extender };
    const Z = W(X);
    if (this.singleton = p(this.singleton, X.singleton), this.definitions = p(this.definitions, X.definitions), Z.getServer = () => this.server, Z.event.request.length)
      this.event.request = [...this.event.request || [], ...Z.event.request || []];
    if (Z.event.mapResponse.length)
      this.event.mapResponse = [...this.event.mapResponse || [], ...Z.event.mapResponse || []];
    return this.model(Z.definitions.type), Object.values(X.router.history).forEach(({ method: J, path: j, handler: Q, hooks: Y }) => {
      this.add(J, j, Q, i($, { ...Y || {}, error: !Y.error ? Z.event.error : Array.isArray(Y.error) ? [...Y.error || {}, ...Z.event.error || []] : [Y.error, ...Z.event.error || []] }));
    }), this;
  }
  use($, W) {
    if (W?.scoped)
      return this.guard({}, (X) => X.use($));
    if (Array.isArray($)) {
      let X = this;
      for (let Z of $)
        X = this.use(Z);
      return X;
    }
    if ($ instanceof Promise)
      return this.promisedModules.add($.then((X) => {
        if (typeof X === "function")
          return X(this);
        if (X instanceof Q0)
          return this._use(X).compile();
        if (typeof X.default === "function")
          return X.default(this);
        if (X.default instanceof Q0)
          return this._use(X.default);
        throw new Error('Invalid plugin type. Expected Elysia instance, function, or module with "default" as Elysia instance or function that returns Elysia instance.');
      }).then((X) => X.compile())), this;
    return this._use($);
  }
  _use($) {
    if (typeof $ === "function") {
      const J = $(this);
      if (J instanceof Promise)
        return this.promisedModules.add(J.then((j) => {
          if (j instanceof Q0) {
            j.getServer = () => this.getServer(), j.getGlobalRoutes = () => this.getGlobalRoutes(), j.model(this.definitions.type), j.error(this.definitions.error);
            for (let { method: Q, path: Y, handler: K, hooks: B } of Object.values(j.router.history))
              this.add(Q, Y, K, i(B, { error: j.event.error }));
            return j.compile(), j;
          }
          if (typeof j === "function")
            return j(this);
          if (typeof j.default === "function")
            return j.default(this);
          return this._use(j);
        }).then((j) => j.compile())), this;
      return J;
    }
    const { name: W, seed: X } = $.config;
    $.getServer = () => this.getServer(), $.getGlobalRoutes = () => this.getGlobalRoutes(), $.model(this.definitions.type), $.error(this.definitions.error);
    const Z = $.config.scoped;
    if (Z) {
      if (W) {
        if (!(W in this.dependencies))
          this.dependencies[W] = [];
        const j = X !== undefined ? P0(W + JSON.stringify(X)) : 0;
        if (this.dependencies[W].some(({ checksum: Q }) => j === Q))
          return this;
        this.dependencies[W].push(!this.config?.analytic ? { name: $.config.name, seed: $.config.seed, checksum: j, dependencies: $.dependencies } : { name: $.config.name, seed: $.config.seed, checksum: j, dependencies: $.dependencies, stack: $.telemetry.stack, routes: $.router.history, decorators: $.singleton.decorator, store: $.singleton.store, type: $.definitions.type, error: $.definitions.error, derive: $.event.transform.filter((Q) => Q.subType === "derive").map((Q) => ({ fn: Q.fn.toString(), stack: new Error().stack ?? "" })), resolve: $.event.transform.filter((Q) => Q.subType === "derive").map((Q) => ({ fn: Q.fn.toString(), stack: new Error().stack ?? "" })) });
      }
      $.extender.macros = this.extender.macros.concat($.extender.macros);
      const J = [];
      for (let j = 0;j < $.extender.macros.length; j++) {
        const Q = this.extender.macros[j];
        if (J.includes(Q.checksum))
          $.extender.macros.splice(j, 1), j--;
        J.push(Q.checksum);
      }
      if ($.onRequest((j) => {
        Object.assign(j, this.singleton.decorator), Object.assign(j.store, this.singleton.store);
      }), $.event.trace.length)
        $.event.trace.push(...$.event.trace);
      if (!$.config.prefix)
        console.warn("It's recommended to use scoped instance with a prefix to prevent collision routing with other instance.");
      if ($.event.error.length)
        $.event.error.push(...this.event.error);
      if ($.config.aot)
        $.compile();
      if (Z === true && $.config.prefix) {
        this.mount($.config.prefix + "/", $.fetch);
        for (let j of $.router.history)
          this.routeTree.set(j.method + `${$.config.prefix}${j.path}`, this.router.history.length), this.router.history.push({ ...j, path: `${$.config.prefix}${j.path}`, hooks: i(j.hooks, { error: this.event.error }) });
      } else {
        this.mount($.fetch);
        for (let j of $.router.history)
          this.routeTree.set(j.method + `${$.config.prefix}${j.path}`, this.router.history.length), this.router.history.push({ ...j, path: `${$.config.prefix}${j.path}`, hooks: i(j.hooks, { error: this.event.error }) });
      }
      return this;
    } else {
      if (this.headers($.setHeaders), W) {
        if (!(W in this.dependencies))
          this.dependencies[W] = [];
        const j = X !== undefined ? P0(W + JSON.stringify(X)) : 0;
        if (!this.dependencies[W].some(({ checksum: Q }) => j === Q))
          this.extender.macros = this.extender.macros.concat($.extender.macros), this.extender.higherOrderFunctions = this.extender.higherOrderFunctions.concat($.extender.higherOrderFunctions);
      } else
        this.extender.macros = this.extender.macros.concat($.extender.macros), this.extender.higherOrderFunctions = this.extender.higherOrderFunctions.concat($.extender.higherOrderFunctions);
      Q1(this.extender.macros), Q1(this.extender.higherOrderFunctions);
      const J = [];
      for (let j = 0;j < this.extender.higherOrderFunctions.length; j++) {
        const Q = this.extender.higherOrderFunctions[j];
        if (Q.checksum) {
          if (J.includes(Q.checksum))
            this.extender.higherOrderFunctions.splice(j, 1), j--;
          J.push(Q.checksum);
        }
      }
      this.inference = { body: this.inference.body || $.inference.body, cookie: this.inference.cookie || $.inference.cookie, headers: this.inference.headers || $.inference.headers, query: this.inference.query || $.inference.query, set: this.inference.set || $.inference.set, server: this.inference.server || $.inference.server };
    }
    this.decorate($.singleton.decorator), this.state($.singleton.store), this.model($.definitions.type), this.error($.definitions.error), $.extender.macros = this.extender.macros.concat($.extender.macros);
    for (let { method: J, path: j, handler: Q, hooks: Y } of Object.values($.router.history))
      this.add(J, j, Q, i(Y, { error: $.event.error }));
    if (!Z)
      if (W) {
        if (!(W in this.dependencies))
          this.dependencies[W] = [];
        const J = X !== undefined ? P0(W + JSON.stringify(X)) : 0;
        if (this.dependencies[W].some(({ checksum: j }) => J === j))
          return this;
        this.dependencies[W].push(!this.config?.analytic ? { name: $.config.name, seed: $.config.seed, checksum: J, dependencies: $.dependencies } : { name: $.config.name, seed: $.config.seed, checksum: J, dependencies: $.dependencies, stack: $.telemetry.stack, routes: $.router.history, decorators: $.singleton, store: $.singleton.store, type: $.definitions.type, error: $.definitions.error, derive: $.event.transform.filter((j) => j?.subType === "derive").map((j) => ({ fn: j.toString(), stack: new Error().stack ?? "" })), resolve: $.event.transform.filter((j) => j?.subType === "resolve").map((j) => ({ fn: j.toString(), stack: new Error().stack ?? "" })) }), this.event = V1(this.event, C1($.event), J);
      } else
        this.event = V1(this.event, C1($.event));
    return this.validator.global = i(this.validator.global, { ...$.validator.global }), this.validator.local = i(this.validator.local, { ...$.validator.scoped }), this;
  }
  macro($) {
    const W = { checksum: P0(JSON.stringify({ name: this.config.name, seed: this.config.seed, content: $.toString() })), fn: $ };
    return this.extender.macros.push(W), this;
  }
  mount($, W) {
    if ($ instanceof Q0 || typeof $ === "function" || $.length === 0 || $ === "/") {
      const J = typeof $ === "function" ? $ : $ instanceof Q0 ? $.compile().fetch : W instanceof Q0 ? W.compile().fetch : W, j = async ({ request: Q, path: Y }) => {
        if (Q.method === "GET" || Q.method === "HEAD" || !Q.headers.get("content-type"))
          return J(new Request(b0(Q.url, Y || "/"), Q));
        return J(new Request(b0(Q.url, Y || "/"), { ...Q, body: await Q.arrayBuffer() }));
      };
      return this.all("/*", j, { type: "none" }), this;
    }
    const X = $.length;
    if (W instanceof Q0)
      W = W.compile().fetch;
    const Z = async ({ request: J, path: j }) => {
      if (J.method === "GET" || J.method === "HEAD" || !J.headers.get("content-type"))
        return W(new Request(b0(J.url, j.slice(X) || "/"), J));
      return W(new Request(b0(J.url, j.slice(X) || "/"), { ...J, body: await J.arrayBuffer() }));
    };
    return this.all($, Z, { type: "none" }), this.all($ + ($.endsWith("/") ? "*" : "/*"), Z, { type: "none" }), this;
  }
  get($, W, X) {
    return this.add("GET", $, W, X), this;
  }
  post($, W, X) {
    return this.add("POST", $, W, X), this;
  }
  put($, W, X) {
    return this.add("PUT", $, W, X), this;
  }
  patch($, W, X) {
    return this.add("PATCH", $, W, X), this;
  }
  delete($, W, X) {
    return this.add("DELETE", $, W, X), this;
  }
  options($, W, X) {
    return this.add("OPTIONS", $, W, X), this;
  }
  all($, W, X) {
    return this.add("ALL", $, W, X), this;
  }
  head($, W, X) {
    return this.add("HEAD", $, W, X), this;
  }
  connect($, W, X) {
    return this.add("CONNECT", $, W, X), this;
  }
  route($, W, X, Z) {
    return this.add($.toUpperCase(), W, X, Z, Z?.config), this;
  }
  ws($, W) {
    const X = W.transformMessage ? Array.isArray(W.transformMessage) ? W.transformMessage : [W.transformMessage] : undefined;
    let Z = null;
    const J = d(W?.body, { models: this.definitions.type, normalize: this.config.normalize }), j = d(W?.response, { models: this.definitions.type, normalize: this.config.normalize }), Q = (Y) => {
      if (typeof Y === "string") {
        const K = Y?.charCodeAt(0);
        if (K === 47 || K === 123)
          try {
            Y = JSON.parse(Y);
          } catch {
          }
        else if (J1(Y))
          Y = +Y;
      }
      if (X?.length)
        for (let K = 0;K < X.length; K++) {
          const B = X[K](Y);
          if (B !== undefined)
            Y = B;
        }
      return Y;
    };
    return this.route("$INTERNALWS", $, (Y) => {
      const { set: K, path: B, qi: U, headers: w, query: F, params: G } = Y;
      if (Z === null)
        Z = this.getServer();
      if (Z?.upgrade(Y.request, { headers: typeof W.upgrade === "function" ? W.upgrade(Y) : W.upgrade, data: { validator: j, open(z) {
        W.open?.(new f0(z, Y));
      }, message: (z, D) => {
        const M = Q(D);
        if (J?.Check(M) === false)
          return void z.send(new T("message", J, M).message);
        W.message?.(new f0(z, Y), M);
      }, drain(z) {
        W.drain?.(new f0(z, Y));
      }, close(z, D, M) {
        W.close?.(new f0(z, Y), D, M);
      } } }))
        return;
      return K.status = 400, "Expected a websocket connection";
    }, { beforeHandle: W.beforeHandle, transform: W.transform, headers: W.headers, params: W.params, query: W.query }), this;
  }
  state($, W, X) {
    if (W === undefined)
      X = $, $ = { as: "append" }, W = "";
    else if (X === undefined) {
      if (typeof $ === "string")
        X = W, W = $, $ = { as: "append" };
      else if (typeof $ === "object")
        X = W, W = "";
    }
    const { as: Z } = $;
    if (typeof W !== "string")
      return this;
    switch (typeof X) {
      case "object":
        if (W) {
          if (W in this.singleton.store)
            this.singleton.store[W] = p(this.singleton.store[W], X, { override: Z === "override" });
          else
            this.singleton.store[W] = X;
          return this;
        }
        if (X === null)
          return this;
        return this.singleton.store = p(this.singleton.store, X, { override: Z === "override" }), this;
      case "function":
        if (W) {
          if (Z === "override" || !(W in this.singleton.store))
            this.singleton.store[W] = X;
        } else
          this.singleton.store = X(this.singleton.store);
        return this;
      default:
        if (Z === "override" || !(W in this.singleton.store))
          this.singleton.store[W] = X;
        return this;
    }
  }
  decorate($, W, X) {
    if (W === undefined)
      X = $, $ = { as: "append" }, W = "";
    else if (X === undefined) {
      if (typeof $ === "string")
        X = W, W = $, $ = { as: "append" };
      else if (typeof $ === "object")
        X = W, W = "";
    }
    const { as: Z } = $;
    if (typeof W !== "string")
      return this;
    switch (typeof X) {
      case "object":
        if (W) {
          if (W in this.singleton.decorator)
            this.singleton.decorator[W] = p(this.singleton.decorator[W], X, { override: Z === "override" });
          else
            this.singleton.decorator[W] = X;
          return this;
        }
        if (X === null)
          return this;
        return this.singleton.decorator = p(this.singleton.decorator, X, { override: Z === "override" }), this;
      case "function":
        if (W) {
          if (Z === "override" || !(W in this.singleton.decorator))
            this.singleton.decorator[W] = X;
        } else
          this.singleton.decorator = X(this.singleton.decorator);
        return this;
      default:
        if (Z === "override" || !(W in this.singleton.decorator))
          this.singleton.decorator[W] = X;
        return this;
    }
  }
  derive($, W) {
    if (!W)
      W = $, $ = { as: "local" };
    const X = { subType: "derive", fn: W };
    return this.onTransform($, X);
  }
  model($, W) {
    switch (typeof $) {
      case "object":
        return Object.entries($).forEach(([X, Z]) => {
          if (!(X in this.definitions.type))
            this.definitions.type[X] = Z;
        }), this;
      case "function":
        return this.definitions.type = $(this.definitions.type), this;
    }
    return this.definitions.type[$] = W, this;
  }
  mapDerive($, W) {
    if (!W)
      W = $, $ = { as: "local" };
    const X = { subType: "mapDerive", fn: W };
    return this.onTransform($, X);
  }
  affix($, W, X) {
    if (X === "")
      return this;
    const Z = ["_", "-", " "], J = (K) => K[0].toUpperCase() + K.slice(1), j = $ === "prefix" ? (K, B) => Z.includes(K.at(-1) ?? "") ? K + B : K + J(B) : Z.includes(X.at(-1) ?? "") ? (K, B) => B + K : (K, B) => B + J(K), Q = (K) => {
      const B = {};
      switch (K) {
        case "decorator":
          for (let U in this.singleton.decorator)
            B[j(X, U)] = this.singleton.decorator[U];
          this.singleton.decorator = B;
          break;
        case "state":
          for (let U in this.singleton.store)
            B[j(X, U)] = this.singleton.store[U];
          this.singleton.store = B;
          break;
        case "model":
          for (let U in this.definitions.type)
            B[j(X, U)] = this.definitions.type[U];
          this.definitions.type = B;
          break;
        case "error":
          for (let U in this.definitions.error)
            B[j(X, U)] = this.definitions.error[U];
          this.definitions.error = B;
          break;
      }
    }, Y = Array.isArray(W) ? W : [W];
    for (let K of Y.some((B) => B === "all") ? ["decorator", "state", "model", "error"] : Y)
      Q(K);
    return this;
  }
  prefix($, W) {
    return this.affix("prefix", $, W);
  }
  suffix($, W) {
    return this.affix("suffix", $, W);
  }
  compile() {
    if (this.fetch = this.config.aot ? b1(this) : g1(this), typeof this.server?.reload === "function")
      this.server.reload({ ...this.server || {}, fetch: this.fetch });
    return this;
  }
  handle = async ($) => this.fetch($);
  fetch = ($) => {
    return (this.fetch = this.config.aot ? b1(this) : g1(this))($);
  };
  handleError = async ($, W) => (this.handleError = this.config.aot ? x1(this) : P2(this))($, W);
  outerErrorHandler = ($) => new Response($.message || $.name || "Error", { status: $?.status ?? 500 });
  listen = ($, W) => {
    if (typeof Bun === "undefined")
      throw new Error(".listen() is designed to run on Bun only. If you are running Elysia in other environment please use a dedicated plugin or export the handler via Elysia.fetch");
    if (this.compile(), typeof $ === "string") {
      if (!J1($))
        throw new Error("Port must be a numeric value");
      $ = parseInt($);
    }
    const X = this.fetch, Z = typeof $ === "object" ? { development: !l0, reusePort: true, ...this.config.serve || {}, ...$ || {}, static: this.router.static.http.static, websocket: { ...this.config.websocket || {}, ...q1 || {} }, fetch: X, error: this.outerErrorHandler } : { development: !l0, reusePort: true, ...this.config.serve || {}, static: this.router.static.http.static, websocket: { ...this.config.websocket || {}, ...q1 || {} }, port: $, fetch: X, error: this.outerErrorHandler };
    this.server = Bun?.serve(Z);
    for (let J = 0;J < this.event.start.length; J++)
      this.event.start[J].fn(this);
    if (W)
      W(this.server);
    return process.on("beforeExit", () => {
      if (this.server) {
        this.server.stop(), this.server = null;
        for (let J = 0;J < this.event.stop.length; J++)
          this.event.stop[J].fn(this);
      }
    }), this.promisedModules.then(() => {
      Bun?.gc(false);
    }), this;
  };
  stop = async ($) => {
    if (!this.server)
      throw new Error("Elysia isn't running. Call `app.listen` to start the server.");
    if (this.server) {
      if (this.server.stop($), this.server = null, this.event.stop.length)
        for (let W = 0;W < this.event.stop.length; W++)
          this.event.stop[W].fn(this);
    }
  };
  get modules() {
    return Promise.all(this.promisedModules.promises);
  }
}

// node_modules/@elysiajs/swagger/dist/index.mjs
var import_lodash = __toESM(require_lodash(), 1);
import path from "path";
var SwaggerUIRender = (info, version, theme, stringifiedSwaggerOptions, autoDarkMode) => `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>${info.title}</title>
    <meta
        name="description"
        content="${info.description}"
    />
    <meta
        name="og:description"
        content="${info.description}"
    />
    ${autoDarkMode && typeof theme === "string" ? `
    <style>
        @media (prefers-color-scheme: dark) {
            body {
                background-color: #222;
                color: #faf9a;
            }
            .swagger-ui {
                filter: invert(92%) hue-rotate(180deg);
            }

            .swagger-ui .microlight {
                filter: invert(100%) hue-rotate(180deg);
            }
        }
    </style>` : ""}
    ${typeof theme === "string" ? `<link rel="stylesheet" href="${theme}" />` : `<link rel="stylesheet" media="(prefers-color-scheme: light)" href="${theme.light}" />
<link rel="stylesheet" media="(prefers-color-scheme: dark)" href="${theme.dark}" />`}
</head>
<body>
    <div id="swagger-ui"></div>
    <script src="https://unpkg.com/swagger-ui-dist@${version}/swagger-ui-bundle.js" crossorigin></script>
    <script>
        window.onload = () => {
            window.ui = SwaggerUIBundle(${stringifiedSwaggerOptions});
        };
    </script>
</body>
</html>`;
var theme_default = `
/* basic theme */
.light-mode {
  --theme-color-1: #2a2f45;
  --theme-color-2: #757575;
  --theme-color-3: #8e8e8e;
  --theme-color-accent: #f06292;

  --theme-background-1: #fff;
  --theme-background-2: #f6f6f6;
  --theme-background-3: #e7e7e7;
  --theme-background-accent: #f062921f;

  --theme-border-color: rgba(0, 0, 0, 0.1);
}
.dark-mode {
  --theme-color-1: rgba(255, 255, 255, 0.9);
  --theme-color-2: rgba(156, 163, 175, 1);
  --theme-color-3: rgba(255, 255, 255, 0.44);
  --theme-color-accent: #f06292;

  --theme-background-1: #111728;
  --theme-background-2: #1e293b;
  --theme-background-3: #334155;
  --theme-background-accent: #f062921f;

  --theme-border-color: rgba(255, 255, 255, 0.1);
}
/* Document Sidebar */
.light-mode .sidebar,
.dark-mode .sidebar {
  --sidebar-background-1: var(--theme-background-1);
  --sidebar-item-hover-color: currentColor;
  --sidebar-item-hover-background: var(--theme-background-2);
  --sidebar-item-active-background: var(--theme-background-accent);
  --sidebar-border-color: transparent;
  --sidebar-color-1: var(--theme-color-1);
  --sidebar-color-2: var(--theme-color-2);
  --sidebar-color-active: var(--theme-color-accent);
  --sidebar-search-background: transparent;
  --sidebar-search-border-color: var(--theme-border-color);
  --sidebar-search--color: var(--theme-color-3);
}
/* Document header only shows on mobile*/
.dark-mode .t-doc__header,
.light-mode .t-doc__header {
  --header-background-1: rgba(255, 255, 255, 0.85);
  --header-border-color: transparent;
  --header-color-1: var(--theme-color-1);
  --header-color-2: var(--theme-color-2);
  --header-background-toggle: var(--theme-color-3);
  --header-call-to-action-color: var(--theme-color-accent);
}

.dark-mode .t-doc__header {
  --header-background-1: rgba(17, 23, 40, 0.75);
}

/* advanced */
.light-mode {
  --theme-button-1: rgb(49 53 56);
  --theme-button-1-color: #fff;
  --theme-button-1-hover: rgb(28 31 33);

  --theme-color-green: #069061;
  --theme-color-red: #ef0006;
  --theme-color-yellow: #edbe20;
  --theme-color-blue: #0082d0;
  --theme-color-orange: #fb892c;
  --theme-color-purple: #5203d1;

  --theme-scrollbar-color: rgba(0, 0, 0, 0.18);
  --theme-scrollbar-color-active: rgba(0, 0, 0, 0.36);
}
.dark-mode {
  --theme-button-1: #f6f6f6;
  --theme-button-1-color: #000;
  --theme-button-1-hover: #e7e7e7;

  --theme-color-green: #a3ffa9;
  --theme-color-red: #ffa3a3;
  --theme-color-yellow: #fffca3;
  --theme-color-blue: #a5d6ff;
  --theme-color-orange: #e2ae83;
  --theme-color-purple: #d2a8ff;

  --theme-scrollbar-color: rgba(255, 255, 255, 0.24);
  --theme-scrollbar-color-active: rgba(255, 255, 255, 0.48);
}
/* Elysia Specific */
.scalar-api-client__send-request-button,
.show-api-client-button {
  background: #3c82f6 !important;
}
.show-api-client-button:before {
  display: none;
}

.sidebar-search:hover {
  transition: all 0.15s ease-in-out;
  --sidebar-search-border-color: var(--theme-color-accent) !important;
  color: var(--sidebar-color-1) !important;
}
.scalar-api-client__container .sidebar {
  --sidebar-border-color: var(--theme-border-color);
}
@media (min-width: 1150px) {
  .section-container:has( ~ .footer):before,
  .tag-section-container:before {
    content: "";
    position: absolute;
    top: -5px;
    left: 0;
    width: 100%;
    height: 10px;
    background: linear-gradient(90deg, var(--theme-background-1) 3%,transparent 10%);
  }
}
.section-flare {
  position: absolute;
  width: 100vw;
  height: 300px;
  --stripes: repeating-linear-gradient(
    100deg,
    #fff 0%,
    #fff 7%,
    transparent 10%,
    transparent 12%,
    #fff 16%
  );
  --stripesDark: repeating-linear-gradient(
    100deg,
    #000 0%,
    #000 7%,
    transparent 10%,
    transparent 12%,
    #000 16%
  );
  --rainbow: repeating-linear-gradient(
    100deg,
    #60a5fa 10%,
    #e879f9 16%,
    #5eead4 22%,
    #60a5fa 30%
  );
  background-image: var(--stripes), var(--rainbow);
  background-size: 300%, 200%;
  background-position: 50% 50%, 50% 50%;
  filter: invert(100%);
  -webkit-mask-image: radial-gradient(
    ellipse at 100% 0%,
    black 40%,
    transparent 70%
  );
  mask-image: radial-gradient(ellipse at 100% 0%, black 40%, transparent 70%);
  pointer-events: none;
  opacity: 0.15;
}
.dark-mode .section-flare {
  background-image: var(--stripesDark), var(--rainbow);
  filter: opacity(50%) saturate(200%);
  opacity: 0.25;
}
.section-flare:after {
  content: "";
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-image: var(--stripes), var(--rainbow);
  background-size: 200%, 100%;
  background-attachment: fixed;
  mix-blend-mode: difference;
}
.dark-mode .section-flare:after {
  background-image: var(--stripesDark), var(--rainbow);
}
@keyframes headerbackground {
  from {
    background: transparent;
    backdrop-filter: none;
  }
  to {
    background: var(--header-background-1);
    backdrop-filter: blur(12px);
  }
}
.light-mode .t-doc__header,
.dark-mode .t-doc__header {
  animation: headerbackground forwards;
  animation-timeline: scroll();
  animation-range: 0px 200px;
  --header-border-color: transparent;
}
`;
var ScalarRender = (version, config2, cdn) => `<!doctype html>
<html>
  <head>
    <title>API Reference</title>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1" />
    <style>
      body {
        margin: 0;
      }
    </style>
    <style>
      ${config2.customCss ?? theme_default}
    </style>
  </head>
  <body>
    <script
      id="api-reference"
      data-url="${config2.spec?.url}"
      data-configuration='${JSON.stringify(config2)}'
    >
    </script>
    <script src="${cdn ? cdn : `https://cdn.jsdelivr.net/npm/@scalar/api-reference@${version}/dist/browser/standalone.min.js`}" crossorigin></script>
  </body>
</html>`;
var TransformKind2 = Symbol.for("TypeBox.Transform");
var ReadonlyKind2 = Symbol.for("TypeBox.Readonly");
var OptionalKind2 = Symbol.for("TypeBox.Optional");
var Hint2 = Symbol.for("TypeBox.Hint");
var Kind2 = Symbol.for("TypeBox.Kind");
var PatternBoolean2 = "(true|false)";
var PatternNumber2 = "(0|[1-9][0-9]*)";
var PatternString2 = "(.*)";
var PatternBooleanExact2 = `^${PatternBoolean2}\$`;
var PatternNumberExact2 = `^${PatternNumber2}\$`;
var PatternStringExact2 = `^${PatternString2}\$`;
var ExtendsResult2;
(function(ExtendsResult22) {
  ExtendsResult22[ExtendsResult22["Union"] = 0] = "Union";
  ExtendsResult22[ExtendsResult22["True"] = 1] = "True";
  ExtendsResult22[ExtendsResult22["False"] = 2] = "False";
})(ExtendsResult2 || (ExtendsResult2 = {}));
var toOpenAPIPath = (path2) => path2.split("/").map((x3) => {
  if (x3.startsWith(":")) {
    x3 = x3.slice(1, x3.length);
    if (x3.endsWith("?"))
      x3 = x3.slice(0, -1);
    x3 = `{${x3}}`;
  }
  return x3;
}).join("/");
var mapProperties = (name, schema3, models) => {
  if (schema3 === undefined)
    return [];
  if (typeof schema3 === "string")
    if (schema3 in models)
      schema3 = models[schema3];
    else
      throw new Error(`Can't find model ${schema3}`);
  return Object.entries(schema3?.properties ?? []).map(([key, value15]) => {
    const {
      type: valueType = undefined,
      description,
      examples,
      ...schemaKeywords
    } = value15;
    return {
      description,
      examples,
      schema: { type: valueType, ...schemaKeywords },
      in: name,
      name: key,
      required: schema3.required?.includes(key) ?? false
    };
  });
};
var mapTypesResponse = (types, schema3) => {
  if (typeof schema3 === "object" && ["void", "undefined", "null"].includes(schema3.type))
    return;
  const responses = {};
  for (const type47 of types)
    responses[type47] = {
      schema: typeof schema3 === "string" ? {
        $ref: `#/components/schemas/${schema3}`
      } : { ...schema3 }
    };
  return responses;
};
var capitalize2 = (word) => word.charAt(0).toUpperCase() + word.slice(1);
var generateOperationId = (method, paths) => {
  let operationId = method.toLowerCase();
  if (paths === "/")
    return operationId + "Index";
  for (const path2 of paths.split("/")) {
    if (path2.charCodeAt(0) === 123) {
      operationId += "By" + capitalize2(path2.slice(1, -1));
    } else {
      operationId += capitalize2(path2);
    }
  }
  return operationId;
};
var registerSchemaPath = ({
  schema: schema3,
  path: path2,
  method,
  hook,
  models
}) => {
  if (hook)
    hook = import_lodash.default(hook);
  const contentType = hook?.type ?? [
    "application/json",
    "multipart/form-data",
    "text/plain"
  ];
  path2 = toOpenAPIPath(path2);
  const contentTypes = typeof contentType === "string" ? [contentType] : contentType ?? ["application/json"];
  const bodySchema = hook?.body;
  const paramsSchema = hook?.params;
  const headerSchema = hook?.headers;
  const querySchema = hook?.query;
  let responseSchema = hook?.response;
  if (typeof responseSchema === "object") {
    if (Kind2 in responseSchema) {
      const {
        type: type47,
        properties,
        required: required5,
        additionalProperties,
        patternProperties,
        ...rest4
      } = responseSchema;
      responseSchema = {
        "200": {
          ...rest4,
          description: rest4.description,
          content: mapTypesResponse(contentTypes, type47 === "object" || type47 === "array" ? {
            type: type47,
            properties,
            patternProperties,
            items: responseSchema.items,
            required: required5
          } : responseSchema)
        }
      };
    } else {
      Object.entries(responseSchema).forEach(([key, value15]) => {
        if (typeof value15 === "string") {
          if (!models[value15])
            return;
          const {
            type: type47,
            properties,
            required: required5,
            additionalProperties: _12,
            patternProperties: _22,
            ...rest4
          } = models[value15];
          responseSchema[key] = {
            ...rest4,
            description: rest4.description,
            content: mapTypesResponse(contentTypes, value15)
          };
        } else {
          const {
            type: type47,
            properties,
            required: required5,
            additionalProperties,
            patternProperties,
            ...rest4
          } = value15;
          responseSchema[key] = {
            ...rest4,
            description: rest4.description,
            content: mapTypesResponse(contentTypes, type47 === "object" || type47 === "array" ? {
              type: type47,
              properties,
              patternProperties,
              items: value15.items,
              required: required5
            } : value15)
          };
        }
      });
    }
  } else if (typeof responseSchema === "string") {
    if (!(responseSchema in models))
      return;
    const {
      type: type47,
      properties,
      required: required5,
      additionalProperties: _12,
      patternProperties: _22,
      ...rest4
    } = models[responseSchema];
    responseSchema = {
      "200": {
        ...rest4,
        content: mapTypesResponse(contentTypes, responseSchema)
      }
    };
  }
  const parameters4 = [
    ...mapProperties("header", headerSchema, models),
    ...mapProperties("path", paramsSchema, models),
    ...mapProperties("query", querySchema, models)
  ];
  schema3[path2] = {
    ...schema3[path2] ? schema3[path2] : {},
    [method.toLowerCase()]: {
      ...headerSchema || paramsSchema || querySchema || bodySchema ? { parameters: parameters4 } : {},
      ...responseSchema ? {
        responses: responseSchema
      } : {},
      operationId: hook?.detail?.operationId ?? generateOperationId(method, path2),
      ...hook?.detail,
      ...bodySchema ? {
        requestBody: {
          required: true,
          content: mapTypesResponse(contentTypes, typeof bodySchema === "string" ? {
            $ref: `#/components/schemas/${bodySchema}`
          } : bodySchema)
        }
      } : null
    }
  };
};
var filterPaths = (paths, docsPath, {
  excludeStaticFile = true,
  exclude: exclude6 = []
}) => {
  const newPaths = {};
  const excludePaths = [`/${docsPath}`, `/${docsPath}/json`].map((p3) => path.normalize(p3));
  for (const [key, value15] of Object.entries(paths))
    if (!exclude6.some((x3) => {
      if (typeof x3 === "string")
        return key === x3;
      return x3.test(key);
    }) && !excludePaths.includes(key) && !key.includes("*") && (excludeStaticFile ? !key.includes(".") : true)) {
      Object.keys(value15).forEach((method) => {
        const schema3 = value15[method];
        if (key.includes("{")) {
          if (!schema3.parameters)
            schema3.parameters = [];
          schema3.parameters = [
            ...key.split("/").filter((x3) => x3.startsWith("{") && !schema3.parameters.find((params) => params.in === "path" && params.name === x3.slice(1, x3.length - 1))).map((x3) => ({
              schema: { type: "string" },
              in: "path",
              name: x3.slice(1, x3.length - 1),
              required: true
            })),
            ...schema3.parameters
          ];
        }
        if (!schema3.responses)
          schema3.responses = {
            200: {}
          };
      });
      newPaths[key] = value15;
    }
  return newPaths;
};
var swagger = async ({
  provider = "scalar",
  scalarVersion = "latest",
  scalarCDN = "",
  scalarConfig = {},
  documentation = {},
  version = "5.9.0",
  excludeStaticFile = true,
  path: path2 = "/swagger",
  exclude: exclude6 = [],
  swaggerOptions = {},
  theme = `https://unpkg.com/swagger-ui-dist@${version}/swagger-ui.css`,
  autoDarkMode = true,
  excludeMethods = ["OPTIONS"],
  excludeTags = []
} = {
  provider: "scalar",
  scalarVersion: "latest",
  scalarCDN: "",
  scalarConfig: {},
  documentation: {},
  version: "5.9.0",
  excludeStaticFile: true,
  path: "/swagger",
  exclude: [],
  swaggerOptions: {},
  autoDarkMode: true,
  excludeMethods: ["OPTIONS"],
  excludeTags: []
}) => {
  const schema3 = {};
  let totalRoutes = 0;
  if (!version)
    version = `https://unpkg.com/swagger-ui-dist@${version}/swagger-ui.css`;
  const info = {
    title: "Elysia Documentation",
    description: "Development documentation",
    version: "0.0.0",
    ...documentation.info
  };
  const relativePath = path2.startsWith("/") ? path2.slice(1) : path2;
  const app = new Q0({ name: "@elysiajs/swagger" });
  app.get(path2, function documentation2() {
    const combinedSwaggerOptions = {
      url: `${relativePath}/json`,
      dom_id: "#swagger-ui",
      ...swaggerOptions
    };
    const stringifiedSwaggerOptions = JSON.stringify(combinedSwaggerOptions, (key, value15) => {
      if (typeof value15 == "function")
        return;
      return value15;
    });
    const scalarConfiguration = {
      spec: {
        ...scalarConfig.spec,
        url: `${relativePath}/json`
      },
      ...scalarConfig
    };
    return new Response(provider === "swagger-ui" ? SwaggerUIRender(info, version, theme, stringifiedSwaggerOptions, autoDarkMode) : ScalarRender(scalarVersion, scalarConfiguration, scalarCDN), {
      headers: {
        "content-type": "text/html; charset=utf8"
      }
    });
  }).get(path2 === "/" ? "/json" : `${path2}/json`, function openAPISchema() {
    const routes = app.getGlobalRoutes();
    if (routes.length !== totalRoutes) {
      const ALLOWED_METHODS = ["GET", "PUT", "POST", "DELETE", "OPTIONS", "HEAD", "PATCH", "TRACE"];
      totalRoutes = routes.length;
      routes.forEach((route) => {
        if (route.hooks?.detail?.hide === true)
          return;
        if (excludeMethods.includes(route.method))
          return;
        if (ALLOWED_METHODS.includes(route.method) === false && route.method !== "ALL")
          return;
        if (route.method === "ALL") {
          ALLOWED_METHODS.forEach((method) => {
            registerSchemaPath({
              schema: schema3,
              hook: route.hooks,
              method,
              path: route.path,
              models: app.definitions?.type,
              contentType: route.hooks.type
            });
          });
          return;
        }
        registerSchemaPath({
          schema: schema3,
          hook: route.hooks,
          method: route.method,
          path: route.path,
          models: app.definitions?.type,
          contentType: route.hooks.type
        });
      });
    }
    return {
      openapi: "3.0.3",
      ...{
        ...documentation,
        tags: documentation.tags?.filter((tag) => !excludeTags?.includes(tag?.name)),
        info: {
          title: "Elysia Documentation",
          description: "Development documentation",
          version: "0.0.0",
          ...documentation.info
        }
      },
      paths: {
        ...filterPaths(schema3, relativePath, {
          excludeStaticFile,
          exclude: Array.isArray(exclude6) ? exclude6 : [exclude6]
        }),
        ...documentation.paths
      },
      components: {
        ...documentation.components,
        schemas: {
          ...app.definitions?.type,
          ...documentation.components?.schemas
        }
      }
    };
  });
  return app;
};

// node_modules/@elysiajs/static/dist/index.mjs
var import_node_cache = __toESM(require_node_cache2(), 1);
import {readdir, stat as stat2} from "fs/promises";
import {resolve, resolve as resolveFn, join as join2, sep} from "path";
import {stat} from "fs/promises";
async function isCached(headers, etag, filePath) {
  if (headers["cache-control"] && headers["cache-control"].indexOf("no-cache") !== -1)
    return false;
  if ("if-none-match" in headers) {
    const ifNoneMatch = headers["if-none-match"];
    if (ifNoneMatch === "*")
      return true;
    if (ifNoneMatch === null)
      return false;
    if (typeof etag !== "string")
      return false;
    const isMatching = ifNoneMatch === etag;
    if (isMatching)
      return true;
    return false;
  }
  if (headers["if-modified-since"]) {
    const ifModifiedSince = headers["if-modified-since"];
    let lastModified;
    try {
      lastModified = (await stat(filePath)).mtime;
    } catch {
    }
    if (lastModified !== undefined && lastModified.getTime() <= Date.parse(ifModifiedSince))
      return true;
  }
  return false;
}
async function generateETag(file) {
  const hash7 = new Bun.CryptoHasher("md5");
  hash7.update(await file.arrayBuffer());
  return hash7.digest("base64");
}
var URL_PATH_SEP = "/";
var fileExists = (path2) => stat2(path2).then(() => true, () => false);
var statCache = new import_node_cache.default({
  useClones: false,
  checkperiod: 5 * 60,
  stdTTL: 3 * 60 * 60,
  maxKeys: 250
});
var fileCache = new import_node_cache.default({
  useClones: false,
  checkperiod: 5 * 60,
  stdTTL: 3 * 60 * 60,
  maxKeys: 250
});
var htmlCache = new import_node_cache.default({
  useClones: false,
  checkperiod: 5 * 60,
  stdTTL: 3 * 60 * 60,
  maxKeys: 250
});
var listFiles = async (dir) => {
  const files = await readdir(dir);
  const all = await Promise.all(files.map(async (name) => {
    const file = dir + sep + name;
    const stats = await stat2(file);
    return stats && stats.isDirectory() ? await listFiles(file) : [resolve(dir, file)];
  }));
  return all.flat();
};
var staticPlugin = async ({
  assets = "public",
  prefix = "/public",
  staticLimit = 1024,
  alwaysStatic = false,
  ignorePatterns = [".DS_Store", ".git", ".env"],
  noExtension = false,
  enableDecodeURI = false,
  resolve: resolve2 = resolveFn,
  headers = {},
  noCache = false,
  maxAge = 86400,
  directive = "public",
  indexHTML = true
} = {
  assets: "public",
  prefix: "/public",
  staticLimit: 1024,
  alwaysStatic: false,
  ignorePatterns: [],
  noExtension: false,
  enableDecodeURI: false,
  resolve: resolveFn,
  headers: {},
  noCache: false,
  indexHTML: true
}) => {
  const files = await listFiles(resolveFn(assets));
  const isFSSepUnsafe = sep !== URL_PATH_SEP;
  if (prefix === URL_PATH_SEP)
    prefix = "";
  const shouldIgnore = (file) => {
    if (!ignorePatterns.length)
      return false;
    return ignorePatterns.find((pattern3) => {
      if (typeof pattern3 === "string")
        return pattern3.includes(file);
      else
        return pattern3.test(file);
    });
  };
  const app = new Q0({
    name: "static",
    seed: {
      assets,
      prefix,
      staticLimit,
      alwaysStatic,
      ignorePatterns,
      noExtension,
      enableDecodeURI,
      resolve: resolve2.toString(),
      headers,
      noCache,
      maxAge,
      directive,
      indexHTML
    }
  });
  if (alwaysStatic || process.env.ENV === "production" && files.length <= staticLimit)
    for (let i3 = 0;i3 < files.length; i3++) {
      const filePath = files[i3];
      if (!filePath || shouldIgnore(filePath))
        continue;
      let fileName = filePath.replace(resolve2(), "").replace(`${assets}${sep}`, "");
      if (noExtension) {
        const temp = fileName.split(".");
        temp.splice(-1);
        fileName = temp.join(".");
      }
      const file = Bun.file(filePath);
      const etag = await generateETag(file);
      const pathName = isFSSepUnsafe ? prefix + fileName.split(sep).join(URL_PATH_SEP) : join2(prefix, fileName);
      app.get(pathName, noCache ? new Response(file, {
        headers
      }) : async ({ headers: reqHeaders }) => {
        if (await isCached(reqHeaders, etag, filePath)) {
          return new Response(null, {
            status: 304,
            headers
          });
        }
        headers["Etag"] = etag;
        headers["Cache-Control"] = directive;
        if (maxAge !== null)
          headers["Cache-Control"] += `, max-age=${maxAge}`;
        return new Response(file, {
          headers
        });
      });
      if (indexHTML && pathName.endsWith("/index.html"))
        app.get(join2(prefix, pathName.replace("/index.html", "")), noCache ? new Response(file, {
          headers
        }) : async ({ headers: reqHeaders }) => {
          if (await isCached(reqHeaders, etag, pathName)) {
            return new Response(null, {
              status: 304,
              headers
            });
          }
          headers["Etag"] = etag;
          headers["Cache-Control"] = directive;
          if (maxAge !== null)
            headers["Cache-Control"] += `, max-age=${maxAge}`;
          return new Response(file, {
            headers
          });
        });
    }
  else {
    if (!app.router.history.find(({ method, path: path2 }) => path2 === `${prefix}/*` && method === "GET"))
      app.onError(() => {
      }).get(`${prefix}/*`, async ({ params, headers: reqHeaders }) => {
        let path2 = enableDecodeURI ? decodeURI(`${assets}/${decodeURI(params["*"])}`) : `${assets}/${params["*"]}`;
        if (isFSSepUnsafe) {
          path2 = path2.replace(URL_PATH_SEP, sep);
        }
        if (shouldIgnore(path2))
          throw new O0;
        try {
          let status = statCache.get(path2);
          if (!status) {
            status = await stat2(path2);
            statCache.set(path2, status);
          }
          let file = fileCache.get(path2);
          if (!file) {
            if (status.isDirectory()) {
              let hasCache = false;
              if (indexHTML && (hasCache = htmlCache.get(`${path2}${sep}index.html`) ?? await fileExists(`${path2}${sep}index.html`))) {
                if (hasCache === undefined)
                  htmlCache.set(`${path2}${sep}index.html`, true);
                file = Bun.file(`${path2}${sep}index.html`);
              } else {
                if (indexHTML && hasCache === undefined)
                  htmlCache.set(`${path2}${sep}index.html`, false);
                throw new O0;
              }
            }
            file ??= Bun.file(path2);
            fileCache.set(path2, file);
          }
          if (noCache)
            return new Response(file, {
              headers
            });
          const etag = await generateETag(file);
          if (await isCached(reqHeaders, etag, path2))
            return new Response(null, {
              status: 304,
              headers
            });
          headers["Etag"] = etag;
          headers["Cache-Control"] = directive;
          if (maxAge !== null)
            headers["Cache-Control"] += `, max-age=${maxAge}`;
          return new Response(file, {
            headers
          });
        } catch (error22) {
          throw new O0;
        }
      });
  }
  return app;
};

// node_modules/@elysiajs/cors/dist/index.mjs
var isBun = typeof new Headers()?.toJSON === "function";
var processHeaders = (headers) => {
  if (isBun)
    return Object.keys(headers.toJSON()).join(", ");
  let keys = "";
  headers.forEach((_, key) => {
    keys += key + ", ";
  });
  if (keys)
    keys = keys.slice(0, -1);
  return keys;
};
var processOrigin = (origin, request, from) => {
  if (Array.isArray(origin))
    return origin.some((o2) => processOrigin(o2, request, from));
  switch (typeof origin) {
    case "string":
      if (origin.indexOf("://") === -1)
        return from.includes(origin);
      return origin === from;
    case "function":
      return origin(request) === true;
    case "object":
      if (origin instanceof RegExp)
        return origin.test(from);
  }
  return false;
};
var cors = (config2) => {
  let {
    aot = true,
    origin = true,
    methods = true,
    allowedHeaders = true,
    exposeHeaders = true,
    credentials = true,
    maxAge = 5,
    preflight = true
  } = config2 ?? {};
  if (Array.isArray(allowedHeaders))
    allowedHeaders = allowedHeaders.join(", ");
  if (Array.isArray(exposeHeaders))
    exposeHeaders = exposeHeaders.join(", ");
  const origins = typeof origin === "boolean" ? undefined : Array.isArray(origin) ? origin : [origin];
  const app = new Q0({
    name: "@elysiajs/cors",
    seed: config2,
    aot
  });
  const anyOrigin = origins?.some((o2) => o2 === "*");
  const handleOrigin = (set2, request) => {
    if (origin === true) {
      set2.headers.vary = "*";
      set2.headers["access-control-allow-origin"] = request.headers.get("Origin") || "*";
      return;
    }
    if (anyOrigin) {
      set2.headers.vary = "*";
      set2.headers["access-control-allow-origin"] = "*";
      return;
    }
    if (!origins?.length)
      return;
    const headers = [];
    if (origins.length) {
      const from = request.headers.get("Origin") ?? "";
      for (let i3 = 0;i3 < origins.length; i3++) {
        const value15 = processOrigin(origins[i3], request, from);
        if (value15 === true) {
          set2.headers.vary = origin ? "Origin" : "*";
          set2.headers["access-control-allow-origin"] = from || "*";
          return;
        }
        if (value15)
          headers.push(value15);
      }
    }
    set2.headers.vary = "Origin";
    if (headers.length)
      set2.headers["access-control-allow-origin"] = headers.join(", ");
  };
  const handleMethod = (set2, method) => {
    if (!method)
      return;
    if (methods === true)
      return set2.headers["access-control-allow-methods"] = method ?? "*";
    if (methods === false || !methods?.length)
      return;
    if (methods === "*")
      return set2.headers["access-control-allow-methods"] = "*";
    if (!Array.isArray(methods))
      return set2.headers["access-control-allow-methods"] = methods;
    set2.headers["access-control-allow-methods"] = methods.join(", ");
  };
  const defaultHeaders = {};
  if (typeof exposeHeaders === "string")
    defaultHeaders["access-control-expose-headers"] = exposeHeaders;
  if (typeof allowedHeaders === "string")
    defaultHeaders["access-control-allow-headers"] = allowedHeaders;
  if (credentials === true)
    defaultHeaders["access-control-allow-credentials"] = "true";
  app.headers(defaultHeaders);
  function handleOption({ set: set2, request, headers }) {
    handleOrigin(set2, request);
    handleMethod(set2, request.headers.get("access-control-request-method"));
    if (allowedHeaders === true || exposeHeaders === true) {
      if (allowedHeaders === true)
        set2.headers["access-control-allow-headers"] = headers["access-control-request-headers"];
      if (exposeHeaders === true)
        set2.headers["access-control-expose-headers"] = Object.keys(headers).join(",");
    }
    if (maxAge)
      set2.headers["access-control-max-age"] = maxAge.toString();
    return new Response(null, {
      status: 204
    });
  }
  if (preflight)
    app.options("/", handleOption).options("/*", handleOption);
  return app.onRequest(function processCors({ set: set2, request }) {
    handleOrigin(set2, request);
    handleMethod(set2, request.method);
    if (allowedHeaders === true || exposeHeaders === true) {
      const headers = processHeaders(request.headers);
      if (allowedHeaders === true)
        set2.headers["access-control-allow-headers"] = headers;
      if (exposeHeaders === true)
        set2.headers["access-control-expose-headers"] = headers;
    }
  });
};
var src_default = cors;

// src/env.ts
var env = {
  redis: Bun.env.REDIS_URL || "",
  api_key: Bun.env.API_KEY || "",
  base_url: Bun.env.BASE_URL || ""
};

// src/config.ts
function api({ body, headers, method = "GET", path: path2 }) {
  return fetch(config2.url + path2, {
    method,
    body: JSON.stringify(body),
    headers: { ...config2.headers, ...headers }
  });
}
var config2 = {
  url: env.base_url,
  headers: {
    Accept: "application/json",
    "Content-Type": "application/json",
    "x-api-key": env.api_key
  }
};

// src/index.ts
import {unlink} from "fs/promises";

// node_modules/pdfkit/js/pdfkit.es.js
var import_crypto_js = __toESM(require_crypto_js(), 1);
import stream from "stream";
import zlib from "zlib";
import fs from "fs";

// node_modules/fontkit/dist/module.mjs
var import_restructure = __toESM(require_restructure(), 1);
import {readFileSync as $5OpyM$readFileSync, readFile as $5OpyM$readFile} from "fs";

// node_modules/@swc/helpers/src/_apply_decorated_descriptor.js
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object["ke" + "ys"](descriptor).forEach(function(key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;
  if ("value" in desc || desc.initializer) {
    desc.writable = true;
  }
  desc = decorators.slice().reverse().reduce(function(desc2, decorator) {
    return decorator ? decorator(target, property, desc2) || desc2 : desc2;
  }, desc);
  var hasAccessor = Object.prototype.hasOwnProperty.call(desc, "get") || Object.prototype.hasOwnProperty.call(desc, "set");
  if (context && desc.initializer !== undefined && !hasAccessor) {
    desc.value = desc.initializer ? desc.initializer.call(context) : undefined;
    desc.initializer = undefined;
  }
  if (hasAccessor) {
    delete desc.writable;
    delete desc.initializer;
    delete desc.value;
  }
  if (desc.initializer === undefined) {
    Object["define" + "Property"](target, property, desc);
    desc = null;
  }
  return desc;
}
// node_modules/fontkit/dist/module.mjs
var utils = __toESM(require_utils(), 1);
var import_deep_equal = __toESM(require_deep_equal(), 1);
var iconv_lite = __toESM(require_iconv_lite(), 1);
import {Buffer as $5OpyM$Buffer} from "buffer";

// node_modules/unicode-properties/dist/module.mjs
var import_base64_js = __toESM(require_base64_js(), 1);
var import_unicode_trie = __toESM(require_unicode_trie(), 1);
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
function $747425b437e121da$export$410364bbb673ddbc(codePoint) {
  const val = $747425b437e121da$var$trie.get(codePoint);
  return (0, /* @__PURE__ */ $parcel$interopDefault($f4087201da764553$exports)).categories[val >> $747425b437e121da$var$CATEGORY_SHIFT & $747425b437e121da$var$CATEGORY_MASK];
}
function $747425b437e121da$export$c03b919c6651ed55(codePoint) {
  const val = $747425b437e121da$var$trie.get(codePoint);
  return (0, /* @__PURE__ */ $parcel$interopDefault($f4087201da764553$exports)).combiningClasses[val >> $747425b437e121da$var$COMBINING_SHIFT & $747425b437e121da$var$COMBINING_MASK];
}
function $747425b437e121da$export$941569448d136665(codePoint) {
  const val = $747425b437e121da$var$trie.get(codePoint);
  return (0, /* @__PURE__ */ $parcel$interopDefault($f4087201da764553$exports)).scripts[val >> $747425b437e121da$var$SCRIPT_SHIFT & $747425b437e121da$var$SCRIPT_MASK];
}
function $747425b437e121da$export$92f6187db8ca6d26(codePoint) {
  const val = $747425b437e121da$var$trie.get(codePoint);
  return (0, /* @__PURE__ */ $parcel$interopDefault($f4087201da764553$exports)).eaw[val >> $747425b437e121da$var$EAW_SHIFT & $747425b437e121da$var$EAW_MASK];
}
function $747425b437e121da$export$7d1258ebb7625a0d(codePoint) {
  let val = $747425b437e121da$var$trie.get(codePoint);
  let num = val & $747425b437e121da$var$NUMBER_MASK;
  if (num === 0)
    return null;
  else if (num <= 50)
    return num - 1;
  else if (num < 480) {
    const numerator = (num >> 4) - 12;
    const denominator = (num & 15) + 1;
    return numerator / denominator;
  } else if (num < 768) {
    val = (num >> 5) - 14;
    let exp = (num & 31) + 2;
    while (exp > 0) {
      val *= 10;
      exp--;
    }
    return val;
  } else {
    val = (num >> 2) - 191;
    let exp = (num & 3) + 1;
    while (exp > 0) {
      val *= 60;
      exp--;
    }
    return val;
  }
}
function $747425b437e121da$export$52c8ea63abd07594(codePoint) {
  const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);
  return category === "Lu" || category === "Ll" || category === "Lt" || category === "Lm" || category === "Lo" || category === "Nl";
}
function $747425b437e121da$export$727d9dbc4fbb948f(codePoint) {
  return $747425b437e121da$export$410364bbb673ddbc(codePoint) === "Nd";
}
function $747425b437e121da$export$a5b49f4dc6a07d2c(codePoint) {
  const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);
  return category === "Pc" || category === "Pd" || category === "Pe" || category === "Pf" || category === "Pi" || category === "Po" || category === "Ps";
}
function $747425b437e121da$export$7b6804e8df61fcf5(codePoint) {
  return $747425b437e121da$export$410364bbb673ddbc(codePoint) === "Ll";
}
function $747425b437e121da$export$aebd617640818cda(codePoint) {
  return $747425b437e121da$export$410364bbb673ddbc(codePoint) === "Lu";
}
function $747425b437e121da$export$de8b4ee23b2cf823(codePoint) {
  return $747425b437e121da$export$410364bbb673ddbc(codePoint) === "Lt";
}
function $747425b437e121da$export$3c52dd84024ae72c(codePoint) {
  const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);
  return category === "Zs" || category === "Zl" || category === "Zp";
}
function $747425b437e121da$export$a11bdcffe109e74b(codePoint) {
  const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);
  return category === "Nd" || category === "No" || category === "Nl" || category === "Lu" || category === "Ll" || category === "Lt" || category === "Lm" || category === "Lo" || category === "Me" || category === "Mc";
}
function $747425b437e121da$export$e33ad6871e762338(codePoint) {
  const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);
  return category === "Mn" || category === "Me" || category === "Mc";
}
var $f4087201da764553$exports = {};
$f4087201da764553$exports = JSON.parse('{"categories":["Cc","Zs","Po","Sc","Ps","Pe","Sm","Pd","Nd","Lu","Sk","Pc","Ll","So","Lo","Pi","Cf","No","Pf","Lt","Lm","Mn","Me","Mc","Nl","Zl","Zp","Cs","Co"],"combiningClasses":["Not_Reordered","Above","Above_Right","Below","Attached_Above_Right","Attached_Below","Overlay","Iota_Subscript","Double_Below","Double_Above","Below_Right","Above_Left","CCC10","CCC11","CCC12","CCC13","CCC14","CCC15","CCC16","CCC17","CCC18","CCC19","CCC20","CCC21","CCC22","CCC23","CCC24","CCC25","CCC30","CCC31","CCC32","CCC27","CCC28","CCC29","CCC33","CCC34","CCC35","CCC36","Nukta","Virama","CCC84","CCC91","CCC103","CCC107","CCC118","CCC122","CCC129","CCC130","CCC132","Attached_Above","Below_Left","Left","Kana_Voicing","CCC26","Right"],"scripts":["Common","Latin","Bopomofo","Inherited","Greek","Coptic","Cyrillic","Armenian","Hebrew","Arabic","Syriac","Thaana","Nko","Samaritan","Mandaic","Devanagari","Bengali","Gurmukhi","Gujarati","Oriya","Tamil","Telugu","Kannada","Malayalam","Sinhala","Thai","Lao","Tibetan","Myanmar","Georgian","Hangul","Ethiopic","Cherokee","Canadian_Aboriginal","Ogham","Runic","Tagalog","Hanunoo","Buhid","Tagbanwa","Khmer","Mongolian","Limbu","Tai_Le","New_Tai_Lue","Buginese","Tai_Tham","Balinese","Sundanese","Batak","Lepcha","Ol_Chiki","Braille","Glagolitic","Tifinagh","Han","Hiragana","Katakana","Yi","Lisu","Vai","Bamum","Syloti_Nagri","Phags_Pa","Saurashtra","Kayah_Li","Rejang","Javanese","Cham","Tai_Viet","Meetei_Mayek","null","Linear_B","Lycian","Carian","Old_Italic","Gothic","Old_Permic","Ugaritic","Old_Persian","Deseret","Shavian","Osmanya","Osage","Elbasan","Caucasian_Albanian","Linear_A","Cypriot","Imperial_Aramaic","Palmyrene","Nabataean","Hatran","Phoenician","Lydian","Meroitic_Hieroglyphs","Meroitic_Cursive","Kharoshthi","Old_South_Arabian","Old_North_Arabian","Manichaean","Avestan","Inscriptional_Parthian","Inscriptional_Pahlavi","Psalter_Pahlavi","Old_Turkic","Old_Hungarian","Hanifi_Rohingya","Old_Sogdian","Sogdian","Elymaic","Brahmi","Kaithi","Sora_Sompeng","Chakma","Mahajani","Sharada","Khojki","Multani","Khudawadi","Grantha","Newa","Tirhuta","Siddham","Modi","Takri","Ahom","Dogra","Warang_Citi","Nandinagari","Zanabazar_Square","Soyombo","Pau_Cin_Hau","Bhaiksuki","Marchen","Masaram_Gondi","Gunjala_Gondi","Makasar","Cuneiform","Egyptian_Hieroglyphs","Anatolian_Hieroglyphs","Mro","Bassa_Vah","Pahawh_Hmong","Medefaidrin","Miao","Tangut","Nushu","Duployan","SignWriting","Nyiakeng_Puachue_Hmong","Wancho","Mende_Kikakui","Adlam"],"eaw":["N","Na","A","W","H","F"]}');
var $747425b437e121da$var$trie = new (0, import_unicode_trie.default)((0, import_base64_js.default).toByteArray(""));
var $747425b437e121da$var$log2 = Math.log2 || ((n3) => Math.log(n3) / Math.LN2);
var $747425b437e121da$var$bits = (n3) => $747425b437e121da$var$log2(n3) + 1 | 0;
var $747425b437e121da$var$CATEGORY_BITS = $747425b437e121da$var$bits((0, /* @__PURE__ */ $parcel$interopDefault($f4087201da764553$exports)).categories.length - 1);
var $747425b437e121da$var$COMBINING_BITS = $747425b437e121da$var$bits((0, /* @__PURE__ */ $parcel$interopDefault($f4087201da764553$exports)).combiningClasses.length - 1);
var $747425b437e121da$var$SCRIPT_BITS = $747425b437e121da$var$bits((0, /* @__PURE__ */ $parcel$interopDefault($f4087201da764553$exports)).scripts.length - 1);
var $747425b437e121da$var$EAW_BITS = $747425b437e121da$var$bits((0, /* @__PURE__ */ $parcel$interopDefault($f4087201da764553$exports)).eaw.length - 1);
var $747425b437e121da$var$NUMBER_BITS = 10;
var $747425b437e121da$var$CATEGORY_SHIFT = $747425b437e121da$var$COMBINING_BITS + $747425b437e121da$var$SCRIPT_BITS + $747425b437e121da$var$EAW_BITS + $747425b437e121da$var$NUMBER_BITS;
var $747425b437e121da$var$COMBINING_SHIFT = $747425b437e121da$var$SCRIPT_BITS + $747425b437e121da$var$EAW_BITS + $747425b437e121da$var$NUMBER_BITS;
var $747425b437e121da$var$SCRIPT_SHIFT = $747425b437e121da$var$EAW_BITS + $747425b437e121da$var$NUMBER_BITS;
var $747425b437e121da$var$EAW_SHIFT = $747425b437e121da$var$NUMBER_BITS;
var $747425b437e121da$var$CATEGORY_MASK = (1 << $747425b437e121da$var$CATEGORY_BITS) - 1;
var $747425b437e121da$var$COMBINING_MASK = (1 << $747425b437e121da$var$COMBINING_BITS) - 1;
var $747425b437e121da$var$SCRIPT_MASK = (1 << $747425b437e121da$var$SCRIPT_BITS) - 1;
var $747425b437e121da$var$EAW_MASK = (1 << $747425b437e121da$var$EAW_BITS) - 1;
var $747425b437e121da$var$NUMBER_MASK = (1 << $747425b437e121da$var$NUMBER_BITS) - 1;
var $747425b437e121da$export$2e2bcd8739ae039 = {
  getCategory: $747425b437e121da$export$410364bbb673ddbc,
  getCombiningClass: $747425b437e121da$export$c03b919c6651ed55,
  getScript: $747425b437e121da$export$941569448d136665,
  getEastAsianWidth: $747425b437e121da$export$92f6187db8ca6d26,
  getNumericValue: $747425b437e121da$export$7d1258ebb7625a0d,
  isAlphabetic: $747425b437e121da$export$52c8ea63abd07594,
  isDigit: $747425b437e121da$export$727d9dbc4fbb948f,
  isPunctuation: $747425b437e121da$export$a5b49f4dc6a07d2c,
  isLowerCase: $747425b437e121da$export$7b6804e8df61fcf5,
  isUpperCase: $747425b437e121da$export$aebd617640818cda,
  isTitleCase: $747425b437e121da$export$de8b4ee23b2cf823,
  isWhiteSpace: $747425b437e121da$export$3c52dd84024ae72c,
  isBaseForm: $747425b437e121da$export$a11bdcffe109e74b,
  isMark: $747425b437e121da$export$e33ad6871e762338
};

// node_modules/fontkit/dist/module.mjs
var import_unicode_trie2 = __toESM(require_unicode_trie(), 1);
var import_dfa = __toESM(require_dfa(), 1);
var import_clone = __toESM(require_clone(), 1);
var import_tiny_inflate = __toESM(require_tiny_inflate(), 1);
var decompress = __toESM(require_decompress(), 1);
function $parcel$export(e, n3, v3, s3) {
  Object.defineProperty(e, n3, { get: v3, set: s3, enumerable: true, configurable: true });
}
function $parcel$interopDefault2(a) {
  return a && a.__esModule ? a.default : a;
}
function $8857867ee3ddfad5$export$36b2f24e97d43be(format) {
  $8857867ee3ddfad5$var$formats.push(format);
}
function $8857867ee3ddfad5$export$fa5499edb1ab414a(filename, postscriptName) {
  let buffer = $5OpyM$readFileSync(filename);
  return $8857867ee3ddfad5$export$185802fd694ee1f5(buffer, postscriptName);
}
function $8857867ee3ddfad5$export$3ce6949f20cea765(filename, postscriptName, callback) {
  if (typeof postscriptName === "function") {
    callback = postscriptName;
    postscriptName = null;
  }
  $5OpyM$readFile(filename, function(err, buffer) {
    if (err)
      return callback(err);
    try {
      var font = $8857867ee3ddfad5$export$185802fd694ee1f5(buffer, postscriptName);
    } catch (e) {
      return callback(e);
    }
    return callback(null, font);
  });
  return;
}
function $8857867ee3ddfad5$export$185802fd694ee1f5(buffer, postscriptName) {
  for (let i3 = 0;i3 < $8857867ee3ddfad5$var$formats.length; i3++) {
    let format = $8857867ee3ddfad5$var$formats[i3];
    if (format.probe(buffer)) {
      let font = new format(new import_restructure.default.DecodeStream(buffer));
      if (postscriptName)
        return font.getFont(postscriptName);
      return font;
    }
  }
  throw new Error("Unknown font format");
}
function $8857867ee3ddfad5$export$5157e7780d44cc36(lang = "en") {
  $8857867ee3ddfad5$export$42940898df819940 = lang;
}
function $df9bc573962369ff$export$69a3209f1a06c04d(target, key1, descriptor) {
  if (descriptor.get) {
    let get = descriptor.get;
    descriptor.get = function() {
      let value15 = get.call(this);
      Object.defineProperty(this, key1, {
        value: value15
      });
      return value15;
    };
  } else if (typeof descriptor.value === "function") {
    let fn = descriptor.value;
    return {
      get() {
        let $df9bc573962369ff$export$69a3209f1a06c04d2 = new Map;
        function memoized(...args) {
          let key = args.length > 0 ? args[0] : "value";
          if ($df9bc573962369ff$export$69a3209f1a06c04d2.has(key))
            return $df9bc573962369ff$export$69a3209f1a06c04d2.get(key);
          let result = fn.apply(this, args);
          $df9bc573962369ff$export$69a3209f1a06c04d2.set(key, result);
          return result;
        }
        Object.defineProperty(this, key1, {
          value: memoized
        });
        return memoized;
      }
    };
  }
}
function $111d7d948974b54a$export$badc544e0651b6b1(platformID, encodingID, languageID = 0) {
  if (platformID === 1 && $111d7d948974b54a$export$479e671907f486d1[languageID])
    return $111d7d948974b54a$export$479e671907f486d1[languageID];
  return $111d7d948974b54a$export$6fef87b7618bdf0b[platformID][encodingID];
}
function $401800e36a580e62$export$df0008c6ff2da22a(SubTable) {
  let Lookup = new import_restructure.default.Struct({
    lookupType: import_restructure.default.uint16,
    flags: $401800e36a580e62$var$LookupFlags,
    subTableCount: import_restructure.default.uint16,
    subTables: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, SubTable), "subTableCount"),
    markFilteringSet: new import_restructure.default.Optional(import_restructure.default.uint16, (t3) => t3.flags.flags.useMarkFilteringSet)
  });
  return new import_restructure.default.LazyArray(new import_restructure.default.Pointer(import_restructure.default.uint16, Lookup), import_restructure.default.uint16);
}
function $c35aa0a165e05d15$export$79f7d93d790934ba(entryData = {}, lookupType = import_restructure.default.uint16) {
  let entry = Object.assign({
    newState: import_restructure.default.uint16,
    flags: import_restructure.default.uint16
  }, entryData);
  let Entry = new import_restructure.default.Struct(entry);
  let StateArray = new $c35aa0a165e05d15$export$c5af1eebc882e39a(new import_restructure.default.Array(import_restructure.default.uint16, (t3) => t3.nClasses));
  let StateHeader = new import_restructure.default.Struct({
    nClasses: import_restructure.default.uint32,
    classTable: new import_restructure.default.Pointer(import_restructure.default.uint32, new $c35aa0a165e05d15$export$8351f8c2ae2f103c(lookupType)),
    stateArray: new import_restructure.default.Pointer(import_restructure.default.uint32, StateArray),
    entryTable: new import_restructure.default.Pointer(import_restructure.default.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(Entry))
  });
  return StateHeader;
}
function $c35aa0a165e05d15$export$105027425199cc51(entryData = {}, lookupType = import_restructure.default.uint16) {
  let ClassLookupTable = new import_restructure.default.Struct({
    version() {
      return 8;
    },
    firstGlyph: import_restructure.default.uint16,
    values: new import_restructure.default.Array(import_restructure.default.uint8, import_restructure.default.uint16)
  });
  let entry = Object.assign({
    newStateOffset: import_restructure.default.uint16,
    newState: (t3) => (t3.newStateOffset - (t3.parent.stateArray.base - t3.parent._startOffset)) / t3.parent.nClasses,
    flags: import_restructure.default.uint16
  }, entryData);
  let Entry = new import_restructure.default.Struct(entry);
  let StateArray = new $c35aa0a165e05d15$export$c5af1eebc882e39a(new import_restructure.default.Array(import_restructure.default.uint8, (t3) => t3.nClasses));
  let StateHeader1 = new import_restructure.default.Struct({
    nClasses: import_restructure.default.uint16,
    classTable: new import_restructure.default.Pointer(import_restructure.default.uint16, ClassLookupTable),
    stateArray: new import_restructure.default.Pointer(import_restructure.default.uint16, StateArray),
    entryTable: new import_restructure.default.Pointer(import_restructure.default.uint16, new $c35aa0a165e05d15$export$c5af1eebc882e39a(Entry))
  });
  return StateHeader1;
}
function $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(arr, cmp) {
  let min = 0;
  let max = arr.length - 1;
  while (min <= max) {
    let mid = min + max >> 1;
    let res = cmp(arr[mid]);
    if (res < 0)
      max = mid - 1;
    else if (res > 0)
      min = mid + 1;
    else
      return mid;
  }
  return -1;
}
function $f3ad94c9f84f4d57$export$d02631cccf789723(index, end) {
  let $f3ad94c9f84f4d57$export$d02631cccf7897232 = [];
  while (index < end)
    $f3ad94c9f84f4d57$export$d02631cccf7897232.push(index++);
  return $f3ad94c9f84f4d57$export$d02631cccf7897232;
}
function $a5878e4f4663c9e2$export$ce50e82f12a827a4(tag) {
  return $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS[tag];
}
function $a5878e4f4663c9e2$export$e5cb25e204fb8450(string7) {
  let len = string7.length;
  let idx = 0;
  while (idx < len) {
    let code = string7.charCodeAt(idx++);
    if (55296 <= code && code <= 56319 && idx < len) {
      let next = string7.charCodeAt(idx);
      if (56320 <= next && next <= 57343) {
        idx++;
        code = ((code & 1023) << 10) + (next & 1023) + 65536;
      }
    }
    let script2 = $747425b437e121da$export$2e2bcd8739ae039.getScript(code);
    if (script2 !== "Common" && script2 !== "Inherited" && script2 !== "Unknown")
      return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script2];
  }
  return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS.Unknown;
}
function $a5878e4f4663c9e2$export$16fab0757cfc223d(codePoints) {
  for (let i3 = 0;i3 < codePoints.length; i3++) {
    let codePoint = codePoints[i3];
    let script3 = $747425b437e121da$export$2e2bcd8739ae039.getScript(codePoint);
    if (script3 !== "Common" && script3 !== "Inherited" && script3 !== "Unknown")
      return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script3];
  }
  return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS.Unknown;
}
function $a5878e4f4663c9e2$export$9fddb9d0dd7d8a54(script4) {
  if ($a5878e4f4663c9e2$var$RTL[script4])
    return "rtl";
  return "ltr";
}
function $b603e0ade09ad01e$export$b813f7d2a1677c16(features) {
  let res = {};
  for (let k in features) {
    let r;
    if (r = $b603e0ade09ad01e$var$OTMapping[k]) {
      if (res[r[0]] == null)
        res[r[0]] = {};
      res[r[0]][r[1]] = features[k];
    }
  }
  return res;
}
function $b603e0ade09ad01e$var$mapFeatureStrings(f3) {
  let [type47, setting] = f3;
  if (isNaN(type47))
    var typeCode = $b603e0ade09ad01e$var$features[type47] && $b603e0ade09ad01e$var$features[type47].code;
  else
    var typeCode = type47;
  if (isNaN(setting))
    var settingCode = $b603e0ade09ad01e$var$features[type47] && $b603e0ade09ad01e$var$features[type47][setting];
  else
    var settingCode = setting;
  return [
    typeCode,
    settingCode
  ];
}
function $b603e0ade09ad01e$export$bd6df347a4f391c4(features) {
  let res = {};
  if (Array.isArray(features))
    for (let k = 0;k < features.length; k++) {
      let r;
      let f3 = $b603e0ade09ad01e$var$mapFeatureStrings(features[k]);
      if (r = $b603e0ade09ad01e$var$AATMapping[f3[0]] && $b603e0ade09ad01e$var$AATMapping[f3[0]][f3[1]])
        res[r] = true;
    }
  else if (typeof features === "object")
    for (let type47 in features) {
      let feature = features[type47];
      for (let setting in feature) {
        let r;
        let f3 = $b603e0ade09ad01e$var$mapFeatureStrings([
          type47,
          setting
        ]);
        if (feature[setting] && (r = $b603e0ade09ad01e$var$AATMapping[f3[0]] && $b603e0ade09ad01e$var$AATMapping[f3[0]][f3[1]]))
          res[r] = true;
      }
    }
  return Object.keys(res);
}
function $696c050512749a50$var$swap(glyphs, rangeA, rangeB, reverseA = false, reverseB = false) {
  let end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);
  if (reverseB)
    end.reverse();
  let start = glyphs.splice(rangeA[0], rangeA[1], ...end);
  if (reverseA)
    start.reverse();
  glyphs.splice(rangeB[0] - (rangeA[1] - 1), 0, ...start);
  return glyphs;
}
function $696c050512749a50$var$reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {
  let length = lastGlyph - firstGlyph + 1;
  switch (verb) {
    case 0:
      return glyphs;
    case 1:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        1
      ], [
        lastGlyph,
        0
      ]);
    case 2:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        0
      ], [
        lastGlyph,
        1
      ]);
    case 3:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        1
      ], [
        lastGlyph,
        1
      ]);
    case 4:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        2
      ], [
        lastGlyph,
        0
      ]);
    case 5:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        2
      ], [
        lastGlyph,
        0
      ], true, false);
    case 6:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        0
      ], [
        lastGlyph,
        2
      ]);
    case 7:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        0
      ], [
        lastGlyph,
        2
      ], false, true);
    case 8:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        1
      ], [
        lastGlyph,
        2
      ]);
    case 9:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        1
      ], [
        lastGlyph,
        2
      ], false, true);
    case 10:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        2
      ], [
        lastGlyph,
        1
      ]);
    case 11:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        2
      ], [
        lastGlyph,
        1
      ], true, false);
    case 12:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        2
      ], [
        lastGlyph,
        2
      ]);
    case 13:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        2
      ], [
        lastGlyph,
        2
      ], true, false);
    case 14:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        2
      ], [
        lastGlyph,
        2
      ], false, true);
    case 15:
      return $696c050512749a50$var$swap(glyphs, [
        firstGlyph,
        2
      ], [
        lastGlyph,
        2
      ], true, true);
    default:
      throw new Error(`Unknown verb: ${verb}`);
  }
}
function $5cab828b3273a17c$var$getShapingClass(codePoint) {
  let res = $5cab828b3273a17c$var$trie.get(codePoint);
  if (res)
    return res - 1;
  let category = $747425b437e121da$export$2e2bcd8739ae039.getCategory(codePoint);
  if (category === "Mn" || category === "Me" || category === "Cf")
    return $5cab828b3273a17c$var$ShapingClasses.Transparent;
  return $5cab828b3273a17c$var$ShapingClasses.Non_Joining;
}
function $ce39c5154631fd0c$var$getType(code) {
  if ($ce39c5154631fd0c$var$isL(code))
    return $ce39c5154631fd0c$var$L;
  if ($ce39c5154631fd0c$var$isV(code))
    return $ce39c5154631fd0c$var$V;
  if ($ce39c5154631fd0c$var$isT(code))
    return $ce39c5154631fd0c$var$T;
  if ($ce39c5154631fd0c$var$isLV(code))
    return $ce39c5154631fd0c$var$LV;
  if ($ce39c5154631fd0c$var$isLVT(code))
    return $ce39c5154631fd0c$var$LVT;
  if ($ce39c5154631fd0c$var$isTone(code))
    return $ce39c5154631fd0c$var$M;
  return $ce39c5154631fd0c$var$X;
}
function $ce39c5154631fd0c$var$getGlyph(font, code, features) {
  return new $8cba766f534deddd$export$2e2bcd8739ae039(font, font.glyphForCodePoint(code).id, [
    code
  ], features);
}
function $ce39c5154631fd0c$var$decompose(glyphs, i3, font) {
  let glyph = glyphs[i3];
  let code = glyph.codePoints[0];
  let s3 = code - $ce39c5154631fd0c$var$HANGUL_BASE;
  let t3 = $ce39c5154631fd0c$var$T_BASE + s3 % $ce39c5154631fd0c$var$T_COUNT;
  s3 = s3 / $ce39c5154631fd0c$var$T_COUNT | 0;
  let l = $ce39c5154631fd0c$var$L_BASE + s3 / $ce39c5154631fd0c$var$V_COUNT | 0;
  let v3 = $ce39c5154631fd0c$var$V_BASE + s3 % $ce39c5154631fd0c$var$V_COUNT;
  if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v3) || t3 !== $ce39c5154631fd0c$var$T_BASE && !font.hasGlyphForCodePoint(t3))
    return i3;
  let ljmo = $ce39c5154631fd0c$var$getGlyph(font, l, glyph.features);
  ljmo.features.ljmo = true;
  let vjmo = $ce39c5154631fd0c$var$getGlyph(font, v3, glyph.features);
  vjmo.features.vjmo = true;
  let insert = [
    ljmo,
    vjmo
  ];
  if (t3 > $ce39c5154631fd0c$var$T_BASE) {
    let tjmo = $ce39c5154631fd0c$var$getGlyph(font, t3, glyph.features);
    tjmo.features.tjmo = true;
    insert.push(tjmo);
  }
  glyphs.splice(i3, 1, ...insert);
  return i3 + insert.length - 1;
}
function $ce39c5154631fd0c$var$compose(glyphs, i3, font) {
  let glyph = glyphs[i3];
  let code = glyphs[i3].codePoints[0];
  let type47 = $ce39c5154631fd0c$var$getType(code);
  let prev = glyphs[i3 - 1].codePoints[0];
  let prevType = $ce39c5154631fd0c$var$getType(prev);
  let lv, ljmo, vjmo, tjmo;
  if (prevType === $ce39c5154631fd0c$var$LV && type47 === $ce39c5154631fd0c$var$T) {
    lv = prev;
    tjmo = glyph;
  } else {
    if (type47 === $ce39c5154631fd0c$var$V) {
      ljmo = glyphs[i3 - 1];
      vjmo = glyph;
    } else {
      ljmo = glyphs[i3 - 2];
      vjmo = glyphs[i3 - 1];
      tjmo = glyph;
    }
    let l = ljmo.codePoints[0];
    let v3 = vjmo.codePoints[0];
    if ($ce39c5154631fd0c$var$isCombiningL(l) && $ce39c5154631fd0c$var$isCombiningV(v3))
      lv = $ce39c5154631fd0c$var$HANGUL_BASE + ((l - $ce39c5154631fd0c$var$L_BASE) * $ce39c5154631fd0c$var$V_COUNT + (v3 - $ce39c5154631fd0c$var$V_BASE)) * $ce39c5154631fd0c$var$T_COUNT;
  }
  let t3 = tjmo && tjmo.codePoints[0] || $ce39c5154631fd0c$var$T_BASE;
  if (lv != null && (t3 === $ce39c5154631fd0c$var$T_BASE || $ce39c5154631fd0c$var$isCombiningT(t3))) {
    let s3 = lv + (t3 - $ce39c5154631fd0c$var$T_BASE);
    if (font.hasGlyphForCodePoint(s3)) {
      let del = prevType === $ce39c5154631fd0c$var$V ? 3 : 2;
      glyphs.splice(i3 - del + 1, del, $ce39c5154631fd0c$var$getGlyph(font, s3, glyph.features));
      return i3 - del + 1;
    }
  }
  if (ljmo)
    ljmo.features.ljmo = true;
  if (vjmo)
    vjmo.features.vjmo = true;
  if (tjmo)
    tjmo.features.tjmo = true;
  if (prevType === $ce39c5154631fd0c$var$LV) {
    $ce39c5154631fd0c$var$decompose(glyphs, i3 - 1, font);
    return i3 + 1;
  }
  return i3;
}
function $ce39c5154631fd0c$var$getLength(code) {
  switch ($ce39c5154631fd0c$var$getType(code)) {
    case $ce39c5154631fd0c$var$LV:
    case $ce39c5154631fd0c$var$LVT:
      return 1;
    case $ce39c5154631fd0c$var$V:
      return 2;
    case $ce39c5154631fd0c$var$T:
      return 3;
  }
}
function $ce39c5154631fd0c$var$reorderToneMark(glyphs, i3, font) {
  let glyph = glyphs[i3];
  let code = glyphs[i3].codePoints[0];
  if (font.glyphForCodePoint(code).advanceWidth === 0)
    return;
  let prev = glyphs[i3 - 1].codePoints[0];
  let len = $ce39c5154631fd0c$var$getLength(prev);
  glyphs.splice(i3, 1);
  return glyphs.splice(i3 - len, 0, glyph);
}
function $ce39c5154631fd0c$var$insertDottedCircle(glyphs, i3, font) {
  let glyph = glyphs[i3];
  let code = glyphs[i3].codePoints[0];
  if (font.hasGlyphForCodePoint($ce39c5154631fd0c$var$DOTTED_CIRCLE)) {
    let dottedCircle = $ce39c5154631fd0c$var$getGlyph(font, $ce39c5154631fd0c$var$DOTTED_CIRCLE, glyph.features);
    let idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i3 : i3 + 1;
    glyphs.splice(idx, 0, dottedCircle);
    i3++;
  }
  return i3;
}
function $c6b883ac45fa55f1$var$indicCategory(glyph) {
  return $c6b883ac45fa55f1$var$trie.get(glyph.codePoints[0]) >> 8;
}
function $c6b883ac45fa55f1$var$indicPosition(glyph) {
  return 1 << ($c6b883ac45fa55f1$var$trie.get(glyph.codePoints[0]) & 255);
}
function $c6b883ac45fa55f1$var$setupSyllables(font, glyphs) {
  let syllable = 0;
  let last = 0;
  for (let [start, end, tags] of $c6b883ac45fa55f1$var$stateMachine.match(glyphs.map($c6b883ac45fa55f1$var$indicCategory))) {
    if (start > last) {
      ++syllable;
      for (let i3 = last;i3 < start; i3++)
        glyphs[i3].shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo($b9778c6b60232cf0$export$a513ea61a7bee91c.X, $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.End, "non_indic_cluster", syllable);
    }
    ++syllable;
    for (let i3 = start;i3 <= end; i3++)
      glyphs[i3].shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo(1 << $c6b883ac45fa55f1$var$indicCategory(glyphs[i3]), $c6b883ac45fa55f1$var$indicPosition(glyphs[i3]), tags[0], syllable);
    last = end + 1;
  }
  if (last < glyphs.length) {
    ++syllable;
    for (let i3 = last;i3 < glyphs.length; i3++)
      glyphs[i3].shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo($b9778c6b60232cf0$export$a513ea61a7bee91c.X, $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.End, "non_indic_cluster", syllable);
  }
}
function $c6b883ac45fa55f1$var$isConsonant(glyph) {
  return glyph.shaperInfo.category & $b9778c6b60232cf0$export$8519deaa7de2b07;
}
function $c6b883ac45fa55f1$var$isJoiner(glyph) {
  return glyph.shaperInfo.category & $b9778c6b60232cf0$export$bbcd928767338e0d;
}
function $c6b883ac45fa55f1$var$isHalantOrCoeng(glyph) {
  return glyph.shaperInfo.category & $b9778c6b60232cf0$export$ca9599b2a300afc;
}
function $c6b883ac45fa55f1$var$wouldSubstitute(glyphs, feature) {
  for (let glyph of glyphs)
    glyph.features = {
      [feature]: true
    };
  let GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;
  GSUB.applyFeatures([
    feature
  ], glyphs);
  return glyphs.length === 1;
}
function $c6b883ac45fa55f1$var$consonantPosition(font, consonant, virama) {
  let glyphs = [
    virama,
    consonant,
    virama
  ];
  if ($c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(0, 2), "blwf") || $c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(1, 3), "blwf"))
    return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C;
  else if ($c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(0, 2), "pstf") || $c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(1, 3), "pstf"))
    return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C;
  else if ($c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(0, 2), "pref") || $c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(1, 3), "pref"))
    return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C;
  return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C;
}
function $c6b883ac45fa55f1$var$initialReordering(font, glyphs, plan) {
  let indicConfig = plan.indicConfig;
  let features = font._layoutEngine.engine.GSUBProcessor.features;
  let dottedCircle = font.glyphForCodePoint(9676).id;
  let virama = font.glyphForCodePoint(indicConfig.virama).id;
  if (virama) {
    let info = new $8cba766f534deddd$export$2e2bcd8739ae039(font, virama, [
      indicConfig.virama
    ]);
    for (let i3 = 0;i3 < glyphs.length; i3++)
      if (glyphs[i3].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C)
        glyphs[i3].shaperInfo.position = $c6b883ac45fa55f1$var$consonantPosition(font, glyphs[i3].copy(), info);
  }
  for (let start = 0, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, 0);start < glyphs.length; start = end, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, start)) {
    let { category, syllableType } = glyphs[start].shaperInfo;
    if (syllableType === "symbol_cluster" || syllableType === "non_indic_cluster")
      continue;
    if (syllableType === "broken_cluster" && dottedCircle) {
      let g = new $8cba766f534deddd$export$2e2bcd8739ae039(font, dottedCircle, [
        9676
      ]);
      g.shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo(1 << $c6b883ac45fa55f1$var$indicCategory(g), $c6b883ac45fa55f1$var$indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable);
      let i3 = start;
      while (i3 < end && glyphs[i3].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Repha)
        i3++;
      glyphs.splice(i3++, 0, g);
      end++;
    }
    let base = end;
    let limit = start;
    let hasReph = false;
    if (indicConfig.rephPos !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === "Implicit" && !$c6b883ac45fa55f1$var$isJoiner(glyphs[start + 2]) || indicConfig.rephMode === "Explicit" && glyphs[start + 2].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ)) {
      let g = [
        glyphs[start].copy(),
        glyphs[start + 1].copy(),
        glyphs[start + 2].copy()
      ];
      if ($c6b883ac45fa55f1$var$wouldSubstitute(g.slice(0, 2), "rphf") || indicConfig.rephMode === "Explicit" && $c6b883ac45fa55f1$var$wouldSubstitute(g, "rphf")) {
        limit += 2;
        while (limit < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[limit]))
          limit++;
        base = start;
        hasReph = true;
      }
    } else if (indicConfig.rephMode === "Log_Repha" && glyphs[start].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Repha) {
      limit++;
      while (limit < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[limit]))
        limit++;
      base = start;
      hasReph = true;
    }
    switch (indicConfig.basePos) {
      case "Last": {
        let i3 = end;
        let seenBelow = false;
        do {
          let info = glyphs[--i3].shaperInfo;
          if ($c6b883ac45fa55f1$var$isConsonant(glyphs[i3])) {
            if (info.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C && (info.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C || seenBelow)) {
              base = i3;
              break;
            }
            if (info.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C)
              seenBelow = true;
            base = i3;
          } else if (start < i3 && info.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ && glyphs[i3 - 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H)
            break;
        } while (i3 > limit);
        break;
      }
      case "First":
        base = start;
        for (let i3 = base + 1;i3 < end; i3++)
          if ($c6b883ac45fa55f1$var$isConsonant(glyphs[i3]))
            glyphs[i3].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C;
    }
    if (hasReph && base === start && limit - base <= 2)
      hasReph = false;
    for (let i12 = start;i12 < base; i12++) {
      let info = glyphs[i12].shaperInfo;
      info.position = Math.min($b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_C, info.position);
    }
    if (base < end)
      glyphs[base].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C;
    for (let i22 = base + 1;i22 < end; i22++)
      if (glyphs[i22].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) {
        for (let j = i22 + 1;j < end; j++)
          if ($c6b883ac45fa55f1$var$isConsonant(glyphs[j])) {
            glyphs[j].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Final_C;
            break;
          }
        break;
      }
    if (hasReph)
      glyphs[start].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph;
    if (plan.isOldSpec) {
      let disallowDoubleHalants = plan.unicodeScript !== "Malayalam";
      for (let i3 = base + 1;i3 < end; i3++)
        if (glyphs[i3].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H) {
          let j;
          for (j = end - 1;j > i3; j--) {
            if ($c6b883ac45fa55f1$var$isConsonant(glyphs[j]) || disallowDoubleHalants && glyphs[j].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H)
              break;
          }
          if (glyphs[j].shaperInfo.category !== $b9778c6b60232cf0$export$a513ea61a7bee91c.H && j > i3) {
            let t3 = glyphs[i3];
            glyphs.splice(i3, 0, ...glyphs.splice(i3 + 1, j - i3));
            glyphs[j] = t3;
          }
          break;
        }
    }
    let lastPos = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Start;
    for (let i3 = start;i3 < end; i3++) {
      let info = glyphs[i3].shaperInfo;
      if (info.category & ($b9778c6b60232cf0$export$bbcd928767338e0d | $b9778c6b60232cf0$export$a513ea61a7bee91c.N | $b9778c6b60232cf0$export$a513ea61a7bee91c.RS | $b9778c6b60232cf0$export$a513ea61a7bee91c.CM | $b9778c6b60232cf0$export$ca9599b2a300afc & info.category)) {
        info.position = lastPos;
        if (info.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H && info.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {
          for (let j = i3;j > start; j--)
            if (glyphs[j - 1].shaperInfo.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {
              info.position = glyphs[j - 1].shaperInfo.position;
              break;
            }
        }
      } else if (info.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD)
        lastPos = info.position;
    }
    let last = base;
    for (let i4 = base + 1;i4 < end; i4++) {
      if ($c6b883ac45fa55f1$var$isConsonant(glyphs[i4])) {
        for (let j = last + 1;j < i4; j++)
          if (glyphs[j].shaperInfo.position < $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD)
            glyphs[j].shaperInfo.position = glyphs[i4].shaperInfo.position;
        last = i4;
      } else if (glyphs[i4].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M)
        last = i4;
    }
    let arr = glyphs.slice(start, end);
    arr.sort((a, b) => a.shaperInfo.position - b.shaperInfo.position);
    glyphs.splice(start, arr.length, ...arr);
    for (let i5 = start;i5 < end; i5++)
      if (glyphs[i5].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) {
        base = i5;
        break;
      }
    for (let i6 = start;i6 < end && glyphs[i6].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph; i6++)
      glyphs[i6].features.rphf = true;
    let blwf = !plan.isOldSpec && indicConfig.blwfMode === "Pre_And_Post";
    for (let i7 = start;i7 < base; i7++) {
      glyphs[i7].features.half = true;
      if (blwf)
        glyphs[i7].features.blwf = true;
    }
    for (let i8 = base + 1;i8 < end; i8++) {
      glyphs[i8].features.abvf = true;
      glyphs[i8].features.pstf = true;
      glyphs[i8].features.blwf = true;
    }
    if (plan.isOldSpec && plan.unicodeScript === "Devanagari") {
      for (let i3 = start;i3 + 1 < base; i3++)
        if (glyphs[i3].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Ra && glyphs[i3 + 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H && (i3 + 1 === base || glyphs[i3 + 2].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ)) {
          glyphs[i3].features.blwf = true;
          glyphs[i3 + 1].features.blwf = true;
        }
    }
    let prefLen = 2;
    if (features.pref && base + prefLen < end)
      for (let i9 = base + 1;i9 + prefLen - 1 < end; i9++) {
        let g = [
          glyphs[i9].copy(),
          glyphs[i9 + 1].copy()
        ];
        if ($c6b883ac45fa55f1$var$wouldSubstitute(g, "pref")) {
          for (let j = 0;j < prefLen; j++)
            glyphs[i9++].features.pref = true;
          if (features.cfar)
            for (;i9 < end; i9++)
              glyphs[i9].features.cfar = true;
          break;
        }
      }
    for (let i10 = start + 1;i10 < end; i10++)
      if ($c6b883ac45fa55f1$var$isJoiner(glyphs[i10])) {
        let nonJoiner = glyphs[i10].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWNJ;
        let j = i10;
        do {
          j--;
          if (nonJoiner)
            delete glyphs[j].features.half;
        } while (j > start && !$c6b883ac45fa55f1$var$isConsonant(glyphs[j]));
      }
  }
}
function $c6b883ac45fa55f1$var$finalReordering(font, glyphs, plan) {
  let indicConfig = plan.indicConfig;
  let features = font._layoutEngine.engine.GSUBProcessor.features;
  for (let start = 0, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, 0);start < glyphs.length; start = end, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, start)) {
    let tryPref = !!features.pref;
    let base = start;
    for (;base < end; base++)
      if (glyphs[base].shaperInfo.position >= $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) {
        if (tryPref && base + 1 < end) {
          for (let i3 = base + 1;i3 < end; i3++)
            if (glyphs[i3].features.pref) {
              if (!(glyphs[i3].substituted && glyphs[i3].isLigated && !glyphs[i3].isMultiplied)) {
                base = i3;
                while (base < end && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[base]))
                  base++;
                glyphs[base].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.BASE_C;
                tryPref = false;
              }
              break;
            }
        }
        if (plan.unicodeScript === "Malayalam")
          for (let i3 = base + 1;i3 < end; i3++) {
            while (i3 < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[i3]))
              i3++;
            if (i3 === end || !$c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[i3]))
              break;
            i3++;
            while (i3 < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[i3]))
              i3++;
            if (i3 < end && $c6b883ac45fa55f1$var$isConsonant(glyphs[i3]) && glyphs[i3].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C) {
              base = i3;
              glyphs[base].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C;
            }
          }
        if (start < base && glyphs[base].shaperInfo.position > $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C)
          base--;
        break;
      }
    if (base === end && start < base && glyphs[base - 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ)
      base--;
    if (base < end)
      while (start < base && glyphs[base].shaperInfo.category & ($b9778c6b60232cf0$export$a513ea61a7bee91c.N | $b9778c6b60232cf0$export$ca9599b2a300afc))
        base--;
    if (start + 1 < end && start < base) {
      let newPos = base === end ? base - 2 : base - 1;
      if (plan.unicodeScript !== "Malayalam" && plan.unicodeScript !== "Tamil") {
        while (newPos > start && !(glyphs[newPos].shaperInfo.category & ($b9778c6b60232cf0$export$a513ea61a7bee91c.M | $b9778c6b60232cf0$export$ca9599b2a300afc)))
          newPos--;
        if ($c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {
          if (newPos + 1 < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[newPos + 1]))
            newPos++;
        } else
          newPos = start;
      }
      if (start < newPos && glyphs[newPos].shaperInfo.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {
        for (let i3 = newPos;i3 > start; i3--)
          if (glyphs[i3 - 1].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {
            let oldPos = i3 - 1;
            if (oldPos < base && base <= newPos)
              base--;
            let tmp = glyphs[oldPos];
            glyphs.splice(oldPos, 0, ...glyphs.splice(oldPos + 1, newPos - oldPos));
            glyphs[newPos] = tmp;
            newPos--;
          }
      }
    }
    if (start + 1 < end && glyphs[start].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph && glyphs[start].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {
      let newRephPos;
      let rephPos = indicConfig.rephPos;
      let found = false;
      if (rephPos !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post) {
        newRephPos = start + 1;
        while (newRephPos < base && !$c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos]))
          newRephPos++;
        if (newRephPos < base && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) {
          if (newRephPos + 1 < base && $c6b883ac45fa55f1$var$isJoiner(glyphs[newRephPos + 1]))
            newRephPos++;
          found = true;
        }
        if (!found && rephPos === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main) {
          newRephPos = base;
          while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main)
            newRephPos++;
          found = newRephPos < end;
        }
        if (!found && rephPos === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Sub) {
          newRephPos = base;
          while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & ($b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C | $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post | $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD)))
            newRephPos++;
          found = newRephPos < end;
        }
      }
      if (!found) {
        newRephPos = start + 1;
        while (newRephPos < base && !$c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos]))
          newRephPos++;
        if (newRephPos < base && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) {
          if (newRephPos + 1 < base && $c6b883ac45fa55f1$var$isJoiner(glyphs[newRephPos + 1]))
            newRephPos++;
          found = true;
        }
      }
      if (!found) {
        newRephPos = end - 1;
        while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD)
          newRephPos--;
        if ($c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) {
          for (let i3 = base + 1;i3 < newRephPos; i3++)
            if (glyphs[i3].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M)
              newRephPos--;
        }
      }
      let reph = glyphs[start];
      glyphs.splice(start, 0, ...glyphs.splice(start + 1, newRephPos - start));
      glyphs[newRephPos] = reph;
      if (start < base && base <= newRephPos)
        base--;
    }
    if (tryPref && base + 1 < end) {
      for (let i3 = base + 1;i3 < end; i3++)
        if (glyphs[i3].features.pref) {
          if (glyphs[i3].isLigated && !glyphs[i3].isMultiplied) {
            let newPos = base;
            if (plan.unicodeScript !== "Malayalam" && plan.unicodeScript !== "Tamil") {
              while (newPos > start && !(glyphs[newPos - 1].shaperInfo.category & ($b9778c6b60232cf0$export$a513ea61a7bee91c.M | $b9778c6b60232cf0$export$ca9599b2a300afc)))
                newPos--;
              if (newPos > start && glyphs[newPos - 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) {
                let oldPos2 = i3;
                for (let j = base + 1;j < oldPos2; j++)
                  if (glyphs[j].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) {
                    newPos--;
                    break;
                  }
              }
            }
            if (newPos > start && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newPos - 1])) {
              if (newPos < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[newPos]))
                newPos++;
            }
            let oldPos = i3;
            let tmp = glyphs[oldPos];
            glyphs.splice(newPos + 1, 0, ...glyphs.splice(newPos, oldPos - newPos));
            glyphs[newPos] = tmp;
            if (newPos <= base && base < oldPos)
              base++;
          }
          break;
        }
    }
    if (glyphs[start].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M && (!start || !/Cf|Mn/.test($747425b437e121da$export$2e2bcd8739ae039.getCategory(glyphs[start - 1].codePoints[0]))))
      glyphs[start].features.init = true;
  }
}
function $c6b883ac45fa55f1$var$nextSyllable(glyphs, start) {
  if (start >= glyphs.length)
    return start;
  let syllable = glyphs[start].shaperInfo.syllable;
  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable)
    ;
  return start;
}
function $7eb6a55cb7a2526f$var$useCategory(glyph) {
  return $7eb6a55cb7a2526f$var$trie.get(glyph.codePoints[0]);
}
function $7eb6a55cb7a2526f$var$setupSyllables(font, glyphs) {
  let syllable = 0;
  for (let [start, end, tags] of $7eb6a55cb7a2526f$var$stateMachine.match(glyphs.map($7eb6a55cb7a2526f$var$useCategory))) {
    ++syllable;
    for (let i3 = start;i3 <= end; i3++)
      glyphs[i3].shaperInfo = new $7eb6a55cb7a2526f$var$USEInfo($7eb6a55cb7a2526f$var$categories[$7eb6a55cb7a2526f$var$useCategory(glyphs[i3])], tags[0], syllable);
    let limit = glyphs[start].shaperInfo.category === "R" ? 1 : Math.min(3, end - start);
    for (let i12 = start;i12 < start + limit; i12++)
      glyphs[i12].features.rphf = true;
  }
}
function $7eb6a55cb7a2526f$var$clearSubstitutionFlags(font, glyphs) {
  for (let glyph of glyphs)
    glyph.substituted = false;
}
function $7eb6a55cb7a2526f$var$recordRphf(font, glyphs) {
  for (let glyph of glyphs)
    if (glyph.substituted && glyph.features.rphf)
      glyph.shaperInfo.category = "R";
}
function $7eb6a55cb7a2526f$var$recordPref(font, glyphs) {
  for (let glyph of glyphs)
    if (glyph.substituted)
      glyph.shaperInfo.category = "VPre";
}
function $7eb6a55cb7a2526f$var$reorder(font, glyphs) {
  let dottedCircle = font.glyphForCodePoint(9676).id;
  for (let start = 0, end = $7eb6a55cb7a2526f$var$nextSyllable(glyphs, 0);start < glyphs.length; start = end, end = $7eb6a55cb7a2526f$var$nextSyllable(glyphs, start)) {
    let i3, j;
    let info = glyphs[start].shaperInfo;
    let type47 = info.syllableType;
    if (type47 !== "virama_terminated_cluster" && type47 !== "standard_cluster" && type47 !== "broken_cluster")
      continue;
    if (type47 === "broken_cluster" && dottedCircle) {
      let g = new $8cba766f534deddd$export$2e2bcd8739ae039(font, dottedCircle, [
        9676
      ]);
      g.shaperInfo = info;
      for (i3 = start;i3 < end && glyphs[i3].shaperInfo.category === "R"; i3++)
        ;
      glyphs.splice(++i3, 0, g);
      end++;
    }
    if (info.category === "R" && end - start > 1)
      for (i3 = start + 1;i3 < end; i3++) {
        info = glyphs[i3].shaperInfo;
        if ($7eb6a55cb7a2526f$var$isBase(info) || $7eb6a55cb7a2526f$var$isHalant(glyphs[i3])) {
          if ($7eb6a55cb7a2526f$var$isHalant(glyphs[i3]))
            i3--;
          glyphs.splice(start, 0, ...glyphs.splice(start + 1, i3 - start), glyphs[i3]);
          break;
        }
      }
    for (i3 = start, j = end;i3 < end; i3++) {
      info = glyphs[i3].shaperInfo;
      if ($7eb6a55cb7a2526f$var$isBase(info) || $7eb6a55cb7a2526f$var$isHalant(glyphs[i3]))
        j = $7eb6a55cb7a2526f$var$isHalant(glyphs[i3]) ? i3 + 1 : i3;
      else if ((info.category === "VPre" || info.category === "VMPre") && j < i3)
        glyphs.splice(j, 1, glyphs[i3], ...glyphs.splice(j, i3 - j));
    }
  }
}
function $7eb6a55cb7a2526f$var$nextSyllable(glyphs, start) {
  if (start >= glyphs.length)
    return start;
  let syllable = glyphs[start].shaperInfo.syllable;
  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable)
    ;
  return start;
}
function $7eb6a55cb7a2526f$var$isHalant(glyph) {
  return glyph.shaperInfo.category === "H" && !glyph.isLigated;
}
function $7eb6a55cb7a2526f$var$isBase(info) {
  return info.category === "B" || info.category === "GB";
}
function $a1d926e2c804f4db$export$7877a478dd30fd3d(script) {
  if (!Array.isArray(script))
    script = [
      script
    ];
  for (let s3 of script) {
    let shaper = $a1d926e2c804f4db$var$SHAPERS[s3];
    if (shaper)
      return shaper;
  }
  return $5340de7a86f3ae85$export$2e2bcd8739ae039;
}
function $b6deb9db8685274b$var$read255UInt16(stream) {
  let code = stream.readUInt8();
  if (code === $b6deb9db8685274b$var$WORD_CODE)
    return stream.readUInt16BE();
  if (code === $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE1)
    return stream.readUInt8() + $b6deb9db8685274b$var$LOWEST_U_CODE;
  if (code === $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE2)
    return stream.readUInt8() + $b6deb9db8685274b$var$LOWEST_U_CODE * 2;
  return code;
}
function $b6deb9db8685274b$var$withSign(flag, baseval) {
  return flag & 1 ? baseval : -baseval;
}
function $b6deb9db8685274b$var$decodeTriplet(flags, glyphs, nPoints) {
  let y3;
  let x3 = y3 = 0;
  let res = [];
  for (let i3 = 0;i3 < nPoints; i3++) {
    let dx = 0, dy = 0;
    let flag = flags.readUInt8();
    let onCurve = !(flag >> 7);
    flag &= 127;
    if (flag < 10) {
      dx = 0;
      dy = $b6deb9db8685274b$var$withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());
    } else if (flag < 20) {
      dx = $b6deb9db8685274b$var$withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());
      dy = 0;
    } else if (flag < 84) {
      var b02 = flag - 20;
      var b12 = glyphs.readUInt8();
      dx = $b6deb9db8685274b$var$withSign(flag, 1 + (b02 & 48) + (b12 >> 4));
      dy = $b6deb9db8685274b$var$withSign(flag >> 1, 1 + ((b02 & 12) << 2) + (b12 & 15));
    } else if (flag < 120) {
      var b02 = flag - 84;
      dx = $b6deb9db8685274b$var$withSign(flag, 1 + (b02 / 12 << 8) + glyphs.readUInt8());
      dy = $b6deb9db8685274b$var$withSign(flag >> 1, 1 + (b02 % 12 >> 2 << 8) + glyphs.readUInt8());
    } else if (flag < 124) {
      var b12 = glyphs.readUInt8();
      let b22 = glyphs.readUInt8();
      dx = $b6deb9db8685274b$var$withSign(flag, (b12 << 4) + (b22 >> 4));
      dy = $b6deb9db8685274b$var$withSign(flag >> 1, ((b22 & 15) << 8) + glyphs.readUInt8());
    } else {
      dx = $b6deb9db8685274b$var$withSign(flag, glyphs.readUInt16BE());
      dy = $b6deb9db8685274b$var$withSign(flag >> 1, glyphs.readUInt16BE());
    }
    x3 += dx;
    y3 += dy;
    res.push(new $e20fdd09923e4c19$export$baf26146a414f24a(onCurve, false, x3, y3));
  }
  return res;
}
var $8857867ee3ddfad5$exports = {};
$parcel$export($8857867ee3ddfad5$exports, "logErrors", () => $8857867ee3ddfad5$export$bd5c5d8b8dcafd78);
$parcel$export($8857867ee3ddfad5$exports, "registerFormat", () => $8857867ee3ddfad5$export$36b2f24e97d43be);
$parcel$export($8857867ee3ddfad5$exports, "openSync", () => $8857867ee3ddfad5$export$fa5499edb1ab414a);
$parcel$export($8857867ee3ddfad5$exports, "create", () => $8857867ee3ddfad5$export$185802fd694ee1f5);
$parcel$export($8857867ee3ddfad5$exports, "open", () => $8857867ee3ddfad5$export$3ce6949f20cea765);
$parcel$export($8857867ee3ddfad5$exports, "defaultLanguage", () => $8857867ee3ddfad5$export$42940898df819940);
$parcel$export($8857867ee3ddfad5$exports, "setDefaultLanguage", () => $8857867ee3ddfad5$export$5157e7780d44cc36);
var $8857867ee3ddfad5$export$bd5c5d8b8dcafd78 = false;
var $8857867ee3ddfad5$var$formats = [];
var $8857867ee3ddfad5$export$42940898df819940 = "en";
var $9aad45a64cf8e4b5$var$SubHeader = new import_restructure.default.Struct({
  firstCode: import_restructure.default.uint16,
  entryCount: import_restructure.default.uint16,
  idDelta: import_restructure.default.int16,
  idRangeOffset: import_restructure.default.uint16
});
var $9aad45a64cf8e4b5$var$CmapGroup = new import_restructure.default.Struct({
  startCharCode: import_restructure.default.uint32,
  endCharCode: import_restructure.default.uint32,
  glyphID: import_restructure.default.uint32
});
var $9aad45a64cf8e4b5$var$UnicodeValueRange = new import_restructure.default.Struct({
  startUnicodeValue: import_restructure.default.uint24,
  additionalCount: import_restructure.default.uint8
});
var $9aad45a64cf8e4b5$var$UVSMapping = new import_restructure.default.Struct({
  unicodeValue: import_restructure.default.uint24,
  glyphID: import_restructure.default.uint16
});
var $9aad45a64cf8e4b5$var$DefaultUVS = new import_restructure.default.Array($9aad45a64cf8e4b5$var$UnicodeValueRange, import_restructure.default.uint32);
var $9aad45a64cf8e4b5$var$NonDefaultUVS = new import_restructure.default.Array($9aad45a64cf8e4b5$var$UVSMapping, import_restructure.default.uint32);
var $9aad45a64cf8e4b5$var$VarSelectorRecord = new import_restructure.default.Struct({
  varSelector: import_restructure.default.uint24,
  defaultUVS: new import_restructure.default.Pointer(import_restructure.default.uint32, $9aad45a64cf8e4b5$var$DefaultUVS, {
    type: "parent"
  }),
  nonDefaultUVS: new import_restructure.default.Pointer(import_restructure.default.uint32, $9aad45a64cf8e4b5$var$NonDefaultUVS, {
    type: "parent"
  })
});
var $9aad45a64cf8e4b5$var$CmapSubtable = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  0: {
    length: import_restructure.default.uint16,
    language: import_restructure.default.uint16,
    codeMap: new import_restructure.default.LazyArray(import_restructure.default.uint8, 256)
  },
  2: {
    length: import_restructure.default.uint16,
    language: import_restructure.default.uint16,
    subHeaderKeys: new import_restructure.default.Array(import_restructure.default.uint16, 256),
    subHeaderCount: (t3) => Math.max.apply(Math, t3.subHeaderKeys),
    subHeaders: new import_restructure.default.LazyArray($9aad45a64cf8e4b5$var$SubHeader, "subHeaderCount"),
    glyphIndexArray: new import_restructure.default.LazyArray(import_restructure.default.uint16, "subHeaderCount")
  },
  4: {
    length: import_restructure.default.uint16,
    language: import_restructure.default.uint16,
    segCountX2: import_restructure.default.uint16,
    segCount: (t3) => t3.segCountX2 >> 1,
    searchRange: import_restructure.default.uint16,
    entrySelector: import_restructure.default.uint16,
    rangeShift: import_restructure.default.uint16,
    endCode: new import_restructure.default.LazyArray(import_restructure.default.uint16, "segCount"),
    reservedPad: new import_restructure.default.Reserved(import_restructure.default.uint16),
    startCode: new import_restructure.default.LazyArray(import_restructure.default.uint16, "segCount"),
    idDelta: new import_restructure.default.LazyArray(import_restructure.default.int16, "segCount"),
    idRangeOffset: new import_restructure.default.LazyArray(import_restructure.default.uint16, "segCount"),
    glyphIndexArray: new import_restructure.default.LazyArray(import_restructure.default.uint16, (t3) => (t3.length - t3._currentOffset) / 2)
  },
  6: {
    length: import_restructure.default.uint16,
    language: import_restructure.default.uint16,
    firstCode: import_restructure.default.uint16,
    entryCount: import_restructure.default.uint16,
    glyphIndices: new import_restructure.default.LazyArray(import_restructure.default.uint16, "entryCount")
  },
  8: {
    reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
    length: import_restructure.default.uint32,
    language: import_restructure.default.uint16,
    is32: new import_restructure.default.LazyArray(import_restructure.default.uint8, 8192),
    nGroups: import_restructure.default.uint32,
    groups: new import_restructure.default.LazyArray($9aad45a64cf8e4b5$var$CmapGroup, "nGroups")
  },
  10: {
    reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
    length: import_restructure.default.uint32,
    language: import_restructure.default.uint32,
    firstCode: import_restructure.default.uint32,
    entryCount: import_restructure.default.uint32,
    glyphIndices: new import_restructure.default.LazyArray(import_restructure.default.uint16, "numChars")
  },
  12: {
    reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
    length: import_restructure.default.uint32,
    language: import_restructure.default.uint32,
    nGroups: import_restructure.default.uint32,
    groups: new import_restructure.default.LazyArray($9aad45a64cf8e4b5$var$CmapGroup, "nGroups")
  },
  13: {
    reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
    length: import_restructure.default.uint32,
    language: import_restructure.default.uint32,
    nGroups: import_restructure.default.uint32,
    groups: new import_restructure.default.LazyArray($9aad45a64cf8e4b5$var$CmapGroup, "nGroups")
  },
  14: {
    length: import_restructure.default.uint32,
    numRecords: import_restructure.default.uint32,
    varSelectors: new import_restructure.default.LazyArray($9aad45a64cf8e4b5$var$VarSelectorRecord, "numRecords")
  }
});
var $9aad45a64cf8e4b5$var$CmapEntry = new import_restructure.default.Struct({
  platformID: import_restructure.default.uint16,
  encodingID: import_restructure.default.uint16,
  table: new import_restructure.default.Pointer(import_restructure.default.uint32, $9aad45a64cf8e4b5$var$CmapSubtable, {
    type: "parent",
    lazy: true
  })
});
var $9aad45a64cf8e4b5$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  numSubtables: import_restructure.default.uint16,
  tables: new import_restructure.default.Array($9aad45a64cf8e4b5$var$CmapEntry, "numSubtables")
});
var $b41847595480ce3a$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.int32,
  revision: import_restructure.default.int32,
  checkSumAdjustment: import_restructure.default.uint32,
  magicNumber: import_restructure.default.uint32,
  flags: import_restructure.default.uint16,
  unitsPerEm: import_restructure.default.uint16,
  created: new import_restructure.default.Array(import_restructure.default.int32, 2),
  modified: new import_restructure.default.Array(import_restructure.default.int32, 2),
  xMin: import_restructure.default.int16,
  yMin: import_restructure.default.int16,
  xMax: import_restructure.default.int16,
  yMax: import_restructure.default.int16,
  macStyle: new import_restructure.default.Bitfield(import_restructure.default.uint16, [
    "bold",
    "italic",
    "underline",
    "outline",
    "shadow",
    "condensed",
    "extended"
  ]),
  lowestRecPPEM: import_restructure.default.uint16,
  fontDirectionHint: import_restructure.default.int16,
  indexToLocFormat: import_restructure.default.int16,
  glyphDataFormat: import_restructure.default.int16
});
var $5fda302e2516d0c7$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.int32,
  ascent: import_restructure.default.int16,
  descent: import_restructure.default.int16,
  lineGap: import_restructure.default.int16,
  advanceWidthMax: import_restructure.default.uint16,
  minLeftSideBearing: import_restructure.default.int16,
  minRightSideBearing: import_restructure.default.int16,
  xMaxExtent: import_restructure.default.int16,
  caretSlopeRise: import_restructure.default.int16,
  caretSlopeRun: import_restructure.default.int16,
  caretOffset: import_restructure.default.int16,
  reserved: new import_restructure.default.Reserved(import_restructure.default.int16, 4),
  metricDataFormat: import_restructure.default.int16,
  numberOfMetrics: import_restructure.default.uint16
});
var $28788c978325a3e1$var$HmtxEntry = new import_restructure.default.Struct({
  advance: import_restructure.default.uint16,
  bearing: import_restructure.default.int16
});
var $28788c978325a3e1$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  metrics: new import_restructure.default.LazyArray($28788c978325a3e1$var$HmtxEntry, (t3) => t3.parent.hhea.numberOfMetrics),
  bearings: new import_restructure.default.LazyArray(import_restructure.default.int16, (t3) => t3.parent.maxp.numGlyphs - t3.parent.hhea.numberOfMetrics)
});
var $9e68d972c1fae2a9$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.int32,
  numGlyphs: import_restructure.default.uint16,
  maxPoints: import_restructure.default.uint16,
  maxContours: import_restructure.default.uint16,
  maxComponentPoints: import_restructure.default.uint16,
  maxComponentContours: import_restructure.default.uint16,
  maxZones: import_restructure.default.uint16,
  maxTwilightPoints: import_restructure.default.uint16,
  maxStorage: import_restructure.default.uint16,
  maxFunctionDefs: import_restructure.default.uint16,
  maxInstructionDefs: import_restructure.default.uint16,
  maxStackElements: import_restructure.default.uint16,
  maxSizeOfInstructions: import_restructure.default.uint16,
  maxComponentElements: import_restructure.default.uint16,
  maxComponentDepth: import_restructure.default.uint16
});
var $111d7d948974b54a$export$6fef87b7618bdf0b = [
  [
    "utf16be",
    "utf16be",
    "utf16be",
    "utf16be",
    "utf16be",
    "utf16be"
  ],
  [
    "macroman",
    "shift-jis",
    "big5",
    "euc-kr",
    "iso-8859-6",
    "iso-8859-8",
    "macgreek",
    "maccyrillic",
    "symbol",
    "Devanagari",
    "Gurmukhi",
    "Gujarati",
    "Oriya",
    "Bengali",
    "Tamil",
    "Telugu",
    "Kannada",
    "Malayalam",
    "Sinhalese",
    "Burmese",
    "Khmer",
    "macthai",
    "Laotian",
    "Georgian",
    "Armenian",
    "gb-2312-80",
    "Tibetan",
    "Mongolian",
    "Geez",
    "maccenteuro",
    "Vietnamese",
    "Sindhi"
  ],
  [
    "ascii"
  ],
  [
    "symbol",
    "utf16be",
    "shift-jis",
    "gb18030",
    "big5",
    "wansung",
    "johab",
    null,
    null,
    null,
    "utf16be"
  ]
];
var $111d7d948974b54a$export$479e671907f486d1 = {
  15: "maciceland",
  17: "macturkish",
  18: "maccroatian",
  24: "maccenteuro",
  25: "maccenteuro",
  26: "maccenteuro",
  27: "maccenteuro",
  28: "maccenteuro",
  30: "maciceland",
  37: "macromania",
  38: "maccenteuro",
  39: "maccenteuro",
  40: "maccenteuro",
  143: "macinuit",
  146: "macgaelic"
};
var $111d7d948974b54a$export$2092376fd002e13 = [
  [],
  {
    0: "en",
    30: "fo",
    60: "ks",
    90: "rw",
    1: "fr",
    31: "fa",
    61: "ku",
    91: "rn",
    2: "de",
    32: "ru",
    62: "sd",
    92: "ny",
    3: "it",
    33: "zh",
    63: "bo",
    93: "mg",
    4: "nl",
    34: "nl-BE",
    64: "ne",
    94: "eo",
    5: "sv",
    35: "ga",
    65: "sa",
    128: "cy",
    6: "es",
    36: "sq",
    66: "mr",
    129: "eu",
    7: "da",
    37: "ro",
    67: "bn",
    130: "ca",
    8: "pt",
    38: "cz",
    68: "as",
    131: "la",
    9: "no",
    39: "sk",
    69: "gu",
    132: "qu",
    10: "he",
    40: "si",
    70: "pa",
    133: "gn",
    11: "ja",
    41: "yi",
    71: "or",
    134: "ay",
    12: "ar",
    42: "sr",
    72: "ml",
    135: "tt",
    13: "fi",
    43: "mk",
    73: "kn",
    136: "ug",
    14: "el",
    44: "bg",
    74: "ta",
    137: "dz",
    15: "is",
    45: "uk",
    75: "te",
    138: "jv",
    16: "mt",
    46: "be",
    76: "si",
    139: "su",
    17: "tr",
    47: "uz",
    77: "my",
    140: "gl",
    18: "hr",
    48: "kk",
    78: "km",
    141: "af",
    19: "zh-Hant",
    49: "az-Cyrl",
    79: "lo",
    142: "br",
    20: "ur",
    50: "az-Arab",
    80: "vi",
    143: "iu",
    21: "hi",
    51: "hy",
    81: "id",
    144: "gd",
    22: "th",
    52: "ka",
    82: "tl",
    145: "gv",
    23: "ko",
    53: "mo",
    83: "ms",
    146: "ga",
    24: "lt",
    54: "ky",
    84: "ms-Arab",
    147: "to",
    25: "pl",
    55: "tg",
    85: "am",
    148: "el-polyton",
    26: "hu",
    56: "tk",
    86: "ti",
    149: "kl",
    27: "es",
    57: "mn-CN",
    87: "om",
    150: "az",
    28: "lv",
    58: "mn",
    88: "so",
    151: "nn",
    29: "se",
    59: "ps",
    89: "sw"
  },
  [],
  {
    1078: "af",
    16393: "en-IN",
    1159: "rw",
    1074: "tn",
    1052: "sq",
    6153: "en-IE",
    1089: "sw",
    1115: "si",
    1156: "gsw",
    8201: "en-JM",
    1111: "kok",
    1051: "sk",
    1118: "am",
    17417: "en-MY",
    1042: "ko",
    1060: "sl",
    5121: "ar-DZ",
    5129: "en-NZ",
    1088: "ky",
    11274: "es-AR",
    15361: "ar-BH",
    13321: "en-PH",
    1108: "lo",
    16394: "es-BO",
    3073: "ar",
    18441: "en-SG",
    1062: "lv",
    13322: "es-CL",
    2049: "ar-IQ",
    7177: "en-ZA",
    1063: "lt",
    9226: "es-CO",
    11265: "ar-JO",
    11273: "en-TT",
    2094: "dsb",
    5130: "es-CR",
    13313: "ar-KW",
    2057: "en-GB",
    1134: "lb",
    7178: "es-DO",
    12289: "ar-LB",
    1033: "en",
    1071: "mk",
    12298: "es-EC",
    4097: "ar-LY",
    12297: "en-ZW",
    2110: "ms-BN",
    17418: "es-SV",
    6145: "ary",
    1061: "et",
    1086: "ms",
    4106: "es-GT",
    8193: "ar-OM",
    1080: "fo",
    1100: "ml",
    18442: "es-HN",
    16385: "ar-QA",
    1124: "fil",
    1082: "mt",
    2058: "es-MX",
    1025: "ar-SA",
    1035: "fi",
    1153: "mi",
    19466: "es-NI",
    10241: "ar-SY",
    2060: "fr-BE",
    1146: "arn",
    6154: "es-PA",
    7169: "aeb",
    3084: "fr-CA",
    1102: "mr",
    15370: "es-PY",
    14337: "ar-AE",
    1036: "fr",
    1148: "moh",
    10250: "es-PE",
    9217: "ar-YE",
    5132: "fr-LU",
    1104: "mn",
    20490: "es-PR",
    1067: "hy",
    6156: "fr-MC",
    2128: "mn-CN",
    3082: "es",
    1101: "as",
    4108: "fr-CH",
    1121: "ne",
    1034: "es",
    2092: "az-Cyrl",
    1122: "fy",
    1044: "nb",
    21514: "es-US",
    1068: "az",
    1110: "gl",
    2068: "nn",
    14346: "es-UY",
    1133: "ba",
    1079: "ka",
    1154: "oc",
    8202: "es-VE",
    1069: "eu",
    3079: "de-AT",
    1096: "or",
    2077: "sv-FI",
    1059: "be",
    1031: "de",
    1123: "ps",
    1053: "sv",
    2117: "bn",
    5127: "de-LI",
    1045: "pl",
    1114: "syr",
    1093: "bn-IN",
    4103: "de-LU",
    1046: "pt",
    1064: "tg",
    8218: "bs-Cyrl",
    2055: "de-CH",
    2070: "pt-PT",
    2143: "tzm",
    5146: "bs",
    1032: "el",
    1094: "pa",
    1097: "ta",
    1150: "br",
    1135: "kl",
    1131: "qu-BO",
    1092: "tt",
    1026: "bg",
    1095: "gu",
    2155: "qu-EC",
    1098: "te",
    1027: "ca",
    1128: "ha",
    3179: "qu",
    1054: "th",
    3076: "zh-HK",
    1037: "he",
    1048: "ro",
    1105: "bo",
    5124: "zh-MO",
    1081: "hi",
    1047: "rm",
    1055: "tr",
    2052: "zh",
    1038: "hu",
    1049: "ru",
    1090: "tk",
    4100: "zh-SG",
    1039: "is",
    9275: "smn",
    1152: "ug",
    1028: "zh-TW",
    1136: "ig",
    4155: "smj-NO",
    1058: "uk",
    1155: "co",
    1057: "id",
    5179: "smj",
    1070: "hsb",
    1050: "hr",
    1117: "iu",
    3131: "se-FI",
    1056: "ur",
    4122: "hr-BA",
    2141: "iu-Latn",
    1083: "se",
    2115: "uz-Cyrl",
    1029: "cs",
    2108: "ga",
    2107: "se-SE",
    1091: "uz",
    1030: "da",
    1076: "xh",
    8251: "sms",
    1066: "vi",
    1164: "prs",
    1077: "zu",
    6203: "sma-NO",
    1106: "cy",
    1125: "dv",
    1040: "it",
    7227: "sms",
    1160: "wo",
    2067: "nl-BE",
    2064: "it-CH",
    1103: "sa",
    1157: "sah",
    1043: "nl",
    1041: "ja",
    7194: "sr-Cyrl-BA",
    1144: "ii",
    3081: "en-AU",
    1099: "kn",
    3098: "sr",
    1130: "yo",
    10249: "en-BZ",
    1087: "kk",
    6170: "sr-Latn-BA",
    4105: "en-CA",
    1107: "km",
    2074: "sr-Latn",
    9225: "en-029",
    1158: "quc",
    1132: "nso"
  }
];
var $866b9b7dd32d7242$require$Buffer = $5OpyM$Buffer;
var $866b9b7dd32d7242$var$NameRecord = new import_restructure.default.Struct({
  platformID: import_restructure.default.uint16,
  encodingID: import_restructure.default.uint16,
  languageID: import_restructure.default.uint16,
  nameID: import_restructure.default.uint16,
  length: import_restructure.default.uint16,
  string: new import_restructure.default.Pointer(import_restructure.default.uint16, new import_restructure.default.String("length", (t3) => $111d7d948974b54a$export$badc544e0651b6b1(t3.platformID, t3.encodingID, t3.languageID)), {
    type: "parent",
    relativeTo: (ctx) => ctx.parent.stringOffset,
    allowNull: false
  })
});
var $866b9b7dd32d7242$var$LangTagRecord = new import_restructure.default.Struct({
  length: import_restructure.default.uint16,
  tag: new import_restructure.default.Pointer(import_restructure.default.uint16, new import_restructure.default.String("length", "utf16be"), {
    type: "parent",
    relativeTo: (ctx) => ctx.stringOffset
  })
});
var $866b9b7dd32d7242$var$NameTable = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  0: {
    count: import_restructure.default.uint16,
    stringOffset: import_restructure.default.uint16,
    records: new import_restructure.default.Array($866b9b7dd32d7242$var$NameRecord, "count")
  },
  1: {
    count: import_restructure.default.uint16,
    stringOffset: import_restructure.default.uint16,
    records: new import_restructure.default.Array($866b9b7dd32d7242$var$NameRecord, "count"),
    langTagCount: import_restructure.default.uint16,
    langTags: new import_restructure.default.Array($866b9b7dd32d7242$var$LangTagRecord, "langTagCount")
  }
});
var $866b9b7dd32d7242$export$2e2bcd8739ae039 = $866b9b7dd32d7242$var$NameTable;
var $866b9b7dd32d7242$var$NAMES = [
  "copyright",
  "fontFamily",
  "fontSubfamily",
  "uniqueSubfamily",
  "fullName",
  "version",
  "postscriptName",
  "trademark",
  "manufacturer",
  "designer",
  "description",
  "vendorURL",
  "designerURL",
  "license",
  "licenseURL",
  null,
  "preferredFamily",
  "preferredSubfamily",
  "compatibleFull",
  "sampleText",
  "postscriptCIDFontName",
  "wwsFamilyName",
  "wwsSubfamilyName"
];
$866b9b7dd32d7242$var$NameTable.process = function(stream) {
  var records = {};
  for (let record4 of this.records) {
    let language = $111d7d948974b54a$export$2092376fd002e13[record4.platformID][record4.languageID];
    if (language == null && this.langTags != null && record4.languageID >= 32768)
      language = this.langTags[record4.languageID - 32768].tag;
    if (language == null)
      language = record4.platformID + "-" + record4.languageID;
    let key = record4.nameID >= 256 ? "fontFeatures" : $866b9b7dd32d7242$var$NAMES[record4.nameID] || record4.nameID;
    if (records[key] == null)
      records[key] = {};
    let obj = records[key];
    if (record4.nameID >= 256)
      obj = obj[record4.nameID] || (obj[record4.nameID] = {});
    if (typeof record4.string === "string" || typeof obj[language] !== "string")
      obj[language] = record4.string;
  }
  this.records = records;
};
$866b9b7dd32d7242$var$NameTable.preEncode = function() {
  if (Array.isArray(this.records))
    return;
  this.version = 0;
  let records = [];
  for (let key in this.records) {
    let val = this.records[key];
    if (key === "fontFeatures")
      continue;
    records.push({
      platformID: 3,
      encodingID: 1,
      languageID: 1033,
      nameID: $866b9b7dd32d7242$var$NAMES.indexOf(key),
      length: $866b9b7dd32d7242$require$Buffer.byteLength(val.en, "utf16le"),
      string: val.en
    });
    if (key === "postscriptName")
      records.push({
        platformID: 1,
        encodingID: 0,
        languageID: 0,
        nameID: $866b9b7dd32d7242$var$NAMES.indexOf(key),
        length: val.en.length,
        string: val.en
      });
  }
  this.records = records;
  this.count = records.length;
  this.stringOffset = $866b9b7dd32d7242$var$NameTable.size(this, null, false);
};
var $268023eac606db57$var$OS2 = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  header: {
    xAvgCharWidth: import_restructure.default.int16,
    usWeightClass: import_restructure.default.uint16,
    usWidthClass: import_restructure.default.uint16,
    fsType: new import_restructure.default.Bitfield(import_restructure.default.uint16, [
      null,
      "noEmbedding",
      "viewOnly",
      "editable",
      null,
      null,
      null,
      null,
      "noSubsetting",
      "bitmapOnly"
    ]),
    ySubscriptXSize: import_restructure.default.int16,
    ySubscriptYSize: import_restructure.default.int16,
    ySubscriptXOffset: import_restructure.default.int16,
    ySubscriptYOffset: import_restructure.default.int16,
    ySuperscriptXSize: import_restructure.default.int16,
    ySuperscriptYSize: import_restructure.default.int16,
    ySuperscriptXOffset: import_restructure.default.int16,
    ySuperscriptYOffset: import_restructure.default.int16,
    yStrikeoutSize: import_restructure.default.int16,
    yStrikeoutPosition: import_restructure.default.int16,
    sFamilyClass: import_restructure.default.int16,
    panose: new import_restructure.default.Array(import_restructure.default.uint8, 10),
    ulCharRange: new import_restructure.default.Array(import_restructure.default.uint32, 4),
    vendorID: new import_restructure.default.String(4),
    fsSelection: new import_restructure.default.Bitfield(import_restructure.default.uint16, [
      "italic",
      "underscore",
      "negative",
      "outlined",
      "strikeout",
      "bold",
      "regular",
      "useTypoMetrics",
      "wws",
      "oblique"
    ]),
    usFirstCharIndex: import_restructure.default.uint16,
    usLastCharIndex: import_restructure.default.uint16
  },
  0: {},
  1: {
    typoAscender: import_restructure.default.int16,
    typoDescender: import_restructure.default.int16,
    typoLineGap: import_restructure.default.int16,
    winAscent: import_restructure.default.uint16,
    winDescent: import_restructure.default.uint16,
    codePageRange: new import_restructure.default.Array(import_restructure.default.uint32, 2)
  },
  2: {
    typoAscender: import_restructure.default.int16,
    typoDescender: import_restructure.default.int16,
    typoLineGap: import_restructure.default.int16,
    winAscent: import_restructure.default.uint16,
    winDescent: import_restructure.default.uint16,
    codePageRange: new import_restructure.default.Array(import_restructure.default.uint32, 2),
    xHeight: import_restructure.default.int16,
    capHeight: import_restructure.default.int16,
    defaultChar: import_restructure.default.uint16,
    breakChar: import_restructure.default.uint16,
    maxContent: import_restructure.default.uint16
  },
  5: {
    typoAscender: import_restructure.default.int16,
    typoDescender: import_restructure.default.int16,
    typoLineGap: import_restructure.default.int16,
    winAscent: import_restructure.default.uint16,
    winDescent: import_restructure.default.uint16,
    codePageRange: new import_restructure.default.Array(import_restructure.default.uint32, 2),
    xHeight: import_restructure.default.int16,
    capHeight: import_restructure.default.int16,
    defaultChar: import_restructure.default.uint16,
    breakChar: import_restructure.default.uint16,
    maxContent: import_restructure.default.uint16,
    usLowerOpticalPointSize: import_restructure.default.uint16,
    usUpperOpticalPointSize: import_restructure.default.uint16
  }
});
var $268023eac606db57$var$versions = $268023eac606db57$var$OS2.versions;
$268023eac606db57$var$versions[3] = $268023eac606db57$var$versions[4] = $268023eac606db57$var$versions[2];
var $268023eac606db57$export$2e2bcd8739ae039 = $268023eac606db57$var$OS2;
var $5287343c85bea17e$export$2e2bcd8739ae039 = new import_restructure.default.VersionedStruct(import_restructure.default.fixed32, {
  header: {
    italicAngle: import_restructure.default.fixed32,
    underlinePosition: import_restructure.default.int16,
    underlineThickness: import_restructure.default.int16,
    isFixedPitch: import_restructure.default.uint32,
    minMemType42: import_restructure.default.uint32,
    maxMemType42: import_restructure.default.uint32,
    minMemType1: import_restructure.default.uint32,
    maxMemType1: import_restructure.default.uint32
  },
  1: {},
  2: {
    numberOfGlyphs: import_restructure.default.uint16,
    glyphNameIndex: new import_restructure.default.Array(import_restructure.default.uint16, "numberOfGlyphs"),
    names: new import_restructure.default.Array(new import_restructure.default.String(import_restructure.default.uint8))
  },
  2.5: {
    numberOfGlyphs: import_restructure.default.uint16,
    offsets: new import_restructure.default.Array(import_restructure.default.uint8, "numberOfGlyphs")
  },
  3: {},
  4: {
    map: new import_restructure.default.Array(import_restructure.default.uint32, (t3) => t3.parent.maxp.numGlyphs)
  }
});
var $5768e6ef8b1a512a$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  controlValues: new import_restructure.default.Array(import_restructure.default.int16)
});
var $6f2fae1f8d2b4b41$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  instructions: new import_restructure.default.Array(import_restructure.default.uint8)
});
var $cae48a5e791773ec$var$loca = new import_restructure.default.VersionedStruct("head.indexToLocFormat", {
  0: {
    offsets: new import_restructure.default.Array(import_restructure.default.uint16)
  },
  1: {
    offsets: new import_restructure.default.Array(import_restructure.default.uint32)
  }
});
$cae48a5e791773ec$var$loca.process = function() {
  if (this.version === 0)
    for (let i3 = 0;i3 < this.offsets.length; i3++)
      this.offsets[i3] <<= 1;
};
$cae48a5e791773ec$var$loca.preEncode = function() {
  if (this.version === 0)
    for (let i3 = 0;i3 < this.offsets.length; i3++)
      this.offsets[i3] >>>= 1;
};
var $cae48a5e791773ec$export$2e2bcd8739ae039 = $cae48a5e791773ec$var$loca;
var $7b12cfca10f7f884$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  controlValueProgram: new import_restructure.default.Array(import_restructure.default.uint8)
});
var $06e9f2dae5795013$export$2e2bcd8739ae039 = new import_restructure.default.Array(new import_restructure.default.Buffer);

class $6333f51d822e64a1$export$2e2bcd8739ae039 {
  constructor(type47) {
    this.type = type47;
  }
  getCFFVersion(ctx) {
    while (ctx && !ctx.hdrSize)
      ctx = ctx.parent;
    return ctx ? ctx.version : -1;
  }
  decode(stream, parent) {
    let version = this.getCFFVersion(parent);
    let count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();
    if (count === 0)
      return [];
    let offSize = stream.readUInt8();
    let offsetType;
    if (offSize === 1)
      offsetType = import_restructure.default.uint8;
    else if (offSize === 2)
      offsetType = import_restructure.default.uint16;
    else if (offSize === 3)
      offsetType = import_restructure.default.uint24;
    else if (offSize === 4)
      offsetType = import_restructure.default.uint32;
    else
      throw new Error(`Bad offset size in CFFIndex: ${offSize} ${stream.pos}`);
    let ret = [];
    let startPos = stream.pos + (count + 1) * offSize - 1;
    let start = offsetType.decode(stream);
    for (let i3 = 0;i3 < count; i3++) {
      let end = offsetType.decode(stream);
      if (this.type != null) {
        let pos = stream.pos;
        stream.pos = startPos + start;
        parent.length = end - start;
        ret.push(this.type.decode(stream, parent));
        stream.pos = pos;
      } else
        ret.push({
          offset: startPos + start,
          length: end - start
        });
      start = end;
    }
    stream.pos = startPos + start;
    return ret;
  }
  size(arr, parent) {
    let size = 2;
    if (arr.length === 0)
      return size;
    let type47 = this.type || new import_restructure.default.Buffer;
    let offset = 1;
    for (let i3 = 0;i3 < arr.length; i3++) {
      let item = arr[i3];
      offset += type47.size(item, parent);
    }
    let offsetType;
    if (offset <= 255)
      offsetType = import_restructure.default.uint8;
    else if (offset <= 65535)
      offsetType = import_restructure.default.uint16;
    else if (offset <= 16777215)
      offsetType = import_restructure.default.uint24;
    else if (offset <= 4294967295)
      offsetType = import_restructure.default.uint32;
    else
      throw new Error("Bad offset in CFFIndex");
    size += 1 + offsetType.size() * (arr.length + 1);
    size += offset - 1;
    return size;
  }
  encode(stream, arr, parent) {
    stream.writeUInt16BE(arr.length);
    if (arr.length === 0)
      return;
    let type47 = this.type || new import_restructure.default.Buffer;
    let sizes = [];
    let offset = 1;
    for (let item of arr) {
      let s3 = type47.size(item, parent);
      sizes.push(s3);
      offset += s3;
    }
    let offsetType;
    if (offset <= 255)
      offsetType = import_restructure.default.uint8;
    else if (offset <= 65535)
      offsetType = import_restructure.default.uint16;
    else if (offset <= 16777215)
      offsetType = import_restructure.default.uint24;
    else if (offset <= 4294967295)
      offsetType = import_restructure.default.uint32;
    else
      throw new Error("Bad offset in CFFIndex");
    stream.writeUInt8(offsetType.size());
    offset = 1;
    offsetType.encode(stream, offset);
    for (let size of sizes) {
      offset += size;
      offsetType.encode(stream, offset);
    }
    for (let item1 of arr)
      type47.encode(stream, item1, parent);
    return;
  }
}
var $2e2b3208cd32b1af$var$FLOAT_EOF = 15;
var $2e2b3208cd32b1af$var$FLOAT_LOOKUP = [
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  ".",
  "E",
  "E-",
  null,
  "-"
];
var $2e2b3208cd32b1af$var$FLOAT_ENCODE_LOOKUP = {
  ".": 10,
  E: 11,
  "E-": 12,
  "-": 14
};

class $2e2b3208cd32b1af$export$2e2bcd8739ae039 {
  static decode(stream, value15) {
    if (32 <= value15 && value15 <= 246)
      return value15 - 139;
    if (247 <= value15 && value15 <= 250)
      return (value15 - 247) * 256 + stream.readUInt8() + 108;
    if (251 <= value15 && value15 <= 254)
      return -(value15 - 251) * 256 - stream.readUInt8() - 108;
    if (value15 === 28)
      return stream.readInt16BE();
    if (value15 === 29)
      return stream.readInt32BE();
    if (value15 === 30) {
      let str = "";
      while (true) {
        let b = stream.readUInt8();
        let n12 = b >> 4;
        if (n12 === $2e2b3208cd32b1af$var$FLOAT_EOF)
          break;
        str += $2e2b3208cd32b1af$var$FLOAT_LOOKUP[n12];
        let n22 = b & 15;
        if (n22 === $2e2b3208cd32b1af$var$FLOAT_EOF)
          break;
        str += $2e2b3208cd32b1af$var$FLOAT_LOOKUP[n22];
      }
      return parseFloat(str);
    }
    return null;
  }
  static size(value15) {
    if (value15.forceLarge)
      value15 = 32768;
    if ((value15 | 0) !== value15) {
      let str = "" + value15;
      return 1 + Math.ceil((str.length + 1) / 2);
    } else if (-107 <= value15 && value15 <= 107)
      return 1;
    else if (108 <= value15 && value15 <= 1131 || -1131 <= value15 && value15 <= -108)
      return 2;
    else if (-32768 <= value15 && value15 <= 32767)
      return 3;
    else
      return 5;
  }
  static encode(stream, value15) {
    let val = Number(value15);
    if (value15.forceLarge) {
      stream.writeUInt8(29);
      return stream.writeInt32BE(val);
    } else if ((val | 0) !== val) {
      stream.writeUInt8(30);
      let str = "" + val;
      for (let i3 = 0;i3 < str.length; i3 += 2) {
        let c12 = str[i3];
        let n12 = $2e2b3208cd32b1af$var$FLOAT_ENCODE_LOOKUP[c12] || +c12;
        if (i3 === str.length - 1)
          var n22 = $2e2b3208cd32b1af$var$FLOAT_EOF;
        else {
          let c22 = str[i3 + 1];
          var n22 = $2e2b3208cd32b1af$var$FLOAT_ENCODE_LOOKUP[c22] || +c22;
        }
        stream.writeUInt8(n12 << 4 | n22 & 15);
      }
      if (n22 !== $2e2b3208cd32b1af$var$FLOAT_EOF)
        return stream.writeUInt8($2e2b3208cd32b1af$var$FLOAT_EOF << 4);
    } else if (-107 <= val && val <= 107)
      return stream.writeUInt8(val + 139);
    else if (108 <= val && val <= 1131) {
      val -= 108;
      stream.writeUInt8((val >> 8) + 247);
      return stream.writeUInt8(val & 255);
    } else if (-1131 <= val && val <= -108) {
      val = -val - 108;
      stream.writeUInt8((val >> 8) + 251);
      return stream.writeUInt8(val & 255);
    } else if (-32768 <= val && val <= 32767) {
      stream.writeUInt8(28);
      return stream.writeInt16BE(val);
    } else {
      stream.writeUInt8(29);
      return stream.writeInt32BE(val);
    }
  }
}

class $1694c4b242cd1a66$export$2e2bcd8739ae039 {
  constructor(ops = []) {
    this.ops = ops;
    this.fields = {};
    for (let field of ops) {
      let key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];
      this.fields[key] = field;
    }
  }
  decodeOperands(type47, stream, ret, operands) {
    if (Array.isArray(type47))
      return operands.map((op, i3) => this.decodeOperands(type47[i3], stream, ret, [
        op
      ]));
    else if (type47.decode != null)
      return type47.decode(stream, ret, operands);
    else
      switch (type47) {
        case "number":
        case "offset":
        case "sid":
          return operands[0];
        case "boolean":
          return !!operands[0];
        default:
          return operands;
      }
  }
  encodeOperands(type47, stream, ctx, operands) {
    if (Array.isArray(type47))
      return operands.map((op, i3) => this.encodeOperands(type47[i3], stream, ctx, op)[0]);
    else if (type47.encode != null)
      return type47.encode(stream, operands, ctx);
    else if (typeof operands === "number")
      return [
        operands
      ];
    else if (typeof operands === "boolean")
      return [
        +operands
      ];
    else if (Array.isArray(operands))
      return operands;
    else
      return [
        operands
      ];
  }
  decode(stream, parent) {
    let end = stream.pos + parent.length;
    let ret = {};
    let operands = [];
    Object.defineProperties(ret, {
      parent: {
        value: parent
      },
      _startOffset: {
        value: stream.pos
      }
    });
    for (let key in this.fields) {
      let field = this.fields[key];
      ret[field[1]] = field[3];
    }
    while (stream.pos < end) {
      let b = stream.readUInt8();
      if (b < 28) {
        if (b === 12)
          b = b << 8 | stream.readUInt8();
        let field = this.fields[b];
        if (!field)
          throw new Error(`Unknown operator ${b}`);
        let val = this.decodeOperands(field[2], stream, ret, operands);
        if (val != null) {
          if (val instanceof utils.PropertyDescriptor)
            Object.defineProperty(ret, field[1], val);
          else
            ret[field[1]] = val;
        }
        operands = [];
      } else
        operands.push($2e2b3208cd32b1af$export$2e2bcd8739ae039.decode(stream, b));
    }
    return ret;
  }
  size(dict, parent, includePointers = true) {
    let ctx = {
      parent,
      val: dict,
      pointerSize: 0,
      startOffset: parent.startOffset || 0
    };
    let len = 0;
    for (let k in this.fields) {
      let field = this.fields[k];
      let val = dict[field[1]];
      if (val == null || import_deep_equal.default(val, field[3]))
        continue;
      let operands = this.encodeOperands(field[2], null, ctx, val);
      for (let op of operands)
        len += $2e2b3208cd32b1af$export$2e2bcd8739ae039.size(op);
      let key = Array.isArray(field[0]) ? field[0] : [
        field[0]
      ];
      len += key.length;
    }
    if (includePointers)
      len += ctx.pointerSize;
    return len;
  }
  encode(stream, dict, parent) {
    let ctx = {
      pointers: [],
      startOffset: stream.pos,
      parent,
      val: dict,
      pointerSize: 0
    };
    ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);
    for (let field of this.ops) {
      let val = dict[field[1]];
      if (val == null || import_deep_equal.default(val, field[3]))
        continue;
      let operands = this.encodeOperands(field[2], stream, ctx, val);
      for (let op of operands)
        $2e2b3208cd32b1af$export$2e2bcd8739ae039.encode(stream, op);
      let key = Array.isArray(field[0]) ? field[0] : [
        field[0]
      ];
      for (let op1 of key)
        stream.writeUInt8(op1);
    }
    let i3 = 0;
    while (i3 < ctx.pointers.length) {
      let ptr = ctx.pointers[i3++];
      ptr.type.encode(stream, ptr.val, ptr.parent);
    }
    return;
  }
}

class $6631a7581d654814$export$2e2bcd8739ae039 extends import_restructure.default.Pointer {
  constructor(type47, options = {}) {
    if (options.type == null)
      options.type = "global";
    super(null, type47, options);
  }
  decode(stream, parent, operands) {
    this.offsetType = {
      decode: () => operands[0]
    };
    return super.decode(stream, parent, operands);
  }
  encode(stream, value15, ctx) {
    if (!stream) {
      this.offsetType = {
        size: () => 0
      };
      this.size(value15, ctx);
      return [
        new $6631a7581d654814$var$Ptr(0)
      ];
    }
    let ptr = null;
    this.offsetType = {
      encode: (stream2, val) => ptr = val
    };
    super.encode(stream, value15, ctx);
    return [
      new $6631a7581d654814$var$Ptr(ptr)
    ];
  }
}

class $6631a7581d654814$var$Ptr {
  constructor(val) {
    this.val = val;
    this.forceLarge = true;
  }
  valueOf() {
    return this.val;
  }
}

class $94c2c7ed7c236891$var$CFFBlendOp {
  static decode(stream, parent, operands) {
    let numBlends = operands.pop();
    while (operands.length > numBlends)
      operands.pop();
  }
}
var $94c2c7ed7c236891$export$2e2bcd8739ae039 = new $1694c4b242cd1a66$export$2e2bcd8739ae039([
  [
    6,
    "BlueValues",
    "delta",
    null
  ],
  [
    7,
    "OtherBlues",
    "delta",
    null
  ],
  [
    8,
    "FamilyBlues",
    "delta",
    null
  ],
  [
    9,
    "FamilyOtherBlues",
    "delta",
    null
  ],
  [
    [
      12,
      9
    ],
    "BlueScale",
    "number",
    0.039625
  ],
  [
    [
      12,
      10
    ],
    "BlueShift",
    "number",
    7
  ],
  [
    [
      12,
      11
    ],
    "BlueFuzz",
    "number",
    1
  ],
  [
    10,
    "StdHW",
    "number",
    null
  ],
  [
    11,
    "StdVW",
    "number",
    null
  ],
  [
    [
      12,
      12
    ],
    "StemSnapH",
    "delta",
    null
  ],
  [
    [
      12,
      13
    ],
    "StemSnapV",
    "delta",
    null
  ],
  [
    [
      12,
      14
    ],
    "ForceBold",
    "boolean",
    false
  ],
  [
    [
      12,
      17
    ],
    "LanguageGroup",
    "number",
    0
  ],
  [
    [
      12,
      18
    ],
    "ExpansionFactor",
    "number",
    0.06
  ],
  [
    [
      12,
      19
    ],
    "initialRandomSeed",
    "number",
    0
  ],
  [
    20,
    "defaultWidthX",
    "number",
    0
  ],
  [
    21,
    "nominalWidthX",
    "number",
    0
  ],
  [
    22,
    "vsindex",
    "number",
    0
  ],
  [
    23,
    "blend",
    $94c2c7ed7c236891$var$CFFBlendOp,
    null
  ],
  [
    19,
    "Subrs",
    new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039, {
      type: "local"
    }),
    null
  ]
]);
var $276d3ff37a4362c9$export$2e2bcd8739ae039 = [
  ".notdef",
  "space",
  "exclam",
  "quotedbl",
  "numbersign",
  "dollar",
  "percent",
  "ampersand",
  "quoteright",
  "parenleft",
  "parenright",
  "asterisk",
  "plus",
  "comma",
  "hyphen",
  "period",
  "slash",
  "zero",
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "colon",
  "semicolon",
  "less",
  "equal",
  "greater",
  "question",
  "at",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "bracketleft",
  "backslash",
  "bracketright",
  "asciicircum",
  "underscore",
  "quoteleft",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "braceleft",
  "bar",
  "braceright",
  "asciitilde",
  "exclamdown",
  "cent",
  "sterling",
  "fraction",
  "yen",
  "florin",
  "section",
  "currency",
  "quotesingle",
  "quotedblleft",
  "guillemotleft",
  "guilsinglleft",
  "guilsinglright",
  "fi",
  "fl",
  "endash",
  "dagger",
  "daggerdbl",
  "periodcentered",
  "paragraph",
  "bullet",
  "quotesinglbase",
  "quotedblbase",
  "quotedblright",
  "guillemotright",
  "ellipsis",
  "perthousand",
  "questiondown",
  "grave",
  "acute",
  "circumflex",
  "tilde",
  "macron",
  "breve",
  "dotaccent",
  "dieresis",
  "ring",
  "cedilla",
  "hungarumlaut",
  "ogonek",
  "caron",
  "emdash",
  "AE",
  "ordfeminine",
  "Lslash",
  "Oslash",
  "OE",
  "ordmasculine",
  "ae",
  "dotlessi",
  "lslash",
  "oslash",
  "oe",
  "germandbls",
  "onesuperior",
  "logicalnot",
  "mu",
  "trademark",
  "Eth",
  "onehalf",
  "plusminus",
  "Thorn",
  "onequarter",
  "divide",
  "brokenbar",
  "degree",
  "thorn",
  "threequarters",
  "twosuperior",
  "registered",
  "minus",
  "eth",
  "multiply",
  "threesuperior",
  "copyright",
  "Aacute",
  "Acircumflex",
  "Adieresis",
  "Agrave",
  "Aring",
  "Atilde",
  "Ccedilla",
  "Eacute",
  "Ecircumflex",
  "Edieresis",
  "Egrave",
  "Iacute",
  "Icircumflex",
  "Idieresis",
  "Igrave",
  "Ntilde",
  "Oacute",
  "Ocircumflex",
  "Odieresis",
  "Ograve",
  "Otilde",
  "Scaron",
  "Uacute",
  "Ucircumflex",
  "Udieresis",
  "Ugrave",
  "Yacute",
  "Ydieresis",
  "Zcaron",
  "aacute",
  "acircumflex",
  "adieresis",
  "agrave",
  "aring",
  "atilde",
  "ccedilla",
  "eacute",
  "ecircumflex",
  "edieresis",
  "egrave",
  "iacute",
  "icircumflex",
  "idieresis",
  "igrave",
  "ntilde",
  "oacute",
  "ocircumflex",
  "odieresis",
  "ograve",
  "otilde",
  "scaron",
  "uacute",
  "ucircumflex",
  "udieresis",
  "ugrave",
  "yacute",
  "ydieresis",
  "zcaron",
  "exclamsmall",
  "Hungarumlautsmall",
  "dollaroldstyle",
  "dollarsuperior",
  "ampersandsmall",
  "Acutesmall",
  "parenleftsuperior",
  "parenrightsuperior",
  "twodotenleader",
  "onedotenleader",
  "zerooldstyle",
  "oneoldstyle",
  "twooldstyle",
  "threeoldstyle",
  "fouroldstyle",
  "fiveoldstyle",
  "sixoldstyle",
  "sevenoldstyle",
  "eightoldstyle",
  "nineoldstyle",
  "commasuperior",
  "threequartersemdash",
  "periodsuperior",
  "questionsmall",
  "asuperior",
  "bsuperior",
  "centsuperior",
  "dsuperior",
  "esuperior",
  "isuperior",
  "lsuperior",
  "msuperior",
  "nsuperior",
  "osuperior",
  "rsuperior",
  "ssuperior",
  "tsuperior",
  "ff",
  "ffi",
  "ffl",
  "parenleftinferior",
  "parenrightinferior",
  "Circumflexsmall",
  "hyphensuperior",
  "Gravesmall",
  "Asmall",
  "Bsmall",
  "Csmall",
  "Dsmall",
  "Esmall",
  "Fsmall",
  "Gsmall",
  "Hsmall",
  "Ismall",
  "Jsmall",
  "Ksmall",
  "Lsmall",
  "Msmall",
  "Nsmall",
  "Osmall",
  "Psmall",
  "Qsmall",
  "Rsmall",
  "Ssmall",
  "Tsmall",
  "Usmall",
  "Vsmall",
  "Wsmall",
  "Xsmall",
  "Ysmall",
  "Zsmall",
  "colonmonetary",
  "onefitted",
  "rupiah",
  "Tildesmall",
  "exclamdownsmall",
  "centoldstyle",
  "Lslashsmall",
  "Scaronsmall",
  "Zcaronsmall",
  "Dieresissmall",
  "Brevesmall",
  "Caronsmall",
  "Dotaccentsmall",
  "Macronsmall",
  "figuredash",
  "hypheninferior",
  "Ogoneksmall",
  "Ringsmall",
  "Cedillasmall",
  "questiondownsmall",
  "oneeighth",
  "threeeighths",
  "fiveeighths",
  "seveneighths",
  "onethird",
  "twothirds",
  "zerosuperior",
  "foursuperior",
  "fivesuperior",
  "sixsuperior",
  "sevensuperior",
  "eightsuperior",
  "ninesuperior",
  "zeroinferior",
  "oneinferior",
  "twoinferior",
  "threeinferior",
  "fourinferior",
  "fiveinferior",
  "sixinferior",
  "seveninferior",
  "eightinferior",
  "nineinferior",
  "centinferior",
  "dollarinferior",
  "periodinferior",
  "commainferior",
  "Agravesmall",
  "Aacutesmall",
  "Acircumflexsmall",
  "Atildesmall",
  "Adieresissmall",
  "Aringsmall",
  "AEsmall",
  "Ccedillasmall",
  "Egravesmall",
  "Eacutesmall",
  "Ecircumflexsmall",
  "Edieresissmall",
  "Igravesmall",
  "Iacutesmall",
  "Icircumflexsmall",
  "Idieresissmall",
  "Ethsmall",
  "Ntildesmall",
  "Ogravesmall",
  "Oacutesmall",
  "Ocircumflexsmall",
  "Otildesmall",
  "Odieresissmall",
  "OEsmall",
  "Oslashsmall",
  "Ugravesmall",
  "Uacutesmall",
  "Ucircumflexsmall",
  "Udieresissmall",
  "Yacutesmall",
  "Thornsmall",
  "Ydieresissmall",
  "001.000",
  "001.001",
  "001.002",
  "001.003",
  "Black",
  "Bold",
  "Book",
  "Light",
  "Medium",
  "Regular",
  "Roman",
  "Semibold"
];
var $50148a3b88f16e26$export$dee0027060fa13bd = [
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "space",
  "exclam",
  "quotedbl",
  "numbersign",
  "dollar",
  "percent",
  "ampersand",
  "quoteright",
  "parenleft",
  "parenright",
  "asterisk",
  "plus",
  "comma",
  "hyphen",
  "period",
  "slash",
  "zero",
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "colon",
  "semicolon",
  "less",
  "equal",
  "greater",
  "question",
  "at",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "bracketleft",
  "backslash",
  "bracketright",
  "asciicircum",
  "underscore",
  "quoteleft",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "braceleft",
  "bar",
  "braceright",
  "asciitilde",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "exclamdown",
  "cent",
  "sterling",
  "fraction",
  "yen",
  "florin",
  "section",
  "currency",
  "quotesingle",
  "quotedblleft",
  "guillemotleft",
  "guilsinglleft",
  "guilsinglright",
  "fi",
  "fl",
  "",
  "endash",
  "dagger",
  "daggerdbl",
  "periodcentered",
  "",
  "paragraph",
  "bullet",
  "quotesinglbase",
  "quotedblbase",
  "quotedblright",
  "guillemotright",
  "ellipsis",
  "perthousand",
  "",
  "questiondown",
  "",
  "grave",
  "acute",
  "circumflex",
  "tilde",
  "macron",
  "breve",
  "dotaccent",
  "dieresis",
  "",
  "ring",
  "cedilla",
  "",
  "hungarumlaut",
  "ogonek",
  "caron",
  "emdash",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "AE",
  "",
  "ordfeminine",
  "",
  "",
  "",
  "",
  "Lslash",
  "Oslash",
  "OE",
  "ordmasculine",
  "",
  "",
  "",
  "",
  "",
  "ae",
  "",
  "",
  "",
  "dotlessi",
  "",
  "",
  "lslash",
  "oslash",
  "oe",
  "germandbls"
];
var $50148a3b88f16e26$export$4f58f497e14a53c3 = [
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "space",
  "exclamsmall",
  "Hungarumlautsmall",
  "",
  "dollaroldstyle",
  "dollarsuperior",
  "ampersandsmall",
  "Acutesmall",
  "parenleftsuperior",
  "parenrightsuperior",
  "twodotenleader",
  "onedotenleader",
  "comma",
  "hyphen",
  "period",
  "fraction",
  "zerooldstyle",
  "oneoldstyle",
  "twooldstyle",
  "threeoldstyle",
  "fouroldstyle",
  "fiveoldstyle",
  "sixoldstyle",
  "sevenoldstyle",
  "eightoldstyle",
  "nineoldstyle",
  "colon",
  "semicolon",
  "commasuperior",
  "threequartersemdash",
  "periodsuperior",
  "questionsmall",
  "",
  "asuperior",
  "bsuperior",
  "centsuperior",
  "dsuperior",
  "esuperior",
  "",
  "",
  "isuperior",
  "",
  "",
  "lsuperior",
  "msuperior",
  "nsuperior",
  "osuperior",
  "",
  "",
  "rsuperior",
  "ssuperior",
  "tsuperior",
  "",
  "ff",
  "fi",
  "fl",
  "ffi",
  "ffl",
  "parenleftinferior",
  "",
  "parenrightinferior",
  "Circumflexsmall",
  "hyphensuperior",
  "Gravesmall",
  "Asmall",
  "Bsmall",
  "Csmall",
  "Dsmall",
  "Esmall",
  "Fsmall",
  "Gsmall",
  "Hsmall",
  "Ismall",
  "Jsmall",
  "Ksmall",
  "Lsmall",
  "Msmall",
  "Nsmall",
  "Osmall",
  "Psmall",
  "Qsmall",
  "Rsmall",
  "Ssmall",
  "Tsmall",
  "Usmall",
  "Vsmall",
  "Wsmall",
  "Xsmall",
  "Ysmall",
  "Zsmall",
  "colonmonetary",
  "onefitted",
  "rupiah",
  "Tildesmall",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "exclamdownsmall",
  "centoldstyle",
  "Lslashsmall",
  "",
  "",
  "Scaronsmall",
  "Zcaronsmall",
  "Dieresissmall",
  "Brevesmall",
  "Caronsmall",
  "",
  "Dotaccentsmall",
  "",
  "",
  "Macronsmall",
  "",
  "",
  "figuredash",
  "hypheninferior",
  "",
  "",
  "Ogoneksmall",
  "Ringsmall",
  "Cedillasmall",
  "",
  "",
  "",
  "onequarter",
  "onehalf",
  "threequarters",
  "questiondownsmall",
  "oneeighth",
  "threeeighths",
  "fiveeighths",
  "seveneighths",
  "onethird",
  "twothirds",
  "",
  "",
  "zerosuperior",
  "onesuperior",
  "twosuperior",
  "threesuperior",
  "foursuperior",
  "fivesuperior",
  "sixsuperior",
  "sevensuperior",
  "eightsuperior",
  "ninesuperior",
  "zeroinferior",
  "oneinferior",
  "twoinferior",
  "threeinferior",
  "fourinferior",
  "fiveinferior",
  "sixinferior",
  "seveninferior",
  "eightinferior",
  "nineinferior",
  "centinferior",
  "dollarinferior",
  "periodinferior",
  "commainferior",
  "Agravesmall",
  "Aacutesmall",
  "Acircumflexsmall",
  "Atildesmall",
  "Adieresissmall",
  "Aringsmall",
  "AEsmall",
  "Ccedillasmall",
  "Egravesmall",
  "Eacutesmall",
  "Ecircumflexsmall",
  "Edieresissmall",
  "Igravesmall",
  "Iacutesmall",
  "Icircumflexsmall",
  "Idieresissmall",
  "Ethsmall",
  "Ntildesmall",
  "Ogravesmall",
  "Oacutesmall",
  "Ocircumflexsmall",
  "Otildesmall",
  "Odieresissmall",
  "OEsmall",
  "Oslashsmall",
  "Ugravesmall",
  "Uacutesmall",
  "Ucircumflexsmall",
  "Udieresissmall",
  "Yacutesmall",
  "Thornsmall",
  "Ydieresissmall"
];
var $a5fab60a6eadb8ed$export$c33b50336c234f16 = [
  ".notdef",
  "space",
  "exclam",
  "quotedbl",
  "numbersign",
  "dollar",
  "percent",
  "ampersand",
  "quoteright",
  "parenleft",
  "parenright",
  "asterisk",
  "plus",
  "comma",
  "hyphen",
  "period",
  "slash",
  "zero",
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "colon",
  "semicolon",
  "less",
  "equal",
  "greater",
  "question",
  "at",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "bracketleft",
  "backslash",
  "bracketright",
  "asciicircum",
  "underscore",
  "quoteleft",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "braceleft",
  "bar",
  "braceright",
  "asciitilde",
  "exclamdown",
  "cent",
  "sterling",
  "fraction",
  "yen",
  "florin",
  "section",
  "currency",
  "quotesingle",
  "quotedblleft",
  "guillemotleft",
  "guilsinglleft",
  "guilsinglright",
  "fi",
  "fl",
  "endash",
  "dagger",
  "daggerdbl",
  "periodcentered",
  "paragraph",
  "bullet",
  "quotesinglbase",
  "quotedblbase",
  "quotedblright",
  "guillemotright",
  "ellipsis",
  "perthousand",
  "questiondown",
  "grave",
  "acute",
  "circumflex",
  "tilde",
  "macron",
  "breve",
  "dotaccent",
  "dieresis",
  "ring",
  "cedilla",
  "hungarumlaut",
  "ogonek",
  "caron",
  "emdash",
  "AE",
  "ordfeminine",
  "Lslash",
  "Oslash",
  "OE",
  "ordmasculine",
  "ae",
  "dotlessi",
  "lslash",
  "oslash",
  "oe",
  "germandbls",
  "onesuperior",
  "logicalnot",
  "mu",
  "trademark",
  "Eth",
  "onehalf",
  "plusminus",
  "Thorn",
  "onequarter",
  "divide",
  "brokenbar",
  "degree",
  "thorn",
  "threequarters",
  "twosuperior",
  "registered",
  "minus",
  "eth",
  "multiply",
  "threesuperior",
  "copyright",
  "Aacute",
  "Acircumflex",
  "Adieresis",
  "Agrave",
  "Aring",
  "Atilde",
  "Ccedilla",
  "Eacute",
  "Ecircumflex",
  "Edieresis",
  "Egrave",
  "Iacute",
  "Icircumflex",
  "Idieresis",
  "Igrave",
  "Ntilde",
  "Oacute",
  "Ocircumflex",
  "Odieresis",
  "Ograve",
  "Otilde",
  "Scaron",
  "Uacute",
  "Ucircumflex",
  "Udieresis",
  "Ugrave",
  "Yacute",
  "Ydieresis",
  "Zcaron",
  "aacute",
  "acircumflex",
  "adieresis",
  "agrave",
  "aring",
  "atilde",
  "ccedilla",
  "eacute",
  "ecircumflex",
  "edieresis",
  "egrave",
  "iacute",
  "icircumflex",
  "idieresis",
  "igrave",
  "ntilde",
  "oacute",
  "ocircumflex",
  "odieresis",
  "ograve",
  "otilde",
  "scaron",
  "uacute",
  "ucircumflex",
  "udieresis",
  "ugrave",
  "yacute",
  "ydieresis",
  "zcaron"
];
var $a5fab60a6eadb8ed$export$3ed0f9e1fee8d489 = [
  ".notdef",
  "space",
  "exclamsmall",
  "Hungarumlautsmall",
  "dollaroldstyle",
  "dollarsuperior",
  "ampersandsmall",
  "Acutesmall",
  "parenleftsuperior",
  "parenrightsuperior",
  "twodotenleader",
  "onedotenleader",
  "comma",
  "hyphen",
  "period",
  "fraction",
  "zerooldstyle",
  "oneoldstyle",
  "twooldstyle",
  "threeoldstyle",
  "fouroldstyle",
  "fiveoldstyle",
  "sixoldstyle",
  "sevenoldstyle",
  "eightoldstyle",
  "nineoldstyle",
  "colon",
  "semicolon",
  "commasuperior",
  "threequartersemdash",
  "periodsuperior",
  "questionsmall",
  "asuperior",
  "bsuperior",
  "centsuperior",
  "dsuperior",
  "esuperior",
  "isuperior",
  "lsuperior",
  "msuperior",
  "nsuperior",
  "osuperior",
  "rsuperior",
  "ssuperior",
  "tsuperior",
  "ff",
  "fi",
  "fl",
  "ffi",
  "ffl",
  "parenleftinferior",
  "parenrightinferior",
  "Circumflexsmall",
  "hyphensuperior",
  "Gravesmall",
  "Asmall",
  "Bsmall",
  "Csmall",
  "Dsmall",
  "Esmall",
  "Fsmall",
  "Gsmall",
  "Hsmall",
  "Ismall",
  "Jsmall",
  "Ksmall",
  "Lsmall",
  "Msmall",
  "Nsmall",
  "Osmall",
  "Psmall",
  "Qsmall",
  "Rsmall",
  "Ssmall",
  "Tsmall",
  "Usmall",
  "Vsmall",
  "Wsmall",
  "Xsmall",
  "Ysmall",
  "Zsmall",
  "colonmonetary",
  "onefitted",
  "rupiah",
  "Tildesmall",
  "exclamdownsmall",
  "centoldstyle",
  "Lslashsmall",
  "Scaronsmall",
  "Zcaronsmall",
  "Dieresissmall",
  "Brevesmall",
  "Caronsmall",
  "Dotaccentsmall",
  "Macronsmall",
  "figuredash",
  "hypheninferior",
  "Ogoneksmall",
  "Ringsmall",
  "Cedillasmall",
  "onequarter",
  "onehalf",
  "threequarters",
  "questiondownsmall",
  "oneeighth",
  "threeeighths",
  "fiveeighths",
  "seveneighths",
  "onethird",
  "twothirds",
  "zerosuperior",
  "onesuperior",
  "twosuperior",
  "threesuperior",
  "foursuperior",
  "fivesuperior",
  "sixsuperior",
  "sevensuperior",
  "eightsuperior",
  "ninesuperior",
  "zeroinferior",
  "oneinferior",
  "twoinferior",
  "threeinferior",
  "fourinferior",
  "fiveinferior",
  "sixinferior",
  "seveninferior",
  "eightinferior",
  "nineinferior",
  "centinferior",
  "dollarinferior",
  "periodinferior",
  "commainferior",
  "Agravesmall",
  "Aacutesmall",
  "Acircumflexsmall",
  "Atildesmall",
  "Adieresissmall",
  "Aringsmall",
  "AEsmall",
  "Ccedillasmall",
  "Egravesmall",
  "Eacutesmall",
  "Ecircumflexsmall",
  "Edieresissmall",
  "Igravesmall",
  "Iacutesmall",
  "Icircumflexsmall",
  "Idieresissmall",
  "Ethsmall",
  "Ntildesmall",
  "Ogravesmall",
  "Oacutesmall",
  "Ocircumflexsmall",
  "Otildesmall",
  "Odieresissmall",
  "OEsmall",
  "Oslashsmall",
  "Ugravesmall",
  "Uacutesmall",
  "Ucircumflexsmall",
  "Udieresissmall",
  "Yacutesmall",
  "Thornsmall",
  "Ydieresissmall"
];
var $a5fab60a6eadb8ed$export$dc28be11139d4120 = [
  ".notdef",
  "space",
  "dollaroldstyle",
  "dollarsuperior",
  "parenleftsuperior",
  "parenrightsuperior",
  "twodotenleader",
  "onedotenleader",
  "comma",
  "hyphen",
  "period",
  "fraction",
  "zerooldstyle",
  "oneoldstyle",
  "twooldstyle",
  "threeoldstyle",
  "fouroldstyle",
  "fiveoldstyle",
  "sixoldstyle",
  "sevenoldstyle",
  "eightoldstyle",
  "nineoldstyle",
  "colon",
  "semicolon",
  "commasuperior",
  "threequartersemdash",
  "periodsuperior",
  "asuperior",
  "bsuperior",
  "centsuperior",
  "dsuperior",
  "esuperior",
  "isuperior",
  "lsuperior",
  "msuperior",
  "nsuperior",
  "osuperior",
  "rsuperior",
  "ssuperior",
  "tsuperior",
  "ff",
  "fi",
  "fl",
  "ffi",
  "ffl",
  "parenleftinferior",
  "parenrightinferior",
  "hyphensuperior",
  "colonmonetary",
  "onefitted",
  "rupiah",
  "centoldstyle",
  "figuredash",
  "hypheninferior",
  "onequarter",
  "onehalf",
  "threequarters",
  "oneeighth",
  "threeeighths",
  "fiveeighths",
  "seveneighths",
  "onethird",
  "twothirds",
  "zerosuperior",
  "onesuperior",
  "twosuperior",
  "threesuperior",
  "foursuperior",
  "fivesuperior",
  "sixsuperior",
  "sevensuperior",
  "eightsuperior",
  "ninesuperior",
  "zeroinferior",
  "oneinferior",
  "twoinferior",
  "threeinferior",
  "fourinferior",
  "fiveinferior",
  "sixinferior",
  "seveninferior",
  "eightinferior",
  "nineinferior",
  "centinferior",
  "dollarinferior",
  "periodinferior",
  "commainferior"
];
var $401800e36a580e62$var$LangSysTable = new import_restructure.default.Struct({
  reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
  reqFeatureIndex: import_restructure.default.uint16,
  featureCount: import_restructure.default.uint16,
  featureIndexes: new import_restructure.default.Array(import_restructure.default.uint16, "featureCount")
});
var $401800e36a580e62$var$LangSysRecord = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  langSys: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$LangSysTable, {
    type: "parent"
  })
});
var $401800e36a580e62$var$Script = new import_restructure.default.Struct({
  defaultLangSys: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$LangSysTable),
  count: import_restructure.default.uint16,
  langSysRecords: new import_restructure.default.Array($401800e36a580e62$var$LangSysRecord, "count")
});
var $401800e36a580e62$var$ScriptRecord = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  script: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$Script, {
    type: "parent"
  })
});
var $401800e36a580e62$export$3e15fc05ce864229 = new import_restructure.default.Array($401800e36a580e62$var$ScriptRecord, import_restructure.default.uint16);
var $401800e36a580e62$var$FeatureParams = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  nameID: import_restructure.default.uint16
});
var $401800e36a580e62$export$6e91cf7616333d5 = new import_restructure.default.Struct({
  featureParams: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$FeatureParams),
  lookupCount: import_restructure.default.uint16,
  lookupListIndexes: new import_restructure.default.Array(import_restructure.default.uint16, "lookupCount")
});
var $401800e36a580e62$var$FeatureRecord = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  feature: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$6e91cf7616333d5, {
    type: "parent"
  })
});
var $401800e36a580e62$export$aa18130def4b6cb4 = new import_restructure.default.Array($401800e36a580e62$var$FeatureRecord, import_restructure.default.uint16);
var $401800e36a580e62$var$LookupFlags = new import_restructure.default.Struct({
  markAttachmentType: import_restructure.default.uint8,
  flags: new import_restructure.default.Bitfield(import_restructure.default.uint8, [
    "rightToLeft",
    "ignoreBaseGlyphs",
    "ignoreLigatures",
    "ignoreMarks",
    "useMarkFilteringSet"
  ])
});
var $401800e36a580e62$var$RangeRecord = new import_restructure.default.Struct({
  start: import_restructure.default.uint16,
  end: import_restructure.default.uint16,
  startCoverageIndex: import_restructure.default.uint16
});
var $401800e36a580e62$export$17608c3f81a6111 = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  1: {
    glyphCount: import_restructure.default.uint16,
    glyphs: new import_restructure.default.Array(import_restructure.default.uint16, "glyphCount")
  },
  2: {
    rangeCount: import_restructure.default.uint16,
    rangeRecords: new import_restructure.default.Array($401800e36a580e62$var$RangeRecord, "rangeCount")
  }
});
var $401800e36a580e62$var$ClassRangeRecord = new import_restructure.default.Struct({
  start: import_restructure.default.uint16,
  end: import_restructure.default.uint16,
  class: import_restructure.default.uint16
});
var $401800e36a580e62$export$843d551fbbafef71 = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  1: {
    startGlyph: import_restructure.default.uint16,
    glyphCount: import_restructure.default.uint16,
    classValueArray: new import_restructure.default.Array(import_restructure.default.uint16, "glyphCount")
  },
  2: {
    classRangeCount: import_restructure.default.uint16,
    classRangeRecord: new import_restructure.default.Array($401800e36a580e62$var$ClassRangeRecord, "classRangeCount")
  }
});
var $401800e36a580e62$export$8215d14a63d9fb10 = new import_restructure.default.Struct({
  a: import_restructure.default.uint16,
  b: import_restructure.default.uint16,
  deltaFormat: import_restructure.default.uint16
});
var $401800e36a580e62$var$LookupRecord = new import_restructure.default.Struct({
  sequenceIndex: import_restructure.default.uint16,
  lookupListIndex: import_restructure.default.uint16
});
var $401800e36a580e62$var$Rule = new import_restructure.default.Struct({
  glyphCount: import_restructure.default.uint16,
  lookupCount: import_restructure.default.uint16,
  input: new import_restructure.default.Array(import_restructure.default.uint16, (t3) => t3.glyphCount - 1),
  lookupRecords: new import_restructure.default.Array($401800e36a580e62$var$LookupRecord, "lookupCount")
});
var $401800e36a580e62$var$RuleSet = new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$Rule), import_restructure.default.uint16);
var $401800e36a580e62$var$ClassRule = new import_restructure.default.Struct({
  glyphCount: import_restructure.default.uint16,
  lookupCount: import_restructure.default.uint16,
  classes: new import_restructure.default.Array(import_restructure.default.uint16, (t3) => t3.glyphCount - 1),
  lookupRecords: new import_restructure.default.Array($401800e36a580e62$var$LookupRecord, "lookupCount")
});
var $401800e36a580e62$var$ClassSet = new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$ClassRule), import_restructure.default.uint16);
var $401800e36a580e62$export$841858b892ce1f4c = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  1: {
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    ruleSetCount: import_restructure.default.uint16,
    ruleSets: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$RuleSet), "ruleSetCount")
  },
  2: {
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    classDef: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$843d551fbbafef71),
    classSetCnt: import_restructure.default.uint16,
    classSet: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$ClassSet), "classSetCnt")
  },
  3: {
    glyphCount: import_restructure.default.uint16,
    lookupCount: import_restructure.default.uint16,
    coverages: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111), "glyphCount"),
    lookupRecords: new import_restructure.default.Array($401800e36a580e62$var$LookupRecord, "lookupCount")
  }
});
var $401800e36a580e62$var$ChainRule = new import_restructure.default.Struct({
  backtrackGlyphCount: import_restructure.default.uint16,
  backtrack: new import_restructure.default.Array(import_restructure.default.uint16, "backtrackGlyphCount"),
  inputGlyphCount: import_restructure.default.uint16,
  input: new import_restructure.default.Array(import_restructure.default.uint16, (t3) => t3.inputGlyphCount - 1),
  lookaheadGlyphCount: import_restructure.default.uint16,
  lookahead: new import_restructure.default.Array(import_restructure.default.uint16, "lookaheadGlyphCount"),
  lookupCount: import_restructure.default.uint16,
  lookupRecords: new import_restructure.default.Array($401800e36a580e62$var$LookupRecord, "lookupCount")
});
var $401800e36a580e62$var$ChainRuleSet = new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$ChainRule), import_restructure.default.uint16);
var $401800e36a580e62$export$5e6d09e6861162f6 = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  1: {
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    chainCount: import_restructure.default.uint16,
    chainRuleSets: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$ChainRuleSet), "chainCount")
  },
  2: {
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    backtrackClassDef: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$843d551fbbafef71),
    inputClassDef: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$843d551fbbafef71),
    lookaheadClassDef: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$843d551fbbafef71),
    chainCount: import_restructure.default.uint16,
    chainClassSet: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$var$ChainRuleSet), "chainCount")
  },
  3: {
    backtrackGlyphCount: import_restructure.default.uint16,
    backtrackCoverage: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111), "backtrackGlyphCount"),
    inputGlyphCount: import_restructure.default.uint16,
    inputCoverage: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111), "inputGlyphCount"),
    lookaheadGlyphCount: import_restructure.default.uint16,
    lookaheadCoverage: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111), "lookaheadGlyphCount"),
    lookupCount: import_restructure.default.uint16,
    lookupRecords: new import_restructure.default.Array($401800e36a580e62$var$LookupRecord, "lookupCount")
  }
});
var $421a2456cdbaa0d8$var$F2DOT14 = new import_restructure.default.Fixed(16, "BE", 14);
var $421a2456cdbaa0d8$var$RegionAxisCoordinates = new import_restructure.default.Struct({
  startCoord: $421a2456cdbaa0d8$var$F2DOT14,
  peakCoord: $421a2456cdbaa0d8$var$F2DOT14,
  endCoord: $421a2456cdbaa0d8$var$F2DOT14
});
var $421a2456cdbaa0d8$var$VariationRegionList = new import_restructure.default.Struct({
  axisCount: import_restructure.default.uint16,
  regionCount: import_restructure.default.uint16,
  variationRegions: new import_restructure.default.Array(new import_restructure.default.Array($421a2456cdbaa0d8$var$RegionAxisCoordinates, "axisCount"), "regionCount")
});
var $421a2456cdbaa0d8$var$DeltaSet = new import_restructure.default.Struct({
  shortDeltas: new import_restructure.default.Array(import_restructure.default.int16, (t3) => t3.parent.shortDeltaCount),
  regionDeltas: new import_restructure.default.Array(import_restructure.default.int8, (t3) => t3.parent.regionIndexCount - t3.parent.shortDeltaCount),
  deltas: (t3) => t3.shortDeltas.concat(t3.regionDeltas)
});
var $421a2456cdbaa0d8$var$ItemVariationData = new import_restructure.default.Struct({
  itemCount: import_restructure.default.uint16,
  shortDeltaCount: import_restructure.default.uint16,
  regionIndexCount: import_restructure.default.uint16,
  regionIndexes: new import_restructure.default.Array(import_restructure.default.uint16, "regionIndexCount"),
  deltaSets: new import_restructure.default.Array($421a2456cdbaa0d8$var$DeltaSet, "itemCount")
});
var $421a2456cdbaa0d8$export$fe1b122a2710f241 = new import_restructure.default.Struct({
  format: import_restructure.default.uint16,
  variationRegionList: new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$var$VariationRegionList),
  variationDataCount: import_restructure.default.uint16,
  itemVariationData: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$var$ItemVariationData), "variationDataCount")
});
var $421a2456cdbaa0d8$var$ConditionTable = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  1: {
    axisIndex: import_restructure.default.uint16,
    axisIndex: import_restructure.default.uint16,
    filterRangeMinValue: $421a2456cdbaa0d8$var$F2DOT14,
    filterRangeMaxValue: $421a2456cdbaa0d8$var$F2DOT14
  }
});
var $421a2456cdbaa0d8$var$ConditionSet = new import_restructure.default.Struct({
  conditionCount: import_restructure.default.uint16,
  conditionTable: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$var$ConditionTable), "conditionCount")
});
var $421a2456cdbaa0d8$var$FeatureTableSubstitutionRecord = new import_restructure.default.Struct({
  featureIndex: import_restructure.default.uint16,
  alternateFeatureTable: new import_restructure.default.Pointer(import_restructure.default.uint32, $401800e36a580e62$export$6e91cf7616333d5, {
    type: "parent"
  })
});
var $421a2456cdbaa0d8$var$FeatureTableSubstitution = new import_restructure.default.Struct({
  version: import_restructure.default.fixed32,
  substitutionCount: import_restructure.default.uint16,
  substitutions: new import_restructure.default.Array($421a2456cdbaa0d8$var$FeatureTableSubstitutionRecord, "substitutionCount")
});
var $421a2456cdbaa0d8$var$FeatureVariationRecord = new import_restructure.default.Struct({
  conditionSet: new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$var$ConditionSet, {
    type: "parent"
  }),
  featureTableSubstitution: new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$var$FeatureTableSubstitution, {
    type: "parent"
  })
});
var $421a2456cdbaa0d8$export$441b70b7971dd419 = new import_restructure.default.Struct({
  majorVersion: import_restructure.default.uint16,
  minorVersion: import_restructure.default.uint16,
  featureVariationRecordCount: import_restructure.default.uint32,
  featureVariationRecords: new import_restructure.default.Array($421a2456cdbaa0d8$var$FeatureVariationRecord, "featureVariationRecordCount")
});

class $3e41cd50e8921098$var$PredefinedOp {
  constructor(predefinedOps, type47) {
    this.predefinedOps = predefinedOps;
    this.type = type47;
  }
  decode(stream, parent, operands) {
    if (this.predefinedOps[operands[0]])
      return this.predefinedOps[operands[0]];
    return this.type.decode(stream, parent, operands);
  }
  size(value15, ctx) {
    return this.type.size(value15, ctx);
  }
  encode(stream, value15, ctx) {
    let index = this.predefinedOps.indexOf(value15);
    if (index !== -1)
      return index;
    return this.type.encode(stream, value15, ctx);
  }
}

class $3e41cd50e8921098$var$CFFEncodingVersion extends import_restructure.default.Number {
  constructor() {
    super("UInt8");
  }
  decode(stream) {
    return import_restructure.default.uint8.decode(stream) & 127;
  }
}
var $3e41cd50e8921098$var$Range1 = new import_restructure.default.Struct({
  first: import_restructure.default.uint16,
  nLeft: import_restructure.default.uint8
});
var $3e41cd50e8921098$var$Range2 = new import_restructure.default.Struct({
  first: import_restructure.default.uint16,
  nLeft: import_restructure.default.uint16
});
var $3e41cd50e8921098$var$CFFCustomEncoding = new import_restructure.default.VersionedStruct(new $3e41cd50e8921098$var$CFFEncodingVersion, {
  0: {
    nCodes: import_restructure.default.uint8,
    codes: new import_restructure.default.Array(import_restructure.default.uint8, "nCodes")
  },
  1: {
    nRanges: import_restructure.default.uint8,
    ranges: new import_restructure.default.Array($3e41cd50e8921098$var$Range1, "nRanges")
  }
});
var $3e41cd50e8921098$var$CFFEncoding = new $3e41cd50e8921098$var$PredefinedOp([
  $50148a3b88f16e26$export$dee0027060fa13bd,
  $50148a3b88f16e26$export$4f58f497e14a53c3
], new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$CFFCustomEncoding, {
  lazy: true
}));

class $3e41cd50e8921098$var$RangeArray extends import_restructure.default.Array {
  decode(stream, parent) {
    let length = utils.resolveLength(this.length, stream, parent);
    let count = 0;
    let res = [];
    while (count < length) {
      let range = this.type.decode(stream, parent);
      range.offset = count;
      count += range.nLeft + 1;
      res.push(range);
    }
    return res;
  }
}
var $3e41cd50e8921098$var$CFFCustomCharset = new import_restructure.default.VersionedStruct(import_restructure.default.uint8, {
  0: {
    glyphs: new import_restructure.default.Array(import_restructure.default.uint16, (t3) => t3.parent.CharStrings.length - 1)
  },
  1: {
    ranges: new $3e41cd50e8921098$var$RangeArray($3e41cd50e8921098$var$Range1, (t3) => t3.parent.CharStrings.length - 1)
  },
  2: {
    ranges: new $3e41cd50e8921098$var$RangeArray($3e41cd50e8921098$var$Range2, (t3) => t3.parent.CharStrings.length - 1)
  }
});
var $3e41cd50e8921098$var$CFFCharset = new $3e41cd50e8921098$var$PredefinedOp([
  $a5fab60a6eadb8ed$export$c33b50336c234f16,
  $a5fab60a6eadb8ed$export$3ed0f9e1fee8d489,
  $a5fab60a6eadb8ed$export$dc28be11139d4120
], new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$CFFCustomCharset, {
  lazy: true
}));
var $3e41cd50e8921098$var$FDRange3 = new import_restructure.default.Struct({
  first: import_restructure.default.uint16,
  fd: import_restructure.default.uint8
});
var $3e41cd50e8921098$var$FDRange4 = new import_restructure.default.Struct({
  first: import_restructure.default.uint32,
  fd: import_restructure.default.uint16
});
var $3e41cd50e8921098$var$FDSelect = new import_restructure.default.VersionedStruct(import_restructure.default.uint8, {
  0: {
    fds: new import_restructure.default.Array(import_restructure.default.uint8, (t3) => t3.parent.CharStrings.length)
  },
  3: {
    nRanges: import_restructure.default.uint16,
    ranges: new import_restructure.default.Array($3e41cd50e8921098$var$FDRange3, "nRanges"),
    sentinel: import_restructure.default.uint16
  },
  4: {
    nRanges: import_restructure.default.uint32,
    ranges: new import_restructure.default.Array($3e41cd50e8921098$var$FDRange4, "nRanges"),
    sentinel: import_restructure.default.uint32
  }
});
var $3e41cd50e8921098$var$ptr = new $6631a7581d654814$export$2e2bcd8739ae039($94c2c7ed7c236891$export$2e2bcd8739ae039);

class $3e41cd50e8921098$var$CFFPrivateOp {
  decode(stream, parent, operands) {
    parent.length = operands[0];
    return $3e41cd50e8921098$var$ptr.decode(stream, parent, [
      operands[1]
    ]);
  }
  size(dict, ctx) {
    return [
      $94c2c7ed7c236891$export$2e2bcd8739ae039.size(dict, ctx, false),
      $3e41cd50e8921098$var$ptr.size(dict, ctx)[0]
    ];
  }
  encode(stream, dict, ctx) {
    return [
      $94c2c7ed7c236891$export$2e2bcd8739ae039.size(dict, ctx, false),
      $3e41cd50e8921098$var$ptr.encode(stream, dict, ctx)[0]
    ];
  }
}
var $3e41cd50e8921098$var$FontDict = new $1694c4b242cd1a66$export$2e2bcd8739ae039([
  [
    18,
    "Private",
    new $3e41cd50e8921098$var$CFFPrivateOp,
    null
  ],
  [
    [
      12,
      38
    ],
    "FontName",
    "sid",
    null
  ],
  [
    [
      12,
      7
    ],
    "FontMatrix",
    "array",
    [
      0.001,
      0,
      0,
      0.001,
      0,
      0
    ]
  ],
  [
    [
      12,
      5
    ],
    "PaintType",
    "number",
    0
  ]
]);
var $3e41cd50e8921098$var$CFFTopDict = new $1694c4b242cd1a66$export$2e2bcd8739ae039([
  [
    [
      12,
      30
    ],
    "ROS",
    [
      "sid",
      "sid",
      "number"
    ],
    null
  ],
  [
    0,
    "version",
    "sid",
    null
  ],
  [
    1,
    "Notice",
    "sid",
    null
  ],
  [
    [
      12,
      0
    ],
    "Copyright",
    "sid",
    null
  ],
  [
    2,
    "FullName",
    "sid",
    null
  ],
  [
    3,
    "FamilyName",
    "sid",
    null
  ],
  [
    4,
    "Weight",
    "sid",
    null
  ],
  [
    [
      12,
      1
    ],
    "isFixedPitch",
    "boolean",
    false
  ],
  [
    [
      12,
      2
    ],
    "ItalicAngle",
    "number",
    0
  ],
  [
    [
      12,
      3
    ],
    "UnderlinePosition",
    "number",
    -100
  ],
  [
    [
      12,
      4
    ],
    "UnderlineThickness",
    "number",
    50
  ],
  [
    [
      12,
      5
    ],
    "PaintType",
    "number",
    0
  ],
  [
    [
      12,
      6
    ],
    "CharstringType",
    "number",
    2
  ],
  [
    [
      12,
      7
    ],
    "FontMatrix",
    "array",
    [
      0.001,
      0,
      0,
      0.001,
      0,
      0
    ]
  ],
  [
    13,
    "UniqueID",
    "number",
    null
  ],
  [
    5,
    "FontBBox",
    "array",
    [
      0,
      0,
      0,
      0
    ]
  ],
  [
    [
      12,
      8
    ],
    "StrokeWidth",
    "number",
    0
  ],
  [
    14,
    "XUID",
    "array",
    null
  ],
  [
    15,
    "charset",
    $3e41cd50e8921098$var$CFFCharset,
    $a5fab60a6eadb8ed$export$c33b50336c234f16
  ],
  [
    16,
    "Encoding",
    $3e41cd50e8921098$var$CFFEncoding,
    $50148a3b88f16e26$export$dee0027060fa13bd
  ],
  [
    17,
    "CharStrings",
    new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039),
    null
  ],
  [
    18,
    "Private",
    new $3e41cd50e8921098$var$CFFPrivateOp,
    null
  ],
  [
    [
      12,
      20
    ],
    "SyntheticBase",
    "number",
    null
  ],
  [
    [
      12,
      21
    ],
    "PostScript",
    "sid",
    null
  ],
  [
    [
      12,
      22
    ],
    "BaseFontName",
    "sid",
    null
  ],
  [
    [
      12,
      23
    ],
    "BaseFontBlend",
    "delta",
    null
  ],
  [
    [
      12,
      31
    ],
    "CIDFontVersion",
    "number",
    0
  ],
  [
    [
      12,
      32
    ],
    "CIDFontRevision",
    "number",
    0
  ],
  [
    [
      12,
      33
    ],
    "CIDFontType",
    "number",
    0
  ],
  [
    [
      12,
      34
    ],
    "CIDCount",
    "number",
    8720
  ],
  [
    [
      12,
      35
    ],
    "UIDBase",
    "number",
    null
  ],
  [
    [
      12,
      37
    ],
    "FDSelect",
    new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$FDSelect),
    null
  ],
  [
    [
      12,
      36
    ],
    "FDArray",
    new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039($3e41cd50e8921098$var$FontDict)),
    null
  ],
  [
    [
      12,
      38
    ],
    "FontName",
    "sid",
    null
  ]
]);
var $3e41cd50e8921098$var$VariationStore = new import_restructure.default.Struct({
  length: import_restructure.default.uint16,
  itemVariationStore: $421a2456cdbaa0d8$export$fe1b122a2710f241
});
var $3e41cd50e8921098$var$CFF2TopDict = new $1694c4b242cd1a66$export$2e2bcd8739ae039([
  [
    [
      12,
      7
    ],
    "FontMatrix",
    "array",
    [
      0.001,
      0,
      0,
      0.001,
      0,
      0
    ]
  ],
  [
    17,
    "CharStrings",
    new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039),
    null
  ],
  [
    [
      12,
      37
    ],
    "FDSelect",
    new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$FDSelect),
    null
  ],
  [
    [
      12,
      36
    ],
    "FDArray",
    new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039($3e41cd50e8921098$var$FontDict)),
    null
  ],
  [
    24,
    "vstore",
    new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$VariationStore),
    null
  ],
  [
    25,
    "maxstack",
    "number",
    193
  ]
]);
var $3e41cd50e8921098$var$CFFTop = new import_restructure.default.VersionedStruct(import_restructure.default.fixed16, {
  1: {
    hdrSize: import_restructure.default.uint8,
    offSize: import_restructure.default.uint8,
    nameIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039(new import_restructure.default.String("length")),
    topDictIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039($3e41cd50e8921098$var$CFFTopDict),
    stringIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039(new import_restructure.default.String("length")),
    globalSubrIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039
  },
  2: {
    hdrSize: import_restructure.default.uint8,
    length: import_restructure.default.uint16,
    topDict: $3e41cd50e8921098$var$CFF2TopDict,
    globalSubrIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039
  }
});
var $3e41cd50e8921098$export$2e2bcd8739ae039 = $3e41cd50e8921098$var$CFFTop;

class $8770fc79268fa3c2$var$CFFFont {
  constructor(stream) {
    this.stream = stream;
    this.decode();
  }
  static decode(stream) {
    return new $8770fc79268fa3c2$var$CFFFont(stream);
  }
  decode() {
    let start = this.stream.pos;
    let top = $3e41cd50e8921098$export$2e2bcd8739ae039.decode(this.stream);
    for (let key in top) {
      let val = top[key];
      this[key] = val;
    }
    if (this.version < 2) {
      if (this.topDictIndex.length !== 1)
        throw new Error("Only a single font is allowed in CFF");
      this.topDict = this.topDictIndex[0];
    }
    this.isCIDFont = this.topDict.ROS != null;
    return this;
  }
  string(sid) {
    if (this.version >= 2)
      return null;
    if (sid < $276d3ff37a4362c9$export$2e2bcd8739ae039.length)
      return $276d3ff37a4362c9$export$2e2bcd8739ae039[sid];
    return this.stringIndex[sid - $276d3ff37a4362c9$export$2e2bcd8739ae039.length];
  }
  get postscriptName() {
    if (this.version < 2)
      return this.nameIndex[0];
    return null;
  }
  get fullName() {
    return this.string(this.topDict.FullName);
  }
  get familyName() {
    return this.string(this.topDict.FamilyName);
  }
  getCharString(glyph) {
    this.stream.pos = this.topDict.CharStrings[glyph].offset;
    return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);
  }
  getGlyphName(gid) {
    if (this.version >= 2)
      return null;
    if (this.isCIDFont)
      return null;
    let { charset } = this.topDict;
    if (Array.isArray(charset))
      return charset[gid];
    if (gid === 0)
      return ".notdef";
    gid -= 1;
    switch (charset.version) {
      case 0:
        return this.string(charset.glyphs[gid]);
      case 1:
      case 2:
        for (let i3 = 0;i3 < charset.ranges.length; i3++) {
          let range = charset.ranges[i3];
          if (range.offset <= gid && gid <= range.offset + range.nLeft)
            return this.string(range.first + (gid - range.offset));
        }
        break;
    }
    return null;
  }
  fdForGlyph(gid) {
    if (!this.topDict.FDSelect)
      return null;
    switch (this.topDict.FDSelect.version) {
      case 0:
        return this.topDict.FDSelect.fds[gid];
      case 3:
      case 4:
        let { ranges } = this.topDict.FDSelect;
        let low = 0;
        let high = ranges.length - 1;
        while (low <= high) {
          let mid = low + high >> 1;
          if (gid < ranges[mid].first)
            high = mid - 1;
          else if (mid < high && gid >= ranges[mid + 1].first)
            low = mid + 1;
          else
            return ranges[mid].fd;
        }
      default:
        throw new Error(`Unknown FDSelect version: ${this.topDict.FDSelect.version}`);
    }
  }
  privateDictForGlyph(gid) {
    if (this.topDict.FDSelect) {
      let fd = this.fdForGlyph(gid);
      if (this.topDict.FDArray[fd])
        return this.topDict.FDArray[fd].Private;
      return null;
    }
    if (this.version < 2)
      return this.topDict.Private;
    return this.topDict.FDArray[0].Private;
  }
}
var $8770fc79268fa3c2$export$2e2bcd8739ae039 = $8770fc79268fa3c2$var$CFFFont;
var $79f2eb50e4490e51$var$VerticalOrigin = new import_restructure.default.Struct({
  glyphIndex: import_restructure.default.uint16,
  vertOriginY: import_restructure.default.int16
});
var $79f2eb50e4490e51$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  majorVersion: import_restructure.default.uint16,
  minorVersion: import_restructure.default.uint16,
  defaultVertOriginY: import_restructure.default.int16,
  numVertOriginYMetrics: import_restructure.default.uint16,
  metrics: new import_restructure.default.Array($79f2eb50e4490e51$var$VerticalOrigin, "numVertOriginYMetrics")
});
var $9dd3c2ae0a322c53$export$16b227cb15d716a0 = new import_restructure.default.Struct({
  height: import_restructure.default.uint8,
  width: import_restructure.default.uint8,
  horiBearingX: import_restructure.default.int8,
  horiBearingY: import_restructure.default.int8,
  horiAdvance: import_restructure.default.uint8,
  vertBearingX: import_restructure.default.int8,
  vertBearingY: import_restructure.default.int8,
  vertAdvance: import_restructure.default.uint8
});
var $9dd3c2ae0a322c53$export$62c53e75f69bfe12 = new import_restructure.default.Struct({
  height: import_restructure.default.uint8,
  width: import_restructure.default.uint8,
  bearingX: import_restructure.default.int8,
  bearingY: import_restructure.default.int8,
  advance: import_restructure.default.uint8
});
var $9dd3c2ae0a322c53$var$EBDTComponent = new import_restructure.default.Struct({
  glyph: import_restructure.default.uint16,
  xOffset: import_restructure.default.int8,
  yOffset: import_restructure.default.int8
});

class $9dd3c2ae0a322c53$var$ByteAligned {
}

class $9dd3c2ae0a322c53$var$BitAligned {
}
var $9dd3c2ae0a322c53$export$f1f5ddeb20d14f = new import_restructure.default.VersionedStruct("version", {
  1: {
    metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,
    data: $9dd3c2ae0a322c53$var$ByteAligned
  },
  2: {
    metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,
    data: $9dd3c2ae0a322c53$var$BitAligned
  },
  5: {
    data: $9dd3c2ae0a322c53$var$BitAligned
  },
  6: {
    metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,
    data: $9dd3c2ae0a322c53$var$ByteAligned
  },
  7: {
    metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,
    data: $9dd3c2ae0a322c53$var$BitAligned
  },
  8: {
    metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,
    pad: new import_restructure.default.Reserved(import_restructure.default.uint8),
    numComponents: import_restructure.default.uint16,
    components: new import_restructure.default.Array($9dd3c2ae0a322c53$var$EBDTComponent, "numComponents")
  },
  9: {
    metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,
    pad: new import_restructure.default.Reserved(import_restructure.default.uint8),
    numComponents: import_restructure.default.uint16,
    components: new import_restructure.default.Array($9dd3c2ae0a322c53$var$EBDTComponent, "numComponents")
  },
  17: {
    metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,
    dataLen: import_restructure.default.uint32,
    data: new import_restructure.default.Buffer("dataLen")
  },
  18: {
    metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,
    dataLen: import_restructure.default.uint32,
    data: new import_restructure.default.Buffer("dataLen")
  },
  19: {
    dataLen: import_restructure.default.uint32,
    data: new import_restructure.default.Buffer("dataLen")
  }
});
var $234c291eab07e474$var$SBitLineMetrics = new import_restructure.default.Struct({
  ascender: import_restructure.default.int8,
  descender: import_restructure.default.int8,
  widthMax: import_restructure.default.uint8,
  caretSlopeNumerator: import_restructure.default.int8,
  caretSlopeDenominator: import_restructure.default.int8,
  caretOffset: import_restructure.default.int8,
  minOriginSB: import_restructure.default.int8,
  minAdvanceSB: import_restructure.default.int8,
  maxBeforeBL: import_restructure.default.int8,
  minAfterBL: import_restructure.default.int8,
  pad: new import_restructure.default.Reserved(import_restructure.default.int8, 2)
});
var $234c291eab07e474$var$CodeOffsetPair = new import_restructure.default.Struct({
  glyphCode: import_restructure.default.uint16,
  offset: import_restructure.default.uint16
});
var $234c291eab07e474$var$IndexSubtable = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  header: {
    imageFormat: import_restructure.default.uint16,
    imageDataOffset: import_restructure.default.uint32
  },
  1: {
    offsetArray: new import_restructure.default.Array(import_restructure.default.uint32, (t3) => t3.parent.lastGlyphIndex - t3.parent.firstGlyphIndex + 1)
  },
  2: {
    imageSize: import_restructure.default.uint32,
    bigMetrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0
  },
  3: {
    offsetArray: new import_restructure.default.Array(import_restructure.default.uint16, (t3) => t3.parent.lastGlyphIndex - t3.parent.firstGlyphIndex + 1)
  },
  4: {
    numGlyphs: import_restructure.default.uint32,
    glyphArray: new import_restructure.default.Array($234c291eab07e474$var$CodeOffsetPair, (t3) => t3.numGlyphs + 1)
  },
  5: {
    imageSize: import_restructure.default.uint32,
    bigMetrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,
    numGlyphs: import_restructure.default.uint32,
    glyphCodeArray: new import_restructure.default.Array(import_restructure.default.uint16, "numGlyphs")
  }
});
var $234c291eab07e474$var$IndexSubtableArray = new import_restructure.default.Struct({
  firstGlyphIndex: import_restructure.default.uint16,
  lastGlyphIndex: import_restructure.default.uint16,
  subtable: new import_restructure.default.Pointer(import_restructure.default.uint32, $234c291eab07e474$var$IndexSubtable)
});
var $234c291eab07e474$var$BitmapSizeTable = new import_restructure.default.Struct({
  indexSubTableArray: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array($234c291eab07e474$var$IndexSubtableArray, 1), {
    type: "parent"
  }),
  indexTablesSize: import_restructure.default.uint32,
  numberOfIndexSubTables: import_restructure.default.uint32,
  colorRef: import_restructure.default.uint32,
  hori: $234c291eab07e474$var$SBitLineMetrics,
  vert: $234c291eab07e474$var$SBitLineMetrics,
  startGlyphIndex: import_restructure.default.uint16,
  endGlyphIndex: import_restructure.default.uint16,
  ppemX: import_restructure.default.uint8,
  ppemY: import_restructure.default.uint8,
  bitDepth: import_restructure.default.uint8,
  flags: new import_restructure.default.Bitfield(import_restructure.default.uint8, [
    "horizontal",
    "vertical"
  ])
});
var $234c291eab07e474$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint32,
  numSizes: import_restructure.default.uint32,
  sizes: new import_restructure.default.Array($234c291eab07e474$var$BitmapSizeTable, "numSizes")
});
var $55d04373f0cac44e$var$ImageTable = new import_restructure.default.Struct({
  ppem: import_restructure.default.uint16,
  resolution: import_restructure.default.uint16,
  imageOffsets: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint32, "void"), (t3) => t3.parent.parent.maxp.numGlyphs + 1)
});
var $55d04373f0cac44e$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  flags: new import_restructure.default.Bitfield(import_restructure.default.uint16, [
    "renderOutlines"
  ]),
  numImgTables: import_restructure.default.uint32,
  imageTables: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint32, $55d04373f0cac44e$var$ImageTable), "numImgTables")
});
var $0e59eccfa3005d9d$var$LayerRecord = new import_restructure.default.Struct({
  gid: import_restructure.default.uint16,
  paletteIndex: import_restructure.default.uint16
});
var $0e59eccfa3005d9d$var$BaseGlyphRecord = new import_restructure.default.Struct({
  gid: import_restructure.default.uint16,
  firstLayerIndex: import_restructure.default.uint16,
  numLayers: import_restructure.default.uint16
});
var $0e59eccfa3005d9d$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  numBaseGlyphRecords: import_restructure.default.uint16,
  baseGlyphRecord: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array($0e59eccfa3005d9d$var$BaseGlyphRecord, "numBaseGlyphRecords")),
  layerRecords: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array($0e59eccfa3005d9d$var$LayerRecord, "numLayerRecords"), {
    lazy: true
  }),
  numLayerRecords: import_restructure.default.uint16
});
var $23affa36a12f7915$var$ColorRecord = new import_restructure.default.Struct({
  blue: import_restructure.default.uint8,
  green: import_restructure.default.uint8,
  red: import_restructure.default.uint8,
  alpha: import_restructure.default.uint8
});
var $23affa36a12f7915$export$2e2bcd8739ae039 = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  header: {
    numPaletteEntries: import_restructure.default.uint16,
    numPalettes: import_restructure.default.uint16,
    numColorRecords: import_restructure.default.uint16,
    colorRecords: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array($23affa36a12f7915$var$ColorRecord, "numColorRecords")),
    colorRecordIndices: new import_restructure.default.Array(import_restructure.default.uint16, "numPalettes")
  },
  0: {},
  1: {
    offsetPaletteTypeArray: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array(import_restructure.default.uint32, "numPalettes")),
    offsetPaletteLabelArray: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array(import_restructure.default.uint16, "numPalettes")),
    offsetPaletteEntryLabelArray: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array(import_restructure.default.uint16, "numPaletteEntries"))
  }
});
var $9fffe61eb0785f74$var$BaseCoord = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  1: {
    coordinate: import_restructure.default.int16
  },
  2: {
    coordinate: import_restructure.default.int16,
    referenceGlyph: import_restructure.default.uint16,
    baseCoordPoint: import_restructure.default.uint16
  },
  3: {
    coordinate: import_restructure.default.int16,
    deviceTable: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$8215d14a63d9fb10)
  }
});
var $9fffe61eb0785f74$var$BaseValues = new import_restructure.default.Struct({
  defaultIndex: import_restructure.default.uint16,
  baseCoordCount: import_restructure.default.uint16,
  baseCoords: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseCoord), "baseCoordCount")
});
var $9fffe61eb0785f74$var$FeatMinMaxRecord = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  minCoord: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseCoord, {
    type: "parent"
  }),
  maxCoord: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseCoord, {
    type: "parent"
  })
});
var $9fffe61eb0785f74$var$MinMax = new import_restructure.default.Struct({
  minCoord: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseCoord),
  maxCoord: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseCoord),
  featMinMaxCount: import_restructure.default.uint16,
  featMinMaxRecords: new import_restructure.default.Array($9fffe61eb0785f74$var$FeatMinMaxRecord, "featMinMaxCount")
});
var $9fffe61eb0785f74$var$BaseLangSysRecord = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  minMax: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$MinMax, {
    type: "parent"
  })
});
var $9fffe61eb0785f74$var$BaseScript = new import_restructure.default.Struct({
  baseValues: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseValues),
  defaultMinMax: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$MinMax),
  baseLangSysCount: import_restructure.default.uint16,
  baseLangSysRecords: new import_restructure.default.Array($9fffe61eb0785f74$var$BaseLangSysRecord, "baseLangSysCount")
});
var $9fffe61eb0785f74$var$BaseScriptRecord = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  script: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseScript, {
    type: "parent"
  })
});
var $9fffe61eb0785f74$var$BaseScriptList = new import_restructure.default.Array($9fffe61eb0785f74$var$BaseScriptRecord, import_restructure.default.uint16);
var $9fffe61eb0785f74$var$BaseTagList = new import_restructure.default.Array(new import_restructure.default.String(4), import_restructure.default.uint16);
var $9fffe61eb0785f74$var$Axis = new import_restructure.default.Struct({
  baseTagList: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseTagList),
  baseScriptList: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$BaseScriptList)
});
var $9fffe61eb0785f74$export$2e2bcd8739ae039 = new import_restructure.default.VersionedStruct(import_restructure.default.uint32, {
  header: {
    horizAxis: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$Axis),
    vertAxis: new import_restructure.default.Pointer(import_restructure.default.uint16, $9fffe61eb0785f74$var$Axis)
  },
  65536: {},
  65537: {
    itemVariationStore: new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$export$fe1b122a2710f241)
  }
});
var $418face38567ee6e$var$AttachPoint = new import_restructure.default.Array(import_restructure.default.uint16, import_restructure.default.uint16);
var $418face38567ee6e$var$AttachList = new import_restructure.default.Struct({
  coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
  glyphCount: import_restructure.default.uint16,
  attachPoints: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $418face38567ee6e$var$AttachPoint), "glyphCount")
});
var $418face38567ee6e$var$CaretValue = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  1: {
    coordinate: import_restructure.default.int16
  },
  2: {
    caretValuePoint: import_restructure.default.uint16
  },
  3: {
    coordinate: import_restructure.default.int16,
    deviceTable: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$8215d14a63d9fb10)
  }
});
var $418face38567ee6e$var$LigGlyph = new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $418face38567ee6e$var$CaretValue), import_restructure.default.uint16);
var $418face38567ee6e$var$LigCaretList = new import_restructure.default.Struct({
  coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
  ligGlyphCount: import_restructure.default.uint16,
  ligGlyphs: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $418face38567ee6e$var$LigGlyph), "ligGlyphCount")
});
var $418face38567ee6e$var$MarkGlyphSetsDef = new import_restructure.default.Struct({
  markSetTableFormat: import_restructure.default.uint16,
  markSetCount: import_restructure.default.uint16,
  coverage: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint32, $401800e36a580e62$export$17608c3f81a6111), "markSetCount")
});
var $418face38567ee6e$export$2e2bcd8739ae039 = new import_restructure.default.VersionedStruct(import_restructure.default.uint32, {
  header: {
    glyphClassDef: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$843d551fbbafef71),
    attachList: new import_restructure.default.Pointer(import_restructure.default.uint16, $418face38567ee6e$var$AttachList),
    ligCaretList: new import_restructure.default.Pointer(import_restructure.default.uint16, $418face38567ee6e$var$LigCaretList),
    markAttachClassDef: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$843d551fbbafef71)
  },
  65536: {},
  65538: {
    markGlyphSetsDef: new import_restructure.default.Pointer(import_restructure.default.uint16, $418face38567ee6e$var$MarkGlyphSetsDef)
  },
  65539: {
    markGlyphSetsDef: new import_restructure.default.Pointer(import_restructure.default.uint16, $418face38567ee6e$var$MarkGlyphSetsDef),
    itemVariationStore: new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$export$fe1b122a2710f241)
  }
});
var $010e157f6d8a40e9$var$ValueFormat = new import_restructure.default.Bitfield(import_restructure.default.uint16, [
  "xPlacement",
  "yPlacement",
  "xAdvance",
  "yAdvance",
  "xPlaDevice",
  "yPlaDevice",
  "xAdvDevice",
  "yAdvDevice"
]);
var $010e157f6d8a40e9$var$types = {
  xPlacement: import_restructure.default.int16,
  yPlacement: import_restructure.default.int16,
  xAdvance: import_restructure.default.int16,
  yAdvance: import_restructure.default.int16,
  xPlaDevice: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {
    type: "global",
    relativeTo: (ctx) => ctx.rel
  }),
  yPlaDevice: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {
    type: "global",
    relativeTo: (ctx) => ctx.rel
  }),
  xAdvDevice: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {
    type: "global",
    relativeTo: (ctx) => ctx.rel
  }),
  yAdvDevice: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {
    type: "global",
    relativeTo: (ctx) => ctx.rel
  })
};

class $010e157f6d8a40e9$var$ValueRecord {
  constructor(key = "valueFormat") {
    this.key = key;
  }
  buildStruct(parent) {
    let struct = parent;
    while (!struct[this.key] && struct.parent)
      struct = struct.parent;
    if (!struct[this.key])
      return;
    let fields = {};
    fields.rel = () => struct._startOffset;
    let format = struct[this.key];
    for (let key in format)
      if (format[key])
        fields[key] = $010e157f6d8a40e9$var$types[key];
    return new import_restructure.default.Struct(fields);
  }
  size(val, ctx) {
    return this.buildStruct(ctx).size(val, ctx);
  }
  decode(stream, parent) {
    let res = this.buildStruct(parent).decode(stream, parent);
    delete res.rel;
    return res;
  }
}
var $010e157f6d8a40e9$var$PairValueRecord = new import_restructure.default.Struct({
  secondGlyph: import_restructure.default.uint16,
  value1: new $010e157f6d8a40e9$var$ValueRecord("valueFormat1"),
  value2: new $010e157f6d8a40e9$var$ValueRecord("valueFormat2")
});
var $010e157f6d8a40e9$var$PairSet = new import_restructure.default.Array($010e157f6d8a40e9$var$PairValueRecord, import_restructure.default.uint16);
var $010e157f6d8a40e9$var$Class2Record = new import_restructure.default.Struct({
  value1: new $010e157f6d8a40e9$var$ValueRecord("valueFormat1"),
  value2: new $010e157f6d8a40e9$var$ValueRecord("valueFormat2")
});
var $010e157f6d8a40e9$var$Anchor = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  1: {
    xCoordinate: import_restructure.default.int16,
    yCoordinate: import_restructure.default.int16
  },
  2: {
    xCoordinate: import_restructure.default.int16,
    yCoordinate: import_restructure.default.int16,
    anchorPoint: import_restructure.default.uint16
  },
  3: {
    xCoordinate: import_restructure.default.int16,
    yCoordinate: import_restructure.default.int16,
    xDeviceTable: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$8215d14a63d9fb10),
    yDeviceTable: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$8215d14a63d9fb10)
  }
});
var $010e157f6d8a40e9$var$EntryExitRecord = new import_restructure.default.Struct({
  entryAnchor: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$Anchor, {
    type: "parent"
  }),
  exitAnchor: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$Anchor, {
    type: "parent"
  })
});
var $010e157f6d8a40e9$var$MarkRecord = new import_restructure.default.Struct({
  class: import_restructure.default.uint16,
  markAnchor: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$Anchor, {
    type: "parent"
  })
});
var $010e157f6d8a40e9$var$MarkArray = new import_restructure.default.Array($010e157f6d8a40e9$var$MarkRecord, import_restructure.default.uint16);
var $010e157f6d8a40e9$var$BaseRecord = new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$Anchor), (t3) => t3.parent.classCount);
var $010e157f6d8a40e9$var$BaseArray = new import_restructure.default.Array($010e157f6d8a40e9$var$BaseRecord, import_restructure.default.uint16);
var $010e157f6d8a40e9$var$ComponentRecord = new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$Anchor), (t3) => t3.parent.parent.classCount);
var $010e157f6d8a40e9$var$LigatureAttach = new import_restructure.default.Array($010e157f6d8a40e9$var$ComponentRecord, import_restructure.default.uint16);
var $010e157f6d8a40e9$var$LigatureArray = new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$LigatureAttach), import_restructure.default.uint16);
var $010e157f6d8a40e9$export$73a8cfb19cd43a0f = new import_restructure.default.VersionedStruct("lookupType", {
  1: new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
    1: {
      coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
      valueFormat: $010e157f6d8a40e9$var$ValueFormat,
      value: new $010e157f6d8a40e9$var$ValueRecord
    },
    2: {
      coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
      valueFormat: $010e157f6d8a40e9$var$ValueFormat,
      valueCount: import_restructure.default.uint16,
      values: new import_restructure.default.LazyArray(new $010e157f6d8a40e9$var$ValueRecord, "valueCount")
    }
  }),
  2: new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
    1: {
      coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
      valueFormat1: $010e157f6d8a40e9$var$ValueFormat,
      valueFormat2: $010e157f6d8a40e9$var$ValueFormat,
      pairSetCount: import_restructure.default.uint16,
      pairSets: new import_restructure.default.LazyArray(new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$PairSet), "pairSetCount")
    },
    2: {
      coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
      valueFormat1: $010e157f6d8a40e9$var$ValueFormat,
      valueFormat2: $010e157f6d8a40e9$var$ValueFormat,
      classDef1: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$843d551fbbafef71),
      classDef2: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$843d551fbbafef71),
      class1Count: import_restructure.default.uint16,
      class2Count: import_restructure.default.uint16,
      classRecords: new import_restructure.default.LazyArray(new import_restructure.default.LazyArray($010e157f6d8a40e9$var$Class2Record, "class2Count"), "class1Count")
    }
  }),
  3: {
    format: import_restructure.default.uint16,
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    entryExitCount: import_restructure.default.uint16,
    entryExitRecords: new import_restructure.default.Array($010e157f6d8a40e9$var$EntryExitRecord, "entryExitCount")
  },
  4: {
    format: import_restructure.default.uint16,
    markCoverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    baseCoverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    classCount: import_restructure.default.uint16,
    markArray: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$MarkArray),
    baseArray: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$BaseArray)
  },
  5: {
    format: import_restructure.default.uint16,
    markCoverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    ligatureCoverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    classCount: import_restructure.default.uint16,
    markArray: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$MarkArray),
    ligatureArray: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$LigatureArray)
  },
  6: {
    format: import_restructure.default.uint16,
    mark1Coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    mark2Coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    classCount: import_restructure.default.uint16,
    mark1Array: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$MarkArray),
    mark2Array: new import_restructure.default.Pointer(import_restructure.default.uint16, $010e157f6d8a40e9$var$BaseArray)
  },
  7: $401800e36a580e62$export$841858b892ce1f4c,
  8: $401800e36a580e62$export$5e6d09e6861162f6,
  9: {
    posFormat: import_restructure.default.uint16,
    lookupType: import_restructure.default.uint16,
    extension: new import_restructure.default.Pointer(import_restructure.default.uint32, null)
  }
});
$010e157f6d8a40e9$export$73a8cfb19cd43a0f.versions[9].extension.type = $010e157f6d8a40e9$export$73a8cfb19cd43a0f;
var $010e157f6d8a40e9$export$2e2bcd8739ae039 = new import_restructure.default.VersionedStruct(import_restructure.default.uint32, {
  header: {
    scriptList: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$3e15fc05ce864229),
    featureList: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$aa18130def4b6cb4),
    lookupList: new import_restructure.default.Pointer(import_restructure.default.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($010e157f6d8a40e9$export$73a8cfb19cd43a0f))
  },
  65536: {},
  65537: {
    featureVariations: new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$export$441b70b7971dd419)
  }
});
var $7176ea6bb7dcf1c6$var$Sequence = new import_restructure.default.Array(import_restructure.default.uint16, import_restructure.default.uint16);
var $7176ea6bb7dcf1c6$var$AlternateSet = $7176ea6bb7dcf1c6$var$Sequence;
var $7176ea6bb7dcf1c6$var$Ligature = new import_restructure.default.Struct({
  glyph: import_restructure.default.uint16,
  compCount: import_restructure.default.uint16,
  components: new import_restructure.default.Array(import_restructure.default.uint16, (t3) => t3.compCount - 1)
});
var $7176ea6bb7dcf1c6$var$LigatureSet = new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $7176ea6bb7dcf1c6$var$Ligature), import_restructure.default.uint16);
var $7176ea6bb7dcf1c6$var$GSUBLookup = new import_restructure.default.VersionedStruct("lookupType", {
  1: new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
    1: {
      coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
      deltaGlyphID: import_restructure.default.int16
    },
    2: {
      coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
      glyphCount: import_restructure.default.uint16,
      substitute: new import_restructure.default.LazyArray(import_restructure.default.uint16, "glyphCount")
    }
  }),
  2: {
    substFormat: import_restructure.default.uint16,
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    count: import_restructure.default.uint16,
    sequences: new import_restructure.default.LazyArray(new import_restructure.default.Pointer(import_restructure.default.uint16, $7176ea6bb7dcf1c6$var$Sequence), "count")
  },
  3: {
    substFormat: import_restructure.default.uint16,
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    count: import_restructure.default.uint16,
    alternateSet: new import_restructure.default.LazyArray(new import_restructure.default.Pointer(import_restructure.default.uint16, $7176ea6bb7dcf1c6$var$AlternateSet), "count")
  },
  4: {
    substFormat: import_restructure.default.uint16,
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    count: import_restructure.default.uint16,
    ligatureSets: new import_restructure.default.LazyArray(new import_restructure.default.Pointer(import_restructure.default.uint16, $7176ea6bb7dcf1c6$var$LigatureSet), "count")
  },
  5: $401800e36a580e62$export$841858b892ce1f4c,
  6: $401800e36a580e62$export$5e6d09e6861162f6,
  7: {
    substFormat: import_restructure.default.uint16,
    lookupType: import_restructure.default.uint16,
    extension: new import_restructure.default.Pointer(import_restructure.default.uint32, null)
  },
  8: {
    substFormat: import_restructure.default.uint16,
    coverage: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111),
    backtrackCoverage: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111), "backtrackGlyphCount"),
    lookaheadGlyphCount: import_restructure.default.uint16,
    lookaheadCoverage: new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$17608c3f81a6111), "lookaheadGlyphCount"),
    glyphCount: import_restructure.default.uint16,
    substitutes: new import_restructure.default.Array(import_restructure.default.uint16, "glyphCount")
  }
});
$7176ea6bb7dcf1c6$var$GSUBLookup.versions[7].extension.type = $7176ea6bb7dcf1c6$var$GSUBLookup;
var $7176ea6bb7dcf1c6$export$2e2bcd8739ae039 = new import_restructure.default.VersionedStruct(import_restructure.default.uint32, {
  header: {
    scriptList: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$3e15fc05ce864229),
    featureList: new import_restructure.default.Pointer(import_restructure.default.uint16, $401800e36a580e62$export$aa18130def4b6cb4),
    lookupList: new import_restructure.default.Pointer(import_restructure.default.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($7176ea6bb7dcf1c6$var$GSUBLookup))
  },
  65536: {},
  65537: {
    featureVariations: new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$export$441b70b7971dd419)
  }
});
var $71e9e74bb6366bce$var$JstfGSUBModList = new import_restructure.default.Array(import_restructure.default.uint16, import_restructure.default.uint16);
var $71e9e74bb6366bce$var$JstfPriority = new import_restructure.default.Struct({
  shrinkageEnableGSUB: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
  shrinkageDisableGSUB: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
  shrinkageEnableGPOS: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
  shrinkageDisableGPOS: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
  shrinkageJstfMax: new import_restructure.default.Pointer(import_restructure.default.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($010e157f6d8a40e9$export$73a8cfb19cd43a0f)),
  extensionEnableGSUB: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
  extensionDisableGSUB: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
  extensionEnableGPOS: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
  extensionDisableGPOS: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
  extensionJstfMax: new import_restructure.default.Pointer(import_restructure.default.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($010e157f6d8a40e9$export$73a8cfb19cd43a0f))
});
var $71e9e74bb6366bce$var$JstfLangSys = new import_restructure.default.Array(new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfPriority), import_restructure.default.uint16);
var $71e9e74bb6366bce$var$JstfLangSysRecord = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  jstfLangSys: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfLangSys)
});
var $71e9e74bb6366bce$var$JstfScript = new import_restructure.default.Struct({
  extenderGlyphs: new import_restructure.default.Pointer(import_restructure.default.uint16, new import_restructure.default.Array(import_restructure.default.uint16, import_restructure.default.uint16)),
  defaultLangSys: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfLangSys),
  langSysCount: import_restructure.default.uint16,
  langSysRecords: new import_restructure.default.Array($71e9e74bb6366bce$var$JstfLangSysRecord, "langSysCount")
});
var $71e9e74bb6366bce$var$JstfScriptRecord = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  script: new import_restructure.default.Pointer(import_restructure.default.uint16, $71e9e74bb6366bce$var$JstfScript, {
    type: "parent"
  })
});
var $71e9e74bb6366bce$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint32,
  scriptCount: import_restructure.default.uint16,
  scriptList: new import_restructure.default.Array($71e9e74bb6366bce$var$JstfScriptRecord, "scriptCount")
});

class $706225b6909f9418$var$VariableSizeNumber {
  constructor(size) {
    this._size = size;
  }
  decode(stream, parent) {
    switch (this.size(0, parent)) {
      case 1:
        return stream.readUInt8();
      case 2:
        return stream.readUInt16BE();
      case 3:
        return stream.readUInt24BE();
      case 4:
        return stream.readUInt32BE();
    }
  }
  size(val, parent) {
    return utils.resolveLength(this._size, null, parent);
  }
}
var $706225b6909f9418$var$MapDataEntry = new import_restructure.default.Struct({
  entry: new $706225b6909f9418$var$VariableSizeNumber((t3) => ((t3.parent.entryFormat & 48) >> 4) + 1),
  outerIndex: (t3) => t3.entry >> (t3.parent.entryFormat & 15) + 1,
  innerIndex: (t3) => t3.entry & (1 << (t3.parent.entryFormat & 15) + 1) - 1
});
var $706225b6909f9418$var$DeltaSetIndexMap = new import_restructure.default.Struct({
  entryFormat: import_restructure.default.uint16,
  mapCount: import_restructure.default.uint16,
  mapData: new import_restructure.default.Array($706225b6909f9418$var$MapDataEntry, "mapCount")
});
var $706225b6909f9418$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  majorVersion: import_restructure.default.uint16,
  minorVersion: import_restructure.default.uint16,
  itemVariationStore: new import_restructure.default.Pointer(import_restructure.default.uint32, $421a2456cdbaa0d8$export$fe1b122a2710f241),
  advanceWidthMapping: new import_restructure.default.Pointer(import_restructure.default.uint32, $706225b6909f9418$var$DeltaSetIndexMap),
  LSBMapping: new import_restructure.default.Pointer(import_restructure.default.uint32, $706225b6909f9418$var$DeltaSetIndexMap),
  RSBMapping: new import_restructure.default.Pointer(import_restructure.default.uint32, $706225b6909f9418$var$DeltaSetIndexMap)
});
var $4a144b8ae6f53b7c$var$Signature = new import_restructure.default.Struct({
  format: import_restructure.default.uint32,
  length: import_restructure.default.uint32,
  offset: import_restructure.default.uint32
});
var $4a144b8ae6f53b7c$var$SignatureBlock = new import_restructure.default.Struct({
  reserved: new import_restructure.default.Reserved(import_restructure.default.uint16, 2),
  cbSignature: import_restructure.default.uint32,
  signature: new import_restructure.default.Buffer("cbSignature")
});
var $4a144b8ae6f53b7c$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  ulVersion: import_restructure.default.uint32,
  usNumSigs: import_restructure.default.uint16,
  usFlag: import_restructure.default.uint16,
  signatures: new import_restructure.default.Array($4a144b8ae6f53b7c$var$Signature, "usNumSigs"),
  signatureBlocks: new import_restructure.default.Array($4a144b8ae6f53b7c$var$SignatureBlock, "usNumSigs")
});
var $a2086c3965d7b105$var$GaspRange = new import_restructure.default.Struct({
  rangeMaxPPEM: import_restructure.default.uint16,
  rangeGaspBehavior: new import_restructure.default.Bitfield(import_restructure.default.uint16, [
    "grayscale",
    "gridfit",
    "symmetricSmoothing",
    "symmetricGridfit"
  ])
});
var $a2086c3965d7b105$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  numRanges: import_restructure.default.uint16,
  gaspRanges: new import_restructure.default.Array($a2086c3965d7b105$var$GaspRange, "numRanges")
});
var $de83746c6c1c8559$var$DeviceRecord = new import_restructure.default.Struct({
  pixelSize: import_restructure.default.uint8,
  maximumWidth: import_restructure.default.uint8,
  widths: new import_restructure.default.Array(import_restructure.default.uint8, (t3) => t3.parent.parent.maxp.numGlyphs)
});
var $de83746c6c1c8559$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  numRecords: import_restructure.default.int16,
  sizeDeviceRecord: import_restructure.default.int32,
  records: new import_restructure.default.Array($de83746c6c1c8559$var$DeviceRecord, "numRecords")
});
var $5a2237650c44652a$var$KernPair = new import_restructure.default.Struct({
  left: import_restructure.default.uint16,
  right: import_restructure.default.uint16,
  value: import_restructure.default.int16
});
var $5a2237650c44652a$var$ClassTable = new import_restructure.default.Struct({
  firstGlyph: import_restructure.default.uint16,
  nGlyphs: import_restructure.default.uint16,
  offsets: new import_restructure.default.Array(import_restructure.default.uint16, "nGlyphs"),
  max: (t3) => t3.offsets.length && Math.max.apply(Math, t3.offsets)
});
var $5a2237650c44652a$var$Kern2Array = new import_restructure.default.Struct({
  off: (t3) => t3._startOffset - t3.parent.parent._startOffset,
  len: (t3) => ((t3.parent.leftTable.max - t3.off) / t3.parent.rowWidth + 1) * (t3.parent.rowWidth / 2),
  values: new import_restructure.default.LazyArray(import_restructure.default.int16, "len")
});
var $5a2237650c44652a$var$KernSubtable = new import_restructure.default.VersionedStruct("format", {
  0: {
    nPairs: import_restructure.default.uint16,
    searchRange: import_restructure.default.uint16,
    entrySelector: import_restructure.default.uint16,
    rangeShift: import_restructure.default.uint16,
    pairs: new import_restructure.default.Array($5a2237650c44652a$var$KernPair, "nPairs")
  },
  2: {
    rowWidth: import_restructure.default.uint16,
    leftTable: new import_restructure.default.Pointer(import_restructure.default.uint16, $5a2237650c44652a$var$ClassTable, {
      type: "parent"
    }),
    rightTable: new import_restructure.default.Pointer(import_restructure.default.uint16, $5a2237650c44652a$var$ClassTable, {
      type: "parent"
    }),
    array: new import_restructure.default.Pointer(import_restructure.default.uint16, $5a2237650c44652a$var$Kern2Array, {
      type: "parent"
    })
  },
  3: {
    glyphCount: import_restructure.default.uint16,
    kernValueCount: import_restructure.default.uint8,
    leftClassCount: import_restructure.default.uint8,
    rightClassCount: import_restructure.default.uint8,
    flags: import_restructure.default.uint8,
    kernValue: new import_restructure.default.Array(import_restructure.default.int16, "kernValueCount"),
    leftClass: new import_restructure.default.Array(import_restructure.default.uint8, "glyphCount"),
    rightClass: new import_restructure.default.Array(import_restructure.default.uint8, "glyphCount"),
    kernIndex: new import_restructure.default.Array(import_restructure.default.uint8, (t3) => t3.leftClassCount * t3.rightClassCount)
  }
});
var $5a2237650c44652a$var$KernTable = new import_restructure.default.VersionedStruct("version", {
  0: {
    subVersion: import_restructure.default.uint16,
    length: import_restructure.default.uint16,
    format: import_restructure.default.uint8,
    coverage: new import_restructure.default.Bitfield(import_restructure.default.uint8, [
      "horizontal",
      "minimum",
      "crossStream",
      "override"
    ]),
    subtable: $5a2237650c44652a$var$KernSubtable,
    padding: new import_restructure.default.Reserved(import_restructure.default.uint8, (t3) => t3.length - t3._currentOffset)
  },
  1: {
    length: import_restructure.default.uint32,
    coverage: new import_restructure.default.Bitfield(import_restructure.default.uint8, [
      null,
      null,
      null,
      null,
      null,
      "variation",
      "crossStream",
      "vertical"
    ]),
    format: import_restructure.default.uint8,
    tupleIndex: import_restructure.default.uint16,
    subtable: $5a2237650c44652a$var$KernSubtable,
    padding: new import_restructure.default.Reserved(import_restructure.default.uint8, (t3) => t3.length - t3._currentOffset)
  }
});
var $5a2237650c44652a$export$2e2bcd8739ae039 = new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
  0: {
    nTables: import_restructure.default.uint16,
    tables: new import_restructure.default.Array($5a2237650c44652a$var$KernTable, "nTables")
  },
  1: {
    reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
    nTables: import_restructure.default.uint32,
    tables: new import_restructure.default.Array($5a2237650c44652a$var$KernTable, "nTables")
  }
});
var $1eadf070c8b34e48$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  numGlyphs: import_restructure.default.uint16,
  yPels: new import_restructure.default.Array(import_restructure.default.uint8, "numGlyphs")
});
var $8eb2f7302ef75084$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  fontNumber: import_restructure.default.uint32,
  pitch: import_restructure.default.uint16,
  xHeight: import_restructure.default.uint16,
  style: import_restructure.default.uint16,
  typeFamily: import_restructure.default.uint16,
  capHeight: import_restructure.default.uint16,
  symbolSet: import_restructure.default.uint16,
  typeface: new import_restructure.default.String(16),
  characterComplement: new import_restructure.default.String(8),
  fileName: new import_restructure.default.String(6),
  strokeWeight: new import_restructure.default.String(1),
  widthType: new import_restructure.default.String(1),
  serifStyle: import_restructure.default.uint8,
  reserved: new import_restructure.default.Reserved(import_restructure.default.uint8)
});
var $8223b0d67f5fd7c9$var$Ratio = new import_restructure.default.Struct({
  bCharSet: import_restructure.default.uint8,
  xRatio: import_restructure.default.uint8,
  yStartRatio: import_restructure.default.uint8,
  yEndRatio: import_restructure.default.uint8
});
var $8223b0d67f5fd7c9$var$vTable = new import_restructure.default.Struct({
  yPelHeight: import_restructure.default.uint16,
  yMax: import_restructure.default.int16,
  yMin: import_restructure.default.int16
});
var $8223b0d67f5fd7c9$var$VdmxGroup = new import_restructure.default.Struct({
  recs: import_restructure.default.uint16,
  startsz: import_restructure.default.uint8,
  endsz: import_restructure.default.uint8,
  entries: new import_restructure.default.Array($8223b0d67f5fd7c9$var$vTable, "recs")
});
var $8223b0d67f5fd7c9$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  numRecs: import_restructure.default.uint16,
  numRatios: import_restructure.default.uint16,
  ratioRanges: new import_restructure.default.Array($8223b0d67f5fd7c9$var$Ratio, "numRatios"),
  offsets: new import_restructure.default.Array(import_restructure.default.uint16, "numRatios"),
  groups: new import_restructure.default.Array($8223b0d67f5fd7c9$var$VdmxGroup, "numRecs")
});
var $4b17ac6a75c85897$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  ascent: import_restructure.default.int16,
  descent: import_restructure.default.int16,
  lineGap: import_restructure.default.int16,
  advanceHeightMax: import_restructure.default.int16,
  minTopSideBearing: import_restructure.default.int16,
  minBottomSideBearing: import_restructure.default.int16,
  yMaxExtent: import_restructure.default.int16,
  caretSlopeRise: import_restructure.default.int16,
  caretSlopeRun: import_restructure.default.int16,
  caretOffset: import_restructure.default.int16,
  reserved: new import_restructure.default.Reserved(import_restructure.default.int16, 4),
  metricDataFormat: import_restructure.default.int16,
  numberOfMetrics: import_restructure.default.uint16
});
var $a9f9c5185d84186d$var$VmtxEntry = new import_restructure.default.Struct({
  advance: import_restructure.default.uint16,
  bearing: import_restructure.default.int16
});
var $a9f9c5185d84186d$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  metrics: new import_restructure.default.LazyArray($a9f9c5185d84186d$var$VmtxEntry, (t3) => t3.parent.vhea.numberOfMetrics),
  bearings: new import_restructure.default.LazyArray(import_restructure.default.int16, (t3) => t3.parent.maxp.numGlyphs - t3.parent.vhea.numberOfMetrics)
});
var $d9cf6d6467871d68$var$shortFrac = new import_restructure.default.Fixed(16, "BE", 14);
var $d9cf6d6467871d68$var$Correspondence = new import_restructure.default.Struct({
  fromCoord: $d9cf6d6467871d68$var$shortFrac,
  toCoord: $d9cf6d6467871d68$var$shortFrac
});
var $d9cf6d6467871d68$var$Segment = new import_restructure.default.Struct({
  pairCount: import_restructure.default.uint16,
  correspondence: new import_restructure.default.Array($d9cf6d6467871d68$var$Correspondence, "pairCount")
});
var $d9cf6d6467871d68$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.fixed32,
  axisCount: import_restructure.default.uint32,
  segment: new import_restructure.default.Array($d9cf6d6467871d68$var$Segment, "axisCount")
});

class $c35aa0a165e05d15$var$UnboundedArrayAccessor {
  constructor(type47, stream, parent) {
    this.type = type47;
    this.stream = stream;
    this.parent = parent;
    this.base = this.stream.pos;
    this._items = [];
  }
  getItem(index) {
    if (this._items[index] == null) {
      let pos = this.stream.pos;
      this.stream.pos = this.base + this.type.size(null, this.parent) * index;
      this._items[index] = this.type.decode(this.stream, this.parent);
      this.stream.pos = pos;
    }
    return this._items[index];
  }
  inspect() {
    return `[UnboundedArray ${this.type.constructor.name}]`;
  }
}

class $c35aa0a165e05d15$export$c5af1eebc882e39a extends import_restructure.default.Array {
  constructor(type47) {
    super(type47, 0);
  }
  decode(stream, parent) {
    return new $c35aa0a165e05d15$var$UnboundedArrayAccessor(this.type, stream, parent);
  }
}
var $c35aa0a165e05d15$export$8351f8c2ae2f103c = function(ValueType5 = import_restructure.default.uint16) {

  class Shadow {
    constructor(type47) {
      this.type = type47;
    }
    decode(stream, ctx) {
      ctx = ctx.parent.parent;
      return this.type.decode(stream, ctx);
    }
    size(val, ctx) {
      ctx = ctx.parent.parent;
      return this.type.size(val, ctx);
    }
    encode(stream, val, ctx) {
      ctx = ctx.parent.parent;
      return this.type.encode(stream, val, ctx);
    }
  }
  ValueType5 = new Shadow(ValueType5);
  let BinarySearchHeader = new import_restructure.default.Struct({
    unitSize: import_restructure.default.uint16,
    nUnits: import_restructure.default.uint16,
    searchRange: import_restructure.default.uint16,
    entrySelector: import_restructure.default.uint16,
    rangeShift: import_restructure.default.uint16
  });
  let LookupSegmentSingle = new import_restructure.default.Struct({
    lastGlyph: import_restructure.default.uint16,
    firstGlyph: import_restructure.default.uint16,
    value: ValueType5
  });
  let LookupSegmentArray = new import_restructure.default.Struct({
    lastGlyph: import_restructure.default.uint16,
    firstGlyph: import_restructure.default.uint16,
    values: new import_restructure.default.Pointer(import_restructure.default.uint16, new import_restructure.default.Array(ValueType5, (t3) => t3.lastGlyph - t3.firstGlyph + 1), {
      type: "parent"
    })
  });
  let LookupSingle = new import_restructure.default.Struct({
    glyph: import_restructure.default.uint16,
    value: ValueType5
  });
  return new import_restructure.default.VersionedStruct(import_restructure.default.uint16, {
    0: {
      values: new $c35aa0a165e05d15$export$c5af1eebc882e39a(ValueType5)
    },
    2: {
      binarySearchHeader: BinarySearchHeader,
      segments: new import_restructure.default.Array(LookupSegmentSingle, (t3) => t3.binarySearchHeader.nUnits)
    },
    4: {
      binarySearchHeader: BinarySearchHeader,
      segments: new import_restructure.default.Array(LookupSegmentArray, (t3) => t3.binarySearchHeader.nUnits)
    },
    6: {
      binarySearchHeader: BinarySearchHeader,
      segments: new import_restructure.default.Array(LookupSingle, (t3) => t3.binarySearchHeader.nUnits)
    },
    8: {
      firstGlyph: import_restructure.default.uint16,
      count: import_restructure.default.uint16,
      values: new import_restructure.default.Array(ValueType5, "count")
    }
  });
};
var $53e6946cfb72ad0c$var$BslnSubtable = new import_restructure.default.VersionedStruct("format", {
  0: {
    deltas: new import_restructure.default.Array(import_restructure.default.int16, 32)
  },
  1: {
    deltas: new import_restructure.default.Array(import_restructure.default.int16, 32),
    mappingData: new $c35aa0a165e05d15$export$8351f8c2ae2f103c(import_restructure.default.uint16)
  },
  2: {
    standardGlyph: import_restructure.default.uint16,
    controlPoints: new import_restructure.default.Array(import_restructure.default.uint16, 32)
  },
  3: {
    standardGlyph: import_restructure.default.uint16,
    controlPoints: new import_restructure.default.Array(import_restructure.default.uint16, 32),
    mappingData: new $c35aa0a165e05d15$export$8351f8c2ae2f103c(import_restructure.default.uint16)
  }
});
var $53e6946cfb72ad0c$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.fixed32,
  format: import_restructure.default.uint16,
  defaultBaseline: import_restructure.default.uint16,
  subtable: $53e6946cfb72ad0c$var$BslnSubtable
});
var $117550c71e13cb3d$var$Setting = new import_restructure.default.Struct({
  setting: import_restructure.default.uint16,
  nameIndex: import_restructure.default.int16,
  name: (t3) => t3.parent.parent.parent.name.records.fontFeatures[t3.nameIndex]
});
var $117550c71e13cb3d$var$FeatureName = new import_restructure.default.Struct({
  feature: import_restructure.default.uint16,
  nSettings: import_restructure.default.uint16,
  settingTable: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array($117550c71e13cb3d$var$Setting, "nSettings"), {
    type: "parent"
  }),
  featureFlags: new import_restructure.default.Bitfield(import_restructure.default.uint8, [
    null,
    null,
    null,
    null,
    null,
    null,
    "hasDefault",
    "exclusive"
  ]),
  defaultSetting: import_restructure.default.uint8,
  nameIndex: import_restructure.default.int16,
  name: (t3) => t3.parent.parent.name.records.fontFeatures[t3.nameIndex]
});
var $117550c71e13cb3d$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.fixed32,
  featureNameCount: import_restructure.default.uint16,
  reserved1: new import_restructure.default.Reserved(import_restructure.default.uint16),
  reserved2: new import_restructure.default.Reserved(import_restructure.default.uint32),
  featureNames: new import_restructure.default.Array($117550c71e13cb3d$var$FeatureName, "featureNameCount")
});
var $551f92fdd501454e$var$Axis = new import_restructure.default.Struct({
  axisTag: new import_restructure.default.String(4),
  minValue: import_restructure.default.fixed32,
  defaultValue: import_restructure.default.fixed32,
  maxValue: import_restructure.default.fixed32,
  flags: import_restructure.default.uint16,
  nameID: import_restructure.default.uint16,
  name: (t3) => t3.parent.parent.name.records.fontFeatures[t3.nameID]
});
var $551f92fdd501454e$var$Instance = new import_restructure.default.Struct({
  nameID: import_restructure.default.uint16,
  name: (t3) => t3.parent.parent.name.records.fontFeatures[t3.nameID],
  flags: import_restructure.default.uint16,
  coord: new import_restructure.default.Array(import_restructure.default.fixed32, (t3) => t3.parent.axisCount),
  postscriptNameID: new import_restructure.default.Optional(import_restructure.default.uint16, (t3) => t3.parent.instanceSize - t3._currentOffset > 0)
});
var $551f92fdd501454e$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.fixed32,
  offsetToData: import_restructure.default.uint16,
  countSizePairs: import_restructure.default.uint16,
  axisCount: import_restructure.default.uint16,
  axisSize: import_restructure.default.uint16,
  instanceCount: import_restructure.default.uint16,
  instanceSize: import_restructure.default.uint16,
  axis: new import_restructure.default.Array($551f92fdd501454e$var$Axis, "axisCount"),
  instance: new import_restructure.default.Array($551f92fdd501454e$var$Instance, "instanceCount")
});
var $d03801ee7a5f4d7c$var$shortFrac = new import_restructure.default.Fixed(16, "BE", 14);

class $d03801ee7a5f4d7c$var$Offset {
  static decode(stream, parent) {
    return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;
  }
}
var $d03801ee7a5f4d7c$var$gvar = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
  axisCount: import_restructure.default.uint16,
  globalCoordCount: import_restructure.default.uint16,
  globalCoords: new import_restructure.default.Pointer(import_restructure.default.uint32, new import_restructure.default.Array(new import_restructure.default.Array($d03801ee7a5f4d7c$var$shortFrac, "axisCount"), "globalCoordCount")),
  glyphCount: import_restructure.default.uint16,
  flags: import_restructure.default.uint16,
  offsetToData: import_restructure.default.uint32,
  offsets: new import_restructure.default.Array(new import_restructure.default.Pointer($d03801ee7a5f4d7c$var$Offset, "void", {
    relativeTo: (ctx) => ctx.offsetToData,
    allowNull: false
  }), (t3) => t3.glyphCount + 1)
});
var $d03801ee7a5f4d7c$export$2e2bcd8739ae039 = $d03801ee7a5f4d7c$var$gvar;
var $70ffc7fec5b89b5e$var$ClassTable = new import_restructure.default.Struct({
  length: import_restructure.default.uint16,
  coverage: import_restructure.default.uint16,
  subFeatureFlags: import_restructure.default.uint32,
  stateTable: new $c35aa0a165e05d15$export$105027425199cc51
});
var $70ffc7fec5b89b5e$var$WidthDeltaRecord = new import_restructure.default.Struct({
  justClass: import_restructure.default.uint32,
  beforeGrowLimit: import_restructure.default.fixed32,
  beforeShrinkLimit: import_restructure.default.fixed32,
  afterGrowLimit: import_restructure.default.fixed32,
  afterShrinkLimit: import_restructure.default.fixed32,
  growFlags: import_restructure.default.uint16,
  shrinkFlags: import_restructure.default.uint16
});
var $70ffc7fec5b89b5e$var$WidthDeltaCluster = new import_restructure.default.Array($70ffc7fec5b89b5e$var$WidthDeltaRecord, import_restructure.default.uint32);
var $70ffc7fec5b89b5e$var$ActionData = new import_restructure.default.VersionedStruct("actionType", {
  0: {
    lowerLimit: import_restructure.default.fixed32,
    upperLimit: import_restructure.default.fixed32,
    order: import_restructure.default.uint16,
    glyphs: new import_restructure.default.Array(import_restructure.default.uint16, import_restructure.default.uint16)
  },
  1: {
    addGlyph: import_restructure.default.uint16
  },
  2: {
    substThreshold: import_restructure.default.fixed32,
    addGlyph: import_restructure.default.uint16,
    substGlyph: import_restructure.default.uint16
  },
  3: {},
  4: {
    variationAxis: import_restructure.default.uint32,
    minimumLimit: import_restructure.default.fixed32,
    noStretchValue: import_restructure.default.fixed32,
    maximumLimit: import_restructure.default.fixed32
  },
  5: {
    flags: import_restructure.default.uint16,
    glyph: import_restructure.default.uint16
  }
});
var $70ffc7fec5b89b5e$var$Action = new import_restructure.default.Struct({
  actionClass: import_restructure.default.uint16,
  actionType: import_restructure.default.uint16,
  actionLength: import_restructure.default.uint32,
  actionData: $70ffc7fec5b89b5e$var$ActionData,
  padding: new import_restructure.default.Reserved(import_restructure.default.uint8, (t3) => t3.actionLength - t3._currentOffset)
});
var $70ffc7fec5b89b5e$var$PostcompensationAction = new import_restructure.default.Array($70ffc7fec5b89b5e$var$Action, import_restructure.default.uint32);
var $70ffc7fec5b89b5e$var$PostCompensationTable = new import_restructure.default.Struct({
  lookupTable: new $c35aa0a165e05d15$export$8351f8c2ae2f103c(new import_restructure.default.Pointer(import_restructure.default.uint16, $70ffc7fec5b89b5e$var$PostcompensationAction))
});
var $70ffc7fec5b89b5e$var$JustificationTable = new import_restructure.default.Struct({
  classTable: new import_restructure.default.Pointer(import_restructure.default.uint16, $70ffc7fec5b89b5e$var$ClassTable, {
    type: "parent"
  }),
  wdcOffset: import_restructure.default.uint16,
  postCompensationTable: new import_restructure.default.Pointer(import_restructure.default.uint16, $70ffc7fec5b89b5e$var$PostCompensationTable, {
    type: "parent"
  }),
  widthDeltaClusters: new $c35aa0a165e05d15$export$8351f8c2ae2f103c(new import_restructure.default.Pointer(import_restructure.default.uint16, $70ffc7fec5b89b5e$var$WidthDeltaCluster, {
    type: "parent",
    relativeTo: (ctx) => ctx.wdcOffset
  }))
});
var $70ffc7fec5b89b5e$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint32,
  format: import_restructure.default.uint16,
  horizontal: new import_restructure.default.Pointer(import_restructure.default.uint16, $70ffc7fec5b89b5e$var$JustificationTable),
  vertical: new import_restructure.default.Pointer(import_restructure.default.uint16, $70ffc7fec5b89b5e$var$JustificationTable)
});
var $dd743f90b6270daa$var$LigatureData = {
  action: import_restructure.default.uint16
};
var $dd743f90b6270daa$var$ContextualData = {
  markIndex: import_restructure.default.uint16,
  currentIndex: import_restructure.default.uint16
};
var $dd743f90b6270daa$var$InsertionData = {
  currentInsertIndex: import_restructure.default.uint16,
  markedInsertIndex: import_restructure.default.uint16
};
var $dd743f90b6270daa$var$SubstitutionTable = new import_restructure.default.Struct({
  items: new $c35aa0a165e05d15$export$c5af1eebc882e39a(new import_restructure.default.Pointer(import_restructure.default.uint32, new $c35aa0a165e05d15$export$8351f8c2ae2f103c))
});
var $dd743f90b6270daa$var$SubtableData = new import_restructure.default.VersionedStruct("type", {
  0: {
    stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba
  },
  1: {
    stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba($dd743f90b6270daa$var$ContextualData),
    substitutionTable: new import_restructure.default.Pointer(import_restructure.default.uint32, $dd743f90b6270daa$var$SubstitutionTable)
  },
  2: {
    stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba($dd743f90b6270daa$var$LigatureData),
    ligatureActions: new import_restructure.default.Pointer(import_restructure.default.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(import_restructure.default.uint32)),
    components: new import_restructure.default.Pointer(import_restructure.default.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(import_restructure.default.uint16)),
    ligatureList: new import_restructure.default.Pointer(import_restructure.default.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(import_restructure.default.uint16))
  },
  4: {
    lookupTable: new $c35aa0a165e05d15$export$8351f8c2ae2f103c
  },
  5: {
    stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba($dd743f90b6270daa$var$InsertionData),
    insertionActions: new import_restructure.default.Pointer(import_restructure.default.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(import_restructure.default.uint16))
  }
});
var $dd743f90b6270daa$var$Subtable = new import_restructure.default.Struct({
  length: import_restructure.default.uint32,
  coverage: import_restructure.default.uint24,
  type: import_restructure.default.uint8,
  subFeatureFlags: import_restructure.default.uint32,
  table: $dd743f90b6270daa$var$SubtableData,
  padding: new import_restructure.default.Reserved(import_restructure.default.uint8, (t3) => t3.length - t3._currentOffset)
});
var $dd743f90b6270daa$var$FeatureEntry = new import_restructure.default.Struct({
  featureType: import_restructure.default.uint16,
  featureSetting: import_restructure.default.uint16,
  enableFlags: import_restructure.default.uint32,
  disableFlags: import_restructure.default.uint32
});
var $dd743f90b6270daa$var$MorxChain = new import_restructure.default.Struct({
  defaultFlags: import_restructure.default.uint32,
  chainLength: import_restructure.default.uint32,
  nFeatureEntries: import_restructure.default.uint32,
  nSubtables: import_restructure.default.uint32,
  features: new import_restructure.default.Array($dd743f90b6270daa$var$FeatureEntry, "nFeatureEntries"),
  subtables: new import_restructure.default.Array($dd743f90b6270daa$var$Subtable, "nSubtables")
});
var $dd743f90b6270daa$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.uint16,
  unused: new import_restructure.default.Reserved(import_restructure.default.uint16),
  nChains: import_restructure.default.uint32,
  chains: new import_restructure.default.Array($dd743f90b6270daa$var$MorxChain, "nChains")
});
var $40e500cc5163d19f$var$OpticalBounds = new import_restructure.default.Struct({
  left: import_restructure.default.int16,
  top: import_restructure.default.int16,
  right: import_restructure.default.int16,
  bottom: import_restructure.default.int16
});
var $40e500cc5163d19f$export$2e2bcd8739ae039 = new import_restructure.default.Struct({
  version: import_restructure.default.fixed32,
  format: import_restructure.default.uint16,
  lookupTable: new $c35aa0a165e05d15$export$8351f8c2ae2f103c($40e500cc5163d19f$var$OpticalBounds)
});
var $60d88718e7e1fa97$var$tables = {};
var $60d88718e7e1fa97$export$2e2bcd8739ae039 = $60d88718e7e1fa97$var$tables;
$60d88718e7e1fa97$var$tables.cmap = $9aad45a64cf8e4b5$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.head = $b41847595480ce3a$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.hhea = $5fda302e2516d0c7$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.hmtx = $28788c978325a3e1$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.maxp = $9e68d972c1fae2a9$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.name = $866b9b7dd32d7242$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables["OS/2"] = $268023eac606db57$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.post = $5287343c85bea17e$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.fpgm = $6f2fae1f8d2b4b41$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.loca = $cae48a5e791773ec$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.prep = $7b12cfca10f7f884$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables["cvt "] = $5768e6ef8b1a512a$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.glyf = $06e9f2dae5795013$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables["CFF "] = $8770fc79268fa3c2$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables["CFF2"] = $8770fc79268fa3c2$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.VORG = $79f2eb50e4490e51$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.EBLC = $234c291eab07e474$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.CBLC = $60d88718e7e1fa97$var$tables.EBLC;
$60d88718e7e1fa97$var$tables.sbix = $55d04373f0cac44e$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.COLR = $0e59eccfa3005d9d$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.CPAL = $23affa36a12f7915$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.BASE = $9fffe61eb0785f74$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.GDEF = $418face38567ee6e$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.GPOS = $010e157f6d8a40e9$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.GSUB = $7176ea6bb7dcf1c6$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.JSTF = $71e9e74bb6366bce$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.HVAR = $706225b6909f9418$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.DSIG = $4a144b8ae6f53b7c$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.gasp = $a2086c3965d7b105$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.hdmx = $de83746c6c1c8559$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.kern = $5a2237650c44652a$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.LTSH = $1eadf070c8b34e48$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.PCLT = $8eb2f7302ef75084$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.VDMX = $8223b0d67f5fd7c9$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.vhea = $4b17ac6a75c85897$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.vmtx = $a9f9c5185d84186d$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.avar = $d9cf6d6467871d68$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.bsln = $53e6946cfb72ad0c$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.feat = $117550c71e13cb3d$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.fvar = $551f92fdd501454e$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.gvar = $d03801ee7a5f4d7c$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.just = $70ffc7fec5b89b5e$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.morx = $dd743f90b6270daa$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.opbd = $40e500cc5163d19f$export$2e2bcd8739ae039;
var $d5e01a2298150c9a$var$TableEntry = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  checkSum: import_restructure.default.uint32,
  offset: new import_restructure.default.Pointer(import_restructure.default.uint32, "void", {
    type: "global"
  }),
  length: import_restructure.default.uint32
});
var $d5e01a2298150c9a$var$Directory = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  numTables: import_restructure.default.uint16,
  searchRange: import_restructure.default.uint16,
  entrySelector: import_restructure.default.uint16,
  rangeShift: import_restructure.default.uint16,
  tables: new import_restructure.default.Array($d5e01a2298150c9a$var$TableEntry, "numTables")
});
$d5e01a2298150c9a$var$Directory.process = function() {
  let tables = {};
  for (let table of this.tables)
    tables[table.tag] = table;
  this.tables = tables;
};
$d5e01a2298150c9a$var$Directory.preEncode = function(stream) {
  let tables = [];
  for (let tag in this.tables) {
    let table = this.tables[tag];
    if (table)
      tables.push({
        tag,
        checkSum: 0,
        offset: new import_restructure.default.VoidPointer($60d88718e7e1fa97$export$2e2bcd8739ae039[tag], table),
        length: $60d88718e7e1fa97$export$2e2bcd8739ae039[tag].size(table)
      });
  }
  this.tag = "true";
  this.numTables = tables.length;
  this.tables = tables;
  let maxExponentFor2 = Math.floor(Math.log(this.numTables) / Math.LN2);
  let maxPowerOf2 = Math.pow(2, maxExponentFor2);
  this.searchRange = maxPowerOf2 * 16;
  this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;
  this.rangeShift = this.numTables * 16 - this.searchRange;
};
var $d5e01a2298150c9a$export$2e2bcd8739ae039 = $d5e01a2298150c9a$var$Directory;
var _class;
var $5d24cfe1a4cd83bb$export$2e2bcd8739ae039 = (_class = class $5d24cfe1a4cd83bb$export$2e2bcd8739ae0392 {
  constructor(cmapTable) {
    this.encoding = null;
    this.cmap = this.findSubtable(cmapTable, [
      [
        3,
        10
      ],
      [
        0,
        6
      ],
      [
        0,
        4
      ],
      [
        3,
        1
      ],
      [
        0,
        3
      ],
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        0,
        0
      ]
    ]);
    if (!this.cmap && iconv_lite.default)
      for (let cmap of cmapTable.tables) {
        let encoding = $111d7d948974b54a$export$badc544e0651b6b1(cmap.platformID, cmap.encodingID, cmap.table.language - 1);
        if (iconv_lite.default.encodingExists(encoding)) {
          this.cmap = cmap.table;
          this.encoding = encoding;
        }
      }
    if (!this.cmap)
      throw new Error("Could not find a supported cmap table");
    this.uvs = this.findSubtable(cmapTable, [
      [
        0,
        5
      ]
    ]);
    if (this.uvs && this.uvs.version !== 14)
      this.uvs = null;
  }
  findSubtable(cmapTable, pairs) {
    for (let [platformID, encodingID] of pairs)
      for (let cmap of cmapTable.tables) {
        if (cmap.platformID === platformID && cmap.encodingID === encodingID)
          return cmap.table;
      }
    return null;
  }
  lookup(codepoint, variationSelector) {
    if (this.encoding) {
      let buf = iconv_lite.default.encode(String.fromCodePoint(codepoint), this.encoding);
      codepoint = 0;
      for (let i3 = 0;i3 < buf.length; i3++)
        codepoint = codepoint << 8 | buf[i3];
    } else if (variationSelector) {
      let gid = this.getVariationSelector(codepoint, variationSelector);
      if (gid)
        return gid;
    }
    let cmap = this.cmap;
    switch (cmap.version) {
      case 0:
        return cmap.codeMap.get(codepoint) || 0;
      case 4: {
        let min = 0;
        let max = cmap.segCount - 1;
        while (min <= max) {
          let mid = min + max >> 1;
          if (codepoint < cmap.startCode.get(mid))
            max = mid - 1;
          else if (codepoint > cmap.endCode.get(mid))
            min = mid + 1;
          else {
            let rangeOffset = cmap.idRangeOffset.get(mid);
            let gid;
            if (rangeOffset === 0)
              gid = codepoint + cmap.idDelta.get(mid);
            else {
              let index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);
              gid = cmap.glyphIndexArray.get(index) || 0;
              if (gid !== 0)
                gid += cmap.idDelta.get(mid);
            }
            return gid & 65535;
          }
        }
        return 0;
      }
      case 8:
        throw new Error("TODO: cmap format 8");
      case 6:
      case 10:
        return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;
      case 12:
      case 13: {
        let min = 0;
        let max = cmap.nGroups - 1;
        while (min <= max) {
          let mid = min + max >> 1;
          let group = cmap.groups.get(mid);
          if (codepoint < group.startCharCode)
            max = mid - 1;
          else if (codepoint > group.endCharCode)
            min = mid + 1;
          else {
            if (cmap.version === 12)
              return group.glyphID + (codepoint - group.startCharCode);
            else
              return group.glyphID;
          }
        }
        return 0;
      }
      case 14:
        throw new Error("TODO: cmap format 14");
      default:
        throw new Error(`Unknown cmap format ${cmap.version}`);
    }
  }
  getVariationSelector(codepoint, variationSelector) {
    if (!this.uvs)
      return 0;
    let selectors = this.uvs.varSelectors.toArray();
    let i3 = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(selectors, (x3) => variationSelector - x3.varSelector);
    let sel = selectors[i3];
    if (i3 !== -1 && sel.defaultUVS)
      i3 = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(sel.defaultUVS, (x3) => codepoint < x3.startUnicodeValue ? -1 : codepoint > x3.startUnicodeValue + x3.additionalCount ? 1 : 0);
    if (i3 !== -1 && sel.nonDefaultUVS) {
      i3 = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(sel.nonDefaultUVS, (x3) => codepoint - x3.unicodeValue);
      if (i3 !== -1)
        return sel.nonDefaultUVS[i3].glyphID;
    }
    return 0;
  }
  getCharacterSet() {
    let cmap = this.cmap;
    switch (cmap.version) {
      case 0:
        return $f3ad94c9f84f4d57$export$d02631cccf789723(0, cmap.codeMap.length);
      case 4: {
        let res = [];
        let endCodes = cmap.endCode.toArray();
        for (let i3 = 0;i3 < endCodes.length; i3++) {
          let tail = endCodes[i3] + 1;
          let start = cmap.startCode.get(i3);
          res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(start, tail));
        }
        return res;
      }
      case 8:
        throw new Error("TODO: cmap format 8");
      case 6:
      case 10:
        return $f3ad94c9f84f4d57$export$d02631cccf789723(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);
      case 12:
      case 13: {
        let res = [];
        for (let group of cmap.groups.toArray())
          res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(group.startCharCode, group.endCharCode + 1));
        return res;
      }
      case 14:
        throw new Error("TODO: cmap format 14");
      default:
        throw new Error(`Unknown cmap format ${cmap.version}`);
    }
  }
  codePointsForGlyph(gid) {
    let cmap = this.cmap;
    switch (cmap.version) {
      case 0: {
        let res = [];
        for (let i3 = 0;i3 < 256; i3++)
          if (cmap.codeMap.get(i3) === gid)
            res.push(i3);
        return res;
      }
      case 4: {
        let res = [];
        for (let i3 = 0;i3 < cmap.segCount; i3++) {
          let end = cmap.endCode.get(i3);
          let start = cmap.startCode.get(i3);
          let rangeOffset = cmap.idRangeOffset.get(i3);
          let delta4 = cmap.idDelta.get(i3);
          for (var c3 = start;c3 <= end; c3++) {
            let g = 0;
            if (rangeOffset === 0)
              g = c3 + delta4;
            else {
              let index = rangeOffset / 2 + (c3 - start) - (cmap.segCount - i3);
              g = cmap.glyphIndexArray.get(index) || 0;
              if (g !== 0)
                g += delta4;
            }
            if (g === gid)
              res.push(c3);
          }
        }
        return res;
      }
      case 12: {
        let res = [];
        for (let group of cmap.groups.toArray())
          if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode))
            res.push(group.startCharCode + (gid - group.glyphID));
        return res;
      }
      case 13: {
        let res = [];
        for (let group of cmap.groups.toArray())
          if (gid === group.glyphID)
            res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(group.startCharCode, group.endCharCode + 1));
        return res;
      }
      default:
        throw new Error(`Unknown cmap format ${cmap.version}`);
    }
  }
}, _applyDecoratedDescriptor(_class.prototype, "getCharacterSet", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "getCharacterSet"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "codePointsForGlyph", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "codePointsForGlyph"), _class.prototype), _class);

class $8526e21034212dc1$export$2e2bcd8739ae039 {
  constructor(font) {
    this.kern = font.kern;
  }
  process(glyphs, positions) {
    for (let glyphIndex = 0;glyphIndex < glyphs.length - 1; glyphIndex++) {
      let left = glyphs[glyphIndex].id;
      let right = glyphs[glyphIndex + 1].id;
      positions[glyphIndex].xAdvance += this.getKerning(left, right);
    }
  }
  getKerning(left, right) {
    let res = 0;
    for (let table of this.kern.tables) {
      if (table.coverage.crossStream)
        continue;
      switch (table.version) {
        case 0:
          if (!table.coverage.horizontal)
            continue;
          break;
        case 1:
          if (table.coverage.vertical || table.coverage.variation)
            continue;
          break;
        default:
          throw new Error(`Unsupported kerning table version ${table.version}`);
      }
      let val = 0;
      let s3 = table.subtable;
      switch (table.format) {
        case 0:
          let pairIdx = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(s3.pairs, function(pair) {
            return left - pair.left || right - pair.right;
          });
          if (pairIdx >= 0)
            val = s3.pairs[pairIdx].value;
          break;
        case 2:
          let leftOffset = 0, rightOffset = 0;
          if (left >= s3.leftTable.firstGlyph && left < s3.leftTable.firstGlyph + s3.leftTable.nGlyphs)
            leftOffset = s3.leftTable.offsets[left - s3.leftTable.firstGlyph];
          else
            leftOffset = s3.array.off;
          if (right >= s3.rightTable.firstGlyph && right < s3.rightTable.firstGlyph + s3.rightTable.nGlyphs)
            rightOffset = s3.rightTable.offsets[right - s3.rightTable.firstGlyph];
          let index = (leftOffset + rightOffset - s3.array.off) / 2;
          val = s3.array.values.get(index);
          break;
        case 3:
          if (left >= s3.glyphCount || right >= s3.glyphCount)
            return 0;
          val = s3.kernValue[s3.kernIndex[s3.leftClass[left] * s3.rightClassCount + s3.rightClass[right]]];
          break;
        default:
          throw new Error(`Unsupported kerning sub-table format ${table.format}`);
      }
      if (table.coverage.override)
        res = val;
      else
        res += val;
    }
    return res;
  }
}

class $e4967fef9afc586a$export$2e2bcd8739ae039 {
  constructor(font) {
    this.font = font;
  }
  positionGlyphs(glyphs, positions) {
    let clusterStart = 0;
    let clusterEnd = 0;
    for (let index = 0;index < glyphs.length; index++) {
      let glyph = glyphs[index];
      if (glyph.isMark)
        clusterEnd = index;
      else {
        if (clusterStart !== clusterEnd)
          this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
        clusterStart = clusterEnd = index;
      }
    }
    if (clusterStart !== clusterEnd)
      this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
    return positions;
  }
  positionCluster(glyphs, positions, clusterStart, clusterEnd) {
    let base = glyphs[clusterStart];
    let baseBox = base.cbox.copy();
    if (base.codePoints.length > 1)
      baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;
    let xOffset = -positions[clusterStart].xAdvance;
    let yOffset = 0;
    let yGap = this.font.unitsPerEm / 16;
    for (let index = clusterStart + 1;index <= clusterEnd; index++) {
      let mark = glyphs[index];
      let markBox = mark.cbox;
      let position = positions[index];
      let combiningClass = this.getCombiningClass(mark.codePoints[0]);
      if (combiningClass !== "Not_Reordered") {
        position.xOffset = position.yOffset = 0;
        switch (combiningClass) {
          case "Double_Above":
          case "Double_Below":
            position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;
            break;
          case "Attached_Below_Left":
          case "Below_Left":
          case "Above_Left":
            position.xOffset += baseBox.minX - markBox.minX;
            break;
          case "Attached_Above_Right":
          case "Below_Right":
          case "Above_Right":
            position.xOffset += baseBox.maxX - markBox.width - markBox.minX;
            break;
          default:
            position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;
        }
        switch (combiningClass) {
          case "Double_Below":
          case "Below_Left":
          case "Below":
          case "Below_Right":
          case "Attached_Below_Left":
          case "Attached_Below":
            if (combiningClass === "Attached_Below_Left" || combiningClass === "Attached_Below")
              baseBox.minY += yGap;
            position.yOffset = -baseBox.minY - markBox.maxY;
            baseBox.minY += markBox.height;
            break;
          case "Double_Above":
          case "Above_Left":
          case "Above":
          case "Above_Right":
          case "Attached_Above":
          case "Attached_Above_Right":
            if (combiningClass === "Attached_Above" || combiningClass === "Attached_Above_Right")
              baseBox.maxY += yGap;
            position.yOffset = baseBox.maxY - markBox.minY;
            baseBox.maxY += markBox.height;
            break;
        }
        position.xAdvance = position.yAdvance = 0;
        position.xOffset += xOffset;
        position.yOffset += yOffset;
      } else {
        xOffset -= position.xAdvance;
        yOffset -= position.yAdvance;
      }
    }
    return;
  }
  getCombiningClass(codePoint) {
    let combiningClass = $747425b437e121da$export$2e2bcd8739ae039.getCombiningClass(codePoint);
    if ((codePoint & -256) === 3584) {
      if (combiningClass === "Not_Reordered")
        switch (codePoint) {
          case 3633:
          case 3636:
          case 3637:
          case 3638:
          case 3639:
          case 3655:
          case 3660:
          case 3645:
          case 3662:
            return "Above_Right";
          case 3761:
          case 3764:
          case 3765:
          case 3766:
          case 3767:
          case 3771:
          case 3788:
          case 3789:
            return "Above";
          case 3772:
            return "Below";
        }
      else if (codePoint === 3642)
        return "Below_Right";
    }
    switch (combiningClass) {
      case "CCC10":
      case "CCC11":
      case "CCC12":
      case "CCC13":
      case "CCC14":
      case "CCC15":
      case "CCC16":
      case "CCC17":
      case "CCC18":
      case "CCC20":
      case "CCC22":
        return "Below";
      case "CCC23":
        return "Attached_Above";
      case "CCC24":
        return "Above_Right";
      case "CCC25":
      case "CCC19":
        return "Above_Left";
      case "CCC26":
        return "Above";
      case "CCC21":
        break;
      case "CCC27":
      case "CCC28":
      case "CCC30":
      case "CCC31":
      case "CCC33":
      case "CCC34":
      case "CCC35":
      case "CCC36":
        return "Above";
      case "CCC29":
      case "CCC32":
        return "Below";
      case "CCC103":
        return "Below_Right";
      case "CCC107":
        return "Above_Right";
      case "CCC118":
        return "Below";
      case "CCC122":
        return "Above";
      case "CCC129":
      case "CCC132":
        return "Below";
      case "CCC130":
        return "Above";
    }
    return combiningClass;
  }
}

class $fcb46e14b01ea01f$export$2e2bcd8739ae039 {
  constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity) {
    this.minX = minX;
    this.minY = minY;
    this.maxX = maxX;
    this.maxY = maxY;
  }
  get width() {
    return this.maxX - this.minX;
  }
  get height() {
    return this.maxY - this.minY;
  }
  addPoint(x3, y3) {
    if (Math.abs(x3) !== Infinity) {
      if (x3 < this.minX)
        this.minX = x3;
      if (x3 > this.maxX)
        this.maxX = x3;
    }
    if (Math.abs(y3) !== Infinity) {
      if (y3 < this.minY)
        this.minY = y3;
      if (y3 > this.maxY)
        this.maxY = y3;
    }
  }
  copy() {
    return new $fcb46e14b01ea01f$export$2e2bcd8739ae039(this.minX, this.minY, this.maxX, this.maxY);
  }
}
var $a5878e4f4663c9e2$var$UNICODE_SCRIPTS = {
  Caucasian_Albanian: "aghb",
  Arabic: "arab",
  Imperial_Aramaic: "armi",
  Armenian: "armn",
  Avestan: "avst",
  Balinese: "bali",
  Bamum: "bamu",
  Bassa_Vah: "bass",
  Batak: "batk",
  Bengali: [
    "bng2",
    "beng"
  ],
  Bopomofo: "bopo",
  Brahmi: "brah",
  Braille: "brai",
  Buginese: "bugi",
  Buhid: "buhd",
  Chakma: "cakm",
  Canadian_Aboriginal: "cans",
  Carian: "cari",
  Cham: "cham",
  Cherokee: "cher",
  Coptic: "copt",
  Cypriot: "cprt",
  Cyrillic: "cyrl",
  Devanagari: [
    "dev2",
    "deva"
  ],
  Deseret: "dsrt",
  Duployan: "dupl",
  Egyptian_Hieroglyphs: "egyp",
  Elbasan: "elba",
  Ethiopic: "ethi",
  Georgian: "geor",
  Glagolitic: "glag",
  Gothic: "goth",
  Grantha: "gran",
  Greek: "grek",
  Gujarati: [
    "gjr2",
    "gujr"
  ],
  Gurmukhi: [
    "gur2",
    "guru"
  ],
  Hangul: "hang",
  Han: "hani",
  Hanunoo: "hano",
  Hebrew: "hebr",
  Hiragana: "hira",
  Pahawh_Hmong: "hmng",
  Katakana_Or_Hiragana: "hrkt",
  Old_Italic: "ital",
  Javanese: "java",
  Kayah_Li: "kali",
  Katakana: "kana",
  Kharoshthi: "khar",
  Khmer: "khmr",
  Khojki: "khoj",
  Kannada: [
    "knd2",
    "knda"
  ],
  Kaithi: "kthi",
  Tai_Tham: "lana",
  Lao: "lao ",
  Latin: "latn",
  Lepcha: "lepc",
  Limbu: "limb",
  Linear_A: "lina",
  Linear_B: "linb",
  Lisu: "lisu",
  Lycian: "lyci",
  Lydian: "lydi",
  Mahajani: "mahj",
  Mandaic: "mand",
  Manichaean: "mani",
  Mende_Kikakui: "mend",
  Meroitic_Cursive: "merc",
  Meroitic_Hieroglyphs: "mero",
  Malayalam: [
    "mlm2",
    "mlym"
  ],
  Modi: "modi",
  Mongolian: "mong",
  Mro: "mroo",
  Meetei_Mayek: "mtei",
  Myanmar: [
    "mym2",
    "mymr"
  ],
  Old_North_Arabian: "narb",
  Nabataean: "nbat",
  Nko: "nko ",
  Ogham: "ogam",
  Ol_Chiki: "olck",
  Old_Turkic: "orkh",
  Oriya: [
    "ory2",
    "orya"
  ],
  Osmanya: "osma",
  Palmyrene: "palm",
  Pau_Cin_Hau: "pauc",
  Old_Permic: "perm",
  Phags_Pa: "phag",
  Inscriptional_Pahlavi: "phli",
  Psalter_Pahlavi: "phlp",
  Phoenician: "phnx",
  Miao: "plrd",
  Inscriptional_Parthian: "prti",
  Rejang: "rjng",
  Runic: "runr",
  Samaritan: "samr",
  Old_South_Arabian: "sarb",
  Saurashtra: "saur",
  Shavian: "shaw",
  Sharada: "shrd",
  Siddham: "sidd",
  Khudawadi: "sind",
  Sinhala: "sinh",
  Sora_Sompeng: "sora",
  Sundanese: "sund",
  Syloti_Nagri: "sylo",
  Syriac: "syrc",
  Tagbanwa: "tagb",
  Takri: "takr",
  Tai_Le: "tale",
  New_Tai_Lue: "talu",
  Tamil: [
    "tml2",
    "taml"
  ],
  Tai_Viet: "tavt",
  Telugu: [
    "tel2",
    "telu"
  ],
  Tifinagh: "tfng",
  Tagalog: "tglg",
  Thaana: "thaa",
  Thai: "thai",
  Tibetan: "tibt",
  Tirhuta: "tirh",
  Ugaritic: "ugar",
  Vai: "vai ",
  Warang_Citi: "wara",
  Old_Persian: "xpeo",
  Cuneiform: "xsux",
  Yi: "yi  ",
  Inherited: "zinh",
  Common: "zyyy",
  Unknown: "zzzz"
};
var $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS = {};
for (let script in $a5878e4f4663c9e2$var$UNICODE_SCRIPTS) {
  let tag = $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script];
  if (Array.isArray(tag))
    for (let t3 of tag)
      $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS[t3] = script;
  else
    $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS[tag] = script;
}
var $a5878e4f4663c9e2$var$RTL = {
  arab: true,
  hebr: true,
  syrc: true,
  thaa: true,
  cprt: true,
  khar: true,
  phnx: true,
  "nko ": true,
  lydi: true,
  avst: true,
  armi: true,
  phli: true,
  prti: true,
  sarb: true,
  orkh: true,
  samr: true,
  mand: true,
  merc: true,
  mero: true,
  mani: true,
  mend: true,
  nbat: true,
  narb: true,
  palm: true,
  phlp: true
};

class $5a6ae00fa7e614b0$export$2e2bcd8739ae039 {
  constructor(glyphs, features, script, language, direction) {
    this.glyphs = glyphs;
    this.positions = null;
    this.script = script;
    this.language = language || null;
    this.direction = direction || $a5878e4f4663c9e2$export$9fddb9d0dd7d8a54(script);
    this.features = {};
    if (Array.isArray(features))
      for (let tag of features)
        this.features[tag] = true;
    else if (typeof features === "object")
      this.features = features;
  }
  get advanceWidth() {
    let width = 0;
    for (let position of this.positions)
      width += position.xAdvance;
    return width;
  }
  get advanceHeight() {
    let height = 0;
    for (let position of this.positions)
      height += position.yAdvance;
    return height;
  }
  get bbox() {
    let bbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039;
    let x3 = 0;
    let y3 = 0;
    for (let index = 0;index < this.glyphs.length; index++) {
      let glyph = this.glyphs[index];
      let p3 = this.positions[index];
      let b = glyph.bbox;
      bbox.addPoint(b.minX + x3 + p3.xOffset, b.minY + y3 + p3.yOffset);
      bbox.addPoint(b.maxX + x3 + p3.xOffset, b.maxY + y3 + p3.yOffset);
      x3 += p3.xAdvance;
      y3 += p3.yAdvance;
    }
    return bbox;
  }
}

class $4bff5f854806c785$export$2e2bcd8739ae039 {
  constructor(xAdvance = 0, yAdvance = 0, xOffset = 0, yOffset = 0) {
    this.xAdvance = xAdvance;
    this.yAdvance = yAdvance;
    this.xOffset = xOffset;
    this.yOffset = yOffset;
  }
}
var $b603e0ade09ad01e$var$features = {
  allTypographicFeatures: {
    code: 0,
    exclusive: false,
    allTypeFeatures: 0
  },
  ligatures: {
    code: 1,
    exclusive: false,
    requiredLigatures: 0,
    commonLigatures: 2,
    rareLigatures: 4,
    rebusPictures: 8,
    diphthongLigatures: 10,
    squaredLigatures: 12,
    abbrevSquaredLigatures: 14,
    symbolLigatures: 16,
    contextualLigatures: 18,
    historicalLigatures: 20
  },
  cursiveConnection: {
    code: 2,
    exclusive: true,
    unconnected: 0,
    partiallyConnected: 1,
    cursive: 2
  },
  letterCase: {
    code: 3,
    exclusive: true
  },
  verticalSubstitution: {
    code: 4,
    exclusive: false,
    substituteVerticalForms: 0
  },
  linguisticRearrangement: {
    code: 5,
    exclusive: false,
    linguisticRearrangement: 0
  },
  numberSpacing: {
    code: 6,
    exclusive: true,
    monospacedNumbers: 0,
    proportionalNumbers: 1,
    thirdWidthNumbers: 2,
    quarterWidthNumbers: 3
  },
  smartSwash: {
    code: 8,
    exclusive: false,
    wordInitialSwashes: 0,
    wordFinalSwashes: 2,
    nonFinalSwashes: 8
  },
  diacritics: {
    code: 9,
    exclusive: true,
    showDiacritics: 0,
    hideDiacritics: 1,
    decomposeDiacritics: 2
  },
  verticalPosition: {
    code: 10,
    exclusive: true,
    normalPosition: 0,
    superiors: 1,
    inferiors: 2,
    ordinals: 3,
    scientificInferiors: 4
  },
  fractions: {
    code: 11,
    exclusive: true,
    noFractions: 0,
    verticalFractions: 1,
    diagonalFractions: 2
  },
  overlappingCharacters: {
    code: 13,
    exclusive: false,
    preventOverlap: 0
  },
  typographicExtras: {
    code: 14,
    exclusive: false,
    slashedZero: 4
  },
  mathematicalExtras: {
    code: 15,
    exclusive: false,
    mathematicalGreek: 10
  },
  ornamentSets: {
    code: 16,
    exclusive: true,
    noOrnaments: 0,
    dingbats: 1,
    piCharacters: 2,
    fleurons: 3,
    decorativeBorders: 4,
    internationalSymbols: 5,
    mathSymbols: 6
  },
  characterAlternatives: {
    code: 17,
    exclusive: true,
    noAlternates: 0
  },
  designComplexity: {
    code: 18,
    exclusive: true,
    designLevel1: 0,
    designLevel2: 1,
    designLevel3: 2,
    designLevel4: 3,
    designLevel5: 4
  },
  styleOptions: {
    code: 19,
    exclusive: true,
    noStyleOptions: 0,
    displayText: 1,
    engravedText: 2,
    illuminatedCaps: 3,
    titlingCaps: 4,
    tallCaps: 5
  },
  characterShape: {
    code: 20,
    exclusive: true,
    traditionalCharacters: 0,
    simplifiedCharacters: 1,
    JIS1978Characters: 2,
    JIS1983Characters: 3,
    JIS1990Characters: 4,
    traditionalAltOne: 5,
    traditionalAltTwo: 6,
    traditionalAltThree: 7,
    traditionalAltFour: 8,
    traditionalAltFive: 9,
    expertCharacters: 10,
    JIS2004Characters: 11,
    hojoCharacters: 12,
    NLCCharacters: 13,
    traditionalNamesCharacters: 14
  },
  numberCase: {
    code: 21,
    exclusive: true,
    lowerCaseNumbers: 0,
    upperCaseNumbers: 1
  },
  textSpacing: {
    code: 22,
    exclusive: true,
    proportionalText: 0,
    monospacedText: 1,
    halfWidthText: 2,
    thirdWidthText: 3,
    quarterWidthText: 4,
    altProportionalText: 5,
    altHalfWidthText: 6
  },
  transliteration: {
    code: 23,
    exclusive: true,
    noTransliteration: 0
  },
  annotation: {
    code: 24,
    exclusive: true,
    noAnnotation: 0,
    boxAnnotation: 1,
    roundedBoxAnnotation: 2,
    circleAnnotation: 3,
    invertedCircleAnnotation: 4,
    parenthesisAnnotation: 5,
    periodAnnotation: 6,
    romanNumeralAnnotation: 7,
    diamondAnnotation: 8,
    invertedBoxAnnotation: 9,
    invertedRoundedBoxAnnotation: 10
  },
  kanaSpacing: {
    code: 25,
    exclusive: true,
    fullWidthKana: 0,
    proportionalKana: 1
  },
  ideographicSpacing: {
    code: 26,
    exclusive: true,
    fullWidthIdeographs: 0,
    proportionalIdeographs: 1,
    halfWidthIdeographs: 2
  },
  unicodeDecomposition: {
    code: 27,
    exclusive: false,
    canonicalComposition: 0,
    compatibilityComposition: 2,
    transcodingComposition: 4
  },
  rubyKana: {
    code: 28,
    exclusive: false,
    rubyKana: 2
  },
  CJKSymbolAlternatives: {
    code: 29,
    exclusive: true,
    noCJKSymbolAlternatives: 0,
    CJKSymbolAltOne: 1,
    CJKSymbolAltTwo: 2,
    CJKSymbolAltThree: 3,
    CJKSymbolAltFour: 4,
    CJKSymbolAltFive: 5
  },
  ideographicAlternatives: {
    code: 30,
    exclusive: true,
    noIdeographicAlternatives: 0,
    ideographicAltOne: 1,
    ideographicAltTwo: 2,
    ideographicAltThree: 3,
    ideographicAltFour: 4,
    ideographicAltFive: 5
  },
  CJKVerticalRomanPlacement: {
    code: 31,
    exclusive: true,
    CJKVerticalRomanCentered: 0,
    CJKVerticalRomanHBaseline: 1
  },
  italicCJKRoman: {
    code: 32,
    exclusive: false,
    CJKItalicRoman: 2
  },
  caseSensitiveLayout: {
    code: 33,
    exclusive: false,
    caseSensitiveLayout: 0,
    caseSensitiveSpacing: 2
  },
  alternateKana: {
    code: 34,
    exclusive: false,
    alternateHorizKana: 0,
    alternateVertKana: 2
  },
  stylisticAlternatives: {
    code: 35,
    exclusive: false,
    noStylisticAlternates: 0,
    stylisticAltOne: 2,
    stylisticAltTwo: 4,
    stylisticAltThree: 6,
    stylisticAltFour: 8,
    stylisticAltFive: 10,
    stylisticAltSix: 12,
    stylisticAltSeven: 14,
    stylisticAltEight: 16,
    stylisticAltNine: 18,
    stylisticAltTen: 20,
    stylisticAltEleven: 22,
    stylisticAltTwelve: 24,
    stylisticAltThirteen: 26,
    stylisticAltFourteen: 28,
    stylisticAltFifteen: 30,
    stylisticAltSixteen: 32,
    stylisticAltSeventeen: 34,
    stylisticAltEighteen: 36,
    stylisticAltNineteen: 38,
    stylisticAltTwenty: 40
  },
  contextualAlternates: {
    code: 36,
    exclusive: false,
    contextualAlternates: 0,
    swashAlternates: 2,
    contextualSwashAlternates: 4
  },
  lowerCase: {
    code: 37,
    exclusive: true,
    defaultLowerCase: 0,
    lowerCaseSmallCaps: 1,
    lowerCasePetiteCaps: 2
  },
  upperCase: {
    code: 38,
    exclusive: true,
    defaultUpperCase: 0,
    upperCaseSmallCaps: 1,
    upperCasePetiteCaps: 2
  },
  languageTag: {
    code: 39,
    exclusive: true
  },
  CJKRomanSpacing: {
    code: 103,
    exclusive: true,
    halfWidthCJKRoman: 0,
    proportionalCJKRoman: 1,
    defaultCJKRoman: 2,
    fullWidthCJKRoman: 3
  }
};
var $b603e0ade09ad01e$var$feature = (name, selector) => [
  $b603e0ade09ad01e$var$features[name].code,
  $b603e0ade09ad01e$var$features[name][selector]
];
var $b603e0ade09ad01e$var$OTMapping = {
  rlig: $b603e0ade09ad01e$var$feature("ligatures", "requiredLigatures"),
  clig: $b603e0ade09ad01e$var$feature("ligatures", "contextualLigatures"),
  dlig: $b603e0ade09ad01e$var$feature("ligatures", "rareLigatures"),
  hlig: $b603e0ade09ad01e$var$feature("ligatures", "historicalLigatures"),
  liga: $b603e0ade09ad01e$var$feature("ligatures", "commonLigatures"),
  hist: $b603e0ade09ad01e$var$feature("ligatures", "historicalLigatures"),
  smcp: $b603e0ade09ad01e$var$feature("lowerCase", "lowerCaseSmallCaps"),
  pcap: $b603e0ade09ad01e$var$feature("lowerCase", "lowerCasePetiteCaps"),
  frac: $b603e0ade09ad01e$var$feature("fractions", "diagonalFractions"),
  dnom: $b603e0ade09ad01e$var$feature("fractions", "diagonalFractions"),
  numr: $b603e0ade09ad01e$var$feature("fractions", "diagonalFractions"),
  afrc: $b603e0ade09ad01e$var$feature("fractions", "verticalFractions"),
  case: $b603e0ade09ad01e$var$feature("caseSensitiveLayout", "caseSensitiveLayout"),
  ccmp: $b603e0ade09ad01e$var$feature("unicodeDecomposition", "canonicalComposition"),
  cpct: $b603e0ade09ad01e$var$feature("CJKVerticalRomanPlacement", "CJKVerticalRomanCentered"),
  valt: $b603e0ade09ad01e$var$feature("CJKVerticalRomanPlacement", "CJKVerticalRomanCentered"),
  swsh: $b603e0ade09ad01e$var$feature("contextualAlternates", "swashAlternates"),
  cswh: $b603e0ade09ad01e$var$feature("contextualAlternates", "contextualSwashAlternates"),
  curs: $b603e0ade09ad01e$var$feature("cursiveConnection", "cursive"),
  c2pc: $b603e0ade09ad01e$var$feature("upperCase", "upperCasePetiteCaps"),
  c2sc: $b603e0ade09ad01e$var$feature("upperCase", "upperCaseSmallCaps"),
  init: $b603e0ade09ad01e$var$feature("smartSwash", "wordInitialSwashes"),
  fin2: $b603e0ade09ad01e$var$feature("smartSwash", "wordFinalSwashes"),
  medi: $b603e0ade09ad01e$var$feature("smartSwash", "nonFinalSwashes"),
  med2: $b603e0ade09ad01e$var$feature("smartSwash", "nonFinalSwashes"),
  fin3: $b603e0ade09ad01e$var$feature("smartSwash", "wordFinalSwashes"),
  fina: $b603e0ade09ad01e$var$feature("smartSwash", "wordFinalSwashes"),
  pkna: $b603e0ade09ad01e$var$feature("kanaSpacing", "proportionalKana"),
  half: $b603e0ade09ad01e$var$feature("textSpacing", "halfWidthText"),
  halt: $b603e0ade09ad01e$var$feature("textSpacing", "altHalfWidthText"),
  hkna: $b603e0ade09ad01e$var$feature("alternateKana", "alternateHorizKana"),
  vkna: $b603e0ade09ad01e$var$feature("alternateKana", "alternateVertKana"),
  ital: $b603e0ade09ad01e$var$feature("italicCJKRoman", "CJKItalicRoman"),
  lnum: $b603e0ade09ad01e$var$feature("numberCase", "upperCaseNumbers"),
  onum: $b603e0ade09ad01e$var$feature("numberCase", "lowerCaseNumbers"),
  mgrk: $b603e0ade09ad01e$var$feature("mathematicalExtras", "mathematicalGreek"),
  calt: $b603e0ade09ad01e$var$feature("contextualAlternates", "contextualAlternates"),
  vrt2: $b603e0ade09ad01e$var$feature("verticalSubstitution", "substituteVerticalForms"),
  vert: $b603e0ade09ad01e$var$feature("verticalSubstitution", "substituteVerticalForms"),
  tnum: $b603e0ade09ad01e$var$feature("numberSpacing", "monospacedNumbers"),
  pnum: $b603e0ade09ad01e$var$feature("numberSpacing", "proportionalNumbers"),
  sups: $b603e0ade09ad01e$var$feature("verticalPosition", "superiors"),
  subs: $b603e0ade09ad01e$var$feature("verticalPosition", "inferiors"),
  ordn: $b603e0ade09ad01e$var$feature("verticalPosition", "ordinals"),
  pwid: $b603e0ade09ad01e$var$feature("textSpacing", "proportionalText"),
  hwid: $b603e0ade09ad01e$var$feature("textSpacing", "halfWidthText"),
  qwid: $b603e0ade09ad01e$var$feature("textSpacing", "quarterWidthText"),
  twid: $b603e0ade09ad01e$var$feature("textSpacing", "thirdWidthText"),
  fwid: $b603e0ade09ad01e$var$feature("textSpacing", "proportionalText"),
  palt: $b603e0ade09ad01e$var$feature("textSpacing", "altProportionalText"),
  trad: $b603e0ade09ad01e$var$feature("characterShape", "traditionalCharacters"),
  smpl: $b603e0ade09ad01e$var$feature("characterShape", "simplifiedCharacters"),
  jp78: $b603e0ade09ad01e$var$feature("characterShape", "JIS1978Characters"),
  jp83: $b603e0ade09ad01e$var$feature("characterShape", "JIS1983Characters"),
  jp90: $b603e0ade09ad01e$var$feature("characterShape", "JIS1990Characters"),
  jp04: $b603e0ade09ad01e$var$feature("characterShape", "JIS2004Characters"),
  expt: $b603e0ade09ad01e$var$feature("characterShape", "expertCharacters"),
  hojo: $b603e0ade09ad01e$var$feature("characterShape", "hojoCharacters"),
  nlck: $b603e0ade09ad01e$var$feature("characterShape", "NLCCharacters"),
  tnam: $b603e0ade09ad01e$var$feature("characterShape", "traditionalNamesCharacters"),
  ruby: $b603e0ade09ad01e$var$feature("rubyKana", "rubyKana"),
  titl: $b603e0ade09ad01e$var$feature("styleOptions", "titlingCaps"),
  zero: $b603e0ade09ad01e$var$feature("typographicExtras", "slashedZero"),
  ss01: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltOne"),
  ss02: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltTwo"),
  ss03: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltThree"),
  ss04: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltFour"),
  ss05: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltFive"),
  ss06: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltSix"),
  ss07: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltSeven"),
  ss08: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltEight"),
  ss09: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltNine"),
  ss10: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltTen"),
  ss11: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltEleven"),
  ss12: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltTwelve"),
  ss13: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltThirteen"),
  ss14: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltFourteen"),
  ss15: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltFifteen"),
  ss16: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltSixteen"),
  ss17: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltSeventeen"),
  ss18: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltEighteen"),
  ss19: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltNineteen"),
  ss20: $b603e0ade09ad01e$var$feature("stylisticAlternatives", "stylisticAltTwenty")
};
for (let i3 = 1;i3 <= 99; i3++)
  $b603e0ade09ad01e$var$OTMapping[`cv${`00${i3}`.slice(-2)}`] = [
    $b603e0ade09ad01e$var$features.characterAlternatives.code,
    i3
  ];
var $b603e0ade09ad01e$var$AATMapping = {};
for (let ot in $b603e0ade09ad01e$var$OTMapping) {
  let aat = $b603e0ade09ad01e$var$OTMapping[ot];
  if ($b603e0ade09ad01e$var$AATMapping[aat[0]] == null)
    $b603e0ade09ad01e$var$AATMapping[aat[0]] = {};
  $b603e0ade09ad01e$var$AATMapping[aat[0]][aat[1]] = ot;
}
var _class;
var $16667a2c0f0b1be5$export$2e2bcd8739ae039 = (_class = class $16667a2c0f0b1be5$export$2e2bcd8739ae0392 {
  constructor(table) {
    this.table = table;
  }
  lookup(glyph) {
    switch (this.table.version) {
      case 0:
        return this.table.values.getItem(glyph);
      case 2:
      case 4: {
        let min = 0;
        let max = this.table.binarySearchHeader.nUnits - 1;
        while (min <= max) {
          var mid = min + max >> 1;
          var seg = this.table.segments[mid];
          if (seg.firstGlyph === 65535)
            return null;
          if (glyph < seg.firstGlyph)
            max = mid - 1;
          else if (glyph > seg.lastGlyph)
            min = mid + 1;
          else {
            if (this.table.version === 2)
              return seg.value;
            else
              return seg.values[glyph - seg.firstGlyph];
          }
        }
        return null;
      }
      case 6: {
        let min = 0;
        let max = this.table.binarySearchHeader.nUnits - 1;
        while (min <= max) {
          var mid = min + max >> 1;
          var seg = this.table.segments[mid];
          if (seg.glyph === 65535)
            return null;
          if (glyph < seg.glyph)
            max = mid - 1;
          else if (glyph > seg.glyph)
            min = mid + 1;
          else
            return seg.value;
        }
        return null;
      }
      case 8:
        return this.table.values[glyph - this.table.firstGlyph];
      default:
        throw new Error(`Unknown lookup table format: ${this.table.version}`);
    }
  }
  glyphsForValue(classValue) {
    let res = [];
    switch (this.table.version) {
      case 2:
      case 4:
        for (let segment of this.table.segments)
          if (this.table.version === 2 && segment.value === classValue)
            res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(segment.firstGlyph, segment.lastGlyph + 1));
          else {
            for (let index = 0;index < segment.values.length; index++)
              if (segment.values[index] === classValue)
                res.push(segment.firstGlyph + index);
          }
        break;
      case 6:
        for (let segment1 of this.table.segments)
          if (segment1.value === classValue)
            res.push(segment1.glyph);
        break;
      case 8:
        for (let i3 = 0;i3 < this.table.values.length; i3++)
          if (this.table.values[i3] === classValue)
            res.push(this.table.firstGlyph + i3);
        break;
      default:
        throw new Error(`Unknown lookup table format: ${this.table.version}`);
    }
    return res;
  }
}, _applyDecoratedDescriptor(_class.prototype, "glyphsForValue", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "glyphsForValue"), _class.prototype), _class);
var $de324b614d9ee26c$var$START_OF_TEXT_STATE = 0;
var $de324b614d9ee26c$var$END_OF_TEXT_CLASS = 0;
var $de324b614d9ee26c$var$OUT_OF_BOUNDS_CLASS = 1;
var $de324b614d9ee26c$var$DELETED_GLYPH_CLASS = 2;
var $de324b614d9ee26c$var$DONT_ADVANCE = 16384;

class $de324b614d9ee26c$export$2e2bcd8739ae039 {
  constructor(stateTable) {
    this.stateTable = stateTable;
    this.lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(stateTable.classTable);
  }
  process(glyphs, reverse, processEntry) {
    let currentState = $de324b614d9ee26c$var$START_OF_TEXT_STATE;
    let index = reverse ? glyphs.length - 1 : 0;
    let dir = reverse ? -1 : 1;
    while (dir === 1 && index <= glyphs.length || dir === -1 && index >= -1) {
      let glyph = null;
      let classCode = $de324b614d9ee26c$var$OUT_OF_BOUNDS_CLASS;
      let shouldAdvance = true;
      if (index === glyphs.length || index === -1)
        classCode = $de324b614d9ee26c$var$END_OF_TEXT_CLASS;
      else {
        glyph = glyphs[index];
        if (glyph.id === 65535)
          classCode = $de324b614d9ee26c$var$DELETED_GLYPH_CLASS;
        else {
          classCode = this.lookupTable.lookup(glyph.id);
          if (classCode == null)
            classCode = $de324b614d9ee26c$var$OUT_OF_BOUNDS_CLASS;
        }
      }
      let row = this.stateTable.stateArray.getItem(currentState);
      let entryIndex = row[classCode];
      let entry = this.stateTable.entryTable.getItem(entryIndex);
      if (classCode !== $de324b614d9ee26c$var$END_OF_TEXT_CLASS && classCode !== $de324b614d9ee26c$var$DELETED_GLYPH_CLASS) {
        processEntry(glyph, entry, index);
        shouldAdvance = !(entry.flags & $de324b614d9ee26c$var$DONT_ADVANCE);
      }
      currentState = entry.newState;
      if (shouldAdvance)
        index += dir;
    }
    return glyphs;
  }
  traverse(opts, state = 0, visited2 = new Set) {
    if (visited2.has(state))
      return;
    visited2.add(state);
    let { nClasses, stateArray, entryTable } = this.stateTable;
    let row = stateArray.getItem(state);
    for (let classCode = 4;classCode < nClasses; classCode++) {
      let entryIndex = row[classCode];
      let entry = entryTable.getItem(entryIndex);
      for (let glyph of this.lookupTable.glyphsForValue(classCode)) {
        if (opts.enter)
          opts.enter(glyph, entry);
        if (entry.newState !== 0)
          this.traverse(opts, entry.newState, visited2);
        if (opts.exit)
          opts.exit(glyph, entry);
      }
    }
  }
}
var _class;
var $696c050512749a50$var$MARK_FIRST = 32768;
var $696c050512749a50$var$MARK_LAST = 8192;
var $696c050512749a50$var$VERB = 15;
var $696c050512749a50$var$SET_MARK = 32768;
var $696c050512749a50$var$SET_COMPONENT = 32768;
var $696c050512749a50$var$PERFORM_ACTION = 8192;
var $696c050512749a50$var$LAST_MASK = 2147483648;
var $696c050512749a50$var$STORE_MASK = 1073741824;
var $696c050512749a50$var$OFFSET_MASK = 1073741823;
var $696c050512749a50$var$REVERSE_DIRECTION = 4194304;
var $696c050512749a50$var$CURRENT_INSERT_BEFORE = 2048;
var $696c050512749a50$var$MARKED_INSERT_BEFORE = 1024;
var $696c050512749a50$var$CURRENT_INSERT_COUNT = 992;
var $696c050512749a50$var$MARKED_INSERT_COUNT = 31;
var $696c050512749a50$export$2e2bcd8739ae039 = (_class = class $696c050512749a50$export$2e2bcd8739ae0392 {
  constructor(font) {
    this.processIndicRearragement = this.processIndicRearragement.bind(this);
    this.processContextualSubstitution = this.processContextualSubstitution.bind(this);
    this.processLigature = this.processLigature.bind(this);
    this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);
    this.processGlyphInsertion = this.processGlyphInsertion.bind(this);
    this.font = font;
    this.morx = font.morx;
    this.inputCache = null;
  }
  process(glyphs, features = {}) {
    for (let chain of this.morx.chains) {
      let flags = chain.defaultFlags;
      for (let feature of chain.features) {
        let f3;
        if (f3 = features[feature.featureType]) {
          if (f3[feature.featureSetting]) {
            flags &= feature.disableFlags;
            flags |= feature.enableFlags;
          } else if (f3[feature.featureSetting] === false) {
            flags |= ~feature.disableFlags;
            flags &= ~feature.enableFlags;
          }
        }
      }
      for (let subtable of chain.subtables)
        if (subtable.subFeatureFlags & flags)
          this.processSubtable(subtable, glyphs);
    }
    let index = glyphs.length - 1;
    while (index >= 0) {
      if (glyphs[index].id === 65535)
        glyphs.splice(index, 1);
      index--;
    }
    return glyphs;
  }
  processSubtable(subtable, glyphs) {
    this.subtable = subtable;
    this.glyphs = glyphs;
    if (this.subtable.type === 4) {
      this.processNoncontextualSubstitutions(this.subtable, this.glyphs);
      return;
    }
    this.ligatureStack = [];
    this.markedGlyph = null;
    this.firstGlyph = null;
    this.lastGlyph = null;
    this.markedIndex = null;
    let stateMachine = this.getStateMachine(subtable);
    let process2 = this.getProcessor();
    let reverse = !!(this.subtable.coverage & $696c050512749a50$var$REVERSE_DIRECTION);
    return stateMachine.process(this.glyphs, reverse, process2);
  }
  getStateMachine(subtable) {
    return new $de324b614d9ee26c$export$2e2bcd8739ae039(subtable.table.stateTable);
  }
  getProcessor() {
    switch (this.subtable.type) {
      case 0:
        return this.processIndicRearragement;
      case 1:
        return this.processContextualSubstitution;
      case 2:
        return this.processLigature;
      case 4:
        return this.processNoncontextualSubstitutions;
      case 5:
        return this.processGlyphInsertion;
      default:
        throw new Error(`Invalid morx subtable type: ${this.subtable.type}`);
    }
  }
  processIndicRearragement(glyph, entry, index) {
    if (entry.flags & $696c050512749a50$var$MARK_FIRST)
      this.firstGlyph = index;
    if (entry.flags & $696c050512749a50$var$MARK_LAST)
      this.lastGlyph = index;
    $696c050512749a50$var$reorderGlyphs(this.glyphs, entry.flags & $696c050512749a50$var$VERB, this.firstGlyph, this.lastGlyph);
  }
  processContextualSubstitution(glyph, entry, index) {
    let subsitutions = this.subtable.table.substitutionTable.items;
    if (entry.markIndex !== 65535) {
      let lookup = subsitutions.getItem(entry.markIndex);
      let lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(lookup);
      glyph = this.glyphs[this.markedGlyph];
      var gid = lookupTable.lookup(glyph.id);
      if (gid)
        this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);
    }
    if (entry.currentIndex !== 65535) {
      let lookup = subsitutions.getItem(entry.currentIndex);
      let lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(lookup);
      glyph = this.glyphs[index];
      var gid = lookupTable.lookup(glyph.id);
      if (gid)
        this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
    }
    if (entry.flags & $696c050512749a50$var$SET_MARK)
      this.markedGlyph = index;
  }
  processLigature(glyph, entry, index) {
    if (entry.flags & $696c050512749a50$var$SET_COMPONENT)
      this.ligatureStack.push(index);
    if (entry.flags & $696c050512749a50$var$PERFORM_ACTION) {
      let actions = this.subtable.table.ligatureActions;
      let components = this.subtable.table.components;
      let ligatureList = this.subtable.table.ligatureList;
      let actionIndex = entry.action;
      let last = false;
      let ligatureIndex = 0;
      let codePoints = [];
      let ligatureGlyphs = [];
      while (!last) {
        let componentGlyph = this.ligatureStack.pop();
        codePoints.unshift(...this.glyphs[componentGlyph].codePoints);
        let action = actions.getItem(actionIndex++);
        last = !!(action & $696c050512749a50$var$LAST_MASK);
        let store = !!(action & $696c050512749a50$var$STORE_MASK);
        let offset = (action & $696c050512749a50$var$OFFSET_MASK) << 2 >> 2;
        offset += this.glyphs[componentGlyph].id;
        let component = components.getItem(offset);
        ligatureIndex += component;
        if (last || store) {
          let ligatureEntry = ligatureList.getItem(ligatureIndex);
          this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);
          ligatureGlyphs.push(componentGlyph);
          ligatureIndex = 0;
          codePoints = [];
        } else
          this.glyphs[componentGlyph] = this.font.getGlyph(65535);
      }
      this.ligatureStack.push(...ligatureGlyphs);
    }
  }
  processNoncontextualSubstitutions(subtable, glyphs, index) {
    let lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(subtable.table.lookupTable);
    for (index = 0;index < glyphs.length; index++) {
      let glyph = glyphs[index];
      if (glyph.id !== 65535) {
        let gid = lookupTable.lookup(glyph.id);
        if (gid)
          glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
      }
    }
  }
  _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {
    let insertions = [];
    while (count--) {
      let gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);
      insertions.push(this.font.getGlyph(gid));
    }
    if (!isBefore)
      glyphIndex++;
    this.glyphs.splice(glyphIndex, 0, ...insertions);
  }
  processGlyphInsertion(glyph, entry, index) {
    if (entry.flags & $696c050512749a50$var$SET_MARK)
      this.markedIndex = index;
    if (entry.markedInsertIndex !== 65535) {
      let count = (entry.flags & $696c050512749a50$var$MARKED_INSERT_COUNT) >>> 5;
      let isBefore = !!(entry.flags & $696c050512749a50$var$MARKED_INSERT_BEFORE);
      this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);
    }
    if (entry.currentInsertIndex !== 65535) {
      let count = (entry.flags & $696c050512749a50$var$CURRENT_INSERT_COUNT) >>> 5;
      let isBefore = !!(entry.flags & $696c050512749a50$var$CURRENT_INSERT_BEFORE);
      this._insertGlyphs(index, entry.currentInsertIndex, count, isBefore);
    }
  }
  getSupportedFeatures() {
    let features = [];
    for (let chain of this.morx.chains)
      for (let feature of chain.features)
        features.push([
          feature.featureType,
          feature.featureSetting
        ]);
    return features;
  }
  generateInputs(gid) {
    if (!this.inputCache)
      this.generateInputCache();
    return this.inputCache[gid] || [];
  }
  generateInputCache() {
    this.inputCache = {};
    for (let chain of this.morx.chains) {
      let flags = chain.defaultFlags;
      for (let subtable of chain.subtables)
        if (subtable.subFeatureFlags & flags)
          this.generateInputsForSubtable(subtable);
    }
  }
  generateInputsForSubtable(subtable) {
    if (subtable.type !== 2)
      return;
    let reverse = !!(subtable.coverage & $696c050512749a50$var$REVERSE_DIRECTION);
    if (reverse)
      throw new Error("Reverse subtable, not supported.");
    this.subtable = subtable;
    this.ligatureStack = [];
    let stateMachine = this.getStateMachine(subtable);
    let process2 = this.getProcessor();
    let input = [];
    let stack = [];
    this.glyphs = [];
    stateMachine.traverse({
      enter: (glyph, entry) => {
        let glyphs = this.glyphs;
        stack.push({
          glyphs: glyphs.slice(),
          ligatureStack: this.ligatureStack.slice()
        });
        let g12 = this.font.getGlyph(glyph);
        input.push(g12);
        glyphs.push(input[input.length - 1]);
        process2(glyphs[glyphs.length - 1], entry, glyphs.length - 1);
        let count = 0;
        let found = 0;
        for (let i3 = 0;i3 < glyphs.length && count <= 1; i3++)
          if (glyphs[i3].id !== 65535) {
            count++;
            found = glyphs[i3].id;
          }
        if (count === 1) {
          let result = input.map((g) => g.id);
          let cache = this.inputCache[found];
          if (cache)
            cache.push(result);
          else
            this.inputCache[found] = [
              result
            ];
        }
      },
      exit: () => {
        ({ glyphs: this.glyphs, ligatureStack: this.ligatureStack } = stack.pop());
        input.pop();
      }
    });
  }
}, _applyDecoratedDescriptor(_class.prototype, "getStateMachine", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "getStateMachine"), _class.prototype), _class);

class $9273c77bc46b13e0$export$2e2bcd8739ae039 {
  constructor(font) {
    this.font = font;
    this.morxProcessor = new $696c050512749a50$export$2e2bcd8739ae039(font);
    this.fallbackPosition = false;
  }
  substitute(glyphRun) {
    if (glyphRun.direction === "rtl")
      glyphRun.glyphs.reverse();
    this.morxProcessor.process(glyphRun.glyphs, $b603e0ade09ad01e$export$b813f7d2a1677c16(glyphRun.features));
  }
  getAvailableFeatures(script, language) {
    return $b603e0ade09ad01e$export$bd6df347a4f391c4(this.morxProcessor.getSupportedFeatures());
  }
  stringsForGlyph(gid) {
    let glyphStrings = this.morxProcessor.generateInputs(gid);
    let result = new Set;
    for (let glyphs of glyphStrings)
      this._addStrings(glyphs, 0, result, "");
    return result;
  }
  _addStrings(glyphs, index, strings, string7) {
    let codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);
    for (let codePoint of codePoints) {
      let s3 = string7 + String.fromCodePoint(codePoint);
      if (index < glyphs.length - 1)
        this._addStrings(glyphs, index + 1, strings, s3);
      else
        strings.add(s3);
    }
  }
}

class $d208953d14e55e3c$export$2e2bcd8739ae039 {
  constructor(font, script, direction) {
    this.font = font;
    this.script = script;
    this.direction = direction;
    this.stages = [];
    this.globalFeatures = {};
    this.allFeatures = {};
  }
  _addFeatures(features, global2) {
    let stageIndex = this.stages.length - 1;
    let stage = this.stages[stageIndex];
    for (let feature of features)
      if (this.allFeatures[feature] == null) {
        stage.push(feature);
        this.allFeatures[feature] = stageIndex;
        if (global2)
          this.globalFeatures[feature] = true;
      }
  }
  add(arg, global2 = true) {
    if (this.stages.length === 0)
      this.stages.push([]);
    if (typeof arg === "string")
      arg = [
        arg
      ];
    if (Array.isArray(arg))
      this._addFeatures(arg, global2);
    else if (typeof arg === "object") {
      this._addFeatures(arg.global || [], true);
      this._addFeatures(arg.local || [], false);
    } else
      throw new Error("Unsupported argument to ShapingPlan#add");
  }
  addStage(arg, global2) {
    if (typeof arg === "function")
      this.stages.push(arg, []);
    else {
      this.stages.push([]);
      this.add(arg, global2);
    }
  }
  setFeatureOverrides(features) {
    if (Array.isArray(features))
      this.add(features);
    else if (typeof features === "object")
      for (let tag in features) {
        if (features[tag])
          this.add(tag);
        else if (this.allFeatures[tag] != null) {
          let stage = this.stages[this.allFeatures[tag]];
          stage.splice(stage.indexOf(tag), 1);
          delete this.allFeatures[tag];
          delete this.globalFeatures[tag];
        }
      }
  }
  assignGlobalFeatures(glyphs) {
    for (let glyph of glyphs)
      for (let feature in this.globalFeatures)
        glyph.features[feature] = true;
  }
  process(processor, glyphs, positions) {
    for (let stage of this.stages) {
      if (typeof stage === "function") {
        if (!positions)
          stage(this.font, glyphs, this);
      } else if (stage.length > 0)
        processor.applyFeatures(stage, glyphs, positions);
    }
  }
}
var $5340de7a86f3ae85$var$VARIATION_FEATURES = [
  "rvrn"
];
var $5340de7a86f3ae85$var$COMMON_FEATURES = [
  "ccmp",
  "locl",
  "rlig",
  "mark",
  "mkmk"
];
var $5340de7a86f3ae85$var$FRACTIONAL_FEATURES = [
  "frac",
  "numr",
  "dnom"
];
var $5340de7a86f3ae85$var$HORIZONTAL_FEATURES = [
  "calt",
  "clig",
  "liga",
  "rclt",
  "curs",
  "kern"
];
var $5340de7a86f3ae85$var$DIRECTIONAL_FEATURES = {
  ltr: [
    "ltra",
    "ltrm"
  ],
  rtl: [
    "rtla",
    "rtlm"
  ]
};

class $5340de7a86f3ae85$export$2e2bcd8739ae039 {
  static zeroMarkWidths = "AFTER_GPOS";
  static plan(plan, glyphs, features) {
    this.planPreprocessing(plan);
    this.planFeatures(plan);
    this.planPostprocessing(plan, features);
    plan.assignGlobalFeatures(glyphs);
    this.assignFeatures(plan, glyphs);
  }
  static planPreprocessing(plan) {
    plan.add({
      global: [
        ...$5340de7a86f3ae85$var$VARIATION_FEATURES,
        ...$5340de7a86f3ae85$var$DIRECTIONAL_FEATURES[plan.direction]
      ],
      local: $5340de7a86f3ae85$var$FRACTIONAL_FEATURES
    });
  }
  static planFeatures(plan) {
  }
  static planPostprocessing(plan, userFeatures) {
    plan.add([
      ...$5340de7a86f3ae85$var$COMMON_FEATURES,
      ...$5340de7a86f3ae85$var$HORIZONTAL_FEATURES
    ]);
    plan.setFeatureOverrides(userFeatures);
  }
  static assignFeatures(plan, glyphs) {
    for (let i3 = 0;i3 < glyphs.length; i3++) {
      let glyph = glyphs[i3];
      if (glyph.codePoints[0] === 8260) {
        let start = i3;
        let end = i3 + 1;
        while (start > 0 && $747425b437e121da$export$2e2bcd8739ae039.isDigit(glyphs[start - 1].codePoints[0])) {
          glyphs[start - 1].features.numr = true;
          glyphs[start - 1].features.frac = true;
          start--;
        }
        while (end < glyphs.length && $747425b437e121da$export$2e2bcd8739ae039.isDigit(glyphs[end].codePoints[0])) {
          glyphs[end].features.dnom = true;
          glyphs[end].features.frac = true;
          end++;
        }
        glyph.features.frac = true;
        i3 = end - 1;
      }
    }
  }
}
var $5cab828b3273a17c$require$Buffer = $5OpyM$Buffer;
var $5cab828b3273a17c$var$trie = new import_unicode_trie2.default($5cab828b3273a17c$require$Buffer.from("ABABAAAAAACgMQAAAZUBav7t2CtPA0EUBeDZB00pin9AJZIEgyUEj0QhweDAgQOJxCBRBElQSBwSicLgkOAwnNKZ5GaY2c7uzj4o5yZfZrrbefbuIx2nSq3CGmzAWH/+K+UO7MIe7MMhHMMpnMMFXMIVXIt2t3CnP088iPqjqNN8e4Ij7Rle4LUH82rLm6i/92A+RERERERERERNmfz/89GDeRARERERzbN8ceps2Iwt9H0C9/AJ6yOlDkbTczcot5VSm8Pm1vcFWfb7+BKOLTuOd2UlTX4wGP85Eg953lWPFbnuN7PkjtLmalOWbNenkHOSa7T3KmR9MVTZ2zZkVj1kHa68MueVKH0R4zqQ44WEXLM8VjcWHP0PtKLfPzQnMtGn3W4QYf6qxFxceVI394r2xnV+1rih0fV1Vzf3fO1n3evL5J78ruvZ5ptX2Rwy92Tfb1wlEqut3U+sZ3HXOeJ7/zDrbyuP6+Zz0fqa6Nv3vhY7Yu1xWnGevmsvsUpTT/RYIe8waUH/rvHMWKFzLfN8L+rTfp645mfX7ftlnfDtYxN59w0=", "base64"));
var $5cab828b3273a17c$var$FEATURES = [
  "isol",
  "fina",
  "fin2",
  "fin3",
  "medi",
  "med2",
  "init"
];
var $5cab828b3273a17c$var$ShapingClasses = {
  Non_Joining: 0,
  Left_Joining: 1,
  Right_Joining: 2,
  Dual_Joining: 3,
  Join_Causing: 3,
  ALAPH: 4,
  "DALATH RISH": 5,
  Transparent: 6
};
var $5cab828b3273a17c$var$ISOL = "isol";
var $5cab828b3273a17c$var$FINA = "fina";
var $5cab828b3273a17c$var$FIN2 = "fin2";
var $5cab828b3273a17c$var$FIN3 = "fin3";
var $5cab828b3273a17c$var$MEDI = "medi";
var $5cab828b3273a17c$var$MED2 = "med2";
var $5cab828b3273a17c$var$INIT = "init";
var $5cab828b3273a17c$var$NONE = null;
var $5cab828b3273a17c$var$STATE_TABLE = [
  [
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$NONE,
      0
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      1
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      1
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      6
    ]
  ],
  [
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$NONE,
      0
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      1
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$FIN2,
      5
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      6
    ]
  ],
  [
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$NONE,
      0
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$INIT,
      $5cab828b3273a17c$var$FINA,
      1
    ],
    [
      $5cab828b3273a17c$var$INIT,
      $5cab828b3273a17c$var$FINA,
      3
    ],
    [
      $5cab828b3273a17c$var$INIT,
      $5cab828b3273a17c$var$FINA,
      4
    ],
    [
      $5cab828b3273a17c$var$INIT,
      $5cab828b3273a17c$var$FINA,
      6
    ]
  ],
  [
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$NONE,
      0
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$MEDI,
      $5cab828b3273a17c$var$FINA,
      1
    ],
    [
      $5cab828b3273a17c$var$MEDI,
      $5cab828b3273a17c$var$FINA,
      3
    ],
    [
      $5cab828b3273a17c$var$MEDI,
      $5cab828b3273a17c$var$FINA,
      4
    ],
    [
      $5cab828b3273a17c$var$MEDI,
      $5cab828b3273a17c$var$FINA,
      6
    ]
  ],
  [
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$NONE,
      0
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$MED2,
      $5cab828b3273a17c$var$ISOL,
      1
    ],
    [
      $5cab828b3273a17c$var$MED2,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$MED2,
      $5cab828b3273a17c$var$FIN2,
      5
    ],
    [
      $5cab828b3273a17c$var$MED2,
      $5cab828b3273a17c$var$ISOL,
      6
    ]
  ],
  [
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$NONE,
      0
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$ISOL,
      $5cab828b3273a17c$var$ISOL,
      1
    ],
    [
      $5cab828b3273a17c$var$ISOL,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$ISOL,
      $5cab828b3273a17c$var$FIN2,
      5
    ],
    [
      $5cab828b3273a17c$var$ISOL,
      $5cab828b3273a17c$var$ISOL,
      6
    ]
  ],
  [
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$NONE,
      0
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      1
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      2
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$FIN3,
      5
    ],
    [
      $5cab828b3273a17c$var$NONE,
      $5cab828b3273a17c$var$ISOL,
      6
    ]
  ]
];

class $5cab828b3273a17c$export$2e2bcd8739ae039 extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {
  static planFeatures(plan) {
    plan.add([
      "ccmp",
      "locl"
    ]);
    for (let i3 = 0;i3 < $5cab828b3273a17c$var$FEATURES.length; i3++) {
      let feature = $5cab828b3273a17c$var$FEATURES[i3];
      plan.addStage(feature, false);
    }
    plan.addStage("mset");
  }
  static assignFeatures(plan, glyphs) {
    super.assignFeatures(plan, glyphs);
    let prev = -1;
    let state = 0;
    let actions = [];
    for (let i3 = 0;i3 < glyphs.length; i3++) {
      let curAction, prevAction;
      var glyph = glyphs[i3];
      let type47 = $5cab828b3273a17c$var$getShapingClass(glyph.codePoints[0]);
      if (type47 === $5cab828b3273a17c$var$ShapingClasses.Transparent) {
        actions[i3] = $5cab828b3273a17c$var$NONE;
        continue;
      }
      [prevAction, curAction, state] = $5cab828b3273a17c$var$STATE_TABLE[state][type47];
      if (prevAction !== $5cab828b3273a17c$var$NONE && prev !== -1)
        actions[prev] = prevAction;
      actions[i3] = curAction;
      prev = i3;
    }
    for (let index = 0;index < glyphs.length; index++) {
      let feature;
      var glyph = glyphs[index];
      if (feature = actions[index])
        glyph.features[feature] = true;
    }
  }
}

class $ab0ec2aaf85421fe$export$2e2bcd8739ae039 {
  constructor(glyphs, options) {
    this.glyphs = glyphs;
    this.reset(options);
  }
  reset(options = {}, index = 0) {
    this.options = options;
    this.flags = options.flags || {};
    this.markAttachmentType = options.markAttachmentType || 0;
    this.index = index;
  }
  get cur() {
    return this.glyphs[this.index] || null;
  }
  shouldIgnore(glyph) {
    return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;
  }
  move(dir) {
    this.index += dir;
    while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index]))
      this.index += dir;
    if (0 > this.index || this.index >= this.glyphs.length)
      return null;
    return this.glyphs[this.index];
  }
  next() {
    return this.move(1);
  }
  prev() {
    return this.move(-1);
  }
  peek(count = 1) {
    let idx = this.index;
    let res = this.increment(count);
    this.index = idx;
    return res;
  }
  peekIndex(count = 1) {
    let idx = this.index;
    this.increment(count);
    let res = this.index;
    this.index = idx;
    return res;
  }
  increment(count = 1) {
    let dir = count < 0 ? -1 : 1;
    count = Math.abs(count);
    while (count--)
      this.move(dir);
    return this.glyphs[this.index];
  }
}
var $cffd0e0e7e88a6c6$var$DEFAULT_SCRIPTS = [
  "DFLT",
  "dflt",
  "latn"
];

class $cffd0e0e7e88a6c6$export$2e2bcd8739ae039 {
  constructor(font, table) {
    this.font = font;
    this.table = table;
    this.script = null;
    this.scriptTag = null;
    this.language = null;
    this.languageTag = null;
    this.features = {};
    this.lookups = {};
    this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1;
    this.selectScript();
    this.glyphs = [];
    this.positions = [];
    this.ligatureID = 1;
    this.currentFeature = null;
  }
  findScript(script) {
    if (this.table.scriptList == null)
      return null;
    if (!Array.isArray(script))
      script = [
        script
      ];
    for (let s3 of script)
      for (let entry of this.table.scriptList) {
        if (entry.tag === s3)
          return entry;
      }
    return null;
  }
  selectScript(script, language, direction) {
    let changed = false;
    let entry;
    if (!this.script || script !== this.scriptTag) {
      entry = this.findScript(script);
      if (!entry)
        entry = this.findScript($cffd0e0e7e88a6c6$var$DEFAULT_SCRIPTS);
      if (!entry)
        return this.scriptTag;
      this.scriptTag = entry.tag;
      this.script = entry.script;
      this.language = null;
      this.languageTag = null;
      changed = true;
    }
    if (!direction || direction !== this.direction)
      this.direction = direction || $a5878e4f4663c9e2$export$9fddb9d0dd7d8a54(script);
    if (language && language.length < 4)
      language += " ".repeat(4 - language.length);
    if (!language || language !== this.languageTag) {
      this.language = null;
      for (let lang of this.script.langSysRecords)
        if (lang.tag === language) {
          this.language = lang.langSys;
          this.languageTag = lang.tag;
          break;
        }
      if (!this.language) {
        this.language = this.script.defaultLangSys;
        this.languageTag = null;
      }
      changed = true;
    }
    if (changed) {
      this.features = {};
      if (this.language)
        for (let featureIndex of this.language.featureIndexes) {
          let record4 = this.table.featureList[featureIndex];
          let substituteFeature = this.substituteFeatureForVariations(featureIndex);
          this.features[record4.tag] = substituteFeature || record4.feature;
        }
    }
    return this.scriptTag;
  }
  lookupsForFeatures(userFeatures = [], exclude6) {
    let lookups = [];
    for (let tag of userFeatures) {
      let feature = this.features[tag];
      if (!feature)
        continue;
      for (let lookupIndex of feature.lookupListIndexes) {
        if (exclude6 && exclude6.indexOf(lookupIndex) !== -1)
          continue;
        lookups.push({
          feature: tag,
          index: lookupIndex,
          lookup: this.table.lookupList.get(lookupIndex)
        });
      }
    }
    lookups.sort((a, b) => a.index - b.index);
    return lookups;
  }
  substituteFeatureForVariations(featureIndex) {
    if (this.variationsIndex === -1)
      return null;
    let record4 = this.table.featureVariations.featureVariationRecords[this.variationsIndex];
    let substitutions = record4.featureTableSubstitution.substitutions;
    for (let substitution of substitutions) {
      if (substitution.featureIndex === featureIndex)
        return substitution.alternateFeatureTable;
    }
    return null;
  }
  findVariationsIndex(coords) {
    let variations = this.table.featureVariations;
    if (!variations)
      return -1;
    let records = variations.featureVariationRecords;
    for (let i3 = 0;i3 < records.length; i3++) {
      let conditions = records[i3].conditionSet.conditionTable;
      if (this.variationConditionsMatch(conditions, coords))
        return i3;
    }
    return -1;
  }
  variationConditionsMatch(conditions, coords) {
    return conditions.every((condition) => {
      let coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;
      return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;
    });
  }
  applyFeatures(userFeatures, glyphs, advances) {
    let lookups = this.lookupsForFeatures(userFeatures);
    this.applyLookups(lookups, glyphs, advances);
  }
  applyLookups(lookups, glyphs, positions) {
    this.glyphs = glyphs;
    this.positions = positions;
    this.glyphIterator = new $ab0ec2aaf85421fe$export$2e2bcd8739ae039(glyphs);
    for (let { feature, lookup } of lookups) {
      this.currentFeature = feature;
      this.glyphIterator.reset(lookup.flags);
      while (this.glyphIterator.index < glyphs.length) {
        if (!(feature in this.glyphIterator.cur.features)) {
          this.glyphIterator.next();
          continue;
        }
        for (let table of lookup.subTables) {
          let res = this.applyLookup(lookup.lookupType, table);
          if (res)
            break;
        }
        this.glyphIterator.next();
      }
    }
  }
  applyLookup(lookup, table) {
    throw new Error("applyLookup must be implemented by subclasses");
  }
  applyLookupList(lookupRecords) {
    let options = this.glyphIterator.options;
    let glyphIndex = this.glyphIterator.index;
    for (let lookupRecord of lookupRecords) {
      this.glyphIterator.reset(options, glyphIndex);
      this.glyphIterator.increment(lookupRecord.sequenceIndex);
      let lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);
      this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);
      for (let table of lookup.subTables) {
        if (this.applyLookup(lookup.lookupType, table))
          break;
      }
    }
    this.glyphIterator.reset(options, glyphIndex);
    return true;
  }
  coverageIndex(coverage, glyph) {
    if (glyph == null)
      glyph = this.glyphIterator.cur.id;
    switch (coverage.version) {
      case 1:
        return coverage.glyphs.indexOf(glyph);
      case 2:
        for (let range of coverage.rangeRecords) {
          if (range.start <= glyph && glyph <= range.end)
            return range.startCoverageIndex + glyph - range.start;
        }
        break;
    }
    return -1;
  }
  match(sequenceIndex, sequence, fn, matched) {
    let pos = this.glyphIterator.index;
    let glyph = this.glyphIterator.increment(sequenceIndex);
    let idx = 0;
    while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {
      if (matched)
        matched.push(this.glyphIterator.index);
      idx++;
      glyph = this.glyphIterator.next();
    }
    this.glyphIterator.index = pos;
    if (idx < sequence.length)
      return false;
    return matched || true;
  }
  sequenceMatches(sequenceIndex, sequence) {
    return this.match(sequenceIndex, sequence, (component, glyph) => component === glyph.id);
  }
  sequenceMatchIndices(sequenceIndex, sequence) {
    return this.match(sequenceIndex, sequence, (component, glyph) => {
      if (!(this.currentFeature in glyph.features))
        return false;
      return component === glyph.id;
    }, []);
  }
  coverageSequenceMatches(sequenceIndex, sequence) {
    return this.match(sequenceIndex, sequence, (coverage, glyph) => this.coverageIndex(coverage, glyph.id) >= 0);
  }
  getClassID(glyph, classDef) {
    switch (classDef.version) {
      case 1:
        let i3 = glyph - classDef.startGlyph;
        if (i3 >= 0 && i3 < classDef.classValueArray.length)
          return classDef.classValueArray[i3];
        break;
      case 2:
        for (let range of classDef.classRangeRecord) {
          if (range.start <= glyph && glyph <= range.end)
            return range.class;
        }
        break;
    }
    return 0;
  }
  classSequenceMatches(sequenceIndex, sequence, classDef) {
    return this.match(sequenceIndex, sequence, (classID, glyph) => classID === this.getClassID(glyph.id, classDef));
  }
  applyContext(table) {
    let index, set2;
    switch (table.version) {
      case 1:
        index = this.coverageIndex(table.coverage);
        if (index === -1)
          return false;
        set2 = table.ruleSets[index];
        for (let rule of set2) {
          if (this.sequenceMatches(1, rule.input))
            return this.applyLookupList(rule.lookupRecords);
        }
        break;
      case 2:
        if (this.coverageIndex(table.coverage) === -1)
          return false;
        index = this.getClassID(this.glyphIterator.cur.id, table.classDef);
        if (index === -1)
          return false;
        set2 = table.classSet[index];
        for (let rule1 of set2) {
          if (this.classSequenceMatches(1, rule1.classes, table.classDef))
            return this.applyLookupList(rule1.lookupRecords);
        }
        break;
      case 3:
        if (this.coverageSequenceMatches(0, table.coverages))
          return this.applyLookupList(table.lookupRecords);
        break;
    }
    return false;
  }
  applyChainingContext(table) {
    let index;
    switch (table.version) {
      case 1:
        index = this.coverageIndex(table.coverage);
        if (index === -1)
          return false;
        let set2 = table.chainRuleSets[index];
        for (let rule of set2) {
          if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead))
            return this.applyLookupList(rule.lookupRecords);
        }
        break;
      case 2:
        if (this.coverageIndex(table.coverage) === -1)
          return false;
        index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);
        let rules = table.chainClassSet[index];
        if (!rules)
          return false;
        for (let rule2 of rules) {
          if (this.classSequenceMatches(-rule2.backtrack.length, rule2.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, rule2.input, table.inputClassDef) && this.classSequenceMatches(1 + rule2.input.length, rule2.lookahead, table.lookaheadClassDef))
            return this.applyLookupList(rule2.lookupRecords);
        }
        break;
      case 3:
        if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage))
          return this.applyLookupList(table.lookupRecords);
        break;
    }
    return false;
  }
}

class $8cba766f534deddd$export$2e2bcd8739ae039 {
  constructor(font, id, codePoints = [], features) {
    this._font = font;
    this.codePoints = codePoints;
    this.id = id;
    this.features = {};
    if (Array.isArray(features))
      for (let i3 = 0;i3 < features.length; i3++) {
        let feature = features[i3];
        this.features[feature] = true;
      }
    else if (typeof features === "object")
      Object.assign(this.features, features);
    this.ligatureID = null;
    this.ligatureComponent = null;
    this.isLigated = false;
    this.cursiveAttachment = null;
    this.markAttachment = null;
    this.shaperInfo = null;
    this.substituted = false;
    this.isMultiplied = false;
  }
  get id() {
    return this._id;
  }
  set id(id) {
    this._id = id;
    this.substituted = true;
    let GDEF = this._font.GDEF;
    if (GDEF && GDEF.glyphClassDef) {
      let classID = $cffd0e0e7e88a6c6$export$2e2bcd8739ae039.prototype.getClassID(id, GDEF.glyphClassDef);
      this.isBase = classID === 1;
      this.isLigature = classID === 2;
      this.isMark = classID === 3;
      this.markAttachmentType = GDEF.markAttachClassDef ? $cffd0e0e7e88a6c6$export$2e2bcd8739ae039.prototype.getClassID(id, GDEF.markAttachClassDef) : 0;
    } else {
      this.isMark = this.codePoints.length > 0 && this.codePoints.every($747425b437e121da$export$2e2bcd8739ae039.isMark);
      this.isBase = !this.isMark;
      this.isLigature = this.codePoints.length > 1;
      this.markAttachmentType = 0;
    }
  }
  copy() {
    return new $8cba766f534deddd$export$2e2bcd8739ae039(this._font, this.id, this.codePoints, this.features);
  }
}

class $ce39c5154631fd0c$export$2e2bcd8739ae039 extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {
  static zeroMarkWidths = "NONE";
  static planFeatures(plan) {
    plan.add([
      "ljmo",
      "vjmo",
      "tjmo"
    ], false);
  }
  static assignFeatures(plan, glyphs) {
    let state = 0;
    let i3 = 0;
    while (i3 < glyphs.length) {
      let action;
      let glyph = glyphs[i3];
      let code = glyph.codePoints[0];
      let type47 = $ce39c5154631fd0c$var$getType(code);
      [action, state] = $ce39c5154631fd0c$var$STATE_TABLE[state][type47];
      switch (action) {
        case $ce39c5154631fd0c$var$DECOMPOSE:
          if (!plan.font.hasGlyphForCodePoint(code))
            i3 = $ce39c5154631fd0c$var$decompose(glyphs, i3, plan.font);
          break;
        case $ce39c5154631fd0c$var$COMPOSE:
          i3 = $ce39c5154631fd0c$var$compose(glyphs, i3, plan.font);
          break;
        case $ce39c5154631fd0c$var$TONE_MARK:
          $ce39c5154631fd0c$var$reorderToneMark(glyphs, i3, plan.font);
          break;
        case $ce39c5154631fd0c$var$INVALID:
          i3 = $ce39c5154631fd0c$var$insertDottedCircle(glyphs, i3, plan.font);
          break;
      }
      i3++;
    }
  }
}
var $ce39c5154631fd0c$var$HANGUL_BASE = 44032;
var $ce39c5154631fd0c$var$HANGUL_END = 55204;
var $ce39c5154631fd0c$var$HANGUL_COUNT = $ce39c5154631fd0c$var$HANGUL_END - $ce39c5154631fd0c$var$HANGUL_BASE + 1;
var $ce39c5154631fd0c$var$L_BASE = 4352;
var $ce39c5154631fd0c$var$V_BASE = 4449;
var $ce39c5154631fd0c$var$T_BASE = 4519;
var $ce39c5154631fd0c$var$L_COUNT = 19;
var $ce39c5154631fd0c$var$V_COUNT = 21;
var $ce39c5154631fd0c$var$T_COUNT = 28;
var $ce39c5154631fd0c$var$L_END = $ce39c5154631fd0c$var$L_BASE + $ce39c5154631fd0c$var$L_COUNT - 1;
var $ce39c5154631fd0c$var$V_END = $ce39c5154631fd0c$var$V_BASE + $ce39c5154631fd0c$var$V_COUNT - 1;
var $ce39c5154631fd0c$var$T_END = $ce39c5154631fd0c$var$T_BASE + $ce39c5154631fd0c$var$T_COUNT - 1;
var $ce39c5154631fd0c$var$DOTTED_CIRCLE = 9676;
var $ce39c5154631fd0c$var$isL = (code) => 4352 <= code && code <= 4447 || 43360 <= code && code <= 43388;
var $ce39c5154631fd0c$var$isV = (code) => 4448 <= code && code <= 4519 || 55216 <= code && code <= 55238;
var $ce39c5154631fd0c$var$isT = (code) => 4520 <= code && code <= 4607 || 55243 <= code && code <= 55291;
var $ce39c5154631fd0c$var$isTone = (code) => 12334 <= code && code <= 12335;
var $ce39c5154631fd0c$var$isLVT = (code) => $ce39c5154631fd0c$var$HANGUL_BASE <= code && code <= $ce39c5154631fd0c$var$HANGUL_END;
var $ce39c5154631fd0c$var$isLV = (code) => code - $ce39c5154631fd0c$var$HANGUL_BASE < $ce39c5154631fd0c$var$HANGUL_COUNT && (code - $ce39c5154631fd0c$var$HANGUL_BASE) % $ce39c5154631fd0c$var$T_COUNT === 0;
var $ce39c5154631fd0c$var$isCombiningL = (code) => $ce39c5154631fd0c$var$L_BASE <= code && code <= $ce39c5154631fd0c$var$L_END;
var $ce39c5154631fd0c$var$isCombiningV = (code) => $ce39c5154631fd0c$var$V_BASE <= code && code <= $ce39c5154631fd0c$var$V_END;
var $ce39c5154631fd0c$var$isCombiningT = (code) => $ce39c5154631fd0c$var$T_BASE + 1 && 1 <= code && code <= $ce39c5154631fd0c$var$T_END;
var $ce39c5154631fd0c$var$X = 0;
var $ce39c5154631fd0c$var$L = 1;
var $ce39c5154631fd0c$var$V = 2;
var $ce39c5154631fd0c$var$T = 3;
var $ce39c5154631fd0c$var$LV = 4;
var $ce39c5154631fd0c$var$LVT = 5;
var $ce39c5154631fd0c$var$M = 6;
var $ce39c5154631fd0c$var$NO_ACTION = 0;
var $ce39c5154631fd0c$var$DECOMPOSE = 1;
var $ce39c5154631fd0c$var$COMPOSE = 2;
var $ce39c5154631fd0c$var$TONE_MARK = 4;
var $ce39c5154631fd0c$var$INVALID = 5;
var $ce39c5154631fd0c$var$STATE_TABLE = [
  [
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      1
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$DECOMPOSE,
      2
    ],
    [
      $ce39c5154631fd0c$var$DECOMPOSE,
      3
    ],
    [
      $ce39c5154631fd0c$var$INVALID,
      0
    ]
  ],
  [
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      1
    ],
    [
      $ce39c5154631fd0c$var$COMPOSE,
      2
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$DECOMPOSE,
      2
    ],
    [
      $ce39c5154631fd0c$var$DECOMPOSE,
      3
    ],
    [
      $ce39c5154631fd0c$var$INVALID,
      0
    ]
  ],
  [
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      1
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$COMPOSE,
      3
    ],
    [
      $ce39c5154631fd0c$var$DECOMPOSE,
      2
    ],
    [
      $ce39c5154631fd0c$var$DECOMPOSE,
      3
    ],
    [
      $ce39c5154631fd0c$var$TONE_MARK,
      0
    ]
  ],
  [
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      1
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$NO_ACTION,
      0
    ],
    [
      $ce39c5154631fd0c$var$DECOMPOSE,
      2
    ],
    [
      $ce39c5154631fd0c$var$DECOMPOSE,
      3
    ],
    [
      $ce39c5154631fd0c$var$TONE_MARK,
      0
    ]
  ]
];
var $a550b6039b7700b3$exports = {};
$a550b6039b7700b3$exports = JSON.parse("{\"stateTable\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,14,15,16,17],[0,0,0,18,19,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,28,29,30,31,32,33,0,34,0,0,35,36,0,0,37,0],[0,0,0,38,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,39,0,0,0,40,41,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,12,43,0,0,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,0,43,0,0,0,0],[0,0,0,45,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,50,0,0,51,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0],[0,0,0,53,54,55,56,57,58,0,59,0,0,60,61,0,0,62,0],[0,0,0,4,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,63,64,0,0,40,41,0,9,0,10,0,0,0,42,0,63,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,0,2,16,0],[0,0,0,18,65,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,0,0],[0,0,0,69,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,73,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,75,0,0,0,76,77,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,25,79,0,0,0,0],[0,0,0,18,19,20,74,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,81,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,86,0,0,87,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0],[0,0,0,18,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,89,90,0,0,76,77,0,23,0,24,0,0,0,78,0,89,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,0,0],[0,0,0,94,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,96,0,0,0,97,98,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,35,100,0,0,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,102,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,107,0,0,108,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0],[0,0,0,28,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,110,111,0,0,97,98,0,33,0,34,0,0,0,99,0,110,0,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,0,0],[0,0,0,0,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,0,0,115,116,117,118,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,39,0,122,0,123,123,8,9,0,10,0,0,0,42,0,39,0,0],[0,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0],[0,39,0,0,0,121,125,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,126,126,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,47,47,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,128,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,129,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,50,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0],[0,0,0,135,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,136,0,0,0,137,138,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,60,140,0,0,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,0,140,0,0,0,0],[0,0,0,142,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,147,0,0,148,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0],[0,0,0,53,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,150,151,0,0,137,138,0,58,0,59,0,0,0,139,0,150,0,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,0,0],[0,0,0,155,116,156,157,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,75,3,4,5,159,160,8,161,0,162,0,11,12,163,0,75,16,0],[0,0,0,0,0,40,164,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,0,165,0,0,0,0],[0,124,64,0,0,40,164,0,9,0,10,0,0,0,42,0,124,0,0],[0,0,0,0,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,167,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0],[0,0,0,0,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,0,79,0,0,0,0],[0,0,0,169,170,171,172,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,75,0,176,0,177,177,22,23,0,24,0,0,0,78,0,75,0,0],[0,178,90,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0],[0,75,0,0,0,175,179,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,180,180,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,83,83,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,182,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,183,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,86,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0],[0,0,0,189,170,190,191,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,76,193,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,0,194,0,0,0,0],[0,178,90,0,0,76,193,0,23,0,24,0,0,0,78,0,178,0,0],[0,0,0,0,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,195,196,197,198,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,96,0,202,0,203,203,32,33,0,34,0,0,0,99,0,96,0,0],[0,204,111,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0],[0,96,0,0,0,201,205,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,206,206,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,104,104,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,208,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,209,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,107,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0],[0,0,0,215,196,216,217,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,97,219,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,0,220,0,0,0,0],[0,204,111,0,0,97,219,0,33,0,34,0,0,0,99,0,204,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,223,0,0,0,40,224,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,119,225,0,0,0,0],[0,0,0,115,116,117,222,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,115,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,226,64,0,0,40,224,0,9,0,10,0,0,0,42,0,226,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,39,0,0,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,44,44,8,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,227,0,228,229,0,9,0,10,0,0,230,0,0,0,0,0],[0,39,0,122,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,231,231,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,131,131,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,234,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,235,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,0,0,240,241,242,243,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,136,0,247,0,248,248,57,58,0,59,0,0,0,139,0,136,0,0],[0,249,151,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0],[0,136,0,0,0,246,250,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,251,251,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,144,144,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,253,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,254,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,147,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0],[0,0,0,260,241,261,262,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,137,264,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,0,265,0,0,0,0],[0,249,151,0,0,137,264,0,58,0,59,0,0,0,139,0,249,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,158,225,0,0,0,0],[0,0,0,155,116,156,222,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,155,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,43,266,266,8,161,0,24,0,0,12,267,0,0,0,0],[0,75,0,176,43,268,268,269,161,0,24,0,0,0,267,0,75,0,0],[0,0,0,0,0,270,0,0,271,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0],[0,273,274,0,0,40,41,0,9,0,10,0,0,0,42,0,273,0,0],[0,0,0,40,0,123,123,8,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,121,275,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,279,0,0,0,76,280,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,173,281,0,0,0,0],[0,0,0,169,170,171,278,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,169,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,282,90,0,0,76,280,0,23,0,24,0,0,0,78,0,282,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,75,0,0,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,80,80,22,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,283,0,284,285,0,23,0,24,0,0,286,0,0,0,0,0],[0,75,0,176,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,287,287,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,185,185,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,290,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,291,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,192,281,0,0,0,0],[0,0,0,189,170,190,278,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,189,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,76,0,177,177,22,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,175,296,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,299,0,0,0,97,300,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,199,301,0,0,0,0],[0,0,0,195,196,197,298,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,195,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,302,111,0,0,97,300,0,33,0,34,0,0,0,99,0,302,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,96,0,0,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,101,101,32,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,303,0,304,305,0,33,0,34,0,0,306,0,0,0,0,0],[0,96,0,202,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,307,307,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,211,211,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,310,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,311,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,218,301,0,0,0,0],[0,0,0,215,196,216,298,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,215,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,97,0,203,203,32,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,201,316,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,0,225,0,0,0,0],[0,0,0,317,318,319,320,8,9,0,10,0,0,321,322,0,0,16,0],[0,223,0,323,0,123,123,8,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,0,0,121,324,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,325,318,326,327,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,64,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,230,0,0,0,0,0],[0,0,0,227,0,228,121,0,9,0,10,0,0,230,0,0,0,0,0],[0,0,0,227,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0],[0,0,0,0,0,329,329,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,237,237,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,332,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,333,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,337,0,0,0,137,338,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,244,339,0,0,0,0],[0,0,0,240,241,242,336,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,240,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,340,151,0,0,137,338,0,58,0,59,0,0,0,139,0,340,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,136,0,0,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,141,141,57,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,341,0,342,343,0,58,0,59,0,0,344,0,0,0,0,0],[0,136,0,247,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,345,345,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,346,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,256,256,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,348,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,349,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,263,339,0,0,0,0],[0,0,0,260,241,261,336,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,260,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,137,0,248,248,57,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,246,354,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,126,126,8,23,0,0,0,0,0,0,0,0,0,0],[0,355,90,0,0,121,125,0,9,0,10,0,0,0,42,0,355,0,0],[0,0,0,0,0,356,356,269,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,357,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,270,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0],[0,0,0,364,116,365,366,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,40,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,0,281,0,0,0,0],[0,0,0,369,370,371,372,22,23,0,24,0,0,373,374,0,0,27,0],[0,279,0,375,0,177,177,22,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,0,0,175,376,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,377,370,378,379,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,90,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,286,0,0,0,0,0],[0,0,0,283,0,284,175,0,23,0,24,0,0,286,0,0,0,0,0],[0,0,0,283,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0],[0,0,0,0,0,381,381,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,293,293,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,384,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,385,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,76,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,0,301,0,0,0,0],[0,0,0,387,388,389,390,32,33,0,34,0,0,391,392,0,0,37,0],[0,299,0,393,0,203,203,32,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,0,0,201,394,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,395,388,396,397,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,111,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,306,0,0,0,0,0],[0,0,0,303,0,304,201,0,33,0,34,0,0,306,0,0,0,0,0],[0,0,0,303,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0],[0,0,0,0,0,399,399,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,313,313,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,402,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,403,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,97,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,407,0,0,0,40,408,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,321,409,0,0,0,0],[0,0,0,317,318,319,406,8,9,0,10,0,0,321,322,0,0,16,0],[0,0,0,317,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,410,64,0,0,40,408,0,9,0,10,0,0,0,42,0,410,0,0],[0,223,0,0,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,323,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,328,409,0,0,0,0],[0,0,0,325,318,326,406,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,325,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0],[0,0,0,0,0,411,411,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,413,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,0,339,0,0,0,0],[0,0,0,414,415,416,417,57,58,0,59,0,0,418,419,0,0,62,0],[0,337,0,420,0,248,248,57,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,0,0,246,421,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,422,415,423,424,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,151,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,344,0,0,0,0,0],[0,0,0,341,0,342,246,0,58,0,59,0,0,344,0,0,0,0,0],[0,0,0,341,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0],[0,0,0,0,0,426,426,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,351,351,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,429,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,430,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,137,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,432,116,433,434,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,0,0,180,180,269,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,359,359,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,437,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,438,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,443,274,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,367,225,0,0,0,0],[0,0,0,364,116,365,445,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,364,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,448,0,0,0,76,449,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,373,450,0,0,0,0],[0,0,0,369,370,371,447,22,23,0,24,0,0,373,374,0,0,27,0],[0,0,0,369,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,451,90,0,0,76,449,0,23,0,24,0,0,0,78,0,451,0,0],[0,279,0,0,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,375,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,380,450,0,0,0,0],[0,0,0,377,370,378,447,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,377,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0],[0,0,0,0,0,452,452,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,454,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,457,0,0,0,97,458,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,391,459,0,0,0,0],[0,0,0,387,388,389,456,32,33,0,34,0,0,391,392,0,0,37,0],[0,0,0,387,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,460,111,0,0,97,458,0,33,0,34,0,0,0,99,0,460,0,0],[0,299,0,0,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,393,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,398,459,0,0,0,0],[0,0,0,395,388,396,456,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,395,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0],[0,0,0,0,0,461,461,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,462,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,463,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,0,409,0,0,0,0],[0,0,0,464,465,466,467,8,9,0,10,0,0,468,469,0,0,16,0],[0,407,0,470,0,123,123,8,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,0,0,121,471,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,472,465,473,474,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0],[0,0,0,0,0,0,476,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,479,0,0,0,137,480,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,418,481,0,0,0,0],[0,0,0,414,415,416,478,57,58,0,59,0,0,418,419,0,0,62,0],[0,0,0,414,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,482,151,0,0,137,480,0,58,0,59,0,0,0,139,0,482,0,0],[0,337,0,0,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,420,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,425,481,0,0,0,0],[0,0,0,422,415,423,478,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,422,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0],[0,0,0,0,0,483,483,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,485,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,435,225,0,0,0,0],[0,0,0,432,116,433,445,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,432,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,486,486,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,440,440,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,489,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,490,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,495,0,496,497,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,0,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,0,225,0,0,0,0],[0,0,0,0,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,0,450,0,0,0,0],[0,0,0,499,500,501,502,22,23,0,24,0,0,503,504,0,0,27,0],[0,448,0,505,0,177,177,22,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,0,0,175,506,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,507,500,508,509,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0],[0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,0,459,0,0,0,0],[0,0,0,512,513,514,515,32,33,0,34,0,0,516,517,0,0,37,0],[0,457,0,518,0,203,203,32,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,0,0,201,519,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,520,513,521,522,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,0,0],[0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,527,0,0,0,40,528,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,468,529,0,0,0,0],[0,0,0,464,465,466,526,8,9,0,10,0,0,468,469,0,0,16,0],[0,0,0,464,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,530,64,0,0,40,528,0,9,0,10,0,0,0,42,0,530,0,0],[0,407,0,0,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,470,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,475,529,0,0,0,0],[0,0,0,472,465,473,526,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,472,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0],[0,0,0,0,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,0,481,0,0,0,0],[0,0,0,531,532,533,534,57,58,0,59,0,0,535,536,0,0,62,0],[0,479,0,537,0,248,248,57,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,0,0,246,538,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,539,532,540,541,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,0,0,0,0,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0],[0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0],[0,0,0,0,0,544,544,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,492,492,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,547,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,548,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,274,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,498,0,0,0,0,0],[0,0,0,495,0,496,368,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,495,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,553,0,0,0,76,554,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,503,555,0,0,0,0],[0,0,0,499,500,501,552,22,23,0,24,0,0,503,504,0,0,27,0],[0,0,0,499,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,556,90,0,0,76,554,0,23,0,24,0,0,0,78,0,556,0,0],[0,448,0,0,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,505,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,510,555,0,0,0,0],[0,0,0,507,500,508,552,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,507,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,559,0,0,0,97,560,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,516,561,0,0,0,0],[0,0,0,512,513,514,558,32,33,0,34,0,0,516,517,0,0,37,0],[0,0,0,512,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,562,111,0,0,97,560,0,33,0,34,0,0,0,99,0,562,0,0],[0,457,0,0,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,518,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,523,561,0,0,0,0],[0,0,0,520,513,521,558,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,520,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0],[0,0,0,0,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,0,529,0,0,0,0],[0,0,0,563,66,564,565,8,9,0,10,0,0,566,68,0,0,16,0],[0,527,0,567,0,123,123,8,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,0,0,121,568,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,569,66,570,571,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,575,0,0,0,137,576,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,535,577,0,0,0,0],[0,0,0,531,532,533,574,57,58,0,59,0,0,535,536,0,0,62,0],[0,0,0,531,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,578,151,0,0,137,576,0,58,0,59,0,0,0,139,0,578,0,0],[0,479,0,0,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,537,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,542,577,0,0,0,0],[0,0,0,539,532,540,574,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,539,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0],[0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0],[0,0,0,0,0,579,579,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,581,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,0,555,0,0,0,0],[0,0,0,582,91,583,584,22,23,0,24,0,0,585,93,0,0,27,0],[0,553,0,586,0,177,177,22,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,0,0,175,587,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,588,91,589,590,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,0,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,0,561,0,0,0,0],[0,0,0,592,112,593,594,32,33,0,34,0,0,595,114,0,0,37,0],[0,559,0,596,0,203,203,32,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,0,0,201,597,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,598,112,599,600,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,566,165,0,0,0,0],[0,0,0,563,66,564,67,8,9,0,10,0,0,566,68,0,0,16,0],[0,0,0,563,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,527,0,0,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,567,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,572,165,0,0,0,0],[0,0,0,569,66,570,67,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,569,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,0,577,0,0,0,0],[0,0,0,603,152,604,605,57,58,0,59,0,0,606,154,0,0,62,0],[0,575,0,607,0,248,248,57,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,0,0,246,608,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,609,152,610,611,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,0,0,0,0,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,0],[0,0,0,0,0,0,613,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,585,194,0,0,0,0],[0,0,0,582,91,583,92,22,23,0,24,0,0,585,93,0,0,27,0],[0,0,0,582,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,553,0,0,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,586,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,591,194,0,0,0,0],[0,0,0,588,91,589,92,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,588,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,595,220,0,0,0,0],[0,0,0,592,112,593,113,32,33,0,34,0,0,595,114,0,0,37,0],[0,0,0,592,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,559,0,0,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,596,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,601,220,0,0,0,0],[0,0,0,598,112,599,113,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,598,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,606,265,0,0,0,0],[0,0,0,603,152,604,153,57,58,0,59,0,0,606,154,0,0,62,0],[0,0,0,603,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,575,0,0,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,607,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,612,265,0,0,0,0],[0,0,0,609,152,610,153,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,609,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0]],\"accepting\":[false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,true,false,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,true,true,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,true,true,true],\"tags\":[[],[\"broken_cluster\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"symbol_cluster\"],[],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[],[\"broken_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[],[\"consonant_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[],[\"vowel_syllable\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[\"standalone_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"standalone_cluster\"]]}");
var $f3bd27a8c88f3f53$exports = {};
$f3bd27a8c88f3f53$exports = JSON.parse("{\"categories\":[\"O\",\"IND\",\"S\",\"GB\",\"B\",\"FM\",\"CGJ\",\"VMAbv\",\"VMPst\",\"VAbv\",\"VPst\",\"CMBlw\",\"VPre\",\"VBlw\",\"H\",\"VMBlw\",\"CMAbv\",\"MBlw\",\"CS\",\"R\",\"SUB\",\"MPst\",\"MPre\",\"FAbv\",\"FPst\",\"FBlw\",\"SMAbv\",\"SMBlw\",\"VMPre\",\"ZWNJ\",\"ZWJ\",\"WJ\",\"VS\",\"N\",\"HN\",\"MAbv\"],\"decompositions\":{\"2507\":[2503,2494],\"2508\":[2503,2519],\"2888\":[2887,2902],\"2891\":[2887,2878],\"2892\":[2887,2903],\"3018\":[3014,3006],\"3019\":[3015,3006],\"3020\":[3014,3031],\"3144\":[3142,3158],\"3264\":[3263,3285],\"3271\":[3270,3285],\"3272\":[3270,3286],\"3274\":[3270,3266],\"3275\":[3270,3266,3285],\"3402\":[3398,3390],\"3403\":[3399,3390],\"3404\":[3398,3415],\"3546\":[3545,3530],\"3548\":[3545,3535],\"3549\":[3545,3535,3530],\"3550\":[3545,3551],\"3635\":[3661,3634],\"3763\":[3789,3762],\"3955\":[3953,3954],\"3957\":[3953,3956],\"3958\":[4018,3968],\"3959\":[4018,3953,3968],\"3960\":[4019,3968],\"3961\":[4019,3953,3968],\"3969\":[3953,3968],\"6971\":[6970,6965],\"6973\":[6972,6965],\"6976\":[6974,6965],\"6977\":[6975,6965],\"6979\":[6978,6965],\"69934\":[69937,69927],\"69935\":[69938,69927],\"70475\":[70471,70462],\"70476\":[70471,70487],\"70843\":[70841,70842],\"70844\":[70841,70832],\"70846\":[70841,70845],\"71098\":[71096,71087],\"71099\":[71097,71087]},\"stateTable\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,17,18,11,19,20,21,22,0,0,23,0,0,2,0,24,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,27,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,39,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,49,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,53,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0]],\"accepting\":[false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\"tags\":[[],[\"broken_cluster\"],[\"independent_cluster\"],[\"symbol_cluster\"],[\"standard_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"numeral_cluster\"],[\"broken_cluster\"],[\"independent_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"virama_terminated_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"numeral_cluster\"],[\"number_joiner_terminated_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"numeral_cluster\"]]}");
var $b9778c6b60232cf0$export$a513ea61a7bee91c = {
  X: 1,
  C: 2,
  V: 4,
  N: 8,
  H: 16,
  ZWNJ: 32,
  ZWJ: 64,
  M: 128,
  SM: 256,
  VD: 512,
  A: 1024,
  Placeholder: 2048,
  Dotted_Circle: 4096,
  RS: 8192,
  Coeng: 16384,
  Repha: 32768,
  Ra: 65536,
  CM: 131072,
  Symbol: 262144
};
var $b9778c6b60232cf0$export$1a1f61c9c4dd9df0 = {
  Start: 1,
  Ra_To_Become_Reph: 2,
  Pre_M: 4,
  Pre_C: 8,
  Base_C: 16,
  After_Main: 32,
  Above_C: 64,
  Before_Sub: 128,
  Below_C: 256,
  After_Sub: 512,
  Before_Post: 1024,
  Post_C: 2048,
  After_Post: 4096,
  Final_C: 8192,
  SMVD: 16384,
  End: 32768
};
var $b9778c6b60232cf0$export$8519deaa7de2b07 = $b9778c6b60232cf0$export$a513ea61a7bee91c.C | $b9778c6b60232cf0$export$a513ea61a7bee91c.Ra | $b9778c6b60232cf0$export$a513ea61a7bee91c.CM | $b9778c6b60232cf0$export$a513ea61a7bee91c.V | $b9778c6b60232cf0$export$a513ea61a7bee91c.Placeholder | $b9778c6b60232cf0$export$a513ea61a7bee91c.Dotted_Circle;
var $b9778c6b60232cf0$export$bbcd928767338e0d = $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ | $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWNJ;
var $b9778c6b60232cf0$export$ca9599b2a300afc = $b9778c6b60232cf0$export$a513ea61a7bee91c.H | $b9778c6b60232cf0$export$a513ea61a7bee91c.Coeng;
var $b9778c6b60232cf0$export$e99d119da76a0fc5 = {
  Default: {
    hasOldSpec: false,
    virama: 0,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Post,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Devanagari: {
    hasOldSpec: true,
    virama: 2381,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Post,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Bengali: {
    hasOldSpec: true,
    virama: 2509,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Sub,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Gurmukhi: {
    hasOldSpec: true,
    virama: 2637,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Sub,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Gujarati: {
    hasOldSpec: true,
    virama: 2765,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Post,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Oriya: {
    hasOldSpec: true,
    virama: 2893,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Tamil: {
    hasOldSpec: true,
    virama: 3021,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Telugu: {
    hasOldSpec: true,
    virama: 3149,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post,
    rephMode: "Explicit",
    blwfMode: "Post_Only"
  },
  Kannada: {
    hasOldSpec: true,
    virama: 3277,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post,
    rephMode: "Implicit",
    blwfMode: "Post_Only"
  },
  Malayalam: {
    hasOldSpec: true,
    virama: 3405,
    basePos: "Last",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main,
    rephMode: "Log_Repha",
    blwfMode: "Pre_And_Post"
  },
  Khmer: {
    hasOldSpec: false,
    virama: 6098,
    basePos: "First",
    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph,
    rephMode: "Vis_Repha",
    blwfMode: "Pre_And_Post"
  }
};
var $b9778c6b60232cf0$export$f647c9cfdd77d95a = {
  6078: [
    6081,
    6078
  ],
  6079: [
    6081,
    6079
  ],
  6080: [
    6081,
    6080
  ],
  6084: [
    6081,
    6084
  ],
  6085: [
    6081,
    6085
  ]
};
var $c6b883ac45fa55f1$require$Buffer = $5OpyM$Buffer;
var { decompositions: $c6b883ac45fa55f1$var$decompositions } = /* @__PURE__ */ $parcel$interopDefault2($f3bd27a8c88f3f53$exports);
var $c6b883ac45fa55f1$var$trie = new import_unicode_trie2.default($c6b883ac45fa55f1$require$Buffer.from("AAARAAAAAACgwgAAAbENTvLtnX+sHUUVx/f13nd/vHf7bl+FRGL7R0OJMcWYphBrimkVCSJR2xiEaLEGQ7AkBGowbYRSgj8K2B/GkpRYE6wlQSyJKCagrSlGkmqsqUZMY7S2CWkgqQViQSkt4Hfuzrx77tyZ2fm1u+/RPcknuzs7O3PmnDOzs7N73zteS5KXwKvgDTCnniTvBfPBJeAVpP2vFr69GGUtAkvAModyr0DeT4BrwCpwPVgDbga3ga+DjYbyluLcCvBN8F2wGWwHO8Ej4DjyPIbtz0DCeZpvD4CD4E/gb+AoOAFOgtPgLKiNJkkbTIKLwALwfvAh8GGwHFwFPg2uAzeCm8Ft4E5wN7gPPAi+D34AfgR+Ap7kx8+AZ8HvwZ/BEXAMvAheAa+Bc6OpzvVGknTABY30eB62C8GlYDFYCpaDq/n5z2J7PVgDbgG3N1KbrOdbWzby/N/G9i6wlR8/wLebUNcOll7vX7PLsQ4bdpAy92B/L3gK7AO/A38EfwX/AC+AkyT/m3x7mqdtYz7Gfq2ZJOPgPc3UXu/D9uJmmmcRT1uC7TJwZTONJxFL1+J4JbgBrAG3gNv5Nev5dhO2m3l54rqtON7RNLd1V8Z5auMfI+8Wbvv12P4Ux78AvyZl/Bb7fwD34HwH/EVR/t8t6rRlrYgFlHnMsdyXIupRFP+Gzv8Bb4CklSSjrTR9bz21uZx/Nj8v+uIFOJ4HFnJo3kWtNG6WkPSzBl1YbC8jeVfx+q+R9Pg48lxN8jFdhd8+01LrLTCdq6io8GNb1a8qKioqKioqKioc2cbXGcrWQ2Ynf9a9rmV/zVua9Dc16V/gz8pfxvar4A6wAdwL7gdbwUPgh+BR8AR4qpWuLe3D9gA4CA6DI+AoOAFOtdL1nNexfYs937fxDA8ubKf1zmv3dViI/Uvb9m2sqKioqAiHrVtehrH3TK2/3l4WZduioqIiDq+Rd1Jbef9ehnHmSnCtNNf7nOPcr8PHilO8jrfBF9v996lfwf6tUpl3tPvvdSjsvcwGnLt3Gsw/kzkpK8CdYH83my3Id0iT91WkL5xMktXgIfD85OD54zjfmYu5OFgN7h1LkmdBMg5fgbvAChzv49ujfEuZ3xlOk7kReTaSfL/B/jl+fMXsJLkb7AcPj8TlHC/zsgnYcyLd3zSh1vGAJr2ioqKiIn/eKXkMjn3/cWF5t/z6y37+K5urwP2YB36vPfw8yr7zeRjpu8g8cTf2H2+n89EtivLE93fs27Ez/Br2vM2+qWPl/ZyX9StFfQxW5v724PPxzXz7XHu4Pps5Jvtmiq13szmzfP0hlHkYHGn358bHeD0vYvsy+K+kz9vt/jy8gT40G1w4Rua0PN98nnaGf/e1G+mXIO2DY8P6Xz7WPz7Ky/7omJ0PBff4+B91fAqsAp8HXwI3gR04txbbdWDDWDpP/g7Yxs6BXWAP2AueJHo+M5bOpw+Cw+AIOApOgFMW7Xkdec6AkXH1+QfgyzbOTY73jy/C/gJ+/CCOP4D9xfz4I9h+TFMWtf9SRWzZwq7f0yi/L9voWSRbDfV/clx/3TuKfjoT26/iX813URx4tiVG3ay/sfFuJenb7J50A4mr1di/CZzLKZ6y2reunup4qzT+fM0wHp0PUD9+A7bYNJ5fn3eNP/Ft5bc0+S4n9/l1Gj+K82zesd1wfj3fZ79h2YyyVvLj7djfCR4xjJEyuy1+S/FyDt/MPwodn5hB8axrxy9nSBtYjOyHrs+BQ+B58E+u+wsWbWBtpb/hYL8RuA/pJ8fT2GffX+wl+daSa08jz9nxNG2k4963XBG/ZVhpUS573mh3BtPo7x/Eb7pE2yd5XvZssY/M/RZLc9SLeDsfD5gfTidi9//pwrzWu7t9lKcN7dxynthAh8vcKrQu1frHTGKBNF662KfoOXU1FsaFxe6x2kjClkBnGvXxwX0bytZ5unK+S9n2jxabTc5M0HUaIyTrfFa+Ljmflc9Xz7JtNdPa4eKz6WAPlb5l6xfLBzopWxcfncvSf7rHRJk2KSN2bKRsvcu2UZmxVIb9qd551e8rZcTERGuQ+qwIjERkjl2+djOlhWfpibnp/qxmP92FVr1/bc9GYxxuI5o3UzdukzYpj+H6nOxra9nHiaksjhDdsasPe9ca/CvOU1GVwUT4t8P921H4T8gsnkdIh+dn/pXrU0mnOZw21CbJv1P5LP0r4jtkbLH171BbCvavnFfeZ8L8K2wv/CuQRU6n/qWSNSbr2mO8xtK/U+Mq6Y/1yQyFJHHtv8Kn2uOC/Gvbf2VEPxJ9SvhY5d+Q+y21iRxLruOzsY6MWGrOkPHZ1b+jFuPzqEX/VcmoZkyIPT53k36/DZnrMd+K/Dbjs6kv6+6VYl9OU+WT07TplvMvWWhfVo3f4t48S+rbjIZl/1b5Xyd5vJdQiTyf7tUdMlbn0J9d/cn6c7M5DO1TNF0+bmT0Z3qdKaaoXeg1Lv7NEhufzyT/6vIKEeO1jX/psdi38a889qpkStcI/u12U3zE1Re+/Yv6QNwvdTDJGi9t2ps1XtKYDJ0PmcZKcU812sRxvms7J47mZ5c+SWJD5LPRg4qqj+nWL8Q5sRVrGar1EG0sOI6ndH3DVWL7wpeuwaY6O1Nh19N+Oqs5uI7Eto3aICxNrCn5rAuZ7Cn2bdJtfZPlL/k8Ld+ki6v9E56XPUvT52mV/YVvmMj2Zz8TEuNMTxfHuFfFUJ60OLrz1utODnFG47fLbSjXy0xSy4gN63EywlhMxWcNmK71svszi5OGTvdJe3rtd8ifB6I/mKBr1ap7uU/sqqTsMb+H5fxBFyuq+yqLnd7cmj33TwyOVVOwuj3nVXRtQtUGWR9jzI6kecZrKSKPuFakU2hZmXXZMDlsS1W9jBavv6eHpf3EtfJ7mKwYV0lX2g9FVY5N+Ung9aH1590+n3KLgEredfiez6u9svisY/Suk9Jsnkli1a+C1m/T7rzqd5UY9mfiXX9R92ibdZUIawTC96b1GBn6rDG1JsPv/b392SkiXVUGmyN0LO5LYi46Zf/Adc/QMaCo8TtG/bH1Z/TsW1QfUPRjm2cZee5PRaT33lEbnhlMax4qe1o/Y8a0icdaoOv9bsh+Hj6jonueoGtHumcMlX9lxLxXq7/D84fSzznGt6rtUerXxYU47/IcPeG3vqBbJ1StETZqg9fS2Akd/0Ovp+/CxD3P+/6bQwzJtsvyh5w+XjeXH9KfXGH3/VbSX4tS4XoftPZbnvcyxX1G5QvW1wbWTkbs7c3mTco6NWODbdxk3R9lGZo/aGxhiknTmETXLVs1c90u9+mBGCf6hs6fsmTq29sxPv8d82CuhCpNjGNjg31blGHrz1i41hd6nuYzbU3XhLQzj7Jt67Otw0uXUdDoH8e4F/joMdVui2dMJc3E+Tetvr6jEtPnPhJaVwz9Y7TDVlx1qnfitlEbtzlTVD0qX/pcm1esxI65PO3mU4eNrr5SZMz46FDE+aIlb5tntb1o/WOUETsW847pvNpaZH225eUpNnrS9yDy9wTysyr9XVOe63+qd3M6e4X6Ptd1Dpc1SdV53ZqFag1hpP+bE5f4ivY74BzXilzWWW1+S0TjJng91Gd9wmbNgpMVz6W8d7GJZwWtWp8p++c8fpjW0Vzff3dJfzGuoersEtnmpjVLupY48H6o7n8/C+kvJn+Lcd6q3QHx3usvZax3W8apvP6rev+UJSHfiCYe/h2aTwTaRi5DO28ZSd9zNhTfJ8b2je7drOo9HtNNbPMW03zOpq2qNqnKFN+0huhlMye2Pe9TdzfCedfxMlRfG7xjncaJ7fiXMYZk3X+ZvuKbXCGh8y8XH8TybajPTfq4tjG2/qb0RJO3SB19ba2SMuoNbW8R/g653qa9sdsRYsssu+ZxPss+tnayFd94yjofEi+hZdvo73q9jd3yisUYbfEpQ9XmMqUIm2fFZh4xkZeE1BNDL5v+ZcqXh/90bSwjflz8U0QcFWHzPOpy0amM+stqf1ad7LltVPqWmG3p3+GiIvLJf8duYA3NcBwbWRpkDXmo7RP+z5E6+8Xswz512dbrW2aMNrpKaBt9y45VR2j9efhAQL/PF38Xadq907NYC5dpZLy3kMX6PUHgeGGS3nfoPn9rObJ9s/4uMntnSt/J5TX+2ZRhtFcB8ZgVmyZbit8GCd/7/C7EOcYK7LdyjNhIlL81nqN/Xf9mOHt/anovP4X0tyem/OUZF9TmscY2nzEulq96ZeVwv2Bxxnwk3s9njT8m/YWOKl199fe53tTXyu5DLojfKWXej6R3RAPtDf1ex/PvtdJ8Q7aP7Ht6XpdXSJf8/wMdQuS/j0/HtKny9KbT+oT2K2ETuW7Tt09Uss5nCdWhjPuMTXzrztO4FHMy+V6TJaH9I6+2C5HPq9oc8xlKRva5rF8M/7tC26/6BsNFivQ//e1pVsyP19VrNrH1D5Wi7oUDdVp8Q5HVr1ztlzXPtH2Gc30+lMX3edH3ecm3fp0+Ps/IPvWH6OpiV7meEMlbzyIkpi1jtDU0Pmm6nMd0jU8bXK7N0jWkb/joHyNebfWgtrJpc0h7QiQP24aKqcwYPnTRIUmG63fRQ5VXLsekgy5NtVXVadLfpjzV9S6xYnuNri159ZmsmLCpJ8/6XSRGOaH659H+GLYtwhd51xvq31B9Qm0UavM84qhoKaNOnfwf", "base64"));
var $c6b883ac45fa55f1$var$stateMachine = new import_dfa.default(/* @__PURE__ */ $parcel$interopDefault2($a550b6039b7700b3$exports));

class $c6b883ac45fa55f1$export$2e2bcd8739ae039 extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {
  static zeroMarkWidths = "NONE";
  static planFeatures(plan) {
    plan.addStage($c6b883ac45fa55f1$var$setupSyllables);
    plan.addStage([
      "locl",
      "ccmp"
    ]);
    plan.addStage($c6b883ac45fa55f1$var$initialReordering);
    plan.addStage("nukt");
    plan.addStage("akhn");
    plan.addStage("rphf", false);
    plan.addStage("rkrf");
    plan.addStage("pref", false);
    plan.addStage("blwf", false);
    plan.addStage("abvf", false);
    plan.addStage("half", false);
    plan.addStage("pstf", false);
    plan.addStage("vatu");
    plan.addStage("cjct");
    plan.addStage("cfar", false);
    plan.addStage($c6b883ac45fa55f1$var$finalReordering);
    plan.addStage({
      local: [
        "init"
      ],
      global: [
        "pres",
        "abvs",
        "blws",
        "psts",
        "haln",
        "dist",
        "abvm",
        "blwm",
        "calt",
        "clig"
      ]
    });
    plan.unicodeScript = $a5878e4f4663c9e2$export$ce50e82f12a827a4(plan.script);
    plan.indicConfig = $b9778c6b60232cf0$export$e99d119da76a0fc5[plan.unicodeScript] || $b9778c6b60232cf0$export$e99d119da76a0fc5.Default;
    plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== "2";
  }
  static assignFeatures(plan, glyphs) {
    for (let i3 = glyphs.length - 1;i3 >= 0; i3--) {
      let codepoint = glyphs[i3].codePoints[0];
      let d3 = $b9778c6b60232cf0$export$f647c9cfdd77d95a[codepoint] || $c6b883ac45fa55f1$var$decompositions[codepoint];
      if (d3) {
        let decomposed = d3.map((c3) => {
          let g = plan.font.glyphForCodePoint(c3);
          return new $8cba766f534deddd$export$2e2bcd8739ae039(plan.font, g.id, [
            c3
          ], glyphs[i3].features);
        });
        glyphs.splice(i3, 1, ...decomposed);
      }
    }
  }
}

class $c6b883ac45fa55f1$var$IndicInfo {
  constructor(category, position, syllableType, syllable) {
    this.category = category;
    this.position = position;
    this.syllableType = syllableType;
    this.syllable = syllable;
  }
}
var $7eb6a55cb7a2526f$require$Buffer = $5OpyM$Buffer;
var { categories: $7eb6a55cb7a2526f$var$categories, decompositions: $7eb6a55cb7a2526f$var$decompositions } = /* @__PURE__ */ $parcel$interopDefault2($f3bd27a8c88f3f53$exports);
var $7eb6a55cb7a2526f$var$trie = new import_unicode_trie2.default($7eb6a55cb7a2526f$require$Buffer.from("AAACAAAAAADQqQAAAVEMrvPtnH+oHUcVx+fd99799W5e8mx+9NkYm7YUI2KtimkVDG3FWgVTFY1Fqa2VJirYB0IaUFLBaKGJViXir6oxKCSBoi0UTKtg2yA26h+milYNtMH+0WK1VQyvtBS/487hnncyMzuzu7N7n7kHPszu7OzMmTNzdmdmfzzfUmpiUqkemAMbwSZwKbjcxM1XEL4VvB28G3zAk+56cLMlfgdYADvBbvBF8GWwH9xl+CFLfwj8BPwU/MKS38/AMfA86v9ro9ucQcdR+CjCP4CT4EnwDPg3eAFMTik1A+bAPNgINoFLwGawZSpLfzXCrWAb+AjYDm4BO8FusAfsA/vBXeAgOALuNfv3g4fAcXACPAaeAE+B58Bp8NJUpnN7WqlZsHY629+A8GLwWvAG8BZwJXinOf5ehB8EN4AdYGE6q7dmF9uugs8hvz0V58nZK/L+Kva/BX4ADoN7prP6HgUPgkfA73L0eQzHnwBPgX+Y80+DF8FUW6lBO4tbjXA9uAi8pj3sS2/E9mawBVwNtoJt5pzrTXgzwk+B7awP7sT+7nY6WxFfQBlfAl8H3wU/Anezcu/D9s/BMRN3HOEJ8EdwMkC/J5HmmXZmq2fBIjgEVEepbieLX4Fw0MnSrzRxmrVsm7MB8ReDV4vjr3ekJy7rZGVPMb196Xm6oug83oRyt4CrwDVgK9gGPtzxn3uTOD6YPDPNJ5Hm0+AznazffJ7Z4KSnXncg3VfAN8EBhx42/z/UGdbrx52sr9yH8AFTrt5+2GzfnWPbKuw7ZszZyNh/xowZM2bMmDFjxsQyZ5lPNs3h9nBNYHuAfr9ic9ffiHnsJzznU91/j3P+2snWYf6G8O/gn+A0eMnEt7vQp5ulX4NwHmwEm7rZ8UsRXg6uMPvXIHwPuK7rLl+nu9FzfMyYMWPGpGVuslmarv+YMWPSkNq/d2D8uNDNngvdivA2y3jy9m72bF9v3ymOf2MExp8fG2TsAcfA2wJYBJetWBq3i+0fwPafwLmzSl0LFmZNPMLHZ4fpnsX2AdjgcXB+T6kPge+AG7D/vXYW/tLsc9r9M+MkVyLNR1m6g9g+ZfYvmMExcHCm+ftP0+T5y/e17Uw/PYLwHnC0m80TH+zG30/3mjSDnPS2/B4pUJ4rX3n+b5H3o92l6UjfvZ7y/oJzToGnu8O66XTPYf8/Jr8XWL6TPXf9bPnHtmVs+89AnxVgDVgPLgKvAg+Y/F6H7c1gC7jKHH8XeJ/x15vAjt4wvwVs7wKfBXvAPvA18G1wsJevj36f5gjS3etIq+ft9+PYQ73h/nFsn2D7f+5l75bo/VPYftpTblFb2/Jo2pdjfL0uXOX/qxfnp8vZVk2Xv9hbmu+LxvYt3A/7/WZsPoptPkr9bdCv1ya+d4TuMO8Tre5n4XkILwSbzP4l/WHazX1//r2O/z7cFHnvSYW8R/Vm02ZXIHxHze1Xdf9bbn7p0z2kDroNr2X9WL+7937sX9fP+v9h9n6jTrfI3jG9EfsfN3G35PR/G4uRfY3eMTwdkFa/C3hrf2kcfy/xYTOmprrfZsLbEe7rDPW/U9Rrv9k/ahmTL0cWWxP/YxRkgtES+zwNhZPs+FQgMj/liEsto2HxsZBQX2pZoLZqWc5riXDaQBLSt1L3hcnE+Vct7aYVKCEhbXk2+b7NZ84mmXAwCiL14Ne85S62MYPcXi5StM/YxlJF2lfabznZsC6/C807xvZV+yFve9d1KY//d3HNO8pKUXuTDh0Gpp7B852q6QFMgdWM2dfbAxOuEPQEfcEsO5fquJLZrMfyCtWP0heZF6oSdiH9u4aQvJRIJ/eL6BBynItLp5D2JRkY5L5u3xAf6lviXHWSZcfaKO/+5zvO/c9Xtq8uRXSObd+8bS0zJrS1rxTyX7k/a0nrk5D+mHeOC90uq1Q216X57lykfqHt62uTGJ2rat+i/kttyq/RSi29PlclZf2Xxq55ZeSV34T96d5X5PqZJ9I3ZX2lnkXt3xL1Kyrav/LutbZ6uGxuS6ss6V3pXOXY4kP7EBfyJT7+4TJQS9uf74f6n+3+6ZIi9bCtieatFfCxUMx4KMYfy/pzrB30vm88q9SZ11K+n9eeNN612UFKWX8uI9TmRca7TbWvKy2JvF6naF+b/0uRupZp35cZikhZvyniY2R/CbdB3vXynIC6hbRBHf4l1xps6w4x/lVEtxRtGZMuRA8uNh/jfYV8kdpsBUszcODrD7E2JT2KrB3V6XMhbdNjcXItxzaOJWkpf976/I5glQn1sbLP86U9FQvz4l0S28/lcWUJbbrE2l+Z/TlHvi4/kvZXLMyrmy1PW7x8hl6UFgvlmNM1Jq3aJ3Se0yJcpdwS6mOp/ZgLX5N1rdFKaIzH9ztquMbqq+/qCFRk+hRoyZvrTHuO8fNd/djmEzZJ3TdisN1bNQNl7y96DV/3mVkTtwasVdk1ai6ybGlDek8nT1fXc4M5tVSPvhqOsWQeXQs8L1n3IradU8OxCeVjK7dr7Dpl0cMHnUvt18TzfVsfb/pZY56fV2GnVPVIYaOi9xcZJ8cmKcu3wcuPsVHV5cdKFfZXNZefp5sWft+wzR1cczKCxh99NRx76HvwOpWNv6YZtAajt6WPyPswtVVs/VOJ7xpYx3VR31er7gMxNuV9Q443CDlW43KuYSXblsybfKYt58trfez7A1X7Tdm+V7TcoudL+LpVGf2khN63U5OyD5Af0NoUv06l7Jc0Rte+so4xL9Ayy3Rz+SufY5Jf267xcm7J4dd3kumIOrmk7Pl549bUY1puI91Gdb8Tpu+9tjmhXFdwtfVsTv5SQvXKW0cK4eXgPBO6iJ07NNVOHH7/tF1jyJdnWbrU/Uau3VNI156QZ2ZaZFu76i6vQXy9YJ2H9QZ97aF3p1xlx1yfuYRcd0Kl7NyaX190+pUOKI0tvus5j7/nSWKLo3FER8R3LHEx8gqwge1POgi1l1yfirV3zHpISHxs3vLeFXOellcG1DFGbGP00PPkeKEOaXIsqhzbruOh9Qk5L08nW2grJ0avsvWocv0zRh/fGCG0TV35hB4v0rds5Vddjm/sFCKx+aXSt2yalPZsolxXW46CDnXp0YQ0rdso9OUYPSYT6+yzuxxzlrVfFfavQ/LKqsP+dbVzE/0qRb8pKin6V9U6Fnn24pqHufLMWy90nV+0DkXmcrb0Uq+6pU7/qcs/67SHTeTaaBk9ipyXQvLqW1U7uPKpux/ESlP9umydR8H3UjzHoXxj0/J1Yr5ubHsPrWOJqxK+hk5r+EVtH3pe1XWIXa+1vQ9YJ/oZre1bGReh3xKWeX7BxfYstwh5errGJi59be8482cSsfUPQT4Xlc9K+XMmatcY0fo2+SxYQs/4XO8M03Ng/TxujYH+FRELSdH+6mtveu8itb1Cy7C9X8GfsVOcfN86RHg56wJ0ob5qOz/E/rIdq7YhF34/0cfoeWKVftJjIbWDbDfXeXR/prBOKWJ/3dd43+sr+32TvgEIEZ6/7Zt5/l7ghMm77u+ey4gcz5xfktA5vE9C5vy2Y3lpXeX40tHcLMX42qZHS/ltZluXiSlDxillt3VdIvufbc0j75wy5aWaOxWRUZmfl5nDSh3LzoWbXJOg8uumKkndp1PnH2IPfe+U33z7vjWhdPQuWMh4raqxWMh9X89RZtSZ7/JpyXs3NWQcETN3CZHU/lmVnstZB1+ZfM5A/1VJ2V9t8wTXN1S+f27mzaulbCxJHePwC1Tz/0K1/VdPvtOsba+vL7ZxM1/jakJ/V9/yfdtNx+i7bhVRRll/rrK+sk3qLt/3T0afH+tzz1HDfxzZ/HlGDduK1y/GL21zvKptQGWFSpVlFm0z+ZxD/vdAt9EqQ971NkRHW7qytog53+cfVfeFGLStfddfYka5x6dl+yi//4z6/559aUn4/+/k2pv8BqfM/0qVCnu+If2OJPRZUcyzJF/5RQm5xtM9ln+LRN+8U9+iMQS1Veg9q2z/TlV3Ett3/rLOIXOookidy/5X3GYD+S8a1z2e0vH695T9vhEqdbY//0dU3jWZ2rYq/cvCRT8r08/NLlT5/zySdSurv1ybLiup5tAp5+NNzfPJ5r61warapajItfTQNeK610/rWEMPyb+uOo/ierRNbGU01Z+rqneIPWNsT9t1rD+OYr8rm0eKvp/Ch1P4Yepyy+hWVD/f+VWXX5X+TZdfZZ+KLb9J+S8=", "base64"));
var $7eb6a55cb7a2526f$var$stateMachine = new import_dfa.default(/* @__PURE__ */ $parcel$interopDefault2($f3bd27a8c88f3f53$exports));

class $7eb6a55cb7a2526f$export$2e2bcd8739ae039 extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {
  static zeroMarkWidths = "BEFORE_GPOS";
  static planFeatures(plan) {
    plan.addStage($7eb6a55cb7a2526f$var$setupSyllables);
    plan.addStage([
      "locl",
      "ccmp",
      "nukt",
      "akhn"
    ]);
    plan.addStage($7eb6a55cb7a2526f$var$clearSubstitutionFlags);
    plan.addStage([
      "rphf"
    ], false);
    plan.addStage($7eb6a55cb7a2526f$var$recordRphf);
    plan.addStage($7eb6a55cb7a2526f$var$clearSubstitutionFlags);
    plan.addStage([
      "pref"
    ]);
    plan.addStage($7eb6a55cb7a2526f$var$recordPref);
    plan.addStage([
      "rkrf",
      "abvf",
      "blwf",
      "half",
      "pstf",
      "vatu",
      "cjct"
    ]);
    plan.addStage($7eb6a55cb7a2526f$var$reorder);
    plan.addStage([
      "abvs",
      "blws",
      "pres",
      "psts",
      "dist",
      "abvm",
      "blwm"
    ]);
  }
  static assignFeatures(plan, glyphs) {
    for (let i3 = glyphs.length - 1;i3 >= 0; i3--) {
      let codepoint = glyphs[i3].codePoints[0];
      if ($7eb6a55cb7a2526f$var$decompositions[codepoint]) {
        let decomposed = $7eb6a55cb7a2526f$var$decompositions[codepoint].map((c3) => {
          let g = plan.font.glyphForCodePoint(c3);
          return new $8cba766f534deddd$export$2e2bcd8739ae039(plan.font, g.id, [
            c3
          ], glyphs[i3].features);
        });
        glyphs.splice(i3, 1, ...decomposed);
      }
    }
  }
}

class $7eb6a55cb7a2526f$var$USEInfo {
  constructor(category, syllableType, syllable) {
    this.category = category;
    this.syllableType = syllableType;
    this.syllable = syllable;
  }
}
var $a1d926e2c804f4db$var$SHAPERS = {
  arab: $5cab828b3273a17c$export$2e2bcd8739ae039,
  mong: $5cab828b3273a17c$export$2e2bcd8739ae039,
  syrc: $5cab828b3273a17c$export$2e2bcd8739ae039,
  "nko ": $5cab828b3273a17c$export$2e2bcd8739ae039,
  phag: $5cab828b3273a17c$export$2e2bcd8739ae039,
  mand: $5cab828b3273a17c$export$2e2bcd8739ae039,
  mani: $5cab828b3273a17c$export$2e2bcd8739ae039,
  phlp: $5cab828b3273a17c$export$2e2bcd8739ae039,
  hang: $ce39c5154631fd0c$export$2e2bcd8739ae039,
  bng2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  beng: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  dev2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  deva: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  gjr2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  gujr: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  guru: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  gur2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  knda: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  knd2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  mlm2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  mlym: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  ory2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  orya: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  taml: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  tml2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  telu: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  tel2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  khmr: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  bali: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  batk: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  brah: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  bugi: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  buhd: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  cakm: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  cham: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  dupl: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  egyp: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  gran: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  hano: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  java: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  kthi: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  kali: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  khar: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  khoj: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  sind: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  lepc: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  limb: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  mahj: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  mtei: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  modi: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  hmng: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  rjng: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  saur: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  shrd: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  sidd: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  sinh: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
  sund: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  sylo: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  tglg: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  tagb: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  tale: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  lana: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  tavt: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  takr: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  tibt: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  tfng: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  tirh: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
  latn: $5340de7a86f3ae85$export$2e2bcd8739ae039,
  DFLT: $5340de7a86f3ae85$export$2e2bcd8739ae039
};

class $ec0cc8d4808a62ff$export$2e2bcd8739ae039 extends $cffd0e0e7e88a6c6$export$2e2bcd8739ae039 {
  applyLookup(lookupType, table) {
    switch (lookupType) {
      case 1: {
        let index = this.coverageIndex(table.coverage);
        if (index === -1)
          return false;
        let glyph = this.glyphIterator.cur;
        switch (table.version) {
          case 1:
            glyph.id = glyph.id + table.deltaGlyphID & 65535;
            break;
          case 2:
            glyph.id = table.substitute.get(index);
            break;
        }
        return true;
      }
      case 2: {
        let index = this.coverageIndex(table.coverage);
        if (index !== -1) {
          let sequence = table.sequences.get(index);
          if (sequence.length === 0) {
            this.glyphs.splice(this.glyphIterator.index, 1);
            return true;
          }
          this.glyphIterator.cur.id = sequence[0];
          this.glyphIterator.cur.ligatureComponent = 0;
          let features = this.glyphIterator.cur.features;
          let curGlyph = this.glyphIterator.cur;
          let replacement = sequence.slice(1).map((gid, i3) => {
            let glyph = new $8cba766f534deddd$export$2e2bcd8739ae039(this.font, gid, undefined, features);
            glyph.shaperInfo = curGlyph.shaperInfo;
            glyph.isLigated = curGlyph.isLigated;
            glyph.ligatureComponent = i3 + 1;
            glyph.substituted = true;
            glyph.isMultiplied = true;
            return glyph;
          });
          this.glyphs.splice(this.glyphIterator.index + 1, 0, ...replacement);
          return true;
        }
        return false;
      }
      case 3: {
        let index = this.coverageIndex(table.coverage);
        if (index !== -1) {
          let USER_INDEX = 0;
          this.glyphIterator.cur.id = table.alternateSet.get(index)[USER_INDEX];
          return true;
        }
        return false;
      }
      case 4: {
        let index = this.coverageIndex(table.coverage);
        if (index === -1)
          return false;
        for (let ligature of table.ligatureSets.get(index)) {
          let matched = this.sequenceMatchIndices(1, ligature.components);
          if (!matched)
            continue;
          let curGlyph = this.glyphIterator.cur;
          let characters = curGlyph.codePoints.slice();
          for (let index2 of matched)
            characters.push(...this.glyphs[index2].codePoints);
          let ligatureGlyph = new $8cba766f534deddd$export$2e2bcd8739ae039(this.font, ligature.glyph, characters, curGlyph.features);
          ligatureGlyph.shaperInfo = curGlyph.shaperInfo;
          ligatureGlyph.isLigated = true;
          ligatureGlyph.substituted = true;
          let isMarkLigature = curGlyph.isMark;
          for (let i3 = 0;i3 < matched.length && isMarkLigature; i3++)
            isMarkLigature = this.glyphs[matched[i3]].isMark;
          ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;
          let lastLigID = curGlyph.ligatureID;
          let lastNumComps = curGlyph.codePoints.length;
          let curComps = lastNumComps;
          let idx = this.glyphIterator.index + 1;
          for (let matchIndex of matched) {
            if (isMarkLigature)
              idx = matchIndex;
            else
              while (idx < matchIndex) {
                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);
                this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;
                this.glyphs[idx].ligatureComponent = ligatureComponent;
                idx++;
              }
            lastLigID = this.glyphs[idx].ligatureID;
            lastNumComps = this.glyphs[idx].codePoints.length;
            curComps += lastNumComps;
            idx++;
          }
          if (lastLigID && !isMarkLigature)
            for (let i12 = idx;i12 < this.glyphs.length; i12++) {
              if (this.glyphs[i12].ligatureID === lastLigID) {
                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[i12].ligatureComponent || 1, lastNumComps);
                this.glyphs[i12].ligatureComponent = ligatureComponent;
              } else
                break;
            }
          for (let i22 = matched.length - 1;i22 >= 0; i22--)
            this.glyphs.splice(matched[i22], 1);
          this.glyphs[this.glyphIterator.index] = ligatureGlyph;
          return true;
        }
        return false;
      }
      case 5:
        return this.applyContext(table);
      case 6:
        return this.applyChainingContext(table);
      case 7:
        return this.applyLookup(table.lookupType, table.extension);
      default:
        throw new Error(`GSUB lookupType ${lookupType} is not supported`);
    }
  }
}

class $d1645ec9e32ddac0$export$2e2bcd8739ae039 extends $cffd0e0e7e88a6c6$export$2e2bcd8739ae039 {
  applyPositionValue(sequenceIndex, value15) {
    let position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];
    if (value15.xAdvance != null)
      position.xAdvance += value15.xAdvance;
    if (value15.yAdvance != null)
      position.yAdvance += value15.yAdvance;
    if (value15.xPlacement != null)
      position.xOffset += value15.xPlacement;
    if (value15.yPlacement != null)
      position.yOffset += value15.yPlacement;
    let variationProcessor = this.font._variationProcessor;
    let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;
    if (variationProcessor && variationStore) {
      if (value15.xPlaDevice)
        position.xOffset += variationProcessor.getDelta(variationStore, value15.xPlaDevice.a, value15.xPlaDevice.b);
      if (value15.yPlaDevice)
        position.yOffset += variationProcessor.getDelta(variationStore, value15.yPlaDevice.a, value15.yPlaDevice.b);
      if (value15.xAdvDevice)
        position.xAdvance += variationProcessor.getDelta(variationStore, value15.xAdvDevice.a, value15.xAdvDevice.b);
      if (value15.yAdvDevice)
        position.yAdvance += variationProcessor.getDelta(variationStore, value15.yAdvDevice.a, value15.yAdvDevice.b);
    }
  }
  applyLookup(lookupType, table) {
    switch (lookupType) {
      case 1: {
        let index = this.coverageIndex(table.coverage);
        if (index === -1)
          return false;
        switch (table.version) {
          case 1:
            this.applyPositionValue(0, table.value);
            break;
          case 2:
            this.applyPositionValue(0, table.values.get(index));
            break;
        }
        return true;
      }
      case 2: {
        let nextGlyph = this.glyphIterator.peek();
        if (!nextGlyph)
          return false;
        let index = this.coverageIndex(table.coverage);
        if (index === -1)
          return false;
        switch (table.version) {
          case 1:
            let set2 = table.pairSets.get(index);
            for (let pair of set2)
              if (pair.secondGlyph === nextGlyph.id) {
                this.applyPositionValue(0, pair.value1);
                this.applyPositionValue(1, pair.value2);
                return true;
              }
            return false;
          case 2:
            let class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);
            let class2 = this.getClassID(nextGlyph.id, table.classDef2);
            if (class1 === -1 || class2 === -1)
              return false;
            var pair1 = table.classRecords.get(class1).get(class2);
            this.applyPositionValue(0, pair1.value1);
            this.applyPositionValue(1, pair1.value2);
            return true;
        }
      }
      case 3: {
        let nextIndex = this.glyphIterator.peekIndex();
        let nextGlyph = this.glyphs[nextIndex];
        if (!nextGlyph)
          return false;
        let curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];
        if (!curRecord || !curRecord.exitAnchor)
          return false;
        let nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, nextGlyph.id)];
        if (!nextRecord || !nextRecord.entryAnchor)
          return false;
        let entry = this.getAnchor(nextRecord.entryAnchor);
        let exit = this.getAnchor(curRecord.exitAnchor);
        let cur = this.positions[this.glyphIterator.index];
        let next = this.positions[nextIndex];
        let d3;
        switch (this.direction) {
          case "ltr":
            cur.xAdvance = exit.x + cur.xOffset;
            d3 = entry.x + next.xOffset;
            next.xAdvance -= d3;
            next.xOffset -= d3;
            break;
          case "rtl":
            d3 = exit.x + cur.xOffset;
            cur.xAdvance -= d3;
            cur.xOffset -= d3;
            next.xAdvance = entry.x + next.xOffset;
            break;
        }
        if (this.glyphIterator.flags.rightToLeft) {
          this.glyphIterator.cur.cursiveAttachment = nextIndex;
          cur.yOffset = entry.y - exit.y;
        } else {
          nextGlyph.cursiveAttachment = this.glyphIterator.index;
          cur.yOffset = exit.y - entry.y;
        }
        return true;
      }
      case 4: {
        let markIndex = this.coverageIndex(table.markCoverage);
        if (markIndex === -1)
          return false;
        let baseGlyphIndex = this.glyphIterator.index;
        while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0))
          ;
        if (baseGlyphIndex < 0)
          return false;
        let baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);
        if (baseIndex === -1)
          return false;
        let markRecord = table.markArray[markIndex];
        let baseAnchor = table.baseArray[baseIndex][markRecord.class];
        this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);
        return true;
      }
      case 5: {
        let markIndex = this.coverageIndex(table.markCoverage);
        if (markIndex === -1)
          return false;
        let baseGlyphIndex = this.glyphIterator.index;
        while (--baseGlyphIndex >= 0 && this.glyphs[baseGlyphIndex].isMark)
          ;
        if (baseGlyphIndex < 0)
          return false;
        let ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[baseGlyphIndex].id);
        if (ligIndex === -1)
          return false;
        let ligAttach = table.ligatureArray[ligIndex];
        let markGlyph = this.glyphIterator.cur;
        let ligGlyph = this.glyphs[baseGlyphIndex];
        let compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;
        let markRecord = table.markArray[markIndex];
        let baseAnchor = ligAttach[compIndex][markRecord.class];
        this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);
        return true;
      }
      case 6: {
        let mark1Index = this.coverageIndex(table.mark1Coverage);
        if (mark1Index === -1)
          return false;
        let prevIndex = this.glyphIterator.peekIndex(-1);
        let prev = this.glyphs[prevIndex];
        if (!prev || !prev.isMark)
          return false;
        let cur = this.glyphIterator.cur;
        let good = false;
        if (cur.ligatureID === prev.ligatureID) {
          if (!cur.ligatureID)
            good = true;
          else if (cur.ligatureComponent === prev.ligatureComponent)
            good = true;
        } else if (cur.ligatureID && !cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent)
          good = true;
        if (!good)
          return false;
        let mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);
        if (mark2Index === -1)
          return false;
        let markRecord = table.mark1Array[mark1Index];
        let baseAnchor = table.mark2Array[mark2Index][markRecord.class];
        this.applyAnchor(markRecord, baseAnchor, prevIndex);
        return true;
      }
      case 7:
        return this.applyContext(table);
      case 8:
        return this.applyChainingContext(table);
      case 9:
        return this.applyLookup(table.lookupType, table.extension);
      default:
        throw new Error(`Unsupported GPOS table: ${lookupType}`);
    }
  }
  applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {
    let baseCoords = this.getAnchor(baseAnchor);
    let markCoords = this.getAnchor(markRecord.markAnchor);
    let basePos = this.positions[baseGlyphIndex];
    let markPos = this.positions[this.glyphIterator.index];
    markPos.xOffset = baseCoords.x - markCoords.x;
    markPos.yOffset = baseCoords.y - markCoords.y;
    this.glyphIterator.cur.markAttachment = baseGlyphIndex;
  }
  getAnchor(anchor) {
    let x3 = anchor.xCoordinate;
    let y3 = anchor.yCoordinate;
    let variationProcessor = this.font._variationProcessor;
    let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;
    if (variationProcessor && variationStore) {
      if (anchor.xDeviceTable)
        x3 += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);
      if (anchor.yDeviceTable)
        y3 += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);
    }
    return {
      x: x3,
      y: y3
    };
  }
  applyFeatures(userFeatures, glyphs, advances) {
    super.applyFeatures(userFeatures, glyphs, advances);
    for (var i3 = 0;i3 < this.glyphs.length; i3++)
      this.fixCursiveAttachment(i3);
    this.fixMarkAttachment();
  }
  fixCursiveAttachment(i3) {
    let glyph = this.glyphs[i3];
    if (glyph.cursiveAttachment != null) {
      let j = glyph.cursiveAttachment;
      glyph.cursiveAttachment = null;
      this.fixCursiveAttachment(j);
      this.positions[i3].yOffset += this.positions[j].yOffset;
    }
  }
  fixMarkAttachment() {
    for (let i3 = 0;i3 < this.glyphs.length; i3++) {
      let glyph = this.glyphs[i3];
      if (glyph.markAttachment != null) {
        let j = glyph.markAttachment;
        this.positions[i3].xOffset += this.positions[j].xOffset;
        this.positions[i3].yOffset += this.positions[j].yOffset;
        if (this.direction === "ltr")
          for (let k = j;k < i3; k++) {
            this.positions[i3].xOffset -= this.positions[k].xAdvance;
            this.positions[i3].yOffset -= this.positions[k].yAdvance;
          }
        else
          for (let k12 = j + 1;k12 < i3 + 1; k12++) {
            this.positions[i3].xOffset += this.positions[k12].xAdvance;
            this.positions[i3].yOffset += this.positions[k12].yAdvance;
          }
      }
    }
  }
}

class $805414ed4cd3125e$export$2e2bcd8739ae039 {
  constructor(font) {
    this.font = font;
    this.glyphInfos = null;
    this.plan = null;
    this.GSUBProcessor = null;
    this.GPOSProcessor = null;
    this.fallbackPosition = true;
    if (font.GSUB)
      this.GSUBProcessor = new $ec0cc8d4808a62ff$export$2e2bcd8739ae039(font, font.GSUB);
    if (font.GPOS)
      this.GPOSProcessor = new $d1645ec9e32ddac0$export$2e2bcd8739ae039(font, font.GPOS);
  }
  setup(glyphRun) {
    this.glyphInfos = glyphRun.glyphs.map((glyph) => new $8cba766f534deddd$export$2e2bcd8739ae039(this.font, glyph.id, [
      ...glyph.codePoints
    ]));
    let script = null;
    if (this.GPOSProcessor)
      script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
    if (this.GSUBProcessor)
      script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
    this.shaper = $a1d926e2c804f4db$export$7877a478dd30fd3d(script);
    this.plan = new $d208953d14e55e3c$export$2e2bcd8739ae039(this.font, script, glyphRun.direction);
    this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features);
    for (let key in this.plan.allFeatures)
      glyphRun.features[key] = true;
  }
  substitute(glyphRun) {
    if (this.GSUBProcessor) {
      this.plan.process(this.GSUBProcessor, this.glyphInfos);
      glyphRun.glyphs = this.glyphInfos.map((glyphInfo) => this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints));
    }
  }
  position(glyphRun) {
    if (this.shaper.zeroMarkWidths === "BEFORE_GPOS")
      this.zeroMarkAdvances(glyphRun.positions);
    if (this.GPOSProcessor)
      this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);
    if (this.shaper.zeroMarkWidths === "AFTER_GPOS")
      this.zeroMarkAdvances(glyphRun.positions);
    if (glyphRun.direction === "rtl") {
      glyphRun.glyphs.reverse();
      glyphRun.positions.reverse();
    }
    return this.GPOSProcessor && this.GPOSProcessor.features;
  }
  zeroMarkAdvances(positions) {
    for (let i3 = 0;i3 < this.glyphInfos.length; i3++)
      if (this.glyphInfos[i3].isMark) {
        positions[i3].xAdvance = 0;
        positions[i3].yAdvance = 0;
      }
  }
  cleanup() {
    this.glyphInfos = null;
    this.plan = null;
    this.shaper = null;
  }
  getAvailableFeatures(script, language) {
    let features = [];
    if (this.GSUBProcessor) {
      this.GSUBProcessor.selectScript(script, language);
      features.push(...Object.keys(this.GSUBProcessor.features));
    }
    if (this.GPOSProcessor) {
      this.GPOSProcessor.selectScript(script, language);
      features.push(...Object.keys(this.GPOSProcessor.features));
    }
    return features;
  }
}

class $2df783177c3b5db5$export$2e2bcd8739ae039 {
  constructor(font) {
    this.font = font;
    this.unicodeLayoutEngine = null;
    this.kernProcessor = null;
    if (this.font.morx)
      this.engine = new $9273c77bc46b13e0$export$2e2bcd8739ae039(this.font);
    else if (this.font.GSUB || this.font.GPOS)
      this.engine = new $805414ed4cd3125e$export$2e2bcd8739ae039(this.font);
  }
  layout(string7, features, script, language, direction) {
    if (typeof features === "string") {
      direction = language;
      language = script;
      script = features;
      features = [];
    }
    if (typeof string7 === "string") {
      if (script == null)
        script = $a5878e4f4663c9e2$export$e5cb25e204fb8450(string7);
      var glyphs = this.font.glyphsForString(string7);
    } else {
      if (script == null) {
        let codePoints = [];
        for (let glyph of string7)
          codePoints.push(...glyph.codePoints);
        script = $a5878e4f4663c9e2$export$16fab0757cfc223d(codePoints);
      }
      var glyphs = string7;
    }
    let glyphRun = new $5a6ae00fa7e614b0$export$2e2bcd8739ae039(glyphs, features, script, language, direction);
    if (glyphs.length === 0) {
      glyphRun.positions = [];
      return glyphRun;
    }
    if (this.engine && this.engine.setup)
      this.engine.setup(glyphRun);
    this.substitute(glyphRun);
    this.position(glyphRun);
    this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);
    if (this.engine && this.engine.cleanup)
      this.engine.cleanup();
    return glyphRun;
  }
  substitute(glyphRun) {
    if (this.engine && this.engine.substitute)
      this.engine.substitute(glyphRun);
  }
  position(glyphRun) {
    glyphRun.positions = glyphRun.glyphs.map((glyph) => new $4bff5f854806c785$export$2e2bcd8739ae039(glyph.advanceWidth));
    let positioned = null;
    if (this.engine && this.engine.position)
      positioned = this.engine.position(glyphRun);
    if (!positioned && (!this.engine || this.engine.fallbackPosition)) {
      if (!this.unicodeLayoutEngine)
        this.unicodeLayoutEngine = new $e4967fef9afc586a$export$2e2bcd8739ae039(this.font);
      this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);
    }
    if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {
      if (!this.kernProcessor)
        this.kernProcessor = new $8526e21034212dc1$export$2e2bcd8739ae039(this.font);
      this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);
      glyphRun.features.kern = true;
    }
  }
  hideDefaultIgnorables(glyphs, positions) {
    let space = this.font.glyphForCodePoint(32);
    for (let i3 = 0;i3 < glyphs.length; i3++)
      if (this.isDefaultIgnorable(glyphs[i3].codePoints[0])) {
        glyphs[i3] = space;
        positions[i3].xAdvance = 0;
        positions[i3].yAdvance = 0;
      }
  }
  isDefaultIgnorable(ch) {
    let plane = ch >> 16;
    if (plane === 0)
      switch (ch >> 8) {
        case 0:
          return ch === 173;
        case 3:
          return ch === 847;
        case 6:
          return ch === 1564;
        case 23:
          return 6068 <= ch && ch <= 6069;
        case 24:
          return 6155 <= ch && ch <= 6158;
        case 32:
          return 8203 <= ch && ch <= 8207 || 8234 <= ch && ch <= 8238 || 8288 <= ch && ch <= 8303;
        case 254:
          return 65024 <= ch && ch <= 65039 || ch === 65279;
        case 255:
          return 65520 <= ch && ch <= 65528;
        default:
          return false;
      }
    else
      switch (plane) {
        case 1:
          return 113824 <= ch && ch <= 113827 || 119155 <= ch && ch <= 119162;
        case 14:
          return 917504 <= ch && ch <= 921599;
        default:
          return false;
      }
  }
  getAvailableFeatures(script, language) {
    let features = [];
    if (this.engine)
      features.push(...this.engine.getAvailableFeatures(script, language));
    if (this.font.kern && features.indexOf("kern") === -1)
      features.push("kern");
    return features;
  }
  stringsForGlyph(gid) {
    let result = new Set;
    let codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);
    for (let codePoint of codePoints)
      result.add(String.fromCodePoint(codePoint));
    if (this.engine && this.engine.stringsForGlyph)
      for (let string7 of this.engine.stringsForGlyph(gid))
        result.add(string7);
    return Array.from(result);
  }
}
var $af5e1fcddefe17a2$var$SVG_COMMANDS = {
  moveTo: "M",
  lineTo: "L",
  quadraticCurveTo: "Q",
  bezierCurveTo: "C",
  closePath: "Z"
};

class $af5e1fcddefe17a2$export$2e2bcd8739ae039 {
  constructor() {
    this.commands = [];
    this._bbox = null;
    this._cbox = null;
  }
  toFunction() {
    return (ctx) => {
      this.commands.forEach((c3) => {
        return ctx[c3.command].apply(ctx, c3.args);
      });
    };
  }
  toSVG() {
    let cmds = this.commands.map((c3) => {
      let args = c3.args.map((arg) => Math.round(arg * 100) / 100);
      return `${$af5e1fcddefe17a2$var$SVG_COMMANDS[c3.command]}${args.join(" ")}`;
    });
    return cmds.join("");
  }
  get cbox() {
    if (!this._cbox) {
      let cbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039;
      for (let command1 of this.commands)
        for (let i3 = 0;i3 < command1.args.length; i3 += 2)
          cbox.addPoint(command1.args[i3], command1.args[i3 + 1]);
      this._cbox = Object.freeze(cbox);
    }
    return this._cbox;
  }
  get bbox() {
    if (this._bbox)
      return this._bbox;
    let bbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039;
    let cx = 0, cy = 0;
    let f3 = (t3) => Math.pow(1 - t3, 3) * p0[i3] + 3 * Math.pow(1 - t3, 2) * t3 * p12[i3] + 3 * (1 - t3) * Math.pow(t3, 2) * p22[i3] + Math.pow(t3, 3) * p3[i3];
    for (let c3 of this.commands)
      switch (c3.command) {
        case "moveTo":
        case "lineTo":
          let [x3, y3] = c3.args;
          bbox.addPoint(x3, y3);
          cx = x3;
          cy = y3;
          break;
        case "quadraticCurveTo":
        case "bezierCurveTo":
          if (c3.command === "quadraticCurveTo") {
            var [qp1x, qp1y, p3x, p3y] = c3.args;
            var cp1x = cx + 2 / 3 * (qp1x - cx);
            var cp1y = cy + 2 / 3 * (qp1y - cy);
            var cp2x = p3x + 2 / 3 * (qp1x - p3x);
            var cp2y = p3y + 2 / 3 * (qp1y - p3y);
          } else
            var [cp1x, cp1y, cp2x, cp2y, p3x, p3y] = c3.args;
          bbox.addPoint(p3x, p3y);
          var p0 = [
            cx,
            cy
          ];
          var p12 = [
            cp1x,
            cp1y
          ];
          var p22 = [
            cp2x,
            cp2y
          ];
          var p3 = [
            p3x,
            p3y
          ];
          for (var i3 = 0;i3 <= 1; i3++) {
            let b = 6 * p0[i3] - 12 * p12[i3] + 6 * p22[i3];
            let a = -3 * p0[i3] + 9 * p12[i3] - 9 * p22[i3] + 3 * p3[i3];
            c3 = 3 * p12[i3] - 3 * p0[i3];
            if (a === 0) {
              if (b === 0)
                continue;
              let t3 = -c3 / b;
              if (0 < t3 && t3 < 1) {
                if (i3 === 0)
                  bbox.addPoint(f3(t3), bbox.maxY);
                else if (i3 === 1)
                  bbox.addPoint(bbox.maxX, f3(t3));
              }
              continue;
            }
            let b2ac = Math.pow(b, 2) - 4 * c3 * a;
            if (b2ac < 0)
              continue;
            let t12 = (-b + Math.sqrt(b2ac)) / (2 * a);
            if (0 < t12 && t12 < 1) {
              if (i3 === 0)
                bbox.addPoint(f3(t12), bbox.maxY);
              else if (i3 === 1)
                bbox.addPoint(bbox.maxX, f3(t12));
            }
            let t22 = (-b - Math.sqrt(b2ac)) / (2 * a);
            if (0 < t22 && t22 < 1) {
              if (i3 === 0)
                bbox.addPoint(f3(t22), bbox.maxY);
              else if (i3 === 1)
                bbox.addPoint(bbox.maxX, f3(t22));
            }
          }
          cx = p3x;
          cy = p3y;
          break;
      }
    return this._bbox = Object.freeze(bbox);
  }
  mapPoints(fn) {
    let path2 = new $af5e1fcddefe17a2$export$2e2bcd8739ae039;
    for (let c3 of this.commands) {
      let args = [];
      for (let i3 = 0;i3 < c3.args.length; i3 += 2) {
        let [x3, y3] = fn(c3.args[i3], c3.args[i3 + 1]);
        args.push(x3, y3);
      }
      path2[c3.command](...args);
    }
    return path2;
  }
  transform(m02, m12, m22, m3, m4, m5) {
    return this.mapPoints((x3, y3) => {
      const tx = m02 * x3 + m22 * y3 + m4;
      const ty = m12 * x3 + m3 * y3 + m5;
      return [
        tx,
        ty
      ];
    });
  }
  translate(x3, y3) {
    return this.transform(1, 0, 0, 1, x3, y3);
  }
  rotate(angle) {
    let cos = Math.cos(angle);
    let sin = Math.sin(angle);
    return this.transform(cos, sin, -sin, cos, 0, 0);
  }
  scale(scaleX, scaleY = scaleX) {
    return this.transform(scaleX, 0, 0, scaleY, 0, 0);
  }
}
for (let command of [
  "moveTo",
  "lineTo",
  "quadraticCurveTo",
  "bezierCurveTo",
  "closePath"
])
  $af5e1fcddefe17a2$export$2e2bcd8739ae039.prototype[command] = function(...args) {
    this._bbox = this._cbox = null;
    this.commands.push({
      command,
      args
    });
    return this;
  };
var $c55d37cb83b3ceea$export$2e2bcd8739ae039 = [
  ".notdef",
  ".null",
  "nonmarkingreturn",
  "space",
  "exclam",
  "quotedbl",
  "numbersign",
  "dollar",
  "percent",
  "ampersand",
  "quotesingle",
  "parenleft",
  "parenright",
  "asterisk",
  "plus",
  "comma",
  "hyphen",
  "period",
  "slash",
  "zero",
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "colon",
  "semicolon",
  "less",
  "equal",
  "greater",
  "question",
  "at",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "bracketleft",
  "backslash",
  "bracketright",
  "asciicircum",
  "underscore",
  "grave",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "braceleft",
  "bar",
  "braceright",
  "asciitilde",
  "Adieresis",
  "Aring",
  "Ccedilla",
  "Eacute",
  "Ntilde",
  "Odieresis",
  "Udieresis",
  "aacute",
  "agrave",
  "acircumflex",
  "adieresis",
  "atilde",
  "aring",
  "ccedilla",
  "eacute",
  "egrave",
  "ecircumflex",
  "edieresis",
  "iacute",
  "igrave",
  "icircumflex",
  "idieresis",
  "ntilde",
  "oacute",
  "ograve",
  "ocircumflex",
  "odieresis",
  "otilde",
  "uacute",
  "ugrave",
  "ucircumflex",
  "udieresis",
  "dagger",
  "degree",
  "cent",
  "sterling",
  "section",
  "bullet",
  "paragraph",
  "germandbls",
  "registered",
  "copyright",
  "trademark",
  "acute",
  "dieresis",
  "notequal",
  "AE",
  "Oslash",
  "infinity",
  "plusminus",
  "lessequal",
  "greaterequal",
  "yen",
  "mu",
  "partialdiff",
  "summation",
  "product",
  "pi",
  "integral",
  "ordfeminine",
  "ordmasculine",
  "Omega",
  "ae",
  "oslash",
  "questiondown",
  "exclamdown",
  "logicalnot",
  "radical",
  "florin",
  "approxequal",
  "Delta",
  "guillemotleft",
  "guillemotright",
  "ellipsis",
  "nonbreakingspace",
  "Agrave",
  "Atilde",
  "Otilde",
  "OE",
  "oe",
  "endash",
  "emdash",
  "quotedblleft",
  "quotedblright",
  "quoteleft",
  "quoteright",
  "divide",
  "lozenge",
  "ydieresis",
  "Ydieresis",
  "fraction",
  "currency",
  "guilsinglleft",
  "guilsinglright",
  "fi",
  "fl",
  "daggerdbl",
  "periodcentered",
  "quotesinglbase",
  "quotedblbase",
  "perthousand",
  "Acircumflex",
  "Ecircumflex",
  "Aacute",
  "Edieresis",
  "Egrave",
  "Iacute",
  "Icircumflex",
  "Idieresis",
  "Igrave",
  "Oacute",
  "Ocircumflex",
  "apple",
  "Ograve",
  "Uacute",
  "Ucircumflex",
  "Ugrave",
  "dotlessi",
  "circumflex",
  "tilde",
  "macron",
  "breve",
  "dotaccent",
  "ring",
  "cedilla",
  "hungarumlaut",
  "ogonek",
  "caron",
  "Lslash",
  "lslash",
  "Scaron",
  "scaron",
  "Zcaron",
  "zcaron",
  "brokenbar",
  "Eth",
  "eth",
  "Yacute",
  "yacute",
  "Thorn",
  "thorn",
  "minus",
  "multiply",
  "onesuperior",
  "twosuperior",
  "threesuperior",
  "onehalf",
  "onequarter",
  "threequarters",
  "franc",
  "Gbreve",
  "gbreve",
  "Idotaccent",
  "Scedilla",
  "scedilla",
  "Cacute",
  "cacute",
  "Ccaron",
  "ccaron",
  "dcroat"
];
var _class;
var $e1a34a692932ba79$export$2e2bcd8739ae039 = (_class = class $e1a34a692932ba79$export$2e2bcd8739ae0392 {
  constructor(id, codePoints, font) {
    this.id = id;
    this.codePoints = codePoints;
    this._font = font;
    this.isMark = this.codePoints.length > 0 && this.codePoints.every($747425b437e121da$export$2e2bcd8739ae039.isMark);
    this.isLigature = this.codePoints.length > 1;
  }
  _getPath() {
    return new $af5e1fcddefe17a2$export$2e2bcd8739ae039;
  }
  _getCBox() {
    return this.path.cbox;
  }
  _getBBox() {
    return this.path.bbox;
  }
  _getTableMetrics(table) {
    if (this.id < table.metrics.length)
      return table.metrics.get(this.id);
    let metric = table.metrics.get(table.metrics.length - 1);
    let res = {
      advance: metric ? metric.advance : 0,
      bearing: table.bearings.get(this.id - table.metrics.length) || 0
    };
    return res;
  }
  _getMetrics(cbox) {
    if (this._metrics)
      return this._metrics;
    let { advance: advanceWidth, bearing: leftBearing } = this._getTableMetrics(this._font.hmtx);
    if (this._font.vmtx)
      var { advance: advanceHeight, bearing: topBearing } = this._getTableMetrics(this._font.vmtx);
    else {
      let os2;
      if (typeof cbox === "undefined" || cbox === null)
        ({ cbox } = this);
      if ((os2 = this._font["OS/2"]) && os2.version > 0) {
        var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);
        var topBearing = os2.typoAscender - cbox.maxY;
      } else {
        let { hhea } = this._font;
        var advanceHeight = Math.abs(hhea.ascent - hhea.descent);
        var topBearing = hhea.ascent - cbox.maxY;
      }
    }
    if (this._font._variationProcessor && this._font.HVAR)
      advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);
    return this._metrics = {
      advanceWidth,
      advanceHeight,
      leftBearing,
      topBearing
    };
  }
  get cbox() {
    return this._getCBox();
  }
  get bbox() {
    return this._getBBox();
  }
  get path() {
    return this._getPath();
  }
  getScaledPath(size) {
    let scale = 1 / this._font.unitsPerEm * size;
    return this.path.scale(scale);
  }
  get advanceWidth() {
    return this._getMetrics().advanceWidth;
  }
  get advanceHeight() {
    return this._getMetrics().advanceHeight;
  }
  get ligatureCaretPositions() {
  }
  _getName() {
    let { post } = this._font;
    if (!post)
      return null;
    switch (post.version) {
      case 1:
        return $c55d37cb83b3ceea$export$2e2bcd8739ae039[this.id];
      case 2:
        let id = post.glyphNameIndex[this.id];
        if (id < $c55d37cb83b3ceea$export$2e2bcd8739ae039.length)
          return $c55d37cb83b3ceea$export$2e2bcd8739ae039[id];
        return post.names[id - $c55d37cb83b3ceea$export$2e2bcd8739ae039.length];
      case 2.5:
        return $c55d37cb83b3ceea$export$2e2bcd8739ae039[this.id + post.offsets[this.id]];
      case 4:
        return String.fromCharCode(post.map[this.id]);
    }
  }
  get name() {
    return this._getName();
  }
  render(ctx, size) {
    ctx.save();
    let scale = 1 / this._font.head.unitsPerEm * size;
    ctx.scale(scale, scale);
    let fn = this.path.toFunction();
    fn(ctx);
    ctx.fill();
    ctx.restore();
  }
}, _applyDecoratedDescriptor(_class.prototype, "cbox", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "cbox"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "bbox", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "bbox"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "path", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "path"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "advanceWidth", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "advanceWidth"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "advanceHeight", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "advanceHeight"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "name", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "name"), _class.prototype), _class);
var $e20fdd09923e4c19$var$GlyfHeader = new import_restructure.default.Struct({
  numberOfContours: import_restructure.default.int16,
  xMin: import_restructure.default.int16,
  yMin: import_restructure.default.int16,
  xMax: import_restructure.default.int16,
  yMax: import_restructure.default.int16
});
var $e20fdd09923e4c19$var$ON_CURVE = 1;
var $e20fdd09923e4c19$var$X_SHORT_VECTOR = 2;
var $e20fdd09923e4c19$var$Y_SHORT_VECTOR = 4;
var $e20fdd09923e4c19$var$REPEAT = 8;
var $e20fdd09923e4c19$var$SAME_X = 16;
var $e20fdd09923e4c19$var$SAME_Y = 32;
var $e20fdd09923e4c19$var$ARG_1_AND_2_ARE_WORDS = 1;
var $e20fdd09923e4c19$var$WE_HAVE_A_SCALE = 8;
var $e20fdd09923e4c19$var$MORE_COMPONENTS = 32;
var $e20fdd09923e4c19$var$WE_HAVE_AN_X_AND_Y_SCALE = 64;
var $e20fdd09923e4c19$var$WE_HAVE_A_TWO_BY_TWO = 128;
var $e20fdd09923e4c19$var$WE_HAVE_INSTRUCTIONS = 256;
class $e20fdd09923e4c19$export$baf26146a414f24a {
  constructor(onCurve, endContour, x3 = 0, y3 = 0) {
    this.onCurve = onCurve;
    this.endContour = endContour;
    this.x = x3;
    this.y = y3;
  }
  copy() {
    return new $e20fdd09923e4c19$export$baf26146a414f24a(this.onCurve, this.endContour, this.x, this.y);
  }
}

class $e20fdd09923e4c19$var$Component {
  constructor(glyphID, dx, dy) {
    this.glyphID = glyphID;
    this.dx = dx;
    this.dy = dy;
    this.pos = 0;
    this.scaleX = this.scaleY = 1;
    this.scale01 = this.scale10 = 0;
  }
}

class $e20fdd09923e4c19$export$2e2bcd8739ae039 extends $e1a34a692932ba79$export$2e2bcd8739ae039 {
  type = "TTF";
  _getCBox(internal) {
    if (this._font._variationProcessor && !internal)
      return this.path.cbox;
    let stream = this._font._getTableStream("glyf");
    stream.pos += this._font.loca.offsets[this.id];
    let glyph = $e20fdd09923e4c19$var$GlyfHeader.decode(stream);
    let cbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);
    return Object.freeze(cbox);
  }
  _parseGlyphCoord(stream, prev, short, same) {
    if (short) {
      var val = stream.readUInt8();
      if (!same)
        val = -val;
      val += prev;
    } else if (same)
      var val = prev;
    else
      var val = prev + stream.readInt16BE();
    return val;
  }
  _decode() {
    let glyfPos = this._font.loca.offsets[this.id];
    let nextPos = this._font.loca.offsets[this.id + 1];
    if (glyfPos === nextPos)
      return null;
    let stream = this._font._getTableStream("glyf");
    stream.pos += glyfPos;
    let startPos = stream.pos;
    let glyph = $e20fdd09923e4c19$var$GlyfHeader.decode(stream);
    if (glyph.numberOfContours > 0)
      this._decodeSimple(glyph, stream);
    else if (glyph.numberOfContours < 0)
      this._decodeComposite(glyph, stream, startPos);
    return glyph;
  }
  _decodeSimple(glyph, stream) {
    glyph.points = [];
    let endPtsOfContours = new import_restructure.default.Array(import_restructure.default.uint16, glyph.numberOfContours).decode(stream);
    glyph.instructions = new import_restructure.default.Array(import_restructure.default.uint8, import_restructure.default.uint16).decode(stream);
    let flags = [];
    let numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;
    while (flags.length < numCoords) {
      var flag = stream.readUInt8();
      flags.push(flag);
      if (flag & $e20fdd09923e4c19$var$REPEAT) {
        let count = stream.readUInt8();
        for (let j = 0;j < count; j++)
          flags.push(flag);
      }
    }
    for (var i3 = 0;i3 < flags.length; i3++) {
      var flag = flags[i3];
      let point = new $e20fdd09923e4c19$export$baf26146a414f24a(!!(flag & $e20fdd09923e4c19$var$ON_CURVE), endPtsOfContours.indexOf(i3) >= 0, 0, 0);
      glyph.points.push(point);
    }
    let px = 0;
    for (var i3 = 0;i3 < flags.length; i3++) {
      var flag = flags[i3];
      glyph.points[i3].x = px = this._parseGlyphCoord(stream, px, flag & $e20fdd09923e4c19$var$X_SHORT_VECTOR, flag & $e20fdd09923e4c19$var$SAME_X);
    }
    let py = 0;
    for (var i3 = 0;i3 < flags.length; i3++) {
      var flag = flags[i3];
      glyph.points[i3].y = py = this._parseGlyphCoord(stream, py, flag & $e20fdd09923e4c19$var$Y_SHORT_VECTOR, flag & $e20fdd09923e4c19$var$SAME_Y);
    }
    if (this._font._variationProcessor) {
      let points = glyph.points.slice();
      points.push(...this._getPhantomPoints(glyph));
      this._font._variationProcessor.transformPoints(this.id, points);
      glyph.phantomPoints = points.slice(-4);
    }
    return;
  }
  _decodeComposite(glyph, stream, offset = 0) {
    glyph.components = [];
    let haveInstructions = false;
    let flags = $e20fdd09923e4c19$var$MORE_COMPONENTS;
    while (flags & $e20fdd09923e4c19$var$MORE_COMPONENTS) {
      flags = stream.readUInt16BE();
      let gPos = stream.pos - offset;
      let glyphID = stream.readUInt16BE();
      if (!haveInstructions)
        haveInstructions = (flags & $e20fdd09923e4c19$var$WE_HAVE_INSTRUCTIONS) !== 0;
      if (flags & $e20fdd09923e4c19$var$ARG_1_AND_2_ARE_WORDS) {
        var dx = stream.readInt16BE();
        var dy = stream.readInt16BE();
      } else {
        var dx = stream.readInt8();
        var dy = stream.readInt8();
      }
      var component = new $e20fdd09923e4c19$var$Component(glyphID, dx, dy);
      component.pos = gPos;
      if (flags & $e20fdd09923e4c19$var$WE_HAVE_A_SCALE)
        component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
      else if (flags & $e20fdd09923e4c19$var$WE_HAVE_AN_X_AND_Y_SCALE) {
        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
      } else if (flags & $e20fdd09923e4c19$var$WE_HAVE_A_TWO_BY_TWO) {
        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
        component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
        component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
      }
      glyph.components.push(component);
    }
    if (this._font._variationProcessor) {
      let points = [];
      for (let j = 0;j < glyph.components.length; j++) {
        var component = glyph.components[j];
        points.push(new $e20fdd09923e4c19$export$baf26146a414f24a(true, true, component.dx, component.dy));
      }
      points.push(...this._getPhantomPoints(glyph));
      this._font._variationProcessor.transformPoints(this.id, points);
      glyph.phantomPoints = points.splice(-4, 4);
      for (let i3 = 0;i3 < points.length; i3++) {
        let point = points[i3];
        glyph.components[i3].dx = point.x;
        glyph.components[i3].dy = point.y;
      }
    }
    return haveInstructions;
  }
  _getPhantomPoints(glyph) {
    let cbox = this._getCBox(true);
    if (this._metrics == null)
      this._metrics = $e1a34a692932ba79$export$2e2bcd8739ae039.prototype._getMetrics.call(this, cbox);
    let { advanceWidth, advanceHeight, leftBearing, topBearing } = this._metrics;
    return [
      new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing, 0),
      new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing + advanceWidth, 0),
      new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing),
      new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing + advanceHeight)
    ];
  }
  _getContours() {
    let glyph = this._decode();
    if (!glyph)
      return [];
    let points = [];
    if (glyph.numberOfContours < 0)
      for (let component of glyph.components) {
        let contours2 = this._font.getGlyph(component.glyphID)._getContours();
        for (let i3 = 0;i3 < contours2.length; i3++) {
          let contour = contours2[i3];
          for (let j = 0;j < contour.length; j++) {
            let point2 = contour[j];
            let x3 = point2.x * component.scaleX + point2.y * component.scale01 + component.dx;
            let y3 = point2.y * component.scaleY + point2.x * component.scale10 + component.dy;
            points.push(new $e20fdd09923e4c19$export$baf26146a414f24a(point2.onCurve, point2.endContour, x3, y3));
          }
        }
      }
    else
      points = glyph.points || [];
    if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {
      this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;
      this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;
      this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;
      this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;
    }
    let contours = [];
    let cur = [];
    for (let k = 0;k < points.length; k++) {
      var point = points[k];
      cur.push(point);
      if (point.endContour) {
        contours.push(cur);
        cur = [];
      }
    }
    return contours;
  }
  _getMetrics() {
    if (this._metrics)
      return this._metrics;
    let cbox = this._getCBox(true);
    super._getMetrics(cbox);
    if (this._font._variationProcessor && !this._font.HVAR)
      this.path;
    return this._metrics;
  }
  _getPath() {
    let contours = this._getContours();
    let path2 = new $af5e1fcddefe17a2$export$2e2bcd8739ae039;
    for (let i3 = 0;i3 < contours.length; i3++) {
      let contour = contours[i3];
      let firstPt = contour[0];
      let lastPt = contour[contour.length - 1];
      let start = 0;
      if (firstPt.onCurve) {
        var curvePt = null;
        start = 1;
      } else {
        if (lastPt.onCurve)
          firstPt = lastPt;
        else
          firstPt = new $e20fdd09923e4c19$export$baf26146a414f24a(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);
        var curvePt = firstPt;
      }
      path2.moveTo(firstPt.x, firstPt.y);
      for (let j = start;j < contour.length; j++) {
        let pt = contour[j];
        let prevPt = j === 0 ? firstPt : contour[j - 1];
        if (prevPt.onCurve && pt.onCurve)
          path2.lineTo(pt.x, pt.y);
        else if (prevPt.onCurve && !pt.onCurve)
          var curvePt = pt;
        else if (!prevPt.onCurve && !pt.onCurve) {
          let midX = (prevPt.x + pt.x) / 2;
          let midY = (prevPt.y + pt.y) / 2;
          path2.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);
          var curvePt = pt;
        } else if (!prevPt.onCurve && pt.onCurve) {
          path2.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);
          var curvePt = null;
        } else
          throw new Error("Unknown TTF path state");
      }
      if (curvePt)
        path2.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);
      path2.closePath();
    }
    return path2;
  }
}

class $efcf21464e1e0f88$export$2e2bcd8739ae039 extends $e1a34a692932ba79$export$2e2bcd8739ae039 {
  type = "CFF";
  _getName() {
    if (this._font.CFF2)
      return super._getName();
    return this._font["CFF "].getGlyphName(this.id);
  }
  bias(s3) {
    if (s3.length < 1240)
      return 107;
    else if (s3.length < 33900)
      return 1131;
    else
      return 32768;
  }
  _getPath() {
    let cff = this._font.CFF2 || this._font["CFF "];
    let { stream } = cff;
    let str = cff.topDict.CharStrings[this.id];
    let end = str.offset + str.length;
    stream.pos = str.offset;
    let path2 = new $af5e1fcddefe17a2$export$2e2bcd8739ae039;
    let stack = [];
    let trans = [];
    let width = null;
    let nStems = 0;
    let x12 = 0, y12 = 0;
    let usedGsubrs;
    let usedSubrs;
    let open = false;
    this._usedGsubrs = usedGsubrs = {};
    this._usedSubrs = usedSubrs = {};
    let gsubrs = cff.globalSubrIndex || [];
    let gsubrsBias = this.bias(gsubrs);
    let privateDict = cff.privateDictForGlyph(this.id) || {};
    let subrs = privateDict.Subrs || [];
    let subrsBias = this.bias(subrs);
    let vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;
    let vsindex = privateDict.vsindex;
    let variationProcessor = this._font._variationProcessor;
    function checkWidth() {
      if (width == null)
        width = stack.shift() + privateDict.nominalWidthX;
    }
    function parseStems() {
      if (stack.length % 2 !== 0)
        checkWidth();
      nStems += stack.length >> 1;
      return stack.length = 0;
    }
    function moveTo(x3, y3) {
      if (open)
        path2.closePath();
      path2.moveTo(x3, y3);
      open = true;
    }
    let parse4 = function() {
      while (stream.pos < end) {
        let op = stream.readUInt8();
        if (op < 32) {
          let index, subr, phase;
          switch (op) {
            case 1:
            case 3:
            case 18:
            case 23:
              parseStems();
              break;
            case 4:
              if (stack.length > 1)
                checkWidth();
              y12 += stack.shift();
              moveTo(x12, y12);
              break;
            case 5:
              while (stack.length >= 2) {
                x12 += stack.shift();
                y12 += stack.shift();
                path2.lineTo(x12, y12);
              }
              break;
            case 6:
            case 7:
              phase = op === 6;
              while (stack.length >= 1) {
                if (phase)
                  x12 += stack.shift();
                else
                  y12 += stack.shift();
                path2.lineTo(x12, y12);
                phase = !phase;
              }
              break;
            case 8:
              while (stack.length > 0) {
                var c1x = x12 + stack.shift();
                var c1y = y12 + stack.shift();
                var c2x = c1x + stack.shift();
                var c2y = c1y + stack.shift();
                x12 = c2x + stack.shift();
                y12 = c2y + stack.shift();
                path2.bezierCurveTo(c1x, c1y, c2x, c2y, x12, y12);
              }
              break;
            case 10:
              index = stack.pop() + subrsBias;
              subr = subrs[index];
              if (subr) {
                usedSubrs[index] = true;
                var p3 = stream.pos;
                var e = end;
                stream.pos = subr.offset;
                end = subr.offset + subr.length;
                parse4();
                stream.pos = p3;
                end = e;
              }
              break;
            case 11:
              if (cff.version >= 2)
                break;
              return;
            case 14:
              if (cff.version >= 2)
                break;
              if (stack.length > 0)
                checkWidth();
              if (open) {
                path2.closePath();
                open = false;
              }
              break;
            case 15:
              if (cff.version < 2)
                throw new Error("vsindex operator not supported in CFF v1");
              vsindex = stack.pop();
              break;
            case 16: {
              if (cff.version < 2)
                throw new Error("blend operator not supported in CFF v1");
              if (!variationProcessor)
                throw new Error("blend operator in non-variation font");
              let blendVector = variationProcessor.getBlendVector(vstore, vsindex);
              let numBlends = stack.pop();
              let numOperands = numBlends * blendVector.length;
              let delta4 = stack.length - numOperands;
              let base = delta4 - numBlends;
              for (let i3 = 0;i3 < numBlends; i3++) {
                let sum = stack[base + i3];
                for (let j = 0;j < blendVector.length; j++)
                  sum += blendVector[j] * stack[delta4++];
                stack[base + i3] = sum;
              }
              while (numOperands--)
                stack.pop();
              break;
            }
            case 19:
            case 20:
              parseStems();
              stream.pos += nStems + 7 >> 3;
              break;
            case 21:
              if (stack.length > 2)
                checkWidth();
              x12 += stack.shift();
              y12 += stack.shift();
              moveTo(x12, y12);
              break;
            case 22:
              if (stack.length > 1)
                checkWidth();
              x12 += stack.shift();
              moveTo(x12, y12);
              break;
            case 24:
              while (stack.length >= 8) {
                var c1x = x12 + stack.shift();
                var c1y = y12 + stack.shift();
                var c2x = c1x + stack.shift();
                var c2y = c1y + stack.shift();
                x12 = c2x + stack.shift();
                y12 = c2y + stack.shift();
                path2.bezierCurveTo(c1x, c1y, c2x, c2y, x12, y12);
              }
              x12 += stack.shift();
              y12 += stack.shift();
              path2.lineTo(x12, y12);
              break;
            case 25:
              while (stack.length >= 8) {
                x12 += stack.shift();
                y12 += stack.shift();
                path2.lineTo(x12, y12);
              }
              var c1x = x12 + stack.shift();
              var c1y = y12 + stack.shift();
              var c2x = c1x + stack.shift();
              var c2y = c1y + stack.shift();
              x12 = c2x + stack.shift();
              y12 = c2y + stack.shift();
              path2.bezierCurveTo(c1x, c1y, c2x, c2y, x12, y12);
              break;
            case 26:
              if (stack.length % 2)
                x12 += stack.shift();
              while (stack.length >= 4) {
                c1x = x12;
                c1y = y12 + stack.shift();
                c2x = c1x + stack.shift();
                c2y = c1y + stack.shift();
                x12 = c2x;
                y12 = c2y + stack.shift();
                path2.bezierCurveTo(c1x, c1y, c2x, c2y, x12, y12);
              }
              break;
            case 27:
              if (stack.length % 2)
                y12 += stack.shift();
              while (stack.length >= 4) {
                c1x = x12 + stack.shift();
                c1y = y12;
                c2x = c1x + stack.shift();
                c2y = c1y + stack.shift();
                x12 = c2x + stack.shift();
                y12 = c2y;
                path2.bezierCurveTo(c1x, c1y, c2x, c2y, x12, y12);
              }
              break;
            case 28:
              stack.push(stream.readInt16BE());
              break;
            case 29:
              index = stack.pop() + gsubrsBias;
              subr = gsubrs[index];
              if (subr) {
                usedGsubrs[index] = true;
                var p3 = stream.pos;
                var e = end;
                stream.pos = subr.offset;
                end = subr.offset + subr.length;
                parse4();
                stream.pos = p3;
                end = e;
              }
              break;
            case 30:
            case 31:
              phase = op === 31;
              while (stack.length >= 4) {
                if (phase) {
                  c1x = x12 + stack.shift();
                  c1y = y12;
                  c2x = c1x + stack.shift();
                  c2y = c1y + stack.shift();
                  y12 = c2y + stack.shift();
                  x12 = c2x + (stack.length === 1 ? stack.shift() : 0);
                } else {
                  c1x = x12;
                  c1y = y12 + stack.shift();
                  c2x = c1x + stack.shift();
                  c2y = c1y + stack.shift();
                  x12 = c2x + stack.shift();
                  y12 = c2y + (stack.length === 1 ? stack.shift() : 0);
                }
                path2.bezierCurveTo(c1x, c1y, c2x, c2y, x12, y12);
                phase = !phase;
              }
              break;
            case 12:
              op = stream.readUInt8();
              switch (op) {
                case 3:
                  let a = stack.pop();
                  let b = stack.pop();
                  stack.push(a && b ? 1 : 0);
                  break;
                case 4:
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a || b ? 1 : 0);
                  break;
                case 5:
                  a = stack.pop();
                  stack.push(a ? 0 : 1);
                  break;
                case 9:
                  a = stack.pop();
                  stack.push(Math.abs(a));
                  break;
                case 10:
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a + b);
                  break;
                case 11:
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a - b);
                  break;
                case 12:
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a / b);
                  break;
                case 14:
                  a = stack.pop();
                  stack.push(-a);
                  break;
                case 15:
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a === b ? 1 : 0);
                  break;
                case 18:
                  stack.pop();
                  break;
                case 20:
                  let val = stack.pop();
                  let idx = stack.pop();
                  trans[idx] = val;
                  break;
                case 21:
                  idx = stack.pop();
                  stack.push(trans[idx] || 0);
                  break;
                case 22:
                  let s12 = stack.pop();
                  let s22 = stack.pop();
                  let v12 = stack.pop();
                  let v22 = stack.pop();
                  stack.push(v12 <= v22 ? s12 : s22);
                  break;
                case 23:
                  stack.push(Math.random());
                  break;
                case 24:
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a * b);
                  break;
                case 26:
                  a = stack.pop();
                  stack.push(Math.sqrt(a));
                  break;
                case 27:
                  a = stack.pop();
                  stack.push(a, a);
                  break;
                case 28:
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(b, a);
                  break;
                case 29:
                  idx = stack.pop();
                  if (idx < 0)
                    idx = 0;
                  else if (idx > stack.length - 1)
                    idx = stack.length - 1;
                  stack.push(stack[idx]);
                  break;
                case 30:
                  let n3 = stack.pop();
                  let j = stack.pop();
                  if (j >= 0)
                    while (j > 0) {
                      var t3 = stack[n3 - 1];
                      for (let i3 = n3 - 2;i3 >= 0; i3--)
                        stack[i3 + 1] = stack[i3];
                      stack[0] = t3;
                      j--;
                    }
                  else
                    while (j < 0) {
                      var t3 = stack[0];
                      for (let i3 = 0;i3 <= n3; i3++)
                        stack[i3] = stack[i3 + 1];
                      stack[n3 - 1] = t3;
                      j++;
                    }
                  break;
                case 34:
                  c1x = x12 + stack.shift();
                  c1y = y12;
                  c2x = c1x + stack.shift();
                  c2y = c1y + stack.shift();
                  let c3x = c2x + stack.shift();
                  let c3y = c2y;
                  let c4x = c3x + stack.shift();
                  let c4y = c3y;
                  let c5x = c4x + stack.shift();
                  let c5y = c4y;
                  let c6x = c5x + stack.shift();
                  let c6y = c5y;
                  x12 = c6x;
                  y12 = c6y;
                  path2.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                  path2.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                  break;
                case 35:
                  let pts = [];
                  for (let i3 = 0;i3 <= 5; i3++) {
                    x12 += stack.shift();
                    y12 += stack.shift();
                    pts.push(x12, y12);
                  }
                  path2.bezierCurveTo(...pts.slice(0, 6));
                  path2.bezierCurveTo(...pts.slice(6));
                  stack.shift();
                  break;
                case 36:
                  c1x = x12 + stack.shift();
                  c1y = y12 + stack.shift();
                  c2x = c1x + stack.shift();
                  c2y = c1y + stack.shift();
                  c3x = c2x + stack.shift();
                  c3y = c2y;
                  c4x = c3x + stack.shift();
                  c4y = c3y;
                  c5x = c4x + stack.shift();
                  c5y = c4y + stack.shift();
                  c6x = c5x + stack.shift();
                  c6y = c5y;
                  x12 = c6x;
                  y12 = c6y;
                  path2.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                  path2.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                  break;
                case 37:
                  let startx = x12;
                  let starty = y12;
                  pts = [];
                  for (let i12 = 0;i12 <= 4; i12++) {
                    x12 += stack.shift();
                    y12 += stack.shift();
                    pts.push(x12, y12);
                  }
                  if (Math.abs(x12 - startx) > Math.abs(y12 - starty)) {
                    x12 += stack.shift();
                    y12 = starty;
                  } else {
                    x12 = startx;
                    y12 += stack.shift();
                  }
                  pts.push(x12, y12);
                  path2.bezierCurveTo(...pts.slice(0, 6));
                  path2.bezierCurveTo(...pts.slice(6));
                  break;
                default:
                  throw new Error(`Unknown op: 12 ${op}`);
              }
              break;
            default:
              throw new Error(`Unknown op: ${op}`);
          }
        } else if (op < 247)
          stack.push(op - 139);
        else if (op < 251) {
          var b12 = stream.readUInt8();
          stack.push((op - 247) * 256 + b12 + 108);
        } else if (op < 255) {
          var b12 = stream.readUInt8();
          stack.push(-(op - 251) * 256 - b12 - 108);
        } else
          stack.push(stream.readInt32BE() / 65536);
      }
    };
    parse4();
    if (open)
      path2.closePath();
    return path2;
  }
}
var $df50792647a3d5cf$var$SBIXImage = new import_restructure.default.Struct({
  originX: import_restructure.default.uint16,
  originY: import_restructure.default.uint16,
  type: new import_restructure.default.String(4),
  data: new import_restructure.default.Buffer((t3) => t3.parent.buflen - t3._currentOffset)
});

class $df50792647a3d5cf$export$2e2bcd8739ae039 extends $e20fdd09923e4c19$export$2e2bcd8739ae039 {
  type = "SBIX";
  getImageForSize(size) {
    for (let i3 = 0;i3 < this._font.sbix.imageTables.length; i3++) {
      var table = this._font.sbix.imageTables[i3];
      if (table.ppem >= size)
        break;
    }
    let offsets = table.imageOffsets;
    let start = offsets[this.id];
    let end = offsets[this.id + 1];
    if (start === end)
      return null;
    this._font.stream.pos = start;
    return $df50792647a3d5cf$var$SBIXImage.decode(this._font.stream, {
      buflen: end - start
    });
  }
  render(ctx, size) {
    let img = this.getImageForSize(size);
    if (img != null) {
      let scale = size / this._font.unitsPerEm;
      ctx.image(img.data, {
        height: size,
        x: img.originX,
        y: (this.bbox.minY - img.originY) * scale
      });
    }
    if (this._font.sbix.flags.renderOutlines)
      super.render(ctx, size);
  }
}

class $729b375ce67e8a00$var$COLRLayer {
  constructor(glyph, color) {
    this.glyph = glyph;
    this.color = color;
  }
}

class $729b375ce67e8a00$export$2e2bcd8739ae039 extends $e1a34a692932ba79$export$2e2bcd8739ae039 {
  type = "COLR";
  _getBBox() {
    let bbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039;
    for (let i3 = 0;i3 < this.layers.length; i3++) {
      let layer = this.layers[i3];
      let b = layer.glyph.bbox;
      bbox.addPoint(b.minX, b.minY);
      bbox.addPoint(b.maxX, b.maxY);
    }
    return bbox;
  }
  get layers() {
    let cpal = this._font.CPAL;
    let colr = this._font.COLR;
    let low = 0;
    let high = colr.baseGlyphRecord.length - 1;
    while (low <= high) {
      let mid = low + high >> 1;
      var rec = colr.baseGlyphRecord[mid];
      if (this.id < rec.gid)
        high = mid - 1;
      else if (this.id > rec.gid)
        low = mid + 1;
      else {
        var baseLayer = rec;
        break;
      }
    }
    if (baseLayer == null) {
      var g = this._font._getBaseGlyph(this.id);
      var color = {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255
      };
      return [
        new $729b375ce67e8a00$var$COLRLayer(g, color)
      ];
    }
    let layers = [];
    for (let i3 = baseLayer.firstLayerIndex;i3 < baseLayer.firstLayerIndex + baseLayer.numLayers; i3++) {
      var rec = colr.layerRecords[i3];
      var color = cpal.colorRecords[rec.paletteIndex];
      var g = this._font._getBaseGlyph(rec.gid);
      layers.push(new $729b375ce67e8a00$var$COLRLayer(g, color));
    }
    return layers;
  }
  render(ctx, size) {
    for (let { glyph, color } of this.layers) {
      ctx.fillColor([
        color.red,
        color.green,
        color.blue
      ], color.alpha / 255 * 100);
      glyph.render(ctx, size);
    }
    return;
  }
}
var $62b2d77b45b438f3$var$TUPLES_SHARE_POINT_NUMBERS = 32768;
var $62b2d77b45b438f3$var$TUPLE_COUNT_MASK = 4095;
var $62b2d77b45b438f3$var$EMBEDDED_TUPLE_COORD = 32768;
var $62b2d77b45b438f3$var$INTERMEDIATE_TUPLE = 16384;
var $62b2d77b45b438f3$var$PRIVATE_POINT_NUMBERS = 8192;
var $62b2d77b45b438f3$var$TUPLE_INDEX_MASK = 4095;
var $62b2d77b45b438f3$var$POINTS_ARE_WORDS = 128;
var $62b2d77b45b438f3$var$POINT_RUN_COUNT_MASK = 127;
var $62b2d77b45b438f3$var$DELTAS_ARE_ZERO = 128;
var $62b2d77b45b438f3$var$DELTAS_ARE_WORDS = 64;
var $62b2d77b45b438f3$var$DELTA_RUN_COUNT_MASK = 63;

class $62b2d77b45b438f3$export$2e2bcd8739ae039 {
  constructor(font, coords) {
    this.font = font;
    this.normalizedCoords = this.normalizeCoords(coords);
    this.blendVectors = new Map;
  }
  normalizeCoords(coords) {
    let normalized = [];
    for (var i3 = 0;i3 < this.font.fvar.axis.length; i3++) {
      let axis = this.font.fvar.axis[i3];
      if (coords[i3] < axis.defaultValue)
        normalized.push((coords[i3] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));
      else
        normalized.push((coords[i3] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));
    }
    if (this.font.avar)
      for (var i3 = 0;i3 < this.font.avar.segment.length; i3++) {
        let segment = this.font.avar.segment[i3];
        for (let j = 0;j < segment.correspondence.length; j++) {
          let pair = segment.correspondence[j];
          if (j >= 1 && normalized[i3] < pair.fromCoord) {
            let prev = segment.correspondence[j - 1];
            normalized[i3] = ((normalized[i3] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) / (pair.fromCoord - prev.fromCoord + Number.EPSILON) + prev.toCoord;
            break;
          }
        }
      }
    return normalized;
  }
  transformPoints(gid, glyphPoints) {
    if (!this.font.fvar || !this.font.gvar)
      return;
    let { gvar } = this.font;
    if (gid >= gvar.glyphCount)
      return;
    let offset = gvar.offsets[gid];
    if (offset === gvar.offsets[gid + 1])
      return;
    let { stream } = this.font;
    stream.pos = offset;
    if (stream.pos >= stream.length)
      return;
    let tupleCount = stream.readUInt16BE();
    let offsetToData = offset + stream.readUInt16BE();
    if (tupleCount & $62b2d77b45b438f3$var$TUPLES_SHARE_POINT_NUMBERS) {
      var here = stream.pos;
      stream.pos = offsetToData;
      var sharedPoints = this.decodePoints();
      offsetToData = stream.pos;
      stream.pos = here;
    }
    let origPoints = glyphPoints.map((pt) => pt.copy());
    tupleCount &= $62b2d77b45b438f3$var$TUPLE_COUNT_MASK;
    for (let i3 = 0;i3 < tupleCount; i3++) {
      let tupleDataSize = stream.readUInt16BE();
      let tupleIndex = stream.readUInt16BE();
      if (tupleIndex & $62b2d77b45b438f3$var$EMBEDDED_TUPLE_COORD) {
        var tupleCoords = [];
        for (let a = 0;a < gvar.axisCount; a++)
          tupleCoords.push(stream.readInt16BE() / 16384);
      } else {
        if ((tupleIndex & $62b2d77b45b438f3$var$TUPLE_INDEX_MASK) >= gvar.globalCoordCount)
          throw new Error("Invalid gvar table");
        var tupleCoords = gvar.globalCoords[tupleIndex & $62b2d77b45b438f3$var$TUPLE_INDEX_MASK];
      }
      if (tupleIndex & $62b2d77b45b438f3$var$INTERMEDIATE_TUPLE) {
        var startCoords = [];
        for (let a = 0;a < gvar.axisCount; a++)
          startCoords.push(stream.readInt16BE() / 16384);
        var endCoords = [];
        for (let a1 = 0;a1 < gvar.axisCount; a1++)
          endCoords.push(stream.readInt16BE() / 16384);
      }
      let factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);
      if (factor === 0) {
        offsetToData += tupleDataSize;
        continue;
      }
      var here = stream.pos;
      stream.pos = offsetToData;
      if (tupleIndex & $62b2d77b45b438f3$var$PRIVATE_POINT_NUMBERS)
        var points = this.decodePoints();
      else
        var points = sharedPoints;
      let nPoints = points.length === 0 ? glyphPoints.length : points.length;
      let xDeltas = this.decodeDeltas(nPoints);
      let yDeltas = this.decodeDeltas(nPoints);
      if (points.length === 0)
        for (let i4 = 0;i4 < glyphPoints.length; i4++) {
          var point = glyphPoints[i4];
          point.x += Math.round(xDeltas[i4] * factor);
          point.y += Math.round(yDeltas[i4] * factor);
        }
      else {
        let outPoints = origPoints.map((pt) => pt.copy());
        let hasDelta = glyphPoints.map(() => false);
        for (let i4 = 0;i4 < points.length; i4++) {
          let idx = points[i4];
          if (idx < glyphPoints.length) {
            let point2 = outPoints[idx];
            hasDelta[idx] = true;
            point2.x += Math.round(xDeltas[i4] * factor);
            point2.y += Math.round(yDeltas[i4] * factor);
          }
        }
        this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);
        for (let i12 = 0;i12 < glyphPoints.length; i12++) {
          let deltaX = outPoints[i12].x - origPoints[i12].x;
          let deltaY = outPoints[i12].y - origPoints[i12].y;
          glyphPoints[i12].x += deltaX;
          glyphPoints[i12].y += deltaY;
        }
      }
      offsetToData += tupleDataSize;
      stream.pos = here;
    }
  }
  decodePoints() {
    let stream = this.font.stream;
    let count = stream.readUInt8();
    if (count & $62b2d77b45b438f3$var$POINTS_ARE_WORDS)
      count = (count & $62b2d77b45b438f3$var$POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();
    let points = new Uint16Array(count);
    let i3 = 0;
    let point = 0;
    while (i3 < count) {
      let run = stream.readUInt8();
      let runCount = (run & $62b2d77b45b438f3$var$POINT_RUN_COUNT_MASK) + 1;
      let fn = run & $62b2d77b45b438f3$var$POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;
      for (let j = 0;j < runCount && i3 < count; j++) {
        point += fn.call(stream);
        points[i3++] = point;
      }
    }
    return points;
  }
  decodeDeltas(count) {
    let stream = this.font.stream;
    let i3 = 0;
    let deltas = new Int16Array(count);
    while (i3 < count) {
      let run = stream.readUInt8();
      let runCount = (run & $62b2d77b45b438f3$var$DELTA_RUN_COUNT_MASK) + 1;
      if (run & $62b2d77b45b438f3$var$DELTAS_ARE_ZERO)
        i3 += runCount;
      else {
        let fn = run & $62b2d77b45b438f3$var$DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;
        for (let j = 0;j < runCount && i3 < count; j++)
          deltas[i3++] = fn.call(stream);
      }
    }
    return deltas;
  }
  tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {
    let normalized = this.normalizedCoords;
    let { gvar } = this.font;
    let factor = 1;
    for (let i3 = 0;i3 < gvar.axisCount; i3++) {
      if (tupleCoords[i3] === 0)
        continue;
      if (normalized[i3] === 0)
        return 0;
      if ((tupleIndex & $62b2d77b45b438f3$var$INTERMEDIATE_TUPLE) === 0) {
        if (normalized[i3] < Math.min(0, tupleCoords[i3]) || normalized[i3] > Math.max(0, tupleCoords[i3]))
          return 0;
        factor = (factor * normalized[i3] + Number.EPSILON) / (tupleCoords[i3] + Number.EPSILON);
      } else {
        if (normalized[i3] < startCoords[i3] || normalized[i3] > endCoords[i3])
          return 0;
        else if (normalized[i3] < tupleCoords[i3])
          factor = factor * (normalized[i3] - startCoords[i3] + Number.EPSILON) / (tupleCoords[i3] - startCoords[i3] + Number.EPSILON);
        else
          factor = factor * (endCoords[i3] - normalized[i3] + Number.EPSILON) / (endCoords[i3] - tupleCoords[i3] + Number.EPSILON);
      }
    }
    return factor;
  }
  interpolateMissingDeltas(points, inPoints, hasDelta) {
    if (points.length === 0)
      return;
    let point = 0;
    while (point < points.length) {
      let firstPoint = point;
      let endPoint = point;
      let pt = points[endPoint];
      while (!pt.endContour)
        pt = points[++endPoint];
      while (point <= endPoint && !hasDelta[point])
        point++;
      if (point > endPoint)
        continue;
      let firstDelta = point;
      let curDelta = point;
      point++;
      while (point <= endPoint) {
        if (hasDelta[point]) {
          this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);
          curDelta = point;
        }
        point++;
      }
      if (curDelta === firstDelta)
        this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);
      else {
        this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);
        if (firstDelta > 0)
          this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);
      }
      point = endPoint + 1;
    }
  }
  deltaInterpolate(p12, p22, ref1, ref22, inPoints, outPoints) {
    if (p12 > p22)
      return;
    let iterable = [
      "x",
      "y"
    ];
    for (let i3 = 0;i3 < iterable.length; i3++) {
      let k = iterable[i3];
      if (inPoints[ref1][k] > inPoints[ref22][k]) {
        var p3 = ref1;
        ref1 = ref22;
        ref22 = p3;
      }
      let in1 = inPoints[ref1][k];
      let in2 = inPoints[ref22][k];
      let out1 = outPoints[ref1][k];
      let out2 = outPoints[ref22][k];
      if (in1 !== in2 || out1 === out2) {
        let scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);
        for (let p4 = p12;p4 <= p22; p4++) {
          let out = inPoints[p4][k];
          if (out <= in1)
            out += out1 - in1;
          else if (out >= in2)
            out += out2 - in2;
          else
            out = out1 + (out - in1) * scale;
          outPoints[p4][k] = out;
        }
      }
    }
  }
  deltaShift(p12, p22, ref4, inPoints, outPoints) {
    let deltaX = outPoints[ref4].x - inPoints[ref4].x;
    let deltaY = outPoints[ref4].y - inPoints[ref4].y;
    if (deltaX === 0 && deltaY === 0)
      return;
    for (let p3 = p12;p3 <= p22; p3++)
      if (p3 !== ref4) {
        outPoints[p3].x += deltaX;
        outPoints[p3].y += deltaY;
      }
  }
  getAdvanceAdjustment(gid, table) {
    let outerIndex, innerIndex;
    if (table.advanceWidthMapping) {
      let idx = gid;
      if (idx >= table.advanceWidthMapping.mapCount)
        idx = table.advanceWidthMapping.mapCount - 1;
      let entryFormat = table.advanceWidthMapping.entryFormat;
      ({ outerIndex, innerIndex } = table.advanceWidthMapping.mapData[idx]);
    } else {
      outerIndex = 0;
      innerIndex = gid;
    }
    return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);
  }
  getDelta(itemStore, outerIndex, innerIndex) {
    if (outerIndex >= itemStore.itemVariationData.length)
      return 0;
    let varData = itemStore.itemVariationData[outerIndex];
    if (innerIndex >= varData.deltaSets.length)
      return 0;
    let deltaSet = varData.deltaSets[innerIndex];
    let blendVector = this.getBlendVector(itemStore, outerIndex);
    let netAdjustment = 0;
    for (let master = 0;master < varData.regionIndexCount; master++)
      netAdjustment += deltaSet.deltas[master] * blendVector[master];
    return netAdjustment;
  }
  getBlendVector(itemStore, outerIndex) {
    let varData = itemStore.itemVariationData[outerIndex];
    if (this.blendVectors.has(varData))
      return this.blendVectors.get(varData);
    let normalizedCoords = this.normalizedCoords;
    let blendVector = [];
    for (let master = 0;master < varData.regionIndexCount; master++) {
      let scalar = 1;
      let regionIndex = varData.regionIndexes[master];
      let axes = itemStore.variationRegionList.variationRegions[regionIndex];
      for (let j = 0;j < axes.length; j++) {
        let axis = axes[j];
        let axisScalar;
        if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord)
          axisScalar = 1;
        else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0)
          axisScalar = 1;
        else if (axis.peakCoord === 0)
          axisScalar = 1;
        else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord)
          axisScalar = 0;
        else {
          if (normalizedCoords[j] === axis.peakCoord)
            axisScalar = 1;
          else if (normalizedCoords[j] < axis.peakCoord)
            axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) / (axis.peakCoord - axis.startCoord + Number.EPSILON);
          else
            axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) / (axis.endCoord - axis.peakCoord + Number.EPSILON);
        }
        scalar *= axisScalar;
      }
      blendVector[master] = scalar;
    }
    this.blendVectors.set(varData, blendVector);
    return blendVector;
  }
}
var $7768c4d2aa7d03a3$var$resolved = Promise.resolve();

class $7768c4d2aa7d03a3$export$2e2bcd8739ae039 {
  constructor(font) {
    this.font = font;
    this.glyphs = [];
    this.mapping = {};
    this.includeGlyph(0);
  }
  includeGlyph(glyph) {
    if (typeof glyph === "object")
      glyph = glyph.id;
    if (this.mapping[glyph] == null) {
      this.glyphs.push(glyph);
      this.mapping[glyph] = this.glyphs.length - 1;
    }
    return this.mapping[glyph];
  }
  encodeStream() {
    let s3 = new import_restructure.default.EncodeStream;
    $7768c4d2aa7d03a3$var$resolved.then(() => {
      this.encode(s3);
      return s3.end();
    });
    return s3;
  }
}
var $681deff774310865$var$ON_CURVE = 1;
var $681deff774310865$var$X_SHORT_VECTOR = 2;
var $681deff774310865$var$Y_SHORT_VECTOR = 4;
var $681deff774310865$var$REPEAT = 8;
var $681deff774310865$var$SAME_X = 16;
var $681deff774310865$var$SAME_Y = 32;

class $681deff774310865$var$Point {
  static size(val) {
    return val >= 0 && val <= 255 ? 1 : 2;
  }
  static encode(stream, value15) {
    if (value15 >= 0 && value15 <= 255)
      stream.writeUInt8(value15);
    else
      stream.writeInt16BE(value15);
  }
}
var $681deff774310865$var$Glyf = new import_restructure.default.Struct({
  numberOfContours: import_restructure.default.int16,
  xMin: import_restructure.default.int16,
  yMin: import_restructure.default.int16,
  xMax: import_restructure.default.int16,
  yMax: import_restructure.default.int16,
  endPtsOfContours: new import_restructure.default.Array(import_restructure.default.uint16, "numberOfContours"),
  instructions: new import_restructure.default.Array(import_restructure.default.uint8, import_restructure.default.uint16),
  flags: new import_restructure.default.Array(import_restructure.default.uint8, 0),
  xPoints: new import_restructure.default.Array($681deff774310865$var$Point, 0),
  yPoints: new import_restructure.default.Array($681deff774310865$var$Point, 0)
});

class $681deff774310865$export$2e2bcd8739ae039 {
  encodeSimple(path2, instructions = []) {
    let endPtsOfContours = [];
    let xPoints = [];
    let yPoints = [];
    let flags = [];
    let same = 0;
    let lastX = 0, lastY = 0, lastFlag = 0;
    let pointCount = 0;
    for (let i3 = 0;i3 < path2.commands.length; i3++) {
      let c3 = path2.commands[i3];
      for (let j = 0;j < c3.args.length; j += 2) {
        let x3 = c3.args[j];
        let y3 = c3.args[j + 1];
        let flag = 0;
        if (c3.command === "quadraticCurveTo" && j === 2) {
          let next = path2.commands[i3 + 1];
          if (next && next.command === "quadraticCurveTo") {
            let midX = (lastX + next.args[0]) / 2;
            let midY = (lastY + next.args[1]) / 2;
            if (x3 === midX && y3 === midY)
              continue;
          }
        }
        if (!(c3.command === "quadraticCurveTo" && j === 0))
          flag |= $681deff774310865$var$ON_CURVE;
        flag = this._encodePoint(x3, lastX, xPoints, flag, $681deff774310865$var$X_SHORT_VECTOR, $681deff774310865$var$SAME_X);
        flag = this._encodePoint(y3, lastY, yPoints, flag, $681deff774310865$var$Y_SHORT_VECTOR, $681deff774310865$var$SAME_Y);
        if (flag === lastFlag && same < 255) {
          flags[flags.length - 1] |= $681deff774310865$var$REPEAT;
          same++;
        } else {
          if (same > 0) {
            flags.push(same);
            same = 0;
          }
          flags.push(flag);
          lastFlag = flag;
        }
        lastX = x3;
        lastY = y3;
        pointCount++;
      }
      if (c3.command === "closePath")
        endPtsOfContours.push(pointCount - 1);
    }
    if (path2.commands.length > 1 && path2.commands[path2.commands.length - 1].command !== "closePath")
      endPtsOfContours.push(pointCount - 1);
    let bbox = path2.bbox;
    let glyf = {
      numberOfContours: endPtsOfContours.length,
      xMin: bbox.minX,
      yMin: bbox.minY,
      xMax: bbox.maxX,
      yMax: bbox.maxY,
      endPtsOfContours,
      instructions,
      flags,
      xPoints,
      yPoints
    };
    let size = $681deff774310865$var$Glyf.size(glyf);
    let tail = 4 - size % 4;
    let stream = new import_restructure.default.EncodeStream(size + tail);
    $681deff774310865$var$Glyf.encode(stream, glyf);
    if (tail !== 0)
      stream.fill(0, tail);
    return stream.buffer;
  }
  _encodePoint(value15, last, points, flag, shortFlag, sameFlag) {
    let diff = value15 - last;
    if (value15 === last)
      flag |= sameFlag;
    else {
      if (-255 <= diff && diff <= 255) {
        flag |= shortFlag;
        if (diff < 0)
          diff = -diff;
        else
          flag |= sameFlag;
      }
      points.push(diff);
    }
    return flag;
  }
}
var $06433914835b8dd7$require$Buffer = $5OpyM$Buffer;

class $06433914835b8dd7$export$2e2bcd8739ae039 extends $7768c4d2aa7d03a3$export$2e2bcd8739ae039 {
  constructor(font) {
    super(font);
    this.glyphEncoder = new $681deff774310865$export$2e2bcd8739ae039;
  }
  _addGlyph(gid) {
    let glyph = this.font.getGlyph(gid);
    let glyf = glyph._decode();
    let curOffset = this.font.loca.offsets[gid];
    let nextOffset = this.font.loca.offsets[gid + 1];
    let stream = this.font._getTableStream("glyf");
    stream.pos += curOffset;
    let buffer = stream.readBuffer(nextOffset - curOffset);
    if (glyf && glyf.numberOfContours < 0) {
      buffer = $06433914835b8dd7$require$Buffer.from(buffer);
      for (let component of glyf.components) {
        gid = this.includeGlyph(component.glyphID);
        buffer.writeUInt16BE(gid, component.pos);
      }
    } else if (glyf && this.font._variationProcessor)
      buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);
    this.glyf.push(buffer);
    this.loca.offsets.push(this.offset);
    this.hmtx.metrics.push({
      advance: glyph.advanceWidth,
      bearing: glyph._getMetrics().leftBearing
    });
    this.offset += buffer.length;
    return this.glyf.length - 1;
  }
  encode(stream) {
    this.glyf = [];
    this.offset = 0;
    this.loca = {
      offsets: [],
      version: this.font.loca.version
    };
    this.hmtx = {
      metrics: [],
      bearings: []
    };
    let i3 = 0;
    while (i3 < this.glyphs.length)
      this._addGlyph(this.glyphs[i3++]);
    let maxp = import_clone.default(this.font.maxp);
    maxp.numGlyphs = this.glyf.length;
    this.loca.offsets.push(this.offset);
    let head = import_clone.default(this.font.head);
    head.indexToLocFormat = this.loca.version;
    let hhea = import_clone.default(this.font.hhea);
    hhea.numberOfMetrics = this.hmtx.metrics.length;
    $d5e01a2298150c9a$export$2e2bcd8739ae039.encode(stream, {
      tables: {
        head,
        hhea,
        loca: this.loca,
        maxp,
        "cvt ": this.font["cvt "],
        prep: this.font.prep,
        glyf: this.glyf,
        hmtx: this.hmtx,
        fpgm: this.font.fpgm
      }
    });
  }
}
var $2d910ac31fc0baf3$require$Buffer = $5OpyM$Buffer;

class $2d910ac31fc0baf3$export$2e2bcd8739ae039 extends $7768c4d2aa7d03a3$export$2e2bcd8739ae039 {
  constructor(font) {
    super(font);
    this.cff = this.font["CFF "];
    if (!this.cff)
      throw new Error("Not a CFF Font");
  }
  subsetCharstrings() {
    this.charstrings = [];
    let gsubrs = {};
    for (let gid of this.glyphs) {
      this.charstrings.push(this.cff.getCharString(gid));
      let glyph = this.font.getGlyph(gid);
      let path2 = glyph.path;
      for (let subr in glyph._usedGsubrs)
        gsubrs[subr] = true;
    }
    this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);
  }
  subsetSubrs(subrs, used) {
    let res = [];
    for (let i3 = 0;i3 < subrs.length; i3++) {
      let subr = subrs[i3];
      if (used[i3]) {
        this.cff.stream.pos = subr.offset;
        res.push(this.cff.stream.readBuffer(subr.length));
      } else
        res.push($2d910ac31fc0baf3$require$Buffer.from([
          11
        ]));
    }
    return res;
  }
  subsetFontdict(topDict) {
    topDict.FDArray = [];
    topDict.FDSelect = {
      version: 0,
      fds: []
    };
    let used_fds = {};
    let used_subrs = [];
    let fd_select = {};
    for (let gid of this.glyphs) {
      let fd = this.cff.fdForGlyph(gid);
      if (fd == null)
        continue;
      if (!used_fds[fd]) {
        topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));
        used_subrs.push({});
        fd_select[fd] = topDict.FDArray.length - 1;
      }
      used_fds[fd] = true;
      topDict.FDSelect.fds.push(fd_select[fd]);
      let glyph = this.font.getGlyph(gid);
      let path2 = glyph.path;
      for (let subr in glyph._usedSubrs)
        used_subrs[fd_select[fd]][subr] = true;
    }
    for (let i3 = 0;i3 < topDict.FDArray.length; i3++) {
      let dict = topDict.FDArray[i3];
      delete dict.FontName;
      if (dict.Private && dict.Private.Subrs) {
        dict.Private = Object.assign({}, dict.Private);
        dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i3]);
      }
    }
    return;
  }
  createCIDFontdict(topDict) {
    let used_subrs = {};
    for (let gid of this.glyphs) {
      let glyph = this.font.getGlyph(gid);
      let path2 = glyph.path;
      for (let subr in glyph._usedSubrs)
        used_subrs[subr] = true;
    }
    let privateDict = Object.assign({}, this.cff.topDict.Private);
    if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs)
      privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);
    topDict.FDArray = [
      {
        Private: privateDict
      }
    ];
    return topDict.FDSelect = {
      version: 3,
      nRanges: 1,
      ranges: [
        {
          first: 0,
          fd: 0
        }
      ],
      sentinel: this.charstrings.length
    };
  }
  addString(string7) {
    if (!string7)
      return null;
    if (!this.strings)
      this.strings = [];
    this.strings.push(string7);
    return $276d3ff37a4362c9$export$2e2bcd8739ae039.length + this.strings.length - 1;
  }
  encode(stream) {
    this.subsetCharstrings();
    let charset = {
      version: this.charstrings.length > 255 ? 2 : 1,
      ranges: [
        {
          first: 1,
          nLeft: this.charstrings.length - 2
        }
      ]
    };
    let topDict = Object.assign({}, this.cff.topDict);
    topDict.Private = null;
    topDict.charset = charset;
    topDict.Encoding = null;
    topDict.CharStrings = this.charstrings;
    for (let key of [
      "version",
      "Notice",
      "Copyright",
      "FullName",
      "FamilyName",
      "Weight",
      "PostScript",
      "BaseFontName",
      "FontName"
    ])
      topDict[key] = this.addString(this.cff.string(topDict[key]));
    topDict.ROS = [
      this.addString("Adobe"),
      this.addString("Identity"),
      0
    ];
    topDict.CIDCount = this.charstrings.length;
    if (this.cff.isCIDFont)
      this.subsetFontdict(topDict);
    else
      this.createCIDFontdict(topDict);
    let top = {
      version: 1,
      hdrSize: this.cff.hdrSize,
      offSize: 4,
      header: this.cff.header,
      nameIndex: [
        this.cff.postscriptName
      ],
      topDictIndex: [
        topDict
      ],
      stringIndex: this.strings,
      globalSubrIndex: this.gsubrs
    };
    $3e41cd50e8921098$export$2e2bcd8739ae039.encode(stream, top);
  }
}
var _class;
var $7de97f725b51e05a$export$2e2bcd8739ae039 = (_class = class $7de97f725b51e05a$export$2e2bcd8739ae0392 {
  type = "TTF";
  static probe(buffer) {
    let format = buffer.toString("ascii", 0, 4);
    return format === "true" || format === "OTTO" || format === String.fromCharCode(0, 1, 0, 0);
  }
  constructor(stream, variationCoords = null) {
    this.defaultLanguage = null;
    this.stream = stream;
    this.variationCoords = variationCoords;
    this._directoryPos = this.stream.pos;
    this._tables = {};
    this._glyphs = {};
    this._decodeDirectory();
    for (let tag in this.directory.tables) {
      let table = this.directory.tables[tag];
      if ($60d88718e7e1fa97$export$2e2bcd8739ae039[tag] && table.length > 0)
        Object.defineProperty(this, tag, {
          get: this._getTable.bind(this, table)
        });
    }
  }
  setDefaultLanguage(lang = null) {
    this.defaultLanguage = lang;
  }
  _getTable(table) {
    if (!(table.tag in this._tables))
      try {
        this._tables[table.tag] = this._decodeTable(table);
      } catch (e) {
        if ($8857867ee3ddfad5$export$bd5c5d8b8dcafd78) {
          console.error(`Error decoding table ${table.tag}`);
          console.error(e.stack);
        }
      }
    return this._tables[table.tag];
  }
  _getTableStream(tag) {
    let table = this.directory.tables[tag];
    if (table) {
      this.stream.pos = table.offset;
      return this.stream;
    }
    return null;
  }
  _decodeDirectory() {
    return this.directory = $d5e01a2298150c9a$export$2e2bcd8739ae039.decode(this.stream, {
      _startOffset: 0
    });
  }
  _decodeTable(table) {
    let pos = this.stream.pos;
    let stream = this._getTableStream(table.tag);
    let result = $60d88718e7e1fa97$export$2e2bcd8739ae039[table.tag].decode(stream, this, table.length);
    this.stream.pos = pos;
    return result;
  }
  getName(key, lang = this.defaultLanguage || $8857867ee3ddfad5$export$42940898df819940) {
    let record4 = this.name && this.name.records[key];
    if (record4)
      return record4[lang] || record4[this.defaultLanguage] || record4[$8857867ee3ddfad5$export$42940898df819940] || record4["en"] || record4[Object.keys(record4)[0]] || null;
    return null;
  }
  get postscriptName() {
    return this.getName("postscriptName");
  }
  get fullName() {
    return this.getName("fullName");
  }
  get familyName() {
    return this.getName("fontFamily");
  }
  get subfamilyName() {
    return this.getName("fontSubfamily");
  }
  get copyright() {
    return this.getName("copyright");
  }
  get version() {
    return this.getName("version");
  }
  get ascent() {
    return this.hhea.ascent;
  }
  get descent() {
    return this.hhea.descent;
  }
  get lineGap() {
    return this.hhea.lineGap;
  }
  get underlinePosition() {
    return this.post.underlinePosition;
  }
  get underlineThickness() {
    return this.post.underlineThickness;
  }
  get italicAngle() {
    return this.post.italicAngle;
  }
  get capHeight() {
    let os2 = this["OS/2"];
    return os2 ? os2.capHeight : this.ascent;
  }
  get xHeight() {
    let os2 = this["OS/2"];
    return os2 ? os2.xHeight : 0;
  }
  get numGlyphs() {
    return this.maxp.numGlyphs;
  }
  get unitsPerEm() {
    return this.head.unitsPerEm;
  }
  get bbox() {
    return Object.freeze(new $fcb46e14b01ea01f$export$2e2bcd8739ae039(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));
  }
  get _cmapProcessor() {
    return new $5d24cfe1a4cd83bb$export$2e2bcd8739ae039(this.cmap);
  }
  get characterSet() {
    return this._cmapProcessor.getCharacterSet();
  }
  hasGlyphForCodePoint(codePoint) {
    return !!this._cmapProcessor.lookup(codePoint);
  }
  glyphForCodePoint(codePoint) {
    return this.getGlyph(this._cmapProcessor.lookup(codePoint), [
      codePoint
    ]);
  }
  glyphsForString(string7) {
    let glyphs = [];
    let len = string7.length;
    let idx = 0;
    let last = -1;
    let state = -1;
    while (idx <= len) {
      let code = 0;
      let nextState = 0;
      if (idx < len) {
        code = string7.charCodeAt(idx++);
        if (55296 <= code && code <= 56319 && idx < len) {
          let next = string7.charCodeAt(idx);
          if (56320 <= next && next <= 57343) {
            idx++;
            code = ((code & 1023) << 10) + (next & 1023) + 65536;
          }
        }
        nextState = 65024 <= code && code <= 65039 || 917760 <= code && code <= 917999 ? 1 : 0;
      } else
        idx++;
      if (state === 0 && nextState === 1)
        glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [
          last,
          code
        ]));
      else if (state === 0 && nextState === 0)
        glyphs.push(this.glyphForCodePoint(last));
      last = code;
      state = nextState;
    }
    return glyphs;
  }
  get _layoutEngine() {
    return new $2df783177c3b5db5$export$2e2bcd8739ae039(this);
  }
  layout(string7, userFeatures, script, language, direction) {
    return this._layoutEngine.layout(string7, userFeatures, script, language, direction);
  }
  stringsForGlyph(gid) {
    return this._layoutEngine.stringsForGlyph(gid);
  }
  get availableFeatures() {
    return this._layoutEngine.getAvailableFeatures();
  }
  getAvailableFeatures(script, language) {
    return this._layoutEngine.getAvailableFeatures(script, language);
  }
  _getBaseGlyph(glyph, characters = []) {
    if (!this._glyphs[glyph]) {
      if (this.directory.tables.glyf)
        this._glyphs[glyph] = new $e20fdd09923e4c19$export$2e2bcd8739ae039(glyph, characters, this);
      else if (this.directory.tables["CFF "] || this.directory.tables.CFF2)
        this._glyphs[glyph] = new $efcf21464e1e0f88$export$2e2bcd8739ae039(glyph, characters, this);
    }
    return this._glyphs[glyph] || null;
  }
  getGlyph(glyph, characters = []) {
    if (!this._glyphs[glyph]) {
      if (this.directory.tables.sbix)
        this._glyphs[glyph] = new $df50792647a3d5cf$export$2e2bcd8739ae039(glyph, characters, this);
      else if (this.directory.tables.COLR && this.directory.tables.CPAL)
        this._glyphs[glyph] = new $729b375ce67e8a00$export$2e2bcd8739ae039(glyph, characters, this);
      else
        this._getBaseGlyph(glyph, characters);
    }
    return this._glyphs[glyph] || null;
  }
  createSubset() {
    if (this.directory.tables["CFF "])
      return new $2d910ac31fc0baf3$export$2e2bcd8739ae039(this);
    return new $06433914835b8dd7$export$2e2bcd8739ae039(this);
  }
  get variationAxes() {
    let res = {};
    if (!this.fvar)
      return res;
    for (let axis of this.fvar.axis)
      res[axis.axisTag.trim()] = {
        name: axis.name.en,
        min: axis.minValue,
        default: axis.defaultValue,
        max: axis.maxValue
      };
    return res;
  }
  get namedVariations() {
    let res = {};
    if (!this.fvar)
      return res;
    for (let instance of this.fvar.instance) {
      let settings = {};
      for (let i3 = 0;i3 < this.fvar.axis.length; i3++) {
        let axis = this.fvar.axis[i3];
        settings[axis.axisTag.trim()] = instance.coord[i3];
      }
      res[instance.name.en] = settings;
    }
    return res;
  }
  getVariation(settings) {
    if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2)))
      throw new Error("Variations require a font with the fvar, gvar and glyf, or CFF2 tables.");
    if (typeof settings === "string")
      settings = this.namedVariations[settings];
    if (typeof settings !== "object")
      throw new Error("Variation settings must be either a variation name or settings object.");
    let coords = this.fvar.axis.map((axis, i3) => {
      let axisTag = axis.axisTag.trim();
      if (axisTag in settings)
        return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));
      else
        return axis.defaultValue;
    });
    let stream = new import_restructure.default.DecodeStream(this.stream.buffer);
    stream.pos = this._directoryPos;
    let font = new $7de97f725b51e05a$export$2e2bcd8739ae0392(stream, coords);
    font._tables = this._tables;
    return font;
  }
  get _variationProcessor() {
    if (!this.fvar)
      return null;
    let variationCoords = this.variationCoords;
    if (!variationCoords && !this.CFF2)
      return null;
    if (!variationCoords)
      variationCoords = this.fvar.axis.map((axis) => axis.defaultValue);
    return new $62b2d77b45b438f3$export$2e2bcd8739ae039(this, variationCoords);
  }
  getFont(name) {
    return this.getVariation(name);
  }
}, _applyDecoratedDescriptor(_class.prototype, "bbox", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "bbox"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_cmapProcessor", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "_cmapProcessor"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "characterSet", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "characterSet"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_layoutEngine", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "_layoutEngine"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "variationAxes", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "variationAxes"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "namedVariations", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "namedVariations"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_variationProcessor", [
  $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "_variationProcessor"), _class.prototype), _class);
var $ab5f467accf33238$var$WOFFDirectoryEntry = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  offset: new import_restructure.default.Pointer(import_restructure.default.uint32, "void", {
    type: "global"
  }),
  compLength: import_restructure.default.uint32,
  length: import_restructure.default.uint32,
  origChecksum: import_restructure.default.uint32
});
var $ab5f467accf33238$var$WOFFDirectory = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  flavor: import_restructure.default.uint32,
  length: import_restructure.default.uint32,
  numTables: import_restructure.default.uint16,
  reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
  totalSfntSize: import_restructure.default.uint32,
  majorVersion: import_restructure.default.uint16,
  minorVersion: import_restructure.default.uint16,
  metaOffset: import_restructure.default.uint32,
  metaLength: import_restructure.default.uint32,
  metaOrigLength: import_restructure.default.uint32,
  privOffset: import_restructure.default.uint32,
  privLength: import_restructure.default.uint32,
  tables: new import_restructure.default.Array($ab5f467accf33238$var$WOFFDirectoryEntry, "numTables")
});
$ab5f467accf33238$var$WOFFDirectory.process = function() {
  let tables = {};
  for (let table of this.tables)
    tables[table.tag] = table;
  this.tables = tables;
};
var $ab5f467accf33238$export$2e2bcd8739ae039 = $ab5f467accf33238$var$WOFFDirectory;
var $fce99fef0398d8c8$require$Buffer = $5OpyM$Buffer;

class $fce99fef0398d8c8$export$2e2bcd8739ae039 extends $7de97f725b51e05a$export$2e2bcd8739ae039 {
  type = "WOFF";
  static probe(buffer) {
    return buffer.toString("ascii", 0, 4) === "wOFF";
  }
  _decodeDirectory() {
    this.directory = $ab5f467accf33238$export$2e2bcd8739ae039.decode(this.stream, {
      _startOffset: 0
    });
  }
  _getTableStream(tag) {
    let table = this.directory.tables[tag];
    if (table) {
      this.stream.pos = table.offset;
      if (table.compLength < table.length) {
        this.stream.pos += 2;
        let outBuffer = $fce99fef0398d8c8$require$Buffer.alloc(table.length);
        let buf = import_tiny_inflate.default(this.stream.readBuffer(table.compLength - 2), outBuffer);
        return new import_restructure.default.DecodeStream(buf);
      } else
        return this.stream;
    }
    return null;
  }
}

class $f6f1feff1ba0de68$export$2e2bcd8739ae039 extends $e20fdd09923e4c19$export$2e2bcd8739ae039 {
  type = "WOFF2";
  _decode() {
    return this._font._transformedGlyphs[this.id];
  }
  _getCBox() {
    return this.path.bbox;
  }
}
var $4965cf368c868bf6$var$Base128 = {
  decode(stream) {
    let result = 0;
    let iterable = [
      0,
      1,
      2,
      3,
      4
    ];
    for (let j = 0;j < iterable.length; j++) {
      let i3 = iterable[j];
      let code = stream.readUInt8();
      if (result & 3758096384)
        throw new Error("Overflow");
      result = result << 7 | code & 127;
      if ((code & 128) === 0)
        return result;
    }
    throw new Error("Bad base 128 number");
  }
};
var $4965cf368c868bf6$var$knownTags = [
  "cmap",
  "head",
  "hhea",
  "hmtx",
  "maxp",
  "name",
  "OS/2",
  "post",
  "cvt ",
  "fpgm",
  "glyf",
  "loca",
  "prep",
  "CFF ",
  "VORG",
  "EBDT",
  "EBLC",
  "gasp",
  "hdmx",
  "kern",
  "LTSH",
  "PCLT",
  "VDMX",
  "vhea",
  "vmtx",
  "BASE",
  "GDEF",
  "GPOS",
  "GSUB",
  "EBSC",
  "JSTF",
  "MATH",
  "CBDT",
  "CBLC",
  "COLR",
  "CPAL",
  "SVG ",
  "sbix",
  "acnt",
  "avar",
  "bdat",
  "bloc",
  "bsln",
  "cvar",
  "fdsc",
  "feat",
  "fmtx",
  "fvar",
  "gvar",
  "hsty",
  "just",
  "lcar",
  "mort",
  "morx",
  "opbd",
  "prop",
  "trak",
  "Zapf",
  "Silf",
  "Glat",
  "Gloc",
  "Feat",
  "Sill"
];
var $4965cf368c868bf6$var$WOFF2DirectoryEntry = new import_restructure.default.Struct({
  flags: import_restructure.default.uint8,
  customTag: new import_restructure.default.Optional(new import_restructure.default.String(4), (t3) => (t3.flags & 63) === 63),
  tag: (t3) => t3.customTag || $4965cf368c868bf6$var$knownTags[t3.flags & 63],
  length: $4965cf368c868bf6$var$Base128,
  transformVersion: (t3) => t3.flags >>> 6 & 3,
  transformed: (t3) => t3.tag === "glyf" || t3.tag === "loca" ? t3.transformVersion === 0 : t3.transformVersion !== 0,
  transformLength: new import_restructure.default.Optional($4965cf368c868bf6$var$Base128, (t3) => t3.transformed)
});
var $4965cf368c868bf6$var$WOFF2Directory = new import_restructure.default.Struct({
  tag: new import_restructure.default.String(4),
  flavor: import_restructure.default.uint32,
  length: import_restructure.default.uint32,
  numTables: import_restructure.default.uint16,
  reserved: new import_restructure.default.Reserved(import_restructure.default.uint16),
  totalSfntSize: import_restructure.default.uint32,
  totalCompressedSize: import_restructure.default.uint32,
  majorVersion: import_restructure.default.uint16,
  minorVersion: import_restructure.default.uint16,
  metaOffset: import_restructure.default.uint32,
  metaLength: import_restructure.default.uint32,
  metaOrigLength: import_restructure.default.uint32,
  privOffset: import_restructure.default.uint32,
  privLength: import_restructure.default.uint32,
  tables: new import_restructure.default.Array($4965cf368c868bf6$var$WOFF2DirectoryEntry, "numTables")
});
$4965cf368c868bf6$var$WOFF2Directory.process = function() {
  let tables = {};
  for (let i3 = 0;i3 < this.tables.length; i3++) {
    let table = this.tables[i3];
    tables[table.tag] = table;
  }
  return this.tables = tables;
};
var $4965cf368c868bf6$export$2e2bcd8739ae039 = $4965cf368c868bf6$var$WOFF2Directory;
var $b6deb9db8685274b$require$Buffer = $5OpyM$Buffer;

class $b6deb9db8685274b$export$2e2bcd8739ae039 extends $7de97f725b51e05a$export$2e2bcd8739ae039 {
  type = "WOFF2";
  static probe(buffer) {
    return buffer.toString("ascii", 0, 4) === "wOF2";
  }
  _decodeDirectory() {
    this.directory = $4965cf368c868bf6$export$2e2bcd8739ae039.decode(this.stream);
    this._dataPos = this.stream.pos;
  }
  _decompress() {
    if (!this._decompressed) {
      this.stream.pos = this._dataPos;
      let buffer = this.stream.readBuffer(this.directory.totalCompressedSize);
      let decompressedSize = 0;
      for (let tag in this.directory.tables) {
        let entry = this.directory.tables[tag];
        entry.offset = decompressedSize;
        decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;
      }
      let decompressed = decompress.default(buffer, decompressedSize);
      if (!decompressed)
        throw new Error("Error decoding compressed data in WOFF2");
      this.stream = new import_restructure.default.DecodeStream($b6deb9db8685274b$require$Buffer.from(decompressed));
      this._decompressed = true;
    }
  }
  _decodeTable(table) {
    this._decompress();
    return super._decodeTable(table);
  }
  _getBaseGlyph(glyph, characters = []) {
    if (!this._glyphs[glyph]) {
      if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {
        if (!this._transformedGlyphs)
          this._transformGlyfTable();
        return this._glyphs[glyph] = new $f6f1feff1ba0de68$export$2e2bcd8739ae039(glyph, characters, this);
      } else
        return super._getBaseGlyph(glyph, characters);
    }
  }
  _transformGlyfTable() {
    this._decompress();
    this.stream.pos = this.directory.tables.glyf.offset;
    let table = $b6deb9db8685274b$var$GlyfTable.decode(this.stream);
    let glyphs = [];
    for (let index = 0;index < table.numGlyphs; index++) {
      let glyph = {};
      let nContours = table.nContours.readInt16BE();
      glyph.numberOfContours = nContours;
      if (nContours > 0) {
        let nPoints = [];
        let totalPoints = 0;
        for (let i3 = 0;i3 < nContours; i3++) {
          let r = $b6deb9db8685274b$var$read255UInt16(table.nPoints);
          totalPoints += r;
          nPoints.push(totalPoints);
        }
        glyph.points = $b6deb9db8685274b$var$decodeTriplet(table.flags, table.glyphs, totalPoints);
        for (let i12 = 0;i12 < nContours; i12++)
          glyph.points[nPoints[i12] - 1].endContour = true;
        var instructionSize = $b6deb9db8685274b$var$read255UInt16(table.glyphs);
      } else if (nContours < 0) {
        let haveInstructions = $e20fdd09923e4c19$export$2e2bcd8739ae039.prototype._decodeComposite.call({
          _font: this
        }, glyph, table.composites);
        if (haveInstructions)
          var instructionSize = $b6deb9db8685274b$var$read255UInt16(table.glyphs);
      }
      glyphs.push(glyph);
    }
    this._transformedGlyphs = glyphs;
  }
}

class $b6deb9db8685274b$var$Substream {
  constructor(length) {
    this.length = length;
    this._buf = new import_restructure.default.Buffer(length);
  }
  decode(stream, parent) {
    return new import_restructure.default.DecodeStream(this._buf.decode(stream, parent));
  }
}
var $b6deb9db8685274b$var$GlyfTable = new import_restructure.default.Struct({
  version: import_restructure.default.uint32,
  numGlyphs: import_restructure.default.uint16,
  indexFormat: import_restructure.default.uint16,
  nContourStreamSize: import_restructure.default.uint32,
  nPointsStreamSize: import_restructure.default.uint32,
  flagStreamSize: import_restructure.default.uint32,
  glyphStreamSize: import_restructure.default.uint32,
  compositeStreamSize: import_restructure.default.uint32,
  bboxStreamSize: import_restructure.default.uint32,
  instructionStreamSize: import_restructure.default.uint32,
  nContours: new $b6deb9db8685274b$var$Substream("nContourStreamSize"),
  nPoints: new $b6deb9db8685274b$var$Substream("nPointsStreamSize"),
  flags: new $b6deb9db8685274b$var$Substream("flagStreamSize"),
  glyphs: new $b6deb9db8685274b$var$Substream("glyphStreamSize"),
  composites: new $b6deb9db8685274b$var$Substream("compositeStreamSize"),
  bboxes: new $b6deb9db8685274b$var$Substream("bboxStreamSize"),
  instructions: new $b6deb9db8685274b$var$Substream("instructionStreamSize")
});
var $b6deb9db8685274b$var$WORD_CODE = 253;
var $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE2 = 254;
var $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE1 = 255;
var $b6deb9db8685274b$var$LOWEST_U_CODE = 253;
var $313c698c6d2649a4$require$Buffer = $5OpyM$Buffer;
var $313c698c6d2649a4$var$TTCHeader = new import_restructure.default.VersionedStruct(import_restructure.default.uint32, {
  65536: {
    numFonts: import_restructure.default.uint32,
    offsets: new import_restructure.default.Array(import_restructure.default.uint32, "numFonts")
  },
  131072: {
    numFonts: import_restructure.default.uint32,
    offsets: new import_restructure.default.Array(import_restructure.default.uint32, "numFonts"),
    dsigTag: import_restructure.default.uint32,
    dsigLength: import_restructure.default.uint32,
    dsigOffset: import_restructure.default.uint32
  }
});

class $313c698c6d2649a4$export$2e2bcd8739ae039 {
  type = "TTC";
  static probe(buffer) {
    return buffer.toString("ascii", 0, 4) === "ttcf";
  }
  constructor(stream) {
    this.stream = stream;
    if (stream.readString(4) !== "ttcf")
      throw new Error("Not a TrueType collection");
    this.header = $313c698c6d2649a4$var$TTCHeader.decode(stream);
  }
  getFont(name) {
    for (let offset of this.header.offsets) {
      let stream = new import_restructure.default.DecodeStream(this.stream.buffer);
      stream.pos = offset;
      let font = new $7de97f725b51e05a$export$2e2bcd8739ae039(stream);
      if ($313c698c6d2649a4$require$Buffer.isBuffer(font.postscriptName) && font.postscriptName.equals(name) || font.postscriptName === name)
        return font;
    }
    return null;
  }
  get fonts() {
    let fonts = [];
    for (let offset of this.header.offsets) {
      let stream = new import_restructure.default.DecodeStream(this.stream.buffer);
      stream.pos = offset;
      fonts.push(new $7de97f725b51e05a$export$2e2bcd8739ae039(stream));
    }
    return fonts;
  }
}
var $7db119589c227f03$require$Buffer = $5OpyM$Buffer;
var $7db119589c227f03$var$DFontName = new import_restructure.default.String(import_restructure.default.uint8);
var $7db119589c227f03$var$DFontData = new import_restructure.default.Struct({
  len: import_restructure.default.uint32,
  buf: new import_restructure.default.Buffer("len")
});
var $7db119589c227f03$var$Ref = new import_restructure.default.Struct({
  id: import_restructure.default.uint16,
  nameOffset: import_restructure.default.int16,
  attr: import_restructure.default.uint8,
  dataOffset: import_restructure.default.uint24,
  handle: import_restructure.default.uint32
});
var $7db119589c227f03$var$Type = new import_restructure.default.Struct({
  name: new import_restructure.default.String(4),
  maxTypeIndex: import_restructure.default.uint16,
  refList: new import_restructure.default.Pointer(import_restructure.default.uint16, new import_restructure.default.Array($7db119589c227f03$var$Ref, (t3) => t3.maxTypeIndex + 1), {
    type: "parent"
  })
});
var $7db119589c227f03$var$TypeList = new import_restructure.default.Struct({
  length: import_restructure.default.uint16,
  types: new import_restructure.default.Array($7db119589c227f03$var$Type, (t3) => t3.length + 1)
});
var $7db119589c227f03$var$DFontMap = new import_restructure.default.Struct({
  reserved: new import_restructure.default.Reserved(import_restructure.default.uint8, 24),
  typeList: new import_restructure.default.Pointer(import_restructure.default.uint16, $7db119589c227f03$var$TypeList),
  nameListOffset: new import_restructure.default.Pointer(import_restructure.default.uint16, "void")
});
var $7db119589c227f03$var$DFontHeader = new import_restructure.default.Struct({
  dataOffset: import_restructure.default.uint32,
  map: new import_restructure.default.Pointer(import_restructure.default.uint32, $7db119589c227f03$var$DFontMap),
  dataLength: import_restructure.default.uint32,
  mapLength: import_restructure.default.uint32
});

class $7db119589c227f03$export$2e2bcd8739ae039 {
  type = "DFont";
  static probe(buffer) {
    let stream = new import_restructure.default.DecodeStream(buffer);
    try {
      var header = $7db119589c227f03$var$DFontHeader.decode(stream);
    } catch (e) {
      return false;
    }
    for (let type47 of header.map.typeList.types) {
      if (type47.name === "sfnt")
        return true;
    }
    return false;
  }
  constructor(stream) {
    this.stream = stream;
    this.header = $7db119589c227f03$var$DFontHeader.decode(this.stream);
    for (let type47 of this.header.map.typeList.types) {
      for (let ref4 of type47.refList)
        if (ref4.nameOffset >= 0) {
          this.stream.pos = ref4.nameOffset + this.header.map.nameListOffset;
          ref4.name = $7db119589c227f03$var$DFontName.decode(this.stream);
        } else
          ref4.name = null;
      if (type47.name === "sfnt")
        this.sfnt = type47;
    }
  }
  getFont(name) {
    if (!this.sfnt)
      return null;
    for (let ref4 of this.sfnt.refList) {
      let pos = this.header.dataOffset + ref4.dataOffset + 4;
      let stream = new import_restructure.default.DecodeStream(this.stream.buffer.slice(pos));
      let font = new $7de97f725b51e05a$export$2e2bcd8739ae039(stream);
      if ($7db119589c227f03$require$Buffer.isBuffer(font.postscriptName) && font.postscriptName.equals(name) || font.postscriptName === name)
        return font;
    }
    return null;
  }
  get fonts() {
    let fonts = [];
    for (let ref4 of this.sfnt.refList) {
      let pos = this.header.dataOffset + ref4.dataOffset + 4;
      let stream = new import_restructure.default.DecodeStream(this.stream.buffer.slice(pos));
      fonts.push(new $7de97f725b51e05a$export$2e2bcd8739ae039(stream));
    }
    return fonts;
  }
}
$8857867ee3ddfad5$export$36b2f24e97d43be($7de97f725b51e05a$export$2e2bcd8739ae039);
$8857867ee3ddfad5$export$36b2f24e97d43be($fce99fef0398d8c8$export$2e2bcd8739ae039);
$8857867ee3ddfad5$export$36b2f24e97d43be($b6deb9db8685274b$export$2e2bcd8739ae039);
$8857867ee3ddfad5$export$36b2f24e97d43be($313c698c6d2649a4$export$2e2bcd8739ae039);
$8857867ee3ddfad5$export$36b2f24e97d43be($7db119589c227f03$export$2e2bcd8739ae039);
var $cf838c15c8b009ba$export$2e2bcd8739ae039 = {
  registerFormat: $8857867ee3ddfad5$export$36b2f24e97d43be,
  openSync: $8857867ee3ddfad5$export$fa5499edb1ab414a,
  open: $8857867ee3ddfad5$export$3ce6949f20cea765,
  create: $8857867ee3ddfad5$export$185802fd694ee1f5,
  defaultLanguage: $8857867ee3ddfad5$export$42940898df819940,
  setDefaultLanguage: $8857867ee3ddfad5$export$5157e7780d44cc36
};

// node_modules/pdfkit/js/pdfkit.es.js
import {EventEmitter} from "events";

// node_modules/linebreak/dist/module.mjs
var import_unicode_trie3 = __toESM(require_unicode_trie(), 1);
var import_base64_js2 = __toESM(require_b64(), 1);
var $557adaaeb0c7885f$exports = {};
var $1627905f8be2ef3f$export$fb4028874a74450 = 5;
var $1627905f8be2ef3f$export$1bb1140fe1358b00 = 12;
var $1627905f8be2ef3f$export$f3e416a182673355 = 13;
var $1627905f8be2ef3f$export$24aa617c849a894a = 16;
var $1627905f8be2ef3f$export$a73c4d14459b698d = 17;
var $1627905f8be2ef3f$export$9e5d732f3676a9ba = 22;
var $1627905f8be2ef3f$export$1dff41d5c0caca01 = 28;
var $1627905f8be2ef3f$export$30a74a373318dec6 = 31;
var $1627905f8be2ef3f$export$d710c5f50fc7496a = 33;
var $1627905f8be2ef3f$export$66498d28055820a9 = 34;
var $1627905f8be2ef3f$export$eb6c6d0b7c8826f2 = 35;
var $1627905f8be2ef3f$export$de92be486109a1df = 36;
var $1627905f8be2ef3f$export$606cfc2a8896c91f = 37;
var $1627905f8be2ef3f$export$e51d3c675bb0140d = 38;
var $1627905f8be2ef3f$export$da51c6332ad11d7b = 39;
var $1627905f8be2ef3f$export$bea437c40441867d = 40;
var $1627905f8be2ef3f$export$c4c7eecbfed13dc9 = 41;
var $1627905f8be2ef3f$export$98e1f8a379849661 = 42;
var $32627af916ac1b00$export$98f50d781a474745 = 0;
var $32627af916ac1b00$export$12ee1f8f5315ca7e = 1;
var $32627af916ac1b00$export$e4965ce242860454 = 2;
var $32627af916ac1b00$export$8f14048969dcd45e = 3;
var $32627af916ac1b00$export$133eb141bf58aff4 = 4;
var $32627af916ac1b00$export$5bdb8ccbf5c57afc = [
  [
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$8f14048969dcd45e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ],
  [
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$e4965ce242860454,
    $32627af916ac1b00$export$133eb141bf58aff4,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$98f50d781a474745,
    $32627af916ac1b00$export$12ee1f8f5315ca7e,
    $32627af916ac1b00$export$98f50d781a474745
  ]
];
var $557adaaeb0c7885f$var$data = import_base64_js2.default.toByteArray("AAgOAAAAAAAQ4QAAAQ0P8vDtnQuMXUUZx+eyu7d7797d9m5bHoWltKVUlsjLWE0VJNigQoMVqkStEoNQQUl5GIo1KKmogEgqkKbBRki72lYabZMGKoGAjQRtJJDaCCIRiiigREBQS3z+xzOTnZ3O+3HOhd5NfpkzZx7fN9988zivu2M9hGwB28F94DnwEngd/Asc1EtIs9c/bIPDwCxwLDgezHcodyo4w5C+CCwBS8FnwSXgCnA1uFbI93XwbXAbWAfWgx+CzWAb+An4KfgFeAzsYWWfYuFz4CXwGvgb+Dfo6yNkEEwGh4CZYB44FpwI3g1OY+kfBItZOo2fB84Hy8DF4HJwNbiWpV8PVoO1LH4n2NRXyN+KcAd4kNVP9XsY4aPgcfAbsBfs6SniL4K/sPjfEf6HlanXCRkCw2BGvUh/keWfXS/CY+pFXs7x9XHmM94LTmWIeU2cgbxnS/k/B3kf86jDhU8L9V2E40vAFWAlWFUfb++NOL4F3C7JX4/4GiE+hvgWsF0oS7mXldspnN+F493gyXrh9xTav0cg3EvzgVfBG6wsmVSEkxBOBgdPGpd7JI6PnqRvJ68/xlbHof53gPeA94OzwLngk+ACsAwsByvASrAK3MB0Ws3CtQjvBJvAVrADPMDSHkb4CNijaccTwvnf4fiPEs8Lxy+D18A/QU8/xjgYBjPAbDAKTgYLwOngTHAO+EQ/8wuEF4EvsPiVCFf2+9tsFStzA8LVHuXXBsi6QyqzUYiPMR/7Mc7dAx7oL8bzw/3u/Bw8Bp4Az4AXwCtgHzsmDXP5fiF9iiVvly5d0sHngar16NKlS5cuXbp06fLmYlqHXrcd3ph4P0THUY3iXh49novju4S0tzfs5d+JPKewfAsRntZb3K9ZhOMlrO6lCC8An28U9+OuovcPcPxlVu5rCL/VmHh/iHIrzn3fIPu7SN8Axmg+8AOwEWwCm7tp3bRuWjetm5Y8bSu4B9zbKO6ZVsnORrVU3f4uXTqZ2H3sLoyx3eDXjfDndE9qyj6L838CfwVvgFpzYnof4oNgOhgBc8Fos9DrZIQLmtXPP1MmF6wGj4H+KXoWguvADkXaPil+YpuQy8Am8Ey7ODdtmJDF4HowBp4De6HDTNjhfHAHeBr0DBBy0kDxfPbcgSIusgrcWhtnJ8vL+TPix7UIOQtcBq4C28Cr4KRBnANbwSuDE+s50JgyNNFuXbp06XIgsXjIvPafjvXozKY+fVFz/z0LT1uCtKVSWbrOLWPnztG8e0Xfy7ol8XtZJi7WtG+5od2UFXQ/A12vUeS7jp27yVKHjdsU9lXB869TyNvAzt0lpP2oWbwLdjiO78bx/Sz+EMJHwK9Y/LcIfw+eZ3F67/Hl5vh9xX80J+rwX8SvRDhpgL17iPAQMHNArfPrqHPewLheI+AERV6efwV418B4nOZ/H+IfYHV8GOF5LJ3eAz0fx8sM9S0fUNud39O9CulfGZhY5huI3wzWgNvBelbHZoTbNPVpfYjKQpkHwUNgl0LWblbnk0LbbDxr0OMFpL3iqWdu9nWYPlVAWkXY39LnGdCkDbeqv1YNbfcMQ3t9oe8lzm6NH9N1ZB6Ln4BwfkJZJk7RyFnYKt6b/JDQXx9p5X+eFdqOjzM9P9MB/lUlFzr20aXIdzlY4dmn9F3YqtvoO76/2hp/D/xA5Zue88nNyL8GbFbs075X0tyUig3Qd2MCnf//HjnzpbsR3g9+1kHzzVjdnE71/qVBX9rGPUh/ysNWe1neFzvIDi5zAufV1sT0N0poR22wkFUfTOPfA4N2mbZ5fSrqOHSw+IbkSBbOGSzSRgf91/GTUWYBOB2cIZQ/G8cfBZ8CFwrnL8XxF8FKcA24jqXdiPA7Qr61OF7H4mMItwzuv2/YLth1ISt3Hzu3k4W7EH5JqPdRHD/O4k+z8A8IX5Lq3y7Z4nXE9xn6kX6vQ4bKfy+ok+hH+xf3hq9dnTTHhjKd2GmDuWA242iHMq4cC7A8kJ7i8o1+skSa7Jieo38HCWnoNjKFhdSFBxzpZ7QE6lI8N4S14aASZcryaV/WWHw66f6NHuCoxuQxmvM56GX9QMd8Q4D65ywGP+ZzRJuM+zQvx/MOS2VFeqQ4IXnH26zM9Xe6/E6D+4foAzzuajPZp8Qyw5ayZVDWuH0z0BtYRkeIDqH9KO9VbH1btd/lhNqCzvl8zeLnG0S/hnU6baHfpiuO6yy0rd+DHURo/zYF5H26j03rQsip2ndzz82u1z9N4VjWKWeb68Tedpt95HRVXp7H1R6p+/Wt4FPy/PpWwscOLRJ+PVWF/+W0iVyGzs18TIvXkOJ1Wxm66vSXz+vylenrZcj1ub439W+K8RNCGTJi2p/TJ1K23VaXr35tRpnzmjxequgfcfyk6B/TGBVlyedsNgpdd/h+W1U3P99QyFPNo1X3TwpM/WLTIWYfoBqXrv6iskHZ/RFr79R6hIyHBrH3f1nrUVnjP8SnZZ+rYtzr9Exld5MNbPNErusAPg+77u/eDOPftU9yj39TH7rezxd1LvsZQJlzkWlOirG/79zjMj/mtHUKu7vKy+3/LnXr9okyKedjX5/0He9iP/j63LwOQdarEVlfy8OO/Lqw023j6xcqmwxLiOd6heM2i9cV9LJy8jMJ23yQ+rpbfu7EQ/pXE8KYvUSqvVnb4XzZa6LrHMXHR+zcLvqWbm/Bn0/HzIs6fWPHoat8XfnDKmZGxRxeMbn2UqZ5Q94nmcZRbqqUXbZ8+lcjE+cPX11t814orvvAXNcG8vqj2vvk1MGn3anlj0bIT72v47bvE+Lc98T9b6r7AKn6j+8Duf7D0nnZx/j7Zjn0j9nbpSTndaLr9WNLivP+iN23xF7L+fqv6ZouFyb78jxVXvv5jJ9YUs9/sddO8h7KNg5jrhfaJGztT6G7KF+1d6yCmD5Kdb2fan60rSc552fZr3zeQ9DpnPp+Si5cx5Ktv2QfSzF/mMbWdOm46rFI4XstnU9xeqX4NKb7TKEdcr6pZOK3ID1k/LvFHkVczEuZLEDr499YqvqBym1aEHWgcvoYOtv0M91qQl5TfpO/in6rWx8OVpT1Wedkv3f5xom3T/xeR/6Gx6V86PWAOB4bBpqWdN+yTcVxjIyGRz/FrDGu6w/3d7kPm8StX8RyPu+uuvpNju/vTLJV37GpvoM0oZPnW87VLnL/5pDno1NoW1R6yedU6TyUv3u19a3KFnIbTLYz+ZCLP4T0tU1uivFgso0pnsJ/UtXvarNY28Xq5cvkBDrQP/E5ZaiuQwwfmTlsOiQRU1fMuqrDd/3ISSuwjOwXOfTyGUMpZIXq4GpLn3pUcdfzch2x7XO1u2uZHOPb1G6b3Xg9PH1IIWeEpJlPQtqos2EKW8b0u8rnuP1UeVLoXJb9be0uG9nnbchjU+XTszT5VeNBThPHnc5OKj1U9aj0GTHIVaGy1YhEWT4ixns00DT+XEzWn/7VAsIc63Cov3OdyhwjrnaqQqZvWKXdypRdlq+k8msZ031U+Rm4fA+3TtyeR9hwfW9G9yxDN0fZMN33F+9TE6md4hwoxumfaUzI9fN3PFT3xVV2msrQ3UsnChm6Nulk8TndpS28D3zX9tTIPsF/z7Am5OkTjm1tI1JZW74+4VgsZ0N3L1yXV3WeP5uR7TGHHdvC3JQlxybfpd22tDlk/2eofRK8TzrN/qnar/K/OUTth6I/+jAnEptNbPvFHP2gs40N3+dfMWtwqvVct7/wfd8gtQ7imifial9ZJ9/3IHLYU6eDj3+4PhsNhX+vwvcWLnu6kGfEMe8DuciPfUfGZB8X/7HJy/Gefe5n+VRGFd/wyP2ta7/LO4yh/sbLV/k9lev6kfO9Dt/5U67b1/6u/epqB1U9Me23jfHY9sscAg4tkbLl+e4/U36rJ9ddxfd6sg5vq5ice42Wpk/pb9FOJ36/W9tpv4kbC79nUbZceX8Zu6/qJ+P3WvhvA8v3reh7Jbn2d6rrNC7XNZTLma4Ba0JI9efX2uLzF5scG/w9UNU1ZxW+ymUfzELeTllXlQ1rUuhzjS5fp9c964iFBOqeSz63bU065nZKdU+mDEz3qHIjjifquw0pnb/raRtvrnsYcb46ihT3taoYz6brdNW9l6rWRnE/navdPn1XlR1km7hcz1WlH/elKuSOSvLLuE8U6m8uzwRdfcGl73VyTHuyMvzJ1Sa2cWDTP/Z63Kc94n2B1PYr24dz1JlyHLlcP+S4B6vD1c9EW4q2LWstCvUjeVy63k/LMYdUNd5D1xQfvVTzX1VjkMsUv88N8VH5fReVn/Fjn++/h6X6Q8a6b1/q3g/i/ewi0/Scs8zxXeV6mWIOUPlPzBgdFerW+bZrm2P18dnjuK6HunEp+rHvPMXbr+sHVb/lnL+pTP57jPw9Cvk3PW178JD9qChfzuvTf7Htl38L1QUf/VKu9SFjwWbTWPvFEvu7Uq76y7+31g6QlYPc669pbsm9Xur2LWI9Pu8ypfDXqm3A2z8s1FWGn4ntL9NfQu2oSlftX9uetvTtv7J8Ql4zxfXGZ3zk8PeQ9w59x2uMfqI8/q5eKh/l9cb2rwsu9rSNl06ZP2Pmxtz+rNMx93yno0n2/82rVH7rQ+y9P15H6FyRun9ViH81ATmffI7nJ5r8uXXW6enbP6b/B8/l5OifVHYLnb9S39s2zcc+Ph+rh8+eQgVPS72elzGWY/tUtbbabBpDiI7yN1q6/4th2y+ErAc5+9BVvu/7KamJbWNZeuqI/R4tRf+YyD1HmOZM1bMV3/14Sn10c0Xu+Sj1nOXb5jL73ncdy02uvlXZNde65dOHYl7Vs4KYuS6FzWLn2zJlpZqPXPVPOa5yzKOyn1VhT9lmMfdbfH7D11Wf2PXN5h9y+dD287+qxgSnaYmnIrRtIb8pJe6/Uv9OVer6Whn0zfGO/BEloZI9ojmfAlUflClDd178bTmVHVTpZXOkAlk/lb42UujmI89HH5V+cl7XtowY6vTxLVWok6UrGzoGTHN+bB+6ri05687VNpvfuvRfaP2uMlNQth1D5JjGelm/8yn+9p3p/7qk9gnfeddXZmq/Sm333PJT659Kv1zjNbZ9uv2Oi//67CV8/N1nj1DmviyXDNVeJkaeaX8UsyesYg8cu2+NvdaPfb+lLDu5tvt/");
var $557adaaeb0c7885f$var$classTrie = new import_unicode_trie3.default($557adaaeb0c7885f$var$data);
var $557adaaeb0c7885f$var$mapClass = function(c3) {
  switch (c3) {
    case $1627905f8be2ef3f$export$d710c5f50fc7496a:
      return $1627905f8be2ef3f$export$1bb1140fe1358b00;
    case $1627905f8be2ef3f$export$da51c6332ad11d7b:
    case $1627905f8be2ef3f$export$bea437c40441867d:
    case $1627905f8be2ef3f$export$98e1f8a379849661:
      return $1627905f8be2ef3f$export$1bb1140fe1358b00;
    case $1627905f8be2ef3f$export$eb6c6d0b7c8826f2:
      return $1627905f8be2ef3f$export$fb4028874a74450;
    default:
      return c3;
  }
};
var $557adaaeb0c7885f$var$mapFirst = function(c3) {
  switch (c3) {
    case $1627905f8be2ef3f$export$606cfc2a8896c91f:
    case $1627905f8be2ef3f$export$e51d3c675bb0140d:
      return $1627905f8be2ef3f$export$66498d28055820a9;
    case $1627905f8be2ef3f$export$c4c7eecbfed13dc9:
      return $1627905f8be2ef3f$export$9e5d732f3676a9ba;
    default:
      return c3;
  }
};

class $557adaaeb0c7885f$var$Break {
  constructor(position, required5 = false) {
    this.position = position;
    this.required = required5;
  }
}

class $557adaaeb0c7885f$var$LineBreaker {
  nextCodePoint() {
    const code = this.string.charCodeAt(this.pos++);
    const next = this.string.charCodeAt(this.pos);
    if (55296 <= code && code <= 56319 && 56320 <= next && next <= 57343) {
      this.pos++;
      return (code - 55296) * 1024 + (next - 56320) + 65536;
    }
    return code;
  }
  nextCharClass() {
    return $557adaaeb0c7885f$var$mapClass($557adaaeb0c7885f$var$classTrie.get(this.nextCodePoint()));
  }
  getSimpleBreak() {
    switch (this.nextClass) {
      case $1627905f8be2ef3f$export$c4c7eecbfed13dc9:
        return false;
      case $1627905f8be2ef3f$export$66498d28055820a9:
      case $1627905f8be2ef3f$export$606cfc2a8896c91f:
      case $1627905f8be2ef3f$export$e51d3c675bb0140d:
        this.curClass = $1627905f8be2ef3f$export$66498d28055820a9;
        return false;
      case $1627905f8be2ef3f$export$de92be486109a1df:
        this.curClass = $1627905f8be2ef3f$export$de92be486109a1df;
        return false;
    }
    return null;
  }
  getPairTableBreak(lastClass) {
    let shouldBreak = false;
    switch ($32627af916ac1b00$export$5bdb8ccbf5c57afc[this.curClass][this.nextClass]) {
      case $32627af916ac1b00$export$98f50d781a474745:
        shouldBreak = true;
        break;
      case $32627af916ac1b00$export$12ee1f8f5315ca7e:
        shouldBreak = lastClass === $1627905f8be2ef3f$export$c4c7eecbfed13dc9;
        break;
      case $32627af916ac1b00$export$e4965ce242860454:
        shouldBreak = lastClass === $1627905f8be2ef3f$export$c4c7eecbfed13dc9;
        if (!shouldBreak) {
          shouldBreak = false;
          return shouldBreak;
        }
        break;
      case $32627af916ac1b00$export$8f14048969dcd45e:
        if (lastClass !== $1627905f8be2ef3f$export$c4c7eecbfed13dc9)
          return shouldBreak;
        break;
      case $32627af916ac1b00$export$133eb141bf58aff4:
        break;
    }
    if (this.LB8a)
      shouldBreak = false;
    if (this.LB21a && (this.curClass === $1627905f8be2ef3f$export$24aa617c849a894a || this.curClass === $1627905f8be2ef3f$export$a73c4d14459b698d)) {
      shouldBreak = false;
      this.LB21a = false;
    } else
      this.LB21a = this.curClass === $1627905f8be2ef3f$export$f3e416a182673355;
    if (this.curClass === $1627905f8be2ef3f$export$1dff41d5c0caca01) {
      this.LB30a++;
      if (this.LB30a == 2 && this.nextClass === $1627905f8be2ef3f$export$1dff41d5c0caca01) {
        shouldBreak = true;
        this.LB30a = 0;
      }
    } else
      this.LB30a = 0;
    this.curClass = this.nextClass;
    return shouldBreak;
  }
  nextBreak() {
    if (this.curClass == null) {
      let firstClass = this.nextCharClass();
      this.curClass = $557adaaeb0c7885f$var$mapFirst(firstClass);
      this.nextClass = firstClass;
      this.LB8a = firstClass === $1627905f8be2ef3f$export$30a74a373318dec6;
      this.LB30a = 0;
    }
    while (this.pos < this.string.length) {
      this.lastPos = this.pos;
      const lastClass = this.nextClass;
      this.nextClass = this.nextCharClass();
      if (this.curClass === $1627905f8be2ef3f$export$66498d28055820a9 || this.curClass === $1627905f8be2ef3f$export$de92be486109a1df && this.nextClass !== $1627905f8be2ef3f$export$606cfc2a8896c91f) {
        this.curClass = $557adaaeb0c7885f$var$mapFirst($557adaaeb0c7885f$var$mapClass(this.nextClass));
        return new $557adaaeb0c7885f$var$Break(this.lastPos, true);
      }
      let shouldBreak = this.getSimpleBreak();
      if (shouldBreak === null)
        shouldBreak = this.getPairTableBreak(lastClass);
      this.LB8a = this.nextClass === $1627905f8be2ef3f$export$30a74a373318dec6;
      if (shouldBreak)
        return new $557adaaeb0c7885f$var$Break(this.lastPos);
    }
    if (this.lastPos < this.string.length) {
      this.lastPos = this.string.length;
      return new $557adaaeb0c7885f$var$Break(this.string.length);
    }
    return null;
  }
  constructor(string7) {
    this.string = string7;
    this.pos = 0;
    this.lastPos = 0;
    this.curClass = null;
    this.nextClass = null;
    this.LB8a = false;
    this.LB21a = false;
    this.LB30a = 0;
  }
}
$557adaaeb0c7885f$exports = $557adaaeb0c7885f$var$LineBreaker;

// node_modules/pdfkit/js/pdfkit.es.js
var import_jpeg_exif = __toESM(require_lib2(), 1);
var import_png_js = __toESM(require_png_node(), 1);
function inRange(value15, rangeGroup) {
  if (value15 < rangeGroup[0])
    return false;
  let startRange = 0;
  let endRange = rangeGroup.length / 2;
  while (startRange <= endRange) {
    const middleRange = Math.floor((startRange + endRange) / 2);
    const arrayIndex = middleRange * 2;
    if (value15 >= rangeGroup[arrayIndex] && value15 <= rangeGroup[arrayIndex + 1]) {
      return true;
    }
    if (value15 > rangeGroup[arrayIndex + 1]) {
      startRange = middleRange + 1;
    } else {
      endRange = middleRange - 1;
    }
  }
  return false;
}
function toCodePoints(input) {
  const codepoints = [];
  const size = input.length;
  for (let i3 = 0;i3 < size; i3 += 1) {
    const before = input.charCodeAt(i3);
    if (before >= 55296 && before <= 56319 && size > i3 + 1) {
      const next = input.charCodeAt(i3 + 1);
      if (next >= 56320 && next <= 57343) {
        codepoints.push((before - 55296) * 1024 + next - 56320 + 65536);
        i3 += 1;
        continue;
      }
    }
    codepoints.push(before);
  }
  return codepoints;
}
function saslprep(input) {
  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (typeof input !== "string") {
    throw new TypeError("Expected string.");
  }
  if (input.length === 0) {
    return "";
  }
  const mapped_input = toCodePoints(input).map((character) => mapping2space(character) ? 32 : character).filter((character) => !mapping2nothing(character));
  const normalized_input = String.fromCodePoint.apply(null, mapped_input).normalize("NFKC");
  const normalized_map = toCodePoints(normalized_input);
  const hasProhibited = normalized_map.some(isProhibitedCharacter);
  if (hasProhibited) {
    throw new Error("Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3");
  }
  if (opts.allowUnassigned !== true) {
    const hasUnassigned = normalized_map.some(isUnassignedCodePoint);
    if (hasUnassigned) {
      throw new Error("Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5");
    }
  }
  const hasBidiRAL = normalized_map.some(isBidirectionalRAL);
  const hasBidiL = normalized_map.some(isBidirectionalL);
  if (hasBidiRAL && hasBidiL) {
    throw new Error("String must not contain RandALCat and LCat at the same time," + " see https://tools.ietf.org/html/rfc3454#section-6");
  }
  const isFirstBidiRAL = isBidirectionalRAL(getCodePoint(first(normalized_input)));
  const isLastBidiRAL = isBidirectionalRAL(getCodePoint(last(normalized_input)));
  if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {
    throw new Error("Bidirectional RandALCat character must be the first and the last" + " character of the string, see https://tools.ietf.org/html/rfc3454#section-6");
  }
  return normalized_input;
}
function getPermissionsR2() {
  let permissionObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let permissions = 4294967232 >> 0;
  if (permissionObject.printing) {
    permissions |= 4;
  }
  if (permissionObject.modifying) {
    permissions |= 8;
  }
  if (permissionObject.copying) {
    permissions |= 16;
  }
  if (permissionObject.annotating) {
    permissions |= 32;
  }
  return permissions;
}
function getPermissionsR3() {
  let permissionObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let permissions = 4294963392 >> 0;
  if (permissionObject.printing === "lowResolution") {
    permissions |= 4;
  }
  if (permissionObject.printing === "highResolution") {
    permissions |= 2052;
  }
  if (permissionObject.modifying) {
    permissions |= 8;
  }
  if (permissionObject.copying) {
    permissions |= 16;
  }
  if (permissionObject.annotating) {
    permissions |= 32;
  }
  if (permissionObject.fillingForms) {
    permissions |= 256;
  }
  if (permissionObject.contentAccessibility) {
    permissions |= 512;
  }
  if (permissionObject.documentAssembly) {
    permissions |= 1024;
  }
  return permissions;
}
function getUserPasswordR2(encryptionKey) {
  return import_crypto_js.default.RC4.encrypt(processPasswordR2R3R4(), encryptionKey).ciphertext;
}
function getUserPasswordR3R4(documentId, encryptionKey) {
  const key = encryptionKey.clone();
  let cipher = import_crypto_js.default.MD5(processPasswordR2R3R4().concat(import_crypto_js.default.lib.WordArray.create(documentId)));
  for (let i3 = 0;i3 < 20; i3++) {
    const xorRound = Math.ceil(key.sigBytes / 4);
    for (let j = 0;j < xorRound; j++) {
      key.words[j] = encryptionKey.words[j] ^ (i3 | i3 << 8 | i3 << 16 | i3 << 24);
    }
    cipher = import_crypto_js.default.RC4.encrypt(cipher, key).ciphertext;
  }
  return cipher.concat(import_crypto_js.default.lib.WordArray.create(null, 16));
}
function getOwnerPasswordR2R3R4(r, keyBits, paddedUserPassword, paddedOwnerPassword) {
  let digest = paddedOwnerPassword;
  let round = r >= 3 ? 51 : 1;
  for (let i3 = 0;i3 < round; i3++) {
    digest = import_crypto_js.default.MD5(digest);
  }
  const key = digest.clone();
  key.sigBytes = keyBits / 8;
  let cipher = paddedUserPassword;
  round = r >= 3 ? 20 : 1;
  for (let i3 = 0;i3 < round; i3++) {
    const xorRound = Math.ceil(key.sigBytes / 4);
    for (let j = 0;j < xorRound; j++) {
      key.words[j] = digest.words[j] ^ (i3 | i3 << 8 | i3 << 16 | i3 << 24);
    }
    cipher = import_crypto_js.default.RC4.encrypt(cipher, key).ciphertext;
  }
  return cipher;
}
function getEncryptionKeyR2R3R4(r, keyBits, documentId, paddedUserPassword, ownerPasswordEntry, permissions) {
  let key = paddedUserPassword.clone().concat(ownerPasswordEntry).concat(import_crypto_js.default.lib.WordArray.create([lsbFirstWord(permissions)], 4)).concat(import_crypto_js.default.lib.WordArray.create(documentId));
  const round = r >= 3 ? 51 : 1;
  for (let i3 = 0;i3 < round; i3++) {
    key = import_crypto_js.default.MD5(key);
    key.sigBytes = keyBits / 8;
  }
  return key;
}
function getUserPasswordR5(processedUserPassword, generateRandomWordArray) {
  const validationSalt = generateRandomWordArray(8);
  const keySalt = generateRandomWordArray(8);
  return import_crypto_js.default.SHA256(processedUserPassword.clone().concat(validationSalt)).concat(validationSalt).concat(keySalt);
}
function getUserEncryptionKeyR5(processedUserPassword, userKeySalt, encryptionKey) {
  const key = import_crypto_js.default.SHA256(processedUserPassword.clone().concat(userKeySalt));
  const options = {
    mode: import_crypto_js.default.mode.CBC,
    padding: import_crypto_js.default.pad.NoPadding,
    iv: import_crypto_js.default.lib.WordArray.create(null, 16)
  };
  return import_crypto_js.default.AES.encrypt(encryptionKey, key, options).ciphertext;
}
function getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, generateRandomWordArray) {
  const validationSalt = generateRandomWordArray(8);
  const keySalt = generateRandomWordArray(8);
  return import_crypto_js.default.SHA256(processedOwnerPassword.clone().concat(validationSalt).concat(userPasswordEntry)).concat(validationSalt).concat(keySalt);
}
function getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, encryptionKey) {
  const key = import_crypto_js.default.SHA256(processedOwnerPassword.clone().concat(ownerKeySalt).concat(userPasswordEntry));
  const options = {
    mode: import_crypto_js.default.mode.CBC,
    padding: import_crypto_js.default.pad.NoPadding,
    iv: import_crypto_js.default.lib.WordArray.create(null, 16)
  };
  return import_crypto_js.default.AES.encrypt(encryptionKey, key, options).ciphertext;
}
function getEncryptionKeyR5(generateRandomWordArray) {
  return generateRandomWordArray(32);
}
function getEncryptedPermissionsR5(permissions, encryptionKey, generateRandomWordArray) {
  const cipher = import_crypto_js.default.lib.WordArray.create([lsbFirstWord(permissions), 4294967295, 1415668834], 12).concat(generateRandomWordArray(4));
  const options = {
    mode: import_crypto_js.default.mode.ECB,
    padding: import_crypto_js.default.pad.NoPadding
  };
  return import_crypto_js.default.AES.encrypt(cipher, encryptionKey, options).ciphertext;
}
function processPasswordR2R3R4() {
  let password = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  const out = Buffer.alloc(32);
  const length = password.length;
  let index = 0;
  while (index < length && index < 32) {
    const code = password.charCodeAt(index);
    if (code > 255) {
      throw new Error("Password contains one or more invalid characters.");
    }
    out[index] = code;
    index++;
  }
  while (index < 32) {
    out[index] = PASSWORD_PADDING[index - length];
    index++;
  }
  return import_crypto_js.default.lib.WordArray.create(out);
}
function processPasswordR5() {
  let password = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  password = unescape(encodeURIComponent(saslprep(password)));
  const length = Math.min(127, password.length);
  const out = Buffer.alloc(length);
  for (let i3 = 0;i3 < length; i3++) {
    out[i3] = password.charCodeAt(i3);
  }
  return import_crypto_js.default.lib.WordArray.create(out);
}
function lsbFirstWord(data) {
  return (data & 255) << 24 | (data & 65280) << 8 | data >> 8 & 65280 | data >> 24 & 255;
}
function wordArrayToBuffer(wordArray) {
  const byteArray = [];
  for (let i3 = 0;i3 < wordArray.sigBytes; i3++) {
    byteArray.push(wordArray.words[Math.floor(i3 / 4)] >> 8 * (3 - i3 % 4) & 255);
  }
  return Buffer.from(byteArray);
}
function isEqual(a, b) {
  return a.Subtype === b.Subtype && a.Params.CheckSum.toString() === b.Params.CheckSum.toString() && a.Params.Size === b.Params.Size && a.Params.CreationDate === b.Params.CreationDate && a.Params.ModDate === b.Params.ModDate;
}
var __dirname = "C:\\Users\\User\\Desktop\\project\\my-app\\app\\node_modules\\pdfkit\\js";

class PDFAbstractReference {
  toString() {
    throw new Error("Must be implemented by subclasses");
  }
}

class PDFTree {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this._items = {};
    this.limits = typeof options.limits === "boolean" ? options.limits : true;
  }
  add(key, val) {
    return this._items[key] = val;
  }
  get(key) {
    return this._items[key];
  }
  toString() {
    const sortedKeys = Object.keys(this._items).sort((a, b) => this._compareKeys(a, b));
    const out = ["<<"];
    if (this.limits && sortedKeys.length > 1) {
      const first = sortedKeys[0], last = sortedKeys[sortedKeys.length - 1];
      out.push(`  /Limits ${PDFObject.convert([this._dataForKey(first), this._dataForKey(last)])}`);
    }
    out.push(`  /${this._keysName()} [`);
    for (let key of sortedKeys) {
      out.push(`    ${PDFObject.convert(this._dataForKey(key))} ${PDFObject.convert(this._items[key])}`);
    }
    out.push("]");
    out.push(">>");
    return out.join("\n");
  }
  _compareKeys() {
    throw new Error("Must be implemented by subclasses");
  }
  _keysName() {
    throw new Error("Must be implemented by subclasses");
  }
  _dataForKey() {
    throw new Error("Must be implemented by subclasses");
  }
}
var pad = (str, length) => (Array(length + 1).join("0") + str).slice(-length);
var escapableRe = /[\n\r\t\b\f()\\]/g;
var escapable = {
  "\n": "\\n",
  "\r": "\\r",
  "\t": "\\t",
  "\b": "\\b",
  "\f": "\\f",
  "\\": "\\\\",
  "(": "\\(",
  ")": "\\)"
};
var swapBytes = function(buff) {
  const l = buff.length;
  if (l & 1) {
    throw new Error("Buffer length must be even");
  } else {
    for (let i3 = 0, end = l - 1;i3 < end; i3 += 2) {
      const a = buff[i3];
      buff[i3] = buff[i3 + 1];
      buff[i3 + 1] = a;
    }
  }
  return buff;
};

class PDFObject {
  static convert(object13) {
    let encryptFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    if (typeof object13 === "string") {
      return `/${object13}`;
    } else if (object13 instanceof String) {
      let string7 = object13;
      let isUnicode = false;
      for (let i3 = 0, end = string7.length;i3 < end; i3++) {
        if (string7.charCodeAt(i3) > 127) {
          isUnicode = true;
          break;
        }
      }
      let stringBuffer;
      if (isUnicode) {
        stringBuffer = swapBytes(Buffer.from(`\uFEFF${string7}`, "utf16le"));
      } else {
        stringBuffer = Buffer.from(string7.valueOf(), "ascii");
      }
      if (encryptFn) {
        string7 = encryptFn(stringBuffer).toString("binary");
      } else {
        string7 = stringBuffer.toString("binary");
      }
      string7 = string7.replace(escapableRe, (c3) => escapable[c3]);
      return `(${string7})`;
    } else if (Buffer.isBuffer(object13)) {
      return `<${object13.toString("hex")}>`;
    } else if (object13 instanceof PDFAbstractReference || object13 instanceof PDFTree) {
      return object13.toString();
    } else if (object13 instanceof Date) {
      let string7 = `D:${pad(object13.getUTCFullYear(), 4)}` + pad(object13.getUTCMonth() + 1, 2) + pad(object13.getUTCDate(), 2) + pad(object13.getUTCHours(), 2) + pad(object13.getUTCMinutes(), 2) + pad(object13.getUTCSeconds(), 2) + "Z";
      if (encryptFn) {
        string7 = encryptFn(Buffer.from(string7, "ascii")).toString("binary");
        string7 = string7.replace(escapableRe, (c3) => escapable[c3]);
      }
      return `(${string7})`;
    } else if (Array.isArray(object13)) {
      const items = object13.map((e) => PDFObject.convert(e, encryptFn)).join(" ");
      return `[${items}]`;
    } else if ({}.toString.call(object13) === "[object Object]") {
      const out = ["<<"];
      for (let key in object13) {
        const val = object13[key];
        out.push(`/${key} ${PDFObject.convert(val, encryptFn)}`);
      }
      out.push(">>");
      return out.join("\n");
    } else if (typeof object13 === "number") {
      return PDFObject.number(object13);
    } else {
      return `${object13}`;
    }
  }
  static number(n3) {
    if (n3 > -1000000000000000000000 && n3 < 1000000000000000000000) {
      return Math.round(n3 * 1e6) / 1e6;
    }
    throw new Error(`unsupported number: ${n3}`);
  }
}

class PDFReference extends PDFAbstractReference {
  constructor(document2, id) {
    let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    super();
    this.document = document2;
    this.id = id;
    this.data = data;
    this.gen = 0;
    this.compress = this.document.compress && !this.data.Filter;
    this.uncompressedLength = 0;
    this.buffer = [];
  }
  write(chunk) {
    if (!Buffer.isBuffer(chunk)) {
      chunk = Buffer.from(chunk + "\n", "binary");
    }
    this.uncompressedLength += chunk.length;
    if (this.data.Length == null) {
      this.data.Length = 0;
    }
    this.buffer.push(chunk);
    this.data.Length += chunk.length;
    if (this.compress) {
      return this.data.Filter = "FlateDecode";
    }
  }
  end(chunk) {
    if (chunk) {
      this.write(chunk);
    }
    return this.finalize();
  }
  finalize() {
    this.offset = this.document._offset;
    const encryptFn = this.document._security ? this.document._security.getEncryptFn(this.id, this.gen) : null;
    if (this.buffer.length) {
      this.buffer = Buffer.concat(this.buffer);
      if (this.compress) {
        this.buffer = zlib.deflateSync(this.buffer);
      }
      if (encryptFn) {
        this.buffer = encryptFn(this.buffer);
      }
      this.data.Length = this.buffer.length;
    }
    this.document._write(`${this.id} ${this.gen} obj`);
    this.document._write(PDFObject.convert(this.data, encryptFn));
    if (this.buffer.length) {
      this.document._write("stream");
      this.document._write(this.buffer);
      this.buffer = [];
      this.document._write("\nendstream");
    }
    this.document._write("endobj");
    this.document._refEnd(this);
  }
  toString() {
    return `${this.id} ${this.gen} R`;
  }
}
var DEFAULT_MARGINS = {
  top: 72,
  left: 72,
  bottom: 72,
  right: 72
};
var SIZES = {
  "4A0": [4767.87, 6740.79],
  "2A0": [3370.39, 4767.87],
  A0: [2383.94, 3370.39],
  A1: [1683.78, 2383.94],
  A2: [1190.55, 1683.78],
  A3: [841.89, 1190.55],
  A4: [595.28, 841.89],
  A5: [419.53, 595.28],
  A6: [297.64, 419.53],
  A7: [209.76, 297.64],
  A8: [147.4, 209.76],
  A9: [104.88, 147.4],
  A10: [73.7, 104.88],
  B0: [2834.65, 4008.19],
  B1: [2004.09, 2834.65],
  B2: [1417.32, 2004.09],
  B3: [1000.63, 1417.32],
  B4: [708.66, 1000.63],
  B5: [498.9, 708.66],
  B6: [354.33, 498.9],
  B7: [249.45, 354.33],
  B8: [175.75, 249.45],
  B9: [124.72, 175.75],
  B10: [87.87, 124.72],
  C0: [2599.37, 3676.54],
  C1: [1836.85, 2599.37],
  C2: [1298.27, 1836.85],
  C3: [918.43, 1298.27],
  C4: [649.13, 918.43],
  C5: [459.21, 649.13],
  C6: [323.15, 459.21],
  C7: [229.61, 323.15],
  C8: [161.57, 229.61],
  C9: [113.39, 161.57],
  C10: [79.37, 113.39],
  RA0: [2437.8, 3458.27],
  RA1: [1729.13, 2437.8],
  RA2: [1218.9, 1729.13],
  RA3: [864.57, 1218.9],
  RA4: [609.45, 864.57],
  SRA0: [2551.18, 3628.35],
  SRA1: [1814.17, 2551.18],
  SRA2: [1275.59, 1814.17],
  SRA3: [907.09, 1275.59],
  SRA4: [637.8, 907.09],
  EXECUTIVE: [521.86, 756],
  FOLIO: [612, 936],
  LEGAL: [612, 1008],
  LETTER: [612, 792],
  TABLOID: [792, 1224]
};

class PDFPage {
  constructor(document2) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.document = document2;
    this.size = options.size || "letter";
    this.layout = options.layout || "portrait";
    if (typeof options.margin === "number") {
      this.margins = {
        top: options.margin,
        left: options.margin,
        bottom: options.margin,
        right: options.margin
      };
    } else {
      this.margins = options.margins || DEFAULT_MARGINS;
    }
    const dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];
    this.width = dimensions[this.layout === "portrait" ? 0 : 1];
    this.height = dimensions[this.layout === "portrait" ? 1 : 0];
    this.content = this.document.ref();
    this.resources = this.document.ref({
      ProcSet: ["PDF", "Text", "ImageB", "ImageC", "ImageI"]
    });
    this.dictionary = this.document.ref({
      Type: "Page",
      Parent: this.document._root.data.Pages,
      MediaBox: [0, 0, this.width, this.height],
      Contents: this.content,
      Resources: this.resources
    });
    this.markings = [];
  }
  get fonts() {
    const data = this.resources.data;
    return data.Font != null ? data.Font : data.Font = {};
  }
  get xobjects() {
    const data = this.resources.data;
    return data.XObject != null ? data.XObject : data.XObject = {};
  }
  get ext_gstates() {
    const data = this.resources.data;
    return data.ExtGState != null ? data.ExtGState : data.ExtGState = {};
  }
  get patterns() {
    const data = this.resources.data;
    return data.Pattern != null ? data.Pattern : data.Pattern = {};
  }
  get colorSpaces() {
    const data = this.resources.data;
    return data.ColorSpace || (data.ColorSpace = {});
  }
  get annotations() {
    const data = this.dictionary.data;
    return data.Annots != null ? data.Annots : data.Annots = [];
  }
  get structParentTreeKey() {
    const data = this.dictionary.data;
    return data.StructParents != null ? data.StructParents : data.StructParents = this.document.createStructParentTreeNextKey();
  }
  maxY() {
    return this.height - this.margins.bottom;
  }
  write(chunk) {
    return this.content.write(chunk);
  }
  end() {
    this.dictionary.end();
    this.resources.end();
    return this.content.end();
  }
}

class PDFNameTree extends PDFTree {
  _compareKeys(a, b) {
    return a.localeCompare(b);
  }
  _keysName() {
    return "Names";
  }
  _dataForKey(k) {
    return new String(k);
  }
}
var unassigned_code_points = [545, 545, 564, 591, 686, 687, 751, 767, 848, 863, 880, 883, 886, 889, 891, 893, 895, 899, 907, 907, 909, 909, 930, 930, 975, 975, 1015, 1023, 1159, 1159, 1231, 1231, 1270, 1271, 1274, 1279, 1296, 1328, 1367, 1368, 1376, 1376, 1416, 1416, 1419, 1424, 1442, 1442, 1466, 1466, 1477, 1487, 1515, 1519, 1525, 1547, 1549, 1562, 1564, 1566, 1568, 1568, 1595, 1599, 1622, 1631, 1774, 1775, 1791, 1791, 1806, 1806, 1837, 1839, 1867, 1919, 1970, 2304, 2308, 2308, 2362, 2363, 2382, 2383, 2389, 2391, 2417, 2432, 2436, 2436, 2445, 2446, 2449, 2450, 2473, 2473, 2481, 2481, 2483, 2485, 2490, 2491, 2493, 2493, 2501, 2502, 2505, 2506, 2510, 2518, 2520, 2523, 2526, 2526, 2532, 2533, 2555, 2561, 2563, 2564, 2571, 2574, 2577, 2578, 2601, 2601, 2609, 2609, 2612, 2612, 2615, 2615, 2618, 2619, 2621, 2621, 2627, 2630, 2633, 2634, 2638, 2648, 2653, 2653, 2655, 2661, 2677, 2688, 2692, 2692, 2700, 2700, 2702, 2702, 2706, 2706, 2729, 2729, 2737, 2737, 2740, 2740, 2746, 2747, 2758, 2758, 2762, 2762, 2766, 2767, 2769, 2783, 2785, 2789, 2800, 2816, 2820, 2820, 2829, 2830, 2833, 2834, 2857, 2857, 2865, 2865, 2868, 2869, 2874, 2875, 2884, 2886, 2889, 2890, 2894, 2901, 2904, 2907, 2910, 2910, 2914, 2917, 2929, 2945, 2948, 2948, 2955, 2957, 2961, 2961, 2966, 2968, 2971, 2971, 2973, 2973, 2976, 2978, 2981, 2983, 2987, 2989, 2998, 2998, 3002, 3005, 3011, 3013, 3017, 3017, 3022, 3030, 3032, 3046, 3059, 3072, 3076, 3076, 3085, 3085, 3089, 3089, 3113, 3113, 3124, 3124, 3130, 3133, 3141, 3141, 3145, 3145, 3150, 3156, 3159, 3167, 3170, 3173, 3184, 3201, 3204, 3204, 3213, 3213, 3217, 3217, 3241, 3241, 3252, 3252, 3258, 3261, 3269, 3269, 3273, 3273, 3278, 3284, 3287, 3293, 3295, 3295, 3298, 3301, 3312, 3329, 3332, 3332, 3341, 3341, 3345, 3345, 3369, 3369, 3386, 3389, 3396, 3397, 3401, 3401, 3406, 3414, 3416, 3423, 3426, 3429, 3440, 3457, 3460, 3460, 3479, 3481, 3506, 3506, 3516, 3516, 3518, 3519, 3527, 3529, 3531, 3534, 3541, 3541, 3543, 3543, 3552, 3569, 3573, 3584, 3643, 3646, 3676, 3712, 3715, 3715, 3717, 3718, 3721, 3721, 3723, 3724, 3726, 3731, 3736, 3736, 3744, 3744, 3748, 3748, 3750, 3750, 3752, 3753, 3756, 3756, 3770, 3770, 3774, 3775, 3781, 3781, 3783, 3783, 3790, 3791, 3802, 3803, 3806, 3839, 3912, 3912, 3947, 3952, 3980, 3983, 3992, 3992, 4029, 4029, 4045, 4046, 4048, 4095, 4130, 4130, 4136, 4136, 4139, 4139, 4147, 4149, 4154, 4159, 4186, 4255, 4294, 4303, 4345, 4346, 4348, 4351, 4442, 4446, 4515, 4519, 4602, 4607, 4615, 4615, 4679, 4679, 4681, 4681, 4686, 4687, 4695, 4695, 4697, 4697, 4702, 4703, 4743, 4743, 4745, 4745, 4750, 4751, 4783, 4783, 4785, 4785, 4790, 4791, 4799, 4799, 4801, 4801, 4806, 4807, 4815, 4815, 4823, 4823, 4847, 4847, 4879, 4879, 4881, 4881, 4886, 4887, 4895, 4895, 4935, 4935, 4955, 4960, 4989, 5023, 5109, 5120, 5751, 5759, 5789, 5791, 5873, 5887, 5901, 5901, 5909, 5919, 5943, 5951, 5972, 5983, 5997, 5997, 6001, 6001, 6004, 6015, 6109, 6111, 6122, 6143, 6159, 6159, 6170, 6175, 6264, 6271, 6314, 7679, 7836, 7839, 7930, 7935, 7958, 7959, 7966, 7967, 8006, 8007, 8014, 8015, 8024, 8024, 8026, 8026, 8028, 8028, 8030, 8030, 8062, 8063, 8117, 8117, 8133, 8133, 8148, 8149, 8156, 8156, 8176, 8177, 8181, 8181, 8191, 8191, 8275, 8278, 8280, 8286, 8292, 8297, 8306, 8307, 8335, 8351, 8370, 8399, 8427, 8447, 8507, 8508, 8524, 8530, 8580, 8591, 9167, 9215, 9255, 9279, 9291, 9311, 9471, 9471, 9748, 9749, 9752, 9752, 9854, 9855, 9866, 9984, 9989, 9989, 9994, 9995, 10024, 10024, 10060, 10060, 10062, 10062, 10067, 10069, 10071, 10071, 10079, 10080, 10133, 10135, 10160, 10160, 10175, 10191, 10220, 10223, 11008, 11903, 11930, 11930, 12020, 12031, 12246, 12271, 12284, 12287, 12352, 12352, 12439, 12440, 12544, 12548, 12589, 12592, 12687, 12687, 12728, 12783, 12829, 12831, 12868, 12880, 12924, 12926, 13004, 13007, 13055, 13055, 13175, 13178, 13278, 13279, 13311, 13311, 19894, 19967, 40870, 40959, 42125, 42127, 42183, 44031, 55204, 55295, 64046, 64047, 64107, 64255, 64263, 64274, 64280, 64284, 64311, 64311, 64317, 64317, 64319, 64319, 64322, 64322, 64325, 64325, 64434, 64466, 64832, 64847, 64912, 64913, 64968, 64975, 65021, 65023, 65040, 65055, 65060, 65071, 65095, 65096, 65107, 65107, 65127, 65127, 65132, 65135, 65141, 65141, 65277, 65278, 65280, 65280, 65471, 65473, 65480, 65481, 65488, 65489, 65496, 65497, 65501, 65503, 65511, 65511, 65519, 65528, 65536, 66303, 66335, 66335, 66340, 66351, 66379, 66559, 66598, 66599, 66638, 118783, 119030, 119039, 119079, 119081, 119262, 119807, 119893, 119893, 119965, 119965, 119968, 119969, 119971, 119972, 119975, 119976, 119981, 119981, 119994, 119994, 119996, 119996, 120001, 120001, 120004, 120004, 120070, 120070, 120075, 120076, 120085, 120085, 120093, 120093, 120122, 120122, 120127, 120127, 120133, 120133, 120135, 120137, 120145, 120145, 120484, 120487, 120778, 120781, 120832, 131069, 173783, 194559, 195102, 196605, 196608, 262141, 262144, 327677, 327680, 393213, 393216, 458749, 458752, 524285, 524288, 589821, 589824, 655357, 655360, 720893, 720896, 786429, 786432, 851965, 851968, 917501, 917504, 917504, 917506, 917535, 917632, 983037];
var isUnassignedCodePoint = (character) => inRange(character, unassigned_code_points);
var commonly_mapped_to_nothing = [173, 173, 847, 847, 6150, 6150, 6155, 6155, 6156, 6156, 6157, 6157, 8203, 8203, 8204, 8204, 8205, 8205, 8288, 8288, 65024, 65024, 65025, 65025, 65026, 65026, 65027, 65027, 65028, 65028, 65029, 65029, 65030, 65030, 65031, 65031, 65032, 65032, 65033, 65033, 65034, 65034, 65035, 65035, 65036, 65036, 65037, 65037, 65038, 65038, 65039, 65039, 65279, 65279];
var isCommonlyMappedToNothing = (character) => inRange(character, commonly_mapped_to_nothing);
var non_ASCII_space_characters = [160, 160, 5760, 5760, 8192, 8192, 8193, 8193, 8194, 8194, 8195, 8195, 8196, 8196, 8197, 8197, 8198, 8198, 8199, 8199, 8200, 8200, 8201, 8201, 8202, 8202, 8203, 8203, 8239, 8239, 8287, 8287, 12288, 12288];
var isNonASCIISpaceCharacter = (character) => inRange(character, non_ASCII_space_characters);
var non_ASCII_controls_characters = [
  128,
  159,
  1757,
  1757,
  1807,
  1807,
  6158,
  6158,
  8204,
  8204,
  8205,
  8205,
  8232,
  8232,
  8233,
  8233,
  8288,
  8288,
  8289,
  8289,
  8290,
  8290,
  8291,
  8291,
  8298,
  8303,
  65279,
  65279,
  65529,
  65532,
  119155,
  119162
];
var non_character_codepoints = [
  64976,
  65007,
  65534,
  65535,
  131070,
  131071,
  196606,
  196607,
  262142,
  262143,
  327678,
  327679,
  393214,
  393215,
  458750,
  458751,
  524286,
  524287,
  589822,
  589823,
  655358,
  655359,
  720894,
  720895,
  786430,
  786431,
  851966,
  851967,
  917502,
  917503,
  983038,
  983039,
  1114110,
  1114111
];
var prohibited_characters = [
  0,
  31,
  127,
  127,
  832,
  832,
  833,
  833,
  8206,
  8206,
  8207,
  8207,
  8234,
  8234,
  8235,
  8235,
  8236,
  8236,
  8237,
  8237,
  8238,
  8238,
  8298,
  8298,
  8299,
  8299,
  8300,
  8300,
  8301,
  8301,
  8302,
  8302,
  8303,
  8303,
  12272,
  12283,
  55296,
  57343,
  57344,
  63743,
  65529,
  65529,
  65530,
  65530,
  65531,
  65531,
  65532,
  65532,
  65533,
  65533,
  917505,
  917505,
  917536,
  917631,
  983040,
  1048573,
  1048576,
  1114109
];
var isProhibitedCharacter = (character) => inRange(character, non_ASCII_space_characters) || inRange(character, prohibited_characters) || inRange(character, non_ASCII_controls_characters) || inRange(character, non_character_codepoints);
var bidirectional_r_al = [1470, 1470, 1472, 1472, 1475, 1475, 1488, 1514, 1520, 1524, 1563, 1563, 1567, 1567, 1569, 1594, 1600, 1610, 1645, 1647, 1649, 1749, 1757, 1757, 1765, 1766, 1786, 1790, 1792, 1805, 1808, 1808, 1810, 1836, 1920, 1957, 1969, 1969, 8207, 8207, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65020, 65136, 65140, 65142, 65276];
var isBidirectionalRAL = (character) => inRange(character, bidirectional_r_al);
var bidirectional_l = [65, 90, 97, 122, 170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 544, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 1013, 1024, 1154, 1162, 1230, 1232, 1269, 1272, 1273, 1280, 1295, 1329, 1366, 1369, 1375, 1377, 1415, 1417, 1417, 2307, 2307, 2309, 2361, 2365, 2368, 2377, 2380, 2384, 2384, 2392, 2401, 2404, 2416, 2434, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2494, 2496, 2503, 2504, 2507, 2508, 2519, 2519, 2524, 2525, 2527, 2529, 2534, 2545, 2548, 2554, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2622, 2624, 2649, 2652, 2654, 2654, 2662, 2671, 2674, 2676, 2691, 2691, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2752, 2761, 2761, 2763, 2764, 2768, 2768, 2784, 2784, 2790, 2799, 2818, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2878, 2880, 2880, 2887, 2888, 2891, 2892, 2903, 2903, 2908, 2909, 2911, 2913, 2918, 2928, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3006, 3007, 3009, 3010, 3014, 3016, 3018, 3020, 3031, 3031, 3047, 3058, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3137, 3140, 3168, 3169, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3262, 3262, 3264, 3268, 3271, 3272, 3274, 3275, 3285, 3286, 3294, 3294, 3296, 3297, 3302, 3311, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3390, 3392, 3398, 3400, 3402, 3404, 3415, 3415, 3424, 3425, 3430, 3439, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3535, 3537, 3544, 3551, 3570, 3572, 3585, 3632, 3634, 3635, 3648, 3654, 3663, 3675, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3792, 3801, 3804, 3805, 3840, 3863, 3866, 3892, 3894, 3894, 3896, 3896, 3902, 3911, 3913, 3946, 3967, 3967, 3973, 3973, 3976, 3979, 4030, 4037, 4039, 4044, 4047, 4047, 4096, 4129, 4131, 4135, 4137, 4138, 4140, 4140, 4145, 4145, 4152, 4152, 4160, 4183, 4256, 4293, 4304, 4344, 4347, 4347, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 4961, 4988, 5024, 5108, 5121, 5750, 5761, 5786, 5792, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5941, 5942, 5952, 5969, 5984, 5996, 5998, 6000, 6016, 6070, 6078, 6085, 6087, 6088, 6100, 6106, 6108, 6108, 6112, 6121, 6160, 6169, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8206, 8206, 8305, 8305, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8509, 8511, 8517, 8521, 8544, 8579, 9014, 9082, 9109, 9109, 9372, 9449, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12588, 12593, 12686, 12688, 12727, 12784, 12828, 12832, 12867, 12896, 12923, 12927, 12976, 12992, 13003, 13008, 13054, 13056, 13174, 13179, 13277, 13280, 13310, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 55296, 64045, 64048, 64106, 64256, 64262, 64275, 64279, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 66304, 66334, 66336, 66339, 66352, 66378, 66560, 66597, 66600, 66637, 118784, 119029, 119040, 119078, 119082, 119142, 119146, 119154, 119171, 119172, 119180, 119209, 119214, 119261, 119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980, 119982, 119993, 119995, 119995, 119997, 120000, 120002, 120003, 120005, 120069, 120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144, 120146, 120483, 120488, 120777, 131072, 173782, 194560, 195101, 983040, 1048573, 1048576, 1114109];
var isBidirectionalL = (character) => inRange(character, bidirectional_l);
var mapping2space = isNonASCIISpaceCharacter;
var mapping2nothing = isCommonlyMappedToNothing;
var getCodePoint = (character) => character.codePointAt(0);
var first = (x3) => x3[0];
var last = (x3) => x3[x3.length - 1];

class PDFSecurity {
  static generateFileID() {
    let info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let infoStr = `${info.CreationDate.getTime()}\n`;
    for (let key in info) {
      if (!info.hasOwnProperty(key)) {
        continue;
      }
      infoStr += `${key}: ${info[key].valueOf()}\n`;
    }
    return wordArrayToBuffer(import_crypto_js.default.MD5(infoStr));
  }
  static generateRandomWordArray(bytes) {
    return import_crypto_js.default.lib.WordArray.random(bytes);
  }
  static create(document2) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!options.ownerPassword && !options.userPassword) {
      return null;
    }
    return new PDFSecurity(document2, options);
  }
  constructor(document2) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!options.ownerPassword && !options.userPassword) {
      throw new Error("None of owner password and user password is defined.");
    }
    this.document = document2;
    this._setupEncryption(options);
  }
  _setupEncryption(options) {
    switch (options.pdfVersion) {
      case "1.4":
      case "1.5":
        this.version = 2;
        break;
      case "1.6":
      case "1.7":
        this.version = 4;
        break;
      case "1.7ext3":
        this.version = 5;
        break;
      default:
        this.version = 1;
        break;
    }
    const encDict = {
      Filter: "Standard"
    };
    switch (this.version) {
      case 1:
      case 2:
      case 4:
        this._setupEncryptionV1V2V4(this.version, encDict, options);
        break;
      case 5:
        this._setupEncryptionV5(encDict, options);
        break;
    }
    this.dictionary = this.document.ref(encDict);
  }
  _setupEncryptionV1V2V4(v3, encDict, options) {
    let r, permissions;
    switch (v3) {
      case 1:
        r = 2;
        this.keyBits = 40;
        permissions = getPermissionsR2(options.permissions);
        break;
      case 2:
        r = 3;
        this.keyBits = 128;
        permissions = getPermissionsR3(options.permissions);
        break;
      case 4:
        r = 4;
        this.keyBits = 128;
        permissions = getPermissionsR3(options.permissions);
        break;
    }
    const paddedUserPassword = processPasswordR2R3R4(options.userPassword);
    const paddedOwnerPassword = options.ownerPassword ? processPasswordR2R3R4(options.ownerPassword) : paddedUserPassword;
    const ownerPasswordEntry = getOwnerPasswordR2R3R4(r, this.keyBits, paddedUserPassword, paddedOwnerPassword);
    this.encryptionKey = getEncryptionKeyR2R3R4(r, this.keyBits, this.document._id, paddedUserPassword, ownerPasswordEntry, permissions);
    let userPasswordEntry;
    if (r === 2) {
      userPasswordEntry = getUserPasswordR2(this.encryptionKey);
    } else {
      userPasswordEntry = getUserPasswordR3R4(this.document._id, this.encryptionKey);
    }
    encDict.V = v3;
    if (v3 >= 2) {
      encDict.Length = this.keyBits;
    }
    if (v3 === 4) {
      encDict.CF = {
        StdCF: {
          AuthEvent: "DocOpen",
          CFM: "AESV2",
          Length: this.keyBits / 8
        }
      };
      encDict.StmF = "StdCF";
      encDict.StrF = "StdCF";
    }
    encDict.R = r;
    encDict.O = wordArrayToBuffer(ownerPasswordEntry);
    encDict.U = wordArrayToBuffer(userPasswordEntry);
    encDict.P = permissions;
  }
  _setupEncryptionV5(encDict, options) {
    this.keyBits = 256;
    const permissions = getPermissionsR3(options.permissions);
    const processedUserPassword = processPasswordR5(options.userPassword);
    const processedOwnerPassword = options.ownerPassword ? processPasswordR5(options.ownerPassword) : processedUserPassword;
    this.encryptionKey = getEncryptionKeyR5(PDFSecurity.generateRandomWordArray);
    const userPasswordEntry = getUserPasswordR5(processedUserPassword, PDFSecurity.generateRandomWordArray);
    const userKeySalt = import_crypto_js.default.lib.WordArray.create(userPasswordEntry.words.slice(10, 12), 8);
    const userEncryptionKeyEntry = getUserEncryptionKeyR5(processedUserPassword, userKeySalt, this.encryptionKey);
    const ownerPasswordEntry = getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, PDFSecurity.generateRandomWordArray);
    const ownerKeySalt = import_crypto_js.default.lib.WordArray.create(ownerPasswordEntry.words.slice(10, 12), 8);
    const ownerEncryptionKeyEntry = getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, this.encryptionKey);
    const permsEntry = getEncryptedPermissionsR5(permissions, this.encryptionKey, PDFSecurity.generateRandomWordArray);
    encDict.V = 5;
    encDict.Length = this.keyBits;
    encDict.CF = {
      StdCF: {
        AuthEvent: "DocOpen",
        CFM: "AESV3",
        Length: this.keyBits / 8
      }
    };
    encDict.StmF = "StdCF";
    encDict.StrF = "StdCF";
    encDict.R = 5;
    encDict.O = wordArrayToBuffer(ownerPasswordEntry);
    encDict.OE = wordArrayToBuffer(ownerEncryptionKeyEntry);
    encDict.U = wordArrayToBuffer(userPasswordEntry);
    encDict.UE = wordArrayToBuffer(userEncryptionKeyEntry);
    encDict.P = permissions;
    encDict.Perms = wordArrayToBuffer(permsEntry);
  }
  getEncryptFn(obj, gen) {
    let digest;
    if (this.version < 5) {
      digest = this.encryptionKey.clone().concat(import_crypto_js.default.lib.WordArray.create([(obj & 255) << 24 | (obj & 65280) << 8 | obj >> 8 & 65280 | gen & 255, (gen & 65280) << 16], 5));
    }
    if (this.version === 1 || this.version === 2) {
      let key2 = import_crypto_js.default.MD5(digest);
      key2.sigBytes = Math.min(16, this.keyBits / 8 + 5);
      return (buffer) => wordArrayToBuffer(import_crypto_js.default.RC4.encrypt(import_crypto_js.default.lib.WordArray.create(buffer), key2).ciphertext);
    }
    let key;
    if (this.version === 4) {
      key = import_crypto_js.default.MD5(digest.concat(import_crypto_js.default.lib.WordArray.create([1933667412], 4)));
    } else {
      key = this.encryptionKey;
    }
    const iv = PDFSecurity.generateRandomWordArray(16);
    const options = {
      mode: import_crypto_js.default.mode.CBC,
      padding: import_crypto_js.default.pad.Pkcs7,
      iv
    };
    return (buffer) => wordArrayToBuffer(iv.clone().concat(import_crypto_js.default.AES.encrypt(import_crypto_js.default.lib.WordArray.create(buffer), key, options).ciphertext));
  }
  end() {
    this.dictionary.end();
  }
}
var PASSWORD_PADDING = [40, 191, 78, 94, 78, 117, 138, 65, 100, 0, 78, 86, 255, 250, 1, 8, 46, 46, 0, 182, 208, 104, 62, 128, 47, 12, 169, 254, 100, 83, 105, 122];
var {
  number: number7
} = PDFObject;

class PDFGradient {
  constructor(doc) {
    this.doc = doc;
    this.stops = [];
    this.embedded = false;
    this.transform = [1, 0, 0, 1, 0, 0];
  }
  stop(pos, color, opacity) {
    if (opacity == null) {
      opacity = 1;
    }
    color = this.doc._normalizeColor(color);
    if (this.stops.length === 0) {
      if (color.length === 3) {
        this._colorSpace = "DeviceRGB";
      } else if (color.length === 4) {
        this._colorSpace = "DeviceCMYK";
      } else if (color.length === 1) {
        this._colorSpace = "DeviceGray";
      } else {
        throw new Error("Unknown color space");
      }
    } else if (this._colorSpace === "DeviceRGB" && color.length !== 3 || this._colorSpace === "DeviceCMYK" && color.length !== 4 || this._colorSpace === "DeviceGray" && color.length !== 1) {
      throw new Error("All gradient stops must use the same color space");
    }
    opacity = Math.max(0, Math.min(1, opacity));
    this.stops.push([pos, color, opacity]);
    return this;
  }
  setTransform(m11, m12, m21, m22, dx, dy) {
    this.transform = [m11, m12, m21, m22, dx, dy];
    return this;
  }
  embed(m3) {
    let fn;
    const stopsLength = this.stops.length;
    if (stopsLength === 0) {
      return;
    }
    this.embedded = true;
    this.matrix = m3;
    const last2 = this.stops[stopsLength - 1];
    if (last2[0] < 1) {
      this.stops.push([1, last2[1], last2[2]]);
    }
    const bounds = [];
    const encode2 = [];
    const stops = [];
    for (let i3 = 0;i3 < stopsLength - 1; i3++) {
      encode2.push(0, 1);
      if (i3 + 2 !== stopsLength) {
        bounds.push(this.stops[i3 + 1][0]);
      }
      fn = this.doc.ref({
        FunctionType: 2,
        Domain: [0, 1],
        C0: this.stops[i3 + 0][1],
        C1: this.stops[i3 + 1][1],
        N: 1
      });
      stops.push(fn);
      fn.end();
    }
    if (stopsLength === 1) {
      fn = stops[0];
    } else {
      fn = this.doc.ref({
        FunctionType: 3,
        Domain: [0, 1],
        Functions: stops,
        Bounds: bounds,
        Encode: encode2
      });
      fn.end();
    }
    this.id = `Sh${++this.doc._gradCount}`;
    const shader = this.shader(fn);
    shader.end();
    const pattern3 = this.doc.ref({
      Type: "Pattern",
      PatternType: 2,
      Shading: shader,
      Matrix: this.matrix.map(number7)
    });
    pattern3.end();
    if (this.stops.some((stop) => stop[2] < 1)) {
      let grad = this.opacityGradient();
      grad._colorSpace = "DeviceGray";
      for (let stop of this.stops) {
        grad.stop(stop[0], [stop[2]]);
      }
      grad = grad.embed(this.matrix);
      const pageBBox = [0, 0, this.doc.page.width, this.doc.page.height];
      const form = this.doc.ref({
        Type: "XObject",
        Subtype: "Form",
        FormType: 1,
        BBox: pageBBox,
        Group: {
          Type: "Group",
          S: "Transparency",
          CS: "DeviceGray"
        },
        Resources: {
          ProcSet: ["PDF", "Text", "ImageB", "ImageC", "ImageI"],
          Pattern: {
            Sh1: grad
          }
        }
      });
      form.write("/Pattern cs /Sh1 scn");
      form.end(`${pageBBox.join(" ")} re f`);
      const gstate = this.doc.ref({
        Type: "ExtGState",
        SMask: {
          Type: "Mask",
          S: "Luminosity",
          G: form
        }
      });
      gstate.end();
      const opacityPattern = this.doc.ref({
        Type: "Pattern",
        PatternType: 1,
        PaintType: 1,
        TilingType: 2,
        BBox: pageBBox,
        XStep: pageBBox[2],
        YStep: pageBBox[3],
        Resources: {
          ProcSet: ["PDF", "Text", "ImageB", "ImageC", "ImageI"],
          Pattern: {
            Sh1: pattern3
          },
          ExtGState: {
            Gs1: gstate
          }
        }
      });
      opacityPattern.write("/Gs1 gs /Pattern cs /Sh1 scn");
      opacityPattern.end(`${pageBBox.join(" ")} re f`);
      this.doc.page.patterns[this.id] = opacityPattern;
    } else {
      this.doc.page.patterns[this.id] = pattern3;
    }
    return pattern3;
  }
  apply(stroke) {
    const [m02, m12, m22, m3, m4, m5] = this.doc._ctm;
    const [m11, m122, m21, m222, dx, dy] = this.transform;
    const m6 = [m02 * m11 + m22 * m122, m12 * m11 + m3 * m122, m02 * m21 + m22 * m222, m12 * m21 + m3 * m222, m02 * dx + m22 * dy + m4, m12 * dx + m3 * dy + m5];
    if (!this.embedded || m6.join(" ") !== this.matrix.join(" ")) {
      this.embed(m6);
    }
    this.doc._setColorSpace("Pattern", stroke);
    const op = stroke ? "SCN" : "scn";
    return this.doc.addContent(`/${this.id} ${op}`);
  }
}

class PDFLinearGradient extends PDFGradient {
  constructor(doc, x12, y12, x22, y22) {
    super(doc);
    this.x1 = x12;
    this.y1 = y12;
    this.x2 = x22;
    this.y2 = y22;
  }
  shader(fn) {
    return this.doc.ref({
      ShadingType: 2,
      ColorSpace: this._colorSpace,
      Coords: [this.x1, this.y1, this.x2, this.y2],
      Function: fn,
      Extend: [true, true]
    });
  }
  opacityGradient() {
    return new PDFLinearGradient(this.doc, this.x1, this.y1, this.x2, this.y2);
  }
}

class PDFRadialGradient extends PDFGradient {
  constructor(doc, x12, y12, r1, x22, y22, r22) {
    super(doc);
    this.doc = doc;
    this.x1 = x12;
    this.y1 = y12;
    this.r1 = r1;
    this.x2 = x22;
    this.y2 = y22;
    this.r2 = r22;
  }
  shader(fn) {
    return this.doc.ref({
      ShadingType: 3,
      ColorSpace: this._colorSpace,
      Coords: [this.x1, this.y1, this.r1, this.x2, this.y2, this.r2],
      Function: fn,
      Extend: [true, true]
    });
  }
  opacityGradient() {
    return new PDFRadialGradient(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);
  }
}
var Gradient = {
  PDFGradient,
  PDFLinearGradient,
  PDFRadialGradient
};
var underlyingColorSpaces = ["DeviceCMYK", "DeviceRGB"];

class PDFTilingPattern {
  constructor(doc, bBox, xStep, yStep, stream2) {
    this.doc = doc;
    this.bBox = bBox;
    this.xStep = xStep;
    this.yStep = yStep;
    this.stream = stream2;
  }
  createPattern() {
    const resources = this.doc.ref();
    resources.end();
    const [m02, m12, m22, m3, m4, m5] = this.doc._ctm;
    const [m11, m122, m21, m222, dx, dy] = [1, 0, 0, 1, 0, 0];
    const m6 = [m02 * m11 + m22 * m122, m12 * m11 + m3 * m122, m02 * m21 + m22 * m222, m12 * m21 + m3 * m222, m02 * dx + m22 * dy + m4, m12 * dx + m3 * dy + m5];
    const pattern3 = this.doc.ref({
      Type: "Pattern",
      PatternType: 1,
      PaintType: 2,
      TilingType: 2,
      BBox: this.bBox,
      XStep: this.xStep,
      YStep: this.yStep,
      Matrix: m6.map((v3) => +v3.toFixed(5)),
      Resources: resources
    });
    pattern3.end(this.stream);
    return pattern3;
  }
  embedPatternColorSpaces() {
    underlyingColorSpaces.forEach((csName) => {
      const csId = this.getPatternColorSpaceId(csName);
      if (this.doc.page.colorSpaces[csId])
        return;
      const cs = this.doc.ref(["Pattern", csName]);
      cs.end();
      this.doc.page.colorSpaces[csId] = cs;
    });
  }
  getPatternColorSpaceId(underlyingColorspace) {
    return `CsP${underlyingColorspace}`;
  }
  embed() {
    if (!this.id) {
      this.doc._patternCount = this.doc._patternCount + 1;
      this.id = "P" + this.doc._patternCount;
      this.pattern = this.createPattern();
    }
    if (!this.doc.page.patterns[this.id]) {
      this.doc.page.patterns[this.id] = this.pattern;
    }
  }
  apply(stroke, patternColor) {
    this.embedPatternColorSpaces();
    this.embed();
    const normalizedColor = this.doc._normalizeColor(patternColor);
    if (!normalizedColor)
      throw Error(`invalid pattern color. (value: ${patternColor})`);
    const csId = this.getPatternColorSpaceId(this.doc._getColorSpace(normalizedColor));
    this.doc._setColorSpace(csId, stroke);
    const op = stroke ? "SCN" : "scn";
    return this.doc.addContent(`${normalizedColor.join(" ")} /${this.id} ${op}`);
  }
}
var pattern3 = {
  PDFTilingPattern
};
var {
  PDFGradient: PDFGradient$1,
  PDFLinearGradient: PDFLinearGradient$1,
  PDFRadialGradient: PDFRadialGradient$1
} = Gradient;
var {
  PDFTilingPattern: PDFTilingPattern$1
} = pattern3;
var ColorMixin = {
  initColor() {
    this._opacityRegistry = {};
    this._opacityCount = 0;
    this._patternCount = 0;
    return this._gradCount = 0;
  },
  _normalizeColor(color) {
    if (typeof color === "string") {
      if (color.charAt(0) === "#") {
        if (color.length === 4) {
          color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, "#$1$1$2$2$3$3");
        }
        const hex = parseInt(color.slice(1), 16);
        color = [hex >> 16, hex >> 8 & 255, hex & 255];
      } else if (namedColors[color]) {
        color = namedColors[color];
      }
    }
    if (Array.isArray(color)) {
      if (color.length === 3) {
        color = color.map((part) => part / 255);
      } else if (color.length === 4) {
        color = color.map((part) => part / 100);
      }
      return color;
    }
    return null;
  },
  _setColor(color, stroke) {
    if (color instanceof PDFGradient$1) {
      color.apply(stroke);
      return true;
    } else if (Array.isArray(color) && color[0] instanceof PDFTilingPattern$1) {
      color[0].apply(stroke, color[1]);
      return true;
    }
    return this._setColorCore(color, stroke);
  },
  _setColorCore(color, stroke) {
    color = this._normalizeColor(color);
    if (!color) {
      return false;
    }
    const op = stroke ? "SCN" : "scn";
    const space = this._getColorSpace(color);
    this._setColorSpace(space, stroke);
    color = color.join(" ");
    this.addContent(`${color} ${op}`);
    return true;
  },
  _setColorSpace(space, stroke) {
    const op = stroke ? "CS" : "cs";
    return this.addContent(`/${space} ${op}`);
  },
  _getColorSpace(color) {
    return color.length === 4 ? "DeviceCMYK" : "DeviceRGB";
  },
  fillColor(color, opacity) {
    const set2 = this._setColor(color, false);
    if (set2) {
      this.fillOpacity(opacity);
    }
    this._fillColor = [color, opacity];
    return this;
  },
  strokeColor(color, opacity) {
    const set2 = this._setColor(color, true);
    if (set2) {
      this.strokeOpacity(opacity);
    }
    return this;
  },
  opacity(opacity) {
    this._doOpacity(opacity, opacity);
    return this;
  },
  fillOpacity(opacity) {
    this._doOpacity(opacity, null);
    return this;
  },
  strokeOpacity(opacity) {
    this._doOpacity(null, opacity);
    return this;
  },
  _doOpacity(fillOpacity, strokeOpacity) {
    let dictionary, name;
    if (fillOpacity == null && strokeOpacity == null) {
      return;
    }
    if (fillOpacity != null) {
      fillOpacity = Math.max(0, Math.min(1, fillOpacity));
    }
    if (strokeOpacity != null) {
      strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));
    }
    const key = `${fillOpacity}_${strokeOpacity}`;
    if (this._opacityRegistry[key]) {
      [dictionary, name] = this._opacityRegistry[key];
    } else {
      dictionary = {
        Type: "ExtGState"
      };
      if (fillOpacity != null) {
        dictionary.ca = fillOpacity;
      }
      if (strokeOpacity != null) {
        dictionary.CA = strokeOpacity;
      }
      dictionary = this.ref(dictionary);
      dictionary.end();
      const id = ++this._opacityCount;
      name = `Gs${id}`;
      this._opacityRegistry[key] = [dictionary, name];
    }
    this.page.ext_gstates[name] = dictionary;
    return this.addContent(`/${name} gs`);
  },
  linearGradient(x12, y12, x22, y22) {
    return new PDFLinearGradient$1(this, x12, y12, x22, y22);
  },
  radialGradient(x12, y12, r1, x22, y22, r22) {
    return new PDFRadialGradient$1(this, x12, y12, r1, x22, y22, r22);
  },
  pattern(bbox, xStep, yStep, stream2) {
    return new PDFTilingPattern$1(this, bbox, xStep, yStep, stream2);
  }
};
var namedColors = {
  aliceblue: [240, 248, 255],
  antiquewhite: [250, 235, 215],
  aqua: [0, 255, 255],
  aquamarine: [127, 255, 212],
  azure: [240, 255, 255],
  beige: [245, 245, 220],
  bisque: [255, 228, 196],
  black: [0, 0, 0],
  blanchedalmond: [255, 235, 205],
  blue: [0, 0, 255],
  blueviolet: [138, 43, 226],
  brown: [165, 42, 42],
  burlywood: [222, 184, 135],
  cadetblue: [95, 158, 160],
  chartreuse: [127, 255, 0],
  chocolate: [210, 105, 30],
  coral: [255, 127, 80],
  cornflowerblue: [100, 149, 237],
  cornsilk: [255, 248, 220],
  crimson: [220, 20, 60],
  cyan: [0, 255, 255],
  darkblue: [0, 0, 139],
  darkcyan: [0, 139, 139],
  darkgoldenrod: [184, 134, 11],
  darkgray: [169, 169, 169],
  darkgreen: [0, 100, 0],
  darkgrey: [169, 169, 169],
  darkkhaki: [189, 183, 107],
  darkmagenta: [139, 0, 139],
  darkolivegreen: [85, 107, 47],
  darkorange: [255, 140, 0],
  darkorchid: [153, 50, 204],
  darkred: [139, 0, 0],
  darksalmon: [233, 150, 122],
  darkseagreen: [143, 188, 143],
  darkslateblue: [72, 61, 139],
  darkslategray: [47, 79, 79],
  darkslategrey: [47, 79, 79],
  darkturquoise: [0, 206, 209],
  darkviolet: [148, 0, 211],
  deeppink: [255, 20, 147],
  deepskyblue: [0, 191, 255],
  dimgray: [105, 105, 105],
  dimgrey: [105, 105, 105],
  dodgerblue: [30, 144, 255],
  firebrick: [178, 34, 34],
  floralwhite: [255, 250, 240],
  forestgreen: [34, 139, 34],
  fuchsia: [255, 0, 255],
  gainsboro: [220, 220, 220],
  ghostwhite: [248, 248, 255],
  gold: [255, 215, 0],
  goldenrod: [218, 165, 32],
  gray: [128, 128, 128],
  grey: [128, 128, 128],
  green: [0, 128, 0],
  greenyellow: [173, 255, 47],
  honeydew: [240, 255, 240],
  hotpink: [255, 105, 180],
  indianred: [205, 92, 92],
  indigo: [75, 0, 130],
  ivory: [255, 255, 240],
  khaki: [240, 230, 140],
  lavender: [230, 230, 250],
  lavenderblush: [255, 240, 245],
  lawngreen: [124, 252, 0],
  lemonchiffon: [255, 250, 205],
  lightblue: [173, 216, 230],
  lightcoral: [240, 128, 128],
  lightcyan: [224, 255, 255],
  lightgoldenrodyellow: [250, 250, 210],
  lightgray: [211, 211, 211],
  lightgreen: [144, 238, 144],
  lightgrey: [211, 211, 211],
  lightpink: [255, 182, 193],
  lightsalmon: [255, 160, 122],
  lightseagreen: [32, 178, 170],
  lightskyblue: [135, 206, 250],
  lightslategray: [119, 136, 153],
  lightslategrey: [119, 136, 153],
  lightsteelblue: [176, 196, 222],
  lightyellow: [255, 255, 224],
  lime: [0, 255, 0],
  limegreen: [50, 205, 50],
  linen: [250, 240, 230],
  magenta: [255, 0, 255],
  maroon: [128, 0, 0],
  mediumaquamarine: [102, 205, 170],
  mediumblue: [0, 0, 205],
  mediumorchid: [186, 85, 211],
  mediumpurple: [147, 112, 219],
  mediumseagreen: [60, 179, 113],
  mediumslateblue: [123, 104, 238],
  mediumspringgreen: [0, 250, 154],
  mediumturquoise: [72, 209, 204],
  mediumvioletred: [199, 21, 133],
  midnightblue: [25, 25, 112],
  mintcream: [245, 255, 250],
  mistyrose: [255, 228, 225],
  moccasin: [255, 228, 181],
  navajowhite: [255, 222, 173],
  navy: [0, 0, 128],
  oldlace: [253, 245, 230],
  olive: [128, 128, 0],
  olivedrab: [107, 142, 35],
  orange: [255, 165, 0],
  orangered: [255, 69, 0],
  orchid: [218, 112, 214],
  palegoldenrod: [238, 232, 170],
  palegreen: [152, 251, 152],
  paleturquoise: [175, 238, 238],
  palevioletred: [219, 112, 147],
  papayawhip: [255, 239, 213],
  peachpuff: [255, 218, 185],
  peru: [205, 133, 63],
  pink: [255, 192, 203],
  plum: [221, 160, 221],
  powderblue: [176, 224, 230],
  purple: [128, 0, 128],
  red: [255, 0, 0],
  rosybrown: [188, 143, 143],
  royalblue: [65, 105, 225],
  saddlebrown: [139, 69, 19],
  salmon: [250, 128, 114],
  sandybrown: [244, 164, 96],
  seagreen: [46, 139, 87],
  seashell: [255, 245, 238],
  sienna: [160, 82, 45],
  silver: [192, 192, 192],
  skyblue: [135, 206, 235],
  slateblue: [106, 90, 205],
  slategray: [112, 128, 144],
  slategrey: [112, 128, 144],
  snow: [255, 250, 250],
  springgreen: [0, 255, 127],
  steelblue: [70, 130, 180],
  tan: [210, 180, 140],
  teal: [0, 128, 128],
  thistle: [216, 191, 216],
  tomato: [255, 99, 71],
  turquoise: [64, 224, 208],
  violet: [238, 130, 238],
  wheat: [245, 222, 179],
  white: [255, 255, 255],
  whitesmoke: [245, 245, 245],
  yellow: [255, 255, 0],
  yellowgreen: [154, 205, 50]
};
var cx;
var cy;
var px;
var py;
var sx;
var sy;
cx = cy = px = py = sx = sy = 0;
var parameters4 = {
  A: 7,
  a: 7,
  C: 6,
  c: 6,
  H: 1,
  h: 1,
  L: 2,
  l: 2,
  M: 2,
  m: 2,
  Q: 4,
  q: 4,
  S: 4,
  s: 4,
  T: 2,
  t: 2,
  V: 1,
  v: 1,
  Z: 0,
  z: 0
};
var parse4 = function(path2) {
  let cmd;
  const ret = [];
  let args = [];
  let curArg = "";
  let foundDecimal = false;
  let params = 0;
  for (let c3 of path2) {
    if (parameters4[c3] != null) {
      params = parameters4[c3];
      if (cmd) {
        if (curArg.length > 0) {
          args[args.length] = +curArg;
        }
        ret[ret.length] = {
          cmd,
          args
        };
        args = [];
        curArg = "";
        foundDecimal = false;
      }
      cmd = c3;
    } else if ([" ", ","].includes(c3) || c3 === "-" && curArg.length > 0 && curArg[curArg.length - 1] !== "e" || c3 === "." && foundDecimal) {
      if (curArg.length === 0) {
        continue;
      }
      if (args.length === params) {
        ret[ret.length] = {
          cmd,
          args
        };
        args = [+curArg];
        if (cmd === "M") {
          cmd = "L";
        }
        if (cmd === "m") {
          cmd = "l";
        }
      } else {
        args[args.length] = +curArg;
      }
      foundDecimal = c3 === ".";
      curArg = ["-", "."].includes(c3) ? c3 : "";
    } else {
      curArg += c3;
      if (c3 === ".") {
        foundDecimal = true;
      }
    }
  }
  if (curArg.length > 0) {
    if (args.length === params) {
      ret[ret.length] = {
        cmd,
        args
      };
      args = [+curArg];
      if (cmd === "M") {
        cmd = "L";
      }
      if (cmd === "m") {
        cmd = "l";
      }
    } else {
      args[args.length] = +curArg;
    }
  }
  ret[ret.length] = {
    cmd,
    args
  };
  return ret;
};
var apply = function(commands, doc) {
  cx = cy = px = py = sx = sy = 0;
  for (let i3 = 0;i3 < commands.length; i3++) {
    const c3 = commands[i3];
    if (typeof runners[c3.cmd] === "function") {
      runners[c3.cmd](doc, c3.args);
    }
  }
};
var runners = {
  M(doc, a) {
    cx = a[0];
    cy = a[1];
    px = py = null;
    sx = cx;
    sy = cy;
    return doc.moveTo(cx, cy);
  },
  m(doc, a) {
    cx += a[0];
    cy += a[1];
    px = py = null;
    sx = cx;
    sy = cy;
    return doc.moveTo(cx, cy);
  },
  C(doc, a) {
    cx = a[4];
    cy = a[5];
    px = a[2];
    py = a[3];
    return doc.bezierCurveTo(...a);
  },
  c(doc, a) {
    doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);
    px = cx + a[2];
    py = cy + a[3];
    cx += a[4];
    return cy += a[5];
  },
  S(doc, a) {
    if (px === null) {
      px = cx;
      py = cy;
    }
    doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);
    px = a[0];
    py = a[1];
    cx = a[2];
    return cy = a[3];
  },
  s(doc, a) {
    if (px === null) {
      px = cx;
      py = cy;
    }
    doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);
    px = cx + a[0];
    py = cy + a[1];
    cx += a[2];
    return cy += a[3];
  },
  Q(doc, a) {
    px = a[0];
    py = a[1];
    cx = a[2];
    cy = a[3];
    return doc.quadraticCurveTo(a[0], a[1], cx, cy);
  },
  q(doc, a) {
    doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);
    px = cx + a[0];
    py = cy + a[1];
    cx += a[2];
    return cy += a[3];
  },
  T(doc, a) {
    if (px === null) {
      px = cx;
      py = cy;
    } else {
      px = cx - (px - cx);
      py = cy - (py - cy);
    }
    doc.quadraticCurveTo(px, py, a[0], a[1]);
    px = cx - (px - cx);
    py = cy - (py - cy);
    cx = a[0];
    return cy = a[1];
  },
  t(doc, a) {
    if (px === null) {
      px = cx;
      py = cy;
    } else {
      px = cx - (px - cx);
      py = cy - (py - cy);
    }
    doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);
    cx += a[0];
    return cy += a[1];
  },
  A(doc, a) {
    solveArc(doc, cx, cy, a);
    cx = a[5];
    return cy = a[6];
  },
  a(doc, a) {
    a[5] += cx;
    a[6] += cy;
    solveArc(doc, cx, cy, a);
    cx = a[5];
    return cy = a[6];
  },
  L(doc, a) {
    cx = a[0];
    cy = a[1];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  l(doc, a) {
    cx += a[0];
    cy += a[1];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  H(doc, a) {
    cx = a[0];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  h(doc, a) {
    cx += a[0];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  V(doc, a) {
    cy = a[0];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  v(doc, a) {
    cy += a[0];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  Z(doc) {
    doc.closePath();
    cx = sx;
    return cy = sy;
  },
  z(doc) {
    doc.closePath();
    cx = sx;
    return cy = sy;
  }
};
var solveArc = function(doc, x3, y3, coords) {
  const [rx, ry, rot, large, sweep, ex, ey] = coords;
  const segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x3, y3);
  for (let seg of segs) {
    const bez = segmentToBezier(...seg);
    doc.bezierCurveTo(...bez);
  }
};
var arcToSegments = function(x3, y3, rx, ry, large, sweep, rotateX, ox, oy) {
  const th = rotateX * (Math.PI / 180);
  const sin_th = Math.sin(th);
  const cos_th = Math.cos(th);
  rx = Math.abs(rx);
  ry = Math.abs(ry);
  px = cos_th * (ox - x3) * 0.5 + sin_th * (oy - y3) * 0.5;
  py = cos_th * (oy - y3) * 0.5 - sin_th * (ox - x3) * 0.5;
  let pl = px * px / (rx * rx) + py * py / (ry * ry);
  if (pl > 1) {
    pl = Math.sqrt(pl);
    rx *= pl;
    ry *= pl;
  }
  const a00 = cos_th / rx;
  const a01 = sin_th / rx;
  const a10 = -sin_th / ry;
  const a11 = cos_th / ry;
  const x02 = a00 * ox + a01 * oy;
  const y02 = a10 * ox + a11 * oy;
  const x12 = a00 * x3 + a01 * y3;
  const y12 = a10 * x3 + a11 * y3;
  const d3 = (x12 - x02) * (x12 - x02) + (y12 - y02) * (y12 - y02);
  let sfactor_sq = 1 / d3 - 0.25;
  if (sfactor_sq < 0) {
    sfactor_sq = 0;
  }
  let sfactor = Math.sqrt(sfactor_sq);
  if (sweep === large) {
    sfactor = -sfactor;
  }
  const xc = 0.5 * (x02 + x12) - sfactor * (y12 - y02);
  const yc = 0.5 * (y02 + y12) + sfactor * (x12 - x02);
  const th0 = Math.atan2(y02 - yc, x02 - xc);
  const th1 = Math.atan2(y12 - yc, x12 - xc);
  let th_arc = th1 - th0;
  if (th_arc < 0 && sweep === 1) {
    th_arc += 2 * Math.PI;
  } else if (th_arc > 0 && sweep === 0) {
    th_arc -= 2 * Math.PI;
  }
  const segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));
  const result = [];
  for (let i3 = 0;i3 < segments; i3++) {
    const th2 = th0 + i3 * th_arc / segments;
    const th3 = th0 + (i3 + 1) * th_arc / segments;
    result[i3] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
  }
  return result;
};
var segmentToBezier = function(cx2, cy2, th0, th1, rx, ry, sin_th, cos_th) {
  const a00 = cos_th * rx;
  const a01 = -sin_th * ry;
  const a10 = sin_th * rx;
  const a11 = cos_th * ry;
  const th_half = 0.5 * (th1 - th0);
  const t3 = 8 / 3 * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);
  const x12 = cx2 + Math.cos(th0) - t3 * Math.sin(th0);
  const y12 = cy2 + Math.sin(th0) + t3 * Math.cos(th0);
  const x3 = cx2 + Math.cos(th1);
  const y3 = cy2 + Math.sin(th1);
  const x22 = x3 + t3 * Math.sin(th1);
  const y22 = y3 - t3 * Math.cos(th1);
  return [a00 * x12 + a01 * y12, a10 * x12 + a11 * y12, a00 * x22 + a01 * y22, a10 * x22 + a11 * y22, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];
};

class SVGPath {
  static apply(doc, path2) {
    const commands = parse4(path2);
    apply(commands, doc);
  }
}
var {
  number: number$1
} = PDFObject;
var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);
var VectorMixin = {
  initVector() {
    this._ctm = [1, 0, 0, 1, 0, 0];
    return this._ctmStack = [];
  },
  save() {
    this._ctmStack.push(this._ctm.slice());
    return this.addContent("q");
  },
  restore() {
    this._ctm = this._ctmStack.pop() || [1, 0, 0, 1, 0, 0];
    return this.addContent("Q");
  },
  closePath() {
    return this.addContent("h");
  },
  lineWidth(w) {
    return this.addContent(`${number$1(w)} w`);
  },
  _CAP_STYLES: {
    BUTT: 0,
    ROUND: 1,
    SQUARE: 2
  },
  lineCap(c3) {
    if (typeof c3 === "string") {
      c3 = this._CAP_STYLES[c3.toUpperCase()];
    }
    return this.addContent(`${c3} J`);
  },
  _JOIN_STYLES: {
    MITER: 0,
    ROUND: 1,
    BEVEL: 2
  },
  lineJoin(j) {
    if (typeof j === "string") {
      j = this._JOIN_STYLES[j.toUpperCase()];
    }
    return this.addContent(`${j} j`);
  },
  miterLimit(m3) {
    return this.addContent(`${number$1(m3)} M`);
  },
  dash(length) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const originalLength = length;
    if (!Array.isArray(length)) {
      length = [length, options.space || length];
    }
    const valid = length.every((x3) => Number.isFinite(x3) && x3 > 0);
    if (!valid) {
      throw new Error(`dash(${JSON.stringify(originalLength)}, ${JSON.stringify(options)}) invalid, lengths must be numeric and greater than zero`);
    }
    length = length.map(number$1).join(" ");
    return this.addContent(`[${length}] ${number$1(options.phase || 0)} d`);
  },
  undash() {
    return this.addContent("[] 0 d");
  },
  moveTo(x3, y3) {
    return this.addContent(`${number$1(x3)} ${number$1(y3)} m`);
  },
  lineTo(x3, y3) {
    return this.addContent(`${number$1(x3)} ${number$1(y3)} l`);
  },
  bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x3, y3) {
    return this.addContent(`${number$1(cp1x)} ${number$1(cp1y)} ${number$1(cp2x)} ${number$1(cp2y)} ${number$1(x3)} ${number$1(y3)} c`);
  },
  quadraticCurveTo(cpx, cpy, x3, y3) {
    return this.addContent(`${number$1(cpx)} ${number$1(cpy)} ${number$1(x3)} ${number$1(y3)} v`);
  },
  rect(x3, y3, w, h) {
    return this.addContent(`${number$1(x3)} ${number$1(y3)} ${number$1(w)} ${number$1(h)} re`);
  },
  roundedRect(x3, y3, w, h, r) {
    if (r == null) {
      r = 0;
    }
    r = Math.min(r, 0.5 * w, 0.5 * h);
    const c3 = r * (1 - KAPPA);
    this.moveTo(x3 + r, y3);
    this.lineTo(x3 + w - r, y3);
    this.bezierCurveTo(x3 + w - c3, y3, x3 + w, y3 + c3, x3 + w, y3 + r);
    this.lineTo(x3 + w, y3 + h - r);
    this.bezierCurveTo(x3 + w, y3 + h - c3, x3 + w - c3, y3 + h, x3 + w - r, y3 + h);
    this.lineTo(x3 + r, y3 + h);
    this.bezierCurveTo(x3 + c3, y3 + h, x3, y3 + h - c3, x3, y3 + h - r);
    this.lineTo(x3, y3 + r);
    this.bezierCurveTo(x3, y3 + c3, x3 + c3, y3, x3 + r, y3);
    return this.closePath();
  },
  ellipse(x3, y3, r1, r22) {
    if (r22 == null) {
      r22 = r1;
    }
    x3 -= r1;
    y3 -= r22;
    const ox = r1 * KAPPA;
    const oy = r22 * KAPPA;
    const xe = x3 + r1 * 2;
    const ye = y3 + r22 * 2;
    const xm = x3 + r1;
    const ym = y3 + r22;
    this.moveTo(x3, ym);
    this.bezierCurveTo(x3, ym - oy, xm - ox, y3, xm, y3);
    this.bezierCurveTo(xm + ox, y3, xe, ym - oy, xe, ym);
    this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
    this.bezierCurveTo(xm - ox, ye, x3, ym + oy, x3, ym);
    return this.closePath();
  },
  circle(x3, y3, radius) {
    return this.ellipse(x3, y3, radius);
  },
  arc(x3, y3, radius, startAngle, endAngle, anticlockwise) {
    if (anticlockwise == null) {
      anticlockwise = false;
    }
    const TWO_PI = 2 * Math.PI;
    const HALF_PI = 0.5 * Math.PI;
    let deltaAng = endAngle - startAngle;
    if (Math.abs(deltaAng) > TWO_PI) {
      deltaAng = TWO_PI;
    } else if (deltaAng !== 0 && anticlockwise !== deltaAng < 0) {
      const dir = anticlockwise ? -1 : 1;
      deltaAng = dir * TWO_PI + deltaAng;
    }
    const numSegs = Math.ceil(Math.abs(deltaAng) / HALF_PI);
    const segAng = deltaAng / numSegs;
    const handleLen = segAng / HALF_PI * KAPPA * radius;
    let curAng = startAngle;
    let deltaCx = -Math.sin(curAng) * handleLen;
    let deltaCy = Math.cos(curAng) * handleLen;
    let ax = x3 + Math.cos(curAng) * radius;
    let ay = y3 + Math.sin(curAng) * radius;
    this.moveTo(ax, ay);
    for (let segIdx = 0;segIdx < numSegs; segIdx++) {
      const cp1x = ax + deltaCx;
      const cp1y = ay + deltaCy;
      curAng += segAng;
      ax = x3 + Math.cos(curAng) * radius;
      ay = y3 + Math.sin(curAng) * radius;
      deltaCx = -Math.sin(curAng) * handleLen;
      deltaCy = Math.cos(curAng) * handleLen;
      const cp2x = ax - deltaCx;
      const cp2y = ay - deltaCy;
      this.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ax, ay);
    }
    return this;
  },
  polygon() {
    for (var _len = arguments.length, points = new Array(_len), _key = 0;_key < _len; _key++) {
      points[_key] = arguments[_key];
    }
    this.moveTo(...points.shift() || []);
    for (let point of points) {
      this.lineTo(...point || []);
    }
    return this.closePath();
  },
  path(path2) {
    SVGPath.apply(this, path2);
    return this;
  },
  _windingRule(rule) {
    if (/even-?odd/.test(rule)) {
      return "*";
    }
    return "";
  },
  fill(color, rule) {
    if (/(even-?odd)|(non-?zero)/.test(color)) {
      rule = color;
      color = null;
    }
    if (color) {
      this.fillColor(color);
    }
    return this.addContent(`f${this._windingRule(rule)}`);
  },
  stroke(color) {
    if (color) {
      this.strokeColor(color);
    }
    return this.addContent("S");
  },
  fillAndStroke(fillColor, strokeColor, rule) {
    if (strokeColor == null) {
      strokeColor = fillColor;
    }
    const isFillRule = /(even-?odd)|(non-?zero)/;
    if (isFillRule.test(fillColor)) {
      rule = fillColor;
      fillColor = null;
    }
    if (isFillRule.test(strokeColor)) {
      rule = strokeColor;
      strokeColor = fillColor;
    }
    if (fillColor) {
      this.fillColor(fillColor);
      this.strokeColor(strokeColor);
    }
    return this.addContent(`B${this._windingRule(rule)}`);
  },
  clip(rule) {
    return this.addContent(`W${this._windingRule(rule)} n`);
  },
  transform(m11, m12, m21, m22, dx, dy) {
    if (m11 === 1 && m12 === 0 && m21 === 0 && m22 === 1 && dx === 0 && dy === 0) {
      return this;
    }
    const m3 = this._ctm;
    const [m02, m13, m23, m32, m4, m5] = m3;
    m3[0] = m02 * m11 + m23 * m12;
    m3[1] = m13 * m11 + m32 * m12;
    m3[2] = m02 * m21 + m23 * m22;
    m3[3] = m13 * m21 + m32 * m22;
    m3[4] = m02 * dx + m23 * dy + m4;
    m3[5] = m13 * dx + m32 * dy + m5;
    const values = [m11, m12, m21, m22, dx, dy].map((v3) => number$1(v3)).join(" ");
    return this.addContent(`${values} cm`);
  },
  translate(x3, y3) {
    return this.transform(1, 0, 0, 1, x3, y3);
  },
  rotate(angle) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let y3;
    const rad = angle * Math.PI / 180;
    const cos = Math.cos(rad);
    const sin = Math.sin(rad);
    let x3 = y3 = 0;
    if (options.origin != null) {
      [x3, y3] = options.origin;
      const x12 = x3 * cos - y3 * sin;
      const y12 = x3 * sin + y3 * cos;
      x3 -= x12;
      y3 -= y12;
    }
    return this.transform(cos, sin, -sin, cos, x3, y3);
  },
  scale(xFactor, yFactor) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let y3;
    if (yFactor == null) {
      yFactor = xFactor;
    }
    if (typeof yFactor === "object") {
      options = yFactor;
      yFactor = xFactor;
    }
    let x3 = y3 = 0;
    if (options.origin != null) {
      [x3, y3] = options.origin;
      x3 -= xFactor * x3;
      y3 -= yFactor * y3;
    }
    return this.transform(xFactor, 0, 0, yFactor, x3, y3);
  }
};
var WIN_ANSI_MAP = {
  402: 131,
  8211: 150,
  8212: 151,
  8216: 145,
  8217: 146,
  8218: 130,
  8220: 147,
  8221: 148,
  8222: 132,
  8224: 134,
  8225: 135,
  8226: 149,
  8230: 133,
  8364: 128,
  8240: 137,
  8249: 139,
  8250: 155,
  710: 136,
  8482: 153,
  338: 140,
  339: 156,
  732: 152,
  352: 138,
  353: 154,
  376: 159,
  381: 142,
  382: 158
};
var characters = `.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
  
space         exclam         quotedbl       numbersign
dollar        percent        ampersand      quotesingle
parenleft     parenright     asterisk       plus
comma         hyphen         period         slash
zero          one            two            three
four          five           six            seven
eight         nine           colon          semicolon
less          equal          greater        question
  
at            A              B              C
D             E              F              G
H             I              J              K
L             M              N              O
P             Q              R              S
T             U              V              W
X             Y              Z              bracketleft
backslash     bracketright   asciicircum    underscore
  
grave         a              b              c
d             e              f              g
h             i              j              k
l             m              n              o
p             q              r              s
t             u              v              w
x             y              z              braceleft
bar           braceright     asciitilde     .notdef
  
Euro          .notdef        quotesinglbase florin
quotedblbase  ellipsis       dagger         daggerdbl
circumflex    perthousand    Scaron         guilsinglleft
OE            .notdef        Zcaron         .notdef
.notdef       quoteleft      quoteright     quotedblleft
quotedblright bullet         endash         emdash
tilde         trademark      scaron         guilsinglright
oe            .notdef        zcaron         ydieresis
  
space         exclamdown     cent           sterling
currency      yen            brokenbar      section
dieresis      copyright      ordfeminine    guillemotleft
logicalnot    hyphen         registered     macron
degree        plusminus      twosuperior    threesuperior
acute         mu             paragraph      periodcentered
cedilla       onesuperior    ordmasculine   guillemotright
onequarter    onehalf        threequarters  questiondown
  
Agrave        Aacute         Acircumflex    Atilde
Adieresis     Aring          AE             Ccedilla
Egrave        Eacute         Ecircumflex    Edieresis
Igrave        Iacute         Icircumflex    Idieresis
Eth           Ntilde         Ograve         Oacute
Ocircumflex   Otilde         Odieresis      multiply
Oslash        Ugrave         Uacute         Ucircumflex
Udieresis     Yacute         Thorn          germandbls
  
agrave        aacute         acircumflex    atilde
adieresis     aring          ae             ccedilla
egrave        eacute         ecircumflex    edieresis
igrave        iacute         icircumflex    idieresis
eth           ntilde         ograve         oacute
ocircumflex   otilde         odieresis      divide
oslash        ugrave         uacute         ucircumflex
udieresis     yacute         thorn          ydieresis`.split(/\s+/);

class AFMFont {
  static open(filename) {
    return new AFMFont(fs.readFileSync(filename, "utf8"));
  }
  constructor(contents) {
    this.contents = contents;
    this.attributes = {};
    this.glyphWidths = {};
    this.boundingBoxes = {};
    this.kernPairs = {};
    this.parse();
    this.charWidths = new Array(256);
    for (let char = 0;char <= 255; char++) {
      this.charWidths[char] = this.glyphWidths[characters[char]];
    }
    this.bbox = this.attributes["FontBBox"].split(/\s+/).map((e) => +e);
    this.ascender = +(this.attributes["Ascender"] || 0);
    this.descender = +(this.attributes["Descender"] || 0);
    this.xHeight = +(this.attributes["XHeight"] || 0);
    this.capHeight = +(this.attributes["CapHeight"] || 0);
    this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);
  }
  parse() {
    let section = "";
    for (let line of this.contents.split("\n")) {
      var match;
      var a;
      if (match = line.match(/^Start(\w+)/)) {
        section = match[1];
        continue;
      } else if (match = line.match(/^End(\w+)/)) {
        section = "";
        continue;
      }
      switch (section) {
        case "FontMetrics":
          match = line.match(/(^\w+)\s+(.*)/);
          var key = match[1];
          var value15 = match[2];
          if (a = this.attributes[key]) {
            if (!Array.isArray(a)) {
              a = this.attributes[key] = [a];
            }
            a.push(value15);
          } else {
            this.attributes[key] = value15;
          }
          break;
        case "CharMetrics":
          if (!/^CH?\s/.test(line)) {
            continue;
          }
          var name = line.match(/\bN\s+(\.?\w+)\s*;/)[1];
          this.glyphWidths[name] = +line.match(/\bWX\s+(\d+)\s*;/)[1];
          break;
        case "KernPairs":
          match = line.match(/^KPX\s+(\.?\w+)\s+(\.?\w+)\s+(-?\d+)/);
          if (match) {
            this.kernPairs[match[1] + "\0" + match[2]] = parseInt(match[3]);
          }
          break;
      }
    }
  }
  encodeText(text) {
    const res = [];
    for (let i3 = 0, len = text.length;i3 < len; i3++) {
      let char = text.charCodeAt(i3);
      char = WIN_ANSI_MAP[char] || char;
      res.push(char.toString(16));
    }
    return res;
  }
  glyphsForString(string7) {
    const glyphs = [];
    for (let i3 = 0, len = string7.length;i3 < len; i3++) {
      const charCode = string7.charCodeAt(i3);
      glyphs.push(this.characterToGlyph(charCode));
    }
    return glyphs;
  }
  characterToGlyph(character) {
    return characters[WIN_ANSI_MAP[character] || character] || ".notdef";
  }
  widthOfGlyph(glyph) {
    return this.glyphWidths[glyph] || 0;
  }
  getKernPair(left, right) {
    return this.kernPairs[left + "\0" + right] || 0;
  }
  advancesForGlyphs(glyphs) {
    const advances = [];
    for (let index = 0;index < glyphs.length; index++) {
      const left = glyphs[index];
      const right = glyphs[index + 1];
      advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));
    }
    return advances;
  }
}

class PDFFont {
  constructor() {
  }
  encode() {
    throw new Error("Must be implemented by subclasses");
  }
  widthOfString() {
    throw new Error("Must be implemented by subclasses");
  }
  ref() {
    return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();
  }
  finalize() {
    if (this.embedded || this.dictionary == null) {
      return;
    }
    this.embed();
    return this.embedded = true;
  }
  embed() {
    throw new Error("Must be implemented by subclasses");
  }
  lineHeight(size, includeGap) {
    if (includeGap == null) {
      includeGap = false;
    }
    const gap = includeGap ? this.lineGap : 0;
    return (this.ascender + gap - this.descender) / 1000 * size;
  }
}
var STANDARD_FONTS = {
  Courier() {
    return fs.readFileSync(__dirname + "/data/Courier.afm", "utf8");
  },
  "Courier-Bold"() {
    return fs.readFileSync(__dirname + "/data/Courier-Bold.afm", "utf8");
  },
  "Courier-Oblique"() {
    return fs.readFileSync(__dirname + "/data/Courier-Oblique.afm", "utf8");
  },
  "Courier-BoldOblique"() {
    return fs.readFileSync(__dirname + "/data/Courier-BoldOblique.afm", "utf8");
  },
  Helvetica() {
    return fs.readFileSync(__dirname + "/data/Helvetica.afm", "utf8");
  },
  "Helvetica-Bold"() {
    return fs.readFileSync(__dirname + "/data/Helvetica-Bold.afm", "utf8");
  },
  "Helvetica-Oblique"() {
    return fs.readFileSync(__dirname + "/data/Helvetica-Oblique.afm", "utf8");
  },
  "Helvetica-BoldOblique"() {
    return fs.readFileSync(__dirname + "/data/Helvetica-BoldOblique.afm", "utf8");
  },
  "Times-Roman"() {
    return fs.readFileSync(__dirname + "/data/Times-Roman.afm", "utf8");
  },
  "Times-Bold"() {
    return fs.readFileSync(__dirname + "/data/Times-Bold.afm", "utf8");
  },
  "Times-Italic"() {
    return fs.readFileSync(__dirname + "/data/Times-Italic.afm", "utf8");
  },
  "Times-BoldItalic"() {
    return fs.readFileSync(__dirname + "/data/Times-BoldItalic.afm", "utf8");
  },
  Symbol() {
    return fs.readFileSync(__dirname + "/data/Symbol.afm", "utf8");
  },
  ZapfDingbats() {
    return fs.readFileSync(__dirname + "/data/ZapfDingbats.afm", "utf8");
  }
};

class StandardFont extends PDFFont {
  constructor(document2, name, id) {
    super();
    this.document = document2;
    this.name = name;
    this.id = id;
    this.font = new AFMFont(STANDARD_FONTS[this.name]());
    ({
      ascender: this.ascender,
      descender: this.descender,
      bbox: this.bbox,
      lineGap: this.lineGap,
      xHeight: this.xHeight,
      capHeight: this.capHeight
    } = this.font);
  }
  embed() {
    this.dictionary.data = {
      Type: "Font",
      BaseFont: this.name,
      Subtype: "Type1",
      Encoding: "WinAnsiEncoding"
    };
    return this.dictionary.end();
  }
  encode(text) {
    const encoded = this.font.encodeText(text);
    const glyphs = this.font.glyphsForString(`${text}`);
    const advances = this.font.advancesForGlyphs(glyphs);
    const positions = [];
    for (let i3 = 0;i3 < glyphs.length; i3++) {
      const glyph = glyphs[i3];
      positions.push({
        xAdvance: advances[i3],
        yAdvance: 0,
        xOffset: 0,
        yOffset: 0,
        advanceWidth: this.font.widthOfGlyph(glyph)
      });
    }
    return [encoded, positions];
  }
  widthOfString(string7, size) {
    const glyphs = this.font.glyphsForString(`${string7}`);
    const advances = this.font.advancesForGlyphs(glyphs);
    let width = 0;
    for (let advance of advances) {
      width += advance;
    }
    const scale = size / 1000;
    return width * scale;
  }
  static isStandardFont(name) {
    return name in STANDARD_FONTS;
  }
}
var toHex = function(num) {
  return `0000${num.toString(16)}`.slice(-4);
};

class EmbeddedFont extends PDFFont {
  constructor(document2, font, id) {
    super();
    this.document = document2;
    this.font = font;
    this.id = id;
    this.subset = this.font.createSubset();
    this.unicode = [[0]];
    this.widths = [this.font.getGlyph(0).advanceWidth];
    this.name = this.font.postscriptName;
    this.scale = 1000 / this.font.unitsPerEm;
    this.ascender = this.font.ascent * this.scale;
    this.descender = this.font.descent * this.scale;
    this.xHeight = this.font.xHeight * this.scale;
    this.capHeight = this.font.capHeight * this.scale;
    this.lineGap = this.font.lineGap * this.scale;
    this.bbox = this.font.bbox;
    if (document2.options.fontLayoutCache !== false) {
      this.layoutCache = Object.create(null);
    }
  }
  layoutRun(text, features) {
    const run = this.font.layout(text, features);
    for (let i3 = 0;i3 < run.positions.length; i3++) {
      const position = run.positions[i3];
      for (let key in position) {
        position[key] *= this.scale;
      }
      position.advanceWidth = run.glyphs[i3].advanceWidth * this.scale;
    }
    return run;
  }
  layoutCached(text) {
    if (!this.layoutCache) {
      return this.layoutRun(text);
    }
    let cached;
    if (cached = this.layoutCache[text]) {
      return cached;
    }
    const run = this.layoutRun(text);
    this.layoutCache[text] = run;
    return run;
  }
  layout(text, features, onlyWidth) {
    if (features) {
      return this.layoutRun(text, features);
    }
    let glyphs = onlyWidth ? null : [];
    let positions = onlyWidth ? null : [];
    let advanceWidth = 0;
    let last2 = 0;
    let index = 0;
    while (index <= text.length) {
      var needle;
      if (index === text.length && last2 < index || (needle = text.charAt(index), [" ", "\t"].includes(needle))) {
        const run = this.layoutCached(text.slice(last2, ++index));
        if (!onlyWidth) {
          glyphs = glyphs.concat(run.glyphs);
          positions = positions.concat(run.positions);
        }
        advanceWidth += run.advanceWidth;
        last2 = index;
      } else {
        index++;
      }
    }
    return {
      glyphs,
      positions,
      advanceWidth
    };
  }
  encode(text, features) {
    const {
      glyphs,
      positions
    } = this.layout(text, features);
    const res = [];
    for (let i3 = 0;i3 < glyphs.length; i3++) {
      const glyph = glyphs[i3];
      const gid = this.subset.includeGlyph(glyph.id);
      res.push(`0000${gid.toString(16)}`.slice(-4));
      if (this.widths[gid] == null) {
        this.widths[gid] = glyph.advanceWidth * this.scale;
      }
      if (this.unicode[gid] == null) {
        this.unicode[gid] = glyph.codePoints;
      }
    }
    return [res, positions];
  }
  widthOfString(string7, size, features) {
    const width = this.layout(string7, features, true).advanceWidth;
    const scale = size / 1000;
    return width * scale;
  }
  embed() {
    const isCFF = this.subset.cff != null;
    const fontFile = this.document.ref();
    if (isCFF) {
      fontFile.data.Subtype = "CIDFontType0C";
    }
    this.subset.encodeStream().on("data", (data) => fontFile.write(data)).on("end", () => fontFile.end());
    const familyClass = ((this.font["OS/2"] != null ? this.font["OS/2"].sFamilyClass : undefined) || 0) >> 8;
    let flags = 0;
    if (this.font.post.isFixedPitch) {
      flags |= 1 << 0;
    }
    if (1 <= familyClass && familyClass <= 7) {
      flags |= 1 << 1;
    }
    flags |= 1 << 2;
    if (familyClass === 10) {
      flags |= 1 << 3;
    }
    if (this.font.head.macStyle.italic) {
      flags |= 1 << 6;
    }
    const tag = [1, 2, 3, 4, 5, 6].map((i3) => String.fromCharCode((this.id.charCodeAt(i3) || 73) + 17)).join("");
    const name = tag + "+" + this.font.postscriptName;
    const {
      bbox
    } = this.font;
    const descriptor = this.document.ref({
      Type: "FontDescriptor",
      FontName: name,
      Flags: flags,
      FontBBox: [bbox.minX * this.scale, bbox.minY * this.scale, bbox.maxX * this.scale, bbox.maxY * this.scale],
      ItalicAngle: this.font.italicAngle,
      Ascent: this.ascender,
      Descent: this.descender,
      CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,
      XHeight: (this.font.xHeight || 0) * this.scale,
      StemV: 0
    });
    if (isCFF) {
      descriptor.data.FontFile3 = fontFile;
    } else {
      descriptor.data.FontFile2 = fontFile;
    }
    if (this.document.subset) {
      const CIDSet = Buffer.from("FFFFFFFFC0", "hex");
      const CIDSetRef = this.document.ref();
      CIDSetRef.write(CIDSet);
      CIDSetRef.end();
      descriptor.data.CIDSet = CIDSetRef;
    }
    descriptor.end();
    const descendantFontData = {
      Type: "Font",
      Subtype: "CIDFontType0",
      BaseFont: name,
      CIDSystemInfo: {
        Registry: new String("Adobe"),
        Ordering: new String("Identity"),
        Supplement: 0
      },
      FontDescriptor: descriptor,
      W: [0, this.widths]
    };
    if (!isCFF) {
      descendantFontData.Subtype = "CIDFontType2";
      descendantFontData.CIDToGIDMap = "Identity";
    }
    const descendantFont = this.document.ref(descendantFontData);
    descendantFont.end();
    this.dictionary.data = {
      Type: "Font",
      Subtype: "Type0",
      BaseFont: name,
      Encoding: "Identity-H",
      DescendantFonts: [descendantFont],
      ToUnicode: this.toUnicodeCmap()
    };
    return this.dictionary.end();
  }
  toUnicodeCmap() {
    const cmap = this.document.ref();
    const entries = [];
    for (let codePoints of this.unicode) {
      const encoded = [];
      for (let value15 of codePoints) {
        if (value15 > 65535) {
          value15 -= 65536;
          encoded.push(toHex(value15 >>> 10 & 1023 | 55296));
          value15 = 56320 | value15 & 1023;
        }
        encoded.push(toHex(value15));
      }
      entries.push(`<${encoded.join(" ")}>`);
    }
    const chunkSize = 256;
    const chunks = Math.ceil(entries.length / chunkSize);
    const ranges = [];
    for (let i3 = 0;i3 < chunks; i3++) {
      const start = i3 * chunkSize;
      const end = Math.min((i3 + 1) * chunkSize, entries.length);
      ranges.push(`<${toHex(start)}> <${toHex(end - 1)}> [${entries.slice(start, end).join(" ")}]`);
    }
    cmap.end(`/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo <<
  /Registry (Adobe)
  /Ordering (UCS)
  /Supplement 0
>> def
/CMapName /Adobe-Identity-UCS def
/CMapType 2 def
1 begincodespacerange
<0000><ffff>
endcodespacerange
1 beginbfrange
${ranges.join("\n")}
endbfrange
endcmap
CMapName currentdict /CMap defineresource pop
end
end`);
    return cmap;
  }
}

class PDFFontFactory {
  static open(document2, src, family, id) {
    let font;
    if (typeof src === "string") {
      if (StandardFont.isStandardFont(src)) {
        return new StandardFont(document2, src, id);
      }
      src = fs.readFileSync(src);
    }
    if (Buffer.isBuffer(src)) {
      font = $cf838c15c8b009ba$export$2e2bcd8739ae039.create(src, family);
    } else if (src instanceof Uint8Array) {
      font = $cf838c15c8b009ba$export$2e2bcd8739ae039.create(Buffer.from(src), family);
    } else if (src instanceof ArrayBuffer) {
      font = $cf838c15c8b009ba$export$2e2bcd8739ae039.create(Buffer.from(new Uint8Array(src)), family);
    }
    if (font == null) {
      throw new Error("Not a supported font format or standard PDF font.");
    }
    return new EmbeddedFont(document2, font, id);
  }
}
var FontsMixin = {
  initFonts() {
    let defaultFont = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Helvetica";
    this._fontFamilies = {};
    this._fontCount = 0;
    this._fontSize = 12;
    this._font = null;
    this._registeredFonts = {};
    if (defaultFont) {
      this.font(defaultFont);
    }
  },
  font(src, family, size) {
    let cacheKey, font;
    if (typeof family === "number") {
      size = family;
      family = null;
    }
    if (typeof src === "string" && this._registeredFonts[src]) {
      cacheKey = src;
      ({
        src,
        family
      } = this._registeredFonts[src]);
    } else {
      cacheKey = family || src;
      if (typeof cacheKey !== "string") {
        cacheKey = null;
      }
    }
    if (size != null) {
      this.fontSize(size);
    }
    if (font = this._fontFamilies[cacheKey]) {
      this._font = font;
      return this;
    }
    const id = `F${++this._fontCount}`;
    this._font = PDFFontFactory.open(this, src, family, id);
    if (font = this._fontFamilies[this._font.name]) {
      this._font = font;
      return this;
    }
    if (cacheKey) {
      this._fontFamilies[cacheKey] = this._font;
    }
    if (this._font.name) {
      this._fontFamilies[this._font.name] = this._font;
    }
    return this;
  },
  fontSize(_fontSize) {
    this._fontSize = _fontSize;
    return this;
  },
  currentLineHeight(includeGap) {
    if (includeGap == null) {
      includeGap = false;
    }
    return this._font.lineHeight(this._fontSize, includeGap);
  },
  registerFont(name, src, family) {
    this._registeredFonts[name] = {
      src,
      family
    };
    return this;
  }
};
var SOFT_HYPHEN = "\xAD";
var HYPHEN = "-";

class LineWrapper extends EventEmitter {
  constructor(document2, options) {
    super();
    this.document = document2;
    this.indent = options.indent || 0;
    this.characterSpacing = options.characterSpacing || 0;
    this.wordSpacing = options.wordSpacing === 0;
    this.columns = options.columns || 1;
    this.columnGap = options.columnGap != null ? options.columnGap : 18;
    this.lineWidth = (options.width - this.columnGap * (this.columns - 1)) / this.columns;
    this.spaceLeft = this.lineWidth;
    this.startX = this.document.x;
    this.startY = this.document.y;
    this.column = 1;
    this.ellipsis = options.ellipsis;
    this.continuedX = 0;
    this.features = options.features;
    if (options.height != null) {
      this.height = options.height;
      this.maxY = this.startY + options.height;
    } else {
      this.maxY = this.document.page.maxY();
    }
    this.on("firstLine", (options2) => {
      const indent = this.continuedX || this.indent;
      this.document.x += indent;
      this.lineWidth -= indent;
      return this.once("line", () => {
        this.document.x -= indent;
        this.lineWidth += indent;
        if (options2.continued && !this.continuedX) {
          this.continuedX = this.indent;
        }
        if (!options2.continued) {
          return this.continuedX = 0;
        }
      });
    });
    this.on("lastLine", (options2) => {
      const {
        align
      } = options2;
      if (align === "justify") {
        options2.align = "left";
      }
      this.lastLine = true;
      return this.once("line", () => {
        this.document.y += options2.paragraphGap || 0;
        options2.align = align;
        return this.lastLine = false;
      });
    });
  }
  wordWidth(word) {
    return this.document.widthOfString(word, this) + this.characterSpacing + this.wordSpacing;
  }
  canFit(word, w) {
    if (word[word.length - 1] != SOFT_HYPHEN) {
      return w <= this.spaceLeft;
    }
    return w + this.wordWidth(HYPHEN) <= this.spaceLeft;
  }
  eachWord(text, fn) {
    let bk;
    const breaker = new $557adaaeb0c7885f$exports(text);
    let last2 = null;
    const wordWidths = Object.create(null);
    while (bk = breaker.nextBreak()) {
      var shouldContinue;
      let word = text.slice((last2 != null ? last2.position : undefined) || 0, bk.position);
      let w = wordWidths[word] != null ? wordWidths[word] : wordWidths[word] = this.wordWidth(word);
      if (w > this.lineWidth + this.continuedX) {
        let lbk = last2;
        const fbk = {};
        while (word.length) {
          var l, mightGrow;
          if (w > this.spaceLeft) {
            l = Math.ceil(this.spaceLeft / (w / word.length));
            w = this.wordWidth(word.slice(0, l));
            mightGrow = w <= this.spaceLeft && l < word.length;
          } else {
            l = word.length;
          }
          let mustShrink = w > this.spaceLeft && l > 0;
          while (mustShrink || mightGrow) {
            if (mustShrink) {
              w = this.wordWidth(word.slice(0, --l));
              mustShrink = w > this.spaceLeft && l > 0;
            } else {
              w = this.wordWidth(word.slice(0, ++l));
              mustShrink = w > this.spaceLeft && l > 0;
              mightGrow = w <= this.spaceLeft && l < word.length;
            }
          }
          if (l === 0 && this.spaceLeft === this.lineWidth) {
            l = 1;
          }
          fbk.required = bk.required || l < word.length;
          shouldContinue = fn(word.slice(0, l), w, fbk, lbk);
          lbk = {
            required: false
          };
          word = word.slice(l);
          w = this.wordWidth(word);
          if (shouldContinue === false) {
            break;
          }
        }
      } else {
        shouldContinue = fn(word, w, bk, last2);
      }
      if (shouldContinue === false) {
        break;
      }
      last2 = bk;
    }
  }
  wrap(text, options) {
    if (options.indent != null) {
      this.indent = options.indent;
    }
    if (options.characterSpacing != null) {
      this.characterSpacing = options.characterSpacing;
    }
    if (options.wordSpacing != null) {
      this.wordSpacing = options.wordSpacing;
    }
    if (options.ellipsis != null) {
      this.ellipsis = options.ellipsis;
    }
    const nextY = this.document.y + this.document.currentLineHeight(true);
    if (this.document.y > this.maxY || nextY > this.maxY) {
      this.nextSection();
    }
    let buffer = "";
    let textWidth = 0;
    let wc = 0;
    let lc = 0;
    let {
      y: y3
    } = this.document;
    const emitLine = () => {
      options.textWidth = textWidth + this.wordSpacing * (wc - 1);
      options.wordCount = wc;
      options.lineWidth = this.lineWidth;
      ({
        y: y3
      } = this.document);
      this.emit("line", buffer, options, this);
      return lc++;
    };
    this.emit("sectionStart", options, this);
    this.eachWord(text, (word, w, bk, last2) => {
      if (last2 == null || last2.required) {
        this.emit("firstLine", options, this);
        this.spaceLeft = this.lineWidth;
      }
      if (this.canFit(word, w)) {
        buffer += word;
        textWidth += w;
        wc++;
      }
      if (bk.required || !this.canFit(word, w)) {
        const lh = this.document.currentLineHeight(true);
        if (this.height != null && this.ellipsis && this.document.y + lh * 2 > this.maxY && this.column >= this.columns) {
          if (this.ellipsis === true) {
            this.ellipsis = "\u2026";
          }
          buffer = buffer.replace(/\s+$/, "");
          textWidth = this.wordWidth(buffer + this.ellipsis);
          while (buffer && textWidth > this.lineWidth) {
            buffer = buffer.slice(0, -1).replace(/\s+$/, "");
            textWidth = this.wordWidth(buffer + this.ellipsis);
          }
          if (textWidth <= this.lineWidth) {
            buffer = buffer + this.ellipsis;
          }
          textWidth = this.wordWidth(buffer);
        }
        if (bk.required) {
          if (w > this.spaceLeft) {
            emitLine();
            buffer = word;
            textWidth = w;
            wc = 1;
          }
          this.emit("lastLine", options, this);
        }
        if (buffer[buffer.length - 1] == SOFT_HYPHEN) {
          buffer = buffer.slice(0, -1) + HYPHEN;
          this.spaceLeft -= this.wordWidth(HYPHEN);
        }
        emitLine();
        if (this.document.y + lh > this.maxY) {
          const shouldContinue = this.nextSection();
          if (!shouldContinue) {
            wc = 0;
            buffer = "";
            return false;
          }
        }
        if (bk.required) {
          this.spaceLeft = this.lineWidth;
          buffer = "";
          textWidth = 0;
          return wc = 0;
        } else {
          this.spaceLeft = this.lineWidth - w;
          buffer = word;
          textWidth = w;
          return wc = 1;
        }
      } else {
        return this.spaceLeft -= w;
      }
    });
    if (wc > 0) {
      this.emit("lastLine", options, this);
      emitLine();
    }
    this.emit("sectionEnd", options, this);
    if (options.continued === true) {
      if (lc > 1) {
        this.continuedX = 0;
      }
      this.continuedX += options.textWidth || 0;
      return this.document.y = y3;
    } else {
      return this.document.x = this.startX;
    }
  }
  nextSection(options) {
    this.emit("sectionEnd", options, this);
    if (++this.column > this.columns) {
      if (this.height != null) {
        return false;
      }
      this.document.continueOnNewPage();
      this.column = 1;
      this.startY = this.document.page.margins.top;
      this.maxY = this.document.page.maxY();
      this.document.x = this.startX;
      if (this.document._fillColor) {
        this.document.fillColor(...this.document._fillColor);
      }
      this.emit("pageBreak", options, this);
    } else {
      this.document.x += this.lineWidth + this.columnGap;
      this.document.y = this.startY;
      this.emit("columnBreak", options, this);
    }
    this.emit("sectionStart", options, this);
    return true;
  }
}
var {
  number: number$2
} = PDFObject;
var TextMixin = {
  initText() {
    this._line = this._line.bind(this);
    this.x = 0;
    this.y = 0;
    return this._lineGap = 0;
  },
  lineGap(_lineGap) {
    this._lineGap = _lineGap;
    return this;
  },
  moveDown(lines) {
    if (lines == null) {
      lines = 1;
    }
    this.y += this.currentLineHeight(true) * lines + this._lineGap;
    return this;
  },
  moveUp(lines) {
    if (lines == null) {
      lines = 1;
    }
    this.y -= this.currentLineHeight(true) * lines + this._lineGap;
    return this;
  },
  _text(text, x3, y3, options, lineCallback) {
    options = this._initOptions(x3, y3, options);
    text = text == null ? "" : `${text}`;
    if (options.wordSpacing) {
      text = text.replace(/\s{2,}/g, " ");
    }
    const addStructure = () => {
      if (options.structParent) {
        options.structParent.add(this.struct(options.structType || "P", [this.markStructureContent(options.structType || "P")]));
      }
    };
    if (options.width) {
      let wrapper = this._wrapper;
      if (!wrapper) {
        wrapper = new LineWrapper(this, options);
        wrapper.on("line", lineCallback);
        wrapper.on("firstLine", addStructure);
      }
      this._wrapper = options.continued ? wrapper : null;
      this._textOptions = options.continued ? options : null;
      wrapper.wrap(text, options);
    } else {
      for (let line of text.split("\n")) {
        addStructure();
        lineCallback(line, options);
      }
    }
    return this;
  },
  text(text, x3, y3, options) {
    return this._text(text, x3, y3, options, this._line);
  },
  widthOfString(string7) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return this._font.widthOfString(string7, this._fontSize, options.features) + (options.characterSpacing || 0) * (string7.length - 1);
  },
  heightOfString(text, options) {
    const {
      x: x3,
      y: y3
    } = this;
    options = this._initOptions(options);
    options.height = Infinity;
    const lineGap = options.lineGap || this._lineGap || 0;
    this._text(text, this.x, this.y, options, () => {
      return this.y += this.currentLineHeight(true) + lineGap;
    });
    const height = this.y - y3;
    this.x = x3;
    this.y = y3;
    return height;
  },
  list(list, x3, y3, options, wrapper) {
    options = this._initOptions(x3, y3, options);
    const listType = options.listType || "bullet";
    const unit = Math.round(this._font.ascender / 1000 * this._fontSize);
    const midLine = unit / 2;
    const r = options.bulletRadius || unit / 3;
    const indent = options.textIndent || (listType === "bullet" ? r * 5 : unit * 2);
    const itemIndent = options.bulletIndent || (listType === "bullet" ? r * 8 : unit * 2);
    let level = 1;
    const items = [];
    const levels = [];
    const numbers = [];
    var flatten = function(list2) {
      let n3 = 1;
      for (let i3 = 0;i3 < list2.length; i3++) {
        const item = list2[i3];
        if (Array.isArray(item)) {
          level++;
          flatten(item);
          level--;
        } else {
          items.push(item);
          levels.push(level);
          if (listType !== "bullet") {
            numbers.push(n3++);
          }
        }
      }
    };
    flatten(list);
    const label = function(n3) {
      switch (listType) {
        case "numbered":
          return `${n3}.`;
        case "lettered":
          var letter = String.fromCharCode((n3 - 1) % 26 + 65);
          var times = Math.floor((n3 - 1) / 26 + 1);
          var text = Array(times + 1).join(letter);
          return `${text}.`;
      }
    };
    const drawListItem = function(listItem) {
      wrapper = new LineWrapper(this, options);
      wrapper.on("line", this._line);
      level = 1;
      let i3 = 0;
      wrapper.once("firstLine", () => {
        let item, itemType, labelType, bodyType;
        if (options.structParent) {
          if (options.structTypes) {
            [itemType, labelType, bodyType] = options.structTypes;
          } else {
            [itemType, labelType, bodyType] = ["LI", "Lbl", "LBody"];
          }
        }
        if (itemType) {
          item = this.struct(itemType);
          options.structParent.add(item);
        } else if (options.structParent) {
          item = options.structParent;
        }
        let l;
        if ((l = levels[i3++]) !== level) {
          const diff = itemIndent * (l - level);
          this.x += diff;
          wrapper.lineWidth -= diff;
          level = l;
        }
        if (item && (labelType || bodyType)) {
          item.add(this.struct(labelType || bodyType, [this.markStructureContent(labelType || bodyType)]));
        }
        switch (listType) {
          case "bullet":
            this.circle(this.x - indent + r, this.y + midLine, r);
            this.fill();
            break;
          case "numbered":
          case "lettered":
            var text = label(numbers[i3 - 1]);
            this._fragment(text, this.x - indent, this.y, options);
            break;
        }
        if (item && labelType && bodyType) {
          item.add(this.struct(bodyType, [this.markStructureContent(bodyType)]));
        }
        if (item && item !== options.structParent) {
          item.end();
        }
      });
      wrapper.on("sectionStart", () => {
        const pos = indent + itemIndent * (level - 1);
        this.x += pos;
        return wrapper.lineWidth -= pos;
      });
      wrapper.on("sectionEnd", () => {
        const pos = indent + itemIndent * (level - 1);
        this.x -= pos;
        return wrapper.lineWidth += pos;
      });
      wrapper.wrap(listItem, options);
    };
    for (let i3 = 0;i3 < items.length; i3++) {
      drawListItem.call(this, items[i3]);
    }
    return this;
  },
  _initOptions() {
    let x3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let y3 = arguments.length > 1 ? arguments[1] : undefined;
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    if (typeof x3 === "object") {
      options = x3;
      x3 = null;
    }
    const result = Object.assign({}, options);
    if (this._textOptions) {
      for (let key in this._textOptions) {
        const val = this._textOptions[key];
        if (key !== "continued") {
          if (result[key] === undefined) {
            result[key] = val;
          }
        }
      }
    }
    if (x3 != null) {
      this.x = x3;
    }
    if (y3 != null) {
      this.y = y3;
    }
    if (result.lineBreak !== false) {
      if (result.width == null) {
        result.width = this.page.width - this.x - this.page.margins.right;
      }
      result.width = Math.max(result.width, 0);
    }
    if (!result.columns) {
      result.columns = 0;
    }
    if (result.columnGap == null) {
      result.columnGap = 18;
    }
    return result;
  },
  _line(text) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let wrapper = arguments.length > 2 ? arguments[2] : undefined;
    this._fragment(text, this.x, this.y, options);
    const lineGap = options.lineGap || this._lineGap || 0;
    if (!wrapper) {
      return this.x += this.widthOfString(text);
    } else {
      return this.y += this.currentLineHeight(true) + lineGap;
    }
  },
  _fragment(text, x3, y3, options) {
    let dy, encoded, i3, positions, textWidth, words;
    text = `${text}`.replace(/\n/g, "");
    if (text.length === 0) {
      return;
    }
    const align = options.align || "left";
    let wordSpacing = options.wordSpacing || 0;
    const characterSpacing = options.characterSpacing || 0;
    if (options.width) {
      switch (align) {
        case "right":
          textWidth = this.widthOfString(text.replace(/\s+$/, ""), options);
          x3 += options.lineWidth - textWidth;
          break;
        case "center":
          x3 += options.lineWidth / 2 - options.textWidth / 2;
          break;
        case "justify":
          words = text.trim().split(/\s+/);
          textWidth = this.widthOfString(text.replace(/\s+/g, ""), options);
          var spaceWidth = this.widthOfString(" ") + characterSpacing;
          wordSpacing = Math.max(0, (options.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);
          break;
      }
    }
    if (typeof options.baseline === "number") {
      dy = -options.baseline;
    } else {
      switch (options.baseline) {
        case "svg-middle":
          dy = 0.5 * this._font.xHeight;
          break;
        case "middle":
        case "svg-central":
          dy = 0.5 * (this._font.descender + this._font.ascender);
          break;
        case "bottom":
        case "ideographic":
          dy = this._font.descender;
          break;
        case "alphabetic":
          dy = 0;
          break;
        case "mathematical":
          dy = 0.5 * this._font.ascender;
          break;
        case "hanging":
          dy = 0.8 * this._font.ascender;
          break;
        case "top":
          dy = this._font.ascender;
          break;
        default:
          dy = this._font.ascender;
      }
      dy = dy / 1000 * this._fontSize;
    }
    const renderedWidth = options.textWidth + wordSpacing * (options.wordCount - 1) + characterSpacing * (text.length - 1);
    if (options.link != null) {
      this.link(x3, y3, renderedWidth, this.currentLineHeight(), options.link);
    }
    if (options.goTo != null) {
      this.goTo(x3, y3, renderedWidth, this.currentLineHeight(), options.goTo);
    }
    if (options.destination != null) {
      this.addNamedDestination(options.destination, "XYZ", x3, y3, null);
    }
    if (options.underline) {
      this.save();
      if (!options.stroke) {
        this.strokeColor(...this._fillColor || []);
      }
      const lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
      this.lineWidth(lineWidth);
      let lineY = y3 + this.currentLineHeight() - lineWidth;
      this.moveTo(x3, lineY);
      this.lineTo(x3 + renderedWidth, lineY);
      this.stroke();
      this.restore();
    }
    if (options.strike) {
      this.save();
      if (!options.stroke) {
        this.strokeColor(...this._fillColor || []);
      }
      const lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
      this.lineWidth(lineWidth);
      let lineY = y3 + this.currentLineHeight() / 2;
      this.moveTo(x3, lineY);
      this.lineTo(x3 + renderedWidth, lineY);
      this.stroke();
      this.restore();
    }
    this.save();
    if (options.oblique) {
      let skew;
      if (typeof options.oblique === "number") {
        skew = -Math.tan(options.oblique * Math.PI / 180);
      } else {
        skew = -0.25;
      }
      this.transform(1, 0, 0, 1, x3, y3);
      this.transform(1, 0, skew, 1, -skew * dy, 0);
      this.transform(1, 0, 0, 1, -x3, -y3);
    }
    this.transform(1, 0, 0, -1, 0, this.page.height);
    y3 = this.page.height - y3 - dy;
    if (this.page.fonts[this._font.id] == null) {
      this.page.fonts[this._font.id] = this._font.ref();
    }
    this.addContent("BT");
    this.addContent(`1 0 0 1 ${number$2(x3)} ${number$2(y3)} Tm`);
    this.addContent(`/${this._font.id} ${number$2(this._fontSize)} Tf`);
    const mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;
    if (mode) {
      this.addContent(`${mode} Tr`);
    }
    if (characterSpacing) {
      this.addContent(`${number$2(characterSpacing)} Tc`);
    }
    if (wordSpacing) {
      words = text.trim().split(/\s+/);
      wordSpacing += this.widthOfString(" ") + characterSpacing;
      wordSpacing *= 1000 / this._fontSize;
      encoded = [];
      positions = [];
      for (let word of words) {
        const [encodedWord, positionsWord] = this._font.encode(word, options.features);
        encoded = encoded.concat(encodedWord);
        positions = positions.concat(positionsWord);
        const space = {};
        const object13 = positions[positions.length - 1];
        for (let key in object13) {
          const val = object13[key];
          space[key] = val;
        }
        space.xAdvance += wordSpacing;
        positions[positions.length - 1] = space;
      }
    } else {
      [encoded, positions] = this._font.encode(text, options.features);
    }
    const scale = this._fontSize / 1000;
    const commands = [];
    let last2 = 0;
    let hadOffset = false;
    const addSegment = (cur) => {
      if (last2 < cur) {
        const hex = encoded.slice(last2, cur).join("");
        const advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;
        commands.push(`<${hex}> ${number$2(-advance)}`);
      }
      return last2 = cur;
    };
    const flush = (i4) => {
      addSegment(i4);
      if (commands.length > 0) {
        this.addContent(`[${commands.join(" ")}] TJ`);
        return commands.length = 0;
      }
    };
    for (i3 = 0;i3 < positions.length; i3++) {
      const pos = positions[i3];
      if (pos.xOffset || pos.yOffset) {
        flush(i3);
        this.addContent(`1 0 0 1 ${number$2(x3 + pos.xOffset * scale)} ${number$2(y3 + pos.yOffset * scale)} Tm`);
        flush(i3 + 1);
        hadOffset = true;
      } else {
        if (hadOffset) {
          this.addContent(`1 0 0 1 ${number$2(x3)} ${number$2(y3)} Tm`);
          hadOffset = false;
        }
        if (pos.xAdvance - pos.advanceWidth !== 0) {
          addSegment(i3 + 1);
        }
      }
      x3 += pos.xAdvance * scale;
    }
    flush(i3);
    this.addContent("ET");
    return this.restore();
  }
};
var MARKERS = [65472, 65473, 65474, 65475, 65477, 65478, 65479, 65480, 65481, 65482, 65483, 65484, 65485, 65486, 65487];
var COLOR_SPACE_MAP = {
  1: "DeviceGray",
  3: "DeviceRGB",
  4: "DeviceCMYK"
};

class JPEG {
  constructor(data, label) {
    let marker;
    this.data = data;
    this.label = label;
    if (this.data.readUInt16BE(0) !== 65496) {
      throw "SOI not found in JPEG";
    }
    this.orientation = import_jpeg_exif.default.fromBuffer(this.data).Orientation || 1;
    let pos = 2;
    while (pos < this.data.length) {
      marker = this.data.readUInt16BE(pos);
      pos += 2;
      if (MARKERS.includes(marker)) {
        break;
      }
      pos += this.data.readUInt16BE(pos);
    }
    if (!MARKERS.includes(marker)) {
      throw "Invalid JPEG.";
    }
    pos += 2;
    this.bits = this.data[pos++];
    this.height = this.data.readUInt16BE(pos);
    pos += 2;
    this.width = this.data.readUInt16BE(pos);
    pos += 2;
    const channels = this.data[pos++];
    this.colorSpace = COLOR_SPACE_MAP[channels];
    this.obj = null;
  }
  embed(document2) {
    if (this.obj) {
      return;
    }
    this.obj = document2.ref({
      Type: "XObject",
      Subtype: "Image",
      BitsPerComponent: this.bits,
      Width: this.width,
      Height: this.height,
      ColorSpace: this.colorSpace,
      Filter: "DCTDecode"
    });
    if (this.colorSpace === "DeviceCMYK") {
      this.obj.data["Decode"] = [1, 0, 1, 0, 1, 0, 1, 0];
    }
    this.obj.end(this.data);
    return this.data = null;
  }
}

class PNGImage {
  constructor(data, label) {
    this.label = label;
    this.image = new import_png_js.default(data);
    this.width = this.image.width;
    this.height = this.image.height;
    this.imgData = this.image.imgData;
    this.obj = null;
  }
  embed(document2) {
    let dataDecoded = false;
    this.document = document2;
    if (this.obj) {
      return;
    }
    const hasAlphaChannel = this.image.hasAlphaChannel;
    const isInterlaced = this.image.interlaceMethod === 1;
    this.obj = this.document.ref({
      Type: "XObject",
      Subtype: "Image",
      BitsPerComponent: hasAlphaChannel ? 8 : this.image.bits,
      Width: this.width,
      Height: this.height,
      Filter: "FlateDecode"
    });
    if (!hasAlphaChannel) {
      const params = this.document.ref({
        Predictor: isInterlaced ? 1 : 15,
        Colors: this.image.colors,
        BitsPerComponent: this.image.bits,
        Columns: this.width
      });
      this.obj.data["DecodeParms"] = params;
      params.end();
    }
    if (this.image.palette.length === 0) {
      this.obj.data["ColorSpace"] = this.image.colorSpace;
    } else {
      const palette = this.document.ref();
      palette.end(Buffer.from(this.image.palette));
      this.obj.data["ColorSpace"] = ["Indexed", "DeviceRGB", this.image.palette.length / 3 - 1, palette];
    }
    if (this.image.transparency.grayscale != null) {
      const val = this.image.transparency.grayscale;
      this.obj.data["Mask"] = [val, val];
    } else if (this.image.transparency.rgb) {
      const {
        rgb
      } = this.image.transparency;
      const mask = [];
      for (let x3 of rgb) {
        mask.push(x3, x3);
      }
      this.obj.data["Mask"] = mask;
    } else if (this.image.transparency.indexed) {
      dataDecoded = true;
      return this.loadIndexedAlphaChannel();
    } else if (hasAlphaChannel) {
      dataDecoded = true;
      return this.splitAlphaChannel();
    }
    if (isInterlaced && !dataDecoded) {
      return this.decodeData();
    }
    this.finalize();
  }
  finalize() {
    if (this.alphaChannel) {
      const sMask = this.document.ref({
        Type: "XObject",
        Subtype: "Image",
        Height: this.height,
        Width: this.width,
        BitsPerComponent: 8,
        Filter: "FlateDecode",
        ColorSpace: "DeviceGray",
        Decode: [0, 1]
      });
      sMask.end(this.alphaChannel);
      this.obj.data["SMask"] = sMask;
    }
    this.obj.end(this.imgData);
    this.image = null;
    return this.imgData = null;
  }
  splitAlphaChannel() {
    return this.image.decodePixels((pixels) => {
      let a, p3;
      const colorCount = this.image.colors;
      const pixelCount = this.width * this.height;
      const imgData = Buffer.alloc(pixelCount * colorCount);
      const alphaChannel = Buffer.alloc(pixelCount);
      let i3 = p3 = a = 0;
      const len = pixels.length;
      const skipByteCount = this.image.bits === 16 ? 1 : 0;
      while (i3 < len) {
        for (let colorIndex = 0;colorIndex < colorCount; colorIndex++) {
          imgData[p3++] = pixels[i3++];
          i3 += skipByteCount;
        }
        alphaChannel[a++] = pixels[i3++];
        i3 += skipByteCount;
      }
      this.imgData = zlib.deflateSync(imgData);
      this.alphaChannel = zlib.deflateSync(alphaChannel);
      return this.finalize();
    });
  }
  loadIndexedAlphaChannel() {
    const transparency = this.image.transparency.indexed;
    return this.image.decodePixels((pixels) => {
      const alphaChannel = Buffer.alloc(this.width * this.height);
      let i3 = 0;
      for (let j = 0, end = pixels.length;j < end; j++) {
        alphaChannel[i3++] = transparency[pixels[j]];
      }
      this.alphaChannel = zlib.deflateSync(alphaChannel);
      return this.finalize();
    });
  }
  decodeData() {
    this.image.decodePixels((pixels) => {
      this.imgData = zlib.deflateSync(pixels);
      this.finalize();
    });
  }
}

class PDFImage {
  static open(src, label) {
    let data;
    if (Buffer.isBuffer(src)) {
      data = src;
    } else if (src instanceof ArrayBuffer) {
      data = Buffer.from(new Uint8Array(src));
    } else {
      let match;
      if (match = /^data:.+?;base64,(.*)$/.exec(src)) {
        data = Buffer.from(match[1], "base64");
      } else {
        data = fs.readFileSync(src);
        if (!data) {
          return;
        }
      }
    }
    if (data[0] === 255 && data[1] === 216) {
      return new JPEG(data, label);
    } else if (data[0] === 137 && data.toString("ascii", 1, 4) === "PNG") {
      return new PNGImage(data, label);
    } else {
      throw new Error("Unknown image format.");
    }
  }
}
var ImagesMixin = {
  initImages() {
    this._imageRegistry = {};
    return this._imageCount = 0;
  },
  image(src, x3, y3) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    let bh, bp, bw, image, ip, left, left1, rotateAngle, originX, originY;
    if (typeof x3 === "object") {
      options = x3;
      x3 = null;
    }
    const ignoreOrientation = options.ignoreOrientation || options.ignoreOrientation !== false && this.options.ignoreOrientation;
    x3 = (left = x3 != null ? x3 : options.x) != null ? left : this.x;
    y3 = (left1 = y3 != null ? y3 : options.y) != null ? left1 : this.y;
    if (typeof src === "string") {
      image = this._imageRegistry[src];
    }
    if (!image) {
      if (src.width && src.height) {
        image = src;
      } else {
        image = this.openImage(src);
      }
    }
    if (!image.obj) {
      image.embed(this);
    }
    if (this.page.xobjects[image.label] == null) {
      this.page.xobjects[image.label] = image.obj;
    }
    let {
      width,
      height
    } = image;
    if (!ignoreOrientation && image.orientation > 4) {
      [width, height] = [height, width];
    }
    let w = options.width || width;
    let h = options.height || height;
    if (options.width && !options.height) {
      const wp = w / width;
      w = width * wp;
      h = height * wp;
    } else if (options.height && !options.width) {
      const hp = h / height;
      w = width * hp;
      h = height * hp;
    } else if (options.scale) {
      w = width * options.scale;
      h = height * options.scale;
    } else if (options.fit) {
      [bw, bh] = options.fit;
      bp = bw / bh;
      ip = width / height;
      if (ip > bp) {
        w = bw;
        h = bw / ip;
      } else {
        h = bh;
        w = bh * ip;
      }
    } else if (options.cover) {
      [bw, bh] = options.cover;
      bp = bw / bh;
      ip = width / height;
      if (ip > bp) {
        h = bh;
        w = bh * ip;
      } else {
        w = bw;
        h = bw / ip;
      }
    }
    if (options.fit || options.cover) {
      if (options.align === "center") {
        x3 = x3 + bw / 2 - w / 2;
      } else if (options.align === "right") {
        x3 = x3 + bw - w;
      }
      if (options.valign === "center") {
        y3 = y3 + bh / 2 - h / 2;
      } else if (options.valign === "bottom") {
        y3 = y3 + bh - h;
      }
    }
    if (!ignoreOrientation) {
      switch (image.orientation) {
        default:
        case 1:
          h = -h;
          y3 -= h;
          rotateAngle = 0;
          break;
        case 2:
          w = -w;
          h = -h;
          x3 -= w;
          y3 -= h;
          rotateAngle = 0;
          break;
        case 3:
          originX = x3;
          originY = y3;
          h = -h;
          x3 -= w;
          rotateAngle = 180;
          break;
        case 4:
          break;
        case 5:
          originX = x3;
          originY = y3;
          [w, h] = [h, w];
          y3 -= h;
          rotateAngle = 90;
          break;
        case 6:
          originX = x3;
          originY = y3;
          [w, h] = [h, w];
          h = -h;
          rotateAngle = 90;
          break;
        case 7:
          originX = x3;
          originY = y3;
          [w, h] = [h, w];
          h = -h;
          w = -w;
          x3 -= w;
          rotateAngle = 90;
          break;
        case 8:
          originX = x3;
          originY = y3;
          [w, h] = [h, w];
          h = -h;
          x3 -= w;
          y3 -= h;
          rotateAngle = -90;
          break;
      }
    } else {
      h = -h;
      y3 -= h;
      rotateAngle = 0;
    }
    if (options.link != null) {
      this.link(x3, y3, w, h, options.link);
    }
    if (options.goTo != null) {
      this.goTo(x3, y3, w, h, options.goTo);
    }
    if (options.destination != null) {
      this.addNamedDestination(options.destination, "XYZ", x3, y3, null);
    }
    if (this.y === y3) {
      this.y += h;
    }
    this.save();
    if (rotateAngle) {
      this.rotate(rotateAngle, {
        origin: [originX, originY]
      });
    }
    this.transform(w, 0, 0, h, x3, y3);
    this.addContent(`/${image.label} Do`);
    this.restore();
    return this;
  },
  openImage(src) {
    let image;
    if (typeof src === "string") {
      image = this._imageRegistry[src];
    }
    if (!image) {
      image = PDFImage.open(src, `I${++this._imageCount}`);
      if (typeof src === "string") {
        this._imageRegistry[src] = image;
      }
    }
    return image;
  }
};
var AnnotationsMixin = {
  annotate(x3, y3, w, h, options) {
    options.Type = "Annot";
    options.Rect = this._convertRect(x3, y3, w, h);
    options.Border = [0, 0, 0];
    if (options.Subtype === "Link" && typeof options.F === "undefined") {
      options.F = 1 << 2;
    }
    if (options.Subtype !== "Link") {
      if (options.C == null) {
        options.C = this._normalizeColor(options.color || [0, 0, 0]);
      }
    }
    delete options.color;
    if (typeof options.Dest === "string") {
      options.Dest = new String(options.Dest);
    }
    for (let key in options) {
      const val = options[key];
      options[key[0].toUpperCase() + key.slice(1)] = val;
    }
    const ref4 = this.ref(options);
    this.page.annotations.push(ref4);
    ref4.end();
    return this;
  },
  note(x3, y3, w, h, contents) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    options.Subtype = "Text";
    options.Contents = new String(contents);
    options.Name = "Comment";
    if (options.color == null) {
      options.color = [243, 223, 92];
    }
    return this.annotate(x3, y3, w, h, options);
  },
  goTo(x3, y3, w, h, name) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    options.Subtype = "Link";
    options.A = this.ref({
      S: "GoTo",
      D: new String(name)
    });
    options.A.end();
    return this.annotate(x3, y3, w, h, options);
  },
  link(x3, y3, w, h, url) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    options.Subtype = "Link";
    if (typeof url === "number") {
      const pages = this._root.data.Pages.data;
      if (url >= 0 && url < pages.Kids.length) {
        options.A = this.ref({
          S: "GoTo",
          D: [pages.Kids[url], "XYZ", null, null, null]
        });
        options.A.end();
      } else {
        throw new Error(`The document has no page ${url}`);
      }
    } else {
      options.A = this.ref({
        S: "URI",
        URI: new String(url)
      });
      options.A.end();
    }
    return this.annotate(x3, y3, w, h, options);
  },
  _markup(x3, y3, w, h) {
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    const [x12, y12, x22, y22] = this._convertRect(x3, y3, w, h);
    options.QuadPoints = [x12, y22, x22, y22, x12, y12, x22, y12];
    options.Contents = new String;
    return this.annotate(x3, y3, w, h, options);
  },
  highlight(x3, y3, w, h) {
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    options.Subtype = "Highlight";
    if (options.color == null) {
      options.color = [241, 238, 148];
    }
    return this._markup(x3, y3, w, h, options);
  },
  underline(x3, y3, w, h) {
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    options.Subtype = "Underline";
    return this._markup(x3, y3, w, h, options);
  },
  strike(x3, y3, w, h) {
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    options.Subtype = "StrikeOut";
    return this._markup(x3, y3, w, h, options);
  },
  lineAnnotation(x12, y12, x22, y22) {
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    options.Subtype = "Line";
    options.Contents = new String;
    options.L = [x12, this.page.height - y12, x22, this.page.height - y22];
    return this.annotate(x12, y12, x22, y22, options);
  },
  rectAnnotation(x3, y3, w, h) {
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    options.Subtype = "Square";
    options.Contents = new String;
    return this.annotate(x3, y3, w, h, options);
  },
  ellipseAnnotation(x3, y3, w, h) {
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    options.Subtype = "Circle";
    options.Contents = new String;
    return this.annotate(x3, y3, w, h, options);
  },
  textAnnotation(x3, y3, w, h, text) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    options.Subtype = "FreeText";
    options.Contents = new String(text);
    options.DA = new String;
    return this.annotate(x3, y3, w, h, options);
  },
  fileAnnotation(x3, y3, w, h) {
    let file = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    const filespec = this.file(file.src, Object.assign({
      hidden: true
    }, file));
    options.Subtype = "FileAttachment";
    options.FS = filespec;
    if (options.Contents) {
      options.Contents = new String(options.Contents);
    } else if (filespec.data.Desc) {
      options.Contents = filespec.data.Desc;
    }
    return this.annotate(x3, y3, w, h, options);
  },
  _convertRect(x12, y12, w, h) {
    let y22 = y12;
    y12 += h;
    let x22 = x12 + w;
    const [m02, m12, m22, m3, m4, m5] = this._ctm;
    x12 = m02 * x12 + m22 * y12 + m4;
    y12 = m12 * x12 + m3 * y12 + m5;
    x22 = m02 * x22 + m22 * y22 + m4;
    y22 = m12 * x22 + m3 * y22 + m5;
    return [x12, y12, x22, y22];
  }
};

class PDFOutline {
  constructor(document2, parent, title, dest) {
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
      expanded: false
    };
    this.document = document2;
    this.options = options;
    this.outlineData = {};
    if (dest !== null) {
      this.outlineData["Dest"] = [dest.dictionary, "Fit"];
    }
    if (parent !== null) {
      this.outlineData["Parent"] = parent;
    }
    if (title !== null) {
      this.outlineData["Title"] = new String(title);
    }
    this.dictionary = this.document.ref(this.outlineData);
    this.children = [];
  }
  addItem(title) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      expanded: false
    };
    const result = new PDFOutline(this.document, this.dictionary, title, this.document.page, options);
    this.children.push(result);
    return result;
  }
  endOutline() {
    if (this.children.length > 0) {
      if (this.options.expanded) {
        this.outlineData.Count = this.children.length;
      }
      const first2 = this.children[0], last2 = this.children[this.children.length - 1];
      this.outlineData.First = first2.dictionary;
      this.outlineData.Last = last2.dictionary;
      for (let i3 = 0, len = this.children.length;i3 < len; i3++) {
        const child = this.children[i3];
        if (i3 > 0) {
          child.outlineData.Prev = this.children[i3 - 1].dictionary;
        }
        if (i3 < this.children.length - 1) {
          child.outlineData.Next = this.children[i3 + 1].dictionary;
        }
        child.endOutline();
      }
    }
    return this.dictionary.end();
  }
}
var OutlineMixin = {
  initOutline() {
    return this.outline = new PDFOutline(this, null, null, null);
  },
  endOutline() {
    this.outline.endOutline();
    if (this.outline.children.length > 0) {
      this._root.data.Outlines = this.outline.dictionary;
      return this._root.data.PageMode = "UseOutlines";
    }
  }
};

class PDFStructureContent {
  constructor(pageRef, mcid) {
    this.refs = [{
      pageRef,
      mcid
    }];
  }
  push(structContent) {
    structContent.refs.forEach((ref4) => this.refs.push(ref4));
  }
}

class PDFStructureElement {
  constructor(document2, type47) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    this.document = document2;
    this._attached = false;
    this._ended = false;
    this._flushed = false;
    this.dictionary = document2.ref({
      S: type47
    });
    const data = this.dictionary.data;
    if (Array.isArray(options) || this._isValidChild(options)) {
      children = options;
      options = {};
    }
    if (typeof options.title !== "undefined") {
      data.T = new String(options.title);
    }
    if (typeof options.lang !== "undefined") {
      data.Lang = new String(options.lang);
    }
    if (typeof options.alt !== "undefined") {
      data.Alt = new String(options.alt);
    }
    if (typeof options.expanded !== "undefined") {
      data.E = new String(options.expanded);
    }
    if (typeof options.actual !== "undefined") {
      data.ActualText = new String(options.actual);
    }
    this._children = [];
    if (children) {
      if (!Array.isArray(children)) {
        children = [children];
      }
      children.forEach((child) => this.add(child));
      this.end();
    }
  }
  add(child) {
    if (this._ended) {
      throw new Error(`Cannot add child to already-ended structure element`);
    }
    if (!this._isValidChild(child)) {
      throw new Error(`Invalid structure element child`);
    }
    if (child instanceof PDFStructureElement) {
      child.setParent(this.dictionary);
      if (this._attached) {
        child.setAttached();
      }
    }
    if (child instanceof PDFStructureContent) {
      this._addContentToParentTree(child);
    }
    if (typeof child === "function" && this._attached) {
      child = this._contentForClosure(child);
    }
    this._children.push(child);
    return this;
  }
  _addContentToParentTree(content) {
    content.refs.forEach((_ref) => {
      let {
        pageRef,
        mcid
      } = _ref;
      const pageStructParents = this.document.getStructParentTree().get(pageRef.data.StructParents);
      pageStructParents[mcid] = this.dictionary;
    });
  }
  setParent(parentRef) {
    if (this.dictionary.data.P) {
      throw new Error(`Structure element added to more than one parent`);
    }
    this.dictionary.data.P = parentRef;
    this._flush();
  }
  setAttached() {
    if (this._attached) {
      return;
    }
    this._children.forEach((child, index) => {
      if (child instanceof PDFStructureElement) {
        child.setAttached();
      }
      if (typeof child === "function") {
        this._children[index] = this._contentForClosure(child);
      }
    });
    this._attached = true;
    this._flush();
  }
  end() {
    if (this._ended) {
      return;
    }
    this._children.filter((child) => child instanceof PDFStructureElement).forEach((child) => child.end());
    this._ended = true;
    this._flush();
  }
  _isValidChild(child) {
    return child instanceof PDFStructureElement || child instanceof PDFStructureContent || typeof child === "function";
  }
  _contentForClosure(closure) {
    const content = this.document.markStructureContent(this.dictionary.data.S);
    closure();
    this.document.endMarkedContent();
    this._addContentToParentTree(content);
    return content;
  }
  _isFlushable() {
    if (!this.dictionary.data.P || !this._ended) {
      return false;
    }
    return this._children.every((child) => {
      if (typeof child === "function") {
        return false;
      }
      if (child instanceof PDFStructureElement) {
        return child._isFlushable();
      }
      return true;
    });
  }
  _flush() {
    if (this._flushed || !this._isFlushable()) {
      return;
    }
    this.dictionary.data.K = [];
    this._children.forEach((child) => this._flushChild(child));
    this.dictionary.end();
    this._children = [];
    this.dictionary.data.K = null;
    this._flushed = true;
  }
  _flushChild(child) {
    if (child instanceof PDFStructureElement) {
      this.dictionary.data.K.push(child.dictionary);
    }
    if (child instanceof PDFStructureContent) {
      child.refs.forEach((_ref2) => {
        let {
          pageRef,
          mcid
        } = _ref2;
        if (!this.dictionary.data.Pg) {
          this.dictionary.data.Pg = pageRef;
        }
        if (this.dictionary.data.Pg === pageRef) {
          this.dictionary.data.K.push(mcid);
        } else {
          this.dictionary.data.K.push({
            Type: "MCR",
            Pg: pageRef,
            MCID: mcid
          });
        }
      });
    }
  }
}

class PDFNumberTree extends PDFTree {
  _compareKeys(a, b) {
    return parseInt(a) - parseInt(b);
  }
  _keysName() {
    return "Nums";
  }
  _dataForKey(k) {
    return parseInt(k);
  }
}
var MarkingsMixin = {
  initMarkings(options) {
    this.structChildren = [];
    if (options.tagged) {
      this.getMarkInfoDictionary().data.Marked = true;
      this.getStructTreeRoot();
    }
  },
  markContent(tag) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    if (tag === "Artifact" || options && options.mcid) {
      let toClose = 0;
      this.page.markings.forEach((marking) => {
        if (toClose || marking.structContent || marking.tag === "Artifact") {
          toClose++;
        }
      });
      while (toClose--) {
        this.endMarkedContent();
      }
    }
    if (!options) {
      this.page.markings.push({
        tag
      });
      this.addContent(`/${tag} BMC`);
      return this;
    }
    this.page.markings.push({
      tag,
      options
    });
    const dictionary = {};
    if (typeof options.mcid !== "undefined") {
      dictionary.MCID = options.mcid;
    }
    if (tag === "Artifact") {
      if (typeof options.type === "string") {
        dictionary.Type = options.type;
      }
      if (Array.isArray(options.bbox)) {
        dictionary.BBox = [options.bbox[0], this.page.height - options.bbox[3], options.bbox[2], this.page.height - options.bbox[1]];
      }
      if (Array.isArray(options.attached) && options.attached.every((val) => typeof val === "string")) {
        dictionary.Attached = options.attached;
      }
    }
    if (tag === "Span") {
      if (options.lang) {
        dictionary.Lang = new String(options.lang);
      }
      if (options.alt) {
        dictionary.Alt = new String(options.alt);
      }
      if (options.expanded) {
        dictionary.E = new String(options.expanded);
      }
      if (options.actual) {
        dictionary.ActualText = new String(options.actual);
      }
    }
    this.addContent(`/${tag} ${PDFObject.convert(dictionary)} BDC`);
    return this;
  },
  markStructureContent(tag) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const pageStructParents = this.getStructParentTree().get(this.page.structParentTreeKey);
    const mcid = pageStructParents.length;
    pageStructParents.push(null);
    this.markContent(tag, {
      ...options,
      mcid
    });
    const structContent = new PDFStructureContent(this.page.dictionary, mcid);
    this.page.markings.slice(-1)[0].structContent = structContent;
    return structContent;
  },
  endMarkedContent() {
    this.page.markings.pop();
    this.addContent("EMC");
    return this;
  },
  struct(type47) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    return new PDFStructureElement(this, type47, options, children);
  },
  addStructure(structElem) {
    const structTreeRoot = this.getStructTreeRoot();
    structElem.setParent(structTreeRoot);
    structElem.setAttached();
    this.structChildren.push(structElem);
    if (!structTreeRoot.data.K) {
      structTreeRoot.data.K = [];
    }
    structTreeRoot.data.K.push(structElem.dictionary);
    return this;
  },
  initPageMarkings(pageMarkings) {
    pageMarkings.forEach((marking) => {
      if (marking.structContent) {
        const structContent = marking.structContent;
        const newStructContent = this.markStructureContent(marking.tag, marking.options);
        structContent.push(newStructContent);
        this.page.markings.slice(-1)[0].structContent = structContent;
      } else {
        this.markContent(marking.tag, marking.options);
      }
    });
  },
  endPageMarkings(page) {
    const pageMarkings = page.markings;
    pageMarkings.forEach(() => page.write("EMC"));
    page.markings = [];
    return pageMarkings;
  },
  getMarkInfoDictionary() {
    if (!this._root.data.MarkInfo) {
      this._root.data.MarkInfo = this.ref({});
    }
    return this._root.data.MarkInfo;
  },
  getStructTreeRoot() {
    if (!this._root.data.StructTreeRoot) {
      this._root.data.StructTreeRoot = this.ref({
        Type: "StructTreeRoot",
        ParentTree: new PDFNumberTree,
        ParentTreeNextKey: 0
      });
    }
    return this._root.data.StructTreeRoot;
  },
  getStructParentTree() {
    return this.getStructTreeRoot().data.ParentTree;
  },
  createStructParentTreeNextKey() {
    this.getMarkInfoDictionary();
    const structTreeRoot = this.getStructTreeRoot();
    const key = structTreeRoot.data.ParentTreeNextKey++;
    structTreeRoot.data.ParentTree.add(key, []);
    return key;
  },
  endMarkings() {
    const structTreeRoot = this._root.data.StructTreeRoot;
    if (structTreeRoot) {
      structTreeRoot.end();
      this.structChildren.forEach((structElem) => structElem.end());
    }
    if (this._root.data.MarkInfo) {
      this._root.data.MarkInfo.end();
    }
  }
};
var FIELD_FLAGS = {
  readOnly: 1,
  required: 2,
  noExport: 4,
  multiline: 4096,
  password: 8192,
  toggleToOffButton: 16384,
  radioButton: 32768,
  pushButton: 65536,
  combo: 131072,
  edit: 262144,
  sort: 524288,
  multiSelect: 2097152,
  noSpell: 4194304
};
var FIELD_JUSTIFY = {
  left: 0,
  center: 1,
  right: 2
};
var VALUE_MAP = {
  value: "V",
  defaultValue: "DV"
};
var FORMAT_SPECIAL = {
  zip: "0",
  zipPlus4: "1",
  zip4: "1",
  phone: "2",
  ssn: "3"
};
var FORMAT_DEFAULT = {
  number: {
    nDec: 0,
    sepComma: false,
    negStyle: "MinusBlack",
    currency: "",
    currencyPrepend: true
  },
  percent: {
    nDec: 0,
    sepComma: false
  }
};
var AcroFormMixin = {
  initForm() {
    if (!this._font) {
      throw new Error("Must set a font before calling initForm method");
    }
    this._acroform = {
      fonts: {},
      defaultFont: this._font.name
    };
    this._acroform.fonts[this._font.id] = this._font.ref();
    let data = {
      Fields: [],
      NeedAppearances: true,
      DA: new String(`/${this._font.id} 0 Tf 0 g`),
      DR: {
        Font: {}
      }
    };
    data.DR.Font[this._font.id] = this._font.ref();
    const AcroForm = this.ref(data);
    this._root.data.AcroForm = AcroForm;
    return this;
  },
  endAcroForm() {
    if (this._root.data.AcroForm) {
      if (!Object.keys(this._acroform.fonts).length && !this._acroform.defaultFont) {
        throw new Error("No fonts specified for PDF form");
      }
      let fontDict = this._root.data.AcroForm.data.DR.Font;
      Object.keys(this._acroform.fonts).forEach((name) => {
        fontDict[name] = this._acroform.fonts[name];
      });
      this._root.data.AcroForm.data.Fields.forEach((fieldRef) => {
        this._endChild(fieldRef);
      });
      this._root.data.AcroForm.end();
    }
    return this;
  },
  _endChild(ref4) {
    if (Array.isArray(ref4.data.Kids)) {
      ref4.data.Kids.forEach((childRef) => {
        this._endChild(childRef);
      });
      ref4.end();
    }
    return this;
  },
  formField(name) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let fieldDict = this._fieldDict(name, null, options);
    let fieldRef = this.ref(fieldDict);
    this._addToParent(fieldRef);
    return fieldRef;
  },
  formAnnotation(name, type47, x3, y3, w, h) {
    let options = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};
    let fieldDict = this._fieldDict(name, type47, options);
    fieldDict.Subtype = "Widget";
    if (fieldDict.F === undefined) {
      fieldDict.F = 4;
    }
    this.annotate(x3, y3, w, h, fieldDict);
    let annotRef = this.page.annotations[this.page.annotations.length - 1];
    return this._addToParent(annotRef);
  },
  formText(name, x3, y3, w, h) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    return this.formAnnotation(name, "text", x3, y3, w, h, options);
  },
  formPushButton(name, x3, y3, w, h) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    return this.formAnnotation(name, "pushButton", x3, y3, w, h, options);
  },
  formCombo(name, x3, y3, w, h) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    return this.formAnnotation(name, "combo", x3, y3, w, h, options);
  },
  formList(name, x3, y3, w, h) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    return this.formAnnotation(name, "list", x3, y3, w, h, options);
  },
  formRadioButton(name, x3, y3, w, h) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    return this.formAnnotation(name, "radioButton", x3, y3, w, h, options);
  },
  formCheckbox(name, x3, y3, w, h) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    return this.formAnnotation(name, "checkbox", x3, y3, w, h, options);
  },
  _addToParent(fieldRef) {
    let parent = fieldRef.data.Parent;
    if (parent) {
      if (!parent.data.Kids) {
        parent.data.Kids = [];
      }
      parent.data.Kids.push(fieldRef);
    } else {
      this._root.data.AcroForm.data.Fields.push(fieldRef);
    }
    return this;
  },
  _fieldDict(name, type47) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    if (!this._acroform) {
      throw new Error("Call document.initForms() method before adding form elements to document");
    }
    let opts = Object.assign({}, options);
    if (type47 !== null) {
      opts = this._resolveType(type47, options);
    }
    opts = this._resolveFlags(opts);
    opts = this._resolveJustify(opts);
    opts = this._resolveFont(opts);
    opts = this._resolveStrings(opts);
    opts = this._resolveColors(opts);
    opts = this._resolveFormat(opts);
    opts.T = new String(name);
    if (opts.parent) {
      opts.Parent = opts.parent;
      delete opts.parent;
    }
    return opts;
  },
  _resolveType(type47, opts) {
    if (type47 === "text") {
      opts.FT = "Tx";
    } else if (type47 === "pushButton") {
      opts.FT = "Btn";
      opts.pushButton = true;
    } else if (type47 === "radioButton") {
      opts.FT = "Btn";
      opts.radioButton = true;
    } else if (type47 === "checkbox") {
      opts.FT = "Btn";
    } else if (type47 === "combo") {
      opts.FT = "Ch";
      opts.combo = true;
    } else if (type47 === "list") {
      opts.FT = "Ch";
    } else {
      throw new Error(`Invalid form annotation type '${type47}'`);
    }
    return opts;
  },
  _resolveFormat(opts) {
    const f3 = opts.format;
    if (f3 && f3.type) {
      let fnKeystroke;
      let fnFormat;
      let params = "";
      if (FORMAT_SPECIAL[f3.type] !== undefined) {
        fnKeystroke = `AFSpecial_Keystroke`;
        fnFormat = `AFSpecial_Format`;
        params = FORMAT_SPECIAL[f3.type];
      } else {
        let format = f3.type.charAt(0).toUpperCase() + f3.type.slice(1);
        fnKeystroke = `AF${format}_Keystroke`;
        fnFormat = `AF${format}_Format`;
        if (f3.type === "date") {
          fnKeystroke += "Ex";
          params = String(f3.param);
        } else if (f3.type === "time") {
          params = String(f3.param);
        } else if (f3.type === "number") {
          let p3 = Object.assign({}, FORMAT_DEFAULT.number, f3);
          params = String([String(p3.nDec), p3.sepComma ? "0" : "1", '"' + p3.negStyle + '"', "null", '"' + p3.currency + '"', String(p3.currencyPrepend)].join(","));
        } else if (f3.type === "percent") {
          let p3 = Object.assign({}, FORMAT_DEFAULT.percent, f3);
          params = String([String(p3.nDec), p3.sepComma ? "0" : "1"].join(","));
        }
      }
      opts.AA = opts.AA ? opts.AA : {};
      opts.AA.K = {
        S: "JavaScript",
        JS: new String(`${fnKeystroke}(${params});`)
      };
      opts.AA.F = {
        S: "JavaScript",
        JS: new String(`${fnFormat}(${params});`)
      };
    }
    delete opts.format;
    return opts;
  },
  _resolveColors(opts) {
    let color = this._normalizeColor(opts.backgroundColor);
    if (color) {
      if (!opts.MK) {
        opts.MK = {};
      }
      opts.MK.BG = color;
    }
    color = this._normalizeColor(opts.borderColor);
    if (color) {
      if (!opts.MK) {
        opts.MK = {};
      }
      opts.MK.BC = color;
    }
    delete opts.backgroundColor;
    delete opts.borderColor;
    return opts;
  },
  _resolveFlags(options) {
    let result = 0;
    Object.keys(options).forEach((key) => {
      if (FIELD_FLAGS[key]) {
        if (options[key]) {
          result |= FIELD_FLAGS[key];
        }
        delete options[key];
      }
    });
    if (result !== 0) {
      options.Ff = options.Ff ? options.Ff : 0;
      options.Ff |= result;
    }
    return options;
  },
  _resolveJustify(options) {
    let result = 0;
    if (options.align !== undefined) {
      if (typeof FIELD_JUSTIFY[options.align] === "number") {
        result = FIELD_JUSTIFY[options.align];
      }
      delete options.align;
    }
    if (result !== 0) {
      options.Q = result;
    }
    return options;
  },
  _resolveFont(options) {
    if (this._acroform.fonts[this._font.id] === null) {
      this._acroform.fonts[this._font.id] = this._font.ref();
    }
    if (this._acroform.defaultFont !== this._font.name) {
      options.DR = {
        Font: {}
      };
      const fontSize = options.fontSize || 0;
      options.DR.Font[this._font.id] = this._font.ref();
      options.DA = new String(`/${this._font.id} ${fontSize} Tf 0 g`);
    }
    return options;
  },
  _resolveStrings(options) {
    let select = [];
    function appendChoices(a) {
      if (Array.isArray(a)) {
        for (let idx = 0;idx < a.length; idx++) {
          if (typeof a[idx] === "string") {
            select.push(new String(a[idx]));
          } else {
            select.push(a[idx]);
          }
        }
      }
    }
    appendChoices(options.Opt);
    if (options.select) {
      appendChoices(options.select);
      delete options.select;
    }
    if (select.length) {
      options.Opt = select;
    }
    Object.keys(VALUE_MAP).forEach((key) => {
      if (options[key] !== undefined) {
        options[VALUE_MAP[key]] = options[key];
        delete options[key];
      }
    });
    ["V", "DV"].forEach((key) => {
      if (typeof options[key] === "string") {
        options[key] = new String(options[key]);
      }
    });
    if (options.MK && options.MK.CA) {
      options.MK.CA = new String(options.MK.CA);
    }
    if (options.label) {
      options.MK = options.MK ? options.MK : {};
      options.MK.CA = new String(options.label);
      delete options.label;
    }
    return options;
  }
};
var AttachmentsMixin = {
  file(src) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    options.name = options.name || src;
    const refBody = {
      Type: "EmbeddedFile",
      Params: {}
    };
    let data;
    if (!src) {
      throw new Error("No src specified");
    }
    if (Buffer.isBuffer(src)) {
      data = src;
    } else if (src instanceof ArrayBuffer) {
      data = Buffer.from(new Uint8Array(src));
    } else {
      let match;
      if (match = /^data:(.*?);base64,(.*)$/.exec(src)) {
        if (match[1]) {
          refBody.Subtype = match[1].replace("/", "#2F");
        }
        data = Buffer.from(match[2], "base64");
      } else {
        data = fs.readFileSync(src);
        if (!data) {
          throw new Error(`Could not read contents of file at filepath ${src}`);
        }
        const {
          birthtime,
          ctime
        } = fs.statSync(src);
        refBody.Params.CreationDate = birthtime;
        refBody.Params.ModDate = ctime;
      }
    }
    if (options.creationDate instanceof Date) {
      refBody.Params.CreationDate = options.creationDate;
    }
    if (options.modifiedDate instanceof Date) {
      refBody.Params.ModDate = options.modifiedDate;
    }
    if (options.type) {
      refBody.Subtype = options.type.replace("/", "#2F");
    }
    const checksum = import_crypto_js.default.MD5(import_crypto_js.default.lib.WordArray.create(new Uint8Array(data)));
    refBody.Params.CheckSum = new String(checksum);
    refBody.Params.Size = data.byteLength;
    let ref4;
    if (!this._fileRegistry)
      this._fileRegistry = {};
    let file = this._fileRegistry[options.name];
    if (file && isEqual(refBody, file)) {
      ref4 = file.ref;
    } else {
      ref4 = this.ref(refBody);
      ref4.end(data);
      this._fileRegistry[options.name] = {
        ...refBody,
        ref: ref4
      };
    }
    const fileSpecBody = {
      Type: "Filespec",
      F: new String(options.name),
      EF: {
        F: ref4
      },
      UF: new String(options.name)
    };
    if (options.description) {
      fileSpecBody.Desc = new String(options.description);
    }
    const filespec = this.ref(fileSpecBody);
    filespec.end();
    if (!options.hidden) {
      this.addNamedEmbeddedFile(options.name, filespec);
    }
    return filespec;
  }
};
var PDFA = {
  initPDFA(pSubset) {
    if (pSubset.charAt(pSubset.length - 3) === "-") {
      this.subset_conformance = pSubset.charAt(pSubset.length - 1).toUpperCase();
      this.subset = parseInt(pSubset.charAt(pSubset.length - 2));
    } else {
      this.subset_conformance = "B";
      this.subset = parseInt(pSubset.charAt(pSubset.length - 1));
    }
  },
  endSubset() {
    this._addPdfaMetadata();
    this._addColorOutputIntent(`${__dirname}/data/sRGB_IEC61966_2_1.icc`);
  },
  _addColorOutputIntent(pICCPath) {
    const iccProfile = fs.readFileSync(pICCPath);
    const colorProfileRef = this.ref({
      Length: iccProfile.length,
      N: 3
    });
    colorProfileRef.write(iccProfile);
    colorProfileRef.end();
    const intentRef = this.ref({
      Type: "OutputIntent",
      S: "GTS_PDFA1",
      Info: new String("sRGB IEC61966-2.1"),
      OutputConditionIdentifier: new String("sRGB IEC61966-2.1"),
      DestOutputProfile: colorProfileRef
    });
    intentRef.end();
    this._root.data.OutputIntents = [intentRef];
  },
  _getPdfaid() {
    return `
        <rdf:Description xmlns:pdfaid="http://www.aiim.org/pdfa/ns/id/" rdf:about="">
            <pdfaid:part>${this.subset}</pdfaid:part>
            <pdfaid:conformance>${this.subset_conformance}</pdfaid:conformance>
        </rdf:Description>
        `;
  },
  _addPdfaMetadata() {
    this.appendXML(this._getPdfaid());
  }
};
var PDFUA = {
  initPDFUA() {
    this.subset = 1;
  },
  endSubset() {
    this._addPdfuaMetadata();
  },
  _addPdfuaMetadata() {
    this.appendXML(this._getPdfuaid());
  },
  _getPdfuaid() {
    return `
        <rdf:Description xmlns:pdfuaid="http://www.aiim.org/pdfua/ns/id/" rdf:about="">
            <pdfuaid:part>${this.subset}</pdfuaid:part>
        </rdf:Description>
        `;
  }
};
var SubsetMixin = {
  _importSubset(subset) {
    Object.assign(this, subset);
  },
  initSubset(options) {
    switch (options.subset) {
      case "PDF/A-1":
      case "PDF/A-1a":
      case "PDF/A-1b":
      case "PDF/A-2":
      case "PDF/A-2a":
      case "PDF/A-2b":
      case "PDF/A-3":
      case "PDF/A-3a":
      case "PDF/A-3b":
        this._importSubset(PDFA);
        this.initPDFA(options.subset);
        break;
      case "PDF/UA":
        this._importSubset(PDFUA);
        this.initPDFUA();
        break;
    }
  }
};

class PDFMetadata {
  constructor() {
    this._metadata = `
        <?xpacket begin="\uFEFF" id="W5M0MpCehiHzreSzNTczkc9d"?>
            <x:xmpmeta xmlns:x="adobe:ns:meta/">
                <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
        `;
  }
  _closeTags() {
    this._metadata = this._metadata.concat(`
                </rdf:RDF>
            </x:xmpmeta>
        <?xpacket end="w"?>
        `);
  }
  append(xml) {
    let newline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    this._metadata = this._metadata.concat(xml);
    if (newline)
      this._metadata = this._metadata.concat("\n");
  }
  getXML() {
    return this._metadata;
  }
  getLength() {
    return this._metadata.length;
  }
  end() {
    this._closeTags();
    this._metadata = this._metadata.trim();
  }
}
var MetadataMixin = {
  initMetadata() {
    this.metadata = new PDFMetadata;
  },
  appendXML(xml) {
    let newline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    this.metadata.append(xml, newline);
  },
  _addInfo() {
    this.appendXML(`
        <rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
            <xmp:CreateDate>${this.info.CreationDate.toISOString().split(".")[0] + "Z"}</xmp:CreateDate>
            <xmp:CreatorTool>${this.info.Creator}</xmp:CreatorTool>
        </rdf:Description>
        `);
    if (this.info.Title || this.info.Author || this.info.Subject) {
      this.appendXML(`
            <rdf:Description rdf:about="" xmlns:dc="http://purl.org/dc/elements/1.1/">
            `);
      if (this.info.Title) {
        this.appendXML(`
                <dc:title>
                    <rdf:Alt>
                        <rdf:li xml:lang="x-default">${this.info.Title}</rdf:li>
                    </rdf:Alt>
                </dc:title>
                `);
      }
      if (this.info.Author) {
        this.appendXML(`
                <dc:creator>
                    <rdf:Seq>
                        <rdf:li>${this.info.Author}</rdf:li>
                    </rdf:Seq>
                </dc:creator>
                `);
      }
      if (this.info.Subject) {
        this.appendXML(`
                <dc:description>
                    <rdf:Alt>
                        <rdf:li xml:lang="x-default">${this.info.Subject}</rdf:li>
                    </rdf:Alt>
                </dc:description>
                `);
      }
      this.appendXML(`
            </rdf:Description>
            `);
    }
    this.appendXML(`
        <rdf:Description rdf:about="" xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
            <pdf:Producer>${this.info.Creator}</pdf:Producer>`, false);
    if (this.info.Keywords) {
      this.appendXML(`
            <pdf:Keywords>${this.info.Keywords}</pdf:Keywords>`, false);
    }
    this.appendXML(`
        </rdf:Description>
        `);
  },
  endMetadata() {
    this._addInfo();
    this.metadata.end();
    if (this.version != 1.3) {
      this.metadataRef = this.ref({
        length: this.metadata.getLength(),
        Type: "Metadata",
        Subtype: "XML"
      });
      this.metadataRef.compress = false;
      this.metadataRef.write(Buffer.from(this.metadata.getXML(), "utf-8"));
      this.metadataRef.end();
      this._root.data.Metadata = this.metadataRef;
    }
  }
};

class PDFDocument extends stream.Readable {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super(options);
    this.options = options;
    switch (options.pdfVersion) {
      case "1.4":
        this.version = 1.4;
        break;
      case "1.5":
        this.version = 1.5;
        break;
      case "1.6":
        this.version = 1.6;
        break;
      case "1.7":
      case "1.7ext3":
        this.version = 1.7;
        break;
      default:
        this.version = 1.3;
        break;
    }
    this.compress = this.options.compress != null ? this.options.compress : true;
    this._pageBuffer = [];
    this._pageBufferStart = 0;
    this._offsets = [];
    this._waiting = 0;
    this._ended = false;
    this._offset = 0;
    const Pages = this.ref({
      Type: "Pages",
      Count: 0,
      Kids: []
    });
    const Names = this.ref({
      Dests: new PDFNameTree
    });
    this._root = this.ref({
      Type: "Catalog",
      Pages,
      Names
    });
    if (this.options.lang) {
      this._root.data.Lang = new String(this.options.lang);
    }
    this.page = null;
    this.initMetadata();
    this.initColor();
    this.initVector();
    this.initFonts(options.font);
    this.initText();
    this.initImages();
    this.initOutline();
    this.initMarkings(options);
    this.initSubset(options);
    this.info = {
      Producer: "PDFKit",
      Creator: "PDFKit",
      CreationDate: new Date
    };
    if (this.options.info) {
      for (let key in this.options.info) {
        const val = this.options.info[key];
        this.info[key] = val;
      }
    }
    if (this.options.displayTitle) {
      this._root.data.ViewerPreferences = this.ref({
        DisplayDocTitle: true
      });
    }
    this._id = PDFSecurity.generateFileID(this.info);
    this._security = PDFSecurity.create(this, options);
    this._write(`%PDF-${this.version}`);
    this._write("%\xFF\xFF\xFF\xFF");
    if (this.options.autoFirstPage !== false) {
      this.addPage();
    }
  }
  addPage(options) {
    if (options == null) {
      ({
        options
      } = this);
    }
    if (!this.options.bufferPages) {
      this.flushPages();
    }
    this.page = new PDFPage(this, options);
    this._pageBuffer.push(this.page);
    const pages = this._root.data.Pages.data;
    pages.Kids.push(this.page.dictionary);
    pages.Count++;
    this.x = this.page.margins.left;
    this.y = this.page.margins.top;
    this._ctm = [1, 0, 0, 1, 0, 0];
    this.transform(1, 0, 0, -1, 0, this.page.height);
    this.emit("pageAdded");
    return this;
  }
  continueOnNewPage(options) {
    const pageMarkings = this.endPageMarkings(this.page);
    this.addPage(options);
    this.initPageMarkings(pageMarkings);
    return this;
  }
  bufferedPageRange() {
    return {
      start: this._pageBufferStart,
      count: this._pageBuffer.length
    };
  }
  switchToPage(n3) {
    let page;
    if (!(page = this._pageBuffer[n3 - this._pageBufferStart])) {
      throw new Error(`switchToPage(${n3}) out of bounds, current buffer covers pages ${this._pageBufferStart} to ${this._pageBufferStart + this._pageBuffer.length - 1}`);
    }
    return this.page = page;
  }
  flushPages() {
    const pages = this._pageBuffer;
    this._pageBuffer = [];
    this._pageBufferStart += pages.length;
    for (let page of pages) {
      this.endPageMarkings(page);
      page.end();
    }
  }
  addNamedDestination(name) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (args.length === 0) {
      args = ["XYZ", null, null, null];
    }
    if (args[0] === "XYZ" && args[2] !== null) {
      args[2] = this.page.height - args[2];
    }
    args.unshift(this.page.dictionary);
    this._root.data.Names.data.Dests.add(name, args);
  }
  addNamedEmbeddedFile(name, ref4) {
    if (!this._root.data.Names.data.EmbeddedFiles) {
      this._root.data.Names.data.EmbeddedFiles = new PDFNameTree({
        limits: false
      });
    }
    this._root.data.Names.data.EmbeddedFiles.add(name, ref4);
  }
  addNamedJavaScript(name, js) {
    if (!this._root.data.Names.data.JavaScript) {
      this._root.data.Names.data.JavaScript = new PDFNameTree;
    }
    let data = {
      JS: new String(js),
      S: "JavaScript"
    };
    this._root.data.Names.data.JavaScript.add(name, data);
  }
  ref(data) {
    const ref4 = new PDFReference(this, this._offsets.length + 1, data);
    this._offsets.push(null);
    this._waiting++;
    return ref4;
  }
  _read() {
  }
  _write(data) {
    if (!Buffer.isBuffer(data)) {
      data = Buffer.from(data + "\n", "binary");
    }
    this.push(data);
    return this._offset += data.length;
  }
  addContent(data) {
    this.page.write(data);
    return this;
  }
  _refEnd(ref4) {
    this._offsets[ref4.id - 1] = ref4.offset;
    if (--this._waiting === 0 && this._ended) {
      this._finalize();
      return this._ended = false;
    }
  }
  end() {
    this.flushPages();
    this._info = this.ref();
    for (let key in this.info) {
      let val = this.info[key];
      if (typeof val === "string") {
        val = new String(val);
      }
      let entry = this.ref(val);
      entry.end();
      this._info.data[key] = entry;
    }
    this._info.end();
    for (let name in this._fontFamilies) {
      const font = this._fontFamilies[name];
      font.finalize();
    }
    this.endOutline();
    this.endMarkings();
    if (this.subset) {
      this.endSubset();
    }
    this.endMetadata();
    this._root.end();
    this._root.data.Pages.end();
    this._root.data.Names.end();
    this.endAcroForm();
    if (this._root.data.ViewerPreferences) {
      this._root.data.ViewerPreferences.end();
    }
    if (this._security) {
      this._security.end();
    }
    if (this._waiting === 0) {
      return this._finalize();
    } else {
      return this._ended = true;
    }
  }
  _finalize() {
    const xRefOffset = this._offset;
    this._write("xref");
    this._write(`0 ${this._offsets.length + 1}`);
    this._write("0000000000 65535 f ");
    for (let offset of this._offsets) {
      offset = `0000000000${offset}`.slice(-10);
      this._write(offset + " 00000 n ");
    }
    const trailer = {
      Size: this._offsets.length + 1,
      Root: this._root,
      Info: this._info,
      ID: [this._id, this._id]
    };
    if (this._security) {
      trailer.Encrypt = this._security.dictionary;
    }
    this._write("trailer");
    this._write(PDFObject.convert(trailer));
    this._write("startxref");
    this._write(`${xRefOffset}`);
    this._write("%%EOF");
    return this.push(null);
  }
  toString() {
    return "[object PDFDocument]";
  }
}
var mixin = (methods) => {
  Object.assign(PDFDocument.prototype, methods);
};
mixin(MetadataMixin);
mixin(ColorMixin);
mixin(VectorMixin);
mixin(FontsMixin);
mixin(TextMixin);
mixin(ImagesMixin);
mixin(AnnotationsMixin);
mixin(OutlineMixin);
mixin(MarkingsMixin);
mixin(AcroFormMixin);
mixin(AttachmentsMixin);
mixin(SubsetMixin);
PDFDocument.LineWrapper = LineWrapper;
var pdfkit_es_default = PDFDocument;

// src/helper.ts
import {createWriteStream} from "fs";

// node_modules/cheerio/dist/esm/options.js
function flattenOptions(options, baseOptions) {
  if (!options) {
    return baseOptions !== null && baseOptions !== undefined ? baseOptions : defaultOpts;
  }
  const opts = {
    _useHtmlParser2: !!options.xmlMode,
    ...baseOptions,
    ...options
  };
  if (options.xml) {
    opts._useHtmlParser2 = true;
    opts.xmlMode = true;
    if (options.xml !== true) {
      Object.assign(opts, options.xml);
    }
  } else if (options.xmlMode) {
    opts._useHtmlParser2 = true;
  }
  return opts;
}
var defaultOpts = {
  _useHtmlParser2: false
};

// node_modules/cheerio/dist/esm/static.js
var exports_static = {};
__export(exports_static, {
  xml: () => xml,
  text: () => text,
  root: () => root,
  parseHTML: () => parseHTML,
  merge: () => merge,
  html: () => html,
  extract: () => extract6,
  contains: () => contains
});

// node_modules/domutils/lib/esm/index.js
var exports_esm2 = {};
__export(exports_esm2, {
  uniqueSort: () => uniqueSort,
  textContent: () => textContent,
  testElement: () => testElement,
  replaceElement: () => replaceElement,
  removeSubsets: () => removeSubsets,
  removeElement: () => removeElement,
  prevElementSibling: () => prevElementSibling,
  prependChild: () => prependChild,
  prepend: () => prepend,
  nextElementSibling: () => nextElementSibling,
  isText: () => isText,
  isTag: () => isTag2,
  isDocument: () => isDocument,
  isComment: () => isComment,
  isCDATA: () => isCDATA,
  innerText: () => innerText,
  hasChildren: () => hasChildren,
  hasAttrib: () => hasAttrib,
  getText: () => getText,
  getSiblings: () => getSiblings,
  getParent: () => getParent,
  getOuterHTML: () => getOuterHTML,
  getName: () => getName,
  getInnerHTML: () => getInnerHTML,
  getFeed: () => getFeed,
  getElementsByTagType: () => getElementsByTagType,
  getElementsByTagName: () => getElementsByTagName,
  getElements: () => getElements,
  getElementById: () => getElementById,
  getChildren: () => getChildren,
  getAttributeValue: () => getAttributeValue,
  findOneChild: () => findOneChild,
  findOne: () => findOne,
  findAll: () => findAll,
  find: () => find,
  filter: () => filter,
  existsOne: () => existsOne,
  compareDocumentPosition: () => compareDocumentPosition,
  appendChild: () => appendChild,
  append: () => append,
  DocumentPosition: () => DocumentPosition
});

// node_modules/domelementtype/lib/esm/index.js
function isTag(elem) {
  return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;
}
var ElementType;
(function(ElementType2) {
  ElementType2["Root"] = "root";
  ElementType2["Text"] = "text";
  ElementType2["Directive"] = "directive";
  ElementType2["Comment"] = "comment";
  ElementType2["Script"] = "script";
  ElementType2["Style"] = "style";
  ElementType2["Tag"] = "tag";
  ElementType2["CDATA"] = "cdata";
  ElementType2["Doctype"] = "doctype";
})(ElementType || (ElementType = {}));
var Root = ElementType.Root;
var Text = ElementType.Text;
var Directive = ElementType.Directive;
var Comment = ElementType.Comment;
var Script = ElementType.Script;
var Style = ElementType.Style;
var Tag = ElementType.Tag;
var CDATA = ElementType.CDATA;
var Doctype = ElementType.Doctype;

// node_modules/domhandler/lib/esm/node.js
function isTag2(node) {
  return isTag(node);
}
function isCDATA(node) {
  return node.type === ElementType.CDATA;
}
function isText(node) {
  return node.type === ElementType.Text;
}
function isComment(node) {
  return node.type === ElementType.Comment;
}
function isDirective(node) {
  return node.type === ElementType.Directive;
}
function isDocument(node) {
  return node.type === ElementType.Root;
}
function hasChildren(node) {
  return Object.prototype.hasOwnProperty.call(node, "children");
}
function cloneNode(node, recursive4 = false) {
  let result;
  if (isText(node)) {
    result = new Text2(node.data);
  } else if (isComment(node)) {
    result = new Comment2(node.data);
  } else if (isTag2(node)) {
    const children = recursive4 ? cloneChildren(node.children) : [];
    const clone13 = new Element(node.name, { ...node.attribs }, children);
    children.forEach((child) => child.parent = clone13);
    if (node.namespace != null) {
      clone13.namespace = node.namespace;
    }
    if (node["x-attribsNamespace"]) {
      clone13["x-attribsNamespace"] = { ...node["x-attribsNamespace"] };
    }
    if (node["x-attribsPrefix"]) {
      clone13["x-attribsPrefix"] = { ...node["x-attribsPrefix"] };
    }
    result = clone13;
  } else if (isCDATA(node)) {
    const children = recursive4 ? cloneChildren(node.children) : [];
    const clone13 = new CDATA2(children);
    children.forEach((child) => child.parent = clone13);
    result = clone13;
  } else if (isDocument(node)) {
    const children = recursive4 ? cloneChildren(node.children) : [];
    const clone13 = new Document(children);
    children.forEach((child) => child.parent = clone13);
    if (node["x-mode"]) {
      clone13["x-mode"] = node["x-mode"];
    }
    result = clone13;
  } else if (isDirective(node)) {
    const instruction = new ProcessingInstruction(node.name, node.data);
    if (node["x-name"] != null) {
      instruction["x-name"] = node["x-name"];
      instruction["x-publicId"] = node["x-publicId"];
      instruction["x-systemId"] = node["x-systemId"];
    }
    result = instruction;
  } else {
    throw new Error(`Not implemented yet: ${node.type}`);
  }
  result.startIndex = node.startIndex;
  result.endIndex = node.endIndex;
  if (node.sourceCodeLocation != null) {
    result.sourceCodeLocation = node.sourceCodeLocation;
  }
  return result;
}
function cloneChildren(childs) {
  const children = childs.map((child) => cloneNode(child, true));
  for (let i3 = 1;i3 < children.length; i3++) {
    children[i3].prev = children[i3 - 1];
    children[i3 - 1].next = children[i3];
  }
  return children;
}

class Node {
  constructor() {
    this.parent = null;
    this.prev = null;
    this.next = null;
    this.startIndex = null;
    this.endIndex = null;
  }
  get parentNode() {
    return this.parent;
  }
  set parentNode(parent) {
    this.parent = parent;
  }
  get previousSibling() {
    return this.prev;
  }
  set previousSibling(prev) {
    this.prev = prev;
  }
  get nextSibling() {
    return this.next;
  }
  set nextSibling(next) {
    this.next = next;
  }
  cloneNode(recursive4 = false) {
    return cloneNode(this, recursive4);
  }
}

class DataNode extends Node {
  constructor(data) {
    super();
    this.data = data;
  }
  get nodeValue() {
    return this.data;
  }
  set nodeValue(data) {
    this.data = data;
  }
}

class Text2 extends DataNode {
  constructor() {
    super(...arguments);
    this.type = ElementType.Text;
  }
  get nodeType() {
    return 3;
  }
}

class Comment2 extends DataNode {
  constructor() {
    super(...arguments);
    this.type = ElementType.Comment;
  }
  get nodeType() {
    return 8;
  }
}

class ProcessingInstruction extends DataNode {
  constructor(name, data) {
    super(data);
    this.name = name;
    this.type = ElementType.Directive;
  }
  get nodeType() {
    return 1;
  }
}

class NodeWithChildren extends Node {
  constructor(children) {
    super();
    this.children = children;
  }
  get firstChild() {
    var _a;
    return (_a = this.children[0]) !== null && _a !== undefined ? _a : null;
  }
  get lastChild() {
    return this.children.length > 0 ? this.children[this.children.length - 1] : null;
  }
  get childNodes() {
    return this.children;
  }
  set childNodes(children) {
    this.children = children;
  }
}

class CDATA2 extends NodeWithChildren {
  constructor() {
    super(...arguments);
    this.type = ElementType.CDATA;
  }
  get nodeType() {
    return 4;
  }
}

class Document extends NodeWithChildren {
  constructor() {
    super(...arguments);
    this.type = ElementType.Root;
  }
  get nodeType() {
    return 9;
  }
}

class Element extends NodeWithChildren {
  constructor(name, attribs, children = [], type47 = name === "script" ? ElementType.Script : name === "style" ? ElementType.Style : ElementType.Tag) {
    super(children);
    this.name = name;
    this.attribs = attribs;
    this.type = type47;
  }
  get nodeType() {
    return 1;
  }
  get tagName() {
    return this.name;
  }
  set tagName(name) {
    this.name = name;
  }
  get attributes() {
    return Object.keys(this.attribs).map((name) => {
      var _a, _b;
      return {
        name,
        value: this.attribs[name],
        namespace: (_a = this["x-attribsNamespace"]) === null || _a === undefined ? undefined : _a[name],
        prefix: (_b = this["x-attribsPrefix"]) === null || _b === undefined ? undefined : _b[name]
      };
    });
  }
}

// node_modules/domhandler/lib/esm/index.js
var defaultOpts2 = {
  withStartIndices: false,
  withEndIndices: false,
  xmlMode: false
};

class DomHandler {
  constructor(callback, options, elementCB) {
    this.dom = [];
    this.root = new Document(this.dom);
    this.done = false;
    this.tagStack = [this.root];
    this.lastNode = null;
    this.parser = null;
    if (typeof options === "function") {
      elementCB = options;
      options = defaultOpts2;
    }
    if (typeof callback === "object") {
      options = callback;
      callback = undefined;
    }
    this.callback = callback !== null && callback !== undefined ? callback : null;
    this.options = options !== null && options !== undefined ? options : defaultOpts2;
    this.elementCB = elementCB !== null && elementCB !== undefined ? elementCB : null;
  }
  onparserinit(parser) {
    this.parser = parser;
  }
  onreset() {
    this.dom = [];
    this.root = new Document(this.dom);
    this.done = false;
    this.tagStack = [this.root];
    this.lastNode = null;
    this.parser = null;
  }
  onend() {
    if (this.done)
      return;
    this.done = true;
    this.parser = null;
    this.handleCallback(null);
  }
  onerror(error22) {
    this.handleCallback(error22);
  }
  onclosetag() {
    this.lastNode = null;
    const elem = this.tagStack.pop();
    if (this.options.withEndIndices) {
      elem.endIndex = this.parser.endIndex;
    }
    if (this.elementCB)
      this.elementCB(elem);
  }
  onopentag(name, attribs) {
    const type47 = this.options.xmlMode ? ElementType.Tag : undefined;
    const element = new Element(name, attribs, undefined, type47);
    this.addNode(element);
    this.tagStack.push(element);
  }
  ontext(data) {
    const { lastNode } = this;
    if (lastNode && lastNode.type === ElementType.Text) {
      lastNode.data += data;
      if (this.options.withEndIndices) {
        lastNode.endIndex = this.parser.endIndex;
      }
    } else {
      const node3 = new Text2(data);
      this.addNode(node3);
      this.lastNode = node3;
    }
  }
  oncomment(data) {
    if (this.lastNode && this.lastNode.type === ElementType.Comment) {
      this.lastNode.data += data;
      return;
    }
    const node3 = new Comment2(data);
    this.addNode(node3);
    this.lastNode = node3;
  }
  oncommentend() {
    this.lastNode = null;
  }
  oncdatastart() {
    const text = new Text2("");
    const node3 = new CDATA2([text]);
    this.addNode(node3);
    text.parent = node3;
    this.lastNode = text;
  }
  oncdataend() {
    this.lastNode = null;
  }
  onprocessinginstruction(name, data) {
    const node3 = new ProcessingInstruction(name, data);
    this.addNode(node3);
  }
  handleCallback(error22) {
    if (typeof this.callback === "function") {
      this.callback(error22, this.dom);
    } else if (error22) {
      throw error22;
    }
  }
  addNode(node3) {
    const parent = this.tagStack[this.tagStack.length - 1];
    const previousSibling = parent.children[parent.children.length - 1];
    if (this.options.withStartIndices) {
      node3.startIndex = this.parser.startIndex;
    }
    if (this.options.withEndIndices) {
      node3.endIndex = this.parser.endIndex;
    }
    parent.children.push(node3);
    if (previousSibling) {
      node3.prev = previousSibling;
      previousSibling.next = node3;
    }
    node3.parent = parent;
    this.lastNode = null;
  }
}

// node_modules/entities/lib/esm/generated/decode-data-html.js
var decode_data_html_default = new Uint16Array('\u1D41<\xD5\u0131\u028A\u049D\u057B\u05D0\u0675\u06DE\u07A2\u07D6\u080F\u0A4A\u0A91\u0DA1\u0E6D\u0F09\u0F26\u10CA\u1228\u12E1\u1415\u149D\u14C3\u14DF\u1525\0\0\0\0\0\0\u156B\u16CD\u198D\u1C12\u1DDD\u1F7E\u2060\u21B0\u228D\u23C0\u23FB\u2442\u2824\u2912\u2D08\u2E48\u2FCE\u3016\u32BA\u3639\u37AC\u38FE\u3A28\u3A71\u3AE0\u3B2E\u0800EMabcfglmnoprstu\\bfms\x7F\x84\x8B\x90\x95\x98\xA6\xB3\xB9\xC8\xCFlig\u803B\xC6\u40C6P\u803B&\u4026cute\u803B\xC1\u40C1reve;\u4102\u0100iyx}rc\u803B\xC2\u40C2;\u4410r;\uC000\uD835\uDD04rave\u803B\xC0\u40C0pha;\u4391acr;\u4100d;\u6A53\u0100gp\x9D\xA1on;\u4104f;\uC000\uD835\uDD38plyFunction;\u6061ing\u803B\xC5\u40C5\u0100cs\xBE\xC3r;\uC000\uD835\uDC9Cign;\u6254ilde\u803B\xC3\u40C3ml\u803B\xC4\u40C4\u0400aceforsu\xE5\xFB\xFE\u0117\u011C\u0122\u0127\u012A\u0100cr\xEA\xF2kslash;\u6216\u0176\xF6\xF8;\u6AE7ed;\u6306y;\u4411\u0180crt\u0105\u010B\u0114ause;\u6235noullis;\u612Ca;\u4392r;\uC000\uD835\uDD05pf;\uC000\uD835\uDD39eve;\u42D8c\xF2\u0113mpeq;\u624E\u0700HOacdefhilorsu\u014D\u0151\u0156\u0180\u019E\u01A2\u01B5\u01B7\u01BA\u01DC\u0215\u0273\u0278\u027Ecy;\u4427PY\u803B\xA9\u40A9\u0180cpy\u015D\u0162\u017Aute;\u4106\u0100;i\u0167\u0168\u62D2talDifferentialD;\u6145leys;\u612D\u0200aeio\u0189\u018E\u0194\u0198ron;\u410Cdil\u803B\xC7\u40C7rc;\u4108nint;\u6230ot;\u410A\u0100dn\u01A7\u01ADilla;\u40B8terDot;\u40B7\xF2\u017Fi;\u43A7rcle\u0200DMPT\u01C7\u01CB\u01D1\u01D6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01E2\u01F8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020FoubleQuote;\u601Duote;\u6019\u0200lnpu\u021E\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6A74\u0180git\u022F\u0236\u023Aruent;\u6261nt;\u622FourIntegral;\u622E\u0100fr\u024C\u024E;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6A2Fcr;\uC000\uD835\uDC9Ep\u0100;C\u0284\u0285\u62D3ap;\u624D\u0580DJSZacefios\u02A0\u02AC\u02B0\u02B4\u02B8\u02CB\u02D7\u02E1\u02E6\u0333\u048D\u0100;o\u0179\u02A5trahd;\u6911cy;\u4402cy;\u4405cy;\u440F\u0180grs\u02BF\u02C4\u02C7ger;\u6021r;\u61A1hv;\u6AE4\u0100ay\u02D0\u02D5ron;\u410E;\u4414l\u0100;t\u02DD\u02DE\u6207a;\u4394r;\uC000\uD835\uDD07\u0100af\u02EB\u0327\u0100cm\u02F0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031Ccute;\u40B4o\u0174\u030B\u030D;\u42D9bleAcute;\u42DDrave;\u4060ilde;\u42DCond;\u62C4ferentialD;\u6146\u0470\u033D\0\0\0\u0342\u0354\0\u0405f;\uC000\uD835\uDD3B\u0180;DE\u0348\u0349\u034D\u40A8ot;\u60DCqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03CF\u03E2\u03F8ontourIntegra\xEC\u0239o\u0274\u0379\0\0\u037B\xBB\u0349nArrow;\u61D3\u0100eo\u0387\u03A4ft\u0180ART\u0390\u0396\u03A1rrow;\u61D0ightArrow;\u61D4e\xE5\u02CAng\u0100LR\u03AB\u03C4eft\u0100AR\u03B3\u03B9rrow;\u67F8ightArrow;\u67FAightArrow;\u67F9ight\u0100AT\u03D8\u03DErrow;\u61D2ee;\u62A8p\u0241\u03E9\0\0\u03EFrrow;\u61D1ownArrow;\u61D5erticalBar;\u6225n\u0300ABLRTa\u0412\u042A\u0430\u045E\u047F\u037Crrow\u0180;BU\u041D\u041E\u0422\u6193ar;\u6913pArrow;\u61F5reve;\u4311eft\u02D2\u043A\0\u0446\0\u0450ightVector;\u6950eeVector;\u695Eector\u0100;B\u0459\u045A\u61BDar;\u6956ight\u01D4\u0467\0\u0471eeVector;\u695Fector\u0100;B\u047A\u047B\u61C1ar;\u6957ee\u0100;A\u0486\u0487\u62A4rrow;\u61A7\u0100ct\u0492\u0497r;\uC000\uD835\uDC9Frok;\u4110\u0800NTacdfglmopqstux\u04BD\u04C0\u04C4\u04CB\u04DE\u04E2\u04E7\u04EE\u04F5\u0521\u052F\u0536\u0552\u055D\u0560\u0565G;\u414AH\u803B\xD0\u40D0cute\u803B\xC9\u40C9\u0180aiy\u04D2\u04D7\u04DCron;\u411Arc\u803B\xCA\u40CA;\u442Dot;\u4116r;\uC000\uD835\uDD08rave\u803B\xC8\u40C8ement;\u6208\u0100ap\u04FA\u04FEcr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65FBerySmallSquare;\u65AB\u0100gp\u0526\u052Aon;\u4118f;\uC000\uD835\uDD3Csilon;\u4395u\u0100ai\u053C\u0549l\u0100;T\u0542\u0543\u6A75ilde;\u6242librium;\u61CC\u0100ci\u0557\u055Ar;\u6130m;\u6A73a;\u4397ml\u803B\xCB\u40CB\u0100ip\u056A\u056Fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058D\u05B2\u05CCy;\u4424r;\uC000\uD835\uDD09lled\u0253\u0597\0\0\u05A3mallSquare;\u65FCerySmallSquare;\u65AA\u0370\u05BA\0\u05BF\0\0\u05C4f;\uC000\uD835\uDD3DAll;\u6200riertrf;\u6131c\xF2\u05CB\u0600JTabcdfgorst\u05E8\u05EC\u05EF\u05FA\u0600\u0612\u0616\u061B\u061D\u0623\u066C\u0672cy;\u4403\u803B>\u403Emma\u0100;d\u05F7\u05F8\u4393;\u43DCreve;\u411E\u0180eiy\u0607\u060C\u0610dil;\u4122rc;\u411C;\u4413ot;\u4120r;\uC000\uD835\uDD0A;\u62D9pf;\uC000\uD835\uDD3Eeater\u0300EFGLST\u0635\u0644\u064E\u0656\u065B\u0666qual\u0100;L\u063E\u063F\u6265ess;\u62DBullEqual;\u6267reater;\u6AA2ess;\u6277lantEqual;\u6A7Eilde;\u6273cr;\uC000\uD835\uDCA2;\u626B\u0400Aacfiosu\u0685\u068B\u0696\u069B\u069E\u06AA\u06BE\u06CARDcy;\u442A\u0100ct\u0690\u0694ek;\u42C7;\u405Eirc;\u4124r;\u610ClbertSpace;\u610B\u01F0\u06AF\0\u06B2f;\u610DizontalLine;\u6500\u0100ct\u06C3\u06C5\xF2\u06A9rok;\u4126mp\u0144\u06D0\u06D8ownHum\xF0\u012Fqual;\u624F\u0700EJOacdfgmnostu\u06FA\u06FE\u0703\u0707\u070E\u071A\u071E\u0721\u0728\u0744\u0778\u078B\u078F\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803B\xCD\u40CD\u0100iy\u0713\u0718rc\u803B\xCE\u40CE;\u4418ot;\u4130r;\u6111rave\u803B\xCC\u40CC\u0180;ap\u0720\u072F\u073F\u0100cg\u0734\u0737r;\u412AinaryI;\u6148lie\xF3\u03DD\u01F4\u0749\0\u0762\u0100;e\u074D\u074E\u622C\u0100gr\u0753\u0758ral;\u622Bsection;\u62C2isible\u0100CT\u076C\u0772omma;\u6063imes;\u6062\u0180gpt\u077F\u0783\u0788on;\u412Ef;\uC000\uD835\uDD40a;\u4399cr;\u6110ilde;\u4128\u01EB\u079A\0\u079Ecy;\u4406l\u803B\xCF\u40CF\u0280cfosu\u07AC\u07B7\u07BC\u07C2\u07D0\u0100iy\u07B1\u07B5rc;\u4134;\u4419r;\uC000\uD835\uDD0Dpf;\uC000\uD835\uDD41\u01E3\u07C7\0\u07CCr;\uC000\uD835\uDCA5rcy;\u4408kcy;\u4404\u0380HJacfos\u07E4\u07E8\u07EC\u07F1\u07FD\u0802\u0808cy;\u4425cy;\u440Cppa;\u439A\u0100ey\u07F6\u07FBdil;\u4136;\u441Ar;\uC000\uD835\uDD0Epf;\uC000\uD835\uDD42cr;\uC000\uD835\uDCA6\u0580JTaceflmost\u0825\u0829\u082C\u0850\u0863\u09B3\u09B8\u09C7\u09CD\u0A37\u0A47cy;\u4409\u803B<\u403C\u0280cmnpr\u0837\u083C\u0841\u0844\u084Dute;\u4139bda;\u439Bg;\u67EAlacetrf;\u6112r;\u619E\u0180aey\u0857\u085C\u0861ron;\u413Ddil;\u413B;\u441B\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087E\u08A9\u08B1\u08E0\u08E6\u08FC\u092F\u095B\u0390\u096A\u0100nr\u0883\u088FgleBracket;\u67E8row\u0180;BR\u0899\u089A\u089E\u6190ar;\u61E4ightArrow;\u61C6eiling;\u6308o\u01F5\u08B7\0\u08C3bleBracket;\u67E6n\u01D4\u08C8\0\u08D2eeVector;\u6961ector\u0100;B\u08DB\u08DC\u61C3ar;\u6959loor;\u630Aight\u0100AV\u08EF\u08F5rrow;\u6194ector;\u694E\u0100er\u0901\u0917e\u0180;AV\u0909\u090A\u0910\u62A3rrow;\u61A4ector;\u695Aiangle\u0180;BE\u0924\u0925\u0929\u62B2ar;\u69CFqual;\u62B4p\u0180DTV\u0937\u0942\u094CownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61BFar;\u6958ector\u0100;B\u0965\u0966\u61BCar;\u6952ight\xE1\u039Cs\u0300EFGLST\u097E\u098B\u0995\u099D\u09A2\u09ADqualGreater;\u62DAullEqual;\u6266reater;\u6276ess;\u6AA1lantEqual;\u6A7Dilde;\u6272r;\uC000\uD835\uDD0F\u0100;e\u09BD\u09BE\u62D8ftarrow;\u61DAidot;\u413F\u0180npw\u09D4\u0A16\u0A1Bg\u0200LRlr\u09DE\u09F7\u0A02\u0A10eft\u0100AR\u09E6\u09ECrrow;\u67F5ightArrow;\u67F7ightArrow;\u67F6eft\u0100ar\u03B3\u0A0Aight\xE1\u03BFight\xE1\u03CAf;\uC000\uD835\uDD43er\u0100LR\u0A22\u0A2CeftArrow;\u6199ightArrow;\u6198\u0180cht\u0A3E\u0A40\u0A42\xF2\u084C;\u61B0rok;\u4141;\u626A\u0400acefiosu\u0A5A\u0A5D\u0A60\u0A77\u0A7C\u0A85\u0A8B\u0A8Ep;\u6905y;\u441C\u0100dl\u0A65\u0A6FiumSpace;\u605Flintrf;\u6133r;\uC000\uD835\uDD10nusPlus;\u6213pf;\uC000\uD835\uDD44c\xF2\u0A76;\u439C\u0480Jacefostu\u0AA3\u0AA7\u0AAD\u0AC0\u0B14\u0B19\u0D91\u0D97\u0D9Ecy;\u440Acute;\u4143\u0180aey\u0AB4\u0AB9\u0ABEron;\u4147dil;\u4145;\u441D\u0180gsw\u0AC7\u0AF0\u0B0Eative\u0180MTV\u0AD3\u0ADF\u0AE8ediumSpace;\u600Bhi\u0100cn\u0AE6\u0AD8\xEB\u0AD9eryThi\xEE\u0AD9ted\u0100GL\u0AF8\u0B06reaterGreate\xF2\u0673essLes\xF3\u0A48Line;\u400Ar;\uC000\uD835\uDD11\u0200Bnpt\u0B22\u0B28\u0B37\u0B3Areak;\u6060BreakingSpace;\u40A0f;\u6115\u0680;CDEGHLNPRSTV\u0B55\u0B56\u0B6A\u0B7C\u0BA1\u0BEB\u0C04\u0C5E\u0C84\u0CA6\u0CD8\u0D61\u0D85\u6AEC\u0100ou\u0B5B\u0B64ngruent;\u6262pCap;\u626DoubleVerticalBar;\u6226\u0180lqx\u0B83\u0B8A\u0B9Bement;\u6209ual\u0100;T\u0B92\u0B93\u6260ilde;\uC000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0BB6\u0BB7\u0BBD\u0BC9\u0BD3\u0BD8\u0BE5\u626Fqual;\u6271ullEqual;\uC000\u2267\u0338reater;\uC000\u226B\u0338ess;\u6279lantEqual;\uC000\u2A7E\u0338ilde;\u6275ump\u0144\u0BF2\u0BFDownHump;\uC000\u224E\u0338qual;\uC000\u224F\u0338e\u0100fs\u0C0A\u0C27tTriangle\u0180;BE\u0C1A\u0C1B\u0C21\u62EAar;\uC000\u29CF\u0338qual;\u62ECs\u0300;EGLST\u0C35\u0C36\u0C3C\u0C44\u0C4B\u0C58\u626Equal;\u6270reater;\u6278ess;\uC000\u226A\u0338lantEqual;\uC000\u2A7D\u0338ilde;\u6274ested\u0100GL\u0C68\u0C79reaterGreater;\uC000\u2AA2\u0338essLess;\uC000\u2AA1\u0338recedes\u0180;ES\u0C92\u0C93\u0C9B\u6280qual;\uC000\u2AAF\u0338lantEqual;\u62E0\u0100ei\u0CAB\u0CB9verseElement;\u620CghtTriangle\u0180;BE\u0CCB\u0CCC\u0CD2\u62EBar;\uC000\u29D0\u0338qual;\u62ED\u0100qu\u0CDD\u0D0CuareSu\u0100bp\u0CE8\u0CF9set\u0100;E\u0CF0\u0CF3\uC000\u228F\u0338qual;\u62E2erset\u0100;E\u0D03\u0D06\uC000\u2290\u0338qual;\u62E3\u0180bcp\u0D13\u0D24\u0D4Eset\u0100;E\u0D1B\u0D1E\uC000\u2282\u20D2qual;\u6288ceeds\u0200;EST\u0D32\u0D33\u0D3B\u0D46\u6281qual;\uC000\u2AB0\u0338lantEqual;\u62E1ilde;\uC000\u227F\u0338erset\u0100;E\u0D58\u0D5B\uC000\u2283\u20D2qual;\u6289ilde\u0200;EFT\u0D6E\u0D6F\u0D75\u0D7F\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uC000\uD835\uDCA9ilde\u803B\xD1\u40D1;\u439D\u0700Eacdfgmoprstuv\u0DBD\u0DC2\u0DC9\u0DD5\u0DDB\u0DE0\u0DE7\u0DFC\u0E02\u0E20\u0E22\u0E32\u0E3F\u0E44lig;\u4152cute\u803B\xD3\u40D3\u0100iy\u0DCE\u0DD3rc\u803B\xD4\u40D4;\u441Eblac;\u4150r;\uC000\uD835\uDD12rave\u803B\xD2\u40D2\u0180aei\u0DEE\u0DF2\u0DF6cr;\u414Cga;\u43A9cron;\u439Fpf;\uC000\uD835\uDD46enCurly\u0100DQ\u0E0E\u0E1AoubleQuote;\u601Cuote;\u6018;\u6A54\u0100cl\u0E27\u0E2Cr;\uC000\uD835\uDCAAash\u803B\xD8\u40D8i\u016C\u0E37\u0E3Cde\u803B\xD5\u40D5es;\u6A37ml\u803B\xD6\u40D6er\u0100BP\u0E4B\u0E60\u0100ar\u0E50\u0E53r;\u603Eac\u0100ek\u0E5A\u0E5C;\u63DEet;\u63B4arenthesis;\u63DC\u0480acfhilors\u0E7F\u0E87\u0E8A\u0E8F\u0E92\u0E94\u0E9D\u0EB0\u0EFCrtialD;\u6202y;\u441Fr;\uC000\uD835\uDD13i;\u43A6;\u43A0usMinus;\u40B1\u0100ip\u0EA2\u0EADncareplan\xE5\u069Df;\u6119\u0200;eio\u0EB9\u0EBA\u0EE0\u0EE4\u6ABBcedes\u0200;EST\u0EC8\u0EC9\u0ECF\u0EDA\u627Aqual;\u6AAFlantEqual;\u627Cilde;\u627Eme;\u6033\u0100dp\u0EE9\u0EEEuct;\u620Fortion\u0100;a\u0225\u0EF9l;\u621D\u0100ci\u0F01\u0F06r;\uC000\uD835\uDCAB;\u43A8\u0200Ufos\u0F11\u0F16\u0F1B\u0F1FOT\u803B"\u4022r;\uC000\uD835\uDD14pf;\u611Acr;\uC000\uD835\uDCAC\u0600BEacefhiorsu\u0F3E\u0F43\u0F47\u0F60\u0F73\u0FA7\u0FAA\u0FAD\u1096\u10A9\u10B4\u10BEarr;\u6910G\u803B\xAE\u40AE\u0180cnr\u0F4E\u0F53\u0F56ute;\u4154g;\u67EBr\u0100;t\u0F5C\u0F5D\u61A0l;\u6916\u0180aey\u0F67\u0F6C\u0F71ron;\u4158dil;\u4156;\u4420\u0100;v\u0F78\u0F79\u611Cerse\u0100EU\u0F82\u0F99\u0100lq\u0F87\u0F8Eement;\u620Builibrium;\u61CBpEquilibrium;\u696Fr\xBB\u0F79o;\u43A1ght\u0400ACDFTUVa\u0FC1\u0FEB\u0FF3\u1022\u1028\u105B\u1087\u03D8\u0100nr\u0FC6\u0FD2gleBracket;\u67E9row\u0180;BL\u0FDC\u0FDD\u0FE1\u6192ar;\u61E5eftArrow;\u61C4eiling;\u6309o\u01F5\u0FF9\0\u1005bleBracket;\u67E7n\u01D4\u100A\0\u1014eeVector;\u695Dector\u0100;B\u101D\u101E\u61C2ar;\u6955loor;\u630B\u0100er\u102D\u1043e\u0180;AV\u1035\u1036\u103C\u62A2rrow;\u61A6ector;\u695Biangle\u0180;BE\u1050\u1051\u1055\u62B3ar;\u69D0qual;\u62B5p\u0180DTV\u1063\u106E\u1078ownVector;\u694FeeVector;\u695Cector\u0100;B\u1082\u1083\u61BEar;\u6954ector\u0100;B\u1091\u1092\u61C0ar;\u6953\u0100pu\u109B\u109Ef;\u611DndImplies;\u6970ightarrow;\u61DB\u0100ch\u10B9\u10BCr;\u611B;\u61B1leDelayed;\u69F4\u0680HOacfhimoqstu\u10E4\u10F1\u10F7\u10FD\u1119\u111E\u1151\u1156\u1161\u1167\u11B5\u11BB\u11BF\u0100Cc\u10E9\u10EEHcy;\u4429y;\u4428FTcy;\u442Ccute;\u415A\u0280;aeiy\u1108\u1109\u110E\u1113\u1117\u6ABCron;\u4160dil;\u415Erc;\u415C;\u4421r;\uC000\uD835\uDD16ort\u0200DLRU\u112A\u1134\u113E\u1149ownArrow\xBB\u041EeftArrow\xBB\u089AightArrow\xBB\u0FDDpArrow;\u6191gma;\u43A3allCircle;\u6218pf;\uC000\uD835\uDD4A\u0272\u116D\0\0\u1170t;\u621Aare\u0200;ISU\u117B\u117C\u1189\u11AF\u65A1ntersection;\u6293u\u0100bp\u118F\u119Eset\u0100;E\u1197\u1198\u628Fqual;\u6291erset\u0100;E\u11A8\u11A9\u6290qual;\u6292nion;\u6294cr;\uC000\uD835\uDCAEar;\u62C6\u0200bcmp\u11C8\u11DB\u1209\u120B\u0100;s\u11CD\u11CE\u62D0et\u0100;E\u11CD\u11D5qual;\u6286\u0100ch\u11E0\u1205eeds\u0200;EST\u11ED\u11EE\u11F4\u11FF\u627Bqual;\u6AB0lantEqual;\u627Dilde;\u627FTh\xE1\u0F8C;\u6211\u0180;es\u1212\u1213\u1223\u62D1rset\u0100;E\u121C\u121D\u6283qual;\u6287et\xBB\u1213\u0580HRSacfhiors\u123E\u1244\u1249\u1255\u125E\u1271\u1276\u129F\u12C2\u12C8\u12D1ORN\u803B\xDE\u40DEADE;\u6122\u0100Hc\u124E\u1252cy;\u440By;\u4426\u0100bu\u125A\u125C;\u4009;\u43A4\u0180aey\u1265\u126A\u126Fron;\u4164dil;\u4162;\u4422r;\uC000\uD835\uDD17\u0100ei\u127B\u1289\u01F2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128E\u1298kSpace;\uC000\u205F\u200ASpace;\u6009lde\u0200;EFT\u12AB\u12AC\u12B2\u12BC\u623Cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uC000\uD835\uDD4BipleDot;\u60DB\u0100ct\u12D6\u12DBr;\uC000\uD835\uDCAFrok;\u4166\u0AE1\u12F7\u130E\u131A\u1326\0\u132C\u1331\0\0\0\0\0\u1338\u133D\u1377\u1385\0\u13FF\u1404\u140A\u1410\u0100cr\u12FB\u1301ute\u803B\xDA\u40DAr\u0100;o\u1307\u1308\u619Fcir;\u6949r\u01E3\u1313\0\u1316y;\u440Eve;\u416C\u0100iy\u131E\u1323rc\u803B\xDB\u40DB;\u4423blac;\u4170r;\uC000\uD835\uDD18rave\u803B\xD9\u40D9acr;\u416A\u0100di\u1341\u1369er\u0100BP\u1348\u135D\u0100ar\u134D\u1350r;\u405Fac\u0100ek\u1357\u1359;\u63DFet;\u63B5arenthesis;\u63DDon\u0100;P\u1370\u1371\u62C3lus;\u628E\u0100gp\u137B\u137Fon;\u4172f;\uC000\uD835\uDD4C\u0400ADETadps\u1395\u13AE\u13B8\u13C4\u03E8\u13D2\u13D7\u13F3rrow\u0180;BD\u1150\u13A0\u13A4ar;\u6912ownArrow;\u61C5ownArrow;\u6195quilibrium;\u696Eee\u0100;A\u13CB\u13CC\u62A5rrow;\u61A5own\xE1\u03F3er\u0100LR\u13DE\u13E8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13F9\u13FA\u43D2on;\u43A5ing;\u416Ecr;\uC000\uD835\uDCB0ilde;\u4168ml\u803B\xDC\u40DC\u0480Dbcdefosv\u1427\u142C\u1430\u1433\u143E\u1485\u148A\u1490\u1496ash;\u62ABar;\u6AEBy;\u4412ash\u0100;l\u143B\u143C\u62A9;\u6AE6\u0100er\u1443\u1445;\u62C1\u0180bty\u144C\u1450\u147Aar;\u6016\u0100;i\u144F\u1455cal\u0200BLST\u1461\u1465\u146A\u1474ar;\u6223ine;\u407Ceparator;\u6758ilde;\u6240ThinSpace;\u600Ar;\uC000\uD835\uDD19pf;\uC000\uD835\uDD4Dcr;\uC000\uD835\uDCB1dash;\u62AA\u0280cefos\u14A7\u14AC\u14B1\u14B6\u14BCirc;\u4174dge;\u62C0r;\uC000\uD835\uDD1Apf;\uC000\uD835\uDD4Ecr;\uC000\uD835\uDCB2\u0200fios\u14CB\u14D0\u14D2\u14D8r;\uC000\uD835\uDD1B;\u439Epf;\uC000\uD835\uDD4Fcr;\uC000\uD835\uDCB3\u0480AIUacfosu\u14F1\u14F5\u14F9\u14FD\u1504\u150F\u1514\u151A\u1520cy;\u442Fcy;\u4407cy;\u442Ecute\u803B\xDD\u40DD\u0100iy\u1509\u150Drc;\u4176;\u442Br;\uC000\uD835\uDD1Cpf;\uC000\uD835\uDD50cr;\uC000\uD835\uDCB4ml;\u4178\u0400Hacdefos\u1535\u1539\u153F\u154B\u154F\u155D\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417D;\u4417ot;\u417B\u01F2\u1554\0\u155BoWidt\xE8\u0AD9a;\u4396r;\u6128pf;\u6124cr;\uC000\uD835\uDCB5\u0BE1\u1583\u158A\u1590\0\u15B0\u15B6\u15BF\0\0\0\0\u15C6\u15DB\u15EB\u165F\u166D\0\u1695\u169B\u16B2\u16B9\0\u16BEcute\u803B\xE1\u40E1reve;\u4103\u0300;Ediuy\u159C\u159D\u15A1\u15A3\u15A8\u15AD\u623E;\uC000\u223E\u0333;\u623Frc\u803B\xE2\u40E2te\u80BB\xB4\u0306;\u4430lig\u803B\xE6\u40E6\u0100;r\xB2\u15BA;\uC000\uD835\uDD1Erave\u803B\xE0\u40E0\u0100ep\u15CA\u15D6\u0100fp\u15CF\u15D4sym;\u6135\xE8\u15D3ha;\u43B1\u0100ap\u15DFc\u0100cl\u15E4\u15E7r;\u4101g;\u6A3F\u0264\u15F0\0\0\u160A\u0280;adsv\u15FA\u15FB\u15FF\u1601\u1607\u6227nd;\u6A55;\u6A5Clope;\u6A58;\u6A5A\u0380;elmrsz\u1618\u1619\u161B\u161E\u163F\u164F\u1659\u6220;\u69A4e\xBB\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163A\u163C\u163E;\u69A8;\u69A9;\u69AA;\u69AB;\u69AC;\u69AD;\u69AE;\u69AFt\u0100;v\u1645\u1646\u621Fb\u0100;d\u164C\u164D\u62BE;\u699D\u0100pt\u1654\u1657h;\u6222\xBB\xB9arr;\u637C\u0100gp\u1663\u1667on;\u4105f;\uC000\uD835\uDD52\u0380;Eaeiop\u12C1\u167B\u167D\u1682\u1684\u1687\u168A;\u6A70cir;\u6A6F;\u624Ad;\u624Bs;\u4027rox\u0100;e\u12C1\u1692\xF1\u1683ing\u803B\xE5\u40E5\u0180cty\u16A1\u16A6\u16A8r;\uC000\uD835\uDCB6;\u402Amp\u0100;e\u12C1\u16AF\xF1\u0288ilde\u803B\xE3\u40E3ml\u803B\xE4\u40E4\u0100ci\u16C2\u16C8onin\xF4\u0272nt;\u6A11\u0800Nabcdefiklnoprsu\u16ED\u16F1\u1730\u173C\u1743\u1748\u1778\u177D\u17E0\u17E6\u1839\u1850\u170D\u193D\u1948\u1970ot;\u6AED\u0100cr\u16F6\u171Ek\u0200ceps\u1700\u1705\u170D\u1713ong;\u624Cpsilon;\u43F6rime;\u6035im\u0100;e\u171A\u171B\u623Dq;\u62CD\u0176\u1722\u1726ee;\u62BDed\u0100;g\u172C\u172D\u6305e\xBB\u172Drk\u0100;t\u135C\u1737brk;\u63B6\u0100oy\u1701\u1741;\u4431quo;\u601E\u0280cmprt\u1753\u175B\u1761\u1764\u1768aus\u0100;e\u010A\u0109ptyv;\u69B0s\xE9\u170Cno\xF5\u0113\u0180ahw\u176F\u1771\u1773;\u43B2;\u6136een;\u626Cr;\uC000\uD835\uDD1Fg\u0380costuvw\u178D\u179D\u17B3\u17C1\u17D5\u17DB\u17DE\u0180aiu\u1794\u1796\u179A\xF0\u0760rc;\u65EFp\xBB\u1371\u0180dpt\u17A4\u17A8\u17ADot;\u6A00lus;\u6A01imes;\u6A02\u0271\u17B9\0\0\u17BEcup;\u6A06ar;\u6605riangle\u0100du\u17CD\u17D2own;\u65BDp;\u65B3plus;\u6A04e\xE5\u1444\xE5\u14ADarow;\u690D\u0180ako\u17ED\u1826\u1835\u0100cn\u17F2\u1823k\u0180lst\u17FA\u05AB\u1802ozenge;\u69EBriangle\u0200;dlr\u1812\u1813\u1818\u181D\u65B4own;\u65BEeft;\u65C2ight;\u65B8k;\u6423\u01B1\u182B\0\u1833\u01B2\u182F\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183E\u184D\u0100;q\u1843\u1846\uC000=\u20E5uiv;\uC000\u2261\u20E5t;\u6310\u0200ptwx\u1859\u185E\u1867\u186Cf;\uC000\uD835\uDD53\u0100;t\u13CB\u1863om\xBB\u13CCtie;\u62C8\u0600DHUVbdhmptuv\u1885\u1896\u18AA\u18BB\u18D7\u18DB\u18EC\u18FF\u1905\u190A\u1910\u1921\u0200LRlr\u188E\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18A1\u18A2\u18A4\u18A6\u18A8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18B3\u18B5\u18B7\u18B9;\u655D;\u655A;\u655C;\u6559\u0380;HLRhlr\u18CA\u18CB\u18CD\u18CF\u18D1\u18D3\u18D5\u6551;\u656C;\u6563;\u6560;\u656B;\u6562;\u655Fox;\u69C9\u0200LRlr\u18E4\u18E6\u18E8\u18EA;\u6555;\u6552;\u6510;\u650C\u0280;DUdu\u06BD\u18F7\u18F9\u18FB\u18FD;\u6565;\u6568;\u652C;\u6534inus;\u629Flus;\u629Eimes;\u62A0\u0200LRlr\u1919\u191B\u191D\u191F;\u655B;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193B\u6502;\u656A;\u6561;\u655E;\u653C;\u6524;\u651C\u0100ev\u0123\u1942bar\u803B\xA6\u40A6\u0200ceio\u1951\u1956\u195A\u1960r;\uC000\uD835\uDCB7mi;\u604Fm\u0100;e\u171A\u171Cl\u0180;bh\u1968\u1969\u196B\u405C;\u69C5sub;\u67C8\u016C\u1974\u197El\u0100;e\u1979\u197A\u6022t\xBB\u197Ap\u0180;Ee\u012F\u1985\u1987;\u6AAE\u0100;q\u06DC\u06DB\u0CE1\u19A7\0\u19E8\u1A11\u1A15\u1A32\0\u1A37\u1A50\0\0\u1AB4\0\0\u1AC1\0\0\u1B21\u1B2E\u1B4D\u1B52\0\u1BFD\0\u1C0C\u0180cpr\u19AD\u19B2\u19DDute;\u4107\u0300;abcds\u19BF\u19C0\u19C4\u19CA\u19D5\u19D9\u6229nd;\u6A44rcup;\u6A49\u0100au\u19CF\u19D2p;\u6A4Bp;\u6A47ot;\u6A40;\uC000\u2229\uFE00\u0100eo\u19E2\u19E5t;\u6041\xEE\u0693\u0200aeiu\u19F0\u19FB\u1A01\u1A05\u01F0\u19F5\0\u19F8s;\u6A4Don;\u410Ddil\u803B\xE7\u40E7rc;\u4109ps\u0100;s\u1A0C\u1A0D\u6A4Cm;\u6A50ot;\u410B\u0180dmn\u1A1B\u1A20\u1A26il\u80BB\xB8\u01ADptyv;\u69B2t\u8100\xA2;e\u1A2D\u1A2E\u40A2r\xE4\u01B2r;\uC000\uD835\uDD20\u0180cei\u1A3D\u1A40\u1A4Dy;\u4447ck\u0100;m\u1A47\u1A48\u6713ark\xBB\u1A48;\u43C7r\u0380;Ecefms\u1A5F\u1A60\u1A62\u1A6B\u1AA4\u1AAA\u1AAE\u65CB;\u69C3\u0180;el\u1A69\u1A6A\u1A6D\u42C6q;\u6257e\u0261\u1A74\0\0\u1A88rrow\u0100lr\u1A7C\u1A81eft;\u61BAight;\u61BB\u0280RSacd\u1A92\u1A94\u1A96\u1A9A\u1A9F\xBB\u0F47;\u64C8st;\u629Birc;\u629Aash;\u629Dnint;\u6A10id;\u6AEFcir;\u69C2ubs\u0100;u\u1ABB\u1ABC\u6663it\xBB\u1ABC\u02EC\u1AC7\u1AD4\u1AFA\0\u1B0Aon\u0100;e\u1ACD\u1ACE\u403A\u0100;q\xC7\xC6\u026D\u1AD9\0\0\u1AE2a\u0100;t\u1ADE\u1ADF\u402C;\u4040\u0180;fl\u1AE8\u1AE9\u1AEB\u6201\xEE\u1160e\u0100mx\u1AF1\u1AF6ent\xBB\u1AE9e\xF3\u024D\u01E7\u1AFE\0\u1B07\u0100;d\u12BB\u1B02ot;\u6A6Dn\xF4\u0246\u0180fry\u1B10\u1B14\u1B17;\uC000\uD835\uDD54o\xE4\u0254\u8100\xA9;s\u0155\u1B1Dr;\u6117\u0100ao\u1B25\u1B29rr;\u61B5ss;\u6717\u0100cu\u1B32\u1B37r;\uC000\uD835\uDCB8\u0100bp\u1B3C\u1B44\u0100;e\u1B41\u1B42\u6ACF;\u6AD1\u0100;e\u1B49\u1B4A\u6AD0;\u6AD2dot;\u62EF\u0380delprvw\u1B60\u1B6C\u1B77\u1B82\u1BAC\u1BD4\u1BF9arr\u0100lr\u1B68\u1B6A;\u6938;\u6935\u0270\u1B72\0\0\u1B75r;\u62DEc;\u62DFarr\u0100;p\u1B7F\u1B80\u61B6;\u693D\u0300;bcdos\u1B8F\u1B90\u1B96\u1BA1\u1BA5\u1BA8\u622Arcap;\u6A48\u0100au\u1B9B\u1B9Ep;\u6A46p;\u6A4Aot;\u628Dr;\u6A45;\uC000\u222A\uFE00\u0200alrv\u1BB5\u1BBF\u1BDE\u1BE3rr\u0100;m\u1BBC\u1BBD\u61B7;\u693Cy\u0180evw\u1BC7\u1BD4\u1BD8q\u0270\u1BCE\0\0\u1BD2re\xE3\u1B73u\xE3\u1B75ee;\u62CEedge;\u62CFen\u803B\xA4\u40A4earrow\u0100lr\u1BEE\u1BF3eft\xBB\u1B80ight\xBB\u1BBDe\xE4\u1BDD\u0100ci\u1C01\u1C07onin\xF4\u01F7nt;\u6231lcty;\u632D\u0980AHabcdefhijlorstuwz\u1C38\u1C3B\u1C3F\u1C5D\u1C69\u1C75\u1C8A\u1C9E\u1CAC\u1CB7\u1CFB\u1CFF\u1D0D\u1D7B\u1D91\u1DAB\u1DBB\u1DC6\u1DCDr\xF2\u0381ar;\u6965\u0200glrs\u1C48\u1C4D\u1C52\u1C54ger;\u6020eth;\u6138\xF2\u1133h\u0100;v\u1C5A\u1C5B\u6010\xBB\u090A\u016B\u1C61\u1C67arow;\u690Fa\xE3\u0315\u0100ay\u1C6E\u1C73ron;\u410F;\u4434\u0180;ao\u0332\u1C7C\u1C84\u0100gr\u02BF\u1C81r;\u61CAtseq;\u6A77\u0180glm\u1C91\u1C94\u1C98\u803B\xB0\u40B0ta;\u43B4ptyv;\u69B1\u0100ir\u1CA3\u1CA8sht;\u697F;\uC000\uD835\uDD21ar\u0100lr\u1CB3\u1CB5\xBB\u08DC\xBB\u101E\u0280aegsv\u1CC2\u0378\u1CD6\u1CDC\u1CE0m\u0180;os\u0326\u1CCA\u1CD4nd\u0100;s\u0326\u1CD1uit;\u6666amma;\u43DDin;\u62F2\u0180;io\u1CE7\u1CE8\u1CF8\u40F7de\u8100\xF7;o\u1CE7\u1CF0ntimes;\u62C7n\xF8\u1CF7cy;\u4452c\u026F\u1D06\0\0\u1D0Arn;\u631Eop;\u630D\u0280lptuw\u1D18\u1D1D\u1D22\u1D49\u1D55lar;\u4024f;\uC000\uD835\uDD55\u0280;emps\u030B\u1D2D\u1D37\u1D3D\u1D42q\u0100;d\u0352\u1D33ot;\u6251inus;\u6238lus;\u6214quare;\u62A1blebarwedg\xE5\xFAn\u0180adh\u112E\u1D5D\u1D67ownarrow\xF3\u1C83arpoon\u0100lr\u1D72\u1D76ef\xF4\u1CB4igh\xF4\u1CB6\u0162\u1D7F\u1D85karo\xF7\u0F42\u026F\u1D8A\0\0\u1D8Ern;\u631Fop;\u630C\u0180cot\u1D98\u1DA3\u1DA6\u0100ry\u1D9D\u1DA1;\uC000\uD835\uDCB9;\u4455l;\u69F6rok;\u4111\u0100dr\u1DB0\u1DB4ot;\u62F1i\u0100;f\u1DBA\u1816\u65BF\u0100ah\u1DC0\u1DC3r\xF2\u0429a\xF2\u0FA6angle;\u69A6\u0100ci\u1DD2\u1DD5y;\u445Fgrarr;\u67FF\u0900Dacdefglmnopqrstux\u1E01\u1E09\u1E19\u1E38\u0578\u1E3C\u1E49\u1E61\u1E7E\u1EA5\u1EAF\u1EBD\u1EE1\u1F2A\u1F37\u1F44\u1F4E\u1F5A\u0100Do\u1E06\u1D34o\xF4\u1C89\u0100cs\u1E0E\u1E14ute\u803B\xE9\u40E9ter;\u6A6E\u0200aioy\u1E22\u1E27\u1E31\u1E36ron;\u411Br\u0100;c\u1E2D\u1E2E\u6256\u803B\xEA\u40EAlon;\u6255;\u444Dot;\u4117\u0100Dr\u1E41\u1E45ot;\u6252;\uC000\uD835\uDD22\u0180;rs\u1E50\u1E51\u1E57\u6A9Aave\u803B\xE8\u40E8\u0100;d\u1E5C\u1E5D\u6A96ot;\u6A98\u0200;ils\u1E6A\u1E6B\u1E72\u1E74\u6A99nters;\u63E7;\u6113\u0100;d\u1E79\u1E7A\u6A95ot;\u6A97\u0180aps\u1E85\u1E89\u1E97cr;\u4113ty\u0180;sv\u1E92\u1E93\u1E95\u6205et\xBB\u1E93p\u01001;\u1E9D\u1EA4\u0133\u1EA1\u1EA3;\u6004;\u6005\u6003\u0100gs\u1EAA\u1EAC;\u414Bp;\u6002\u0100gp\u1EB4\u1EB8on;\u4119f;\uC000\uD835\uDD56\u0180als\u1EC4\u1ECE\u1ED2r\u0100;s\u1ECA\u1ECB\u62D5l;\u69E3us;\u6A71i\u0180;lv\u1EDA\u1EDB\u1EDF\u43B5on\xBB\u1EDB;\u43F5\u0200csuv\u1EEA\u1EF3\u1F0B\u1F23\u0100io\u1EEF\u1E31rc\xBB\u1E2E\u0269\u1EF9\0\0\u1EFB\xED\u0548ant\u0100gl\u1F02\u1F06tr\xBB\u1E5Dess\xBB\u1E7A\u0180aei\u1F12\u1F16\u1F1Als;\u403Dst;\u625Fv\u0100;D\u0235\u1F20D;\u6A78parsl;\u69E5\u0100Da\u1F2F\u1F33ot;\u6253rr;\u6971\u0180cdi\u1F3E\u1F41\u1EF8r;\u612Fo\xF4\u0352\u0100ah\u1F49\u1F4B;\u43B7\u803B\xF0\u40F0\u0100mr\u1F53\u1F57l\u803B\xEB\u40EBo;\u60AC\u0180cip\u1F61\u1F64\u1F67l;\u4021s\xF4\u056E\u0100eo\u1F6C\u1F74ctatio\xEE\u0559nential\xE5\u0579\u09E1\u1F92\0\u1F9E\0\u1FA1\u1FA7\0\0\u1FC6\u1FCC\0\u1FD3\0\u1FE6\u1FEA\u2000\0\u2008\u205Allingdotse\xF1\u1E44y;\u4444male;\u6640\u0180ilr\u1FAD\u1FB3\u1FC1lig;\u8000\uFB03\u0269\u1FB9\0\0\u1FBDg;\u8000\uFB00ig;\u8000\uFB04;\uC000\uD835\uDD23lig;\u8000\uFB01lig;\uC000fj\u0180alt\u1FD9\u1FDC\u1FE1t;\u666Dig;\u8000\uFB02ns;\u65B1of;\u4192\u01F0\u1FEE\0\u1FF3f;\uC000\uD835\uDD57\u0100ak\u05BF\u1FF7\u0100;v\u1FFC\u1FFD\u62D4;\u6AD9artint;\u6A0D\u0100ao\u200C\u2055\u0100cs\u2011\u2052\u03B1\u201A\u2030\u2038\u2045\u2048\0\u2050\u03B2\u2022\u2025\u2027\u202A\u202C\0\u202E\u803B\xBD\u40BD;\u6153\u803B\xBC\u40BC;\u6155;\u6159;\u615B\u01B3\u2034\0\u2036;\u6154;\u6156\u02B4\u203E\u2041\0\0\u2043\u803B\xBE\u40BE;\u6157;\u615C5;\u6158\u01B6\u204C\0\u204E;\u615A;\u615D8;\u615El;\u6044wn;\u6322cr;\uC000\uD835\uDCBB\u0880Eabcdefgijlnorstv\u2082\u2089\u209F\u20A5\u20B0\u20B4\u20F0\u20F5\u20FA\u20FF\u2103\u2112\u2138\u0317\u213E\u2152\u219E\u0100;l\u064D\u2087;\u6A8C\u0180cmp\u2090\u2095\u209Dute;\u41F5ma\u0100;d\u209C\u1CDA\u43B3;\u6A86reve;\u411F\u0100iy\u20AA\u20AErc;\u411D;\u4433ot;\u4121\u0200;lqs\u063E\u0642\u20BD\u20C9\u0180;qs\u063E\u064C\u20C4lan\xF4\u0665\u0200;cdl\u0665\u20D2\u20D5\u20E5c;\u6AA9ot\u0100;o\u20DC\u20DD\u6A80\u0100;l\u20E2\u20E3\u6A82;\u6A84\u0100;e\u20EA\u20ED\uC000\u22DB\uFE00s;\u6A94r;\uC000\uD835\uDD24\u0100;g\u0673\u061Bmel;\u6137cy;\u4453\u0200;Eaj\u065A\u210C\u210E\u2110;\u6A92;\u6AA5;\u6AA4\u0200Eaes\u211B\u211D\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6A8Arox\xBB\u2124\u0100;q\u212E\u212F\u6A88\u0100;q\u212E\u211Bim;\u62E7pf;\uC000\uD835\uDD58\u0100ci\u2143\u2146r;\u610Am\u0180;el\u066B\u214E\u2150;\u6A8E;\u6A90\u8300>;cdlqr\u05EE\u2160\u216A\u216E\u2173\u2179\u0100ci\u2165\u2167;\u6AA7r;\u6A7Aot;\u62D7Par;\u6995uest;\u6A7C\u0280adels\u2184\u216A\u2190\u0656\u219B\u01F0\u2189\0\u218Epro\xF8\u209Er;\u6978q\u0100lq\u063F\u2196les\xF3\u2088i\xED\u066B\u0100en\u21A3\u21ADrtneqq;\uC000\u2269\uFE00\xC5\u21AA\u0500Aabcefkosy\u21C4\u21C7\u21F1\u21F5\u21FA\u2218\u221D\u222F\u2268\u227Dr\xF2\u03A0\u0200ilmr\u21D0\u21D4\u21D7\u21DBrs\xF0\u1484f\xBB\u2024il\xF4\u06A9\u0100dr\u21E0\u21E4cy;\u444A\u0180;cw\u08F4\u21EB\u21EFir;\u6948;\u61ADar;\u610Firc;\u4125\u0180alr\u2201\u220E\u2213rts\u0100;u\u2209\u220A\u6665it\xBB\u220Alip;\u6026con;\u62B9r;\uC000\uD835\uDD25s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223A\u223E\u2243\u225E\u2263rr;\u61FFtht;\u623Bk\u0100lr\u2249\u2253eftarrow;\u61A9ightarrow;\u61AAf;\uC000\uD835\uDD59bar;\u6015\u0180clt\u226F\u2274\u2278r;\uC000\uD835\uDCBDas\xE8\u21F4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xBB\u1C5B\u0AE1\u22A3\0\u22AA\0\u22B8\u22C5\u22CE\0\u22D5\u22F3\0\0\u22F8\u2322\u2367\u2362\u237F\0\u2386\u23AA\u23B4cute\u803B\xED\u40ED\u0180;iy\u0771\u22B0\u22B5rc\u803B\xEE\u40EE;\u4438\u0100cx\u22BC\u22BFy;\u4435cl\u803B\xA1\u40A1\u0100fr\u039F\u22C9;\uC000\uD835\uDD26rave\u803B\xEC\u40EC\u0200;ino\u073E\u22DD\u22E9\u22EE\u0100in\u22E2\u22E6nt;\u6A0Ct;\u622Dfin;\u69DCta;\u6129lig;\u4133\u0180aop\u22FE\u231A\u231D\u0180cgt\u2305\u2308\u2317r;\u412B\u0180elp\u071F\u230F\u2313in\xE5\u078Ear\xF4\u0720h;\u4131f;\u62B7ed;\u41B5\u0280;cfot\u04F4\u232C\u2331\u233D\u2341are;\u6105in\u0100;t\u2338\u2339\u621Eie;\u69DDdo\xF4\u2319\u0280;celp\u0757\u234C\u2350\u235B\u2361al;\u62BA\u0100gr\u2355\u2359er\xF3\u1563\xE3\u234Darhk;\u6A17rod;\u6A3C\u0200cgpt\u236F\u2372\u2376\u237By;\u4451on;\u412Ff;\uC000\uD835\uDD5Aa;\u43B9uest\u803B\xBF\u40BF\u0100ci\u238A\u238Fr;\uC000\uD835\uDCBEn\u0280;Edsv\u04F4\u239B\u239D\u23A1\u04F3;\u62F9ot;\u62F5\u0100;v\u23A6\u23A7\u62F4;\u62F3\u0100;i\u0777\u23AElde;\u4129\u01EB\u23B8\0\u23BCcy;\u4456l\u803B\xEF\u40EF\u0300cfmosu\u23CC\u23D7\u23DC\u23E1\u23E7\u23F5\u0100iy\u23D1\u23D5rc;\u4135;\u4439r;\uC000\uD835\uDD27ath;\u4237pf;\uC000\uD835\uDD5B\u01E3\u23EC\0\u23F1r;\uC000\uD835\uDCBFrcy;\u4458kcy;\u4454\u0400acfghjos\u240B\u2416\u2422\u2427\u242D\u2431\u2435\u243Bppa\u0100;v\u2413\u2414\u43BA;\u43F0\u0100ey\u241B\u2420dil;\u4137;\u443Ar;\uC000\uD835\uDD28reen;\u4138cy;\u4445cy;\u445Cpf;\uC000\uD835\uDD5Ccr;\uC000\uD835\uDCC0\u0B80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248D\u2491\u250E\u253D\u255A\u2580\u264E\u265E\u2665\u2679\u267D\u269A\u26B2\u26D8\u275D\u2768\u278B\u27C0\u2801\u2812\u0180art\u2477\u247A\u247Cr\xF2\u09C6\xF2\u0395ail;\u691Barr;\u690E\u0100;g\u0994\u248B;\u6A8Bar;\u6962\u0963\u24A5\0\u24AA\0\u24B1\0\0\0\0\0\u24B5\u24BA\0\u24C6\u24C8\u24CD\0\u24F9ute;\u413Amptyv;\u69B4ra\xEE\u084Cbda;\u43BBg\u0180;dl\u088E\u24C1\u24C3;\u6991\xE5\u088E;\u6A85uo\u803B\xAB\u40ABr\u0400;bfhlpst\u0899\u24DE\u24E6\u24E9\u24EB\u24EE\u24F1\u24F5\u0100;f\u089D\u24E3s;\u691Fs;\u691D\xEB\u2252p;\u61ABl;\u6939im;\u6973l;\u61A2\u0180;ae\u24FF\u2500\u2504\u6AABil;\u6919\u0100;s\u2509\u250A\u6AAD;\uC000\u2AAD\uFE00\u0180abr\u2515\u2519\u251Drr;\u690Crk;\u6772\u0100ak\u2522\u252Cc\u0100ek\u2528\u252A;\u407B;\u405B\u0100es\u2531\u2533;\u698Bl\u0100du\u2539\u253B;\u698F;\u698D\u0200aeuy\u2546\u254B\u2556\u2558ron;\u413E\u0100di\u2550\u2554il;\u413C\xEC\u08B0\xE2\u2529;\u443B\u0200cqrs\u2563\u2566\u256D\u257Da;\u6936uo\u0100;r\u0E19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694Bh;\u61B2\u0280;fgqs\u258B\u258C\u0989\u25F3\u25FF\u6264t\u0280ahlrt\u2598\u25A4\u25B7\u25C2\u25E8rrow\u0100;t\u0899\u25A1a\xE9\u24F6arpoon\u0100du\u25AF\u25B4own\xBB\u045Ap\xBB\u0966eftarrows;\u61C7ight\u0180ahs\u25CD\u25D6\u25DErrow\u0100;s\u08F4\u08A7arpoon\xF3\u0F98quigarro\xF7\u21F0hreetimes;\u62CB\u0180;qs\u258B\u0993\u25FAlan\xF4\u09AC\u0280;cdgs\u09AC\u260A\u260D\u261D\u2628c;\u6AA8ot\u0100;o\u2614\u2615\u6A7F\u0100;r\u261A\u261B\u6A81;\u6A83\u0100;e\u2622\u2625\uC000\u22DA\uFE00s;\u6A93\u0280adegs\u2633\u2639\u263D\u2649\u264Bppro\xF8\u24C6ot;\u62D6q\u0100gq\u2643\u2645\xF4\u0989gt\xF2\u248C\xF4\u099Bi\xED\u09B2\u0180ilr\u2655\u08E1\u265Asht;\u697C;\uC000\uD835\uDD29\u0100;E\u099C\u2663;\u6A91\u0161\u2669\u2676r\u0100du\u25B2\u266E\u0100;l\u0965\u2673;\u696Alk;\u6584cy;\u4459\u0280;acht\u0A48\u2688\u268B\u2691\u2696r\xF2\u25C1orne\xF2\u1D08ard;\u696Bri;\u65FA\u0100io\u269F\u26A4dot;\u4140ust\u0100;a\u26AC\u26AD\u63B0che\xBB\u26AD\u0200Eaes\u26BB\u26BD\u26C9\u26D4;\u6268p\u0100;p\u26C3\u26C4\u6A89rox\xBB\u26C4\u0100;q\u26CE\u26CF\u6A87\u0100;q\u26CE\u26BBim;\u62E6\u0400abnoptwz\u26E9\u26F4\u26F7\u271A\u272F\u2741\u2747\u2750\u0100nr\u26EE\u26F1g;\u67ECr;\u61FDr\xEB\u08C1g\u0180lmr\u26FF\u270D\u2714eft\u0100ar\u09E6\u2707ight\xE1\u09F2apsto;\u67FCight\xE1\u09FDparrow\u0100lr\u2725\u2729ef\xF4\u24EDight;\u61AC\u0180afl\u2736\u2739\u273Dr;\u6985;\uC000\uD835\uDD5Dus;\u6A2Dimes;\u6A34\u0161\u274B\u274Fst;\u6217\xE1\u134E\u0180;ef\u2757\u2758\u1800\u65CAnge\xBB\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277C\u2785\u2787r\xF2\u08A8orne\xF2\u1D8Car\u0100;d\u0F98\u2783;\u696D;\u600Eri;\u62BF\u0300achiqt\u2798\u279D\u0A40\u27A2\u27AE\u27BBquo;\u6039r;\uC000\uD835\uDCC1m\u0180;eg\u09B2\u27AA\u27AC;\u6A8D;\u6A8F\u0100bu\u252A\u27B3o\u0100;r\u0E1F\u27B9;\u601Arok;\u4142\u8400<;cdhilqr\u082B\u27D2\u2639\u27DC\u27E0\u27E5\u27EA\u27F0\u0100ci\u27D7\u27D9;\u6AA6r;\u6A79re\xE5\u25F2mes;\u62C9arr;\u6976uest;\u6A7B\u0100Pi\u27F5\u27F9ar;\u6996\u0180;ef\u2800\u092D\u181B\u65C3r\u0100du\u2807\u280Dshar;\u694Ahar;\u6966\u0100en\u2817\u2821rtneqq;\uC000\u2268\uFE00\xC5\u281E\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288E\u2893\u28A0\u28A5\u28A8\u28DA\u28E2\u28E4\u0A83\u28F3\u2902Dot;\u623A\u0200clpr\u284E\u2852\u2863\u287Dr\u803B\xAF\u40AF\u0100et\u2857\u2859;\u6642\u0100;e\u285E\u285F\u6720se\xBB\u285F\u0100;s\u103B\u2868to\u0200;dlu\u103B\u2873\u2877\u287Bow\xEE\u048Cef\xF4\u090F\xF0\u13D1ker;\u65AE\u0100oy\u2887\u288Cmma;\u6A29;\u443Cash;\u6014asuredangle\xBB\u1626r;\uC000\uD835\uDD2Ao;\u6127\u0180cdn\u28AF\u28B4\u28C9ro\u803B\xB5\u40B5\u0200;acd\u1464\u28BD\u28C0\u28C4s\xF4\u16A7ir;\u6AF0ot\u80BB\xB7\u01B5us\u0180;bd\u28D2\u1903\u28D3\u6212\u0100;u\u1D3C\u28D8;\u6A2A\u0163\u28DE\u28E1p;\u6ADB\xF2\u2212\xF0\u0A81\u0100dp\u28E9\u28EEels;\u62A7f;\uC000\uD835\uDD5E\u0100ct\u28F8\u28FDr;\uC000\uD835\uDCC2pos\xBB\u159D\u0180;lm\u2909\u290A\u290D\u43BCtimap;\u62B8\u0C00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297E\u2989\u2998\u29DA\u29E9\u2A15\u2A1A\u2A58\u2A5D\u2A83\u2A95\u2AA4\u2AA8\u2B04\u2B07\u2B44\u2B7F\u2BAE\u2C34\u2C67\u2C7C\u2CE9\u0100gt\u2947\u294B;\uC000\u22D9\u0338\u0100;v\u2950\u0BCF\uC000\u226B\u20D2\u0180elt\u295A\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61CDightarrow;\u61CE;\uC000\u22D8\u0338\u0100;v\u297B\u0C47\uC000\u226A\u20D2ightarrow;\u61CF\u0100Dd\u298E\u2993ash;\u62AFash;\u62AE\u0280bcnpt\u29A3\u29A7\u29AC\u29B1\u29CCla\xBB\u02DEute;\u4144g;\uC000\u2220\u20D2\u0280;Eiop\u0D84\u29BC\u29C0\u29C5\u29C8;\uC000\u2A70\u0338d;\uC000\u224B\u0338s;\u4149ro\xF8\u0D84ur\u0100;a\u29D3\u29D4\u666El\u0100;s\u29D3\u0B38\u01F3\u29DF\0\u29E3p\u80BB\xA0\u0B37mp\u0100;e\u0BF9\u0C00\u0280aeouy\u29F4\u29FE\u2A03\u2A10\u2A13\u01F0\u29F9\0\u29FB;\u6A43on;\u4148dil;\u4146ng\u0100;d\u0D7E\u2A0Aot;\uC000\u2A6D\u0338p;\u6A42;\u443Dash;\u6013\u0380;Aadqsx\u0B92\u2A29\u2A2D\u2A3B\u2A41\u2A45\u2A50rr;\u61D7r\u0100hr\u2A33\u2A36k;\u6924\u0100;o\u13F2\u13F0ot;\uC000\u2250\u0338ui\xF6\u0B63\u0100ei\u2A4A\u2A4Ear;\u6928\xED\u0B98ist\u0100;s\u0BA0\u0B9Fr;\uC000\uD835\uDD2B\u0200Eest\u0BC5\u2A66\u2A79\u2A7C\u0180;qs\u0BBC\u2A6D\u0BE1\u0180;qs\u0BBC\u0BC5\u2A74lan\xF4\u0BE2i\xED\u0BEA\u0100;r\u0BB6\u2A81\xBB\u0BB7\u0180Aap\u2A8A\u2A8D\u2A91r\xF2\u2971rr;\u61AEar;\u6AF2\u0180;sv\u0F8D\u2A9C\u0F8C\u0100;d\u2AA1\u2AA2\u62FC;\u62FAcy;\u445A\u0380AEadest\u2AB7\u2ABA\u2ABE\u2AC2\u2AC5\u2AF6\u2AF9r\xF2\u2966;\uC000\u2266\u0338rr;\u619Ar;\u6025\u0200;fqs\u0C3B\u2ACE\u2AE3\u2AEFt\u0100ar\u2AD4\u2AD9rro\xF7\u2AC1ightarro\xF7\u2A90\u0180;qs\u0C3B\u2ABA\u2AEAlan\xF4\u0C55\u0100;s\u0C55\u2AF4\xBB\u0C36i\xED\u0C5D\u0100;r\u0C35\u2AFEi\u0100;e\u0C1A\u0C25i\xE4\u0D90\u0100pt\u2B0C\u2B11f;\uC000\uD835\uDD5F\u8180\xAC;in\u2B19\u2B1A\u2B36\u40ACn\u0200;Edv\u0B89\u2B24\u2B28\u2B2E;\uC000\u22F9\u0338ot;\uC000\u22F5\u0338\u01E1\u0B89\u2B33\u2B35;\u62F7;\u62F6i\u0100;v\u0CB8\u2B3C\u01E1\u0CB8\u2B41\u2B43;\u62FE;\u62FD\u0180aor\u2B4B\u2B63\u2B69r\u0200;ast\u0B7B\u2B55\u2B5A\u2B5Flle\xEC\u0B7Bl;\uC000\u2AFD\u20E5;\uC000\u2202\u0338lint;\u6A14\u0180;ce\u0C92\u2B70\u2B73u\xE5\u0CA5\u0100;c\u0C98\u2B78\u0100;e\u0C92\u2B7D\xF1\u0C98\u0200Aait\u2B88\u2B8B\u2B9D\u2BA7r\xF2\u2988rr\u0180;cw\u2B94\u2B95\u2B99\u619B;\uC000\u2933\u0338;\uC000\u219D\u0338ghtarrow\xBB\u2B95ri\u0100;e\u0CCB\u0CD6\u0380chimpqu\u2BBD\u2BCD\u2BD9\u2B04\u0B78\u2BE4\u2BEF\u0200;cer\u0D32\u2BC6\u0D37\u2BC9u\xE5\u0D45;\uC000\uD835\uDCC3ort\u026D\u2B05\0\0\u2BD6ar\xE1\u2B56m\u0100;e\u0D6E\u2BDF\u0100;q\u0D74\u0D73su\u0100bp\u2BEB\u2BED\xE5\u0CF8\xE5\u0D0B\u0180bcp\u2BF6\u2C11\u2C19\u0200;Ees\u2BFF\u2C00\u0D22\u2C04\u6284;\uC000\u2AC5\u0338et\u0100;e\u0D1B\u2C0Bq\u0100;q\u0D23\u2C00c\u0100;e\u0D32\u2C17\xF1\u0D38\u0200;Ees\u2C22\u2C23\u0D5F\u2C27\u6285;\uC000\u2AC6\u0338et\u0100;e\u0D58\u2C2Eq\u0100;q\u0D60\u2C23\u0200gilr\u2C3D\u2C3F\u2C45\u2C47\xEC\u0BD7lde\u803B\xF1\u40F1\xE7\u0C43iangle\u0100lr\u2C52\u2C5Ceft\u0100;e\u0C1A\u2C5A\xF1\u0C26ight\u0100;e\u0CCB\u2C65\xF1\u0CD7\u0100;m\u2C6C\u2C6D\u43BD\u0180;es\u2C74\u2C75\u2C79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2C8F\u2C94\u2C99\u2C9E\u2CA3\u2CB0\u2CB6\u2CD3\u2CE3ash;\u62ADarr;\u6904p;\uC000\u224D\u20D2ash;\u62AC\u0100et\u2CA8\u2CAC;\uC000\u2265\u20D2;\uC000>\u20D2nfin;\u69DE\u0180Aet\u2CBD\u2CC1\u2CC5rr;\u6902;\uC000\u2264\u20D2\u0100;r\u2CCA\u2CCD\uC000<\u20D2ie;\uC000\u22B4\u20D2\u0100At\u2CD8\u2CDCrr;\u6903rie;\uC000\u22B5\u20D2im;\uC000\u223C\u20D2\u0180Aan\u2CF0\u2CF4\u2D02rr;\u61D6r\u0100hr\u2CFA\u2CFDk;\u6923\u0100;o\u13E7\u13E5ear;\u6927\u1253\u1A95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2D2D\0\u2D38\u2D48\u2D60\u2D65\u2D72\u2D84\u1B07\0\0\u2D8D\u2DAB\0\u2DC8\u2DCE\0\u2DDC\u2E19\u2E2B\u2E3E\u2E43\u0100cs\u2D31\u1A97ute\u803B\xF3\u40F3\u0100iy\u2D3C\u2D45r\u0100;c\u1A9E\u2D42\u803B\xF4\u40F4;\u443E\u0280abios\u1AA0\u2D52\u2D57\u01C8\u2D5Alac;\u4151v;\u6A38old;\u69BClig;\u4153\u0100cr\u2D69\u2D6Dir;\u69BF;\uC000\uD835\uDD2C\u036F\u2D79\0\0\u2D7C\0\u2D82n;\u42DBave\u803B\xF2\u40F2;\u69C1\u0100bm\u2D88\u0DF4ar;\u69B5\u0200acit\u2D95\u2D98\u2DA5\u2DA8r\xF2\u1A80\u0100ir\u2D9D\u2DA0r;\u69BEoss;\u69BBn\xE5\u0E52;\u69C0\u0180aei\u2DB1\u2DB5\u2DB9cr;\u414Dga;\u43C9\u0180cdn\u2DC0\u2DC5\u01CDron;\u43BF;\u69B6pf;\uC000\uD835\uDD60\u0180ael\u2DD4\u2DD7\u01D2r;\u69B7rp;\u69B9\u0380;adiosv\u2DEA\u2DEB\u2DEE\u2E08\u2E0D\u2E10\u2E16\u6228r\xF2\u1A86\u0200;efm\u2DF7\u2DF8\u2E02\u2E05\u6A5Dr\u0100;o\u2DFE\u2DFF\u6134f\xBB\u2DFF\u803B\xAA\u40AA\u803B\xBA\u40BAgof;\u62B6r;\u6A56lope;\u6A57;\u6A5B\u0180clo\u2E1F\u2E21\u2E27\xF2\u2E01ash\u803B\xF8\u40F8l;\u6298i\u016C\u2E2F\u2E34de\u803B\xF5\u40F5es\u0100;a\u01DB\u2E3As;\u6A36ml\u803B\xF6\u40F6bar;\u633D\u0AE1\u2E5E\0\u2E7D\0\u2E80\u2E9D\0\u2EA2\u2EB9\0\0\u2ECB\u0E9C\0\u2F13\0\0\u2F2B\u2FBC\0\u2FC8r\u0200;ast\u0403\u2E67\u2E72\u0E85\u8100\xB6;l\u2E6D\u2E6E\u40B6le\xEC\u0403\u0269\u2E78\0\0\u2E7Bm;\u6AF3;\u6AFDy;\u443Fr\u0280cimpt\u2E8B\u2E8F\u2E93\u1865\u2E97nt;\u4025od;\u402Eil;\u6030enk;\u6031r;\uC000\uD835\uDD2D\u0180imo\u2EA8\u2EB0\u2EB4\u0100;v\u2EAD\u2EAE\u43C6;\u43D5ma\xF4\u0A76ne;\u660E\u0180;tv\u2EBF\u2EC0\u2EC8\u43C0chfork\xBB\u1FFD;\u43D6\u0100au\u2ECF\u2EDFn\u0100ck\u2ED5\u2EDDk\u0100;h\u21F4\u2EDB;\u610E\xF6\u21F4s\u0480;abcdemst\u2EF3\u2EF4\u1908\u2EF9\u2EFD\u2F04\u2F06\u2F0A\u2F0E\u402Bcir;\u6A23ir;\u6A22\u0100ou\u1D40\u2F02;\u6A25;\u6A72n\u80BB\xB1\u0E9Dim;\u6A26wo;\u6A27\u0180ipu\u2F19\u2F20\u2F25ntint;\u6A15f;\uC000\uD835\uDD61nd\u803B\xA3\u40A3\u0500;Eaceinosu\u0EC8\u2F3F\u2F41\u2F44\u2F47\u2F81\u2F89\u2F92\u2F7E\u2FB6;\u6AB3p;\u6AB7u\xE5\u0ED9\u0100;c\u0ECE\u2F4C\u0300;acens\u0EC8\u2F59\u2F5F\u2F66\u2F68\u2F7Eppro\xF8\u2F43urlye\xF1\u0ED9\xF1\u0ECE\u0180aes\u2F6F\u2F76\u2F7Approx;\u6AB9qq;\u6AB5im;\u62E8i\xED\u0EDFme\u0100;s\u2F88\u0EAE\u6032\u0180Eas\u2F78\u2F90\u2F7A\xF0\u2F75\u0180dfp\u0EEC\u2F99\u2FAF\u0180als\u2FA0\u2FA5\u2FAAlar;\u632Eine;\u6312urf;\u6313\u0100;t\u0EFB\u2FB4\xEF\u0EFBrel;\u62B0\u0100ci\u2FC0\u2FC5r;\uC000\uD835\uDCC5;\u43C8ncsp;\u6008\u0300fiopsu\u2FDA\u22E2\u2FDF\u2FE5\u2FEB\u2FF1r;\uC000\uD835\uDD2Epf;\uC000\uD835\uDD62rime;\u6057cr;\uC000\uD835\uDCC6\u0180aeo\u2FF8\u3009\u3013t\u0100ei\u2FFE\u3005rnion\xF3\u06B0nt;\u6A16st\u0100;e\u3010\u3011\u403F\xF1\u1F19\xF4\u0F14\u0A80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30E0\u310E\u312B\u3147\u3162\u3172\u318E\u3206\u3215\u3224\u3229\u3258\u326E\u3272\u3290\u32B0\u32B7\u0180art\u3047\u304A\u304Cr\xF2\u10B3\xF2\u03DDail;\u691Car\xF2\u1C65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307F\u308F\u3094\u30CC\u0100eu\u306D\u3071;\uC000\u223D\u0331te;\u4155i\xE3\u116Emptyv;\u69B3g\u0200;del\u0FD1\u3089\u308B\u308D;\u6992;\u69A5\xE5\u0FD1uo\u803B\xBB\u40BBr\u0580;abcfhlpstw\u0FDC\u30AC\u30AF\u30B7\u30B9\u30BC\u30BE\u30C0\u30C3\u30C7\u30CAp;\u6975\u0100;f\u0FE0\u30B4s;\u6920;\u6933s;\u691E\xEB\u225D\xF0\u272El;\u6945im;\u6974l;\u61A3;\u619D\u0100ai\u30D1\u30D5il;\u691Ao\u0100;n\u30DB\u30DC\u6236al\xF3\u0F1E\u0180abr\u30E7\u30EA\u30EEr\xF2\u17E5rk;\u6773\u0100ak\u30F3\u30FDc\u0100ek\u30F9\u30FB;\u407D;\u405D\u0100es\u3102\u3104;\u698Cl\u0100du\u310A\u310C;\u698E;\u6990\u0200aeuy\u3117\u311C\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xEC\u0FF2\xE2\u30FA;\u4440\u0200clqs\u3134\u3137\u313D\u3144a;\u6937dhar;\u6969uo\u0100;r\u020E\u020Dh;\u61B3\u0180acg\u314E\u315F\u0F44l\u0200;ips\u0F78\u3158\u315B\u109Cn\xE5\u10BBar\xF4\u0FA9t;\u65AD\u0180ilr\u3169\u1023\u316Esht;\u697D;\uC000\uD835\uDD2F\u0100ao\u3177\u3186r\u0100du\u317D\u317F\xBB\u047B\u0100;l\u1091\u3184;\u696C\u0100;v\u318B\u318C\u43C1;\u43F1\u0180gns\u3195\u31F9\u31FCht\u0300ahlrst\u31A4\u31B0\u31C2\u31D8\u31E4\u31EErrow\u0100;t\u0FDC\u31ADa\xE9\u30C8arpoon\u0100du\u31BB\u31BFow\xEE\u317Ep\xBB\u1092eft\u0100ah\u31CA\u31D0rrow\xF3\u0FEAarpoon\xF3\u0551ightarrows;\u61C9quigarro\xF7\u30CBhreetimes;\u62CCg;\u42DAingdotse\xF1\u1F32\u0180ahm\u320D\u3210\u3213r\xF2\u0FEAa\xF2\u0551;\u600Foust\u0100;a\u321E\u321F\u63B1che\xBB\u321Fmid;\u6AEE\u0200abpt\u3232\u323D\u3240\u3252\u0100nr\u3237\u323Ag;\u67EDr;\u61FEr\xEB\u1003\u0180afl\u3247\u324A\u324Er;\u6986;\uC000\uD835\uDD63us;\u6A2Eimes;\u6A35\u0100ap\u325D\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6A12ar\xF2\u31E3\u0200achq\u327B\u3280\u10BC\u3285quo;\u603Ar;\uC000\uD835\uDCC7\u0100bu\u30FB\u328Ao\u0100;r\u0214\u0213\u0180hir\u3297\u329B\u32A0re\xE5\u31F8mes;\u62CAi\u0200;efl\u32AA\u1059\u1821\u32AB\u65B9tri;\u69CEluhar;\u6968;\u611E\u0D61\u32D5\u32DB\u32DF\u332C\u3338\u3371\0\u337A\u33A4\0\0\u33EC\u33F0\0\u3428\u3448\u345A\u34AD\u34B1\u34CA\u34F1\0\u3616\0\0\u3633cute;\u415Bqu\xEF\u27BA\u0500;Eaceinpsy\u11ED\u32F3\u32F5\u32FF\u3302\u330B\u330F\u331F\u3326\u3329;\u6AB4\u01F0\u32FA\0\u32FC;\u6AB8on;\u4161u\xE5\u11FE\u0100;d\u11F3\u3307il;\u415Frc;\u415D\u0180Eas\u3316\u3318\u331B;\u6AB6p;\u6ABAim;\u62E9olint;\u6A13i\xED\u1204;\u4441ot\u0180;be\u3334\u1D47\u3335\u62C5;\u6A66\u0380Aacmstx\u3346\u334A\u3357\u335B\u335E\u3363\u336Drr;\u61D8r\u0100hr\u3350\u3352\xEB\u2228\u0100;o\u0A36\u0A34t\u803B\xA7\u40A7i;\u403Bwar;\u6929m\u0100in\u3369\xF0nu\xF3\xF1t;\u6736r\u0100;o\u3376\u2055\uC000\uD835\uDD30\u0200acoy\u3382\u3386\u3391\u33A0rp;\u666F\u0100hy\u338B\u338Fcy;\u4449;\u4448rt\u026D\u3399\0\0\u339Ci\xE4\u1464ara\xEC\u2E6F\u803B\xAD\u40AD\u0100gm\u33A8\u33B4ma\u0180;fv\u33B1\u33B2\u33B2\u43C3;\u43C2\u0400;deglnpr\u12AB\u33C5\u33C9\u33CE\u33D6\u33DE\u33E1\u33E6ot;\u6A6A\u0100;q\u12B1\u12B0\u0100;E\u33D3\u33D4\u6A9E;\u6AA0\u0100;E\u33DB\u33DC\u6A9D;\u6A9Fe;\u6246lus;\u6A24arr;\u6972ar\xF2\u113D\u0200aeit\u33F8\u3408\u340F\u3417\u0100ls\u33FD\u3404lsetm\xE9\u336Ahp;\u6A33parsl;\u69E4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341C\u341D\u6AAA\u0100;s\u3422\u3423\u6AAC;\uC000\u2AAC\uFE00\u0180flp\u342E\u3433\u3442tcy;\u444C\u0100;b\u3438\u3439\u402F\u0100;a\u343E\u343F\u69C4r;\u633Ff;\uC000\uD835\uDD64a\u0100dr\u344D\u0402es\u0100;u\u3454\u3455\u6660it\xBB\u3455\u0180csu\u3460\u3479\u349F\u0100au\u3465\u346Fp\u0100;s\u1188\u346B;\uC000\u2293\uFE00p\u0100;s\u11B4\u3475;\uC000\u2294\uFE00u\u0100bp\u347F\u348F\u0180;es\u1197\u119C\u3486et\u0100;e\u1197\u348D\xF1\u119D\u0180;es\u11A8\u11AD\u3496et\u0100;e\u11A8\u349D\xF1\u11AE\u0180;af\u117B\u34A6\u05B0r\u0165\u34AB\u05B1\xBB\u117Car\xF2\u1148\u0200cemt\u34B9\u34BE\u34C2\u34C5r;\uC000\uD835\uDCC8tm\xEE\xF1i\xEC\u3415ar\xE6\u11BE\u0100ar\u34CE\u34D5r\u0100;f\u34D4\u17BF\u6606\u0100an\u34DA\u34EDight\u0100ep\u34E3\u34EApsilo\xEE\u1EE0h\xE9\u2EAFs\xBB\u2852\u0280bcmnp\u34FB\u355E\u1209\u358B\u358E\u0480;Edemnprs\u350E\u350F\u3511\u3515\u351E\u3523\u352C\u3531\u3536\u6282;\u6AC5ot;\u6ABD\u0100;d\u11DA\u351Aot;\u6AC3ult;\u6AC1\u0100Ee\u3528\u352A;\u6ACB;\u628Alus;\u6ABFarr;\u6979\u0180eiu\u353D\u3552\u3555t\u0180;en\u350E\u3545\u354Bq\u0100;q\u11DA\u350Feq\u0100;q\u352B\u3528m;\u6AC7\u0100bp\u355A\u355C;\u6AD5;\u6AD3c\u0300;acens\u11ED\u356C\u3572\u3579\u357B\u3326ppro\xF8\u32FAurlye\xF1\u11FE\xF1\u11F3\u0180aes\u3582\u3588\u331Bppro\xF8\u331Aq\xF1\u3317g;\u666A\u0680123;Edehlmnps\u35A9\u35AC\u35AF\u121C\u35B2\u35B4\u35C0\u35C9\u35D5\u35DA\u35DF\u35E8\u35ED\u803B\xB9\u40B9\u803B\xB2\u40B2\u803B\xB3\u40B3;\u6AC6\u0100os\u35B9\u35BCt;\u6ABEub;\u6AD8\u0100;d\u1222\u35C5ot;\u6AC4s\u0100ou\u35CF\u35D2l;\u67C9b;\u6AD7arr;\u697Bult;\u6AC2\u0100Ee\u35E4\u35E6;\u6ACC;\u628Blus;\u6AC0\u0180eiu\u35F4\u3609\u360Ct\u0180;en\u121C\u35FC\u3602q\u0100;q\u1222\u35B2eq\u0100;q\u35E7\u35E4m;\u6AC8\u0100bp\u3611\u3613;\u6AD4;\u6AD6\u0180Aan\u361C\u3620\u362Drr;\u61D9r\u0100hr\u3626\u3628\xEB\u222E\u0100;o\u0A2B\u0A29war;\u692Alig\u803B\xDF\u40DF\u0BE1\u3651\u365D\u3660\u12CE\u3673\u3679\0\u367E\u36C2\0\0\0\0\0\u36DB\u3703\0\u3709\u376C\0\0\0\u3787\u0272\u3656\0\0\u365Bget;\u6316;\u43C4r\xEB\u0E5F\u0180aey\u3666\u366B\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uC000\uD835\uDD31\u0200eiko\u3686\u369D\u36B5\u36BC\u01F2\u368B\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369B\u43B8ym;\u43D1\u0100cn\u36A2\u36B2k\u0100as\u36A8\u36AEppro\xF8\u12C1im\xBB\u12ACs\xF0\u129E\u0100as\u36BA\u36AE\xF0\u12C1rn\u803B\xFE\u40FE\u01EC\u031F\u36C6\u22E7es\u8180\xD7;bd\u36CF\u36D0\u36D8\u40D7\u0100;a\u190F\u36D5r;\u6A31;\u6A30\u0180eps\u36E1\u36E3\u3700\xE1\u2A4D\u0200;bcf\u0486\u36EC\u36F0\u36F4ot;\u6336ir;\u6AF1\u0100;o\u36F9\u36FC\uC000\uD835\uDD65rk;\u6ADA\xE1\u3362rime;\u6034\u0180aip\u370F\u3712\u3764d\xE5\u1248\u0380adempst\u3721\u374D\u3740\u3751\u3757\u375C\u375Fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65B5own\xBB\u1DBBeft\u0100;e\u2800\u373E\xF1\u092E;\u625Cight\u0100;e\u32AA\u374B\xF1\u105Aot;\u65ECinus;\u6A3Alus;\u6A39b;\u69CDime;\u6A3Bezium;\u63E2\u0180cht\u3772\u377D\u3781\u0100ry\u3777\u377B;\uC000\uD835\uDCC9;\u4446cy;\u445Brok;\u4167\u0100io\u378B\u378Ex\xF4\u1777head\u0100lr\u3797\u37A0eftarro\xF7\u084Fightarrow\xBB\u0F5D\u0900AHabcdfghlmoprstuw\u37D0\u37D3\u37D7\u37E4\u37F0\u37FC\u380E\u381C\u3823\u3834\u3851\u385D\u386B\u38A9\u38CC\u38D2\u38EA\u38F6r\xF2\u03EDar;\u6963\u0100cr\u37DC\u37E2ute\u803B\xFA\u40FA\xF2\u1150r\u01E3\u37EA\0\u37EDy;\u445Eve;\u416D\u0100iy\u37F5\u37FArc\u803B\xFB\u40FB;\u4443\u0180abh\u3803\u3806\u380Br\xF2\u13ADlac;\u4171a\xF2\u13C3\u0100ir\u3813\u3818sht;\u697E;\uC000\uD835\uDD32rave\u803B\xF9\u40F9\u0161\u3827\u3831r\u0100lr\u382C\u382E\xBB\u0957\xBB\u1083lk;\u6580\u0100ct\u3839\u384D\u026F\u383F\0\0\u384Arn\u0100;e\u3845\u3846\u631Cr\xBB\u3846op;\u630Fri;\u65F8\u0100al\u3856\u385Acr;\u416B\u80BB\xA8\u0349\u0100gp\u3862\u3866on;\u4173f;\uC000\uD835\uDD66\u0300adhlsu\u114B\u3878\u387D\u1372\u3891\u38A0own\xE1\u13B3arpoon\u0100lr\u3888\u388Cef\xF4\u382Digh\xF4\u382Fi\u0180;hl\u3899\u389A\u389C\u43C5\xBB\u13FAon\xBB\u389Aparrows;\u61C8\u0180cit\u38B0\u38C4\u38C8\u026F\u38B6\0\0\u38C1rn\u0100;e\u38BC\u38BD\u631Dr\xBB\u38BDop;\u630Eng;\u416Fri;\u65F9cr;\uC000\uD835\uDCCA\u0180dir\u38D9\u38DD\u38E2ot;\u62F0lde;\u4169i\u0100;f\u3730\u38E8\xBB\u1813\u0100am\u38EF\u38F2r\xF2\u38A8l\u803B\xFC\u40FCangle;\u69A7\u0780ABDacdeflnoprsz\u391C\u391F\u3929\u392D\u39B5\u39B8\u39BD\u39DF\u39E4\u39E8\u39F3\u39F9\u39FD\u3A01\u3A20r\xF2\u03F7ar\u0100;v\u3926\u3927\u6AE8;\u6AE9as\xE8\u03E1\u0100nr\u3932\u3937grt;\u699C\u0380eknprst\u34E3\u3946\u394B\u3952\u395D\u3964\u3996app\xE1\u2415othin\xE7\u1E96\u0180hir\u34EB\u2EC8\u3959op\xF4\u2FB5\u0100;h\u13B7\u3962\xEF\u318D\u0100iu\u3969\u396Dgm\xE1\u33B3\u0100bp\u3972\u3984setneq\u0100;q\u397D\u3980\uC000\u228A\uFE00;\uC000\u2ACB\uFE00setneq\u0100;q\u398F\u3992\uC000\u228B\uFE00;\uC000\u2ACC\uFE00\u0100hr\u399B\u399Fet\xE1\u369Ciangle\u0100lr\u39AA\u39AFeft\xBB\u0925ight\xBB\u1051y;\u4432ash\xBB\u1036\u0180elr\u39C4\u39D2\u39D7\u0180;be\u2DEA\u39CB\u39CFar;\u62BBq;\u625Alip;\u62EE\u0100bt\u39DC\u1468a\xF2\u1469r;\uC000\uD835\uDD33tr\xE9\u39AEsu\u0100bp\u39EF\u39F1\xBB\u0D1C\xBB\u0D59pf;\uC000\uD835\uDD67ro\xF0\u0EFBtr\xE9\u39B4\u0100cu\u3A06\u3A0Br;\uC000\uD835\uDCCB\u0100bp\u3A10\u3A18n\u0100Ee\u3980\u3A16\xBB\u397En\u0100Ee\u3992\u3A1E\xBB\u3990igzag;\u699A\u0380cefoprs\u3A36\u3A3B\u3A56\u3A5B\u3A54\u3A61\u3A6Airc;\u4175\u0100di\u3A40\u3A51\u0100bg\u3A45\u3A49ar;\u6A5Fe\u0100;q\u15FA\u3A4F;\u6259erp;\u6118r;\uC000\uD835\uDD34pf;\uC000\uD835\uDD68\u0100;e\u1479\u3A66at\xE8\u1479cr;\uC000\uD835\uDCCC\u0AE3\u178E\u3A87\0\u3A8B\0\u3A90\u3A9B\0\0\u3A9D\u3AA8\u3AAB\u3AAF\0\0\u3AC3\u3ACE\0\u3AD8\u17DC\u17DFtr\xE9\u17D1r;\uC000\uD835\uDD35\u0100Aa\u3A94\u3A97r\xF2\u03C3r\xF2\u09F6;\u43BE\u0100Aa\u3AA1\u3AA4r\xF2\u03B8r\xF2\u09EBa\xF0\u2713is;\u62FB\u0180dpt\u17A4\u3AB5\u3ABE\u0100fl\u3ABA\u17A9;\uC000\uD835\uDD69im\xE5\u17B2\u0100Aa\u3AC7\u3ACAr\xF2\u03CEr\xF2\u0A01\u0100cq\u3AD2\u17B8r;\uC000\uD835\uDCCD\u0100pt\u17D6\u3ADCr\xE9\u17D4\u0400acefiosu\u3AF0\u3AFD\u3B08\u3B0C\u3B11\u3B15\u3B1B\u3B21c\u0100uy\u3AF6\u3AFBte\u803B\xFD\u40FD;\u444F\u0100iy\u3B02\u3B06rc;\u4177;\u444Bn\u803B\xA5\u40A5r;\uC000\uD835\uDD36cy;\u4457pf;\uC000\uD835\uDD6Acr;\uC000\uD835\uDCCE\u0100cm\u3B26\u3B29y;\u444El\u803B\xFF\u40FF\u0500acdefhiosw\u3B42\u3B48\u3B54\u3B58\u3B64\u3B69\u3B6D\u3B74\u3B7A\u3B80cute;\u417A\u0100ay\u3B4D\u3B52ron;\u417E;\u4437ot;\u417C\u0100et\u3B5D\u3B61tr\xE6\u155Fa;\u43B6r;\uC000\uD835\uDD37cy;\u4436grarr;\u61DDpf;\uC000\uD835\uDD6Bcr;\uC000\uD835\uDCCF\u0100jn\u3B85\u3B87;\u600Dj;\u600C'.split("").map((c3) => c3.charCodeAt(0)));

// node_modules/entities/lib/esm/generated/decode-data-xml.js
var decode_data_xml_default = new Uint16Array("\u0200aglq\t\x15\x18\x1B\u026D\x0F\0\0\x12p;\u4026os;\u4027t;\u403Et;\u403Cuot;\u4022".split("").map((c3) => c3.charCodeAt(0)));

// node_modules/entities/lib/esm/decode_codepoint.js
function replaceCodePoint(codePoint) {
  var _a;
  if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
    return 65533;
  }
  return (_a = decodeMap.get(codePoint)) !== null && _a !== undefined ? _a : codePoint;
}
var _a;
var decodeMap = new Map([
  [0, 65533],
  [128, 8364],
  [130, 8218],
  [131, 402],
  [132, 8222],
  [133, 8230],
  [134, 8224],
  [135, 8225],
  [136, 710],
  [137, 8240],
  [138, 352],
  [139, 8249],
  [140, 338],
  [142, 381],
  [145, 8216],
  [146, 8217],
  [147, 8220],
  [148, 8221],
  [149, 8226],
  [150, 8211],
  [151, 8212],
  [152, 732],
  [153, 8482],
  [154, 353],
  [155, 8250],
  [156, 339],
  [158, 382],
  [159, 376]
]);
var fromCodePoint = (_a = String.fromCodePoint) !== null && _a !== undefined ? _a : function(codePoint) {
  let output = "";
  if (codePoint > 65535) {
    codePoint -= 65536;
    output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
    codePoint = 56320 | codePoint & 1023;
  }
  output += String.fromCharCode(codePoint);
  return output;
};

// node_modules/entities/lib/esm/decode.js
function isNumber(code) {
  return code >= CharCodes.ZERO && code <= CharCodes.NINE;
}
function isHexadecimalCharacter(code) {
  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;
}
function isAsciiAlphaNumeric(code) {
  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);
}
function isEntityInAttributeInvalidEnd(code) {
  return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);
}
function getDecoder(decodeTree) {
  let ret = "";
  const decoder = new EntityDecoder(decodeTree, (str) => ret += fromCodePoint(str));
  return function decodeWithTrie(str, decodeMode) {
    let lastIndex = 0;
    let offset = 0;
    while ((offset = str.indexOf("&", offset)) >= 0) {
      ret += str.slice(lastIndex, offset);
      decoder.startEntity(decodeMode);
      const len = decoder.write(str, offset + 1);
      if (len < 0) {
        lastIndex = offset + decoder.end();
        break;
      }
      lastIndex = offset + len;
      offset = len === 0 ? lastIndex + 1 : lastIndex;
    }
    const result = ret + str.slice(lastIndex);
    ret = "";
    return result;
  };
}
function determineBranch(decodeTree, current, nodeIdx, char) {
  const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
  const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
  if (branchCount === 0) {
    return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
  }
  if (jumpOffset) {
    const value15 = char - jumpOffset;
    return value15 < 0 || value15 >= branchCount ? -1 : decodeTree[nodeIdx + value15] - 1;
  }
  let lo = nodeIdx;
  let hi = lo + branchCount - 1;
  while (lo <= hi) {
    const mid = lo + hi >>> 1;
    const midVal = decodeTree[mid];
    if (midVal < char) {
      lo = mid + 1;
    } else if (midVal > char) {
      hi = mid - 1;
    } else {
      return decodeTree[mid + branchCount];
    }
  }
  return -1;
}
var CharCodes;
(function(CharCodes2) {
  CharCodes2[CharCodes2["NUM"] = 35] = "NUM";
  CharCodes2[CharCodes2["SEMI"] = 59] = "SEMI";
  CharCodes2[CharCodes2["EQUALS"] = 61] = "EQUALS";
  CharCodes2[CharCodes2["ZERO"] = 48] = "ZERO";
  CharCodes2[CharCodes2["NINE"] = 57] = "NINE";
  CharCodes2[CharCodes2["LOWER_A"] = 97] = "LOWER_A";
  CharCodes2[CharCodes2["LOWER_F"] = 102] = "LOWER_F";
  CharCodes2[CharCodes2["LOWER_X"] = 120] = "LOWER_X";
  CharCodes2[CharCodes2["LOWER_Z"] = 122] = "LOWER_Z";
  CharCodes2[CharCodes2["UPPER_A"] = 65] = "UPPER_A";
  CharCodes2[CharCodes2["UPPER_F"] = 70] = "UPPER_F";
  CharCodes2[CharCodes2["UPPER_Z"] = 90] = "UPPER_Z";
})(CharCodes || (CharCodes = {}));
var TO_LOWER_BIT = 32;
var BinTrieFlags;
(function(BinTrieFlags2) {
  BinTrieFlags2[BinTrieFlags2["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
  BinTrieFlags2[BinTrieFlags2["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
  BinTrieFlags2[BinTrieFlags2["JUMP_TABLE"] = 127] = "JUMP_TABLE";
})(BinTrieFlags || (BinTrieFlags = {}));
var EntityDecoderState;
(function(EntityDecoderState2) {
  EntityDecoderState2[EntityDecoderState2["EntityStart"] = 0] = "EntityStart";
  EntityDecoderState2[EntityDecoderState2["NumericStart"] = 1] = "NumericStart";
  EntityDecoderState2[EntityDecoderState2["NumericDecimal"] = 2] = "NumericDecimal";
  EntityDecoderState2[EntityDecoderState2["NumericHex"] = 3] = "NumericHex";
  EntityDecoderState2[EntityDecoderState2["NamedEntity"] = 4] = "NamedEntity";
})(EntityDecoderState || (EntityDecoderState = {}));
var DecodingMode;
(function(DecodingMode2) {
  DecodingMode2[DecodingMode2["Legacy"] = 0] = "Legacy";
  DecodingMode2[DecodingMode2["Strict"] = 1] = "Strict";
  DecodingMode2[DecodingMode2["Attribute"] = 2] = "Attribute";
})(DecodingMode || (DecodingMode = {}));

class EntityDecoder {
  constructor(decodeTree, emitCodePoint, errors5) {
    this.decodeTree = decodeTree;
    this.emitCodePoint = emitCodePoint;
    this.errors = errors5;
    this.state = EntityDecoderState.EntityStart;
    this.consumed = 1;
    this.result = 0;
    this.treeIndex = 0;
    this.excess = 1;
    this.decodeMode = DecodingMode.Strict;
  }
  startEntity(decodeMode) {
    this.decodeMode = decodeMode;
    this.state = EntityDecoderState.EntityStart;
    this.result = 0;
    this.treeIndex = 0;
    this.excess = 1;
    this.consumed = 1;
  }
  write(str, offset) {
    switch (this.state) {
      case EntityDecoderState.EntityStart: {
        if (str.charCodeAt(offset) === CharCodes.NUM) {
          this.state = EntityDecoderState.NumericStart;
          this.consumed += 1;
          return this.stateNumericStart(str, offset + 1);
        }
        this.state = EntityDecoderState.NamedEntity;
        return this.stateNamedEntity(str, offset);
      }
      case EntityDecoderState.NumericStart: {
        return this.stateNumericStart(str, offset);
      }
      case EntityDecoderState.NumericDecimal: {
        return this.stateNumericDecimal(str, offset);
      }
      case EntityDecoderState.NumericHex: {
        return this.stateNumericHex(str, offset);
      }
      case EntityDecoderState.NamedEntity: {
        return this.stateNamedEntity(str, offset);
      }
    }
  }
  stateNumericStart(str, offset) {
    if (offset >= str.length) {
      return -1;
    }
    if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
      this.state = EntityDecoderState.NumericHex;
      this.consumed += 1;
      return this.stateNumericHex(str, offset + 1);
    }
    this.state = EntityDecoderState.NumericDecimal;
    return this.stateNumericDecimal(str, offset);
  }
  addToNumericResult(str, start, end, base) {
    if (start !== end) {
      const digitCount = end - start;
      this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);
      this.consumed += digitCount;
    }
  }
  stateNumericHex(str, offset) {
    const startIdx = offset;
    while (offset < str.length) {
      const char = str.charCodeAt(offset);
      if (isNumber(char) || isHexadecimalCharacter(char)) {
        offset += 1;
      } else {
        this.addToNumericResult(str, startIdx, offset, 16);
        return this.emitNumericEntity(char, 3);
      }
    }
    this.addToNumericResult(str, startIdx, offset, 16);
    return -1;
  }
  stateNumericDecimal(str, offset) {
    const startIdx = offset;
    while (offset < str.length) {
      const char = str.charCodeAt(offset);
      if (isNumber(char)) {
        offset += 1;
      } else {
        this.addToNumericResult(str, startIdx, offset, 10);
        return this.emitNumericEntity(char, 2);
      }
    }
    this.addToNumericResult(str, startIdx, offset, 10);
    return -1;
  }
  emitNumericEntity(lastCp, expectedLength) {
    var _a2;
    if (this.consumed <= expectedLength) {
      (_a2 = this.errors) === null || _a2 === undefined || _a2.absenceOfDigitsInNumericCharacterReference(this.consumed);
      return 0;
    }
    if (lastCp === CharCodes.SEMI) {
      this.consumed += 1;
    } else if (this.decodeMode === DecodingMode.Strict) {
      return 0;
    }
    this.emitCodePoint(replaceCodePoint(this.result), this.consumed);
    if (this.errors) {
      if (lastCp !== CharCodes.SEMI) {
        this.errors.missingSemicolonAfterCharacterReference();
      }
      this.errors.validateNumericCharacterReference(this.result);
    }
    return this.consumed;
  }
  stateNamedEntity(str, offset) {
    const { decodeTree } = this;
    let current = decodeTree[this.treeIndex];
    let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
    for (;offset < str.length; offset++, this.excess++) {
      const char = str.charCodeAt(offset);
      this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
      if (this.treeIndex < 0) {
        return this.result === 0 || this.decodeMode === DecodingMode.Attribute && (valueLength === 0 || isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();
      }
      current = decodeTree[this.treeIndex];
      valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
      if (valueLength !== 0) {
        if (char === CharCodes.SEMI) {
          return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
        }
        if (this.decodeMode !== DecodingMode.Strict) {
          this.result = this.treeIndex;
          this.consumed += this.excess;
          this.excess = 0;
        }
      }
    }
    return -1;
  }
  emitNotTerminatedNamedEntity() {
    var _a2;
    const { result, decodeTree } = this;
    const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
    this.emitNamedEntityData(result, valueLength, this.consumed);
    (_a2 = this.errors) === null || _a2 === undefined || _a2.missingSemicolonAfterCharacterReference();
    return this.consumed;
  }
  emitNamedEntityData(result, valueLength, consumed) {
    const { decodeTree } = this;
    this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);
    if (valueLength === 3) {
      this.emitCodePoint(decodeTree[result + 2], consumed);
    }
    return consumed;
  }
  end() {
    var _a2;
    switch (this.state) {
      case EntityDecoderState.NamedEntity: {
        return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
      }
      case EntityDecoderState.NumericDecimal: {
        return this.emitNumericEntity(0, 2);
      }
      case EntityDecoderState.NumericHex: {
        return this.emitNumericEntity(0, 3);
      }
      case EntityDecoderState.NumericStart: {
        (_a2 = this.errors) === null || _a2 === undefined || _a2.absenceOfDigitsInNumericCharacterReference(this.consumed);
        return 0;
      }
      case EntityDecoderState.EntityStart: {
        return 0;
      }
    }
  }
}
var htmlDecoder = getDecoder(decode_data_html_default);
var xmlDecoder = getDecoder(decode_data_xml_default);

// node_modules/entities/lib/esm/escape.js
function encodeXML(str) {
  let ret = "";
  let lastIdx = 0;
  let match;
  while ((match = xmlReplacer.exec(str)) !== null) {
    const i3 = match.index;
    const char = str.charCodeAt(i3);
    const next = xmlCodeMap.get(char);
    if (next !== undefined) {
      ret += str.substring(lastIdx, i3) + next;
      lastIdx = i3 + 1;
    } else {
      ret += `${str.substring(lastIdx, i3)}&#x${getCodePoint2(str, i3).toString(16)};`;
      lastIdx = xmlReplacer.lastIndex += Number((char & 64512) === 55296);
    }
  }
  return ret + str.substr(lastIdx);
}
function getEscaper(regex, map3) {
  return function escape(data) {
    let match;
    let lastIdx = 0;
    let result = "";
    while (match = regex.exec(data)) {
      if (lastIdx !== match.index) {
        result += data.substring(lastIdx, match.index);
      }
      result += map3.get(match[0].charCodeAt(0));
      lastIdx = match.index + 1;
    }
    return result + data.substring(lastIdx);
  };
}
var xmlReplacer = /["&'<>$\x80-\uFFFF]/g;
var xmlCodeMap = new Map([
  [34, "&quot;"],
  [38, "&amp;"],
  [39, "&apos;"],
  [60, "&lt;"],
  [62, "&gt;"]
]);
var getCodePoint2 = String.prototype.codePointAt != null ? (str, index) => str.codePointAt(index) : (c3, index) => (c3.charCodeAt(index) & 64512) === 55296 ? (c3.charCodeAt(index) - 55296) * 1024 + c3.charCodeAt(index + 1) - 56320 + 65536 : c3.charCodeAt(index);
var escapeUTF8 = getEscaper(/[&<>'"]/g, xmlCodeMap);
var escapeAttribute = getEscaper(/["&\u00A0]/g, new Map([
  [34, "&quot;"],
  [38, "&amp;"],
  [160, "&nbsp;"]
]));
var escapeText = getEscaper(/[&<>\u00A0]/g, new Map([
  [38, "&amp;"],
  [60, "&lt;"],
  [62, "&gt;"],
  [160, "&nbsp;"]
]));
// node_modules/entities/lib/esm/index.js
var EntityLevel;
(function(EntityLevel2) {
  EntityLevel2[EntityLevel2["XML"] = 0] = "XML";
  EntityLevel2[EntityLevel2["HTML"] = 1] = "HTML";
})(EntityLevel || (EntityLevel = {}));
var EncodingMode;
(function(EncodingMode2) {
  EncodingMode2[EncodingMode2["UTF8"] = 0] = "UTF8";
  EncodingMode2[EncodingMode2["ASCII"] = 1] = "ASCII";
  EncodingMode2[EncodingMode2["Extensive"] = 2] = "Extensive";
  EncodingMode2[EncodingMode2["Attribute"] = 3] = "Attribute";
  EncodingMode2[EncodingMode2["Text"] = 4] = "Text";
})(EncodingMode || (EncodingMode = {}));

// node_modules/dom-serializer/lib/esm/foreignNames.js
var elementNames = new Map([
  "altGlyph",
  "altGlyphDef",
  "altGlyphItem",
  "animateColor",
  "animateMotion",
  "animateTransform",
  "clipPath",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feDropShadow",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "foreignObject",
  "glyphRef",
  "linearGradient",
  "radialGradient",
  "textPath"
].map((val) => [val.toLowerCase(), val]));
var attributeNames = new Map([
  "definitionURL",
  "attributeName",
  "attributeType",
  "baseFrequency",
  "baseProfile",
  "calcMode",
  "clipPathUnits",
  "diffuseConstant",
  "edgeMode",
  "filterUnits",
  "glyphRef",
  "gradientTransform",
  "gradientUnits",
  "kernelMatrix",
  "kernelUnitLength",
  "keyPoints",
  "keySplines",
  "keyTimes",
  "lengthAdjust",
  "limitingConeAngle",
  "markerHeight",
  "markerUnits",
  "markerWidth",
  "maskContentUnits",
  "maskUnits",
  "numOctaves",
  "pathLength",
  "patternContentUnits",
  "patternTransform",
  "patternUnits",
  "pointsAtX",
  "pointsAtY",
  "pointsAtZ",
  "preserveAlpha",
  "preserveAspectRatio",
  "primitiveUnits",
  "refX",
  "refY",
  "repeatCount",
  "repeatDur",
  "requiredExtensions",
  "requiredFeatures",
  "specularConstant",
  "specularExponent",
  "spreadMethod",
  "startOffset",
  "stdDeviation",
  "stitchTiles",
  "surfaceScale",
  "systemLanguage",
  "tableValues",
  "targetX",
  "targetY",
  "textLength",
  "viewBox",
  "viewTarget",
  "xChannelSelector",
  "yChannelSelector",
  "zoomAndPan"
].map((val) => [val.toLowerCase(), val]));

// node_modules/dom-serializer/lib/esm/index.js
function replaceQuotes(value15) {
  return value15.replace(/"/g, "&quot;");
}
function formatAttributes(attributes, opts) {
  var _a2;
  if (!attributes)
    return;
  const encode2 = ((_a2 = opts.encodeEntities) !== null && _a2 !== undefined ? _a2 : opts.decodeEntities) === false ? replaceQuotes : opts.xmlMode || opts.encodeEntities !== "utf8" ? encodeXML : escapeAttribute;
  return Object.keys(attributes).map((key) => {
    var _a3, _b;
    const value15 = (_a3 = attributes[key]) !== null && _a3 !== undefined ? _a3 : "";
    if (opts.xmlMode === "foreign") {
      key = (_b = attributeNames.get(key)) !== null && _b !== undefined ? _b : key;
    }
    if (!opts.emptyAttrs && !opts.xmlMode && value15 === "") {
      return key;
    }
    return `${key}="${encode2(value15)}"`;
  }).join(" ");
}
function render(node3, options = {}) {
  const nodes = "length" in node3 ? node3 : [node3];
  let output = "";
  for (let i3 = 0;i3 < nodes.length; i3++) {
    output += renderNode(nodes[i3], options);
  }
  return output;
}
function renderNode(node3, options) {
  switch (node3.type) {
    case Root:
      return render(node3.children, options);
    case Doctype:
    case Directive:
      return renderDirective(node3);
    case Comment:
      return renderComment(node3);
    case CDATA:
      return renderCdata(node3);
    case Script:
    case Style:
    case Tag:
      return renderTag(node3, options);
    case Text:
      return renderText(node3, options);
  }
}
function renderTag(elem, opts) {
  var _a2;
  if (opts.xmlMode === "foreign") {
    elem.name = (_a2 = elementNames.get(elem.name)) !== null && _a2 !== undefined ? _a2 : elem.name;
    if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {
      opts = { ...opts, xmlMode: false };
    }
  }
  if (!opts.xmlMode && foreignElements.has(elem.name)) {
    opts = { ...opts, xmlMode: "foreign" };
  }
  let tag = `<${elem.name}`;
  const attribs = formatAttributes(elem.attribs, opts);
  if (attribs) {
    tag += ` ${attribs}`;
  }
  if (elem.children.length === 0 && (opts.xmlMode ? opts.selfClosingTags !== false : opts.selfClosingTags && singleTag.has(elem.name))) {
    if (!opts.xmlMode)
      tag += " ";
    tag += "/>";
  } else {
    tag += ">";
    if (elem.children.length > 0) {
      tag += render(elem.children, opts);
    }
    if (opts.xmlMode || !singleTag.has(elem.name)) {
      tag += `</${elem.name}>`;
    }
  }
  return tag;
}
function renderDirective(elem) {
  return `<${elem.data}>`;
}
function renderText(elem, opts) {
  var _a2;
  let data = elem.data || "";
  if (((_a2 = opts.encodeEntities) !== null && _a2 !== undefined ? _a2 : opts.decodeEntities) !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {
    data = opts.xmlMode || opts.encodeEntities !== "utf8" ? encodeXML(data) : escapeText(data);
  }
  return data;
}
function renderCdata(elem) {
  return `<![CDATA[${elem.children[0].data}]]>`;
}
function renderComment(elem) {
  return `<!--${elem.data}-->`;
}
var unencodedElements = new Set([
  "style",
  "script",
  "xmp",
  "iframe",
  "noembed",
  "noframes",
  "plaintext",
  "noscript"
]);
var singleTag = new Set([
  "area",
  "base",
  "basefont",
  "br",
  "col",
  "command",
  "embed",
  "frame",
  "hr",
  "img",
  "input",
  "isindex",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
]);
var esm_default = render;
var foreignModeIntegrationPoints = new Set([
  "mi",
  "mo",
  "mn",
  "ms",
  "mtext",
  "annotation-xml",
  "foreignObject",
  "desc",
  "title"
]);
var foreignElements = new Set(["svg", "math"]);

// node_modules/domutils/lib/esm/stringify.js
function getOuterHTML(node3, options) {
  return esm_default(node3, options);
}
function getInnerHTML(node3, options) {
  return hasChildren(node3) ? node3.children.map((node4) => getOuterHTML(node4, options)).join("") : "";
}
function getText(node3) {
  if (Array.isArray(node3))
    return node3.map(getText).join("");
  if (isTag2(node3))
    return node3.name === "br" ? "\n" : getText(node3.children);
  if (isCDATA(node3))
    return getText(node3.children);
  if (isText(node3))
    return node3.data;
  return "";
}
function textContent(node3) {
  if (Array.isArray(node3))
    return node3.map(textContent).join("");
  if (hasChildren(node3) && !isComment(node3)) {
    return textContent(node3.children);
  }
  if (isText(node3))
    return node3.data;
  return "";
}
function innerText(node3) {
  if (Array.isArray(node3))
    return node3.map(innerText).join("");
  if (hasChildren(node3) && (node3.type === ElementType.Tag || isCDATA(node3))) {
    return innerText(node3.children);
  }
  if (isText(node3))
    return node3.data;
  return "";
}
// node_modules/domutils/lib/esm/traversal.js
function getChildren(elem) {
  return hasChildren(elem) ? elem.children : [];
}
function getParent(elem) {
  return elem.parent || null;
}
function getSiblings(elem) {
  const parent = getParent(elem);
  if (parent != null)
    return getChildren(parent);
  const siblings = [elem];
  let { prev, next } = elem;
  while (prev != null) {
    siblings.unshift(prev);
    ({ prev } = prev);
  }
  while (next != null) {
    siblings.push(next);
    ({ next } = next);
  }
  return siblings;
}
function getAttributeValue(elem, name) {
  var _a2;
  return (_a2 = elem.attribs) === null || _a2 === undefined ? undefined : _a2[name];
}
function hasAttrib(elem, name) {
  return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
}
function getName(elem) {
  return elem.name;
}
function nextElementSibling(elem) {
  let { next } = elem;
  while (next !== null && !isTag2(next))
    ({ next } = next);
  return next;
}
function prevElementSibling(elem) {
  let { prev } = elem;
  while (prev !== null && !isTag2(prev))
    ({ prev } = prev);
  return prev;
}
// node_modules/domutils/lib/esm/manipulation.js
function removeElement(elem) {
  if (elem.prev)
    elem.prev.next = elem.next;
  if (elem.next)
    elem.next.prev = elem.prev;
  if (elem.parent) {
    const childs = elem.parent.children;
    const childsIndex = childs.lastIndexOf(elem);
    if (childsIndex >= 0) {
      childs.splice(childsIndex, 1);
    }
  }
  elem.next = null;
  elem.prev = null;
  elem.parent = null;
}
function replaceElement(elem, replacement) {
  const prev = replacement.prev = elem.prev;
  if (prev) {
    prev.next = replacement;
  }
  const next = replacement.next = elem.next;
  if (next) {
    next.prev = replacement;
  }
  const parent = replacement.parent = elem.parent;
  if (parent) {
    const childs = parent.children;
    childs[childs.lastIndexOf(elem)] = replacement;
    elem.parent = null;
  }
}
function appendChild(parent, child) {
  removeElement(child);
  child.next = null;
  child.parent = parent;
  if (parent.children.push(child) > 1) {
    const sibling = parent.children[parent.children.length - 2];
    sibling.next = child;
    child.prev = sibling;
  } else {
    child.prev = null;
  }
}
function append(elem, next) {
  removeElement(next);
  const { parent } = elem;
  const currNext = elem.next;
  next.next = currNext;
  next.prev = elem;
  elem.next = next;
  next.parent = parent;
  if (currNext) {
    currNext.prev = next;
    if (parent) {
      const childs = parent.children;
      childs.splice(childs.lastIndexOf(currNext), 0, next);
    }
  } else if (parent) {
    parent.children.push(next);
  }
}
function prependChild(parent, child) {
  removeElement(child);
  child.parent = parent;
  child.prev = null;
  if (parent.children.unshift(child) !== 1) {
    const sibling = parent.children[1];
    sibling.prev = child;
    child.next = sibling;
  } else {
    child.next = null;
  }
}
function prepend(elem, prev) {
  removeElement(prev);
  const { parent } = elem;
  if (parent) {
    const childs = parent.children;
    childs.splice(childs.indexOf(elem), 0, prev);
  }
  if (elem.prev) {
    elem.prev.next = prev;
  }
  prev.parent = parent;
  prev.prev = elem.prev;
  prev.next = elem;
  elem.prev = prev;
}
// node_modules/domutils/lib/esm/querying.js
function filter(test, node3, recurse = true, limit = Infinity) {
  return find(test, Array.isArray(node3) ? node3 : [node3], recurse, limit);
}
function find(test, nodes, recurse, limit) {
  const result = [];
  const nodeStack = [nodes];
  const indexStack = [0];
  for (;; ) {
    if (indexStack[0] >= nodeStack[0].length) {
      if (indexStack.length === 1) {
        return result;
      }
      nodeStack.shift();
      indexStack.shift();
      continue;
    }
    const elem = nodeStack[0][indexStack[0]++];
    if (test(elem)) {
      result.push(elem);
      if (--limit <= 0)
        return result;
    }
    if (recurse && hasChildren(elem) && elem.children.length > 0) {
      indexStack.unshift(0);
      nodeStack.unshift(elem.children);
    }
  }
}
function findOneChild(test, nodes) {
  return nodes.find(test);
}
function findOne(test, nodes, recurse = true) {
  let elem = null;
  for (let i3 = 0;i3 < nodes.length && !elem; i3++) {
    const node3 = nodes[i3];
    if (!isTag2(node3)) {
      continue;
    } else if (test(node3)) {
      elem = node3;
    } else if (recurse && node3.children.length > 0) {
      elem = findOne(test, node3.children, true);
    }
  }
  return elem;
}
function existsOne(test, nodes) {
  return nodes.some((checked) => isTag2(checked) && (test(checked) || existsOne(test, checked.children)));
}
function findAll(test, nodes) {
  const result = [];
  const nodeStack = [nodes];
  const indexStack = [0];
  for (;; ) {
    if (indexStack[0] >= nodeStack[0].length) {
      if (nodeStack.length === 1) {
        return result;
      }
      nodeStack.shift();
      indexStack.shift();
      continue;
    }
    const elem = nodeStack[0][indexStack[0]++];
    if (!isTag2(elem))
      continue;
    if (test(elem))
      result.push(elem);
    if (elem.children.length > 0) {
      indexStack.unshift(0);
      nodeStack.unshift(elem.children);
    }
  }
}
// node_modules/domutils/lib/esm/legacy.js
function getAttribCheck(attrib, value15) {
  if (typeof value15 === "function") {
    return (elem) => isTag2(elem) && value15(elem.attribs[attrib]);
  }
  return (elem) => isTag2(elem) && elem.attribs[attrib] === value15;
}
function combineFuncs(a, b) {
  return (elem) => a(elem) || b(elem);
}
function compileTest(options) {
  const funcs = Object.keys(options).map((key) => {
    const value15 = options[key];
    return Object.prototype.hasOwnProperty.call(Checks, key) ? Checks[key](value15) : getAttribCheck(key, value15);
  });
  return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
}
function testElement(options, node3) {
  const test = compileTest(options);
  return test ? test(node3) : true;
}
function getElements(options, nodes, recurse, limit = Infinity) {
  const test = compileTest(options);
  return test ? filter(test, nodes, recurse, limit) : [];
}
function getElementById(id, nodes, recurse = true) {
  if (!Array.isArray(nodes))
    nodes = [nodes];
  return findOne(getAttribCheck("id", id), nodes, recurse);
}
function getElementsByTagName(tagName, nodes, recurse = true, limit = Infinity) {
  return filter(Checks["tag_name"](tagName), nodes, recurse, limit);
}
function getElementsByTagType(type47, nodes, recurse = true, limit = Infinity) {
  return filter(Checks["tag_type"](type47), nodes, recurse, limit);
}
var Checks = {
  tag_name(name) {
    if (typeof name === "function") {
      return (elem) => isTag2(elem) && name(elem.name);
    } else if (name === "*") {
      return isTag2;
    }
    return (elem) => isTag2(elem) && elem.name === name;
  },
  tag_type(type47) {
    if (typeof type47 === "function") {
      return (elem) => type47(elem.type);
    }
    return (elem) => elem.type === type47;
  },
  tag_contains(data) {
    if (typeof data === "function") {
      return (elem) => isText(elem) && data(elem.data);
    }
    return (elem) => isText(elem) && elem.data === data;
  }
};
// node_modules/domutils/lib/esm/helpers.js
function removeSubsets(nodes) {
  let idx = nodes.length;
  while (--idx >= 0) {
    const node3 = nodes[idx];
    if (idx > 0 && nodes.lastIndexOf(node3, idx - 1) >= 0) {
      nodes.splice(idx, 1);
      continue;
    }
    for (let ancestor = node3.parent;ancestor; ancestor = ancestor.parent) {
      if (nodes.includes(ancestor)) {
        nodes.splice(idx, 1);
        break;
      }
    }
  }
  return nodes;
}
function compareDocumentPosition(nodeA, nodeB) {
  const aParents = [];
  const bParents = [];
  if (nodeA === nodeB) {
    return 0;
  }
  let current = hasChildren(nodeA) ? nodeA : nodeA.parent;
  while (current) {
    aParents.unshift(current);
    current = current.parent;
  }
  current = hasChildren(nodeB) ? nodeB : nodeB.parent;
  while (current) {
    bParents.unshift(current);
    current = current.parent;
  }
  const maxIdx = Math.min(aParents.length, bParents.length);
  let idx = 0;
  while (idx < maxIdx && aParents[idx] === bParents[idx]) {
    idx++;
  }
  if (idx === 0) {
    return DocumentPosition.DISCONNECTED;
  }
  const sharedParent = aParents[idx - 1];
  const siblings = sharedParent.children;
  const aSibling = aParents[idx];
  const bSibling = bParents[idx];
  if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
    if (sharedParent === nodeB) {
      return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;
    }
    return DocumentPosition.FOLLOWING;
  }
  if (sharedParent === nodeA) {
    return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;
  }
  return DocumentPosition.PRECEDING;
}
function uniqueSort(nodes) {
  nodes = nodes.filter((node3, i3, arr) => !arr.includes(node3, i3 + 1));
  nodes.sort((a, b) => {
    const relative = compareDocumentPosition(a, b);
    if (relative & DocumentPosition.PRECEDING) {
      return -1;
    } else if (relative & DocumentPosition.FOLLOWING) {
      return 1;
    }
    return 0;
  });
  return nodes;
}
var DocumentPosition;
(function(DocumentPosition2) {
  DocumentPosition2[DocumentPosition2["DISCONNECTED"] = 1] = "DISCONNECTED";
  DocumentPosition2[DocumentPosition2["PRECEDING"] = 2] = "PRECEDING";
  DocumentPosition2[DocumentPosition2["FOLLOWING"] = 4] = "FOLLOWING";
  DocumentPosition2[DocumentPosition2["CONTAINS"] = 8] = "CONTAINS";
  DocumentPosition2[DocumentPosition2["CONTAINED_BY"] = 16] = "CONTAINED_BY";
})(DocumentPosition || (DocumentPosition = {}));
// node_modules/domutils/lib/esm/feeds.js
function getFeed(doc) {
  const feedRoot = getOneElement(isValidFeed, doc);
  return !feedRoot ? null : feedRoot.name === "feed" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);
}
function getAtomFeed(feedRoot) {
  var _a2;
  const childs = feedRoot.children;
  const feed = {
    type: "atom",
    items: getElementsByTagName("entry", childs).map((item) => {
      var _a3;
      const { children } = item;
      const entry = { media: getMediaElements(children) };
      addConditionally(entry, "id", "id", children);
      addConditionally(entry, "title", "title", children);
      const href2 = (_a3 = getOneElement("link", children)) === null || _a3 === undefined ? undefined : _a3.attribs["href"];
      if (href2) {
        entry.link = href2;
      }
      const description = fetch2("summary", children) || fetch2("content", children);
      if (description) {
        entry.description = description;
      }
      const pubDate = fetch2("updated", children);
      if (pubDate) {
        entry.pubDate = new Date(pubDate);
      }
      return entry;
    })
  };
  addConditionally(feed, "id", "id", childs);
  addConditionally(feed, "title", "title", childs);
  const href = (_a2 = getOneElement("link", childs)) === null || _a2 === undefined ? undefined : _a2.attribs["href"];
  if (href) {
    feed.link = href;
  }
  addConditionally(feed, "description", "subtitle", childs);
  const updated = fetch2("updated", childs);
  if (updated) {
    feed.updated = new Date(updated);
  }
  addConditionally(feed, "author", "email", childs, true);
  return feed;
}
function getRssFeed(feedRoot) {
  var _a2, _b;
  const childs = (_b = (_a2 = getOneElement("channel", feedRoot.children)) === null || _a2 === undefined ? undefined : _a2.children) !== null && _b !== undefined ? _b : [];
  const feed = {
    type: feedRoot.name.substr(0, 3),
    id: "",
    items: getElementsByTagName("item", feedRoot.children).map((item) => {
      const { children } = item;
      const entry = { media: getMediaElements(children) };
      addConditionally(entry, "id", "guid", children);
      addConditionally(entry, "title", "title", children);
      addConditionally(entry, "link", "link", children);
      addConditionally(entry, "description", "description", children);
      const pubDate = fetch2("pubDate", children) || fetch2("dc:date", children);
      if (pubDate)
        entry.pubDate = new Date(pubDate);
      return entry;
    })
  };
  addConditionally(feed, "title", "title", childs);
  addConditionally(feed, "link", "link", childs);
  addConditionally(feed, "description", "description", childs);
  const updated = fetch2("lastBuildDate", childs);
  if (updated) {
    feed.updated = new Date(updated);
  }
  addConditionally(feed, "author", "managingEditor", childs, true);
  return feed;
}
function getMediaElements(where) {
  return getElementsByTagName("media:content", where).map((elem) => {
    const { attribs } = elem;
    const media = {
      medium: attribs["medium"],
      isDefault: !!attribs["isDefault"]
    };
    for (const attrib of MEDIA_KEYS_STRING) {
      if (attribs[attrib]) {
        media[attrib] = attribs[attrib];
      }
    }
    for (const attrib of MEDIA_KEYS_INT) {
      if (attribs[attrib]) {
        media[attrib] = parseInt(attribs[attrib], 10);
      }
    }
    if (attribs["expression"]) {
      media.expression = attribs["expression"];
    }
    return media;
  });
}
function getOneElement(tagName, node3) {
  return getElementsByTagName(tagName, node3, true, 1)[0];
}
function fetch2(tagName, where, recurse = false) {
  return textContent(getElementsByTagName(tagName, where, recurse, 1)).trim();
}
function addConditionally(obj, prop, tagName, where, recurse = false) {
  const val = fetch2(tagName, where, recurse);
  if (val)
    obj[prop] = val;
}
function isValidFeed(value15) {
  return value15 === "rss" || value15 === "feed" || value15 === "rdf:RDF";
}
var MEDIA_KEYS_STRING = ["url", "type", "lang"];
var MEDIA_KEYS_INT = [
  "fileSize",
  "bitrate",
  "framerate",
  "samplingrate",
  "channels",
  "duration",
  "height",
  "width"
];
// node_modules/cheerio/dist/esm/static.js
function render2(that, dom, options2) {
  if (!that)
    return "";
  return that(dom !== null && dom !== undefined ? dom : that._root.children, null, undefined, options2).toString();
}
function isOptions(dom, options2) {
  return !options2 && typeof dom === "object" && dom != null && !("length" in dom) && !("type" in dom);
}
function html(dom, options2) {
  const toRender = isOptions(dom) ? (options2 = dom, undefined) : dom;
  const opts = {
    ...this === null || this === undefined ? undefined : this._options,
    ...flattenOptions(options2)
  };
  return render2(this, toRender, opts);
}
function xml(dom) {
  const options2 = { ...this._options, xmlMode: true };
  return render2(this, dom, options2);
}
function text(elements) {
  const elems = elements !== null && elements !== undefined ? elements : this ? this.root() : [];
  let ret = "";
  for (let i3 = 0;i3 < elems.length; i3++) {
    ret += textContent(elems[i3]);
  }
  return ret;
}
function parseHTML(data, context, keepScripts = typeof context === "boolean" ? context : false) {
  if (!data || typeof data !== "string") {
    return null;
  }
  if (typeof context === "boolean") {
    keepScripts = context;
  }
  const parsed = this.load(data, this._options, false);
  if (!keepScripts) {
    parsed("script").remove();
  }
  return [...parsed.root()[0].children];
}
function root() {
  return this(this._root);
}
function contains(container, contained) {
  if (contained === container) {
    return false;
  }
  let next = contained;
  while (next && next !== next.parent) {
    next = next.parent;
    if (next === container) {
      return true;
    }
  }
  return false;
}
function extract6(map3) {
  return this.root().extract(map3);
}
function merge(arr1, arr2) {
  if (!isArrayLike(arr1) || !isArrayLike(arr2)) {
    return;
  }
  let newLength = arr1.length;
  const len = +arr2.length;
  for (let i3 = 0;i3 < len; i3++) {
    arr1[newLength++] = arr2[i3];
  }
  arr1.length = newLength;
  return arr1;
}
function isArrayLike(item) {
  if (Array.isArray(item)) {
    return true;
  }
  if (typeof item !== "object" || item === null || !("length" in item) || typeof item.length !== "number" || item.length < 0) {
    return false;
  }
  for (let i3 = 0;i3 < item.length; i3++) {
    if (!(i3 in item)) {
      return false;
    }
  }
  return true;
}

// node_modules/cheerio/dist/esm/api/attributes.js
var exports_attributes = {};
__export(exports_attributes, {
  val: () => val,
  toggleClass: () => toggleClass,
  removeClass: () => removeClass,
  removeAttr: () => removeAttr,
  prop: () => prop,
  hasClass: () => hasClass,
  data: () => data,
  attr: () => attr,
  addClass: () => addClass
});

// node_modules/cheerio/dist/esm/utils.js
function isCheerio(maybeCheerio) {
  return maybeCheerio.cheerio != null;
}
function camelCase(str) {
  return str.replace(/[._-](\w|$)/g, (_, x3) => x3.toUpperCase());
}
function cssCase(str) {
  return str.replace(/[A-Z]/g, "-$&").toLowerCase();
}
function domEach(array5, fn) {
  const len = array5.length;
  for (let i3 = 0;i3 < len; i3++)
    fn(array5[i3], i3);
  return array5;
}
function isHtml(str) {
  const tagStart = str.indexOf("<");
  if (tagStart < 0 || tagStart > str.length - 3)
    return false;
  const tagChar = str.charCodeAt(tagStart + 1);
  return (tagChar >= CharacterCodes.LowerA && tagChar <= CharacterCodes.LowerZ || tagChar >= CharacterCodes.UpperA && tagChar <= CharacterCodes.UpperZ || tagChar === CharacterCodes.Exclamation) && str.includes(">", tagStart + 2);
}
var CharacterCodes;
(function(CharacterCodes2) {
  CharacterCodes2[CharacterCodes2["LowerA"] = 97] = "LowerA";
  CharacterCodes2[CharacterCodes2["LowerZ"] = 122] = "LowerZ";
  CharacterCodes2[CharacterCodes2["UpperA"] = 65] = "UpperA";
  CharacterCodes2[CharacterCodes2["UpperZ"] = 90] = "UpperZ";
  CharacterCodes2[CharacterCodes2["Exclamation"] = 33] = "Exclamation";
})(CharacterCodes || (CharacterCodes = {}));

// node_modules/cheerio/dist/esm/api/attributes.js
function getAttr(elem, name, xmlMode) {
  var _a2;
  if (!elem || !isTag2(elem))
    return;
  (_a2 = elem.attribs) !== null && _a2 !== undefined || (elem.attribs = {});
  if (!name) {
    return elem.attribs;
  }
  if (hasOwn.call(elem.attribs, name)) {
    return !xmlMode && rboolean.test(name) ? name : elem.attribs[name];
  }
  if (elem.name === "option" && name === "value") {
    return text(elem.children);
  }
  if (elem.name === "input" && (elem.attribs["type"] === "radio" || elem.attribs["type"] === "checkbox") && name === "value") {
    return "on";
  }
  return;
}
function setAttr(el, name, value15) {
  if (value15 === null) {
    removeAttribute(el, name);
  } else {
    el.attribs[name] = `${value15}`;
  }
}
function attr(name, value15) {
  if (typeof name === "object" || value15 !== undefined) {
    if (typeof value15 === "function") {
      if (typeof name !== "string") {
        {
          throw new Error("Bad combination of arguments.");
        }
      }
      return domEach(this, (el, i3) => {
        if (isTag2(el))
          setAttr(el, name, value15.call(el, i3, el.attribs[name]));
      });
    }
    return domEach(this, (el) => {
      if (!isTag2(el))
        return;
      if (typeof name === "object") {
        for (const objName of Object.keys(name)) {
          const objValue = name[objName];
          setAttr(el, objName, objValue);
        }
      } else {
        setAttr(el, name, value15);
      }
    });
  }
  return arguments.length > 1 ? this : getAttr(this[0], name, this.options.xmlMode);
}
function getProp(el, name, xmlMode) {
  return name in el ? el[name] : !xmlMode && rboolean.test(name) ? getAttr(el, name, false) !== undefined : getAttr(el, name, xmlMode);
}
function setProp(el, name, value15, xmlMode) {
  if (name in el) {
    el[name] = value15;
  } else {
    setAttr(el, name, !xmlMode && rboolean.test(name) ? value15 ? "" : null : `${value15}`);
  }
}
function prop(name, value15) {
  var _a2;
  if (typeof name === "string" && value15 === undefined) {
    const el = this[0];
    if (!el || !isTag2(el))
      return;
    switch (name) {
      case "style": {
        const property = this.css();
        const keys = Object.keys(property);
        for (let i3 = 0;i3 < keys.length; i3++) {
          property[i3] = keys[i3];
        }
        property.length = keys.length;
        return property;
      }
      case "tagName":
      case "nodeName": {
        return el.name.toUpperCase();
      }
      case "href":
      case "src": {
        const prop2 = (_a2 = el.attribs) === null || _a2 === undefined ? undefined : _a2[name];
        if (typeof URL !== "undefined" && (name === "href" && (el.tagName === "a" || el.tagName === "link") || name === "src" && (el.tagName === "img" || el.tagName === "iframe" || el.tagName === "audio" || el.tagName === "video" || el.tagName === "source")) && prop2 !== undefined && this.options.baseURI) {
          return new URL(prop2, this.options.baseURI).href;
        }
        return prop2;
      }
      case "innerText": {
        return innerText(el);
      }
      case "textContent": {
        return textContent(el);
      }
      case "outerHTML": {
        return this.clone().wrap("<container />").parent().html();
      }
      case "innerHTML": {
        return this.html();
      }
      default: {
        return getProp(el, name, this.options.xmlMode);
      }
    }
  }
  if (typeof name === "object" || value15 !== undefined) {
    if (typeof value15 === "function") {
      if (typeof name === "object") {
        throw new TypeError("Bad combination of arguments.");
      }
      return domEach(this, (el, i3) => {
        if (isTag2(el)) {
          setProp(el, name, value15.call(el, i3, getProp(el, name, this.options.xmlMode)), this.options.xmlMode);
        }
      });
    }
    return domEach(this, (el) => {
      if (!isTag2(el))
        return;
      if (typeof name === "object") {
        for (const key of Object.keys(name)) {
          const val = name[key];
          setProp(el, key, val, this.options.xmlMode);
        }
      } else {
        setProp(el, name, value15, this.options.xmlMode);
      }
    });
  }
  return;
}
function setData(elem, name, value15) {
  var _a2;
  (_a2 = elem.data) !== null && _a2 !== undefined || (elem.data = {});
  if (typeof name === "object")
    Object.assign(elem.data, name);
  else if (typeof name === "string" && value15 !== undefined) {
    elem.data[name] = value15;
  }
}
function readAllData(el) {
  for (const domName of Object.keys(el.attribs)) {
    if (!domName.startsWith(dataAttrPrefix)) {
      continue;
    }
    const jsName = camelCase(domName.slice(dataAttrPrefix.length));
    if (!hasOwn.call(el.data, jsName)) {
      el.data[jsName] = parseDataValue(el.attribs[domName]);
    }
  }
  return el.data;
}
function readData(el, name) {
  const domName = dataAttrPrefix + cssCase(name);
  const data = el.data;
  if (hasOwn.call(data, name)) {
    return data[name];
  }
  if (hasOwn.call(el.attribs, domName)) {
    return data[name] = parseDataValue(el.attribs[domName]);
  }
  return;
}
function parseDataValue(value15) {
  if (value15 === "null")
    return null;
  if (value15 === "true")
    return true;
  if (value15 === "false")
    return false;
  const num = Number(value15);
  if (value15 === String(num))
    return num;
  if (rbrace.test(value15)) {
    try {
      return JSON.parse(value15);
    } catch {
    }
  }
  return value15;
}
function data(name, value15) {
  var _a2;
  const elem = this[0];
  if (!elem || !isTag2(elem))
    return;
  const dataEl = elem;
  (_a2 = dataEl.data) !== null && _a2 !== undefined || (dataEl.data = {});
  if (name == null) {
    return readAllData(dataEl);
  }
  if (typeof name === "object" || value15 !== undefined) {
    domEach(this, (el) => {
      if (isTag2(el)) {
        if (typeof name === "object")
          setData(el, name);
        else
          setData(el, name, value15);
      }
    });
    return this;
  }
  return readData(dataEl, name);
}
function val(value15) {
  const querying3 = arguments.length === 0;
  const element = this[0];
  if (!element || !isTag2(element))
    return querying3 ? undefined : this;
  switch (element.name) {
    case "textarea": {
      return this.text(value15);
    }
    case "select": {
      const option = this.find("option:selected");
      if (!querying3) {
        if (this.attr("multiple") == null && typeof value15 === "object") {
          return this;
        }
        this.find("option").removeAttr("selected");
        const values = typeof value15 === "object" ? value15 : [value15];
        for (const val2 of values) {
          this.find(`option[value="${val2}"]`).attr("selected", "");
        }
        return this;
      }
      return this.attr("multiple") ? option.toArray().map((el) => text(el.children)) : option.attr("value");
    }
    case "input":
    case "option": {
      return querying3 ? this.attr("value") : this.attr("value", value15);
    }
  }
  return;
}
function removeAttribute(elem, name) {
  if (!elem.attribs || !hasOwn.call(elem.attribs, name))
    return;
  delete elem.attribs[name];
}
function splitNames(names) {
  return names ? names.trim().split(rspace) : [];
}
function removeAttr(name) {
  const attrNames = splitNames(name);
  for (const attrName of attrNames) {
    domEach(this, (elem) => {
      if (isTag2(elem))
        removeAttribute(elem, attrName);
    });
  }
  return this;
}
function hasClass(className) {
  return this.toArray().some((elem) => {
    const clazz = isTag2(elem) && elem.attribs["class"];
    let idx = -1;
    if (clazz && className.length > 0) {
      while ((idx = clazz.indexOf(className, idx + 1)) > -1) {
        const end = idx + className.length;
        if ((idx === 0 || rspace.test(clazz[idx - 1])) && (end === clazz.length || rspace.test(clazz[end]))) {
          return true;
        }
      }
    }
    return false;
  });
}
function addClass(value15) {
  if (typeof value15 === "function") {
    return domEach(this, (el, i3) => {
      if (isTag2(el)) {
        const className = el.attribs["class"] || "";
        addClass.call([el], value15.call(el, i3, className));
      }
    });
  }
  if (!value15 || typeof value15 !== "string")
    return this;
  const classNames = value15.split(rspace);
  const numElements = this.length;
  for (let i3 = 0;i3 < numElements; i3++) {
    const el = this[i3];
    if (!isTag2(el))
      continue;
    const className = getAttr(el, "class", false);
    if (className) {
      let setClass = ` ${className} `;
      for (const cn of classNames) {
        const appendClass = `${cn} `;
        if (!setClass.includes(` ${appendClass}`))
          setClass += appendClass;
      }
      setAttr(el, "class", setClass.trim());
    } else {
      setAttr(el, "class", classNames.join(" ").trim());
    }
  }
  return this;
}
function removeClass(name) {
  if (typeof name === "function") {
    return domEach(this, (el, i3) => {
      if (isTag2(el)) {
        removeClass.call([el], name.call(el, i3, el.attribs["class"] || ""));
      }
    });
  }
  const classes = splitNames(name);
  const numClasses = classes.length;
  const removeAll = arguments.length === 0;
  return domEach(this, (el) => {
    if (!isTag2(el))
      return;
    if (removeAll) {
      el.attribs["class"] = "";
    } else {
      const elClasses = splitNames(el.attribs["class"]);
      let changed = false;
      for (let j = 0;j < numClasses; j++) {
        const index = elClasses.indexOf(classes[j]);
        if (index >= 0) {
          elClasses.splice(index, 1);
          changed = true;
          j--;
        }
      }
      if (changed) {
        el.attribs["class"] = elClasses.join(" ");
      }
    }
  });
}
function toggleClass(value15, stateVal) {
  if (typeof value15 === "function") {
    return domEach(this, (el, i3) => {
      if (isTag2(el)) {
        toggleClass.call([el], value15.call(el, i3, el.attribs["class"] || "", stateVal), stateVal);
      }
    });
  }
  if (!value15 || typeof value15 !== "string")
    return this;
  const classNames = value15.split(rspace);
  const numClasses = classNames.length;
  const state = typeof stateVal === "boolean" ? stateVal ? 1 : -1 : 0;
  const numElements = this.length;
  for (let i3 = 0;i3 < numElements; i3++) {
    const el = this[i3];
    if (!isTag2(el))
      continue;
    const elementClasses = splitNames(el.attribs["class"]);
    for (let j = 0;j < numClasses; j++) {
      const index = elementClasses.indexOf(classNames[j]);
      if (state >= 0 && index < 0) {
        elementClasses.push(classNames[j]);
      } else if (state <= 0 && index >= 0) {
        elementClasses.splice(index, 1);
      }
    }
    el.attribs["class"] = elementClasses.join(" ");
  }
  return this;
}
var hasOwn = Object.prototype.hasOwnProperty;
var rspace = /\s+/;
var dataAttrPrefix = "data-";
var rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;
var rbrace = /^{[^]*}$|^\[[^]*]$/;

// node_modules/cheerio/dist/esm/api/traversing.js
var exports_traversing = {};
__export(exports_traversing, {
  toArray: () => toArray,
  slice: () => slice,
  siblings: () => siblings,
  prevUntil: () => prevUntil,
  prevAll: () => prevAll,
  prev: () => prev,
  parentsUntil: () => parentsUntil,
  parents: () => parents,
  parent: () => parent,
  not: () => not4,
  nextUntil: () => nextUntil,
  nextAll: () => nextAll,
  next: () => next,
  map: () => map3,
  last: () => last2,
  is: () => is3,
  index: () => index,
  has: () => has2,
  get: () => get,
  first: () => first2,
  find: () => find3,
  filterArray: () => filterArray,
  filter: () => filter3,
  eq: () => eq,
  end: () => end,
  each: () => each,
  contents: () => contents,
  closest: () => closest,
  children: () => children,
  addBack: () => addBack,
  add: () => add,
  _findBySelector: () => _findBySelector
});

// node_modules/css-what/lib/es/types.js
var SelectorType;
(function(SelectorType2) {
  SelectorType2["Attribute"] = "attribute";
  SelectorType2["Pseudo"] = "pseudo";
  SelectorType2["PseudoElement"] = "pseudo-element";
  SelectorType2["Tag"] = "tag";
  SelectorType2["Universal"] = "universal";
  SelectorType2["Adjacent"] = "adjacent";
  SelectorType2["Child"] = "child";
  SelectorType2["Descendant"] = "descendant";
  SelectorType2["Parent"] = "parent";
  SelectorType2["Sibling"] = "sibling";
  SelectorType2["ColumnCombinator"] = "column-combinator";
})(SelectorType || (SelectorType = {}));
var AttributeAction;
(function(AttributeAction2) {
  AttributeAction2["Any"] = "any";
  AttributeAction2["Element"] = "element";
  AttributeAction2["End"] = "end";
  AttributeAction2["Equals"] = "equals";
  AttributeAction2["Exists"] = "exists";
  AttributeAction2["Hyphen"] = "hyphen";
  AttributeAction2["Not"] = "not";
  AttributeAction2["Start"] = "start";
})(AttributeAction || (AttributeAction = {}));
// node_modules/css-what/lib/es/parse.js
function isTraversal(selector) {
  switch (selector.type) {
    case SelectorType.Adjacent:
    case SelectorType.Child:
    case SelectorType.Descendant:
    case SelectorType.Parent:
    case SelectorType.Sibling:
    case SelectorType.ColumnCombinator:
      return true;
    default:
      return false;
  }
}
function funescape(_, escaped, escapedWhitespace) {
  const high = parseInt(escaped, 16) - 65536;
  return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
}
function unescapeCSS(str) {
  return str.replace(reEscape, funescape);
}
function isQuote(c3) {
  return c3 === 39 || c3 === 34;
}
function isWhitespace(c3) {
  return c3 === 32 || c3 === 9 || c3 === 10 || c3 === 12 || c3 === 13;
}
function parse5(selector) {
  const subselects = [];
  const endIndex = parseSelector(subselects, `${selector}`, 0);
  if (endIndex < selector.length) {
    throw new Error(`Unmatched selector: ${selector.slice(endIndex)}`);
  }
  return subselects;
}
function parseSelector(subselects, selector, selectorIndex) {
  let tokens = [];
  function getName2(offset) {
    const match = selector.slice(selectorIndex + offset).match(reName);
    if (!match) {
      throw new Error(`Expected name, found ${selector.slice(selectorIndex)}`);
    }
    const [name] = match;
    selectorIndex += offset + name.length;
    return unescapeCSS(name);
  }
  function stripWhitespace(offset) {
    selectorIndex += offset;
    while (selectorIndex < selector.length && isWhitespace(selector.charCodeAt(selectorIndex))) {
      selectorIndex++;
    }
  }
  function readValueWithParenthesis() {
    selectorIndex += 1;
    const start = selectorIndex;
    let counter = 1;
    for (;counter > 0 && selectorIndex < selector.length; selectorIndex++) {
      if (selector.charCodeAt(selectorIndex) === 40 && !isEscaped(selectorIndex)) {
        counter++;
      } else if (selector.charCodeAt(selectorIndex) === 41 && !isEscaped(selectorIndex)) {
        counter--;
      }
    }
    if (counter) {
      throw new Error("Parenthesis not matched");
    }
    return unescapeCSS(selector.slice(start, selectorIndex - 1));
  }
  function isEscaped(pos) {
    let slashCount = 0;
    while (selector.charCodeAt(--pos) === 92)
      slashCount++;
    return (slashCount & 1) === 1;
  }
  function ensureNotTraversal() {
    if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {
      throw new Error("Did not expect successive traversals.");
    }
  }
  function addTraversal(type47) {
    if (tokens.length > 0 && tokens[tokens.length - 1].type === SelectorType.Descendant) {
      tokens[tokens.length - 1].type = type47;
      return;
    }
    ensureNotTraversal();
    tokens.push({ type: type47 });
  }
  function addSpecialAttribute(name, action) {
    tokens.push({
      type: SelectorType.Attribute,
      name,
      action,
      value: getName2(1),
      namespace: null,
      ignoreCase: "quirks"
    });
  }
  function finalizeSubselector() {
    if (tokens.length && tokens[tokens.length - 1].type === SelectorType.Descendant) {
      tokens.pop();
    }
    if (tokens.length === 0) {
      throw new Error("Empty sub-selector");
    }
    subselects.push(tokens);
  }
  stripWhitespace(0);
  if (selector.length === selectorIndex) {
    return selectorIndex;
  }
  loop:
    while (selectorIndex < selector.length) {
      const firstChar = selector.charCodeAt(selectorIndex);
      switch (firstChar) {
        case 32:
        case 9:
        case 10:
        case 12:
        case 13: {
          if (tokens.length === 0 || tokens[0].type !== SelectorType.Descendant) {
            ensureNotTraversal();
            tokens.push({ type: SelectorType.Descendant });
          }
          stripWhitespace(1);
          break;
        }
        case 62: {
          addTraversal(SelectorType.Child);
          stripWhitespace(1);
          break;
        }
        case 60: {
          addTraversal(SelectorType.Parent);
          stripWhitespace(1);
          break;
        }
        case 126: {
          addTraversal(SelectorType.Sibling);
          stripWhitespace(1);
          break;
        }
        case 43: {
          addTraversal(SelectorType.Adjacent);
          stripWhitespace(1);
          break;
        }
        case 46: {
          addSpecialAttribute("class", AttributeAction.Element);
          break;
        }
        case 35: {
          addSpecialAttribute("id", AttributeAction.Equals);
          break;
        }
        case 91: {
          stripWhitespace(1);
          let name;
          let namespace = null;
          if (selector.charCodeAt(selectorIndex) === 124) {
            name = getName2(1);
          } else if (selector.startsWith("*|", selectorIndex)) {
            namespace = "*";
            name = getName2(2);
          } else {
            name = getName2(0);
            if (selector.charCodeAt(selectorIndex) === 124 && selector.charCodeAt(selectorIndex + 1) !== 61) {
              namespace = name;
              name = getName2(1);
            }
          }
          stripWhitespace(0);
          let action = AttributeAction.Exists;
          const possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));
          if (possibleAction) {
            action = possibleAction;
            if (selector.charCodeAt(selectorIndex + 1) !== 61) {
              throw new Error("Expected `=`");
            }
            stripWhitespace(2);
          } else if (selector.charCodeAt(selectorIndex) === 61) {
            action = AttributeAction.Equals;
            stripWhitespace(1);
          }
          let value15 = "";
          let ignoreCase = null;
          if (action !== "exists") {
            if (isQuote(selector.charCodeAt(selectorIndex))) {
              const quote = selector.charCodeAt(selectorIndex);
              let sectionEnd = selectorIndex + 1;
              while (sectionEnd < selector.length && (selector.charCodeAt(sectionEnd) !== quote || isEscaped(sectionEnd))) {
                sectionEnd += 1;
              }
              if (selector.charCodeAt(sectionEnd) !== quote) {
                throw new Error("Attribute value didn't end");
              }
              value15 = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));
              selectorIndex = sectionEnd + 1;
            } else {
              const valueStart = selectorIndex;
              while (selectorIndex < selector.length && (!isWhitespace(selector.charCodeAt(selectorIndex)) && selector.charCodeAt(selectorIndex) !== 93 || isEscaped(selectorIndex))) {
                selectorIndex += 1;
              }
              value15 = unescapeCSS(selector.slice(valueStart, selectorIndex));
            }
            stripWhitespace(0);
            const forceIgnore = selector.charCodeAt(selectorIndex) | 32;
            if (forceIgnore === 115) {
              ignoreCase = false;
              stripWhitespace(1);
            } else if (forceIgnore === 105) {
              ignoreCase = true;
              stripWhitespace(1);
            }
          }
          if (selector.charCodeAt(selectorIndex) !== 93) {
            throw new Error("Attribute selector didn't terminate");
          }
          selectorIndex += 1;
          const attributeSelector = {
            type: SelectorType.Attribute,
            name,
            action,
            value: value15,
            namespace,
            ignoreCase
          };
          tokens.push(attributeSelector);
          break;
        }
        case 58: {
          if (selector.charCodeAt(selectorIndex + 1) === 58) {
            tokens.push({
              type: SelectorType.PseudoElement,
              name: getName2(2).toLowerCase(),
              data: selector.charCodeAt(selectorIndex) === 40 ? readValueWithParenthesis() : null
            });
            continue;
          }
          const name = getName2(1).toLowerCase();
          let data2 = null;
          if (selector.charCodeAt(selectorIndex) === 40) {
            if (unpackPseudos.has(name)) {
              if (isQuote(selector.charCodeAt(selectorIndex + 1))) {
                throw new Error(`Pseudo-selector ${name} cannot be quoted`);
              }
              data2 = [];
              selectorIndex = parseSelector(data2, selector, selectorIndex + 1);
              if (selector.charCodeAt(selectorIndex) !== 41) {
                throw new Error(`Missing closing parenthesis in :${name} (${selector})`);
              }
              selectorIndex += 1;
            } else {
              data2 = readValueWithParenthesis();
              if (stripQuotesFromPseudos.has(name)) {
                const quot = data2.charCodeAt(0);
                if (quot === data2.charCodeAt(data2.length - 1) && isQuote(quot)) {
                  data2 = data2.slice(1, -1);
                }
              }
              data2 = unescapeCSS(data2);
            }
          }
          tokens.push({ type: SelectorType.Pseudo, name, data: data2 });
          break;
        }
        case 44: {
          finalizeSubselector();
          tokens = [];
          stripWhitespace(1);
          break;
        }
        default: {
          if (selector.startsWith("/*", selectorIndex)) {
            const endIndex = selector.indexOf("*/", selectorIndex + 2);
            if (endIndex < 0) {
              throw new Error("Comment was not terminated");
            }
            selectorIndex = endIndex + 2;
            if (tokens.length === 0) {
              stripWhitespace(0);
            }
            break;
          }
          let namespace = null;
          let name;
          if (firstChar === 42) {
            selectorIndex += 1;
            name = "*";
          } else if (firstChar === 124) {
            name = "";
            if (selector.charCodeAt(selectorIndex + 1) === 124) {
              addTraversal(SelectorType.ColumnCombinator);
              stripWhitespace(2);
              break;
            }
          } else if (reName.test(selector.slice(selectorIndex))) {
            name = getName2(0);
          } else {
            break loop;
          }
          if (selector.charCodeAt(selectorIndex) === 124 && selector.charCodeAt(selectorIndex + 1) !== 124) {
            namespace = name;
            if (selector.charCodeAt(selectorIndex + 1) === 42) {
              name = "*";
              selectorIndex += 2;
            } else {
              name = getName2(1);
            }
          }
          tokens.push(name === "*" ? { type: SelectorType.Universal, namespace } : { type: SelectorType.Tag, name, namespace });
        }
      }
    }
  finalizeSubselector();
  return selectorIndex;
}
var reName = /^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/;
var reEscape = /\\([\da-f]{1,6}\s?|(\s)|.)/gi;
var actionTypes = new Map([
  [126, AttributeAction.Element],
  [94, AttributeAction.Start],
  [36, AttributeAction.End],
  [42, AttributeAction.Any],
  [33, AttributeAction.Not],
  [124, AttributeAction.Hyphen]
]);
var unpackPseudos = new Set([
  "has",
  "not",
  "matches",
  "is",
  "where",
  "host",
  "host-context"
]);
var stripQuotesFromPseudos = new Set(["contains", "icontains"]);
// node_modules/css-select/lib/esm/index.js
var import_boolbase6 = __toESM(require_boolbase(), 1);

// node_modules/css-select/lib/esm/compile.js
var import_boolbase5 = __toESM(require_boolbase(), 1);

// node_modules/css-select/lib/esm/sort.js
function isTraversal2(token) {
  return !procedure.has(token.type);
}
function getProcedure(token) {
  var _a2, _b;
  let proc = (_a2 = procedure.get(token.type)) !== null && _a2 !== undefined ? _a2 : -1;
  if (token.type === SelectorType.Attribute) {
    proc = (_b = attributes.get(token.action)) !== null && _b !== undefined ? _b : 4;
    if (token.action === AttributeAction.Equals && token.name === "id") {
      proc = 9;
    }
    if (token.ignoreCase) {
      proc >>= 1;
    }
  } else if (token.type === SelectorType.Pseudo) {
    if (!token.data) {
      proc = 3;
    } else if (token.name === "has" || token.name === "contains") {
      proc = 0;
    } else if (Array.isArray(token.data)) {
      proc = Math.min(...token.data.map((d3) => Math.min(...d3.map(getProcedure))));
      if (proc < 0) {
        proc = 0;
      }
    } else {
      proc = 2;
    }
  }
  return proc;
}
var procedure = new Map([
  [SelectorType.Universal, 50],
  [SelectorType.Tag, 30],
  [SelectorType.Attribute, 1],
  [SelectorType.Pseudo, 0]
]);
var attributes = new Map([
  [AttributeAction.Exists, 10],
  [AttributeAction.Equals, 8],
  [AttributeAction.Not, 7],
  [AttributeAction.Start, 6],
  [AttributeAction.End, 6],
  [AttributeAction.Any, 5]
]);
function sortByProcedure(arr) {
  const procs = arr.map(getProcedure);
  for (let i3 = 1;i3 < arr.length; i3++) {
    const procNew = procs[i3];
    if (procNew < 0)
      continue;
    for (let j = i3 - 1;j >= 0 && procNew < procs[j]; j--) {
      const token = arr[j + 1];
      arr[j + 1] = arr[j];
      arr[j] = token;
      procs[j + 1] = procs[j];
      procs[j] = procNew;
    }
  }
}

// node_modules/css-select/lib/esm/attributes.js
var import_boolbase = __toESM(require_boolbase(), 1);
function escapeRegex(value15) {
  return value15.replace(reChars, "\\$&");
}
function shouldIgnoreCase(selector, options2) {
  return typeof selector.ignoreCase === "boolean" ? selector.ignoreCase : selector.ignoreCase === "quirks" ? !!options2.quirksMode : !options2.xmlMode && caseInsensitiveAttributes.has(selector.name);
}
var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;
var caseInsensitiveAttributes = new Set([
  "accept",
  "accept-charset",
  "align",
  "alink",
  "axis",
  "bgcolor",
  "charset",
  "checked",
  "clear",
  "codetype",
  "color",
  "compact",
  "declare",
  "defer",
  "dir",
  "direction",
  "disabled",
  "enctype",
  "face",
  "frame",
  "hreflang",
  "http-equiv",
  "lang",
  "language",
  "link",
  "media",
  "method",
  "multiple",
  "nohref",
  "noresize",
  "noshade",
  "nowrap",
  "readonly",
  "rel",
  "rev",
  "rules",
  "scope",
  "scrolling",
  "selected",
  "shape",
  "target",
  "text",
  "type",
  "valign",
  "valuetype",
  "vlink"
]);
var attributeRules = {
  equals(next, data2, options2) {
    const { adapter } = options2;
    const { name } = data2;
    let { value: value15 } = data2;
    if (shouldIgnoreCase(data2, options2)) {
      value15 = value15.toLowerCase();
      return (elem) => {
        const attr2 = adapter.getAttributeValue(elem, name);
        return attr2 != null && attr2.length === value15.length && attr2.toLowerCase() === value15 && next(elem);
      };
    }
    return (elem) => adapter.getAttributeValue(elem, name) === value15 && next(elem);
  },
  hyphen(next, data2, options2) {
    const { adapter } = options2;
    const { name } = data2;
    let { value: value15 } = data2;
    const len = value15.length;
    if (shouldIgnoreCase(data2, options2)) {
      value15 = value15.toLowerCase();
      return function hyphenIC(elem) {
        const attr2 = adapter.getAttributeValue(elem, name);
        return attr2 != null && (attr2.length === len || attr2.charAt(len) === "-") && attr2.substr(0, len).toLowerCase() === value15 && next(elem);
      };
    }
    return function hyphen(elem) {
      const attr2 = adapter.getAttributeValue(elem, name);
      return attr2 != null && (attr2.length === len || attr2.charAt(len) === "-") && attr2.substr(0, len) === value15 && next(elem);
    };
  },
  element(next, data2, options2) {
    const { adapter } = options2;
    const { name, value: value15 } = data2;
    if (/\s/.test(value15)) {
      return import_boolbase.default.falseFunc;
    }
    const regex = new RegExp(`(?:^|\\s)${escapeRegex(value15)}(?:\$|\\s)`, shouldIgnoreCase(data2, options2) ? "i" : "");
    return function element(elem) {
      const attr2 = adapter.getAttributeValue(elem, name);
      return attr2 != null && attr2.length >= value15.length && regex.test(attr2) && next(elem);
    };
  },
  exists(next, { name }, { adapter }) {
    return (elem) => adapter.hasAttrib(elem, name) && next(elem);
  },
  start(next, data2, options2) {
    const { adapter } = options2;
    const { name } = data2;
    let { value: value15 } = data2;
    const len = value15.length;
    if (len === 0) {
      return import_boolbase.default.falseFunc;
    }
    if (shouldIgnoreCase(data2, options2)) {
      value15 = value15.toLowerCase();
      return (elem) => {
        const attr2 = adapter.getAttributeValue(elem, name);
        return attr2 != null && attr2.length >= len && attr2.substr(0, len).toLowerCase() === value15 && next(elem);
      };
    }
    return (elem) => {
      var _a2;
      return !!((_a2 = adapter.getAttributeValue(elem, name)) === null || _a2 === undefined ? undefined : _a2.startsWith(value15)) && next(elem);
    };
  },
  end(next, data2, options2) {
    const { adapter } = options2;
    const { name } = data2;
    let { value: value15 } = data2;
    const len = -value15.length;
    if (len === 0) {
      return import_boolbase.default.falseFunc;
    }
    if (shouldIgnoreCase(data2, options2)) {
      value15 = value15.toLowerCase();
      return (elem) => {
        var _a2;
        return ((_a2 = adapter.getAttributeValue(elem, name)) === null || _a2 === undefined ? undefined : _a2.substr(len).toLowerCase()) === value15 && next(elem);
      };
    }
    return (elem) => {
      var _a2;
      return !!((_a2 = adapter.getAttributeValue(elem, name)) === null || _a2 === undefined ? undefined : _a2.endsWith(value15)) && next(elem);
    };
  },
  any(next, data2, options2) {
    const { adapter } = options2;
    const { name, value: value15 } = data2;
    if (value15 === "") {
      return import_boolbase.default.falseFunc;
    }
    if (shouldIgnoreCase(data2, options2)) {
      const regex = new RegExp(escapeRegex(value15), "i");
      return function anyIC(elem) {
        const attr2 = adapter.getAttributeValue(elem, name);
        return attr2 != null && attr2.length >= value15.length && regex.test(attr2) && next(elem);
      };
    }
    return (elem) => {
      var _a2;
      return !!((_a2 = adapter.getAttributeValue(elem, name)) === null || _a2 === undefined ? undefined : _a2.includes(value15)) && next(elem);
    };
  },
  not(next, data2, options2) {
    const { adapter } = options2;
    const { name } = data2;
    let { value: value15 } = data2;
    if (value15 === "") {
      return (elem) => !!adapter.getAttributeValue(elem, name) && next(elem);
    } else if (shouldIgnoreCase(data2, options2)) {
      value15 = value15.toLowerCase();
      return (elem) => {
        const attr2 = adapter.getAttributeValue(elem, name);
        return (attr2 == null || attr2.length !== value15.length || attr2.toLowerCase() !== value15) && next(elem);
      };
    }
    return (elem) => adapter.getAttributeValue(elem, name) !== value15 && next(elem);
  }
};

// node_modules/nth-check/lib/esm/parse.js
function parse6(formula) {
  formula = formula.trim().toLowerCase();
  if (formula === "even") {
    return [2, 0];
  } else if (formula === "odd") {
    return [2, 1];
  }
  let idx = 0;
  let a = 0;
  let sign = readSign();
  let number8 = readNumber();
  if (idx < formula.length && formula.charAt(idx) === "n") {
    idx++;
    a = sign * (number8 !== null && number8 !== undefined ? number8 : 1);
    skipWhitespace();
    if (idx < formula.length) {
      sign = readSign();
      skipWhitespace();
      number8 = readNumber();
    } else {
      sign = number8 = 0;
    }
  }
  if (number8 === null || idx < formula.length) {
    throw new Error(`n-th rule couldn't be parsed ('${formula}')`);
  }
  return [a, sign * number8];
  function readSign() {
    if (formula.charAt(idx) === "-") {
      idx++;
      return -1;
    }
    if (formula.charAt(idx) === "+") {
      idx++;
    }
    return 1;
  }
  function readNumber() {
    const start = idx;
    let value15 = 0;
    while (idx < formula.length && formula.charCodeAt(idx) >= ZERO && formula.charCodeAt(idx) <= NINE) {
      value15 = value15 * 10 + (formula.charCodeAt(idx) - ZERO);
      idx++;
    }
    return idx === start ? null : value15;
  }
  function skipWhitespace() {
    while (idx < formula.length && whitespace.has(formula.charCodeAt(idx))) {
      idx++;
    }
  }
}
var whitespace = new Set([9, 10, 12, 13, 32]);
var ZERO = "0".charCodeAt(0);
var NINE = "9".charCodeAt(0);

// node_modules/nth-check/lib/esm/compile.js
var import_boolbase2 = __toESM(require_boolbase(), 1);
function compile(parsed) {
  const a = parsed[0];
  const b = parsed[1] - 1;
  if (b < 0 && a <= 0)
    return import_boolbase2.default.falseFunc;
  if (a === -1)
    return (index) => index <= b;
  if (a === 0)
    return (index) => index === b;
  if (a === 1)
    return b < 0 ? import_boolbase2.default.trueFunc : (index) => index >= b;
  const absA = Math.abs(a);
  const bMod = (b % absA + absA) % absA;
  return a > 1 ? (index) => index >= b && index % absA === bMod : (index) => index <= b && index % absA === bMod;
}

// node_modules/nth-check/lib/esm/index.js
function nthCheck(formula) {
  return compile(parse6(formula));
}

// node_modules/css-select/lib/esm/pseudo-selectors/filters.js
var import_boolbase3 = __toESM(require_boolbase(), 1);
function getChildFunc(next, adapter) {
  return (elem) => {
    const parent = adapter.getParent(elem);
    return parent != null && adapter.isTag(parent) && next(elem);
  };
}
function dynamicStatePseudo(name) {
  return function dynamicPseudo(next, _rule, { adapter }) {
    const func = adapter[name];
    if (typeof func !== "function") {
      return import_boolbase3.default.falseFunc;
    }
    return function active(elem) {
      return func(elem) && next(elem);
    };
  };
}
var filters = {
  contains(next, text2, { adapter }) {
    return function contains(elem) {
      return next(elem) && adapter.getText(elem).includes(text2);
    };
  },
  icontains(next, text2, { adapter }) {
    const itext = text2.toLowerCase();
    return function icontains(elem) {
      return next(elem) && adapter.getText(elem).toLowerCase().includes(itext);
    };
  },
  "nth-child"(next, rule, { adapter, equals }) {
    const func = nthCheck(rule);
    if (func === import_boolbase3.default.falseFunc)
      return import_boolbase3.default.falseFunc;
    if (func === import_boolbase3.default.trueFunc)
      return getChildFunc(next, adapter);
    return function nthChild(elem) {
      const siblings = adapter.getSiblings(elem);
      let pos = 0;
      for (let i3 = 0;i3 < siblings.length; i3++) {
        if (equals(elem, siblings[i3]))
          break;
        if (adapter.isTag(siblings[i3])) {
          pos++;
        }
      }
      return func(pos) && next(elem);
    };
  },
  "nth-last-child"(next, rule, { adapter, equals }) {
    const func = nthCheck(rule);
    if (func === import_boolbase3.default.falseFunc)
      return import_boolbase3.default.falseFunc;
    if (func === import_boolbase3.default.trueFunc)
      return getChildFunc(next, adapter);
    return function nthLastChild(elem) {
      const siblings = adapter.getSiblings(elem);
      let pos = 0;
      for (let i3 = siblings.length - 1;i3 >= 0; i3--) {
        if (equals(elem, siblings[i3]))
          break;
        if (adapter.isTag(siblings[i3])) {
          pos++;
        }
      }
      return func(pos) && next(elem);
    };
  },
  "nth-of-type"(next, rule, { adapter, equals }) {
    const func = nthCheck(rule);
    if (func === import_boolbase3.default.falseFunc)
      return import_boolbase3.default.falseFunc;
    if (func === import_boolbase3.default.trueFunc)
      return getChildFunc(next, adapter);
    return function nthOfType(elem) {
      const siblings = adapter.getSiblings(elem);
      let pos = 0;
      for (let i3 = 0;i3 < siblings.length; i3++) {
        const currentSibling = siblings[i3];
        if (equals(elem, currentSibling))
          break;
        if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === adapter.getName(elem)) {
          pos++;
        }
      }
      return func(pos) && next(elem);
    };
  },
  "nth-last-of-type"(next, rule, { adapter, equals }) {
    const func = nthCheck(rule);
    if (func === import_boolbase3.default.falseFunc)
      return import_boolbase3.default.falseFunc;
    if (func === import_boolbase3.default.trueFunc)
      return getChildFunc(next, adapter);
    return function nthLastOfType(elem) {
      const siblings = adapter.getSiblings(elem);
      let pos = 0;
      for (let i3 = siblings.length - 1;i3 >= 0; i3--) {
        const currentSibling = siblings[i3];
        if (equals(elem, currentSibling))
          break;
        if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === adapter.getName(elem)) {
          pos++;
        }
      }
      return func(pos) && next(elem);
    };
  },
  root(next, _rule, { adapter }) {
    return (elem) => {
      const parent = adapter.getParent(elem);
      return (parent == null || !adapter.isTag(parent)) && next(elem);
    };
  },
  scope(next, rule, options2, context) {
    const { equals } = options2;
    if (!context || context.length === 0) {
      return filters["root"](next, rule, options2);
    }
    if (context.length === 1) {
      return (elem) => equals(context[0], elem) && next(elem);
    }
    return (elem) => context.includes(elem) && next(elem);
  },
  hover: dynamicStatePseudo("isHovered"),
  visited: dynamicStatePseudo("isVisited"),
  active: dynamicStatePseudo("isActive")
};

// node_modules/css-select/lib/esm/pseudo-selectors/pseudos.js
function verifyPseudoArgs(func, name, subselect, argIndex) {
  if (subselect === null) {
    if (func.length > argIndex) {
      throw new Error(`Pseudo-class :${name} requires an argument`);
    }
  } else if (func.length === argIndex) {
    throw new Error(`Pseudo-class :${name} doesn't have any arguments`);
  }
}
var pseudos = {
  empty(elem, { adapter }) {
    return !adapter.getChildren(elem).some((elem2) => adapter.isTag(elem2) || adapter.getText(elem2) !== "");
  },
  "first-child"(elem, { adapter, equals }) {
    if (adapter.prevElementSibling) {
      return adapter.prevElementSibling(elem) == null;
    }
    const firstChild = adapter.getSiblings(elem).find((elem2) => adapter.isTag(elem2));
    return firstChild != null && equals(elem, firstChild);
  },
  "last-child"(elem, { adapter, equals }) {
    const siblings = adapter.getSiblings(elem);
    for (let i3 = siblings.length - 1;i3 >= 0; i3--) {
      if (equals(elem, siblings[i3]))
        return true;
      if (adapter.isTag(siblings[i3]))
        break;
    }
    return false;
  },
  "first-of-type"(elem, { adapter, equals }) {
    const siblings = adapter.getSiblings(elem);
    const elemName = adapter.getName(elem);
    for (let i3 = 0;i3 < siblings.length; i3++) {
      const currentSibling = siblings[i3];
      if (equals(elem, currentSibling))
        return true;
      if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === elemName) {
        break;
      }
    }
    return false;
  },
  "last-of-type"(elem, { adapter, equals }) {
    const siblings = adapter.getSiblings(elem);
    const elemName = adapter.getName(elem);
    for (let i3 = siblings.length - 1;i3 >= 0; i3--) {
      const currentSibling = siblings[i3];
      if (equals(elem, currentSibling))
        return true;
      if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === elemName) {
        break;
      }
    }
    return false;
  },
  "only-of-type"(elem, { adapter, equals }) {
    const elemName = adapter.getName(elem);
    return adapter.getSiblings(elem).every((sibling) => equals(elem, sibling) || !adapter.isTag(sibling) || adapter.getName(sibling) !== elemName);
  },
  "only-child"(elem, { adapter, equals }) {
    return adapter.getSiblings(elem).every((sibling) => equals(elem, sibling) || !adapter.isTag(sibling));
  }
};

// node_modules/css-select/lib/esm/pseudo-selectors/aliases.js
var aliases = {
  "any-link": ":is(a, area, link)[href]",
  link: ":any-link:not(:visited)",
  disabled: `:is(
        :is(button, input, select, textarea, optgroup, option)[disabled],
        optgroup[disabled] > option,
        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)
    )`,
  enabled: ":not(:disabled)",
  checked: ":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",
  required: ":is(input, select, textarea)[required]",
  optional: ":is(input, select, textarea):not([required])",
  selected: "option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",
  checkbox: "[type=checkbox]",
  file: "[type=file]",
  password: "[type=password]",
  radio: "[type=radio]",
  reset: "[type=reset]",
  image: "[type=image]",
  submit: "[type=submit]",
  parent: ":not(:empty)",
  header: ":is(h1, h2, h3, h4, h5, h6)",
  button: ":is(button, input[type=button])",
  input: ":is(input, textarea, select, button)",
  text: "input:is(:not([type!='']), [type=text])"
};

// node_modules/css-select/lib/esm/pseudo-selectors/subselects.js
var import_boolbase4 = __toESM(require_boolbase(), 1);
function ensureIsTag(next, adapter) {
  if (next === import_boolbase4.default.falseFunc)
    return import_boolbase4.default.falseFunc;
  return (elem) => adapter.isTag(elem) && next(elem);
}
function getNextSiblings(elem, adapter) {
  const siblings = adapter.getSiblings(elem);
  if (siblings.length <= 1)
    return [];
  const elemIndex = siblings.indexOf(elem);
  if (elemIndex < 0 || elemIndex === siblings.length - 1)
    return [];
  return siblings.slice(elemIndex + 1).filter(adapter.isTag);
}
function copyOptions(options2) {
  return {
    xmlMode: !!options2.xmlMode,
    lowerCaseAttributeNames: !!options2.lowerCaseAttributeNames,
    lowerCaseTags: !!options2.lowerCaseTags,
    quirksMode: !!options2.quirksMode,
    cacheResults: !!options2.cacheResults,
    pseudos: options2.pseudos,
    adapter: options2.adapter,
    equals: options2.equals
  };
}
var PLACEHOLDER_ELEMENT = {};
var is = (next, token, options2, context, compileToken) => {
  const func = compileToken(token, copyOptions(options2), context);
  return func === import_boolbase4.default.trueFunc ? next : func === import_boolbase4.default.falseFunc ? import_boolbase4.default.falseFunc : (elem) => func(elem) && next(elem);
};
var subselects = {
  is,
  matches: is,
  where: is,
  not(next, token, options2, context, compileToken) {
    const func = compileToken(token, copyOptions(options2), context);
    return func === import_boolbase4.default.falseFunc ? next : func === import_boolbase4.default.trueFunc ? import_boolbase4.default.falseFunc : (elem) => !func(elem) && next(elem);
  },
  has(next, subselect, options2, _context, compileToken) {
    const { adapter } = options2;
    const opts = copyOptions(options2);
    opts.relativeSelector = true;
    const context = subselect.some((s3) => s3.some(isTraversal2)) ? [PLACEHOLDER_ELEMENT] : undefined;
    const compiled = compileToken(subselect, opts, context);
    if (compiled === import_boolbase4.default.falseFunc)
      return import_boolbase4.default.falseFunc;
    const hasElement = ensureIsTag(compiled, adapter);
    if (context && compiled !== import_boolbase4.default.trueFunc) {
      const { shouldTestNextSiblings = false } = compiled;
      return (elem) => {
        if (!next(elem))
          return false;
        context[0] = elem;
        const childs = adapter.getChildren(elem);
        const nextElements = shouldTestNextSiblings ? [...childs, ...getNextSiblings(elem, adapter)] : childs;
        return adapter.existsOne(hasElement, nextElements);
      };
    }
    return (elem) => next(elem) && adapter.existsOne(hasElement, adapter.getChildren(elem));
  }
};

// node_modules/css-select/lib/esm/pseudo-selectors/index.js
function compilePseudoSelector(next, selector, options2, context, compileToken) {
  var _a2;
  const { name, data: data2 } = selector;
  if (Array.isArray(data2)) {
    if (!(name in subselects)) {
      throw new Error(`Unknown pseudo-class :${name}(${data2})`);
    }
    return subselects[name](next, data2, options2, context, compileToken);
  }
  const userPseudo = (_a2 = options2.pseudos) === null || _a2 === undefined ? undefined : _a2[name];
  const stringPseudo = typeof userPseudo === "string" ? userPseudo : aliases[name];
  if (typeof stringPseudo === "string") {
    if (data2 != null) {
      throw new Error(`Pseudo ${name} doesn't have any arguments`);
    }
    const alias = parse5(stringPseudo);
    return subselects["is"](next, alias, options2, context, compileToken);
  }
  if (typeof userPseudo === "function") {
    verifyPseudoArgs(userPseudo, name, data2, 1);
    return (elem) => userPseudo(elem, data2) && next(elem);
  }
  if (name in filters) {
    return filters[name](next, data2, options2, context);
  }
  if (name in pseudos) {
    const pseudo = pseudos[name];
    verifyPseudoArgs(pseudo, name, data2, 2);
    return (elem) => pseudo(elem, options2, data2) && next(elem);
  }
  throw new Error(`Unknown pseudo-class :${name}`);
}

// node_modules/css-select/lib/esm/general.js
function getElementParent(node3, adapter) {
  const parent = adapter.getParent(node3);
  if (parent && adapter.isTag(parent)) {
    return parent;
  }
  return null;
}
function compileGeneralSelector(next, selector, options2, context, compileToken) {
  const { adapter, equals } = options2;
  switch (selector.type) {
    case SelectorType.PseudoElement: {
      throw new Error("Pseudo-elements are not supported by css-select");
    }
    case SelectorType.ColumnCombinator: {
      throw new Error("Column combinators are not yet supported by css-select");
    }
    case SelectorType.Attribute: {
      if (selector.namespace != null) {
        throw new Error("Namespaced attributes are not yet supported by css-select");
      }
      if (!options2.xmlMode || options2.lowerCaseAttributeNames) {
        selector.name = selector.name.toLowerCase();
      }
      return attributeRules[selector.action](next, selector, options2);
    }
    case SelectorType.Pseudo: {
      return compilePseudoSelector(next, selector, options2, context, compileToken);
    }
    case SelectorType.Tag: {
      if (selector.namespace != null) {
        throw new Error("Namespaced tag names are not yet supported by css-select");
      }
      let { name } = selector;
      if (!options2.xmlMode || options2.lowerCaseTags) {
        name = name.toLowerCase();
      }
      return function tag(elem) {
        return adapter.getName(elem) === name && next(elem);
      };
    }
    case SelectorType.Descendant: {
      if (options2.cacheResults === false || typeof WeakSet === "undefined") {
        return function descendant(elem) {
          let current = elem;
          while (current = getElementParent(current, adapter)) {
            if (next(current)) {
              return true;
            }
          }
          return false;
        };
      }
      const isFalseCache = new WeakSet;
      return function cachedDescendant(elem) {
        let current = elem;
        while (current = getElementParent(current, adapter)) {
          if (!isFalseCache.has(current)) {
            if (adapter.isTag(current) && next(current)) {
              return true;
            }
            isFalseCache.add(current);
          }
        }
        return false;
      };
    }
    case "_flexibleDescendant": {
      return function flexibleDescendant(elem) {
        let current = elem;
        do {
          if (next(current))
            return true;
        } while (current = getElementParent(current, adapter));
        return false;
      };
    }
    case SelectorType.Parent: {
      return function parent(elem) {
        return adapter.getChildren(elem).some((elem2) => adapter.isTag(elem2) && next(elem2));
      };
    }
    case SelectorType.Child: {
      return function child(elem) {
        const parent = adapter.getParent(elem);
        return parent != null && adapter.isTag(parent) && next(parent);
      };
    }
    case SelectorType.Sibling: {
      return function sibling(elem) {
        const siblings = adapter.getSiblings(elem);
        for (let i3 = 0;i3 < siblings.length; i3++) {
          const currentSibling = siblings[i3];
          if (equals(elem, currentSibling))
            break;
          if (adapter.isTag(currentSibling) && next(currentSibling)) {
            return true;
          }
        }
        return false;
      };
    }
    case SelectorType.Adjacent: {
      if (adapter.prevElementSibling) {
        return function adjacent(elem) {
          const previous = adapter.prevElementSibling(elem);
          return previous != null && next(previous);
        };
      }
      return function adjacent(elem) {
        const siblings = adapter.getSiblings(elem);
        let lastElement;
        for (let i3 = 0;i3 < siblings.length; i3++) {
          const currentSibling = siblings[i3];
          if (equals(elem, currentSibling))
            break;
          if (adapter.isTag(currentSibling)) {
            lastElement = currentSibling;
          }
        }
        return !!lastElement && next(lastElement);
      };
    }
    case SelectorType.Universal: {
      if (selector.namespace != null && selector.namespace !== "*") {
        throw new Error("Namespaced universal selectors are not yet supported by css-select");
      }
      return next;
    }
  }
}

// node_modules/css-select/lib/esm/compile.js
function compile3(selector, options2, context) {
  const next = compileUnsafe(selector, options2, context);
  return ensureIsTag(next, options2.adapter);
}
function compileUnsafe(selector, options2, context) {
  const token = typeof selector === "string" ? parse5(selector) : selector;
  return compileToken(token, options2, context);
}
function includesScopePseudo(t3) {
  return t3.type === SelectorType.Pseudo && (t3.name === "scope" || Array.isArray(t3.data) && t3.data.some((data2) => data2.some(includesScopePseudo)));
}
function absolutize(token, { adapter }, context) {
  const hasContext = !!(context === null || context === undefined ? undefined : context.every((e) => {
    const parent = adapter.isTag(e) && adapter.getParent(e);
    return e === PLACEHOLDER_ELEMENT || parent && adapter.isTag(parent);
  }));
  for (const t3 of token) {
    if (t3.length > 0 && isTraversal2(t3[0]) && t3[0].type !== SelectorType.Descendant) {
    } else if (hasContext && !t3.some(includesScopePseudo)) {
      t3.unshift(DESCENDANT_TOKEN);
    } else {
      continue;
    }
    t3.unshift(SCOPE_TOKEN);
  }
}
function compileToken(token, options2, context) {
  var _a2;
  token.forEach(sortByProcedure);
  context = (_a2 = options2.context) !== null && _a2 !== undefined ? _a2 : context;
  const isArrayContext = Array.isArray(context);
  const finalContext = context && (Array.isArray(context) ? context : [context]);
  if (options2.relativeSelector !== false) {
    absolutize(token, options2, finalContext);
  } else if (token.some((t3) => t3.length > 0 && isTraversal2(t3[0]))) {
    throw new Error("Relative selectors are not allowed when the `relativeSelector` option is disabled");
  }
  let shouldTestNextSiblings = false;
  const query = token.map((rules) => {
    if (rules.length >= 2) {
      const [first2, second] = rules;
      if (first2.type !== SelectorType.Pseudo || first2.name !== "scope") {
      } else if (isArrayContext && second.type === SelectorType.Descendant) {
        rules[1] = FLEXIBLE_DESCENDANT_TOKEN;
      } else if (second.type === SelectorType.Adjacent || second.type === SelectorType.Sibling) {
        shouldTestNextSiblings = true;
      }
    }
    return compileRules(rules, options2, finalContext);
  }).reduce(reduceRules, import_boolbase5.default.falseFunc);
  query.shouldTestNextSiblings = shouldTestNextSiblings;
  return query;
}
function compileRules(rules, options2, context) {
  var _a2;
  return rules.reduce((previous, rule) => previous === import_boolbase5.default.falseFunc ? import_boolbase5.default.falseFunc : compileGeneralSelector(previous, rule, options2, context, compileToken), (_a2 = options2.rootFunc) !== null && _a2 !== undefined ? _a2 : import_boolbase5.default.trueFunc);
}
function reduceRules(a, b) {
  if (b === import_boolbase5.default.falseFunc || a === import_boolbase5.default.trueFunc) {
    return a;
  }
  if (a === import_boolbase5.default.falseFunc || b === import_boolbase5.default.trueFunc) {
    return b;
  }
  return function combine(elem) {
    return a(elem) || b(elem);
  };
}
var DESCENDANT_TOKEN = { type: SelectorType.Descendant };
var FLEXIBLE_DESCENDANT_TOKEN = {
  type: "_flexibleDescendant"
};
var SCOPE_TOKEN = {
  type: SelectorType.Pseudo,
  name: "scope",
  data: null
};

// node_modules/css-select/lib/esm/index.js
function convertOptionFormats(options2) {
  var _a2, _b, _c, _d;
  const opts = options2 !== null && options2 !== undefined ? options2 : defaultOptions;
  (_a2 = opts.adapter) !== null && _a2 !== undefined || (opts.adapter = exports_esm2);
  (_b = opts.equals) !== null && _b !== undefined || (opts.equals = (_d = (_c = opts.adapter) === null || _c === undefined ? undefined : _c.equals) !== null && _d !== undefined ? _d : defaultEquals);
  return opts;
}
function wrapCompile(func) {
  return function addAdapter(selector, options2, context) {
    const opts = convertOptionFormats(options2);
    return func(selector, opts, context);
  };
}
function getSelectorFunc(searchFunc) {
  return function select(query, elements, options2) {
    const opts = convertOptionFormats(options2);
    if (typeof query !== "function") {
      query = compileUnsafe(query, opts, elements);
    }
    const filteredElements = prepareContext(elements, opts.adapter, query.shouldTestNextSiblings);
    return searchFunc(query, filteredElements, opts);
  };
}
function prepareContext(elems, adapter, shouldTestNextSiblings = false) {
  if (shouldTestNextSiblings) {
    elems = appendNextSiblings(elems, adapter);
  }
  return Array.isArray(elems) ? adapter.removeSubsets(elems) : adapter.getChildren(elems);
}
function appendNextSiblings(elem, adapter) {
  const elems = Array.isArray(elem) ? elem.slice(0) : [elem];
  const elemsLength = elems.length;
  for (let i3 = 0;i3 < elemsLength; i3++) {
    const nextSiblings = getNextSiblings(elems[i3], adapter);
    elems.push(...nextSiblings);
  }
  return elems;
}
var defaultEquals = (a, b) => a === b;
var defaultOptions = {
  adapter: exports_esm2,
  equals: defaultEquals
};
var compile5 = wrapCompile(compile3);
var _compileUnsafe = wrapCompile(compileUnsafe);
var _compileToken = wrapCompile(compileToken);
var selectAll = getSelectorFunc((query, elems, options2) => query === import_boolbase6.default.falseFunc || !elems || elems.length === 0 ? [] : options2.adapter.findAll(query, elems));
var selectOne = getSelectorFunc((query, elems, options2) => query === import_boolbase6.default.falseFunc || !elems || elems.length === 0 ? null : options2.adapter.findOne(query, elems));

// node_modules/cheerio-select/lib/esm/index.js
var boolbase7 = __toESM(require_boolbase(), 1);

// node_modules/cheerio-select/lib/esm/positionals.js
function isFilter(s3) {
  if (s3.type !== "pseudo")
    return false;
  if (filterNames.has(s3.name))
    return true;
  if (s3.name === "not" && Array.isArray(s3.data)) {
    return s3.data.some((s4) => s4.some(isFilter));
  }
  return false;
}
function getLimit(filter2, data2, partLimit) {
  const num = data2 != null ? parseInt(data2, 10) : NaN;
  switch (filter2) {
    case "first":
      return 1;
    case "nth":
    case "eq":
      return isFinite(num) ? num >= 0 ? num + 1 : Infinity : 0;
    case "lt":
      return isFinite(num) ? num >= 0 ? Math.min(num, partLimit) : Infinity : 0;
    case "gt":
      return isFinite(num) ? Infinity : 0;
    case "odd":
      return 2 * partLimit;
    case "even":
      return 2 * partLimit - 1;
    case "last":
    case "not":
      return Infinity;
  }
}
var filterNames = new Set([
  "first",
  "last",
  "eq",
  "gt",
  "nth",
  "lt",
  "even",
  "odd"
]);

// node_modules/cheerio-select/lib/esm/helpers.js
function getDocumentRoot(node3) {
  while (node3.parent)
    node3 = node3.parent;
  return node3;
}
function groupSelectors(selectors) {
  const filteredSelectors = [];
  const plainSelectors = [];
  for (const selector of selectors) {
    if (selector.some(isFilter)) {
      filteredSelectors.push(selector);
    } else {
      plainSelectors.push(selector);
    }
  }
  return [plainSelectors, filteredSelectors];
}

// node_modules/cheerio-select/lib/esm/index.js
function is2(element, selector, options2 = {}) {
  return some([element], selector, options2);
}
function some(elements, selector, options2 = {}) {
  if (typeof selector === "function")
    return elements.some(selector);
  const [plain, filtered] = groupSelectors(parse5(selector));
  return plain.length > 0 && elements.some(_compileToken(plain, options2)) || filtered.some((sel) => filterBySelector(sel, elements, options2).length > 0);
}
function filterByPosition(filter2, elems, data2, options2) {
  const num = typeof data2 === "string" ? parseInt(data2, 10) : NaN;
  switch (filter2) {
    case "first":
    case "lt":
      return elems;
    case "last":
      return elems.length > 0 ? [elems[elems.length - 1]] : elems;
    case "nth":
    case "eq":
      return isFinite(num) && Math.abs(num) < elems.length ? [num < 0 ? elems[elems.length + num] : elems[num]] : [];
    case "gt":
      return isFinite(num) ? elems.slice(num + 1) : [];
    case "even":
      return elems.filter((_, i3) => i3 % 2 === 0);
    case "odd":
      return elems.filter((_, i3) => i3 % 2 === 1);
    case "not": {
      const filtered = new Set(filterParsed(data2, elems, options2));
      return elems.filter((e) => !filtered.has(e));
    }
  }
}
function filter2(selector, elements, options2 = {}) {
  return filterParsed(parse5(selector), elements, options2);
}
function filterParsed(selector, elements, options2) {
  if (elements.length === 0)
    return [];
  const [plainSelectors, filteredSelectors] = groupSelectors(selector);
  let found;
  if (plainSelectors.length) {
    const filtered = filterElements(elements, plainSelectors, options2);
    if (filteredSelectors.length === 0) {
      return filtered;
    }
    if (filtered.length) {
      found = new Set(filtered);
    }
  }
  for (let i3 = 0;i3 < filteredSelectors.length && (found === null || found === undefined ? undefined : found.size) !== elements.length; i3++) {
    const filteredSelector = filteredSelectors[i3];
    const missing = found ? elements.filter((e) => isTag2(e) && !found.has(e)) : elements;
    if (missing.length === 0)
      break;
    const filtered = filterBySelector(filteredSelector, elements, options2);
    if (filtered.length) {
      if (!found) {
        if (i3 === filteredSelectors.length - 1) {
          return filtered;
        }
        found = new Set(filtered);
      } else {
        filtered.forEach((el) => found.add(el));
      }
    }
  }
  return typeof found !== "undefined" ? found.size === elements.length ? elements : elements.filter((el) => found.has(el)) : [];
}
function filterBySelector(selector, elements, options2) {
  var _a2;
  if (selector.some(isTraversal)) {
    const root2 = (_a2 = options2.root) !== null && _a2 !== undefined ? _a2 : getDocumentRoot(elements[0]);
    const opts = { ...options2, context: elements, relativeSelector: false };
    selector.push(SCOPE_PSEUDO);
    return findFilterElements(root2, selector, opts, true, elements.length);
  }
  return findFilterElements(elements, selector, options2, false, elements.length);
}
function select(selector, root2, options2 = {}, limit = Infinity) {
  if (typeof selector === "function") {
    return find2(root2, selector);
  }
  const [plain, filtered] = groupSelectors(parse5(selector));
  const results = filtered.map((sel) => findFilterElements(root2, sel, options2, true, limit));
  if (plain.length) {
    results.push(findElements(root2, plain, options2, limit));
  }
  if (results.length === 0) {
    return [];
  }
  if (results.length === 1) {
    return results[0];
  }
  return uniqueSort(results.reduce((a, b) => [...a, ...b]));
}
function findFilterElements(root2, selector, options2, queryForSelector, totalLimit) {
  const filterIndex = selector.findIndex(isFilter);
  const sub = selector.slice(0, filterIndex);
  const filter3 = selector[filterIndex];
  const partLimit = selector.length - 1 === filterIndex ? totalLimit : Infinity;
  const limit = getLimit(filter3.name, filter3.data, partLimit);
  if (limit === 0)
    return [];
  const elemsNoLimit = sub.length === 0 && !Array.isArray(root2) ? getChildren(root2).filter(isTag2) : sub.length === 0 ? (Array.isArray(root2) ? root2 : [root2]).filter(isTag2) : queryForSelector || sub.some(isTraversal) ? findElements(root2, [sub], options2, limit) : filterElements(root2, [sub], options2);
  const elems = elemsNoLimit.slice(0, limit);
  let result = filterByPosition(filter3.name, elems, filter3.data, options2);
  if (result.length === 0 || selector.length === filterIndex + 1) {
    return result;
  }
  const remainingSelector = selector.slice(filterIndex + 1);
  const remainingHasTraversal = remainingSelector.some(isTraversal);
  if (remainingHasTraversal) {
    if (isTraversal(remainingSelector[0])) {
      const { type: type47 } = remainingSelector[0];
      if (type47 === SelectorType.Sibling || type47 === SelectorType.Adjacent) {
        result = prepareContext(result, exports_esm2, true);
      }
      remainingSelector.unshift(UNIVERSAL_SELECTOR);
    }
    options2 = {
      ...options2,
      relativeSelector: false,
      rootFunc: (el) => result.includes(el)
    };
  } else if (options2.rootFunc && options2.rootFunc !== boolbase7.trueFunc) {
    options2 = { ...options2, rootFunc: boolbase7.trueFunc };
  }
  return remainingSelector.some(isFilter) ? findFilterElements(result, remainingSelector, options2, false, totalLimit) : remainingHasTraversal ? findElements(result, [remainingSelector], options2, totalLimit) : filterElements(result, [remainingSelector], options2);
}
function findElements(root2, sel, options2, limit) {
  const query = _compileToken(sel, options2, root2);
  return find2(root2, query, limit);
}
function find2(root2, query, limit = Infinity) {
  const elems = prepareContext(root2, exports_esm2, query.shouldTestNextSiblings);
  return find((node3) => isTag2(node3) && query(node3), elems, true, limit);
}
function filterElements(elements, sel, options2) {
  const els = (Array.isArray(elements) ? elements : [elements]).filter(isTag2);
  if (els.length === 0)
    return els;
  const query = _compileToken(sel, options2);
  return query === boolbase7.trueFunc ? els : els.filter(query);
}
var UNIVERSAL_SELECTOR = {
  type: SelectorType.Universal,
  namespace: null
};
var SCOPE_PSEUDO = {
  type: SelectorType.Pseudo,
  name: "scope",
  data: null
};

// node_modules/cheerio/dist/esm/api/traversing.js
function find3(selectorOrHaystack) {
  if (!selectorOrHaystack) {
    return this._make([]);
  }
  if (typeof selectorOrHaystack !== "string") {
    const haystack = isCheerio(selectorOrHaystack) ? selectorOrHaystack.toArray() : [selectorOrHaystack];
    const context = this.toArray();
    return this._make(haystack.filter((elem) => context.some((node3) => contains(node3, elem))));
  }
  return this._findBySelector(selectorOrHaystack, Number.POSITIVE_INFINITY);
}
function _findBySelector(selector, limit) {
  var _a2;
  const context = this.toArray();
  const elems = reSiblingSelector.test(selector) ? context : this.children().toArray();
  const options2 = {
    context,
    root: (_a2 = this._root) === null || _a2 === undefined ? undefined : _a2[0],
    xmlMode: this.options.xmlMode,
    lowerCaseTags: this.options.lowerCaseTags,
    lowerCaseAttributeNames: this.options.lowerCaseAttributeNames,
    pseudos: this.options.pseudos,
    quirksMode: this.options.quirksMode
  };
  return this._make(select(selector, elems, options2, limit));
}
function _getMatcher(matchMap) {
  return function(fn, ...postFns) {
    return function(selector) {
      var _a2;
      let matched = matchMap(fn, this);
      if (selector) {
        matched = filterArray(matched, selector, this.options.xmlMode, (_a2 = this._root) === null || _a2 === undefined ? undefined : _a2[0]);
      }
      return this._make(this.length > 1 && matched.length > 1 ? postFns.reduce((elems, fn2) => fn2(elems), matched) : matched);
    };
  };
}
function _matchUntil(nextElem, ...postFns) {
  let matches = null;
  const innerMatcher = _getMatcher((nextElem2, elems) => {
    const matched = [];
    domEach(elems, (elem) => {
      for (let next;next = nextElem2(elem); elem = next) {
        if (matches === null || matches === undefined ? undefined : matches(next, matched.length))
          break;
        matched.push(next);
      }
    });
    return matched;
  })(nextElem, ...postFns);
  return function(selector, filterSelector) {
    matches = typeof selector === "string" ? (elem) => is2(elem, selector, this.options) : selector ? getFilterFn(selector) : null;
    const ret = innerMatcher.call(this, filterSelector);
    matches = null;
    return ret;
  };
}
function _removeDuplicates(elems) {
  return elems.length > 1 ? Array.from(new Set(elems)) : elems;
}
function closest(selector) {
  var _a2;
  const set2 = [];
  if (!selector) {
    return this._make(set2);
  }
  const selectOpts = {
    xmlMode: this.options.xmlMode,
    root: (_a2 = this._root) === null || _a2 === undefined ? undefined : _a2[0]
  };
  const selectFn = typeof selector === "string" ? (elem) => is2(elem, selector, selectOpts) : getFilterFn(selector);
  domEach(this, (elem) => {
    if (elem && !isDocument(elem) && !isTag2(elem)) {
      elem = elem.parent;
    }
    while (elem && isTag2(elem)) {
      if (selectFn(elem, 0)) {
        if (!set2.includes(elem)) {
          set2.push(elem);
        }
        break;
      }
      elem = elem.parent;
    }
  });
  return this._make(set2);
}
function contents() {
  const elems = this.toArray().reduce((newElems, elem) => hasChildren(elem) ? newElems.concat(elem.children) : newElems, []);
  return this._make(elems);
}
function each(fn) {
  let i3 = 0;
  const len = this.length;
  while (i3 < len && fn.call(this[i3], i3, this[i3]) !== false)
    ++i3;
  return this;
}
function map3(fn) {
  let elems = [];
  for (let i3 = 0;i3 < this.length; i3++) {
    const el = this[i3];
    const val2 = fn.call(el, i3, el);
    if (val2 != null) {
      elems = elems.concat(val2);
    }
  }
  return this._make(elems);
}
function getFilterFn(match) {
  if (typeof match === "function") {
    return (el, i3) => match.call(el, i3, el);
  }
  if (isCheerio(match)) {
    return (el) => Array.prototype.includes.call(match, el);
  }
  return function(el) {
    return match === el;
  };
}
function filter3(match) {
  var _a2;
  return this._make(filterArray(this.toArray(), match, this.options.xmlMode, (_a2 = this._root) === null || _a2 === undefined ? undefined : _a2[0]));
}
function filterArray(nodes, match, xmlMode, root2) {
  return typeof match === "string" ? filter2(match, nodes, { xmlMode, root: root2 }) : nodes.filter(getFilterFn(match));
}
function is3(selector) {
  const nodes = this.toArray();
  return typeof selector === "string" ? some(nodes.filter(isTag2), selector, this.options) : selector ? nodes.some(getFilterFn(selector)) : false;
}
function not4(match) {
  let nodes = this.toArray();
  if (typeof match === "string") {
    const matches = new Set(filter2(match, nodes, this.options));
    nodes = nodes.filter((el) => !matches.has(el));
  } else {
    const filterFn = getFilterFn(match);
    nodes = nodes.filter((el, i3) => !filterFn(el, i3));
  }
  return this._make(nodes);
}
function has2(selectorOrHaystack) {
  return this.filter(typeof selectorOrHaystack === "string" ? `:has(${selectorOrHaystack})` : (_, el) => this._make(el).find(selectorOrHaystack).length > 0);
}
function first2() {
  return this.length > 1 ? this._make(this[0]) : this;
}
function last2() {
  return this.length > 0 ? this._make(this[this.length - 1]) : this;
}
function eq(i3) {
  var _a2;
  i3 = +i3;
  if (i3 === 0 && this.length <= 1)
    return this;
  if (i3 < 0)
    i3 = this.length + i3;
  return this._make((_a2 = this[i3]) !== null && _a2 !== undefined ? _a2 : []);
}
function get(i3) {
  if (i3 == null) {
    return this.toArray();
  }
  return this[i3 < 0 ? this.length + i3 : i3];
}
function toArray() {
  return Array.prototype.slice.call(this);
}
function index(selectorOrNeedle) {
  let $haystack;
  let needle;
  if (selectorOrNeedle == null) {
    $haystack = this.parent().children();
    needle = this[0];
  } else if (typeof selectorOrNeedle === "string") {
    $haystack = this._make(selectorOrNeedle);
    needle = this[0];
  } else {
    $haystack = this;
    needle = isCheerio(selectorOrNeedle) ? selectorOrNeedle[0] : selectorOrNeedle;
  }
  return Array.prototype.indexOf.call($haystack, needle);
}
function slice(start, end) {
  return this._make(Array.prototype.slice.call(this, start, end));
}
function end() {
  var _a2;
  return (_a2 = this.prevObject) !== null && _a2 !== undefined ? _a2 : this._make([]);
}
function add(other, context) {
  const selection = this._make(other, context);
  const contents2 = uniqueSort([...this.get(), ...selection.get()]);
  return this._make(contents2);
}
function addBack(selector) {
  return this.prevObject ? this.add(selector ? this.prevObject.filter(selector) : this.prevObject) : this;
}
var reSiblingSelector = /^\s*[+~]/;
var _matcher = _getMatcher((fn, elems) => {
  let ret = [];
  for (let i3 = 0;i3 < elems.length; i3++) {
    const value15 = fn(elems[i3]);
    if (value15.length > 0)
      ret = ret.concat(value15);
  }
  return ret;
});
var _singleMatcher = _getMatcher((fn, elems) => {
  const ret = [];
  for (let i3 = 0;i3 < elems.length; i3++) {
    const value15 = fn(elems[i3]);
    if (value15 !== null) {
      ret.push(value15);
    }
  }
  return ret;
});
var parent = _singleMatcher(({ parent: parent2 }) => parent2 && !isDocument(parent2) ? parent2 : null, _removeDuplicates);
var parents = _matcher((elem) => {
  const matched = [];
  while (elem.parent && !isDocument(elem.parent)) {
    matched.push(elem.parent);
    elem = elem.parent;
  }
  return matched;
}, uniqueSort, (elems) => elems.reverse());
var parentsUntil = _matchUntil(({ parent: parent2 }) => parent2 && !isDocument(parent2) ? parent2 : null, uniqueSort, (elems) => elems.reverse());
var next = _singleMatcher((elem) => nextElementSibling(elem));
var nextAll = _matcher((elem) => {
  const matched = [];
  while (elem.next) {
    elem = elem.next;
    if (isTag2(elem))
      matched.push(elem);
  }
  return matched;
}, _removeDuplicates);
var nextUntil = _matchUntil((el) => nextElementSibling(el), _removeDuplicates);
var prev = _singleMatcher((elem) => prevElementSibling(elem));
var prevAll = _matcher((elem) => {
  const matched = [];
  while (elem.prev) {
    elem = elem.prev;
    if (isTag2(elem))
      matched.push(elem);
  }
  return matched;
}, _removeDuplicates);
var prevUntil = _matchUntil((el) => prevElementSibling(el), _removeDuplicates);
var siblings = _matcher((elem) => getSiblings(elem).filter((el) => isTag2(el) && el !== elem), uniqueSort);
var children = _matcher((elem) => getChildren(elem).filter(isTag2), _removeDuplicates);

// node_modules/cheerio/dist/esm/api/manipulation.js
var exports_manipulation = {};
__export(exports_manipulation, {
  wrapInner: () => wrapInner,
  wrapAll: () => wrapAll,
  wrap: () => wrap,
  unwrap: () => unwrap,
  toString: () => toString,
  text: () => text2,
  replaceWith: () => replaceWith,
  remove: () => remove,
  prependTo: () => prependTo,
  prepend: () => prepend2,
  insertBefore: () => insertBefore,
  insertAfter: () => insertAfter,
  html: () => html2,
  empty: () => empty2,
  clone: () => clone13,
  before: () => before,
  appendTo: () => appendTo,
  append: () => append2,
  after: () => after,
  _makeDomArray: () => _makeDomArray
});

// node_modules/cheerio/dist/esm/parse.js
function getParse(parser) {
  return function parse(content, options2, isDocument2, context) {
    if (typeof Buffer !== "undefined" && Buffer.isBuffer(content)) {
      content = content.toString();
    }
    if (typeof content === "string") {
      return parser(content, options2, isDocument2, context);
    }
    const doc = content;
    if (!Array.isArray(doc) && isDocument(doc)) {
      return doc;
    }
    const root2 = new Document([]);
    update(doc, root2);
    return root2;
  };
}
function update(newChilds, parent2) {
  const arr = Array.isArray(newChilds) ? newChilds : [newChilds];
  if (parent2) {
    parent2.children = arr;
  } else {
    parent2 = null;
  }
  for (let i3 = 0;i3 < arr.length; i3++) {
    const node3 = arr[i3];
    if (node3.parent && node3.parent.children !== arr) {
      removeElement(node3);
    }
    if (parent2) {
      node3.prev = arr[i3 - 1] || null;
      node3.next = arr[i3 + 1] || null;
    } else {
      node3.prev = node3.next = null;
    }
    node3.parent = parent2;
  }
  return parent2;
}

// node_modules/cheerio/dist/esm/api/manipulation.js
function _makeDomArray(elem, clone13) {
  if (elem == null) {
    return [];
  }
  if (typeof elem === "string") {
    return this._parse(elem, this.options, false, null).children.slice(0);
  }
  if ("length" in elem) {
    if (elem.length === 1) {
      return this._makeDomArray(elem[0], clone13);
    }
    const result = [];
    for (let i3 = 0;i3 < elem.length; i3++) {
      const el = elem[i3];
      if (typeof el === "object") {
        if (el == null) {
          continue;
        }
        if (!("length" in el)) {
          result.push(clone13 ? cloneNode(el, true) : el);
          continue;
        }
      }
      result.push(...this._makeDomArray(el, clone13));
    }
    return result;
  }
  return [clone13 ? cloneNode(elem, true) : elem];
}
function _insert(concatenator) {
  return function(...elems) {
    const lastIdx = this.length - 1;
    return domEach(this, (el, i3) => {
      if (!hasChildren(el))
        return;
      const domSrc = typeof elems[0] === "function" ? elems[0].call(el, i3, this._render(el.children)) : elems;
      const dom = this._makeDomArray(domSrc, i3 < lastIdx);
      concatenator(dom, el.children, el);
    });
  };
}
function uniqueSplice(array5, spliceIdx, spliceCount, newElems, parent2) {
  var _a2, _b;
  const spliceArgs = [
    spliceIdx,
    spliceCount,
    ...newElems
  ];
  const prev2 = spliceIdx === 0 ? null : array5[spliceIdx - 1];
  const next2 = spliceIdx + spliceCount >= array5.length ? null : array5[spliceIdx + spliceCount];
  for (let idx = 0;idx < newElems.length; ++idx) {
    const node3 = newElems[idx];
    const oldParent = node3.parent;
    if (oldParent) {
      const oldSiblings = oldParent.children;
      const prevIdx = oldSiblings.indexOf(node3);
      if (prevIdx > -1) {
        oldParent.children.splice(prevIdx, 1);
        if (parent2 === oldParent && spliceIdx > prevIdx) {
          spliceArgs[0]--;
        }
      }
    }
    node3.parent = parent2;
    if (node3.prev) {
      node3.prev.next = (_a2 = node3.next) !== null && _a2 !== undefined ? _a2 : null;
    }
    if (node3.next) {
      node3.next.prev = (_b = node3.prev) !== null && _b !== undefined ? _b : null;
    }
    node3.prev = idx === 0 ? prev2 : newElems[idx - 1];
    node3.next = idx === newElems.length - 1 ? next2 : newElems[idx + 1];
  }
  if (prev2) {
    prev2.next = newElems[0];
  }
  if (next2) {
    next2.prev = newElems[newElems.length - 1];
  }
  return array5.splice(...spliceArgs);
}
function appendTo(target) {
  const appendTarget = isCheerio(target) ? target : this._make(target);
  appendTarget.append(this);
  return this;
}
function prependTo(target) {
  const prependTarget = isCheerio(target) ? target : this._make(target);
  prependTarget.prepend(this);
  return this;
}
function _wrap(insert) {
  return function(wrapper) {
    const lastIdx = this.length - 1;
    const lastParent = this.parents().last();
    for (let i3 = 0;i3 < this.length; i3++) {
      const el = this[i3];
      const wrap = typeof wrapper === "function" ? wrapper.call(el, i3, el) : typeof wrapper === "string" && !isHtml(wrapper) ? lastParent.find(wrapper).clone() : wrapper;
      const [wrapperDom] = this._makeDomArray(wrap, i3 < lastIdx);
      if (!wrapperDom || !hasChildren(wrapperDom))
        continue;
      let elInsertLocation = wrapperDom;
      let j = 0;
      while (j < elInsertLocation.children.length) {
        const child = elInsertLocation.children[j];
        if (isTag2(child)) {
          elInsertLocation = child;
          j = 0;
        } else {
          j++;
        }
      }
      insert(el, elInsertLocation, [wrapperDom]);
    }
    return this;
  };
}
function unwrap(selector) {
  this.parent(selector).not("body").each((_, el) => {
    this._make(el).replaceWith(el.children);
  });
  return this;
}
function wrapAll(wrapper) {
  const el = this[0];
  if (el) {
    const wrap = this._make(typeof wrapper === "function" ? wrapper.call(el, 0, el) : wrapper).insertBefore(el);
    let elInsertLocation;
    for (let i3 = 0;i3 < wrap.length; i3++) {
      if (wrap[i3].type === "tag")
        elInsertLocation = wrap[i3];
    }
    let j = 0;
    while (elInsertLocation && j < elInsertLocation.children.length) {
      const child = elInsertLocation.children[j];
      if (child.type === "tag") {
        elInsertLocation = child;
        j = 0;
      } else {
        j++;
      }
    }
    if (elInsertLocation)
      this._make(elInsertLocation).append(this);
  }
  return this;
}
function after(...elems) {
  const lastIdx = this.length - 1;
  return domEach(this, (el, i3) => {
    if (!hasChildren(el) || !el.parent) {
      return;
    }
    const siblings2 = el.parent.children;
    const index2 = siblings2.indexOf(el);
    if (index2 < 0)
      return;
    const domSrc = typeof elems[0] === "function" ? elems[0].call(el, i3, this._render(el.children)) : elems;
    const dom = this._makeDomArray(domSrc, i3 < lastIdx);
    uniqueSplice(siblings2, index2 + 1, 0, dom, el.parent);
  });
}
function insertAfter(target) {
  if (typeof target === "string") {
    target = this._make(target);
  }
  this.remove();
  const clones = [];
  for (const el of this._makeDomArray(target)) {
    const clonedSelf = this.clone().toArray();
    const { parent: parent2 } = el;
    if (!parent2) {
      continue;
    }
    const siblings2 = parent2.children;
    const index2 = siblings2.indexOf(el);
    if (index2 < 0)
      continue;
    uniqueSplice(siblings2, index2 + 1, 0, clonedSelf, parent2);
    clones.push(...clonedSelf);
  }
  return this._make(clones);
}
function before(...elems) {
  const lastIdx = this.length - 1;
  return domEach(this, (el, i3) => {
    if (!hasChildren(el) || !el.parent) {
      return;
    }
    const siblings2 = el.parent.children;
    const index2 = siblings2.indexOf(el);
    if (index2 < 0)
      return;
    const domSrc = typeof elems[0] === "function" ? elems[0].call(el, i3, this._render(el.children)) : elems;
    const dom = this._makeDomArray(domSrc, i3 < lastIdx);
    uniqueSplice(siblings2, index2, 0, dom, el.parent);
  });
}
function insertBefore(target) {
  const targetArr = this._make(target);
  this.remove();
  const clones = [];
  domEach(targetArr, (el) => {
    const clonedSelf = this.clone().toArray();
    const { parent: parent2 } = el;
    if (!parent2) {
      return;
    }
    const siblings2 = parent2.children;
    const index2 = siblings2.indexOf(el);
    if (index2 < 0)
      return;
    uniqueSplice(siblings2, index2, 0, clonedSelf, parent2);
    clones.push(...clonedSelf);
  });
  return this._make(clones);
}
function remove(selector) {
  const elems = selector ? this.filter(selector) : this;
  domEach(elems, (el) => {
    removeElement(el);
    el.prev = el.next = el.parent = null;
  });
  return this;
}
function replaceWith(content) {
  return domEach(this, (el, i3) => {
    const { parent: parent2 } = el;
    if (!parent2) {
      return;
    }
    const siblings2 = parent2.children;
    const cont = typeof content === "function" ? content.call(el, i3, el) : content;
    const dom = this._makeDomArray(cont);
    update(dom, null);
    const index2 = siblings2.indexOf(el);
    uniqueSplice(siblings2, index2, 1, dom, parent2);
    if (!dom.includes(el)) {
      el.parent = el.prev = el.next = null;
    }
  });
}
function empty2() {
  return domEach(this, (el) => {
    if (!hasChildren(el))
      return;
    for (const child of el.children) {
      child.next = child.prev = child.parent = null;
    }
    el.children.length = 0;
  });
}
function html2(str) {
  if (str === undefined) {
    const el = this[0];
    if (!el || !hasChildren(el))
      return null;
    return this._render(el.children);
  }
  return domEach(this, (el) => {
    if (!hasChildren(el))
      return;
    for (const child of el.children) {
      child.next = child.prev = child.parent = null;
    }
    const content = isCheerio(str) ? str.toArray() : this._parse(`${str}`, this.options, false, el).children;
    update(content, el);
  });
}
function toString() {
  return this._render(this);
}
function text2(str) {
  if (str === undefined) {
    return text(this);
  }
  if (typeof str === "function") {
    return domEach(this, (el, i3) => this._make(el).text(str.call(el, i3, text([el]))));
  }
  return domEach(this, (el) => {
    if (!hasChildren(el))
      return;
    for (const child of el.children) {
      child.next = child.prev = child.parent = null;
    }
    const textNode = new Text2(`${str}`);
    update(textNode, el);
  });
}
function clone13() {
  const clone14 = Array.prototype.map.call(this.get(), (el) => cloneNode(el, true));
  const root2 = new Document(clone14);
  for (const node3 of clone14) {
    node3.parent = root2;
  }
  return this._make(clone14);
}
var append2 = _insert((dom, children2, parent2) => {
  uniqueSplice(children2, children2.length, 0, dom, parent2);
});
var prepend2 = _insert((dom, children2, parent2) => {
  uniqueSplice(children2, 0, 0, dom, parent2);
});
var wrap = _wrap((el, elInsertLocation, wrapperDom) => {
  const { parent: parent2 } = el;
  if (!parent2)
    return;
  const siblings2 = parent2.children;
  const index2 = siblings2.indexOf(el);
  update([el], elInsertLocation);
  uniqueSplice(siblings2, index2, 0, wrapperDom, parent2);
});
var wrapInner = _wrap((el, elInsertLocation, wrapperDom) => {
  if (!hasChildren(el))
    return;
  update(el.children, elInsertLocation);
  update(wrapperDom, el);
});

// node_modules/cheerio/dist/esm/api/css.js
var exports_css = {};
__export(exports_css, {
  css: () => css
});
function css(prop2, val2) {
  if (prop2 != null && val2 != null || typeof prop2 === "object" && !Array.isArray(prop2)) {
    return domEach(this, (el, i3) => {
      if (isTag2(el)) {
        setCss(el, prop2, val2, i3);
      }
    });
  }
  if (this.length === 0) {
    return;
  }
  return getCss(this[0], prop2);
}
function setCss(el, prop2, value15, idx) {
  if (typeof prop2 === "string") {
    const styles = getCss(el);
    const val2 = typeof value15 === "function" ? value15.call(el, idx, styles[prop2]) : value15;
    if (val2 === "") {
      delete styles[prop2];
    } else if (val2 != null) {
      styles[prop2] = val2;
    }
    el.attribs["style"] = stringify3(styles);
  } else if (typeof prop2 === "object") {
    const keys = Object.keys(prop2);
    for (let i3 = 0;i3 < keys.length; i3++) {
      const k = keys[i3];
      setCss(el, k, prop2[k], i3);
    }
  }
}
function getCss(el, prop2) {
  if (!el || !isTag2(el))
    return;
  const styles = parse9(el.attribs["style"]);
  if (typeof prop2 === "string") {
    return styles[prop2];
  }
  if (Array.isArray(prop2)) {
    const newStyles = {};
    for (const item of prop2) {
      if (styles[item] != null) {
        newStyles[item] = styles[item];
      }
    }
    return newStyles;
  }
  return styles;
}
function stringify3(obj) {
  return Object.keys(obj).reduce((str, prop2) => `${str}${str ? " " : ""}${prop2}: ${obj[prop2]};`, "");
}
function parse9(styles) {
  styles = (styles || "").trim();
  if (!styles)
    return {};
  const obj = {};
  let key;
  for (const str of styles.split(";")) {
    const n3 = str.indexOf(":");
    if (n3 < 1 || n3 === str.length - 1) {
      const trimmed = str.trimEnd();
      if (trimmed.length > 0 && key !== undefined) {
        obj[key] += `;${trimmed}`;
      }
    } else {
      key = str.slice(0, n3).trim();
      obj[key] = str.slice(n3 + 1).trim();
    }
  }
  return obj;
}

// node_modules/cheerio/dist/esm/api/forms.js
var exports_forms = {};
__export(exports_forms, {
  serializeArray: () => serializeArray,
  serialize: () => serialize
});
function serialize() {
  const arr = this.serializeArray();
  const retArr = arr.map((data2) => `${encodeURIComponent(data2.name)}=${encodeURIComponent(data2.value)}`);
  return retArr.join("&").replace(r20, "+");
}
function serializeArray() {
  return this.map((_, elem) => {
    const $elem = this._make(elem);
    if (isTag2(elem) && elem.name === "form") {
      return $elem.find(submittableSelector).toArray();
    }
    return $elem.filter(submittableSelector).toArray();
  }).filter('[name!=""]:enabled' + ":not(:submit, :button, :image, :reset, :file)" + ":matches([checked], :not(:checkbox, :radio))").map((_, elem) => {
    var _a2;
    const $elem = this._make(elem);
    const name = $elem.attr("name");
    const value15 = (_a2 = $elem.val()) !== null && _a2 !== undefined ? _a2 : "";
    if (Array.isArray(value15)) {
      return value15.map((val2) => ({ name, value: val2.replace(rCRLF, "\r\n") }));
    }
    return { name, value: value15.replace(rCRLF, "\r\n") };
  }).toArray();
}
var submittableSelector = "input,select,textarea,keygen";
var r20 = /%20/g;
var rCRLF = /\r?\n/g;

// node_modules/cheerio/dist/esm/api/extract.js
var exports_extract = {};
__export(exports_extract, {
  extract: () => extract7
});
function getExtractDescr(descr) {
  var _a2;
  if (typeof descr === "string") {
    return { selector: descr, value: "textContent" };
  }
  return {
    selector: descr.selector,
    value: (_a2 = descr.value) !== null && _a2 !== undefined ? _a2 : "textContent"
  };
}
function extract7(map4) {
  const ret = {};
  for (const key in map4) {
    const descr = map4[key];
    const isArray = Array.isArray(descr);
    const { selector, value: value15 } = getExtractDescr(isArray ? descr[0] : descr);
    const fn = typeof value15 === "function" ? value15 : typeof value15 === "string" ? (el) => this._make(el).prop(value15) : (el) => this._make(el).extract(value15);
    if (isArray) {
      ret[key] = this._findBySelector(selector, Number.POSITIVE_INFINITY).map((_, el) => fn(el, key, ret)).get();
    } else {
      const $ = this._findBySelector(selector, 1);
      ret[key] = $.length > 0 ? fn($[0], key, ret) : undefined;
    }
  }
  return ret;
}

// node_modules/cheerio/dist/esm/cheerio.js
class Cheerio {
  constructor(elements, root2, options2) {
    this.length = 0;
    this.options = options2;
    this._root = root2;
    if (elements) {
      for (let idx = 0;idx < elements.length; idx++) {
        this[idx] = elements[idx];
      }
      this.length = elements.length;
    }
  }
}
Cheerio.prototype.cheerio = "[cheerio object]";
Cheerio.prototype.splice = Array.prototype.splice;
Cheerio.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];
Object.assign(Cheerio.prototype, exports_attributes, exports_traversing, exports_manipulation, exports_css, exports_forms, exports_extract);

// node_modules/cheerio/dist/esm/load.js
function getLoad(parse10, render3) {
  return function load(content, options3, isDocument2 = true) {
    if (content == null) {
      throw new Error("cheerio.load() expects a string");
    }
    const internalOpts = flattenOptions(options3);
    const initialRoot = parse10(content, internalOpts, isDocument2, null);

    class LoadedCheerio extends Cheerio {
      _make(selector, context) {
        const cheerio2 = initialize(selector, context);
        cheerio2.prevObject = this;
        return cheerio2;
      }
      _parse(content2, options4, isDocument3, context) {
        return parse10(content2, options4, isDocument3, context);
      }
      _render(dom) {
        return render3(dom, this.options);
      }
    }
    function initialize(selector, context, root2 = initialRoot, opts) {
      if (selector && isCheerio(selector))
        return selector;
      const options4 = flattenOptions(opts, internalOpts);
      const r = typeof root2 === "string" ? [parse10(root2, options4, false, null)] : ("length" in root2) ? root2 : [root2];
      const rootInstance = isCheerio(r) ? r : new LoadedCheerio(r, null, options4);
      rootInstance._root = rootInstance;
      if (!selector) {
        return new LoadedCheerio(undefined, rootInstance, options4);
      }
      const elements = typeof selector === "string" && isHtml(selector) ? parse10(selector, options4, false, null).children : isNode(selector) ? [selector] : Array.isArray(selector) ? selector : undefined;
      const instance = new LoadedCheerio(elements, rootInstance, options4);
      if (elements) {
        return instance;
      }
      if (typeof selector !== "string") {
        throw new TypeError("Unexpected type of selector");
      }
      let search = selector;
      const searchContext = context ? typeof context === "string" ? isHtml(context) ? new LoadedCheerio([parse10(context, options4, false, null)], rootInstance, options4) : (search = `${context} ${search}`, rootInstance) : isCheerio(context) ? context : new LoadedCheerio(Array.isArray(context) ? context : [context], rootInstance, options4) : rootInstance;
      if (!searchContext)
        return instance;
      return searchContext.find(search);
    }
    Object.assign(initialize, exports_static, {
      load,
      _root: initialRoot,
      _options: internalOpts,
      fn: LoadedCheerio.prototype,
      prototype: LoadedCheerio.prototype
    });
    return initialize;
  };
}
function isNode(obj) {
  return !!obj.name || obj.type === "root" || obj.type === "text" || obj.type === "comment";
}

// node_modules/parse5/dist/common/unicode.js
function isSurrogate(cp) {
  return cp >= 55296 && cp <= 57343;
}
function isSurrogatePair(cp) {
  return cp >= 56320 && cp <= 57343;
}
function getSurrogatePairCodePoint(cp1, cp2) {
  return (cp1 - 55296) * 1024 + 9216 + cp2;
}
function isControlCodePoint(cp) {
  return cp !== 32 && cp !== 10 && cp !== 13 && cp !== 9 && cp !== 12 && cp >= 1 && cp <= 31 || cp >= 127 && cp <= 159;
}
function isUndefinedCodePoint(cp) {
  return cp >= 64976 && cp <= 65007 || UNDEFINED_CODE_POINTS.has(cp);
}
var UNDEFINED_CODE_POINTS = new Set([
  65534,
  65535,
  131070,
  131071,
  196606,
  196607,
  262142,
  262143,
  327678,
  327679,
  393214,
  393215,
  458750,
  458751,
  524286,
  524287,
  589822,
  589823,
  655358,
  655359,
  720894,
  720895,
  786430,
  786431,
  851966,
  851967,
  917502,
  917503,
  983038,
  983039,
  1048574,
  1048575,
  1114110,
  1114111
]);
var REPLACEMENT_CHARACTER = "\uFFFD";
var CODE_POINTS;
(function(CODE_POINTS2) {
  CODE_POINTS2[CODE_POINTS2["EOF"] = -1] = "EOF";
  CODE_POINTS2[CODE_POINTS2["NULL"] = 0] = "NULL";
  CODE_POINTS2[CODE_POINTS2["TABULATION"] = 9] = "TABULATION";
  CODE_POINTS2[CODE_POINTS2["CARRIAGE_RETURN"] = 13] = "CARRIAGE_RETURN";
  CODE_POINTS2[CODE_POINTS2["LINE_FEED"] = 10] = "LINE_FEED";
  CODE_POINTS2[CODE_POINTS2["FORM_FEED"] = 12] = "FORM_FEED";
  CODE_POINTS2[CODE_POINTS2["SPACE"] = 32] = "SPACE";
  CODE_POINTS2[CODE_POINTS2["EXCLAMATION_MARK"] = 33] = "EXCLAMATION_MARK";
  CODE_POINTS2[CODE_POINTS2["QUOTATION_MARK"] = 34] = "QUOTATION_MARK";
  CODE_POINTS2[CODE_POINTS2["NUMBER_SIGN"] = 35] = "NUMBER_SIGN";
  CODE_POINTS2[CODE_POINTS2["AMPERSAND"] = 38] = "AMPERSAND";
  CODE_POINTS2[CODE_POINTS2["APOSTROPHE"] = 39] = "APOSTROPHE";
  CODE_POINTS2[CODE_POINTS2["HYPHEN_MINUS"] = 45] = "HYPHEN_MINUS";
  CODE_POINTS2[CODE_POINTS2["SOLIDUS"] = 47] = "SOLIDUS";
  CODE_POINTS2[CODE_POINTS2["DIGIT_0"] = 48] = "DIGIT_0";
  CODE_POINTS2[CODE_POINTS2["DIGIT_9"] = 57] = "DIGIT_9";
  CODE_POINTS2[CODE_POINTS2["SEMICOLON"] = 59] = "SEMICOLON";
  CODE_POINTS2[CODE_POINTS2["LESS_THAN_SIGN"] = 60] = "LESS_THAN_SIGN";
  CODE_POINTS2[CODE_POINTS2["EQUALS_SIGN"] = 61] = "EQUALS_SIGN";
  CODE_POINTS2[CODE_POINTS2["GREATER_THAN_SIGN"] = 62] = "GREATER_THAN_SIGN";
  CODE_POINTS2[CODE_POINTS2["QUESTION_MARK"] = 63] = "QUESTION_MARK";
  CODE_POINTS2[CODE_POINTS2["LATIN_CAPITAL_A"] = 65] = "LATIN_CAPITAL_A";
  CODE_POINTS2[CODE_POINTS2["LATIN_CAPITAL_F"] = 70] = "LATIN_CAPITAL_F";
  CODE_POINTS2[CODE_POINTS2["LATIN_CAPITAL_X"] = 88] = "LATIN_CAPITAL_X";
  CODE_POINTS2[CODE_POINTS2["LATIN_CAPITAL_Z"] = 90] = "LATIN_CAPITAL_Z";
  CODE_POINTS2[CODE_POINTS2["RIGHT_SQUARE_BRACKET"] = 93] = "RIGHT_SQUARE_BRACKET";
  CODE_POINTS2[CODE_POINTS2["GRAVE_ACCENT"] = 96] = "GRAVE_ACCENT";
  CODE_POINTS2[CODE_POINTS2["LATIN_SMALL_A"] = 97] = "LATIN_SMALL_A";
  CODE_POINTS2[CODE_POINTS2["LATIN_SMALL_F"] = 102] = "LATIN_SMALL_F";
  CODE_POINTS2[CODE_POINTS2["LATIN_SMALL_X"] = 120] = "LATIN_SMALL_X";
  CODE_POINTS2[CODE_POINTS2["LATIN_SMALL_Z"] = 122] = "LATIN_SMALL_Z";
  CODE_POINTS2[CODE_POINTS2["REPLACEMENT_CHARACTER"] = 65533] = "REPLACEMENT_CHARACTER";
})(CODE_POINTS = CODE_POINTS || (CODE_POINTS = {}));
var SEQUENCES = {
  DASH_DASH: "--",
  CDATA_START: "[CDATA[",
  DOCTYPE: "doctype",
  SCRIPT: "script",
  PUBLIC: "public",
  SYSTEM: "system"
};

// node_modules/parse5/dist/common/error-codes.js
var ERR;
(function(ERR2) {
  ERR2["controlCharacterInInputStream"] = "control-character-in-input-stream";
  ERR2["noncharacterInInputStream"] = "noncharacter-in-input-stream";
  ERR2["surrogateInInputStream"] = "surrogate-in-input-stream";
  ERR2["nonVoidHtmlElementStartTagWithTrailingSolidus"] = "non-void-html-element-start-tag-with-trailing-solidus";
  ERR2["endTagWithAttributes"] = "end-tag-with-attributes";
  ERR2["endTagWithTrailingSolidus"] = "end-tag-with-trailing-solidus";
  ERR2["unexpectedSolidusInTag"] = "unexpected-solidus-in-tag";
  ERR2["unexpectedNullCharacter"] = "unexpected-null-character";
  ERR2["unexpectedQuestionMarkInsteadOfTagName"] = "unexpected-question-mark-instead-of-tag-name";
  ERR2["invalidFirstCharacterOfTagName"] = "invalid-first-character-of-tag-name";
  ERR2["unexpectedEqualsSignBeforeAttributeName"] = "unexpected-equals-sign-before-attribute-name";
  ERR2["missingEndTagName"] = "missing-end-tag-name";
  ERR2["unexpectedCharacterInAttributeName"] = "unexpected-character-in-attribute-name";
  ERR2["unknownNamedCharacterReference"] = "unknown-named-character-reference";
  ERR2["missingSemicolonAfterCharacterReference"] = "missing-semicolon-after-character-reference";
  ERR2["unexpectedCharacterAfterDoctypeSystemIdentifier"] = "unexpected-character-after-doctype-system-identifier";
  ERR2["unexpectedCharacterInUnquotedAttributeValue"] = "unexpected-character-in-unquoted-attribute-value";
  ERR2["eofBeforeTagName"] = "eof-before-tag-name";
  ERR2["eofInTag"] = "eof-in-tag";
  ERR2["missingAttributeValue"] = "missing-attribute-value";
  ERR2["missingWhitespaceBetweenAttributes"] = "missing-whitespace-between-attributes";
  ERR2["missingWhitespaceAfterDoctypePublicKeyword"] = "missing-whitespace-after-doctype-public-keyword";
  ERR2["missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers"] = "missing-whitespace-between-doctype-public-and-system-identifiers";
  ERR2["missingWhitespaceAfterDoctypeSystemKeyword"] = "missing-whitespace-after-doctype-system-keyword";
  ERR2["missingQuoteBeforeDoctypePublicIdentifier"] = "missing-quote-before-doctype-public-identifier";
  ERR2["missingQuoteBeforeDoctypeSystemIdentifier"] = "missing-quote-before-doctype-system-identifier";
  ERR2["missingDoctypePublicIdentifier"] = "missing-doctype-public-identifier";
  ERR2["missingDoctypeSystemIdentifier"] = "missing-doctype-system-identifier";
  ERR2["abruptDoctypePublicIdentifier"] = "abrupt-doctype-public-identifier";
  ERR2["abruptDoctypeSystemIdentifier"] = "abrupt-doctype-system-identifier";
  ERR2["cdataInHtmlContent"] = "cdata-in-html-content";
  ERR2["incorrectlyOpenedComment"] = "incorrectly-opened-comment";
  ERR2["eofInScriptHtmlCommentLikeText"] = "eof-in-script-html-comment-like-text";
  ERR2["eofInDoctype"] = "eof-in-doctype";
  ERR2["nestedComment"] = "nested-comment";
  ERR2["abruptClosingOfEmptyComment"] = "abrupt-closing-of-empty-comment";
  ERR2["eofInComment"] = "eof-in-comment";
  ERR2["incorrectlyClosedComment"] = "incorrectly-closed-comment";
  ERR2["eofInCdata"] = "eof-in-cdata";
  ERR2["absenceOfDigitsInNumericCharacterReference"] = "absence-of-digits-in-numeric-character-reference";
  ERR2["nullCharacterReference"] = "null-character-reference";
  ERR2["surrogateCharacterReference"] = "surrogate-character-reference";
  ERR2["characterReferenceOutsideUnicodeRange"] = "character-reference-outside-unicode-range";
  ERR2["controlCharacterReference"] = "control-character-reference";
  ERR2["noncharacterCharacterReference"] = "noncharacter-character-reference";
  ERR2["missingWhitespaceBeforeDoctypeName"] = "missing-whitespace-before-doctype-name";
  ERR2["missingDoctypeName"] = "missing-doctype-name";
  ERR2["invalidCharacterSequenceAfterDoctypeName"] = "invalid-character-sequence-after-doctype-name";
  ERR2["duplicateAttribute"] = "duplicate-attribute";
  ERR2["nonConformingDoctype"] = "non-conforming-doctype";
  ERR2["missingDoctype"] = "missing-doctype";
  ERR2["misplacedDoctype"] = "misplaced-doctype";
  ERR2["endTagWithoutMatchingOpenElement"] = "end-tag-without-matching-open-element";
  ERR2["closingOfElementWithOpenChildElements"] = "closing-of-element-with-open-child-elements";
  ERR2["disallowedContentInNoscriptInHead"] = "disallowed-content-in-noscript-in-head";
  ERR2["openElementsLeftAfterEof"] = "open-elements-left-after-eof";
  ERR2["abandonedHeadElementChild"] = "abandoned-head-element-child";
  ERR2["misplacedStartTagForHeadElement"] = "misplaced-start-tag-for-head-element";
  ERR2["nestedNoscriptInHead"] = "nested-noscript-in-head";
  ERR2["eofInElementThatCanContainOnlyText"] = "eof-in-element-that-can-contain-only-text";
})(ERR = ERR || (ERR = {}));

// node_modules/parse5/dist/tokenizer/preprocessor.js
var DEFAULT_BUFFER_WATERLINE = 1 << 16;

class Preprocessor {
  constructor(handler) {
    this.handler = handler;
    this.html = "";
    this.pos = -1;
    this.lastGapPos = -2;
    this.gapStack = [];
    this.skipNextNewLine = false;
    this.lastChunkWritten = false;
    this.endOfChunkHit = false;
    this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
    this.isEol = false;
    this.lineStartPos = 0;
    this.droppedBufferSize = 0;
    this.line = 1;
    this.lastErrOffset = -1;
  }
  get col() {
    return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);
  }
  get offset() {
    return this.droppedBufferSize + this.pos;
  }
  getError(code) {
    const { line, col, offset } = this;
    return {
      code,
      startLine: line,
      endLine: line,
      startCol: col,
      endCol: col,
      startOffset: offset,
      endOffset: offset
    };
  }
  _err(code) {
    if (this.handler.onParseError && this.lastErrOffset !== this.offset) {
      this.lastErrOffset = this.offset;
      this.handler.onParseError(this.getError(code));
    }
  }
  _addGap() {
    this.gapStack.push(this.lastGapPos);
    this.lastGapPos = this.pos;
  }
  _processSurrogate(cp) {
    if (this.pos !== this.html.length - 1) {
      const nextCp = this.html.charCodeAt(this.pos + 1);
      if (isSurrogatePair(nextCp)) {
        this.pos++;
        this._addGap();
        return getSurrogatePairCodePoint(cp, nextCp);
      }
    } else if (!this.lastChunkWritten) {
      this.endOfChunkHit = true;
      return CODE_POINTS.EOF;
    }
    this._err(ERR.surrogateInInputStream);
    return cp;
  }
  willDropParsedChunk() {
    return this.pos > this.bufferWaterline;
  }
  dropParsedChunk() {
    if (this.willDropParsedChunk()) {
      this.html = this.html.substring(this.pos);
      this.lineStartPos -= this.pos;
      this.droppedBufferSize += this.pos;
      this.pos = 0;
      this.lastGapPos = -2;
      this.gapStack.length = 0;
    }
  }
  write(chunk, isLastChunk) {
    if (this.html.length > 0) {
      this.html += chunk;
    } else {
      this.html = chunk;
    }
    this.endOfChunkHit = false;
    this.lastChunkWritten = isLastChunk;
  }
  insertHtmlAtCurrentPos(chunk) {
    this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);
    this.endOfChunkHit = false;
  }
  startsWith(pattern4, caseSensitive) {
    if (this.pos + pattern4.length > this.html.length) {
      this.endOfChunkHit = !this.lastChunkWritten;
      return false;
    }
    if (caseSensitive) {
      return this.html.startsWith(pattern4, this.pos);
    }
    for (let i3 = 0;i3 < pattern4.length; i3++) {
      const cp = this.html.charCodeAt(this.pos + i3) | 32;
      if (cp !== pattern4.charCodeAt(i3)) {
        return false;
      }
    }
    return true;
  }
  peek(offset) {
    const pos = this.pos + offset;
    if (pos >= this.html.length) {
      this.endOfChunkHit = !this.lastChunkWritten;
      return CODE_POINTS.EOF;
    }
    const code = this.html.charCodeAt(pos);
    return code === CODE_POINTS.CARRIAGE_RETURN ? CODE_POINTS.LINE_FEED : code;
  }
  advance() {
    this.pos++;
    if (this.isEol) {
      this.isEol = false;
      this.line++;
      this.lineStartPos = this.pos;
    }
    if (this.pos >= this.html.length) {
      this.endOfChunkHit = !this.lastChunkWritten;
      return CODE_POINTS.EOF;
    }
    let cp = this.html.charCodeAt(this.pos);
    if (cp === CODE_POINTS.CARRIAGE_RETURN) {
      this.isEol = true;
      this.skipNextNewLine = true;
      return CODE_POINTS.LINE_FEED;
    }
    if (cp === CODE_POINTS.LINE_FEED) {
      this.isEol = true;
      if (this.skipNextNewLine) {
        this.line--;
        this.skipNextNewLine = false;
        this._addGap();
        return this.advance();
      }
    }
    this.skipNextNewLine = false;
    if (isSurrogate(cp)) {
      cp = this._processSurrogate(cp);
    }
    const isCommonValidRange = this.handler.onParseError === null || cp > 31 && cp < 127 || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.CARRIAGE_RETURN || cp > 159 && cp < 64976;
    if (!isCommonValidRange) {
      this._checkForProblematicCharacters(cp);
    }
    return cp;
  }
  _checkForProblematicCharacters(cp) {
    if (isControlCodePoint(cp)) {
      this._err(ERR.controlCharacterInInputStream);
    } else if (isUndefinedCodePoint(cp)) {
      this._err(ERR.noncharacterInInputStream);
    }
  }
  retreat(count) {
    this.pos -= count;
    while (this.pos < this.lastGapPos) {
      this.lastGapPos = this.gapStack.pop();
      this.pos--;
    }
    this.isEol = false;
  }
}

// node_modules/parse5/dist/common/token.js
function getTokenAttr(token, attrName) {
  for (let i3 = token.attrs.length - 1;i3 >= 0; i3--) {
    if (token.attrs[i3].name === attrName) {
      return token.attrs[i3].value;
    }
  }
  return null;
}
var TokenType;
(function(TokenType2) {
  TokenType2[TokenType2["CHARACTER"] = 0] = "CHARACTER";
  TokenType2[TokenType2["NULL_CHARACTER"] = 1] = "NULL_CHARACTER";
  TokenType2[TokenType2["WHITESPACE_CHARACTER"] = 2] = "WHITESPACE_CHARACTER";
  TokenType2[TokenType2["START_TAG"] = 3] = "START_TAG";
  TokenType2[TokenType2["END_TAG"] = 4] = "END_TAG";
  TokenType2[TokenType2["COMMENT"] = 5] = "COMMENT";
  TokenType2[TokenType2["DOCTYPE"] = 6] = "DOCTYPE";
  TokenType2[TokenType2["EOF"] = 7] = "EOF";
  TokenType2[TokenType2["HIBERNATION"] = 8] = "HIBERNATION";
})(TokenType = TokenType || (TokenType = {}));

// node_modules/parse5/dist/common/html.js
var exports_html = {};
__export(exports_html, {
  isNumberedHeader: () => isNumberedHeader,
  hasUnescapedText: () => hasUnescapedText,
  getTagID: () => getTagID,
  TAG_NAMES: () => TAG_NAMES,
  TAG_ID: () => TAG_ID,
  SPECIAL_ELEMENTS: () => SPECIAL_ELEMENTS,
  NS: () => NS,
  DOCUMENT_MODE: () => DOCUMENT_MODE,
  ATTRS: () => ATTRS
});
function getTagID(tagName) {
  var _a2;
  return (_a2 = TAG_NAME_TO_ID.get(tagName)) !== null && _a2 !== undefined ? _a2 : TAG_ID.UNKNOWN;
}
function isNumberedHeader(tn) {
  return tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6;
}
function hasUnescapedText(tn, scriptingEnabled) {
  return UNESCAPED_TEXT.has(tn) || scriptingEnabled && tn === TAG_NAMES.NOSCRIPT;
}
var NS;
(function(NS2) {
  NS2["HTML"] = "http://www.w3.org/1999/xhtml";
  NS2["MATHML"] = "http://www.w3.org/1998/Math/MathML";
  NS2["SVG"] = "http://www.w3.org/2000/svg";
  NS2["XLINK"] = "http://www.w3.org/1999/xlink";
  NS2["XML"] = "http://www.w3.org/XML/1998/namespace";
  NS2["XMLNS"] = "http://www.w3.org/2000/xmlns/";
})(NS = NS || (NS = {}));
var ATTRS;
(function(ATTRS2) {
  ATTRS2["TYPE"] = "type";
  ATTRS2["ACTION"] = "action";
  ATTRS2["ENCODING"] = "encoding";
  ATTRS2["PROMPT"] = "prompt";
  ATTRS2["NAME"] = "name";
  ATTRS2["COLOR"] = "color";
  ATTRS2["FACE"] = "face";
  ATTRS2["SIZE"] = "size";
})(ATTRS = ATTRS || (ATTRS = {}));
var DOCUMENT_MODE;
(function(DOCUMENT_MODE2) {
  DOCUMENT_MODE2["NO_QUIRKS"] = "no-quirks";
  DOCUMENT_MODE2["QUIRKS"] = "quirks";
  DOCUMENT_MODE2["LIMITED_QUIRKS"] = "limited-quirks";
})(DOCUMENT_MODE = DOCUMENT_MODE || (DOCUMENT_MODE = {}));
var TAG_NAMES;
(function(TAG_NAMES2) {
  TAG_NAMES2["A"] = "a";
  TAG_NAMES2["ADDRESS"] = "address";
  TAG_NAMES2["ANNOTATION_XML"] = "annotation-xml";
  TAG_NAMES2["APPLET"] = "applet";
  TAG_NAMES2["AREA"] = "area";
  TAG_NAMES2["ARTICLE"] = "article";
  TAG_NAMES2["ASIDE"] = "aside";
  TAG_NAMES2["B"] = "b";
  TAG_NAMES2["BASE"] = "base";
  TAG_NAMES2["BASEFONT"] = "basefont";
  TAG_NAMES2["BGSOUND"] = "bgsound";
  TAG_NAMES2["BIG"] = "big";
  TAG_NAMES2["BLOCKQUOTE"] = "blockquote";
  TAG_NAMES2["BODY"] = "body";
  TAG_NAMES2["BR"] = "br";
  TAG_NAMES2["BUTTON"] = "button";
  TAG_NAMES2["CAPTION"] = "caption";
  TAG_NAMES2["CENTER"] = "center";
  TAG_NAMES2["CODE"] = "code";
  TAG_NAMES2["COL"] = "col";
  TAG_NAMES2["COLGROUP"] = "colgroup";
  TAG_NAMES2["DD"] = "dd";
  TAG_NAMES2["DESC"] = "desc";
  TAG_NAMES2["DETAILS"] = "details";
  TAG_NAMES2["DIALOG"] = "dialog";
  TAG_NAMES2["DIR"] = "dir";
  TAG_NAMES2["DIV"] = "div";
  TAG_NAMES2["DL"] = "dl";
  TAG_NAMES2["DT"] = "dt";
  TAG_NAMES2["EM"] = "em";
  TAG_NAMES2["EMBED"] = "embed";
  TAG_NAMES2["FIELDSET"] = "fieldset";
  TAG_NAMES2["FIGCAPTION"] = "figcaption";
  TAG_NAMES2["FIGURE"] = "figure";
  TAG_NAMES2["FONT"] = "font";
  TAG_NAMES2["FOOTER"] = "footer";
  TAG_NAMES2["FOREIGN_OBJECT"] = "foreignObject";
  TAG_NAMES2["FORM"] = "form";
  TAG_NAMES2["FRAME"] = "frame";
  TAG_NAMES2["FRAMESET"] = "frameset";
  TAG_NAMES2["H1"] = "h1";
  TAG_NAMES2["H2"] = "h2";
  TAG_NAMES2["H3"] = "h3";
  TAG_NAMES2["H4"] = "h4";
  TAG_NAMES2["H5"] = "h5";
  TAG_NAMES2["H6"] = "h6";
  TAG_NAMES2["HEAD"] = "head";
  TAG_NAMES2["HEADER"] = "header";
  TAG_NAMES2["HGROUP"] = "hgroup";
  TAG_NAMES2["HR"] = "hr";
  TAG_NAMES2["HTML"] = "html";
  TAG_NAMES2["I"] = "i";
  TAG_NAMES2["IMG"] = "img";
  TAG_NAMES2["IMAGE"] = "image";
  TAG_NAMES2["INPUT"] = "input";
  TAG_NAMES2["IFRAME"] = "iframe";
  TAG_NAMES2["KEYGEN"] = "keygen";
  TAG_NAMES2["LABEL"] = "label";
  TAG_NAMES2["LI"] = "li";
  TAG_NAMES2["LINK"] = "link";
  TAG_NAMES2["LISTING"] = "listing";
  TAG_NAMES2["MAIN"] = "main";
  TAG_NAMES2["MALIGNMARK"] = "malignmark";
  TAG_NAMES2["MARQUEE"] = "marquee";
  TAG_NAMES2["MATH"] = "math";
  TAG_NAMES2["MENU"] = "menu";
  TAG_NAMES2["META"] = "meta";
  TAG_NAMES2["MGLYPH"] = "mglyph";
  TAG_NAMES2["MI"] = "mi";
  TAG_NAMES2["MO"] = "mo";
  TAG_NAMES2["MN"] = "mn";
  TAG_NAMES2["MS"] = "ms";
  TAG_NAMES2["MTEXT"] = "mtext";
  TAG_NAMES2["NAV"] = "nav";
  TAG_NAMES2["NOBR"] = "nobr";
  TAG_NAMES2["NOFRAMES"] = "noframes";
  TAG_NAMES2["NOEMBED"] = "noembed";
  TAG_NAMES2["NOSCRIPT"] = "noscript";
  TAG_NAMES2["OBJECT"] = "object";
  TAG_NAMES2["OL"] = "ol";
  TAG_NAMES2["OPTGROUP"] = "optgroup";
  TAG_NAMES2["OPTION"] = "option";
  TAG_NAMES2["P"] = "p";
  TAG_NAMES2["PARAM"] = "param";
  TAG_NAMES2["PLAINTEXT"] = "plaintext";
  TAG_NAMES2["PRE"] = "pre";
  TAG_NAMES2["RB"] = "rb";
  TAG_NAMES2["RP"] = "rp";
  TAG_NAMES2["RT"] = "rt";
  TAG_NAMES2["RTC"] = "rtc";
  TAG_NAMES2["RUBY"] = "ruby";
  TAG_NAMES2["S"] = "s";
  TAG_NAMES2["SCRIPT"] = "script";
  TAG_NAMES2["SECTION"] = "section";
  TAG_NAMES2["SELECT"] = "select";
  TAG_NAMES2["SOURCE"] = "source";
  TAG_NAMES2["SMALL"] = "small";
  TAG_NAMES2["SPAN"] = "span";
  TAG_NAMES2["STRIKE"] = "strike";
  TAG_NAMES2["STRONG"] = "strong";
  TAG_NAMES2["STYLE"] = "style";
  TAG_NAMES2["SUB"] = "sub";
  TAG_NAMES2["SUMMARY"] = "summary";
  TAG_NAMES2["SUP"] = "sup";
  TAG_NAMES2["TABLE"] = "table";
  TAG_NAMES2["TBODY"] = "tbody";
  TAG_NAMES2["TEMPLATE"] = "template";
  TAG_NAMES2["TEXTAREA"] = "textarea";
  TAG_NAMES2["TFOOT"] = "tfoot";
  TAG_NAMES2["TD"] = "td";
  TAG_NAMES2["TH"] = "th";
  TAG_NAMES2["THEAD"] = "thead";
  TAG_NAMES2["TITLE"] = "title";
  TAG_NAMES2["TR"] = "tr";
  TAG_NAMES2["TRACK"] = "track";
  TAG_NAMES2["TT"] = "tt";
  TAG_NAMES2["U"] = "u";
  TAG_NAMES2["UL"] = "ul";
  TAG_NAMES2["SVG"] = "svg";
  TAG_NAMES2["VAR"] = "var";
  TAG_NAMES2["WBR"] = "wbr";
  TAG_NAMES2["XMP"] = "xmp";
})(TAG_NAMES = TAG_NAMES || (TAG_NAMES = {}));
var TAG_ID;
(function(TAG_ID2) {
  TAG_ID2[TAG_ID2["UNKNOWN"] = 0] = "UNKNOWN";
  TAG_ID2[TAG_ID2["A"] = 1] = "A";
  TAG_ID2[TAG_ID2["ADDRESS"] = 2] = "ADDRESS";
  TAG_ID2[TAG_ID2["ANNOTATION_XML"] = 3] = "ANNOTATION_XML";
  TAG_ID2[TAG_ID2["APPLET"] = 4] = "APPLET";
  TAG_ID2[TAG_ID2["AREA"] = 5] = "AREA";
  TAG_ID2[TAG_ID2["ARTICLE"] = 6] = "ARTICLE";
  TAG_ID2[TAG_ID2["ASIDE"] = 7] = "ASIDE";
  TAG_ID2[TAG_ID2["B"] = 8] = "B";
  TAG_ID2[TAG_ID2["BASE"] = 9] = "BASE";
  TAG_ID2[TAG_ID2["BASEFONT"] = 10] = "BASEFONT";
  TAG_ID2[TAG_ID2["BGSOUND"] = 11] = "BGSOUND";
  TAG_ID2[TAG_ID2["BIG"] = 12] = "BIG";
  TAG_ID2[TAG_ID2["BLOCKQUOTE"] = 13] = "BLOCKQUOTE";
  TAG_ID2[TAG_ID2["BODY"] = 14] = "BODY";
  TAG_ID2[TAG_ID2["BR"] = 15] = "BR";
  TAG_ID2[TAG_ID2["BUTTON"] = 16] = "BUTTON";
  TAG_ID2[TAG_ID2["CAPTION"] = 17] = "CAPTION";
  TAG_ID2[TAG_ID2["CENTER"] = 18] = "CENTER";
  TAG_ID2[TAG_ID2["CODE"] = 19] = "CODE";
  TAG_ID2[TAG_ID2["COL"] = 20] = "COL";
  TAG_ID2[TAG_ID2["COLGROUP"] = 21] = "COLGROUP";
  TAG_ID2[TAG_ID2["DD"] = 22] = "DD";
  TAG_ID2[TAG_ID2["DESC"] = 23] = "DESC";
  TAG_ID2[TAG_ID2["DETAILS"] = 24] = "DETAILS";
  TAG_ID2[TAG_ID2["DIALOG"] = 25] = "DIALOG";
  TAG_ID2[TAG_ID2["DIR"] = 26] = "DIR";
  TAG_ID2[TAG_ID2["DIV"] = 27] = "DIV";
  TAG_ID2[TAG_ID2["DL"] = 28] = "DL";
  TAG_ID2[TAG_ID2["DT"] = 29] = "DT";
  TAG_ID2[TAG_ID2["EM"] = 30] = "EM";
  TAG_ID2[TAG_ID2["EMBED"] = 31] = "EMBED";
  TAG_ID2[TAG_ID2["FIELDSET"] = 32] = "FIELDSET";
  TAG_ID2[TAG_ID2["FIGCAPTION"] = 33] = "FIGCAPTION";
  TAG_ID2[TAG_ID2["FIGURE"] = 34] = "FIGURE";
  TAG_ID2[TAG_ID2["FONT"] = 35] = "FONT";
  TAG_ID2[TAG_ID2["FOOTER"] = 36] = "FOOTER";
  TAG_ID2[TAG_ID2["FOREIGN_OBJECT"] = 37] = "FOREIGN_OBJECT";
  TAG_ID2[TAG_ID2["FORM"] = 38] = "FORM";
  TAG_ID2[TAG_ID2["FRAME"] = 39] = "FRAME";
  TAG_ID2[TAG_ID2["FRAMESET"] = 40] = "FRAMESET";
  TAG_ID2[TAG_ID2["H1"] = 41] = "H1";
  TAG_ID2[TAG_ID2["H2"] = 42] = "H2";
  TAG_ID2[TAG_ID2["H3"] = 43] = "H3";
  TAG_ID2[TAG_ID2["H4"] = 44] = "H4";
  TAG_ID2[TAG_ID2["H5"] = 45] = "H5";
  TAG_ID2[TAG_ID2["H6"] = 46] = "H6";
  TAG_ID2[TAG_ID2["HEAD"] = 47] = "HEAD";
  TAG_ID2[TAG_ID2["HEADER"] = 48] = "HEADER";
  TAG_ID2[TAG_ID2["HGROUP"] = 49] = "HGROUP";
  TAG_ID2[TAG_ID2["HR"] = 50] = "HR";
  TAG_ID2[TAG_ID2["HTML"] = 51] = "HTML";
  TAG_ID2[TAG_ID2["I"] = 52] = "I";
  TAG_ID2[TAG_ID2["IMG"] = 53] = "IMG";
  TAG_ID2[TAG_ID2["IMAGE"] = 54] = "IMAGE";
  TAG_ID2[TAG_ID2["INPUT"] = 55] = "INPUT";
  TAG_ID2[TAG_ID2["IFRAME"] = 56] = "IFRAME";
  TAG_ID2[TAG_ID2["KEYGEN"] = 57] = "KEYGEN";
  TAG_ID2[TAG_ID2["LABEL"] = 58] = "LABEL";
  TAG_ID2[TAG_ID2["LI"] = 59] = "LI";
  TAG_ID2[TAG_ID2["LINK"] = 60] = "LINK";
  TAG_ID2[TAG_ID2["LISTING"] = 61] = "LISTING";
  TAG_ID2[TAG_ID2["MAIN"] = 62] = "MAIN";
  TAG_ID2[TAG_ID2["MALIGNMARK"] = 63] = "MALIGNMARK";
  TAG_ID2[TAG_ID2["MARQUEE"] = 64] = "MARQUEE";
  TAG_ID2[TAG_ID2["MATH"] = 65] = "MATH";
  TAG_ID2[TAG_ID2["MENU"] = 66] = "MENU";
  TAG_ID2[TAG_ID2["META"] = 67] = "META";
  TAG_ID2[TAG_ID2["MGLYPH"] = 68] = "MGLYPH";
  TAG_ID2[TAG_ID2["MI"] = 69] = "MI";
  TAG_ID2[TAG_ID2["MO"] = 70] = "MO";
  TAG_ID2[TAG_ID2["MN"] = 71] = "MN";
  TAG_ID2[TAG_ID2["MS"] = 72] = "MS";
  TAG_ID2[TAG_ID2["MTEXT"] = 73] = "MTEXT";
  TAG_ID2[TAG_ID2["NAV"] = 74] = "NAV";
  TAG_ID2[TAG_ID2["NOBR"] = 75] = "NOBR";
  TAG_ID2[TAG_ID2["NOFRAMES"] = 76] = "NOFRAMES";
  TAG_ID2[TAG_ID2["NOEMBED"] = 77] = "NOEMBED";
  TAG_ID2[TAG_ID2["NOSCRIPT"] = 78] = "NOSCRIPT";
  TAG_ID2[TAG_ID2["OBJECT"] = 79] = "OBJECT";
  TAG_ID2[TAG_ID2["OL"] = 80] = "OL";
  TAG_ID2[TAG_ID2["OPTGROUP"] = 81] = "OPTGROUP";
  TAG_ID2[TAG_ID2["OPTION"] = 82] = "OPTION";
  TAG_ID2[TAG_ID2["P"] = 83] = "P";
  TAG_ID2[TAG_ID2["PARAM"] = 84] = "PARAM";
  TAG_ID2[TAG_ID2["PLAINTEXT"] = 85] = "PLAINTEXT";
  TAG_ID2[TAG_ID2["PRE"] = 86] = "PRE";
  TAG_ID2[TAG_ID2["RB"] = 87] = "RB";
  TAG_ID2[TAG_ID2["RP"] = 88] = "RP";
  TAG_ID2[TAG_ID2["RT"] = 89] = "RT";
  TAG_ID2[TAG_ID2["RTC"] = 90] = "RTC";
  TAG_ID2[TAG_ID2["RUBY"] = 91] = "RUBY";
  TAG_ID2[TAG_ID2["S"] = 92] = "S";
  TAG_ID2[TAG_ID2["SCRIPT"] = 93] = "SCRIPT";
  TAG_ID2[TAG_ID2["SECTION"] = 94] = "SECTION";
  TAG_ID2[TAG_ID2["SELECT"] = 95] = "SELECT";
  TAG_ID2[TAG_ID2["SOURCE"] = 96] = "SOURCE";
  TAG_ID2[TAG_ID2["SMALL"] = 97] = "SMALL";
  TAG_ID2[TAG_ID2["SPAN"] = 98] = "SPAN";
  TAG_ID2[TAG_ID2["STRIKE"] = 99] = "STRIKE";
  TAG_ID2[TAG_ID2["STRONG"] = 100] = "STRONG";
  TAG_ID2[TAG_ID2["STYLE"] = 101] = "STYLE";
  TAG_ID2[TAG_ID2["SUB"] = 102] = "SUB";
  TAG_ID2[TAG_ID2["SUMMARY"] = 103] = "SUMMARY";
  TAG_ID2[TAG_ID2["SUP"] = 104] = "SUP";
  TAG_ID2[TAG_ID2["TABLE"] = 105] = "TABLE";
  TAG_ID2[TAG_ID2["TBODY"] = 106] = "TBODY";
  TAG_ID2[TAG_ID2["TEMPLATE"] = 107] = "TEMPLATE";
  TAG_ID2[TAG_ID2["TEXTAREA"] = 108] = "TEXTAREA";
  TAG_ID2[TAG_ID2["TFOOT"] = 109] = "TFOOT";
  TAG_ID2[TAG_ID2["TD"] = 110] = "TD";
  TAG_ID2[TAG_ID2["TH"] = 111] = "TH";
  TAG_ID2[TAG_ID2["THEAD"] = 112] = "THEAD";
  TAG_ID2[TAG_ID2["TITLE"] = 113] = "TITLE";
  TAG_ID2[TAG_ID2["TR"] = 114] = "TR";
  TAG_ID2[TAG_ID2["TRACK"] = 115] = "TRACK";
  TAG_ID2[TAG_ID2["TT"] = 116] = "TT";
  TAG_ID2[TAG_ID2["U"] = 117] = "U";
  TAG_ID2[TAG_ID2["UL"] = 118] = "UL";
  TAG_ID2[TAG_ID2["SVG"] = 119] = "SVG";
  TAG_ID2[TAG_ID2["VAR"] = 120] = "VAR";
  TAG_ID2[TAG_ID2["WBR"] = 121] = "WBR";
  TAG_ID2[TAG_ID2["XMP"] = 122] = "XMP";
})(TAG_ID = TAG_ID || (TAG_ID = {}));
var TAG_NAME_TO_ID = new Map([
  [TAG_NAMES.A, TAG_ID.A],
  [TAG_NAMES.ADDRESS, TAG_ID.ADDRESS],
  [TAG_NAMES.ANNOTATION_XML, TAG_ID.ANNOTATION_XML],
  [TAG_NAMES.APPLET, TAG_ID.APPLET],
  [TAG_NAMES.AREA, TAG_ID.AREA],
  [TAG_NAMES.ARTICLE, TAG_ID.ARTICLE],
  [TAG_NAMES.ASIDE, TAG_ID.ASIDE],
  [TAG_NAMES.B, TAG_ID.B],
  [TAG_NAMES.BASE, TAG_ID.BASE],
  [TAG_NAMES.BASEFONT, TAG_ID.BASEFONT],
  [TAG_NAMES.BGSOUND, TAG_ID.BGSOUND],
  [TAG_NAMES.BIG, TAG_ID.BIG],
  [TAG_NAMES.BLOCKQUOTE, TAG_ID.BLOCKQUOTE],
  [TAG_NAMES.BODY, TAG_ID.BODY],
  [TAG_NAMES.BR, TAG_ID.BR],
  [TAG_NAMES.BUTTON, TAG_ID.BUTTON],
  [TAG_NAMES.CAPTION, TAG_ID.CAPTION],
  [TAG_NAMES.CENTER, TAG_ID.CENTER],
  [TAG_NAMES.CODE, TAG_ID.CODE],
  [TAG_NAMES.COL, TAG_ID.COL],
  [TAG_NAMES.COLGROUP, TAG_ID.COLGROUP],
  [TAG_NAMES.DD, TAG_ID.DD],
  [TAG_NAMES.DESC, TAG_ID.DESC],
  [TAG_NAMES.DETAILS, TAG_ID.DETAILS],
  [TAG_NAMES.DIALOG, TAG_ID.DIALOG],
  [TAG_NAMES.DIR, TAG_ID.DIR],
  [TAG_NAMES.DIV, TAG_ID.DIV],
  [TAG_NAMES.DL, TAG_ID.DL],
  [TAG_NAMES.DT, TAG_ID.DT],
  [TAG_NAMES.EM, TAG_ID.EM],
  [TAG_NAMES.EMBED, TAG_ID.EMBED],
  [TAG_NAMES.FIELDSET, TAG_ID.FIELDSET],
  [TAG_NAMES.FIGCAPTION, TAG_ID.FIGCAPTION],
  [TAG_NAMES.FIGURE, TAG_ID.FIGURE],
  [TAG_NAMES.FONT, TAG_ID.FONT],
  [TAG_NAMES.FOOTER, TAG_ID.FOOTER],
  [TAG_NAMES.FOREIGN_OBJECT, TAG_ID.FOREIGN_OBJECT],
  [TAG_NAMES.FORM, TAG_ID.FORM],
  [TAG_NAMES.FRAME, TAG_ID.FRAME],
  [TAG_NAMES.FRAMESET, TAG_ID.FRAMESET],
  [TAG_NAMES.H1, TAG_ID.H1],
  [TAG_NAMES.H2, TAG_ID.H2],
  [TAG_NAMES.H3, TAG_ID.H3],
  [TAG_NAMES.H4, TAG_ID.H4],
  [TAG_NAMES.H5, TAG_ID.H5],
  [TAG_NAMES.H6, TAG_ID.H6],
  [TAG_NAMES.HEAD, TAG_ID.HEAD],
  [TAG_NAMES.HEADER, TAG_ID.HEADER],
  [TAG_NAMES.HGROUP, TAG_ID.HGROUP],
  [TAG_NAMES.HR, TAG_ID.HR],
  [TAG_NAMES.HTML, TAG_ID.HTML],
  [TAG_NAMES.I, TAG_ID.I],
  [TAG_NAMES.IMG, TAG_ID.IMG],
  [TAG_NAMES.IMAGE, TAG_ID.IMAGE],
  [TAG_NAMES.INPUT, TAG_ID.INPUT],
  [TAG_NAMES.IFRAME, TAG_ID.IFRAME],
  [TAG_NAMES.KEYGEN, TAG_ID.KEYGEN],
  [TAG_NAMES.LABEL, TAG_ID.LABEL],
  [TAG_NAMES.LI, TAG_ID.LI],
  [TAG_NAMES.LINK, TAG_ID.LINK],
  [TAG_NAMES.LISTING, TAG_ID.LISTING],
  [TAG_NAMES.MAIN, TAG_ID.MAIN],
  [TAG_NAMES.MALIGNMARK, TAG_ID.MALIGNMARK],
  [TAG_NAMES.MARQUEE, TAG_ID.MARQUEE],
  [TAG_NAMES.MATH, TAG_ID.MATH],
  [TAG_NAMES.MENU, TAG_ID.MENU],
  [TAG_NAMES.META, TAG_ID.META],
  [TAG_NAMES.MGLYPH, TAG_ID.MGLYPH],
  [TAG_NAMES.MI, TAG_ID.MI],
  [TAG_NAMES.MO, TAG_ID.MO],
  [TAG_NAMES.MN, TAG_ID.MN],
  [TAG_NAMES.MS, TAG_ID.MS],
  [TAG_NAMES.MTEXT, TAG_ID.MTEXT],
  [TAG_NAMES.NAV, TAG_ID.NAV],
  [TAG_NAMES.NOBR, TAG_ID.NOBR],
  [TAG_NAMES.NOFRAMES, TAG_ID.NOFRAMES],
  [TAG_NAMES.NOEMBED, TAG_ID.NOEMBED],
  [TAG_NAMES.NOSCRIPT, TAG_ID.NOSCRIPT],
  [TAG_NAMES.OBJECT, TAG_ID.OBJECT],
  [TAG_NAMES.OL, TAG_ID.OL],
  [TAG_NAMES.OPTGROUP, TAG_ID.OPTGROUP],
  [TAG_NAMES.OPTION, TAG_ID.OPTION],
  [TAG_NAMES.P, TAG_ID.P],
  [TAG_NAMES.PARAM, TAG_ID.PARAM],
  [TAG_NAMES.PLAINTEXT, TAG_ID.PLAINTEXT],
  [TAG_NAMES.PRE, TAG_ID.PRE],
  [TAG_NAMES.RB, TAG_ID.RB],
  [TAG_NAMES.RP, TAG_ID.RP],
  [TAG_NAMES.RT, TAG_ID.RT],
  [TAG_NAMES.RTC, TAG_ID.RTC],
  [TAG_NAMES.RUBY, TAG_ID.RUBY],
  [TAG_NAMES.S, TAG_ID.S],
  [TAG_NAMES.SCRIPT, TAG_ID.SCRIPT],
  [TAG_NAMES.SECTION, TAG_ID.SECTION],
  [TAG_NAMES.SELECT, TAG_ID.SELECT],
  [TAG_NAMES.SOURCE, TAG_ID.SOURCE],
  [TAG_NAMES.SMALL, TAG_ID.SMALL],
  [TAG_NAMES.SPAN, TAG_ID.SPAN],
  [TAG_NAMES.STRIKE, TAG_ID.STRIKE],
  [TAG_NAMES.STRONG, TAG_ID.STRONG],
  [TAG_NAMES.STYLE, TAG_ID.STYLE],
  [TAG_NAMES.SUB, TAG_ID.SUB],
  [TAG_NAMES.SUMMARY, TAG_ID.SUMMARY],
  [TAG_NAMES.SUP, TAG_ID.SUP],
  [TAG_NAMES.TABLE, TAG_ID.TABLE],
  [TAG_NAMES.TBODY, TAG_ID.TBODY],
  [TAG_NAMES.TEMPLATE, TAG_ID.TEMPLATE],
  [TAG_NAMES.TEXTAREA, TAG_ID.TEXTAREA],
  [TAG_NAMES.TFOOT, TAG_ID.TFOOT],
  [TAG_NAMES.TD, TAG_ID.TD],
  [TAG_NAMES.TH, TAG_ID.TH],
  [TAG_NAMES.THEAD, TAG_ID.THEAD],
  [TAG_NAMES.TITLE, TAG_ID.TITLE],
  [TAG_NAMES.TR, TAG_ID.TR],
  [TAG_NAMES.TRACK, TAG_ID.TRACK],
  [TAG_NAMES.TT, TAG_ID.TT],
  [TAG_NAMES.U, TAG_ID.U],
  [TAG_NAMES.UL, TAG_ID.UL],
  [TAG_NAMES.SVG, TAG_ID.SVG],
  [TAG_NAMES.VAR, TAG_ID.VAR],
  [TAG_NAMES.WBR, TAG_ID.WBR],
  [TAG_NAMES.XMP, TAG_ID.XMP]
]);
var $ = TAG_ID;
var SPECIAL_ELEMENTS = {
  [NS.HTML]: new Set([
    $.ADDRESS,
    $.APPLET,
    $.AREA,
    $.ARTICLE,
    $.ASIDE,
    $.BASE,
    $.BASEFONT,
    $.BGSOUND,
    $.BLOCKQUOTE,
    $.BODY,
    $.BR,
    $.BUTTON,
    $.CAPTION,
    $.CENTER,
    $.COL,
    $.COLGROUP,
    $.DD,
    $.DETAILS,
    $.DIR,
    $.DIV,
    $.DL,
    $.DT,
    $.EMBED,
    $.FIELDSET,
    $.FIGCAPTION,
    $.FIGURE,
    $.FOOTER,
    $.FORM,
    $.FRAME,
    $.FRAMESET,
    $.H1,
    $.H2,
    $.H3,
    $.H4,
    $.H5,
    $.H6,
    $.HEAD,
    $.HEADER,
    $.HGROUP,
    $.HR,
    $.HTML,
    $.IFRAME,
    $.IMG,
    $.INPUT,
    $.LI,
    $.LINK,
    $.LISTING,
    $.MAIN,
    $.MARQUEE,
    $.MENU,
    $.META,
    $.NAV,
    $.NOEMBED,
    $.NOFRAMES,
    $.NOSCRIPT,
    $.OBJECT,
    $.OL,
    $.P,
    $.PARAM,
    $.PLAINTEXT,
    $.PRE,
    $.SCRIPT,
    $.SECTION,
    $.SELECT,
    $.SOURCE,
    $.STYLE,
    $.SUMMARY,
    $.TABLE,
    $.TBODY,
    $.TD,
    $.TEMPLATE,
    $.TEXTAREA,
    $.TFOOT,
    $.TH,
    $.THEAD,
    $.TITLE,
    $.TR,
    $.TRACK,
    $.UL,
    $.WBR,
    $.XMP
  ]),
  [NS.MATHML]: new Set([$.MI, $.MO, $.MN, $.MS, $.MTEXT, $.ANNOTATION_XML]),
  [NS.SVG]: new Set([$.TITLE, $.FOREIGN_OBJECT, $.DESC]),
  [NS.XLINK]: new Set,
  [NS.XML]: new Set,
  [NS.XMLNS]: new Set
};
var UNESCAPED_TEXT = new Set([
  TAG_NAMES.STYLE,
  TAG_NAMES.SCRIPT,
  TAG_NAMES.XMP,
  TAG_NAMES.IFRAME,
  TAG_NAMES.NOEMBED,
  TAG_NAMES.NOFRAMES,
  TAG_NAMES.PLAINTEXT
]);

// node_modules/parse5/dist/tokenizer/index.js
function isAsciiDigit(cp) {
  return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;
}
function isAsciiUpper(cp) {
  return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;
}
function isAsciiLower(cp) {
  return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;
}
function isAsciiLetter(cp) {
  return isAsciiLower(cp) || isAsciiUpper(cp);
}
function isAsciiAlphaNumeric2(cp) {
  return isAsciiLetter(cp) || isAsciiDigit(cp);
}
function isAsciiUpperHexDigit(cp) {
  return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;
}
function isAsciiLowerHexDigit(cp) {
  return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;
}
function isAsciiHexDigit(cp) {
  return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);
}
function toAsciiLower(cp) {
  return cp + 32;
}
function isWhitespace2(cp) {
  return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;
}
function isEntityInAttributeInvalidEnd2(nextCp) {
  return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric2(nextCp);
}
function isScriptDataDoubleEscapeSequenceEnd(cp) {
  return isWhitespace2(cp) || cp === CODE_POINTS.SOLIDUS || cp === CODE_POINTS.GREATER_THAN_SIGN;
}
var C1_CONTROLS_REFERENCE_REPLACEMENTS = new Map([
  [128, 8364],
  [130, 8218],
  [131, 402],
  [132, 8222],
  [133, 8230],
  [134, 8224],
  [135, 8225],
  [136, 710],
  [137, 8240],
  [138, 352],
  [139, 8249],
  [140, 338],
  [142, 381],
  [145, 8216],
  [146, 8217],
  [147, 8220],
  [148, 8221],
  [149, 8226],
  [150, 8211],
  [151, 8212],
  [152, 732],
  [153, 8482],
  [154, 353],
  [155, 8250],
  [156, 339],
  [158, 382],
  [159, 376]
]);
var State;
(function(State2) {
  State2[State2["DATA"] = 0] = "DATA";
  State2[State2["RCDATA"] = 1] = "RCDATA";
  State2[State2["RAWTEXT"] = 2] = "RAWTEXT";
  State2[State2["SCRIPT_DATA"] = 3] = "SCRIPT_DATA";
  State2[State2["PLAINTEXT"] = 4] = "PLAINTEXT";
  State2[State2["TAG_OPEN"] = 5] = "TAG_OPEN";
  State2[State2["END_TAG_OPEN"] = 6] = "END_TAG_OPEN";
  State2[State2["TAG_NAME"] = 7] = "TAG_NAME";
  State2[State2["RCDATA_LESS_THAN_SIGN"] = 8] = "RCDATA_LESS_THAN_SIGN";
  State2[State2["RCDATA_END_TAG_OPEN"] = 9] = "RCDATA_END_TAG_OPEN";
  State2[State2["RCDATA_END_TAG_NAME"] = 10] = "RCDATA_END_TAG_NAME";
  State2[State2["RAWTEXT_LESS_THAN_SIGN"] = 11] = "RAWTEXT_LESS_THAN_SIGN";
  State2[State2["RAWTEXT_END_TAG_OPEN"] = 12] = "RAWTEXT_END_TAG_OPEN";
  State2[State2["RAWTEXT_END_TAG_NAME"] = 13] = "RAWTEXT_END_TAG_NAME";
  State2[State2["SCRIPT_DATA_LESS_THAN_SIGN"] = 14] = "SCRIPT_DATA_LESS_THAN_SIGN";
  State2[State2["SCRIPT_DATA_END_TAG_OPEN"] = 15] = "SCRIPT_DATA_END_TAG_OPEN";
  State2[State2["SCRIPT_DATA_END_TAG_NAME"] = 16] = "SCRIPT_DATA_END_TAG_NAME";
  State2[State2["SCRIPT_DATA_ESCAPE_START"] = 17] = "SCRIPT_DATA_ESCAPE_START";
  State2[State2["SCRIPT_DATA_ESCAPE_START_DASH"] = 18] = "SCRIPT_DATA_ESCAPE_START_DASH";
  State2[State2["SCRIPT_DATA_ESCAPED"] = 19] = "SCRIPT_DATA_ESCAPED";
  State2[State2["SCRIPT_DATA_ESCAPED_DASH"] = 20] = "SCRIPT_DATA_ESCAPED_DASH";
  State2[State2["SCRIPT_DATA_ESCAPED_DASH_DASH"] = 21] = "SCRIPT_DATA_ESCAPED_DASH_DASH";
  State2[State2["SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN"] = 22] = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN";
  State2[State2["SCRIPT_DATA_ESCAPED_END_TAG_OPEN"] = 23] = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN";
  State2[State2["SCRIPT_DATA_ESCAPED_END_TAG_NAME"] = 24] = "SCRIPT_DATA_ESCAPED_END_TAG_NAME";
  State2[State2["SCRIPT_DATA_DOUBLE_ESCAPE_START"] = 25] = "SCRIPT_DATA_DOUBLE_ESCAPE_START";
  State2[State2["SCRIPT_DATA_DOUBLE_ESCAPED"] = 26] = "SCRIPT_DATA_DOUBLE_ESCAPED";
  State2[State2["SCRIPT_DATA_DOUBLE_ESCAPED_DASH"] = 27] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH";
  State2[State2["SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH"] = 28] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH";
  State2[State2["SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN"] = 29] = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN";
  State2[State2["SCRIPT_DATA_DOUBLE_ESCAPE_END"] = 30] = "SCRIPT_DATA_DOUBLE_ESCAPE_END";
  State2[State2["BEFORE_ATTRIBUTE_NAME"] = 31] = "BEFORE_ATTRIBUTE_NAME";
  State2[State2["ATTRIBUTE_NAME"] = 32] = "ATTRIBUTE_NAME";
  State2[State2["AFTER_ATTRIBUTE_NAME"] = 33] = "AFTER_ATTRIBUTE_NAME";
  State2[State2["BEFORE_ATTRIBUTE_VALUE"] = 34] = "BEFORE_ATTRIBUTE_VALUE";
  State2[State2["ATTRIBUTE_VALUE_DOUBLE_QUOTED"] = 35] = "ATTRIBUTE_VALUE_DOUBLE_QUOTED";
  State2[State2["ATTRIBUTE_VALUE_SINGLE_QUOTED"] = 36] = "ATTRIBUTE_VALUE_SINGLE_QUOTED";
  State2[State2["ATTRIBUTE_VALUE_UNQUOTED"] = 37] = "ATTRIBUTE_VALUE_UNQUOTED";
  State2[State2["AFTER_ATTRIBUTE_VALUE_QUOTED"] = 38] = "AFTER_ATTRIBUTE_VALUE_QUOTED";
  State2[State2["SELF_CLOSING_START_TAG"] = 39] = "SELF_CLOSING_START_TAG";
  State2[State2["BOGUS_COMMENT"] = 40] = "BOGUS_COMMENT";
  State2[State2["MARKUP_DECLARATION_OPEN"] = 41] = "MARKUP_DECLARATION_OPEN";
  State2[State2["COMMENT_START"] = 42] = "COMMENT_START";
  State2[State2["COMMENT_START_DASH"] = 43] = "COMMENT_START_DASH";
  State2[State2["COMMENT"] = 44] = "COMMENT";
  State2[State2["COMMENT_LESS_THAN_SIGN"] = 45] = "COMMENT_LESS_THAN_SIGN";
  State2[State2["COMMENT_LESS_THAN_SIGN_BANG"] = 46] = "COMMENT_LESS_THAN_SIGN_BANG";
  State2[State2["COMMENT_LESS_THAN_SIGN_BANG_DASH"] = 47] = "COMMENT_LESS_THAN_SIGN_BANG_DASH";
  State2[State2["COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH"] = 48] = "COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH";
  State2[State2["COMMENT_END_DASH"] = 49] = "COMMENT_END_DASH";
  State2[State2["COMMENT_END"] = 50] = "COMMENT_END";
  State2[State2["COMMENT_END_BANG"] = 51] = "COMMENT_END_BANG";
  State2[State2["DOCTYPE"] = 52] = "DOCTYPE";
  State2[State2["BEFORE_DOCTYPE_NAME"] = 53] = "BEFORE_DOCTYPE_NAME";
  State2[State2["DOCTYPE_NAME"] = 54] = "DOCTYPE_NAME";
  State2[State2["AFTER_DOCTYPE_NAME"] = 55] = "AFTER_DOCTYPE_NAME";
  State2[State2["AFTER_DOCTYPE_PUBLIC_KEYWORD"] = 56] = "AFTER_DOCTYPE_PUBLIC_KEYWORD";
  State2[State2["BEFORE_DOCTYPE_PUBLIC_IDENTIFIER"] = 57] = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER";
  State2[State2["DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED"] = 58] = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED";
  State2[State2["DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED"] = 59] = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED";
  State2[State2["AFTER_DOCTYPE_PUBLIC_IDENTIFIER"] = 60] = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER";
  State2[State2["BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS"] = 61] = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS";
  State2[State2["AFTER_DOCTYPE_SYSTEM_KEYWORD"] = 62] = "AFTER_DOCTYPE_SYSTEM_KEYWORD";
  State2[State2["BEFORE_DOCTYPE_SYSTEM_IDENTIFIER"] = 63] = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER";
  State2[State2["DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED"] = 64] = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED";
  State2[State2["DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED"] = 65] = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED";
  State2[State2["AFTER_DOCTYPE_SYSTEM_IDENTIFIER"] = 66] = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER";
  State2[State2["BOGUS_DOCTYPE"] = 67] = "BOGUS_DOCTYPE";
  State2[State2["CDATA_SECTION"] = 68] = "CDATA_SECTION";
  State2[State2["CDATA_SECTION_BRACKET"] = 69] = "CDATA_SECTION_BRACKET";
  State2[State2["CDATA_SECTION_END"] = 70] = "CDATA_SECTION_END";
  State2[State2["CHARACTER_REFERENCE"] = 71] = "CHARACTER_REFERENCE";
  State2[State2["NAMED_CHARACTER_REFERENCE"] = 72] = "NAMED_CHARACTER_REFERENCE";
  State2[State2["AMBIGUOUS_AMPERSAND"] = 73] = "AMBIGUOUS_AMPERSAND";
  State2[State2["NUMERIC_CHARACTER_REFERENCE"] = 74] = "NUMERIC_CHARACTER_REFERENCE";
  State2[State2["HEXADEMICAL_CHARACTER_REFERENCE_START"] = 75] = "HEXADEMICAL_CHARACTER_REFERENCE_START";
  State2[State2["HEXADEMICAL_CHARACTER_REFERENCE"] = 76] = "HEXADEMICAL_CHARACTER_REFERENCE";
  State2[State2["DECIMAL_CHARACTER_REFERENCE"] = 77] = "DECIMAL_CHARACTER_REFERENCE";
  State2[State2["NUMERIC_CHARACTER_REFERENCE_END"] = 78] = "NUMERIC_CHARACTER_REFERENCE_END";
})(State || (State = {}));
var TokenizerMode = {
  DATA: State.DATA,
  RCDATA: State.RCDATA,
  RAWTEXT: State.RAWTEXT,
  SCRIPT_DATA: State.SCRIPT_DATA,
  PLAINTEXT: State.PLAINTEXT,
  CDATA_SECTION: State.CDATA_SECTION
};

class Tokenizer {
  constructor(options3, handler) {
    this.options = options3;
    this.handler = handler;
    this.paused = false;
    this.inLoop = false;
    this.inForeignNode = false;
    this.lastStartTagName = "";
    this.active = false;
    this.state = State.DATA;
    this.returnState = State.DATA;
    this.charRefCode = -1;
    this.consumedAfterSnapshot = -1;
    this.currentCharacterToken = null;
    this.currentToken = null;
    this.currentAttr = { name: "", value: "" };
    this.preprocessor = new Preprocessor(handler);
    this.currentLocation = this.getCurrentLocation(-1);
  }
  _err(code) {
    var _a2, _b;
    (_b = (_a2 = this.handler).onParseError) === null || _b === undefined || _b.call(_a2, this.preprocessor.getError(code));
  }
  getCurrentLocation(offset) {
    if (!this.options.sourceCodeLocationInfo) {
      return null;
    }
    return {
      startLine: this.preprocessor.line,
      startCol: this.preprocessor.col - offset,
      startOffset: this.preprocessor.offset - offset,
      endLine: -1,
      endCol: -1,
      endOffset: -1
    };
  }
  _runParsingLoop() {
    if (this.inLoop)
      return;
    this.inLoop = true;
    while (this.active && !this.paused) {
      this.consumedAfterSnapshot = 0;
      const cp = this._consume();
      if (!this._ensureHibernation()) {
        this._callState(cp);
      }
    }
    this.inLoop = false;
  }
  pause() {
    this.paused = true;
  }
  resume(writeCallback) {
    if (!this.paused) {
      throw new Error("Parser was already resumed");
    }
    this.paused = false;
    if (this.inLoop)
      return;
    this._runParsingLoop();
    if (!this.paused) {
      writeCallback === null || writeCallback === undefined || writeCallback();
    }
  }
  write(chunk, isLastChunk, writeCallback) {
    this.active = true;
    this.preprocessor.write(chunk, isLastChunk);
    this._runParsingLoop();
    if (!this.paused) {
      writeCallback === null || writeCallback === undefined || writeCallback();
    }
  }
  insertHtmlAtCurrentPos(chunk) {
    this.active = true;
    this.preprocessor.insertHtmlAtCurrentPos(chunk);
    this._runParsingLoop();
  }
  _ensureHibernation() {
    if (this.preprocessor.endOfChunkHit) {
      this._unconsume(this.consumedAfterSnapshot);
      this.active = false;
      return true;
    }
    return false;
  }
  _consume() {
    this.consumedAfterSnapshot++;
    return this.preprocessor.advance();
  }
  _unconsume(count) {
    this.consumedAfterSnapshot -= count;
    this.preprocessor.retreat(count);
  }
  _reconsumeInState(state, cp) {
    this.state = state;
    this._callState(cp);
  }
  _advanceBy(count) {
    this.consumedAfterSnapshot += count;
    for (let i3 = 0;i3 < count; i3++) {
      this.preprocessor.advance();
    }
  }
  _consumeSequenceIfMatch(pattern4, caseSensitive) {
    if (this.preprocessor.startsWith(pattern4, caseSensitive)) {
      this._advanceBy(pattern4.length - 1);
      return true;
    }
    return false;
  }
  _createStartTagToken() {
    this.currentToken = {
      type: TokenType.START_TAG,
      tagName: "",
      tagID: TAG_ID.UNKNOWN,
      selfClosing: false,
      ackSelfClosing: false,
      attrs: [],
      location: this.getCurrentLocation(1)
    };
  }
  _createEndTagToken() {
    this.currentToken = {
      type: TokenType.END_TAG,
      tagName: "",
      tagID: TAG_ID.UNKNOWN,
      selfClosing: false,
      ackSelfClosing: false,
      attrs: [],
      location: this.getCurrentLocation(2)
    };
  }
  _createCommentToken(offset) {
    this.currentToken = {
      type: TokenType.COMMENT,
      data: "",
      location: this.getCurrentLocation(offset)
    };
  }
  _createDoctypeToken(initialName) {
    this.currentToken = {
      type: TokenType.DOCTYPE,
      name: initialName,
      forceQuirks: false,
      publicId: null,
      systemId: null,
      location: this.currentLocation
    };
  }
  _createCharacterToken(type47, chars) {
    this.currentCharacterToken = {
      type: type47,
      chars,
      location: this.currentLocation
    };
  }
  _createAttr(attrNameFirstCh) {
    this.currentAttr = {
      name: attrNameFirstCh,
      value: ""
    };
    this.currentLocation = this.getCurrentLocation(0);
  }
  _leaveAttrName() {
    var _a2;
    var _b;
    const token2 = this.currentToken;
    if (getTokenAttr(token2, this.currentAttr.name) === null) {
      token2.attrs.push(this.currentAttr);
      if (token2.location && this.currentLocation) {
        const attrLocations = (_a2 = (_b = token2.location).attrs) !== null && _a2 !== undefined ? _a2 : _b.attrs = Object.create(null);
        attrLocations[this.currentAttr.name] = this.currentLocation;
        this._leaveAttrValue();
      }
    } else {
      this._err(ERR.duplicateAttribute);
    }
  }
  _leaveAttrValue() {
    if (this.currentLocation) {
      this.currentLocation.endLine = this.preprocessor.line;
      this.currentLocation.endCol = this.preprocessor.col;
      this.currentLocation.endOffset = this.preprocessor.offset;
    }
  }
  prepareToken(ct) {
    this._emitCurrentCharacterToken(ct.location);
    this.currentToken = null;
    if (ct.location) {
      ct.location.endLine = this.preprocessor.line;
      ct.location.endCol = this.preprocessor.col + 1;
      ct.location.endOffset = this.preprocessor.offset + 1;
    }
    this.currentLocation = this.getCurrentLocation(-1);
  }
  emitCurrentTagToken() {
    const ct = this.currentToken;
    this.prepareToken(ct);
    ct.tagID = getTagID(ct.tagName);
    if (ct.type === TokenType.START_TAG) {
      this.lastStartTagName = ct.tagName;
      this.handler.onStartTag(ct);
    } else {
      if (ct.attrs.length > 0) {
        this._err(ERR.endTagWithAttributes);
      }
      if (ct.selfClosing) {
        this._err(ERR.endTagWithTrailingSolidus);
      }
      this.handler.onEndTag(ct);
    }
    this.preprocessor.dropParsedChunk();
  }
  emitCurrentComment(ct) {
    this.prepareToken(ct);
    this.handler.onComment(ct);
    this.preprocessor.dropParsedChunk();
  }
  emitCurrentDoctype(ct) {
    this.prepareToken(ct);
    this.handler.onDoctype(ct);
    this.preprocessor.dropParsedChunk();
  }
  _emitCurrentCharacterToken(nextLocation) {
    if (this.currentCharacterToken) {
      if (nextLocation && this.currentCharacterToken.location) {
        this.currentCharacterToken.location.endLine = nextLocation.startLine;
        this.currentCharacterToken.location.endCol = nextLocation.startCol;
        this.currentCharacterToken.location.endOffset = nextLocation.startOffset;
      }
      switch (this.currentCharacterToken.type) {
        case TokenType.CHARACTER: {
          this.handler.onCharacter(this.currentCharacterToken);
          break;
        }
        case TokenType.NULL_CHARACTER: {
          this.handler.onNullCharacter(this.currentCharacterToken);
          break;
        }
        case TokenType.WHITESPACE_CHARACTER: {
          this.handler.onWhitespaceCharacter(this.currentCharacterToken);
          break;
        }
      }
      this.currentCharacterToken = null;
    }
  }
  _emitEOFToken() {
    const location = this.getCurrentLocation(0);
    if (location) {
      location.endLine = location.startLine;
      location.endCol = location.startCol;
      location.endOffset = location.startOffset;
    }
    this._emitCurrentCharacterToken(location);
    this.handler.onEof({ type: TokenType.EOF, location });
    this.active = false;
  }
  _appendCharToCurrentCharacterToken(type47, ch) {
    if (this.currentCharacterToken) {
      if (this.currentCharacterToken.type !== type47) {
        this.currentLocation = this.getCurrentLocation(0);
        this._emitCurrentCharacterToken(this.currentLocation);
        this.preprocessor.dropParsedChunk();
      } else {
        this.currentCharacterToken.chars += ch;
        return;
      }
    }
    this._createCharacterToken(type47, ch);
  }
  _emitCodePoint(cp) {
    const type47 = isWhitespace2(cp) ? TokenType.WHITESPACE_CHARACTER : cp === CODE_POINTS.NULL ? TokenType.NULL_CHARACTER : TokenType.CHARACTER;
    this._appendCharToCurrentCharacterToken(type47, String.fromCodePoint(cp));
  }
  _emitChars(ch) {
    this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);
  }
  _matchNamedCharacterReference(cp) {
    let result = null;
    let excess = 0;
    let withoutSemicolon = false;
    for (let i3 = 0, current = decode_data_html_default[0];i3 >= 0; cp = this._consume()) {
      i3 = determineBranch(decode_data_html_default, current, i3 + 1, cp);
      if (i3 < 0)
        break;
      excess += 1;
      current = decode_data_html_default[i3];
      const masked = current & BinTrieFlags.VALUE_LENGTH;
      if (masked) {
        const valueLength = (masked >> 14) - 1;
        if (cp !== CODE_POINTS.SEMICOLON && this._isCharacterReferenceInAttribute() && isEntityInAttributeInvalidEnd2(this.preprocessor.peek(1))) {
          result = [CODE_POINTS.AMPERSAND];
          i3 += valueLength;
        } else {
          result = valueLength === 0 ? [decode_data_html_default[i3] & ~BinTrieFlags.VALUE_LENGTH] : valueLength === 1 ? [decode_data_html_default[++i3]] : [decode_data_html_default[++i3], decode_data_html_default[++i3]];
          excess = 0;
          withoutSemicolon = cp !== CODE_POINTS.SEMICOLON;
        }
        if (valueLength === 0) {
          this._consume();
          break;
        }
      }
    }
    this._unconsume(excess);
    if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {
      this._err(ERR.missingSemicolonAfterCharacterReference);
    }
    this._unconsume(1);
    return result;
  }
  _isCharacterReferenceInAttribute() {
    return this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED;
  }
  _flushCodePointConsumedAsCharacterReference(cp) {
    if (this._isCharacterReferenceInAttribute()) {
      this.currentAttr.value += String.fromCodePoint(cp);
    } else {
      this._emitCodePoint(cp);
    }
  }
  _callState(cp) {
    switch (this.state) {
      case State.DATA: {
        this._stateData(cp);
        break;
      }
      case State.RCDATA: {
        this._stateRcdata(cp);
        break;
      }
      case State.RAWTEXT: {
        this._stateRawtext(cp);
        break;
      }
      case State.SCRIPT_DATA: {
        this._stateScriptData(cp);
        break;
      }
      case State.PLAINTEXT: {
        this._statePlaintext(cp);
        break;
      }
      case State.TAG_OPEN: {
        this._stateTagOpen(cp);
        break;
      }
      case State.END_TAG_OPEN: {
        this._stateEndTagOpen(cp);
        break;
      }
      case State.TAG_NAME: {
        this._stateTagName(cp);
        break;
      }
      case State.RCDATA_LESS_THAN_SIGN: {
        this._stateRcdataLessThanSign(cp);
        break;
      }
      case State.RCDATA_END_TAG_OPEN: {
        this._stateRcdataEndTagOpen(cp);
        break;
      }
      case State.RCDATA_END_TAG_NAME: {
        this._stateRcdataEndTagName(cp);
        break;
      }
      case State.RAWTEXT_LESS_THAN_SIGN: {
        this._stateRawtextLessThanSign(cp);
        break;
      }
      case State.RAWTEXT_END_TAG_OPEN: {
        this._stateRawtextEndTagOpen(cp);
        break;
      }
      case State.RAWTEXT_END_TAG_NAME: {
        this._stateRawtextEndTagName(cp);
        break;
      }
      case State.SCRIPT_DATA_LESS_THAN_SIGN: {
        this._stateScriptDataLessThanSign(cp);
        break;
      }
      case State.SCRIPT_DATA_END_TAG_OPEN: {
        this._stateScriptDataEndTagOpen(cp);
        break;
      }
      case State.SCRIPT_DATA_END_TAG_NAME: {
        this._stateScriptDataEndTagName(cp);
        break;
      }
      case State.SCRIPT_DATA_ESCAPE_START: {
        this._stateScriptDataEscapeStart(cp);
        break;
      }
      case State.SCRIPT_DATA_ESCAPE_START_DASH: {
        this._stateScriptDataEscapeStartDash(cp);
        break;
      }
      case State.SCRIPT_DATA_ESCAPED: {
        this._stateScriptDataEscaped(cp);
        break;
      }
      case State.SCRIPT_DATA_ESCAPED_DASH: {
        this._stateScriptDataEscapedDash(cp);
        break;
      }
      case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {
        this._stateScriptDataEscapedDashDash(cp);
        break;
      }
      case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {
        this._stateScriptDataEscapedLessThanSign(cp);
        break;
      }
      case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {
        this._stateScriptDataEscapedEndTagOpen(cp);
        break;
      }
      case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {
        this._stateScriptDataEscapedEndTagName(cp);
        break;
      }
      case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {
        this._stateScriptDataDoubleEscapeStart(cp);
        break;
      }
      case State.SCRIPT_DATA_DOUBLE_ESCAPED: {
        this._stateScriptDataDoubleEscaped(cp);
        break;
      }
      case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {
        this._stateScriptDataDoubleEscapedDash(cp);
        break;
      }
      case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {
        this._stateScriptDataDoubleEscapedDashDash(cp);
        break;
      }
      case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {
        this._stateScriptDataDoubleEscapedLessThanSign(cp);
        break;
      }
      case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {
        this._stateScriptDataDoubleEscapeEnd(cp);
        break;
      }
      case State.BEFORE_ATTRIBUTE_NAME: {
        this._stateBeforeAttributeName(cp);
        break;
      }
      case State.ATTRIBUTE_NAME: {
        this._stateAttributeName(cp);
        break;
      }
      case State.AFTER_ATTRIBUTE_NAME: {
        this._stateAfterAttributeName(cp);
        break;
      }
      case State.BEFORE_ATTRIBUTE_VALUE: {
        this._stateBeforeAttributeValue(cp);
        break;
      }
      case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {
        this._stateAttributeValueDoubleQuoted(cp);
        break;
      }
      case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {
        this._stateAttributeValueSingleQuoted(cp);
        break;
      }
      case State.ATTRIBUTE_VALUE_UNQUOTED: {
        this._stateAttributeValueUnquoted(cp);
        break;
      }
      case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {
        this._stateAfterAttributeValueQuoted(cp);
        break;
      }
      case State.SELF_CLOSING_START_TAG: {
        this._stateSelfClosingStartTag(cp);
        break;
      }
      case State.BOGUS_COMMENT: {
        this._stateBogusComment(cp);
        break;
      }
      case State.MARKUP_DECLARATION_OPEN: {
        this._stateMarkupDeclarationOpen(cp);
        break;
      }
      case State.COMMENT_START: {
        this._stateCommentStart(cp);
        break;
      }
      case State.COMMENT_START_DASH: {
        this._stateCommentStartDash(cp);
        break;
      }
      case State.COMMENT: {
        this._stateComment(cp);
        break;
      }
      case State.COMMENT_LESS_THAN_SIGN: {
        this._stateCommentLessThanSign(cp);
        break;
      }
      case State.COMMENT_LESS_THAN_SIGN_BANG: {
        this._stateCommentLessThanSignBang(cp);
        break;
      }
      case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {
        this._stateCommentLessThanSignBangDash(cp);
        break;
      }
      case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {
        this._stateCommentLessThanSignBangDashDash(cp);
        break;
      }
      case State.COMMENT_END_DASH: {
        this._stateCommentEndDash(cp);
        break;
      }
      case State.COMMENT_END: {
        this._stateCommentEnd(cp);
        break;
      }
      case State.COMMENT_END_BANG: {
        this._stateCommentEndBang(cp);
        break;
      }
      case State.DOCTYPE: {
        this._stateDoctype(cp);
        break;
      }
      case State.BEFORE_DOCTYPE_NAME: {
        this._stateBeforeDoctypeName(cp);
        break;
      }
      case State.DOCTYPE_NAME: {
        this._stateDoctypeName(cp);
        break;
      }
      case State.AFTER_DOCTYPE_NAME: {
        this._stateAfterDoctypeName(cp);
        break;
      }
      case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {
        this._stateAfterDoctypePublicKeyword(cp);
        break;
      }
      case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {
        this._stateBeforeDoctypePublicIdentifier(cp);
        break;
      }
      case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {
        this._stateDoctypePublicIdentifierDoubleQuoted(cp);
        break;
      }
      case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {
        this._stateDoctypePublicIdentifierSingleQuoted(cp);
        break;
      }
      case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {
        this._stateAfterDoctypePublicIdentifier(cp);
        break;
      }
      case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {
        this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);
        break;
      }
      case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {
        this._stateAfterDoctypeSystemKeyword(cp);
        break;
      }
      case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {
        this._stateBeforeDoctypeSystemIdentifier(cp);
        break;
      }
      case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {
        this._stateDoctypeSystemIdentifierDoubleQuoted(cp);
        break;
      }
      case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {
        this._stateDoctypeSystemIdentifierSingleQuoted(cp);
        break;
      }
      case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {
        this._stateAfterDoctypeSystemIdentifier(cp);
        break;
      }
      case State.BOGUS_DOCTYPE: {
        this._stateBogusDoctype(cp);
        break;
      }
      case State.CDATA_SECTION: {
        this._stateCdataSection(cp);
        break;
      }
      case State.CDATA_SECTION_BRACKET: {
        this._stateCdataSectionBracket(cp);
        break;
      }
      case State.CDATA_SECTION_END: {
        this._stateCdataSectionEnd(cp);
        break;
      }
      case State.CHARACTER_REFERENCE: {
        this._stateCharacterReference(cp);
        break;
      }
      case State.NAMED_CHARACTER_REFERENCE: {
        this._stateNamedCharacterReference(cp);
        break;
      }
      case State.AMBIGUOUS_AMPERSAND: {
        this._stateAmbiguousAmpersand(cp);
        break;
      }
      case State.NUMERIC_CHARACTER_REFERENCE: {
        this._stateNumericCharacterReference(cp);
        break;
      }
      case State.HEXADEMICAL_CHARACTER_REFERENCE_START: {
        this._stateHexademicalCharacterReferenceStart(cp);
        break;
      }
      case State.HEXADEMICAL_CHARACTER_REFERENCE: {
        this._stateHexademicalCharacterReference(cp);
        break;
      }
      case State.DECIMAL_CHARACTER_REFERENCE: {
        this._stateDecimalCharacterReference(cp);
        break;
      }
      case State.NUMERIC_CHARACTER_REFERENCE_END: {
        this._stateNumericCharacterReferenceEnd(cp);
        break;
      }
      default: {
        throw new Error("Unknown state");
      }
    }
  }
  _stateData(cp) {
    switch (cp) {
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.TAG_OPEN;
        break;
      }
      case CODE_POINTS.AMPERSAND: {
        this.returnState = State.DATA;
        this.state = State.CHARACTER_REFERENCE;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitCodePoint(cp);
        break;
      }
      case CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  _stateRcdata(cp) {
    switch (cp) {
      case CODE_POINTS.AMPERSAND: {
        this.returnState = State.RCDATA;
        this.state = State.CHARACTER_REFERENCE;
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.RCDATA_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  _stateRawtext(cp) {
    switch (cp) {
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.RAWTEXT_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  _stateScriptData(cp) {
    switch (cp) {
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  _statePlaintext(cp) {
    switch (cp) {
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  _stateTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this._createStartTagToken();
      this.state = State.TAG_NAME;
      this._stateTagName(cp);
    } else
      switch (cp) {
        case CODE_POINTS.EXCLAMATION_MARK: {
          this.state = State.MARKUP_DECLARATION_OPEN;
          break;
        }
        case CODE_POINTS.SOLIDUS: {
          this.state = State.END_TAG_OPEN;
          break;
        }
        case CODE_POINTS.QUESTION_MARK: {
          this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);
          this._createCommentToken(1);
          this.state = State.BOGUS_COMMENT;
          this._stateBogusComment(cp);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofBeforeTagName);
          this._emitChars("<");
          this._emitEOFToken();
          break;
        }
        default: {
          this._err(ERR.invalidFirstCharacterOfTagName);
          this._emitChars("<");
          this.state = State.DATA;
          this._stateData(cp);
        }
      }
  }
  _stateEndTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this._createEndTagToken();
      this.state = State.TAG_NAME;
      this._stateTagName(cp);
    } else
      switch (cp) {
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.missingEndTagName);
          this.state = State.DATA;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofBeforeTagName);
          this._emitChars("</");
          this._emitEOFToken();
          break;
        }
        default: {
          this._err(ERR.invalidFirstCharacterOfTagName);
          this._createCommentToken(2);
          this.state = State.BOGUS_COMMENT;
          this._stateBogusComment(cp);
        }
      }
  }
  _stateTagName(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State.BEFORE_ATTRIBUTE_NAME;
        break;
      }
      case CODE_POINTS.SOLIDUS: {
        this.state = State.SELF_CLOSING_START_TAG;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.DATA;
        this.emitCurrentTagToken();
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token2.tagName += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        token2.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
      }
    }
  }
  _stateRcdataLessThanSign(cp) {
    if (cp === CODE_POINTS.SOLIDUS) {
      this.state = State.RCDATA_END_TAG_OPEN;
    } else {
      this._emitChars("<");
      this.state = State.RCDATA;
      this._stateRcdata(cp);
    }
  }
  _stateRcdataEndTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this.state = State.RCDATA_END_TAG_NAME;
      this._stateRcdataEndTagName(cp);
    } else {
      this._emitChars("</");
      this.state = State.RCDATA;
      this._stateRcdata(cp);
    }
  }
  handleSpecialEndTag(_cp) {
    if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {
      return !this._ensureHibernation();
    }
    this._createEndTagToken();
    const token2 = this.currentToken;
    token2.tagName = this.lastStartTagName;
    const cp = this.preprocessor.peek(this.lastStartTagName.length);
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this._advanceBy(this.lastStartTagName.length);
        this.state = State.BEFORE_ATTRIBUTE_NAME;
        return false;
      }
      case CODE_POINTS.SOLIDUS: {
        this._advanceBy(this.lastStartTagName.length);
        this.state = State.SELF_CLOSING_START_TAG;
        return false;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._advanceBy(this.lastStartTagName.length);
        this.emitCurrentTagToken();
        this.state = State.DATA;
        return false;
      }
      default: {
        return !this._ensureHibernation();
      }
    }
  }
  _stateRcdataEndTagName(cp) {
    if (this.handleSpecialEndTag(cp)) {
      this._emitChars("</");
      this.state = State.RCDATA;
      this._stateRcdata(cp);
    }
  }
  _stateRawtextLessThanSign(cp) {
    if (cp === CODE_POINTS.SOLIDUS) {
      this.state = State.RAWTEXT_END_TAG_OPEN;
    } else {
      this._emitChars("<");
      this.state = State.RAWTEXT;
      this._stateRawtext(cp);
    }
  }
  _stateRawtextEndTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this.state = State.RAWTEXT_END_TAG_NAME;
      this._stateRawtextEndTagName(cp);
    } else {
      this._emitChars("</");
      this.state = State.RAWTEXT;
      this._stateRawtext(cp);
    }
  }
  _stateRawtextEndTagName(cp) {
    if (this.handleSpecialEndTag(cp)) {
      this._emitChars("</");
      this.state = State.RAWTEXT;
      this._stateRawtext(cp);
    }
  }
  _stateScriptDataLessThanSign(cp) {
    switch (cp) {
      case CODE_POINTS.SOLIDUS: {
        this.state = State.SCRIPT_DATA_END_TAG_OPEN;
        break;
      }
      case CODE_POINTS.EXCLAMATION_MARK: {
        this.state = State.SCRIPT_DATA_ESCAPE_START;
        this._emitChars("<!");
        break;
      }
      default: {
        this._emitChars("<");
        this.state = State.SCRIPT_DATA;
        this._stateScriptData(cp);
      }
    }
  }
  _stateScriptDataEndTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this.state = State.SCRIPT_DATA_END_TAG_NAME;
      this._stateScriptDataEndTagName(cp);
    } else {
      this._emitChars("</");
      this.state = State.SCRIPT_DATA;
      this._stateScriptData(cp);
    }
  }
  _stateScriptDataEndTagName(cp) {
    if (this.handleSpecialEndTag(cp)) {
      this._emitChars("</");
      this.state = State.SCRIPT_DATA;
      this._stateScriptData(cp);
    }
  }
  _stateScriptDataEscapeStart(cp) {
    if (cp === CODE_POINTS.HYPHEN_MINUS) {
      this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;
      this._emitChars("-");
    } else {
      this.state = State.SCRIPT_DATA;
      this._stateScriptData(cp);
    }
  }
  _stateScriptDataEscapeStartDash(cp) {
    if (cp === CODE_POINTS.HYPHEN_MINUS) {
      this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;
      this._emitChars("-");
    } else {
      this.state = State.SCRIPT_DATA;
      this._stateScriptData(cp);
    }
  }
  _stateScriptDataEscaped(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State.SCRIPT_DATA_ESCAPED_DASH;
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  _stateScriptDataEscapedDash(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.state = State.SCRIPT_DATA_ESCAPED;
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this.state = State.SCRIPT_DATA_ESCAPED;
        this._emitCodePoint(cp);
      }
    }
  }
  _stateScriptDataEscapedDashDash(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.SCRIPT_DATA;
        this._emitChars(">");
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.state = State.SCRIPT_DATA_ESCAPED;
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this.state = State.SCRIPT_DATA_ESCAPED;
        this._emitCodePoint(cp);
      }
    }
  }
  _stateScriptDataEscapedLessThanSign(cp) {
    if (cp === CODE_POINTS.SOLIDUS) {
      this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;
    } else if (isAsciiLetter(cp)) {
      this._emitChars("<");
      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;
      this._stateScriptDataDoubleEscapeStart(cp);
    } else {
      this._emitChars("<");
      this.state = State.SCRIPT_DATA_ESCAPED;
      this._stateScriptDataEscaped(cp);
    }
  }
  _stateScriptDataEscapedEndTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;
      this._stateScriptDataEscapedEndTagName(cp);
    } else {
      this._emitChars("</");
      this.state = State.SCRIPT_DATA_ESCAPED;
      this._stateScriptDataEscaped(cp);
    }
  }
  _stateScriptDataEscapedEndTagName(cp) {
    if (this.handleSpecialEndTag(cp)) {
      this._emitChars("</");
      this.state = State.SCRIPT_DATA_ESCAPED;
      this._stateScriptDataEscaped(cp);
    }
  }
  _stateScriptDataDoubleEscapeStart(cp) {
    if (this.preprocessor.startsWith(SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(SEQUENCES.SCRIPT.length))) {
      this._emitCodePoint(cp);
      for (let i3 = 0;i3 < SEQUENCES.SCRIPT.length; i3++) {
        this._emitCodePoint(this._consume());
      }
      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
    } else if (!this._ensureHibernation()) {
      this.state = State.SCRIPT_DATA_ESCAPED;
      this._stateScriptDataEscaped(cp);
    }
  }
  _stateScriptDataDoubleEscaped(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
        this._emitChars("<");
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  _stateScriptDataDoubleEscapedDash(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
        this._emitChars("<");
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
        this._emitCodePoint(cp);
      }
    }
  }
  _stateScriptDataDoubleEscapedDashDash(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
        this._emitChars("<");
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.SCRIPT_DATA;
        this._emitChars(">");
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
        this._emitCodePoint(cp);
      }
    }
  }
  _stateScriptDataDoubleEscapedLessThanSign(cp) {
    if (cp === CODE_POINTS.SOLIDUS) {
      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;
      this._emitChars("/");
    } else {
      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
      this._stateScriptDataDoubleEscaped(cp);
    }
  }
  _stateScriptDataDoubleEscapeEnd(cp) {
    if (this.preprocessor.startsWith(SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(SEQUENCES.SCRIPT.length))) {
      this._emitCodePoint(cp);
      for (let i3 = 0;i3 < SEQUENCES.SCRIPT.length; i3++) {
        this._emitCodePoint(this._consume());
      }
      this.state = State.SCRIPT_DATA_ESCAPED;
    } else if (!this._ensureHibernation()) {
      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
      this._stateScriptDataDoubleEscaped(cp);
    }
  }
  _stateBeforeAttributeName(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.SOLIDUS:
      case CODE_POINTS.GREATER_THAN_SIGN:
      case CODE_POINTS.EOF: {
        this.state = State.AFTER_ATTRIBUTE_NAME;
        this._stateAfterAttributeName(cp);
        break;
      }
      case CODE_POINTS.EQUALS_SIGN: {
        this._err(ERR.unexpectedEqualsSignBeforeAttributeName);
        this._createAttr("=");
        this.state = State.ATTRIBUTE_NAME;
        break;
      }
      default: {
        this._createAttr("");
        this.state = State.ATTRIBUTE_NAME;
        this._stateAttributeName(cp);
      }
    }
  }
  _stateAttributeName(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED:
      case CODE_POINTS.SOLIDUS:
      case CODE_POINTS.GREATER_THAN_SIGN:
      case CODE_POINTS.EOF: {
        this._leaveAttrName();
        this.state = State.AFTER_ATTRIBUTE_NAME;
        this._stateAfterAttributeName(cp);
        break;
      }
      case CODE_POINTS.EQUALS_SIGN: {
        this._leaveAttrName();
        this.state = State.BEFORE_ATTRIBUTE_VALUE;
        break;
      }
      case CODE_POINTS.QUOTATION_MARK:
      case CODE_POINTS.APOSTROPHE:
      case CODE_POINTS.LESS_THAN_SIGN: {
        this._err(ERR.unexpectedCharacterInAttributeName);
        this.currentAttr.name += String.fromCodePoint(cp);
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.currentAttr.name += REPLACEMENT_CHARACTER;
        break;
      }
      default: {
        this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
      }
    }
  }
  _stateAfterAttributeName(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.SOLIDUS: {
        this.state = State.SELF_CLOSING_START_TAG;
        break;
      }
      case CODE_POINTS.EQUALS_SIGN: {
        this.state = State.BEFORE_ATTRIBUTE_VALUE;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.DATA;
        this.emitCurrentTagToken();
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this._createAttr("");
        this.state = State.ATTRIBUTE_NAME;
        this._stateAttributeName(cp);
      }
    }
  }
  _stateBeforeAttributeValue(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.missingAttributeValue);
        this.state = State.DATA;
        this.emitCurrentTagToken();
        break;
      }
      default: {
        this.state = State.ATTRIBUTE_VALUE_UNQUOTED;
        this._stateAttributeValueUnquoted(cp);
      }
    }
  }
  _stateAttributeValueDoubleQuoted(cp) {
    switch (cp) {
      case CODE_POINTS.QUOTATION_MARK: {
        this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;
        break;
      }
      case CODE_POINTS.AMPERSAND: {
        this.returnState = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
        this.state = State.CHARACTER_REFERENCE;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.currentAttr.value += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this.currentAttr.value += String.fromCodePoint(cp);
      }
    }
  }
  _stateAttributeValueSingleQuoted(cp) {
    switch (cp) {
      case CODE_POINTS.APOSTROPHE: {
        this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;
        break;
      }
      case CODE_POINTS.AMPERSAND: {
        this.returnState = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;
        this.state = State.CHARACTER_REFERENCE;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.currentAttr.value += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this.currentAttr.value += String.fromCodePoint(cp);
      }
    }
  }
  _stateAttributeValueUnquoted(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this._leaveAttrValue();
        this.state = State.BEFORE_ATTRIBUTE_NAME;
        break;
      }
      case CODE_POINTS.AMPERSAND: {
        this.returnState = State.ATTRIBUTE_VALUE_UNQUOTED;
        this.state = State.CHARACTER_REFERENCE;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._leaveAttrValue();
        this.state = State.DATA;
        this.emitCurrentTagToken();
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.currentAttr.value += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.QUOTATION_MARK:
      case CODE_POINTS.APOSTROPHE:
      case CODE_POINTS.LESS_THAN_SIGN:
      case CODE_POINTS.EQUALS_SIGN:
      case CODE_POINTS.GRAVE_ACCENT: {
        this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);
        this.currentAttr.value += String.fromCodePoint(cp);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this.currentAttr.value += String.fromCodePoint(cp);
      }
    }
  }
  _stateAfterAttributeValueQuoted(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this._leaveAttrValue();
        this.state = State.BEFORE_ATTRIBUTE_NAME;
        break;
      }
      case CODE_POINTS.SOLIDUS: {
        this._leaveAttrValue();
        this.state = State.SELF_CLOSING_START_TAG;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._leaveAttrValue();
        this.state = State.DATA;
        this.emitCurrentTagToken();
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingWhitespaceBetweenAttributes);
        this.state = State.BEFORE_ATTRIBUTE_NAME;
        this._stateBeforeAttributeName(cp);
      }
    }
  }
  _stateSelfClosingStartTag(cp) {
    switch (cp) {
      case CODE_POINTS.GREATER_THAN_SIGN: {
        const token2 = this.currentToken;
        token2.selfClosing = true;
        this.state = State.DATA;
        this.emitCurrentTagToken();
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.unexpectedSolidusInTag);
        this.state = State.BEFORE_ATTRIBUTE_NAME;
        this._stateBeforeAttributeName(cp);
      }
    }
  }
  _stateBogusComment(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.DATA;
        this.emitCurrentComment(token2);
        break;
      }
      case CODE_POINTS.EOF: {
        this.emitCurrentComment(token2);
        this._emitEOFToken();
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token2.data += REPLACEMENT_CHARACTER;
        break;
      }
      default: {
        token2.data += String.fromCodePoint(cp);
      }
    }
  }
  _stateMarkupDeclarationOpen(cp) {
    if (this._consumeSequenceIfMatch(SEQUENCES.DASH_DASH, true)) {
      this._createCommentToken(SEQUENCES.DASH_DASH.length + 1);
      this.state = State.COMMENT_START;
    } else if (this._consumeSequenceIfMatch(SEQUENCES.DOCTYPE, false)) {
      this.currentLocation = this.getCurrentLocation(SEQUENCES.DOCTYPE.length + 1);
      this.state = State.DOCTYPE;
    } else if (this._consumeSequenceIfMatch(SEQUENCES.CDATA_START, true)) {
      if (this.inForeignNode) {
        this.state = State.CDATA_SECTION;
      } else {
        this._err(ERR.cdataInHtmlContent);
        this._createCommentToken(SEQUENCES.CDATA_START.length + 1);
        this.currentToken.data = "[CDATA[";
        this.state = State.BOGUS_COMMENT;
      }
    } else if (!this._ensureHibernation()) {
      this._err(ERR.incorrectlyOpenedComment);
      this._createCommentToken(2);
      this.state = State.BOGUS_COMMENT;
      this._stateBogusComment(cp);
    }
  }
  _stateCommentStart(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State.COMMENT_START_DASH;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptClosingOfEmptyComment);
        this.state = State.DATA;
        const token2 = this.currentToken;
        this.emitCurrentComment(token2);
        break;
      }
      default: {
        this.state = State.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  _stateCommentStartDash(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State.COMMENT_END;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptClosingOfEmptyComment);
        this.state = State.DATA;
        this.emitCurrentComment(token2);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInComment);
        this.emitCurrentComment(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        token2.data += "-";
        this.state = State.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  _stateComment(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State.COMMENT_END_DASH;
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        token2.data += "<";
        this.state = State.COMMENT_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token2.data += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInComment);
        this.emitCurrentComment(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        token2.data += String.fromCodePoint(cp);
      }
    }
  }
  _stateCommentLessThanSign(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.EXCLAMATION_MARK: {
        token2.data += "!";
        this.state = State.COMMENT_LESS_THAN_SIGN_BANG;
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        token2.data += "<";
        break;
      }
      default: {
        this.state = State.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  _stateCommentLessThanSignBang(cp) {
    if (cp === CODE_POINTS.HYPHEN_MINUS) {
      this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;
    } else {
      this.state = State.COMMENT;
      this._stateComment(cp);
    }
  }
  _stateCommentLessThanSignBangDash(cp) {
    if (cp === CODE_POINTS.HYPHEN_MINUS) {
      this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;
    } else {
      this.state = State.COMMENT_END_DASH;
      this._stateCommentEndDash(cp);
    }
  }
  _stateCommentLessThanSignBangDashDash(cp) {
    if (cp !== CODE_POINTS.GREATER_THAN_SIGN && cp !== CODE_POINTS.EOF) {
      this._err(ERR.nestedComment);
    }
    this.state = State.COMMENT_END;
    this._stateCommentEnd(cp);
  }
  _stateCommentEndDash(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State.COMMENT_END;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInComment);
        this.emitCurrentComment(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        token2.data += "-";
        this.state = State.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  _stateCommentEnd(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.DATA;
        this.emitCurrentComment(token2);
        break;
      }
      case CODE_POINTS.EXCLAMATION_MARK: {
        this.state = State.COMMENT_END_BANG;
        break;
      }
      case CODE_POINTS.HYPHEN_MINUS: {
        token2.data += "-";
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInComment);
        this.emitCurrentComment(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        token2.data += "--";
        this.state = State.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  _stateCommentEndBang(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        token2.data += "--!";
        this.state = State.COMMENT_END_DASH;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.incorrectlyClosedComment);
        this.state = State.DATA;
        this.emitCurrentComment(token2);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInComment);
        this.emitCurrentComment(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        token2.data += "--!";
        this.state = State.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  _stateDoctype(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State.BEFORE_DOCTYPE_NAME;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.BEFORE_DOCTYPE_NAME;
        this._stateBeforeDoctypeName(cp);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        this._createDoctypeToken(null);
        const token2 = this.currentToken;
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingWhitespaceBeforeDoctypeName);
        this.state = State.BEFORE_DOCTYPE_NAME;
        this._stateBeforeDoctypeName(cp);
      }
    }
  }
  _stateBeforeDoctypeName(cp) {
    if (isAsciiUpper(cp)) {
      this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));
      this.state = State.DOCTYPE_NAME;
    } else
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this._createDoctypeToken(REPLACEMENT_CHARACTER);
          this.state = State.DOCTYPE_NAME;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.missingDoctypeName);
          this._createDoctypeToken(null);
          const token2 = this.currentToken;
          token2.forceQuirks = true;
          this.emitCurrentDoctype(token2);
          this.state = State.DATA;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          this._createDoctypeToken(null);
          const token2 = this.currentToken;
          token2.forceQuirks = true;
          this.emitCurrentDoctype(token2);
          this._emitEOFToken();
          break;
        }
        default: {
          this._createDoctypeToken(String.fromCodePoint(cp));
          this.state = State.DOCTYPE_NAME;
        }
      }
  }
  _stateDoctypeName(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State.AFTER_DOCTYPE_NAME;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.DATA;
        this.emitCurrentDoctype(token2);
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token2.name += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        token2.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
      }
    }
  }
  _stateAfterDoctypeName(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.DATA;
        this.emitCurrentDoctype(token2);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        if (this._consumeSequenceIfMatch(SEQUENCES.PUBLIC, false)) {
          this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;
        } else if (this._consumeSequenceIfMatch(SEQUENCES.SYSTEM, false)) {
          this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;
        } else if (!this._ensureHibernation()) {
          this._err(ERR.invalidCharacterSequenceAfterDoctypeName);
          token2.forceQuirks = true;
          this.state = State.BOGUS_DOCTYPE;
          this._stateBogusDoctype(cp);
        }
      }
    }
  }
  _stateAfterDoctypePublicKeyword(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
        token2.publicId = "";
        this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
        token2.publicId = "";
        this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.missingDoctypePublicIdentifier);
        token2.forceQuirks = true;
        this.state = State.DATA;
        this.emitCurrentDoctype(token2);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
        token2.forceQuirks = true;
        this.state = State.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  _stateBeforeDoctypePublicIdentifier(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        token2.publicId = "";
        this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        token2.publicId = "";
        this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.missingDoctypePublicIdentifier);
        token2.forceQuirks = true;
        this.state = State.DATA;
        this.emitCurrentDoctype(token2);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
        token2.forceQuirks = true;
        this.state = State.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  _stateDoctypePublicIdentifierDoubleQuoted(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.QUOTATION_MARK: {
        this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token2.publicId += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptDoctypePublicIdentifier);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this.state = State.DATA;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        token2.publicId += String.fromCodePoint(cp);
      }
    }
  }
  _stateDoctypePublicIdentifierSingleQuoted(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.APOSTROPHE: {
        this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token2.publicId += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptDoctypePublicIdentifier);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this.state = State.DATA;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        token2.publicId += String.fromCodePoint(cp);
      }
    }
  }
  _stateAfterDoctypePublicIdentifier(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.DATA;
        this.emitCurrentDoctype(token2);
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
        token2.systemId = "";
        this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
        token2.systemId = "";
        this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
        token2.forceQuirks = true;
        this.state = State.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.emitCurrentDoctype(token2);
        this.state = State.DATA;
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        token2.systemId = "";
        this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        token2.systemId = "";
        this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
        token2.forceQuirks = true;
        this.state = State.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  _stateAfterDoctypeSystemKeyword(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
        token2.systemId = "";
        this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
        token2.systemId = "";
        this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.missingDoctypeSystemIdentifier);
        token2.forceQuirks = true;
        this.state = State.DATA;
        this.emitCurrentDoctype(token2);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
        token2.forceQuirks = true;
        this.state = State.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  _stateBeforeDoctypeSystemIdentifier(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        token2.systemId = "";
        this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        token2.systemId = "";
        this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.missingDoctypeSystemIdentifier);
        token2.forceQuirks = true;
        this.state = State.DATA;
        this.emitCurrentDoctype(token2);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
        token2.forceQuirks = true;
        this.state = State.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  _stateDoctypeSystemIdentifierDoubleQuoted(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.QUOTATION_MARK: {
        this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token2.systemId += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptDoctypeSystemIdentifier);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this.state = State.DATA;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        token2.systemId += String.fromCodePoint(cp);
      }
    }
  }
  _stateDoctypeSystemIdentifierSingleQuoted(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.APOSTROPHE: {
        this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token2.systemId += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptDoctypeSystemIdentifier);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this.state = State.DATA;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        token2.systemId += String.fromCodePoint(cp);
      }
    }
  }
  _stateAfterDoctypeSystemIdentifier(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.emitCurrentDoctype(token2);
        this.state = State.DATA;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token2.forceQuirks = true;
        this.emitCurrentDoctype(token2);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);
        this.state = State.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  _stateBogusDoctype(cp) {
    const token2 = this.currentToken;
    switch (cp) {
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.emitCurrentDoctype(token2);
        this.state = State.DATA;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        break;
      }
      case CODE_POINTS.EOF: {
        this.emitCurrentDoctype(token2);
        this._emitEOFToken();
        break;
      }
      default:
    }
  }
  _stateCdataSection(cp) {
    switch (cp) {
      case CODE_POINTS.RIGHT_SQUARE_BRACKET: {
        this.state = State.CDATA_SECTION_BRACKET;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInCdata);
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  _stateCdataSectionBracket(cp) {
    if (cp === CODE_POINTS.RIGHT_SQUARE_BRACKET) {
      this.state = State.CDATA_SECTION_END;
    } else {
      this._emitChars("]");
      this.state = State.CDATA_SECTION;
      this._stateCdataSection(cp);
    }
  }
  _stateCdataSectionEnd(cp) {
    switch (cp) {
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.DATA;
        break;
      }
      case CODE_POINTS.RIGHT_SQUARE_BRACKET: {
        this._emitChars("]");
        break;
      }
      default: {
        this._emitChars("]]");
        this.state = State.CDATA_SECTION;
        this._stateCdataSection(cp);
      }
    }
  }
  _stateCharacterReference(cp) {
    if (cp === CODE_POINTS.NUMBER_SIGN) {
      this.state = State.NUMERIC_CHARACTER_REFERENCE;
    } else if (isAsciiAlphaNumeric2(cp)) {
      this.state = State.NAMED_CHARACTER_REFERENCE;
      this._stateNamedCharacterReference(cp);
    } else {
      this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
      this._reconsumeInState(this.returnState, cp);
    }
  }
  _stateNamedCharacterReference(cp) {
    const matchResult = this._matchNamedCharacterReference(cp);
    if (this._ensureHibernation()) {
    } else if (matchResult) {
      for (let i3 = 0;i3 < matchResult.length; i3++) {
        this._flushCodePointConsumedAsCharacterReference(matchResult[i3]);
      }
      this.state = this.returnState;
    } else {
      this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
      this.state = State.AMBIGUOUS_AMPERSAND;
    }
  }
  _stateAmbiguousAmpersand(cp) {
    if (isAsciiAlphaNumeric2(cp)) {
      this._flushCodePointConsumedAsCharacterReference(cp);
    } else {
      if (cp === CODE_POINTS.SEMICOLON) {
        this._err(ERR.unknownNamedCharacterReference);
      }
      this._reconsumeInState(this.returnState, cp);
    }
  }
  _stateNumericCharacterReference(cp) {
    this.charRefCode = 0;
    if (cp === CODE_POINTS.LATIN_SMALL_X || cp === CODE_POINTS.LATIN_CAPITAL_X) {
      this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;
    } else if (isAsciiDigit(cp)) {
      this.state = State.DECIMAL_CHARACTER_REFERENCE;
      this._stateDecimalCharacterReference(cp);
    } else {
      this._err(ERR.absenceOfDigitsInNumericCharacterReference);
      this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
      this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.NUMBER_SIGN);
      this._reconsumeInState(this.returnState, cp);
    }
  }
  _stateHexademicalCharacterReferenceStart(cp) {
    if (isAsciiHexDigit(cp)) {
      this.state = State.HEXADEMICAL_CHARACTER_REFERENCE;
      this._stateHexademicalCharacterReference(cp);
    } else {
      this._err(ERR.absenceOfDigitsInNumericCharacterReference);
      this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
      this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.NUMBER_SIGN);
      this._unconsume(2);
      this.state = this.returnState;
    }
  }
  _stateHexademicalCharacterReference(cp) {
    if (isAsciiUpperHexDigit(cp)) {
      this.charRefCode = this.charRefCode * 16 + cp - 55;
    } else if (isAsciiLowerHexDigit(cp)) {
      this.charRefCode = this.charRefCode * 16 + cp - 87;
    } else if (isAsciiDigit(cp)) {
      this.charRefCode = this.charRefCode * 16 + cp - 48;
    } else if (cp === CODE_POINTS.SEMICOLON) {
      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
    } else {
      this._err(ERR.missingSemicolonAfterCharacterReference);
      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
      this._stateNumericCharacterReferenceEnd(cp);
    }
  }
  _stateDecimalCharacterReference(cp) {
    if (isAsciiDigit(cp)) {
      this.charRefCode = this.charRefCode * 10 + cp - 48;
    } else if (cp === CODE_POINTS.SEMICOLON) {
      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
    } else {
      this._err(ERR.missingSemicolonAfterCharacterReference);
      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
      this._stateNumericCharacterReferenceEnd(cp);
    }
  }
  _stateNumericCharacterReferenceEnd(cp) {
    if (this.charRefCode === CODE_POINTS.NULL) {
      this._err(ERR.nullCharacterReference);
      this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
    } else if (this.charRefCode > 1114111) {
      this._err(ERR.characterReferenceOutsideUnicodeRange);
      this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
    } else if (isSurrogate(this.charRefCode)) {
      this._err(ERR.surrogateCharacterReference);
      this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
    } else if (isUndefinedCodePoint(this.charRefCode)) {
      this._err(ERR.noncharacterCharacterReference);
    } else if (isControlCodePoint(this.charRefCode) || this.charRefCode === CODE_POINTS.CARRIAGE_RETURN) {
      this._err(ERR.controlCharacterReference);
      const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);
      if (replacement !== undefined) {
        this.charRefCode = replacement;
      }
    }
    this._flushCodePointConsumedAsCharacterReference(this.charRefCode);
    this._reconsumeInState(this.returnState, cp);
  }
}

// node_modules/parse5/dist/parser/open-element-stack.js
var IMPLICIT_END_TAG_REQUIRED = new Set([TAG_ID.DD, TAG_ID.DT, TAG_ID.LI, TAG_ID.OPTGROUP, TAG_ID.OPTION, TAG_ID.P, TAG_ID.RB, TAG_ID.RP, TAG_ID.RT, TAG_ID.RTC]);
var IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = new Set([
  ...IMPLICIT_END_TAG_REQUIRED,
  TAG_ID.CAPTION,
  TAG_ID.COLGROUP,
  TAG_ID.TBODY,
  TAG_ID.TD,
  TAG_ID.TFOOT,
  TAG_ID.TH,
  TAG_ID.THEAD,
  TAG_ID.TR
]);
var SCOPING_ELEMENT_NS = new Map([
  [TAG_ID.APPLET, NS.HTML],
  [TAG_ID.CAPTION, NS.HTML],
  [TAG_ID.HTML, NS.HTML],
  [TAG_ID.MARQUEE, NS.HTML],
  [TAG_ID.OBJECT, NS.HTML],
  [TAG_ID.TABLE, NS.HTML],
  [TAG_ID.TD, NS.HTML],
  [TAG_ID.TEMPLATE, NS.HTML],
  [TAG_ID.TH, NS.HTML],
  [TAG_ID.ANNOTATION_XML, NS.MATHML],
  [TAG_ID.MI, NS.MATHML],
  [TAG_ID.MN, NS.MATHML],
  [TAG_ID.MO, NS.MATHML],
  [TAG_ID.MS, NS.MATHML],
  [TAG_ID.MTEXT, NS.MATHML],
  [TAG_ID.DESC, NS.SVG],
  [TAG_ID.FOREIGN_OBJECT, NS.SVG],
  [TAG_ID.TITLE, NS.SVG]
]);
var NAMED_HEADERS = [TAG_ID.H1, TAG_ID.H2, TAG_ID.H3, TAG_ID.H4, TAG_ID.H5, TAG_ID.H6];
var TABLE_ROW_CONTEXT = [TAG_ID.TR, TAG_ID.TEMPLATE, TAG_ID.HTML];
var TABLE_BODY_CONTEXT = [TAG_ID.TBODY, TAG_ID.TFOOT, TAG_ID.THEAD, TAG_ID.TEMPLATE, TAG_ID.HTML];
var TABLE_CONTEXT = [TAG_ID.TABLE, TAG_ID.TEMPLATE, TAG_ID.HTML];
var TABLE_CELLS = [TAG_ID.TD, TAG_ID.TH];

class OpenElementStack {
  get currentTmplContentOrNode() {
    return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;
  }
  constructor(document2, treeAdapter, handler) {
    this.treeAdapter = treeAdapter;
    this.handler = handler;
    this.items = [];
    this.tagIDs = [];
    this.stackTop = -1;
    this.tmplCount = 0;
    this.currentTagId = TAG_ID.UNKNOWN;
    this.current = document2;
  }
  _indexOf(element) {
    return this.items.lastIndexOf(element, this.stackTop);
  }
  _isInTemplate() {
    return this.currentTagId === TAG_ID.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
  }
  _updateCurrentElement() {
    this.current = this.items[this.stackTop];
    this.currentTagId = this.tagIDs[this.stackTop];
  }
  push(element, tagID) {
    this.stackTop++;
    this.items[this.stackTop] = element;
    this.current = element;
    this.tagIDs[this.stackTop] = tagID;
    this.currentTagId = tagID;
    if (this._isInTemplate()) {
      this.tmplCount++;
    }
    this.handler.onItemPush(element, tagID, true);
  }
  pop() {
    const popped = this.current;
    if (this.tmplCount > 0 && this._isInTemplate()) {
      this.tmplCount--;
    }
    this.stackTop--;
    this._updateCurrentElement();
    this.handler.onItemPop(popped, true);
  }
  replace(oldElement, newElement) {
    const idx = this._indexOf(oldElement);
    this.items[idx] = newElement;
    if (idx === this.stackTop) {
      this.current = newElement;
    }
  }
  insertAfter(referenceElement, newElement, newElementID) {
    const insertionIdx = this._indexOf(referenceElement) + 1;
    this.items.splice(insertionIdx, 0, newElement);
    this.tagIDs.splice(insertionIdx, 0, newElementID);
    this.stackTop++;
    if (insertionIdx === this.stackTop) {
      this._updateCurrentElement();
    }
    this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);
  }
  popUntilTagNamePopped(tagName) {
    let targetIdx = this.stackTop + 1;
    do {
      targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);
    } while (targetIdx > 0 && this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== NS.HTML);
    this.shortenToLength(targetIdx < 0 ? 0 : targetIdx);
  }
  shortenToLength(idx) {
    while (this.stackTop >= idx) {
      const popped = this.current;
      if (this.tmplCount > 0 && this._isInTemplate()) {
        this.tmplCount -= 1;
      }
      this.stackTop--;
      this._updateCurrentElement();
      this.handler.onItemPop(popped, this.stackTop < idx);
    }
  }
  popUntilElementPopped(element) {
    const idx = this._indexOf(element);
    this.shortenToLength(idx < 0 ? 0 : idx);
  }
  popUntilPopped(tagNames, targetNS) {
    const idx = this._indexOfTagNames(tagNames, targetNS);
    this.shortenToLength(idx < 0 ? 0 : idx);
  }
  popUntilNumberedHeaderPopped() {
    this.popUntilPopped(NAMED_HEADERS, NS.HTML);
  }
  popUntilTableCellPopped() {
    this.popUntilPopped(TABLE_CELLS, NS.HTML);
  }
  popAllUpToHtmlElement() {
    this.tmplCount = 0;
    this.shortenToLength(1);
  }
  _indexOfTagNames(tagNames, namespace) {
    for (let i3 = this.stackTop;i3 >= 0; i3--) {
      if (tagNames.includes(this.tagIDs[i3]) && this.treeAdapter.getNamespaceURI(this.items[i3]) === namespace) {
        return i3;
      }
    }
    return -1;
  }
  clearBackTo(tagNames, targetNS) {
    const idx = this._indexOfTagNames(tagNames, targetNS);
    this.shortenToLength(idx + 1);
  }
  clearBackToTableContext() {
    this.clearBackTo(TABLE_CONTEXT, NS.HTML);
  }
  clearBackToTableBodyContext() {
    this.clearBackTo(TABLE_BODY_CONTEXT, NS.HTML);
  }
  clearBackToTableRowContext() {
    this.clearBackTo(TABLE_ROW_CONTEXT, NS.HTML);
  }
  remove(element) {
    const idx = this._indexOf(element);
    if (idx >= 0) {
      if (idx === this.stackTop) {
        this.pop();
      } else {
        this.items.splice(idx, 1);
        this.tagIDs.splice(idx, 1);
        this.stackTop--;
        this._updateCurrentElement();
        this.handler.onItemPop(element, false);
      }
    }
  }
  tryPeekProperlyNestedBodyElement() {
    return this.stackTop >= 1 && this.tagIDs[1] === TAG_ID.BODY ? this.items[1] : null;
  }
  contains(element) {
    return this._indexOf(element) > -1;
  }
  getCommonAncestor(element) {
    const elementIdx = this._indexOf(element) - 1;
    return elementIdx >= 0 ? this.items[elementIdx] : null;
  }
  isRootHtmlElementCurrent() {
    return this.stackTop === 0 && this.tagIDs[0] === TAG_ID.HTML;
  }
  hasInScope(tagName) {
    for (let i3 = this.stackTop;i3 >= 0; i3--) {
      const tn = this.tagIDs[i3];
      const ns = this.treeAdapter.getNamespaceURI(this.items[i3]);
      if (tn === tagName && ns === NS.HTML) {
        return true;
      }
      if (SCOPING_ELEMENT_NS.get(tn) === ns) {
        return false;
      }
    }
    return true;
  }
  hasNumberedHeaderInScope() {
    for (let i3 = this.stackTop;i3 >= 0; i3--) {
      const tn = this.tagIDs[i3];
      const ns = this.treeAdapter.getNamespaceURI(this.items[i3]);
      if (isNumberedHeader(tn) && ns === NS.HTML) {
        return true;
      }
      if (SCOPING_ELEMENT_NS.get(tn) === ns) {
        return false;
      }
    }
    return true;
  }
  hasInListItemScope(tagName) {
    for (let i3 = this.stackTop;i3 >= 0; i3--) {
      const tn = this.tagIDs[i3];
      const ns = this.treeAdapter.getNamespaceURI(this.items[i3]);
      if (tn === tagName && ns === NS.HTML) {
        return true;
      }
      if ((tn === TAG_ID.UL || tn === TAG_ID.OL) && ns === NS.HTML || SCOPING_ELEMENT_NS.get(tn) === ns) {
        return false;
      }
    }
    return true;
  }
  hasInButtonScope(tagName) {
    for (let i3 = this.stackTop;i3 >= 0; i3--) {
      const tn = this.tagIDs[i3];
      const ns = this.treeAdapter.getNamespaceURI(this.items[i3]);
      if (tn === tagName && ns === NS.HTML) {
        return true;
      }
      if (tn === TAG_ID.BUTTON && ns === NS.HTML || SCOPING_ELEMENT_NS.get(tn) === ns) {
        return false;
      }
    }
    return true;
  }
  hasInTableScope(tagName) {
    for (let i3 = this.stackTop;i3 >= 0; i3--) {
      const tn = this.tagIDs[i3];
      const ns = this.treeAdapter.getNamespaceURI(this.items[i3]);
      if (ns !== NS.HTML) {
        continue;
      }
      if (tn === tagName) {
        return true;
      }
      if (tn === TAG_ID.TABLE || tn === TAG_ID.TEMPLATE || tn === TAG_ID.HTML) {
        return false;
      }
    }
    return true;
  }
  hasTableBodyContextInTableScope() {
    for (let i3 = this.stackTop;i3 >= 0; i3--) {
      const tn = this.tagIDs[i3];
      const ns = this.treeAdapter.getNamespaceURI(this.items[i3]);
      if (ns !== NS.HTML) {
        continue;
      }
      if (tn === TAG_ID.TBODY || tn === TAG_ID.THEAD || tn === TAG_ID.TFOOT) {
        return true;
      }
      if (tn === TAG_ID.TABLE || tn === TAG_ID.HTML) {
        return false;
      }
    }
    return true;
  }
  hasInSelectScope(tagName) {
    for (let i3 = this.stackTop;i3 >= 0; i3--) {
      const tn = this.tagIDs[i3];
      const ns = this.treeAdapter.getNamespaceURI(this.items[i3]);
      if (ns !== NS.HTML) {
        continue;
      }
      if (tn === tagName) {
        return true;
      }
      if (tn !== TAG_ID.OPTION && tn !== TAG_ID.OPTGROUP) {
        return false;
      }
    }
    return true;
  }
  generateImpliedEndTags() {
    while (IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)) {
      this.pop();
    }
  }
  generateImpliedEndTagsThoroughly() {
    while (IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {
      this.pop();
    }
  }
  generateImpliedEndTagsWithExclusion(exclusionId) {
    while (this.currentTagId !== exclusionId && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {
      this.pop();
    }
  }
}

// node_modules/parse5/dist/parser/formatting-element-list.js
var NOAH_ARK_CAPACITY = 3;
var EntryType;
(function(EntryType2) {
  EntryType2[EntryType2["Marker"] = 0] = "Marker";
  EntryType2[EntryType2["Element"] = 1] = "Element";
})(EntryType = EntryType || (EntryType = {}));
var MARKER = { type: EntryType.Marker };

class FormattingElementList {
  constructor(treeAdapter) {
    this.treeAdapter = treeAdapter;
    this.entries = [];
    this.bookmark = null;
  }
  _getNoahArkConditionCandidates(newElement, neAttrs) {
    const candidates = [];
    const neAttrsLength = neAttrs.length;
    const neTagName = this.treeAdapter.getTagName(newElement);
    const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
    for (let i3 = 0;i3 < this.entries.length; i3++) {
      const entry = this.entries[i3];
      if (entry.type === EntryType.Marker) {
        break;
      }
      const { element } = entry;
      if (this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {
        const elementAttrs = this.treeAdapter.getAttrList(element);
        if (elementAttrs.length === neAttrsLength) {
          candidates.push({ idx: i3, attrs: elementAttrs });
        }
      }
    }
    return candidates;
  }
  _ensureNoahArkCondition(newElement) {
    if (this.entries.length < NOAH_ARK_CAPACITY)
      return;
    const neAttrs = this.treeAdapter.getAttrList(newElement);
    const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);
    if (candidates.length < NOAH_ARK_CAPACITY)
      return;
    const neAttrsMap = new Map(neAttrs.map((neAttr) => [neAttr.name, neAttr.value]));
    let validCandidates = 0;
    for (let i3 = 0;i3 < candidates.length; i3++) {
      const candidate = candidates[i3];
      if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {
        validCandidates += 1;
        if (validCandidates >= NOAH_ARK_CAPACITY) {
          this.entries.splice(candidate.idx, 1);
        }
      }
    }
  }
  insertMarker() {
    this.entries.unshift(MARKER);
  }
  pushElement(element, token2) {
    this._ensureNoahArkCondition(element);
    this.entries.unshift({
      type: EntryType.Element,
      element,
      token: token2
    });
  }
  insertElementAfterBookmark(element, token2) {
    const bookmarkIdx = this.entries.indexOf(this.bookmark);
    this.entries.splice(bookmarkIdx, 0, {
      type: EntryType.Element,
      element,
      token: token2
    });
  }
  removeEntry(entry) {
    const entryIndex = this.entries.indexOf(entry);
    if (entryIndex >= 0) {
      this.entries.splice(entryIndex, 1);
    }
  }
  clearToLastMarker() {
    const markerIdx = this.entries.indexOf(MARKER);
    if (markerIdx >= 0) {
      this.entries.splice(0, markerIdx + 1);
    } else {
      this.entries.length = 0;
    }
  }
  getElementEntryInScopeWithTagName(tagName) {
    const entry = this.entries.find((entry2) => entry2.type === EntryType.Marker || this.treeAdapter.getTagName(entry2.element) === tagName);
    return entry && entry.type === EntryType.Element ? entry : null;
  }
  getElementEntry(element) {
    return this.entries.find((entry) => entry.type === EntryType.Element && entry.element === element);
  }
}

// node_modules/parse5/dist/tree-adapters/default.js
function createTextNode(value15) {
  return {
    nodeName: "#text",
    value: value15,
    parentNode: null
  };
}
var defaultTreeAdapter = {
  createDocument() {
    return {
      nodeName: "#document",
      mode: DOCUMENT_MODE.NO_QUIRKS,
      childNodes: []
    };
  },
  createDocumentFragment() {
    return {
      nodeName: "#document-fragment",
      childNodes: []
    };
  },
  createElement(tagName, namespaceURI, attrs) {
    return {
      nodeName: tagName,
      tagName,
      attrs,
      namespaceURI,
      childNodes: [],
      parentNode: null
    };
  },
  createCommentNode(data2) {
    return {
      nodeName: "#comment",
      data: data2,
      parentNode: null
    };
  },
  appendChild(parentNode, newNode) {
    parentNode.childNodes.push(newNode);
    newNode.parentNode = parentNode;
  },
  insertBefore(parentNode, newNode, referenceNode) {
    const insertionIdx = parentNode.childNodes.indexOf(referenceNode);
    parentNode.childNodes.splice(insertionIdx, 0, newNode);
    newNode.parentNode = parentNode;
  },
  setTemplateContent(templateElement, contentElement) {
    templateElement.content = contentElement;
  },
  getTemplateContent(templateElement) {
    return templateElement.content;
  },
  setDocumentType(document2, name, publicId, systemId) {
    const doctypeNode = document2.childNodes.find((node3) => node3.nodeName === "#documentType");
    if (doctypeNode) {
      doctypeNode.name = name;
      doctypeNode.publicId = publicId;
      doctypeNode.systemId = systemId;
    } else {
      const node3 = {
        nodeName: "#documentType",
        name,
        publicId,
        systemId,
        parentNode: null
      };
      defaultTreeAdapter.appendChild(document2, node3);
    }
  },
  setDocumentMode(document2, mode) {
    document2.mode = mode;
  },
  getDocumentMode(document2) {
    return document2.mode;
  },
  detachNode(node3) {
    if (node3.parentNode) {
      const idx = node3.parentNode.childNodes.indexOf(node3);
      node3.parentNode.childNodes.splice(idx, 1);
      node3.parentNode = null;
    }
  },
  insertText(parentNode, text3) {
    if (parentNode.childNodes.length > 0) {
      const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];
      if (defaultTreeAdapter.isTextNode(prevNode)) {
        prevNode.value += text3;
        return;
      }
    }
    defaultTreeAdapter.appendChild(parentNode, createTextNode(text3));
  },
  insertTextBefore(parentNode, text3, referenceNode) {
    const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
    if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {
      prevNode.value += text3;
    } else {
      defaultTreeAdapter.insertBefore(parentNode, createTextNode(text3), referenceNode);
    }
  },
  adoptAttributes(recipient, attrs) {
    const recipientAttrsMap = new Set(recipient.attrs.map((attr2) => attr2.name));
    for (let j = 0;j < attrs.length; j++) {
      if (!recipientAttrsMap.has(attrs[j].name)) {
        recipient.attrs.push(attrs[j]);
      }
    }
  },
  getFirstChild(node3) {
    return node3.childNodes[0];
  },
  getChildNodes(node3) {
    return node3.childNodes;
  },
  getParentNode(node3) {
    return node3.parentNode;
  },
  getAttrList(element) {
    return element.attrs;
  },
  getTagName(element) {
    return element.tagName;
  },
  getNamespaceURI(element) {
    return element.namespaceURI;
  },
  getTextNodeContent(textNode) {
    return textNode.value;
  },
  getCommentNodeContent(commentNode) {
    return commentNode.data;
  },
  getDocumentTypeNodeName(doctypeNode) {
    return doctypeNode.name;
  },
  getDocumentTypeNodePublicId(doctypeNode) {
    return doctypeNode.publicId;
  },
  getDocumentTypeNodeSystemId(doctypeNode) {
    return doctypeNode.systemId;
  },
  isTextNode(node3) {
    return node3.nodeName === "#text";
  },
  isCommentNode(node3) {
    return node3.nodeName === "#comment";
  },
  isDocumentTypeNode(node3) {
    return node3.nodeName === "#documentType";
  },
  isElementNode(node3) {
    return Object.prototype.hasOwnProperty.call(node3, "tagName");
  },
  setNodeSourceCodeLocation(node3, location) {
    node3.sourceCodeLocation = location;
  },
  getNodeSourceCodeLocation(node3) {
    return node3.sourceCodeLocation;
  },
  updateNodeSourceCodeLocation(node3, endLocation) {
    node3.sourceCodeLocation = { ...node3.sourceCodeLocation, ...endLocation };
  }
};

// node_modules/parse5/dist/common/doctype.js
function hasPrefix(publicId, prefixes) {
  return prefixes.some((prefix) => publicId.startsWith(prefix));
}
function isConforming(token2) {
  return token2.name === VALID_DOCTYPE_NAME && token2.publicId === null && (token2.systemId === null || token2.systemId === VALID_SYSTEM_ID);
}
function getDocumentMode(token2) {
  if (token2.name !== VALID_DOCTYPE_NAME) {
    return DOCUMENT_MODE.QUIRKS;
  }
  const { systemId } = token2;
  if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {
    return DOCUMENT_MODE.QUIRKS;
  }
  let { publicId } = token2;
  if (publicId !== null) {
    publicId = publicId.toLowerCase();
    if (QUIRKS_MODE_PUBLIC_IDS.has(publicId)) {
      return DOCUMENT_MODE.QUIRKS;
    }
    let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;
    if (hasPrefix(publicId, prefixes)) {
      return DOCUMENT_MODE.QUIRKS;
    }
    prefixes = systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;
    if (hasPrefix(publicId, prefixes)) {
      return DOCUMENT_MODE.LIMITED_QUIRKS;
    }
  }
  return DOCUMENT_MODE.NO_QUIRKS;
}
var VALID_DOCTYPE_NAME = "html";
var VALID_SYSTEM_ID = "about:legacy-compat";
var QUIRKS_MODE_SYSTEM_ID = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd";
var QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
  "+//silmaril//dtd html pro v0r11 19970101//",
  "-//as//dtd html 3.0 aswedit + extensions//",
  "-//advasoft ltd//dtd html 3.0 aswedit + extensions//",
  "-//ietf//dtd html 2.0 level 1//",
  "-//ietf//dtd html 2.0 level 2//",
  "-//ietf//dtd html 2.0 strict level 1//",
  "-//ietf//dtd html 2.0 strict level 2//",
  "-//ietf//dtd html 2.0 strict//",
  "-//ietf//dtd html 2.0//",
  "-//ietf//dtd html 2.1e//",
  "-//ietf//dtd html 3.0//",
  "-//ietf//dtd html 3.2 final//",
  "-//ietf//dtd html 3.2//",
  "-//ietf//dtd html 3//",
  "-//ietf//dtd html level 0//",
  "-//ietf//dtd html level 1//",
  "-//ietf//dtd html level 2//",
  "-//ietf//dtd html level 3//",
  "-//ietf//dtd html strict level 0//",
  "-//ietf//dtd html strict level 1//",
  "-//ietf//dtd html strict level 2//",
  "-//ietf//dtd html strict level 3//",
  "-//ietf//dtd html strict//",
  "-//ietf//dtd html//",
  "-//metrius//dtd metrius presentational//",
  "-//microsoft//dtd internet explorer 2.0 html strict//",
  "-//microsoft//dtd internet explorer 2.0 html//",
  "-//microsoft//dtd internet explorer 2.0 tables//",
  "-//microsoft//dtd internet explorer 3.0 html strict//",
  "-//microsoft//dtd internet explorer 3.0 html//",
  "-//microsoft//dtd internet explorer 3.0 tables//",
  "-//netscape comm. corp.//dtd html//",
  "-//netscape comm. corp.//dtd strict html//",
  "-//o'reilly and associates//dtd html 2.0//",
  "-//o'reilly and associates//dtd html extended 1.0//",
  "-//o'reilly and associates//dtd html extended relaxed 1.0//",
  "-//sq//dtd html 2.0 hotmetal + extensions//",
  "-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//",
  "-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//",
  "-//spyglass//dtd html 2.0 extended//",
  "-//sun microsystems corp.//dtd hotjava html//",
  "-//sun microsystems corp.//dtd hotjava strict html//",
  "-//w3c//dtd html 3 1995-03-24//",
  "-//w3c//dtd html 3.2 draft//",
  "-//w3c//dtd html 3.2 final//",
  "-//w3c//dtd html 3.2//",
  "-//w3c//dtd html 3.2s draft//",
  "-//w3c//dtd html 4.0 frameset//",
  "-//w3c//dtd html 4.0 transitional//",
  "-//w3c//dtd html experimental 19960712//",
  "-//w3c//dtd html experimental 970421//",
  "-//w3c//dtd w3 html//",
  "-//w3o//dtd w3 html 3.0//",
  "-//webtechs//dtd mozilla html 2.0//",
  "-//webtechs//dtd mozilla html//"
];
var QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
  ...QUIRKS_MODE_PUBLIC_ID_PREFIXES,
  "-//w3c//dtd html 4.01 frameset//",
  "-//w3c//dtd html 4.01 transitional//"
];
var QUIRKS_MODE_PUBLIC_IDS = new Set([
  "-//w3o//dtd w3 html strict 3.0//en//",
  "-/w3c/dtd html 4.0 transitional/en",
  "html"
]);
var LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ["-//w3c//dtd xhtml 1.0 frameset//", "-//w3c//dtd xhtml 1.0 transitional//"];
var LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
  ...LIMITED_QUIRKS_PUBLIC_ID_PREFIXES,
  "-//w3c//dtd html 4.01 frameset//",
  "-//w3c//dtd html 4.01 transitional//"
];

// node_modules/parse5/dist/common/foreign-content.js
function causesExit(startTagToken) {
  const tn = startTagToken.tagID;
  const isFontWithAttrs = tn === TAG_ID.FONT && startTagToken.attrs.some(({ name }) => name === ATTRS.COLOR || name === ATTRS.SIZE || name === ATTRS.FACE);
  return isFontWithAttrs || EXITS_FOREIGN_CONTENT.has(tn);
}
function adjustTokenMathMLAttrs(token2) {
  for (let i3 = 0;i3 < token2.attrs.length; i3++) {
    if (token2.attrs[i3].name === DEFINITION_URL_ATTR) {
      token2.attrs[i3].name = ADJUSTED_DEFINITION_URL_ATTR;
      break;
    }
  }
}
function adjustTokenSVGAttrs(token2) {
  for (let i3 = 0;i3 < token2.attrs.length; i3++) {
    const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token2.attrs[i3].name);
    if (adjustedAttrName != null) {
      token2.attrs[i3].name = adjustedAttrName;
    }
  }
}
function adjustTokenXMLAttrs(token2) {
  for (let i3 = 0;i3 < token2.attrs.length; i3++) {
    const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token2.attrs[i3].name);
    if (adjustedAttrEntry) {
      token2.attrs[i3].prefix = adjustedAttrEntry.prefix;
      token2.attrs[i3].name = adjustedAttrEntry.name;
      token2.attrs[i3].namespace = adjustedAttrEntry.namespace;
    }
  }
}
function adjustTokenSVGTagName(token2) {
  const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token2.tagName);
  if (adjustedTagName != null) {
    token2.tagName = adjustedTagName;
    token2.tagID = getTagID(token2.tagName);
  }
}
function isMathMLTextIntegrationPoint(tn, ns) {
  return ns === NS.MATHML && (tn === TAG_ID.MI || tn === TAG_ID.MO || tn === TAG_ID.MN || tn === TAG_ID.MS || tn === TAG_ID.MTEXT);
}
function isHtmlIntegrationPoint(tn, ns, attrs) {
  if (ns === NS.MATHML && tn === TAG_ID.ANNOTATION_XML) {
    for (let i3 = 0;i3 < attrs.length; i3++) {
      if (attrs[i3].name === ATTRS.ENCODING) {
        const value15 = attrs[i3].value.toLowerCase();
        return value15 === MIME_TYPES.TEXT_HTML || value15 === MIME_TYPES.APPLICATION_XML;
      }
    }
  }
  return ns === NS.SVG && (tn === TAG_ID.FOREIGN_OBJECT || tn === TAG_ID.DESC || tn === TAG_ID.TITLE);
}
function isIntegrationPoint(tn, ns, attrs, foreignNS) {
  return (!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs) || (!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns);
}
var MIME_TYPES = {
  TEXT_HTML: "text/html",
  APPLICATION_XML: "application/xhtml+xml"
};
var DEFINITION_URL_ATTR = "definitionurl";
var ADJUSTED_DEFINITION_URL_ATTR = "definitionURL";
var SVG_ATTRS_ADJUSTMENT_MAP = new Map([
  "attributeName",
  "attributeType",
  "baseFrequency",
  "baseProfile",
  "calcMode",
  "clipPathUnits",
  "diffuseConstant",
  "edgeMode",
  "filterUnits",
  "glyphRef",
  "gradientTransform",
  "gradientUnits",
  "kernelMatrix",
  "kernelUnitLength",
  "keyPoints",
  "keySplines",
  "keyTimes",
  "lengthAdjust",
  "limitingConeAngle",
  "markerHeight",
  "markerUnits",
  "markerWidth",
  "maskContentUnits",
  "maskUnits",
  "numOctaves",
  "pathLength",
  "patternContentUnits",
  "patternTransform",
  "patternUnits",
  "pointsAtX",
  "pointsAtY",
  "pointsAtZ",
  "preserveAlpha",
  "preserveAspectRatio",
  "primitiveUnits",
  "refX",
  "refY",
  "repeatCount",
  "repeatDur",
  "requiredExtensions",
  "requiredFeatures",
  "specularConstant",
  "specularExponent",
  "spreadMethod",
  "startOffset",
  "stdDeviation",
  "stitchTiles",
  "surfaceScale",
  "systemLanguage",
  "tableValues",
  "targetX",
  "targetY",
  "textLength",
  "viewBox",
  "viewTarget",
  "xChannelSelector",
  "yChannelSelector",
  "zoomAndPan"
].map((attr2) => [attr2.toLowerCase(), attr2]));
var XML_ATTRS_ADJUSTMENT_MAP = new Map([
  ["xlink:actuate", { prefix: "xlink", name: "actuate", namespace: NS.XLINK }],
  ["xlink:arcrole", { prefix: "xlink", name: "arcrole", namespace: NS.XLINK }],
  ["xlink:href", { prefix: "xlink", name: "href", namespace: NS.XLINK }],
  ["xlink:role", { prefix: "xlink", name: "role", namespace: NS.XLINK }],
  ["xlink:show", { prefix: "xlink", name: "show", namespace: NS.XLINK }],
  ["xlink:title", { prefix: "xlink", name: "title", namespace: NS.XLINK }],
  ["xlink:type", { prefix: "xlink", name: "type", namespace: NS.XLINK }],
  ["xml:base", { prefix: "xml", name: "base", namespace: NS.XML }],
  ["xml:lang", { prefix: "xml", name: "lang", namespace: NS.XML }],
  ["xml:space", { prefix: "xml", name: "space", namespace: NS.XML }],
  ["xmlns", { prefix: "", name: "xmlns", namespace: NS.XMLNS }],
  ["xmlns:xlink", { prefix: "xmlns", name: "xlink", namespace: NS.XMLNS }]
]);
var SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map([
  "altGlyph",
  "altGlyphDef",
  "altGlyphItem",
  "animateColor",
  "animateMotion",
  "animateTransform",
  "clipPath",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "foreignObject",
  "glyphRef",
  "linearGradient",
  "radialGradient",
  "textPath"
].map((tn) => [tn.toLowerCase(), tn]));
var EXITS_FOREIGN_CONTENT = new Set([
  TAG_ID.B,
  TAG_ID.BIG,
  TAG_ID.BLOCKQUOTE,
  TAG_ID.BODY,
  TAG_ID.BR,
  TAG_ID.CENTER,
  TAG_ID.CODE,
  TAG_ID.DD,
  TAG_ID.DIV,
  TAG_ID.DL,
  TAG_ID.DT,
  TAG_ID.EM,
  TAG_ID.EMBED,
  TAG_ID.H1,
  TAG_ID.H2,
  TAG_ID.H3,
  TAG_ID.H4,
  TAG_ID.H5,
  TAG_ID.H6,
  TAG_ID.HEAD,
  TAG_ID.HR,
  TAG_ID.I,
  TAG_ID.IMG,
  TAG_ID.LI,
  TAG_ID.LISTING,
  TAG_ID.MENU,
  TAG_ID.META,
  TAG_ID.NOBR,
  TAG_ID.OL,
  TAG_ID.P,
  TAG_ID.PRE,
  TAG_ID.RUBY,
  TAG_ID.S,
  TAG_ID.SMALL,
  TAG_ID.SPAN,
  TAG_ID.STRONG,
  TAG_ID.STRIKE,
  TAG_ID.SUB,
  TAG_ID.SUP,
  TAG_ID.TABLE,
  TAG_ID.TT,
  TAG_ID.U,
  TAG_ID.UL,
  TAG_ID.VAR
]);

// node_modules/parse5/dist/parser/index.js
function aaObtainFormattingElementEntry(p3, token3) {
  let formattingElementEntry = p3.activeFormattingElements.getElementEntryInScopeWithTagName(token3.tagName);
  if (formattingElementEntry) {
    if (!p3.openElements.contains(formattingElementEntry.element)) {
      p3.activeFormattingElements.removeEntry(formattingElementEntry);
      formattingElementEntry = null;
    } else if (!p3.openElements.hasInScope(token3.tagID)) {
      formattingElementEntry = null;
    }
  } else {
    genericEndTagInBody(p3, token3);
  }
  return formattingElementEntry;
}
function aaObtainFurthestBlock(p3, formattingElementEntry) {
  let furthestBlock = null;
  let idx = p3.openElements.stackTop;
  for (;idx >= 0; idx--) {
    const element = p3.openElements.items[idx];
    if (element === formattingElementEntry.element) {
      break;
    }
    if (p3._isSpecialElement(element, p3.openElements.tagIDs[idx])) {
      furthestBlock = element;
    }
  }
  if (!furthestBlock) {
    p3.openElements.shortenToLength(idx < 0 ? 0 : idx);
    p3.activeFormattingElements.removeEntry(formattingElementEntry);
  }
  return furthestBlock;
}
function aaInnerLoop(p3, furthestBlock, formattingElement) {
  let lastElement = furthestBlock;
  let nextElement = p3.openElements.getCommonAncestor(furthestBlock);
  for (let i3 = 0, element = nextElement;element !== formattingElement; i3++, element = nextElement) {
    nextElement = p3.openElements.getCommonAncestor(element);
    const elementEntry = p3.activeFormattingElements.getElementEntry(element);
    const counterOverflow = elementEntry && i3 >= AA_INNER_LOOP_ITER;
    const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;
    if (shouldRemoveFromOpenElements) {
      if (counterOverflow) {
        p3.activeFormattingElements.removeEntry(elementEntry);
      }
      p3.openElements.remove(element);
    } else {
      element = aaRecreateElementFromEntry(p3, elementEntry);
      if (lastElement === furthestBlock) {
        p3.activeFormattingElements.bookmark = elementEntry;
      }
      p3.treeAdapter.detachNode(lastElement);
      p3.treeAdapter.appendChild(element, lastElement);
      lastElement = element;
    }
  }
  return lastElement;
}
function aaRecreateElementFromEntry(p3, elementEntry) {
  const ns = p3.treeAdapter.getNamespaceURI(elementEntry.element);
  const newElement = p3.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
  p3.openElements.replace(elementEntry.element, newElement);
  elementEntry.element = newElement;
  return newElement;
}
function aaInsertLastNodeInCommonAncestor(p3, commonAncestor, lastElement) {
  const tn = p3.treeAdapter.getTagName(commonAncestor);
  const tid = getTagID(tn);
  if (p3._isElementCausesFosterParenting(tid)) {
    p3._fosterParentElement(lastElement);
  } else {
    const ns = p3.treeAdapter.getNamespaceURI(commonAncestor);
    if (tid === TAG_ID.TEMPLATE && ns === NS.HTML) {
      commonAncestor = p3.treeAdapter.getTemplateContent(commonAncestor);
    }
    p3.treeAdapter.appendChild(commonAncestor, lastElement);
  }
}
function aaReplaceFormattingElement(p3, furthestBlock, formattingElementEntry) {
  const ns = p3.treeAdapter.getNamespaceURI(formattingElementEntry.element);
  const { token: token3 } = formattingElementEntry;
  const newElement = p3.treeAdapter.createElement(token3.tagName, ns, token3.attrs);
  p3._adoptNodes(furthestBlock, newElement);
  p3.treeAdapter.appendChild(furthestBlock, newElement);
  p3.activeFormattingElements.insertElementAfterBookmark(newElement, token3);
  p3.activeFormattingElements.removeEntry(formattingElementEntry);
  p3.openElements.remove(formattingElementEntry.element);
  p3.openElements.insertAfter(furthestBlock, newElement, token3.tagID);
}
function callAdoptionAgency(p3, token3) {
  for (let i3 = 0;i3 < AA_OUTER_LOOP_ITER; i3++) {
    const formattingElementEntry = aaObtainFormattingElementEntry(p3, token3);
    if (!formattingElementEntry) {
      break;
    }
    const furthestBlock = aaObtainFurthestBlock(p3, formattingElementEntry);
    if (!furthestBlock) {
      break;
    }
    p3.activeFormattingElements.bookmark = formattingElementEntry;
    const lastElement = aaInnerLoop(p3, furthestBlock, formattingElementEntry.element);
    const commonAncestor = p3.openElements.getCommonAncestor(formattingElementEntry.element);
    p3.treeAdapter.detachNode(lastElement);
    if (commonAncestor)
      aaInsertLastNodeInCommonAncestor(p3, commonAncestor, lastElement);
    aaReplaceFormattingElement(p3, furthestBlock, formattingElementEntry);
  }
}
function appendComment(p3, token3) {
  p3._appendCommentNode(token3, p3.openElements.currentTmplContentOrNode);
}
function appendCommentToRootHtmlElement(p3, token3) {
  p3._appendCommentNode(token3, p3.openElements.items[0]);
}
function appendCommentToDocument(p3, token3) {
  p3._appendCommentNode(token3, p3.document);
}
function stopParsing(p3, token3) {
  p3.stopped = true;
  if (token3.location) {
    const target = p3.fragmentContext ? 0 : 2;
    for (let i3 = p3.openElements.stackTop;i3 >= target; i3--) {
      p3._setEndLocation(p3.openElements.items[i3], token3);
    }
    if (!p3.fragmentContext && p3.openElements.stackTop >= 0) {
      const htmlElement = p3.openElements.items[0];
      const htmlLocation = p3.treeAdapter.getNodeSourceCodeLocation(htmlElement);
      if (htmlLocation && !htmlLocation.endTag) {
        p3._setEndLocation(htmlElement, token3);
        if (p3.openElements.stackTop >= 1) {
          const bodyElement = p3.openElements.items[1];
          const bodyLocation = p3.treeAdapter.getNodeSourceCodeLocation(bodyElement);
          if (bodyLocation && !bodyLocation.endTag) {
            p3._setEndLocation(bodyElement, token3);
          }
        }
      }
    }
  }
}
function doctypeInInitialMode(p3, token3) {
  p3._setDocumentType(token3);
  const mode = token3.forceQuirks ? DOCUMENT_MODE.QUIRKS : getDocumentMode(token3);
  if (!isConforming(token3)) {
    p3._err(token3, ERR.nonConformingDoctype);
  }
  p3.treeAdapter.setDocumentMode(p3.document, mode);
  p3.insertionMode = InsertionMode.BEFORE_HTML;
}
function tokenInInitialMode(p3, token3) {
  p3._err(token3, ERR.missingDoctype, true);
  p3.treeAdapter.setDocumentMode(p3.document, DOCUMENT_MODE.QUIRKS);
  p3.insertionMode = InsertionMode.BEFORE_HTML;
  p3._processToken(token3);
}
function startTagBeforeHtml(p3, token3) {
  if (token3.tagID === TAG_ID.HTML) {
    p3._insertElement(token3, NS.HTML);
    p3.insertionMode = InsertionMode.BEFORE_HEAD;
  } else {
    tokenBeforeHtml(p3, token3);
  }
}
function endTagBeforeHtml(p3, token3) {
  const tn = token3.tagID;
  if (tn === TAG_ID.HTML || tn === TAG_ID.HEAD || tn === TAG_ID.BODY || tn === TAG_ID.BR) {
    tokenBeforeHtml(p3, token3);
  }
}
function tokenBeforeHtml(p3, token3) {
  p3._insertFakeRootElement();
  p3.insertionMode = InsertionMode.BEFORE_HEAD;
  p3._processToken(token3);
}
function startTagBeforeHead(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p3, token3);
      break;
    }
    case TAG_ID.HEAD: {
      p3._insertElement(token3, NS.HTML);
      p3.headElement = p3.openElements.current;
      p3.insertionMode = InsertionMode.IN_HEAD;
      break;
    }
    default: {
      tokenBeforeHead(p3, token3);
    }
  }
}
function endTagBeforeHead(p3, token3) {
  const tn = token3.tagID;
  if (tn === TAG_ID.HEAD || tn === TAG_ID.BODY || tn === TAG_ID.HTML || tn === TAG_ID.BR) {
    tokenBeforeHead(p3, token3);
  } else {
    p3._err(token3, ERR.endTagWithoutMatchingOpenElement);
  }
}
function tokenBeforeHead(p3, token3) {
  p3._insertFakeElement(TAG_NAMES.HEAD, TAG_ID.HEAD);
  p3.headElement = p3.openElements.current;
  p3.insertionMode = InsertionMode.IN_HEAD;
  p3._processToken(token3);
}
function startTagInHead(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p3, token3);
      break;
    }
    case TAG_ID.BASE:
    case TAG_ID.BASEFONT:
    case TAG_ID.BGSOUND:
    case TAG_ID.LINK:
    case TAG_ID.META: {
      p3._appendElement(token3, NS.HTML);
      token3.ackSelfClosing = true;
      break;
    }
    case TAG_ID.TITLE: {
      p3._switchToTextParsing(token3, TokenizerMode.RCDATA);
      break;
    }
    case TAG_ID.NOSCRIPT: {
      if (p3.options.scriptingEnabled) {
        p3._switchToTextParsing(token3, TokenizerMode.RAWTEXT);
      } else {
        p3._insertElement(token3, NS.HTML);
        p3.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;
      }
      break;
    }
    case TAG_ID.NOFRAMES:
    case TAG_ID.STYLE: {
      p3._switchToTextParsing(token3, TokenizerMode.RAWTEXT);
      break;
    }
    case TAG_ID.SCRIPT: {
      p3._switchToTextParsing(token3, TokenizerMode.SCRIPT_DATA);
      break;
    }
    case TAG_ID.TEMPLATE: {
      p3._insertTemplate(token3);
      p3.activeFormattingElements.insertMarker();
      p3.framesetOk = false;
      p3.insertionMode = InsertionMode.IN_TEMPLATE;
      p3.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);
      break;
    }
    case TAG_ID.HEAD: {
      p3._err(token3, ERR.misplacedStartTagForHeadElement);
      break;
    }
    default: {
      tokenInHead(p3, token3);
    }
  }
}
function endTagInHead(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.HEAD: {
      p3.openElements.pop();
      p3.insertionMode = InsertionMode.AFTER_HEAD;
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.BR:
    case TAG_ID.HTML: {
      tokenInHead(p3, token3);
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p3, token3);
      break;
    }
    default: {
      p3._err(token3, ERR.endTagWithoutMatchingOpenElement);
    }
  }
}
function templateEndTagInHead(p3, token3) {
  if (p3.openElements.tmplCount > 0) {
    p3.openElements.generateImpliedEndTagsThoroughly();
    if (p3.openElements.currentTagId !== TAG_ID.TEMPLATE) {
      p3._err(token3, ERR.closingOfElementWithOpenChildElements);
    }
    p3.openElements.popUntilTagNamePopped(TAG_ID.TEMPLATE);
    p3.activeFormattingElements.clearToLastMarker();
    p3.tmplInsertionModeStack.shift();
    p3._resetInsertionMode();
  } else {
    p3._err(token3, ERR.endTagWithoutMatchingOpenElement);
  }
}
function tokenInHead(p3, token3) {
  p3.openElements.pop();
  p3.insertionMode = InsertionMode.AFTER_HEAD;
  p3._processToken(token3);
}
function startTagInHeadNoScript(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p3, token3);
      break;
    }
    case TAG_ID.BASEFONT:
    case TAG_ID.BGSOUND:
    case TAG_ID.HEAD:
    case TAG_ID.LINK:
    case TAG_ID.META:
    case TAG_ID.NOFRAMES:
    case TAG_ID.STYLE: {
      startTagInHead(p3, token3);
      break;
    }
    case TAG_ID.NOSCRIPT: {
      p3._err(token3, ERR.nestedNoscriptInHead);
      break;
    }
    default: {
      tokenInHeadNoScript(p3, token3);
    }
  }
}
function endTagInHeadNoScript(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.NOSCRIPT: {
      p3.openElements.pop();
      p3.insertionMode = InsertionMode.IN_HEAD;
      break;
    }
    case TAG_ID.BR: {
      tokenInHeadNoScript(p3, token3);
      break;
    }
    default: {
      p3._err(token3, ERR.endTagWithoutMatchingOpenElement);
    }
  }
}
function tokenInHeadNoScript(p3, token3) {
  const errCode = token3.type === TokenType.EOF ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;
  p3._err(token3, errCode);
  p3.openElements.pop();
  p3.insertionMode = InsertionMode.IN_HEAD;
  p3._processToken(token3);
}
function startTagAfterHead(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p3, token3);
      break;
    }
    case TAG_ID.BODY: {
      p3._insertElement(token3, NS.HTML);
      p3.framesetOk = false;
      p3.insertionMode = InsertionMode.IN_BODY;
      break;
    }
    case TAG_ID.FRAMESET: {
      p3._insertElement(token3, NS.HTML);
      p3.insertionMode = InsertionMode.IN_FRAMESET;
      break;
    }
    case TAG_ID.BASE:
    case TAG_ID.BASEFONT:
    case TAG_ID.BGSOUND:
    case TAG_ID.LINK:
    case TAG_ID.META:
    case TAG_ID.NOFRAMES:
    case TAG_ID.SCRIPT:
    case TAG_ID.STYLE:
    case TAG_ID.TEMPLATE:
    case TAG_ID.TITLE: {
      p3._err(token3, ERR.abandonedHeadElementChild);
      p3.openElements.push(p3.headElement, TAG_ID.HEAD);
      startTagInHead(p3, token3);
      p3.openElements.remove(p3.headElement);
      break;
    }
    case TAG_ID.HEAD: {
      p3._err(token3, ERR.misplacedStartTagForHeadElement);
      break;
    }
    default: {
      tokenAfterHead(p3, token3);
    }
  }
}
function endTagAfterHead(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.BODY:
    case TAG_ID.HTML:
    case TAG_ID.BR: {
      tokenAfterHead(p3, token3);
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p3, token3);
      break;
    }
    default: {
      p3._err(token3, ERR.endTagWithoutMatchingOpenElement);
    }
  }
}
function tokenAfterHead(p3, token3) {
  p3._insertFakeElement(TAG_NAMES.BODY, TAG_ID.BODY);
  p3.insertionMode = InsertionMode.IN_BODY;
  modeInBody(p3, token3);
}
function modeInBody(p3, token3) {
  switch (token3.type) {
    case TokenType.CHARACTER: {
      characterInBody(p3, token3);
      break;
    }
    case TokenType.WHITESPACE_CHARACTER: {
      whitespaceCharacterInBody(p3, token3);
      break;
    }
    case TokenType.COMMENT: {
      appendComment(p3, token3);
      break;
    }
    case TokenType.START_TAG: {
      startTagInBody(p3, token3);
      break;
    }
    case TokenType.END_TAG: {
      endTagInBody(p3, token3);
      break;
    }
    case TokenType.EOF: {
      eofInBody(p3, token3);
      break;
    }
    default:
  }
}
function whitespaceCharacterInBody(p3, token3) {
  p3._reconstructActiveFormattingElements();
  p3._insertCharacters(token3);
}
function characterInBody(p3, token3) {
  p3._reconstructActiveFormattingElements();
  p3._insertCharacters(token3);
  p3.framesetOk = false;
}
function htmlStartTagInBody(p3, token3) {
  if (p3.openElements.tmplCount === 0) {
    p3.treeAdapter.adoptAttributes(p3.openElements.items[0], token3.attrs);
  }
}
function bodyStartTagInBody(p3, token3) {
  const bodyElement = p3.openElements.tryPeekProperlyNestedBodyElement();
  if (bodyElement && p3.openElements.tmplCount === 0) {
    p3.framesetOk = false;
    p3.treeAdapter.adoptAttributes(bodyElement, token3.attrs);
  }
}
function framesetStartTagInBody(p3, token3) {
  const bodyElement = p3.openElements.tryPeekProperlyNestedBodyElement();
  if (p3.framesetOk && bodyElement) {
    p3.treeAdapter.detachNode(bodyElement);
    p3.openElements.popAllUpToHtmlElement();
    p3._insertElement(token3, NS.HTML);
    p3.insertionMode = InsertionMode.IN_FRAMESET;
  }
}
function addressStartTagInBody(p3, token3) {
  if (p3.openElements.hasInButtonScope(TAG_ID.P)) {
    p3._closePElement();
  }
  p3._insertElement(token3, NS.HTML);
}
function numberedHeaderStartTagInBody(p3, token3) {
  if (p3.openElements.hasInButtonScope(TAG_ID.P)) {
    p3._closePElement();
  }
  if (isNumberedHeader(p3.openElements.currentTagId)) {
    p3.openElements.pop();
  }
  p3._insertElement(token3, NS.HTML);
}
function preStartTagInBody(p3, token3) {
  if (p3.openElements.hasInButtonScope(TAG_ID.P)) {
    p3._closePElement();
  }
  p3._insertElement(token3, NS.HTML);
  p3.skipNextNewLine = true;
  p3.framesetOk = false;
}
function formStartTagInBody(p3, token3) {
  const inTemplate = p3.openElements.tmplCount > 0;
  if (!p3.formElement || inTemplate) {
    if (p3.openElements.hasInButtonScope(TAG_ID.P)) {
      p3._closePElement();
    }
    p3._insertElement(token3, NS.HTML);
    if (!inTemplate) {
      p3.formElement = p3.openElements.current;
    }
  }
}
function listItemStartTagInBody(p3, token3) {
  p3.framesetOk = false;
  const tn = token3.tagID;
  for (let i3 = p3.openElements.stackTop;i3 >= 0; i3--) {
    const elementId = p3.openElements.tagIDs[i3];
    if (tn === TAG_ID.LI && elementId === TAG_ID.LI || (tn === TAG_ID.DD || tn === TAG_ID.DT) && (elementId === TAG_ID.DD || elementId === TAG_ID.DT)) {
      p3.openElements.generateImpliedEndTagsWithExclusion(elementId);
      p3.openElements.popUntilTagNamePopped(elementId);
      break;
    }
    if (elementId !== TAG_ID.ADDRESS && elementId !== TAG_ID.DIV && elementId !== TAG_ID.P && p3._isSpecialElement(p3.openElements.items[i3], elementId)) {
      break;
    }
  }
  if (p3.openElements.hasInButtonScope(TAG_ID.P)) {
    p3._closePElement();
  }
  p3._insertElement(token3, NS.HTML);
}
function plaintextStartTagInBody(p3, token3) {
  if (p3.openElements.hasInButtonScope(TAG_ID.P)) {
    p3._closePElement();
  }
  p3._insertElement(token3, NS.HTML);
  p3.tokenizer.state = TokenizerMode.PLAINTEXT;
}
function buttonStartTagInBody(p3, token3) {
  if (p3.openElements.hasInScope(TAG_ID.BUTTON)) {
    p3.openElements.generateImpliedEndTags();
    p3.openElements.popUntilTagNamePopped(TAG_ID.BUTTON);
  }
  p3._reconstructActiveFormattingElements();
  p3._insertElement(token3, NS.HTML);
  p3.framesetOk = false;
}
function aStartTagInBody(p3, token3) {
  const activeElementEntry = p3.activeFormattingElements.getElementEntryInScopeWithTagName(TAG_NAMES.A);
  if (activeElementEntry) {
    callAdoptionAgency(p3, token3);
    p3.openElements.remove(activeElementEntry.element);
    p3.activeFormattingElements.removeEntry(activeElementEntry);
  }
  p3._reconstructActiveFormattingElements();
  p3._insertElement(token3, NS.HTML);
  p3.activeFormattingElements.pushElement(p3.openElements.current, token3);
}
function bStartTagInBody(p3, token3) {
  p3._reconstructActiveFormattingElements();
  p3._insertElement(token3, NS.HTML);
  p3.activeFormattingElements.pushElement(p3.openElements.current, token3);
}
function nobrStartTagInBody(p3, token3) {
  p3._reconstructActiveFormattingElements();
  if (p3.openElements.hasInScope(TAG_ID.NOBR)) {
    callAdoptionAgency(p3, token3);
    p3._reconstructActiveFormattingElements();
  }
  p3._insertElement(token3, NS.HTML);
  p3.activeFormattingElements.pushElement(p3.openElements.current, token3);
}
function appletStartTagInBody(p3, token3) {
  p3._reconstructActiveFormattingElements();
  p3._insertElement(token3, NS.HTML);
  p3.activeFormattingElements.insertMarker();
  p3.framesetOk = false;
}
function tableStartTagInBody(p3, token3) {
  if (p3.treeAdapter.getDocumentMode(p3.document) !== DOCUMENT_MODE.QUIRKS && p3.openElements.hasInButtonScope(TAG_ID.P)) {
    p3._closePElement();
  }
  p3._insertElement(token3, NS.HTML);
  p3.framesetOk = false;
  p3.insertionMode = InsertionMode.IN_TABLE;
}
function areaStartTagInBody(p3, token3) {
  p3._reconstructActiveFormattingElements();
  p3._appendElement(token3, NS.HTML);
  p3.framesetOk = false;
  token3.ackSelfClosing = true;
}
function isHiddenInput(token3) {
  const inputType = getTokenAttr(token3, ATTRS.TYPE);
  return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;
}
function inputStartTagInBody(p3, token3) {
  p3._reconstructActiveFormattingElements();
  p3._appendElement(token3, NS.HTML);
  if (!isHiddenInput(token3)) {
    p3.framesetOk = false;
  }
  token3.ackSelfClosing = true;
}
function paramStartTagInBody(p3, token3) {
  p3._appendElement(token3, NS.HTML);
  token3.ackSelfClosing = true;
}
function hrStartTagInBody(p3, token3) {
  if (p3.openElements.hasInButtonScope(TAG_ID.P)) {
    p3._closePElement();
  }
  p3._appendElement(token3, NS.HTML);
  p3.framesetOk = false;
  token3.ackSelfClosing = true;
}
function imageStartTagInBody(p3, token3) {
  token3.tagName = TAG_NAMES.IMG;
  token3.tagID = TAG_ID.IMG;
  areaStartTagInBody(p3, token3);
}
function textareaStartTagInBody(p3, token3) {
  p3._insertElement(token3, NS.HTML);
  p3.skipNextNewLine = true;
  p3.tokenizer.state = TokenizerMode.RCDATA;
  p3.originalInsertionMode = p3.insertionMode;
  p3.framesetOk = false;
  p3.insertionMode = InsertionMode.TEXT;
}
function xmpStartTagInBody(p3, token3) {
  if (p3.openElements.hasInButtonScope(TAG_ID.P)) {
    p3._closePElement();
  }
  p3._reconstructActiveFormattingElements();
  p3.framesetOk = false;
  p3._switchToTextParsing(token3, TokenizerMode.RAWTEXT);
}
function iframeStartTagInBody(p3, token3) {
  p3.framesetOk = false;
  p3._switchToTextParsing(token3, TokenizerMode.RAWTEXT);
}
function noembedStartTagInBody(p3, token3) {
  p3._switchToTextParsing(token3, TokenizerMode.RAWTEXT);
}
function selectStartTagInBody(p3, token3) {
  p3._reconstructActiveFormattingElements();
  p3._insertElement(token3, NS.HTML);
  p3.framesetOk = false;
  p3.insertionMode = p3.insertionMode === InsertionMode.IN_TABLE || p3.insertionMode === InsertionMode.IN_CAPTION || p3.insertionMode === InsertionMode.IN_TABLE_BODY || p3.insertionMode === InsertionMode.IN_ROW || p3.insertionMode === InsertionMode.IN_CELL ? InsertionMode.IN_SELECT_IN_TABLE : InsertionMode.IN_SELECT;
}
function optgroupStartTagInBody(p3, token3) {
  if (p3.openElements.currentTagId === TAG_ID.OPTION) {
    p3.openElements.pop();
  }
  p3._reconstructActiveFormattingElements();
  p3._insertElement(token3, NS.HTML);
}
function rbStartTagInBody(p3, token3) {
  if (p3.openElements.hasInScope(TAG_ID.RUBY)) {
    p3.openElements.generateImpliedEndTags();
  }
  p3._insertElement(token3, NS.HTML);
}
function rtStartTagInBody(p3, token3) {
  if (p3.openElements.hasInScope(TAG_ID.RUBY)) {
    p3.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.RTC);
  }
  p3._insertElement(token3, NS.HTML);
}
function mathStartTagInBody(p3, token3) {
  p3._reconstructActiveFormattingElements();
  adjustTokenMathMLAttrs(token3);
  adjustTokenXMLAttrs(token3);
  if (token3.selfClosing) {
    p3._appendElement(token3, NS.MATHML);
  } else {
    p3._insertElement(token3, NS.MATHML);
  }
  token3.ackSelfClosing = true;
}
function svgStartTagInBody(p3, token3) {
  p3._reconstructActiveFormattingElements();
  adjustTokenSVGAttrs(token3);
  adjustTokenXMLAttrs(token3);
  if (token3.selfClosing) {
    p3._appendElement(token3, NS.SVG);
  } else {
    p3._insertElement(token3, NS.SVG);
  }
  token3.ackSelfClosing = true;
}
function genericStartTagInBody(p3, token3) {
  p3._reconstructActiveFormattingElements();
  p3._insertElement(token3, NS.HTML);
}
function startTagInBody(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.I:
    case TAG_ID.S:
    case TAG_ID.B:
    case TAG_ID.U:
    case TAG_ID.EM:
    case TAG_ID.TT:
    case TAG_ID.BIG:
    case TAG_ID.CODE:
    case TAG_ID.FONT:
    case TAG_ID.SMALL:
    case TAG_ID.STRIKE:
    case TAG_ID.STRONG: {
      bStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.A: {
      aStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.H1:
    case TAG_ID.H2:
    case TAG_ID.H3:
    case TAG_ID.H4:
    case TAG_ID.H5:
    case TAG_ID.H6: {
      numberedHeaderStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.P:
    case TAG_ID.DL:
    case TAG_ID.OL:
    case TAG_ID.UL:
    case TAG_ID.DIV:
    case TAG_ID.DIR:
    case TAG_ID.NAV:
    case TAG_ID.MAIN:
    case TAG_ID.MENU:
    case TAG_ID.ASIDE:
    case TAG_ID.CENTER:
    case TAG_ID.FIGURE:
    case TAG_ID.FOOTER:
    case TAG_ID.HEADER:
    case TAG_ID.HGROUP:
    case TAG_ID.DIALOG:
    case TAG_ID.DETAILS:
    case TAG_ID.ADDRESS:
    case TAG_ID.ARTICLE:
    case TAG_ID.SECTION:
    case TAG_ID.SUMMARY:
    case TAG_ID.FIELDSET:
    case TAG_ID.BLOCKQUOTE:
    case TAG_ID.FIGCAPTION: {
      addressStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.LI:
    case TAG_ID.DD:
    case TAG_ID.DT: {
      listItemStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.BR:
    case TAG_ID.IMG:
    case TAG_ID.WBR:
    case TAG_ID.AREA:
    case TAG_ID.EMBED:
    case TAG_ID.KEYGEN: {
      areaStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.HR: {
      hrStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.RB:
    case TAG_ID.RTC: {
      rbStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.RT:
    case TAG_ID.RP: {
      rtStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.PRE:
    case TAG_ID.LISTING: {
      preStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.XMP: {
      xmpStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.SVG: {
      svgStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.HTML: {
      htmlStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.BASE:
    case TAG_ID.LINK:
    case TAG_ID.META:
    case TAG_ID.STYLE:
    case TAG_ID.TITLE:
    case TAG_ID.SCRIPT:
    case TAG_ID.BGSOUND:
    case TAG_ID.BASEFONT:
    case TAG_ID.TEMPLATE: {
      startTagInHead(p3, token3);
      break;
    }
    case TAG_ID.BODY: {
      bodyStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.FORM: {
      formStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.NOBR: {
      nobrStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.MATH: {
      mathStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.TABLE: {
      tableStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.INPUT: {
      inputStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.PARAM:
    case TAG_ID.TRACK:
    case TAG_ID.SOURCE: {
      paramStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.IMAGE: {
      imageStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.BUTTON: {
      buttonStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.APPLET:
    case TAG_ID.OBJECT:
    case TAG_ID.MARQUEE: {
      appletStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.IFRAME: {
      iframeStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.SELECT: {
      selectStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.OPTION:
    case TAG_ID.OPTGROUP: {
      optgroupStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.NOEMBED: {
      noembedStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.FRAMESET: {
      framesetStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.TEXTAREA: {
      textareaStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.NOSCRIPT: {
      if (p3.options.scriptingEnabled) {
        noembedStartTagInBody(p3, token3);
      } else {
        genericStartTagInBody(p3, token3);
      }
      break;
    }
    case TAG_ID.PLAINTEXT: {
      plaintextStartTagInBody(p3, token3);
      break;
    }
    case TAG_ID.COL:
    case TAG_ID.TH:
    case TAG_ID.TD:
    case TAG_ID.TR:
    case TAG_ID.HEAD:
    case TAG_ID.FRAME:
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD:
    case TAG_ID.CAPTION:
    case TAG_ID.COLGROUP: {
      break;
    }
    default: {
      genericStartTagInBody(p3, token3);
    }
  }
}
function bodyEndTagInBody(p3, token3) {
  if (p3.openElements.hasInScope(TAG_ID.BODY)) {
    p3.insertionMode = InsertionMode.AFTER_BODY;
    if (p3.options.sourceCodeLocationInfo) {
      const bodyElement = p3.openElements.tryPeekProperlyNestedBodyElement();
      if (bodyElement) {
        p3._setEndLocation(bodyElement, token3);
      }
    }
  }
}
function htmlEndTagInBody(p3, token3) {
  if (p3.openElements.hasInScope(TAG_ID.BODY)) {
    p3.insertionMode = InsertionMode.AFTER_BODY;
    endTagAfterBody(p3, token3);
  }
}
function addressEndTagInBody(p3, token3) {
  const tn = token3.tagID;
  if (p3.openElements.hasInScope(tn)) {
    p3.openElements.generateImpliedEndTags();
    p3.openElements.popUntilTagNamePopped(tn);
  }
}
function formEndTagInBody(p3) {
  const inTemplate = p3.openElements.tmplCount > 0;
  const { formElement } = p3;
  if (!inTemplate) {
    p3.formElement = null;
  }
  if ((formElement || inTemplate) && p3.openElements.hasInScope(TAG_ID.FORM)) {
    p3.openElements.generateImpliedEndTags();
    if (inTemplate) {
      p3.openElements.popUntilTagNamePopped(TAG_ID.FORM);
    } else if (formElement) {
      p3.openElements.remove(formElement);
    }
  }
}
function pEndTagInBody(p3) {
  if (!p3.openElements.hasInButtonScope(TAG_ID.P)) {
    p3._insertFakeElement(TAG_NAMES.P, TAG_ID.P);
  }
  p3._closePElement();
}
function liEndTagInBody(p3) {
  if (p3.openElements.hasInListItemScope(TAG_ID.LI)) {
    p3.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.LI);
    p3.openElements.popUntilTagNamePopped(TAG_ID.LI);
  }
}
function ddEndTagInBody(p3, token3) {
  const tn = token3.tagID;
  if (p3.openElements.hasInScope(tn)) {
    p3.openElements.generateImpliedEndTagsWithExclusion(tn);
    p3.openElements.popUntilTagNamePopped(tn);
  }
}
function numberedHeaderEndTagInBody(p3) {
  if (p3.openElements.hasNumberedHeaderInScope()) {
    p3.openElements.generateImpliedEndTags();
    p3.openElements.popUntilNumberedHeaderPopped();
  }
}
function appletEndTagInBody(p3, token3) {
  const tn = token3.tagID;
  if (p3.openElements.hasInScope(tn)) {
    p3.openElements.generateImpliedEndTags();
    p3.openElements.popUntilTagNamePopped(tn);
    p3.activeFormattingElements.clearToLastMarker();
  }
}
function brEndTagInBody(p3) {
  p3._reconstructActiveFormattingElements();
  p3._insertFakeElement(TAG_NAMES.BR, TAG_ID.BR);
  p3.openElements.pop();
  p3.framesetOk = false;
}
function genericEndTagInBody(p3, token3) {
  const tn = token3.tagName;
  const tid = token3.tagID;
  for (let i3 = p3.openElements.stackTop;i3 > 0; i3--) {
    const element = p3.openElements.items[i3];
    const elementId = p3.openElements.tagIDs[i3];
    if (tid === elementId && (tid !== TAG_ID.UNKNOWN || p3.treeAdapter.getTagName(element) === tn)) {
      p3.openElements.generateImpliedEndTagsWithExclusion(tid);
      if (p3.openElements.stackTop >= i3)
        p3.openElements.shortenToLength(i3);
      break;
    }
    if (p3._isSpecialElement(element, elementId)) {
      break;
    }
  }
}
function endTagInBody(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.A:
    case TAG_ID.B:
    case TAG_ID.I:
    case TAG_ID.S:
    case TAG_ID.U:
    case TAG_ID.EM:
    case TAG_ID.TT:
    case TAG_ID.BIG:
    case TAG_ID.CODE:
    case TAG_ID.FONT:
    case TAG_ID.NOBR:
    case TAG_ID.SMALL:
    case TAG_ID.STRIKE:
    case TAG_ID.STRONG: {
      callAdoptionAgency(p3, token3);
      break;
    }
    case TAG_ID.P: {
      pEndTagInBody(p3);
      break;
    }
    case TAG_ID.DL:
    case TAG_ID.UL:
    case TAG_ID.OL:
    case TAG_ID.DIR:
    case TAG_ID.DIV:
    case TAG_ID.NAV:
    case TAG_ID.PRE:
    case TAG_ID.MAIN:
    case TAG_ID.MENU:
    case TAG_ID.ASIDE:
    case TAG_ID.BUTTON:
    case TAG_ID.CENTER:
    case TAG_ID.FIGURE:
    case TAG_ID.FOOTER:
    case TAG_ID.HEADER:
    case TAG_ID.HGROUP:
    case TAG_ID.DIALOG:
    case TAG_ID.ADDRESS:
    case TAG_ID.ARTICLE:
    case TAG_ID.DETAILS:
    case TAG_ID.SECTION:
    case TAG_ID.SUMMARY:
    case TAG_ID.LISTING:
    case TAG_ID.FIELDSET:
    case TAG_ID.BLOCKQUOTE:
    case TAG_ID.FIGCAPTION: {
      addressEndTagInBody(p3, token3);
      break;
    }
    case TAG_ID.LI: {
      liEndTagInBody(p3);
      break;
    }
    case TAG_ID.DD:
    case TAG_ID.DT: {
      ddEndTagInBody(p3, token3);
      break;
    }
    case TAG_ID.H1:
    case TAG_ID.H2:
    case TAG_ID.H3:
    case TAG_ID.H4:
    case TAG_ID.H5:
    case TAG_ID.H6: {
      numberedHeaderEndTagInBody(p3);
      break;
    }
    case TAG_ID.BR: {
      brEndTagInBody(p3);
      break;
    }
    case TAG_ID.BODY: {
      bodyEndTagInBody(p3, token3);
      break;
    }
    case TAG_ID.HTML: {
      htmlEndTagInBody(p3, token3);
      break;
    }
    case TAG_ID.FORM: {
      formEndTagInBody(p3);
      break;
    }
    case TAG_ID.APPLET:
    case TAG_ID.OBJECT:
    case TAG_ID.MARQUEE: {
      appletEndTagInBody(p3, token3);
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p3, token3);
      break;
    }
    default: {
      genericEndTagInBody(p3, token3);
    }
  }
}
function eofInBody(p3, token3) {
  if (p3.tmplInsertionModeStack.length > 0) {
    eofInTemplate(p3, token3);
  } else {
    stopParsing(p3, token3);
  }
}
function endTagInText(p3, token3) {
  var _a2;
  if (token3.tagID === TAG_ID.SCRIPT) {
    (_a2 = p3.scriptHandler) === null || _a2 === undefined || _a2.call(p3, p3.openElements.current);
  }
  p3.openElements.pop();
  p3.insertionMode = p3.originalInsertionMode;
}
function eofInText(p3, token3) {
  p3._err(token3, ERR.eofInElementThatCanContainOnlyText);
  p3.openElements.pop();
  p3.insertionMode = p3.originalInsertionMode;
  p3.onEof(token3);
}
function characterInTable(p3, token3) {
  if (TABLE_STRUCTURE_TAGS.has(p3.openElements.currentTagId)) {
    p3.pendingCharacterTokens.length = 0;
    p3.hasNonWhitespacePendingCharacterToken = false;
    p3.originalInsertionMode = p3.insertionMode;
    p3.insertionMode = InsertionMode.IN_TABLE_TEXT;
    switch (token3.type) {
      case TokenType.CHARACTER: {
        characterInTableText(p3, token3);
        break;
      }
      case TokenType.WHITESPACE_CHARACTER: {
        whitespaceCharacterInTableText(p3, token3);
        break;
      }
    }
  } else {
    tokenInTable(p3, token3);
  }
}
function captionStartTagInTable(p3, token3) {
  p3.openElements.clearBackToTableContext();
  p3.activeFormattingElements.insertMarker();
  p3._insertElement(token3, NS.HTML);
  p3.insertionMode = InsertionMode.IN_CAPTION;
}
function colgroupStartTagInTable(p3, token3) {
  p3.openElements.clearBackToTableContext();
  p3._insertElement(token3, NS.HTML);
  p3.insertionMode = InsertionMode.IN_COLUMN_GROUP;
}
function colStartTagInTable(p3, token3) {
  p3.openElements.clearBackToTableContext();
  p3._insertFakeElement(TAG_NAMES.COLGROUP, TAG_ID.COLGROUP);
  p3.insertionMode = InsertionMode.IN_COLUMN_GROUP;
  startTagInColumnGroup(p3, token3);
}
function tbodyStartTagInTable(p3, token3) {
  p3.openElements.clearBackToTableContext();
  p3._insertElement(token3, NS.HTML);
  p3.insertionMode = InsertionMode.IN_TABLE_BODY;
}
function tdStartTagInTable(p3, token3) {
  p3.openElements.clearBackToTableContext();
  p3._insertFakeElement(TAG_NAMES.TBODY, TAG_ID.TBODY);
  p3.insertionMode = InsertionMode.IN_TABLE_BODY;
  startTagInTableBody(p3, token3);
}
function tableStartTagInTable(p3, token3) {
  if (p3.openElements.hasInTableScope(TAG_ID.TABLE)) {
    p3.openElements.popUntilTagNamePopped(TAG_ID.TABLE);
    p3._resetInsertionMode();
    p3._processStartTag(token3);
  }
}
function inputStartTagInTable(p3, token3) {
  if (isHiddenInput(token3)) {
    p3._appendElement(token3, NS.HTML);
  } else {
    tokenInTable(p3, token3);
  }
  token3.ackSelfClosing = true;
}
function formStartTagInTable(p3, token3) {
  if (!p3.formElement && p3.openElements.tmplCount === 0) {
    p3._insertElement(token3, NS.HTML);
    p3.formElement = p3.openElements.current;
    p3.openElements.pop();
  }
}
function startTagInTable(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.TD:
    case TAG_ID.TH:
    case TAG_ID.TR: {
      tdStartTagInTable(p3, token3);
      break;
    }
    case TAG_ID.STYLE:
    case TAG_ID.SCRIPT:
    case TAG_ID.TEMPLATE: {
      startTagInHead(p3, token3);
      break;
    }
    case TAG_ID.COL: {
      colStartTagInTable(p3, token3);
      break;
    }
    case TAG_ID.FORM: {
      formStartTagInTable(p3, token3);
      break;
    }
    case TAG_ID.TABLE: {
      tableStartTagInTable(p3, token3);
      break;
    }
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD: {
      tbodyStartTagInTable(p3, token3);
      break;
    }
    case TAG_ID.INPUT: {
      inputStartTagInTable(p3, token3);
      break;
    }
    case TAG_ID.CAPTION: {
      captionStartTagInTable(p3, token3);
      break;
    }
    case TAG_ID.COLGROUP: {
      colgroupStartTagInTable(p3, token3);
      break;
    }
    default: {
      tokenInTable(p3, token3);
    }
  }
}
function endTagInTable(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.TABLE: {
      if (p3.openElements.hasInTableScope(TAG_ID.TABLE)) {
        p3.openElements.popUntilTagNamePopped(TAG_ID.TABLE);
        p3._resetInsertionMode();
      }
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p3, token3);
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.HTML:
    case TAG_ID.TBODY:
    case TAG_ID.TD:
    case TAG_ID.TFOOT:
    case TAG_ID.TH:
    case TAG_ID.THEAD:
    case TAG_ID.TR: {
      break;
    }
    default: {
      tokenInTable(p3, token3);
    }
  }
}
function tokenInTable(p3, token3) {
  const savedFosterParentingState = p3.fosterParentingEnabled;
  p3.fosterParentingEnabled = true;
  modeInBody(p3, token3);
  p3.fosterParentingEnabled = savedFosterParentingState;
}
function whitespaceCharacterInTableText(p3, token3) {
  p3.pendingCharacterTokens.push(token3);
}
function characterInTableText(p3, token3) {
  p3.pendingCharacterTokens.push(token3);
  p3.hasNonWhitespacePendingCharacterToken = true;
}
function tokenInTableText(p3, token3) {
  let i3 = 0;
  if (p3.hasNonWhitespacePendingCharacterToken) {
    for (;i3 < p3.pendingCharacterTokens.length; i3++) {
      tokenInTable(p3, p3.pendingCharacterTokens[i3]);
    }
  } else {
    for (;i3 < p3.pendingCharacterTokens.length; i3++) {
      p3._insertCharacters(p3.pendingCharacterTokens[i3]);
    }
  }
  p3.insertionMode = p3.originalInsertionMode;
  p3._processToken(token3);
}
function startTagInCaption(p3, token3) {
  const tn = token3.tagID;
  if (TABLE_VOID_ELEMENTS.has(tn)) {
    if (p3.openElements.hasInTableScope(TAG_ID.CAPTION)) {
      p3.openElements.generateImpliedEndTags();
      p3.openElements.popUntilTagNamePopped(TAG_ID.CAPTION);
      p3.activeFormattingElements.clearToLastMarker();
      p3.insertionMode = InsertionMode.IN_TABLE;
      startTagInTable(p3, token3);
    }
  } else {
    startTagInBody(p3, token3);
  }
}
function endTagInCaption(p3, token3) {
  const tn = token3.tagID;
  switch (tn) {
    case TAG_ID.CAPTION:
    case TAG_ID.TABLE: {
      if (p3.openElements.hasInTableScope(TAG_ID.CAPTION)) {
        p3.openElements.generateImpliedEndTags();
        p3.openElements.popUntilTagNamePopped(TAG_ID.CAPTION);
        p3.activeFormattingElements.clearToLastMarker();
        p3.insertionMode = InsertionMode.IN_TABLE;
        if (tn === TAG_ID.TABLE) {
          endTagInTable(p3, token3);
        }
      }
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.HTML:
    case TAG_ID.TBODY:
    case TAG_ID.TD:
    case TAG_ID.TFOOT:
    case TAG_ID.TH:
    case TAG_ID.THEAD:
    case TAG_ID.TR: {
      break;
    }
    default: {
      endTagInBody(p3, token3);
    }
  }
}
function startTagInColumnGroup(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p3, token3);
      break;
    }
    case TAG_ID.COL: {
      p3._appendElement(token3, NS.HTML);
      token3.ackSelfClosing = true;
      break;
    }
    case TAG_ID.TEMPLATE: {
      startTagInHead(p3, token3);
      break;
    }
    default: {
      tokenInColumnGroup(p3, token3);
    }
  }
}
function endTagInColumnGroup(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.COLGROUP: {
      if (p3.openElements.currentTagId === TAG_ID.COLGROUP) {
        p3.openElements.pop();
        p3.insertionMode = InsertionMode.IN_TABLE;
      }
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p3, token3);
      break;
    }
    case TAG_ID.COL: {
      break;
    }
    default: {
      tokenInColumnGroup(p3, token3);
    }
  }
}
function tokenInColumnGroup(p3, token3) {
  if (p3.openElements.currentTagId === TAG_ID.COLGROUP) {
    p3.openElements.pop();
    p3.insertionMode = InsertionMode.IN_TABLE;
    p3._processToken(token3);
  }
}
function startTagInTableBody(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.TR: {
      p3.openElements.clearBackToTableBodyContext();
      p3._insertElement(token3, NS.HTML);
      p3.insertionMode = InsertionMode.IN_ROW;
      break;
    }
    case TAG_ID.TH:
    case TAG_ID.TD: {
      p3.openElements.clearBackToTableBodyContext();
      p3._insertFakeElement(TAG_NAMES.TR, TAG_ID.TR);
      p3.insertionMode = InsertionMode.IN_ROW;
      startTagInRow(p3, token3);
      break;
    }
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD: {
      if (p3.openElements.hasTableBodyContextInTableScope()) {
        p3.openElements.clearBackToTableBodyContext();
        p3.openElements.pop();
        p3.insertionMode = InsertionMode.IN_TABLE;
        startTagInTable(p3, token3);
      }
      break;
    }
    default: {
      startTagInTable(p3, token3);
    }
  }
}
function endTagInTableBody(p3, token3) {
  const tn = token3.tagID;
  switch (token3.tagID) {
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD: {
      if (p3.openElements.hasInTableScope(tn)) {
        p3.openElements.clearBackToTableBodyContext();
        p3.openElements.pop();
        p3.insertionMode = InsertionMode.IN_TABLE;
      }
      break;
    }
    case TAG_ID.TABLE: {
      if (p3.openElements.hasTableBodyContextInTableScope()) {
        p3.openElements.clearBackToTableBodyContext();
        p3.openElements.pop();
        p3.insertionMode = InsertionMode.IN_TABLE;
        endTagInTable(p3, token3);
      }
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.HTML:
    case TAG_ID.TD:
    case TAG_ID.TH:
    case TAG_ID.TR: {
      break;
    }
    default: {
      endTagInTable(p3, token3);
    }
  }
}
function startTagInRow(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.TH:
    case TAG_ID.TD: {
      p3.openElements.clearBackToTableRowContext();
      p3._insertElement(token3, NS.HTML);
      p3.insertionMode = InsertionMode.IN_CELL;
      p3.activeFormattingElements.insertMarker();
      break;
    }
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD:
    case TAG_ID.TR: {
      if (p3.openElements.hasInTableScope(TAG_ID.TR)) {
        p3.openElements.clearBackToTableRowContext();
        p3.openElements.pop();
        p3.insertionMode = InsertionMode.IN_TABLE_BODY;
        startTagInTableBody(p3, token3);
      }
      break;
    }
    default: {
      startTagInTable(p3, token3);
    }
  }
}
function endTagInRow(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.TR: {
      if (p3.openElements.hasInTableScope(TAG_ID.TR)) {
        p3.openElements.clearBackToTableRowContext();
        p3.openElements.pop();
        p3.insertionMode = InsertionMode.IN_TABLE_BODY;
      }
      break;
    }
    case TAG_ID.TABLE: {
      if (p3.openElements.hasInTableScope(TAG_ID.TR)) {
        p3.openElements.clearBackToTableRowContext();
        p3.openElements.pop();
        p3.insertionMode = InsertionMode.IN_TABLE_BODY;
        endTagInTableBody(p3, token3);
      }
      break;
    }
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD: {
      if (p3.openElements.hasInTableScope(token3.tagID) || p3.openElements.hasInTableScope(TAG_ID.TR)) {
        p3.openElements.clearBackToTableRowContext();
        p3.openElements.pop();
        p3.insertionMode = InsertionMode.IN_TABLE_BODY;
        endTagInTableBody(p3, token3);
      }
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.HTML:
    case TAG_ID.TD:
    case TAG_ID.TH: {
      break;
    }
    default: {
      endTagInTable(p3, token3);
    }
  }
}
function startTagInCell(p3, token3) {
  const tn = token3.tagID;
  if (TABLE_VOID_ELEMENTS.has(tn)) {
    if (p3.openElements.hasInTableScope(TAG_ID.TD) || p3.openElements.hasInTableScope(TAG_ID.TH)) {
      p3._closeTableCell();
      startTagInRow(p3, token3);
    }
  } else {
    startTagInBody(p3, token3);
  }
}
function endTagInCell(p3, token3) {
  const tn = token3.tagID;
  switch (tn) {
    case TAG_ID.TD:
    case TAG_ID.TH: {
      if (p3.openElements.hasInTableScope(tn)) {
        p3.openElements.generateImpliedEndTags();
        p3.openElements.popUntilTagNamePopped(tn);
        p3.activeFormattingElements.clearToLastMarker();
        p3.insertionMode = InsertionMode.IN_ROW;
      }
      break;
    }
    case TAG_ID.TABLE:
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD:
    case TAG_ID.TR: {
      if (p3.openElements.hasInTableScope(tn)) {
        p3._closeTableCell();
        endTagInRow(p3, token3);
      }
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.HTML: {
      break;
    }
    default: {
      endTagInBody(p3, token3);
    }
  }
}
function startTagInSelect(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p3, token3);
      break;
    }
    case TAG_ID.OPTION: {
      if (p3.openElements.currentTagId === TAG_ID.OPTION) {
        p3.openElements.pop();
      }
      p3._insertElement(token3, NS.HTML);
      break;
    }
    case TAG_ID.OPTGROUP: {
      if (p3.openElements.currentTagId === TAG_ID.OPTION) {
        p3.openElements.pop();
      }
      if (p3.openElements.currentTagId === TAG_ID.OPTGROUP) {
        p3.openElements.pop();
      }
      p3._insertElement(token3, NS.HTML);
      break;
    }
    case TAG_ID.INPUT:
    case TAG_ID.KEYGEN:
    case TAG_ID.TEXTAREA:
    case TAG_ID.SELECT: {
      if (p3.openElements.hasInSelectScope(TAG_ID.SELECT)) {
        p3.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
        p3._resetInsertionMode();
        if (token3.tagID !== TAG_ID.SELECT) {
          p3._processStartTag(token3);
        }
      }
      break;
    }
    case TAG_ID.SCRIPT:
    case TAG_ID.TEMPLATE: {
      startTagInHead(p3, token3);
      break;
    }
    default:
  }
}
function endTagInSelect(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.OPTGROUP: {
      if (p3.openElements.stackTop > 0 && p3.openElements.currentTagId === TAG_ID.OPTION && p3.openElements.tagIDs[p3.openElements.stackTop - 1] === TAG_ID.OPTGROUP) {
        p3.openElements.pop();
      }
      if (p3.openElements.currentTagId === TAG_ID.OPTGROUP) {
        p3.openElements.pop();
      }
      break;
    }
    case TAG_ID.OPTION: {
      if (p3.openElements.currentTagId === TAG_ID.OPTION) {
        p3.openElements.pop();
      }
      break;
    }
    case TAG_ID.SELECT: {
      if (p3.openElements.hasInSelectScope(TAG_ID.SELECT)) {
        p3.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
        p3._resetInsertionMode();
      }
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p3, token3);
      break;
    }
    default:
  }
}
function startTagInSelectInTable(p3, token3) {
  const tn = token3.tagID;
  if (tn === TAG_ID.CAPTION || tn === TAG_ID.TABLE || tn === TAG_ID.TBODY || tn === TAG_ID.TFOOT || tn === TAG_ID.THEAD || tn === TAG_ID.TR || tn === TAG_ID.TD || tn === TAG_ID.TH) {
    p3.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
    p3._resetInsertionMode();
    p3._processStartTag(token3);
  } else {
    startTagInSelect(p3, token3);
  }
}
function endTagInSelectInTable(p3, token3) {
  const tn = token3.tagID;
  if (tn === TAG_ID.CAPTION || tn === TAG_ID.TABLE || tn === TAG_ID.TBODY || tn === TAG_ID.TFOOT || tn === TAG_ID.THEAD || tn === TAG_ID.TR || tn === TAG_ID.TD || tn === TAG_ID.TH) {
    if (p3.openElements.hasInTableScope(tn)) {
      p3.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
      p3._resetInsertionMode();
      p3.onEndTag(token3);
    }
  } else {
    endTagInSelect(p3, token3);
  }
}
function startTagInTemplate(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.BASE:
    case TAG_ID.BASEFONT:
    case TAG_ID.BGSOUND:
    case TAG_ID.LINK:
    case TAG_ID.META:
    case TAG_ID.NOFRAMES:
    case TAG_ID.SCRIPT:
    case TAG_ID.STYLE:
    case TAG_ID.TEMPLATE:
    case TAG_ID.TITLE: {
      startTagInHead(p3, token3);
      break;
    }
    case TAG_ID.CAPTION:
    case TAG_ID.COLGROUP:
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD: {
      p3.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;
      p3.insertionMode = InsertionMode.IN_TABLE;
      startTagInTable(p3, token3);
      break;
    }
    case TAG_ID.COL: {
      p3.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;
      p3.insertionMode = InsertionMode.IN_COLUMN_GROUP;
      startTagInColumnGroup(p3, token3);
      break;
    }
    case TAG_ID.TR: {
      p3.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;
      p3.insertionMode = InsertionMode.IN_TABLE_BODY;
      startTagInTableBody(p3, token3);
      break;
    }
    case TAG_ID.TD:
    case TAG_ID.TH: {
      p3.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;
      p3.insertionMode = InsertionMode.IN_ROW;
      startTagInRow(p3, token3);
      break;
    }
    default: {
      p3.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;
      p3.insertionMode = InsertionMode.IN_BODY;
      startTagInBody(p3, token3);
    }
  }
}
function endTagInTemplate(p3, token3) {
  if (token3.tagID === TAG_ID.TEMPLATE) {
    templateEndTagInHead(p3, token3);
  }
}
function eofInTemplate(p3, token3) {
  if (p3.openElements.tmplCount > 0) {
    p3.openElements.popUntilTagNamePopped(TAG_ID.TEMPLATE);
    p3.activeFormattingElements.clearToLastMarker();
    p3.tmplInsertionModeStack.shift();
    p3._resetInsertionMode();
    p3.onEof(token3);
  } else {
    stopParsing(p3, token3);
  }
}
function startTagAfterBody(p3, token3) {
  if (token3.tagID === TAG_ID.HTML) {
    startTagInBody(p3, token3);
  } else {
    tokenAfterBody(p3, token3);
  }
}
function endTagAfterBody(p3, token3) {
  var _a2;
  if (token3.tagID === TAG_ID.HTML) {
    if (!p3.fragmentContext) {
      p3.insertionMode = InsertionMode.AFTER_AFTER_BODY;
    }
    if (p3.options.sourceCodeLocationInfo && p3.openElements.tagIDs[0] === TAG_ID.HTML) {
      p3._setEndLocation(p3.openElements.items[0], token3);
      const bodyElement = p3.openElements.items[1];
      if (bodyElement && !((_a2 = p3.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a2 === undefined ? undefined : _a2.endTag)) {
        p3._setEndLocation(bodyElement, token3);
      }
    }
  } else {
    tokenAfterBody(p3, token3);
  }
}
function tokenAfterBody(p3, token3) {
  p3.insertionMode = InsertionMode.IN_BODY;
  modeInBody(p3, token3);
}
function startTagInFrameset(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p3, token3);
      break;
    }
    case TAG_ID.FRAMESET: {
      p3._insertElement(token3, NS.HTML);
      break;
    }
    case TAG_ID.FRAME: {
      p3._appendElement(token3, NS.HTML);
      token3.ackSelfClosing = true;
      break;
    }
    case TAG_ID.NOFRAMES: {
      startTagInHead(p3, token3);
      break;
    }
    default:
  }
}
function endTagInFrameset(p3, token3) {
  if (token3.tagID === TAG_ID.FRAMESET && !p3.openElements.isRootHtmlElementCurrent()) {
    p3.openElements.pop();
    if (!p3.fragmentContext && p3.openElements.currentTagId !== TAG_ID.FRAMESET) {
      p3.insertionMode = InsertionMode.AFTER_FRAMESET;
    }
  }
}
function startTagAfterFrameset(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p3, token3);
      break;
    }
    case TAG_ID.NOFRAMES: {
      startTagInHead(p3, token3);
      break;
    }
    default:
  }
}
function endTagAfterFrameset(p3, token3) {
  if (token3.tagID === TAG_ID.HTML) {
    p3.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;
  }
}
function startTagAfterAfterBody(p3, token3) {
  if (token3.tagID === TAG_ID.HTML) {
    startTagInBody(p3, token3);
  } else {
    tokenAfterAfterBody(p3, token3);
  }
}
function tokenAfterAfterBody(p3, token3) {
  p3.insertionMode = InsertionMode.IN_BODY;
  modeInBody(p3, token3);
}
function startTagAfterAfterFrameset(p3, token3) {
  switch (token3.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p3, token3);
      break;
    }
    case TAG_ID.NOFRAMES: {
      startTagInHead(p3, token3);
      break;
    }
    default:
  }
}
function nullCharacterInForeignContent(p3, token3) {
  token3.chars = REPLACEMENT_CHARACTER;
  p3._insertCharacters(token3);
}
function characterInForeignContent(p3, token3) {
  p3._insertCharacters(token3);
  p3.framesetOk = false;
}
function popUntilHtmlOrIntegrationPoint(p3) {
  while (p3.treeAdapter.getNamespaceURI(p3.openElements.current) !== NS.HTML && !p3._isIntegrationPoint(p3.openElements.currentTagId, p3.openElements.current)) {
    p3.openElements.pop();
  }
}
function startTagInForeignContent(p3, token3) {
  if (causesExit(token3)) {
    popUntilHtmlOrIntegrationPoint(p3);
    p3._startTagOutsideForeignContent(token3);
  } else {
    const current = p3._getAdjustedCurrentElement();
    const currentNs = p3.treeAdapter.getNamespaceURI(current);
    if (currentNs === NS.MATHML) {
      adjustTokenMathMLAttrs(token3);
    } else if (currentNs === NS.SVG) {
      adjustTokenSVGTagName(token3);
      adjustTokenSVGAttrs(token3);
    }
    adjustTokenXMLAttrs(token3);
    if (token3.selfClosing) {
      p3._appendElement(token3, currentNs);
    } else {
      p3._insertElement(token3, currentNs);
    }
    token3.ackSelfClosing = true;
  }
}
function endTagInForeignContent(p3, token3) {
  if (token3.tagID === TAG_ID.P || token3.tagID === TAG_ID.BR) {
    popUntilHtmlOrIntegrationPoint(p3);
    p3._endTagOutsideForeignContent(token3);
    return;
  }
  for (let i3 = p3.openElements.stackTop;i3 > 0; i3--) {
    const element = p3.openElements.items[i3];
    if (p3.treeAdapter.getNamespaceURI(element) === NS.HTML) {
      p3._endTagOutsideForeignContent(token3);
      break;
    }
    const tagName = p3.treeAdapter.getTagName(element);
    if (tagName.toLowerCase() === token3.tagName) {
      token3.tagName = tagName;
      p3.openElements.shortenToLength(i3);
      break;
    }
  }
}
var HIDDEN_INPUT_TYPE = "hidden";
var AA_OUTER_LOOP_ITER = 8;
var AA_INNER_LOOP_ITER = 3;
var InsertionMode;
(function(InsertionMode2) {
  InsertionMode2[InsertionMode2["INITIAL"] = 0] = "INITIAL";
  InsertionMode2[InsertionMode2["BEFORE_HTML"] = 1] = "BEFORE_HTML";
  InsertionMode2[InsertionMode2["BEFORE_HEAD"] = 2] = "BEFORE_HEAD";
  InsertionMode2[InsertionMode2["IN_HEAD"] = 3] = "IN_HEAD";
  InsertionMode2[InsertionMode2["IN_HEAD_NO_SCRIPT"] = 4] = "IN_HEAD_NO_SCRIPT";
  InsertionMode2[InsertionMode2["AFTER_HEAD"] = 5] = "AFTER_HEAD";
  InsertionMode2[InsertionMode2["IN_BODY"] = 6] = "IN_BODY";
  InsertionMode2[InsertionMode2["TEXT"] = 7] = "TEXT";
  InsertionMode2[InsertionMode2["IN_TABLE"] = 8] = "IN_TABLE";
  InsertionMode2[InsertionMode2["IN_TABLE_TEXT"] = 9] = "IN_TABLE_TEXT";
  InsertionMode2[InsertionMode2["IN_CAPTION"] = 10] = "IN_CAPTION";
  InsertionMode2[InsertionMode2["IN_COLUMN_GROUP"] = 11] = "IN_COLUMN_GROUP";
  InsertionMode2[InsertionMode2["IN_TABLE_BODY"] = 12] = "IN_TABLE_BODY";
  InsertionMode2[InsertionMode2["IN_ROW"] = 13] = "IN_ROW";
  InsertionMode2[InsertionMode2["IN_CELL"] = 14] = "IN_CELL";
  InsertionMode2[InsertionMode2["IN_SELECT"] = 15] = "IN_SELECT";
  InsertionMode2[InsertionMode2["IN_SELECT_IN_TABLE"] = 16] = "IN_SELECT_IN_TABLE";
  InsertionMode2[InsertionMode2["IN_TEMPLATE"] = 17] = "IN_TEMPLATE";
  InsertionMode2[InsertionMode2["AFTER_BODY"] = 18] = "AFTER_BODY";
  InsertionMode2[InsertionMode2["IN_FRAMESET"] = 19] = "IN_FRAMESET";
  InsertionMode2[InsertionMode2["AFTER_FRAMESET"] = 20] = "AFTER_FRAMESET";
  InsertionMode2[InsertionMode2["AFTER_AFTER_BODY"] = 21] = "AFTER_AFTER_BODY";
  InsertionMode2[InsertionMode2["AFTER_AFTER_FRAMESET"] = 22] = "AFTER_AFTER_FRAMESET";
})(InsertionMode || (InsertionMode = {}));
var BASE_LOC = {
  startLine: -1,
  startCol: -1,
  startOffset: -1,
  endLine: -1,
  endCol: -1,
  endOffset: -1
};
var TABLE_STRUCTURE_TAGS = new Set([TAG_ID.TABLE, TAG_ID.TBODY, TAG_ID.TFOOT, TAG_ID.THEAD, TAG_ID.TR]);
var defaultParserOptions = {
  scriptingEnabled: true,
  sourceCodeLocationInfo: false,
  treeAdapter: defaultTreeAdapter,
  onParseError: null
};

class Parser {
  constructor(options3, document2, fragmentContext = null, scriptHandler = null) {
    this.fragmentContext = fragmentContext;
    this.scriptHandler = scriptHandler;
    this.currentToken = null;
    this.stopped = false;
    this.insertionMode = InsertionMode.INITIAL;
    this.originalInsertionMode = InsertionMode.INITIAL;
    this.headElement = null;
    this.formElement = null;
    this.currentNotInHTML = false;
    this.tmplInsertionModeStack = [];
    this.pendingCharacterTokens = [];
    this.hasNonWhitespacePendingCharacterToken = false;
    this.framesetOk = true;
    this.skipNextNewLine = false;
    this.fosterParentingEnabled = false;
    this.options = {
      ...defaultParserOptions,
      ...options3
    };
    this.treeAdapter = this.options.treeAdapter;
    this.onParseError = this.options.onParseError;
    if (this.onParseError) {
      this.options.sourceCodeLocationInfo = true;
    }
    this.document = document2 !== null && document2 !== undefined ? document2 : this.treeAdapter.createDocument();
    this.tokenizer = new Tokenizer(this.options, this);
    this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
    this.fragmentContextID = fragmentContext ? getTagID(this.treeAdapter.getTagName(fragmentContext)) : TAG_ID.UNKNOWN;
    this._setContextModes(fragmentContext !== null && fragmentContext !== undefined ? fragmentContext : this.document, this.fragmentContextID);
    this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);
  }
  static parse(html9, options3) {
    const parser = new this(options3);
    parser.tokenizer.write(html9, true);
    return parser.document;
  }
  static getFragmentParser(fragmentContext, options3) {
    const opts = {
      ...defaultParserOptions,
      ...options3
    };
    fragmentContext !== null && fragmentContext !== undefined || (fragmentContext = opts.treeAdapter.createElement(TAG_NAMES.TEMPLATE, NS.HTML, []));
    const documentMock = opts.treeAdapter.createElement("documentmock", NS.HTML, []);
    const parser = new this(opts, documentMock, fragmentContext);
    if (parser.fragmentContextID === TAG_ID.TEMPLATE) {
      parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);
    }
    parser._initTokenizerForFragmentParsing();
    parser._insertFakeRootElement();
    parser._resetInsertionMode();
    parser._findFormInFragmentContext();
    return parser;
  }
  getFragment() {
    const rootElement = this.treeAdapter.getFirstChild(this.document);
    const fragment = this.treeAdapter.createDocumentFragment();
    this._adoptNodes(rootElement, fragment);
    return fragment;
  }
  _err(token3, code, beforeToken) {
    var _a2;
    if (!this.onParseError)
      return;
    const loc = (_a2 = token3.location) !== null && _a2 !== undefined ? _a2 : BASE_LOC;
    const err = {
      code,
      startLine: loc.startLine,
      startCol: loc.startCol,
      startOffset: loc.startOffset,
      endLine: beforeToken ? loc.startLine : loc.endLine,
      endCol: beforeToken ? loc.startCol : loc.endCol,
      endOffset: beforeToken ? loc.startOffset : loc.endOffset
    };
    this.onParseError(err);
  }
  onItemPush(node3, tid, isTop) {
    var _a2, _b;
    (_b = (_a2 = this.treeAdapter).onItemPush) === null || _b === undefined || _b.call(_a2, node3);
    if (isTop && this.openElements.stackTop > 0)
      this._setContextModes(node3, tid);
  }
  onItemPop(node3, isTop) {
    var _a2, _b;
    if (this.options.sourceCodeLocationInfo) {
      this._setEndLocation(node3, this.currentToken);
    }
    (_b = (_a2 = this.treeAdapter).onItemPop) === null || _b === undefined || _b.call(_a2, node3, this.openElements.current);
    if (isTop) {
      let current;
      let currentTagId;
      if (this.openElements.stackTop === 0 && this.fragmentContext) {
        current = this.fragmentContext;
        currentTagId = this.fragmentContextID;
      } else {
        ({ current, currentTagId } = this.openElements);
      }
      this._setContextModes(current, currentTagId);
    }
  }
  _setContextModes(current, tid) {
    const isHTML = current === this.document || this.treeAdapter.getNamespaceURI(current) === NS.HTML;
    this.currentNotInHTML = !isHTML;
    this.tokenizer.inForeignNode = !isHTML && !this._isIntegrationPoint(tid, current);
  }
  _switchToTextParsing(currentToken, nextTokenizerState) {
    this._insertElement(currentToken, NS.HTML);
    this.tokenizer.state = nextTokenizerState;
    this.originalInsertionMode = this.insertionMode;
    this.insertionMode = InsertionMode.TEXT;
  }
  switchToPlaintextParsing() {
    this.insertionMode = InsertionMode.TEXT;
    this.originalInsertionMode = InsertionMode.IN_BODY;
    this.tokenizer.state = TokenizerMode.PLAINTEXT;
  }
  _getAdjustedCurrentElement() {
    return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
  }
  _findFormInFragmentContext() {
    let node3 = this.fragmentContext;
    while (node3) {
      if (this.treeAdapter.getTagName(node3) === TAG_NAMES.FORM) {
        this.formElement = node3;
        break;
      }
      node3 = this.treeAdapter.getParentNode(node3);
    }
  }
  _initTokenizerForFragmentParsing() {
    if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML) {
      return;
    }
    switch (this.fragmentContextID) {
      case TAG_ID.TITLE:
      case TAG_ID.TEXTAREA: {
        this.tokenizer.state = TokenizerMode.RCDATA;
        break;
      }
      case TAG_ID.STYLE:
      case TAG_ID.XMP:
      case TAG_ID.IFRAME:
      case TAG_ID.NOEMBED:
      case TAG_ID.NOFRAMES:
      case TAG_ID.NOSCRIPT: {
        this.tokenizer.state = TokenizerMode.RAWTEXT;
        break;
      }
      case TAG_ID.SCRIPT: {
        this.tokenizer.state = TokenizerMode.SCRIPT_DATA;
        break;
      }
      case TAG_ID.PLAINTEXT: {
        this.tokenizer.state = TokenizerMode.PLAINTEXT;
        break;
      }
      default:
    }
  }
  _setDocumentType(token3) {
    const name = token3.name || "";
    const publicId = token3.publicId || "";
    const systemId = token3.systemId || "";
    this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);
    if (token3.location) {
      const documentChildren = this.treeAdapter.getChildNodes(this.document);
      const docTypeNode = documentChildren.find((node3) => this.treeAdapter.isDocumentTypeNode(node3));
      if (docTypeNode) {
        this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token3.location);
      }
    }
  }
  _attachElementToTree(element, location) {
    if (this.options.sourceCodeLocationInfo) {
      const loc = location && {
        ...location,
        startTag: location
      };
      this.treeAdapter.setNodeSourceCodeLocation(element, loc);
    }
    if (this._shouldFosterParentOnInsertion()) {
      this._fosterParentElement(element);
    } else {
      const parent2 = this.openElements.currentTmplContentOrNode;
      this.treeAdapter.appendChild(parent2, element);
    }
  }
  _appendElement(token3, namespaceURI) {
    const element = this.treeAdapter.createElement(token3.tagName, namespaceURI, token3.attrs);
    this._attachElementToTree(element, token3.location);
  }
  _insertElement(token3, namespaceURI) {
    const element = this.treeAdapter.createElement(token3.tagName, namespaceURI, token3.attrs);
    this._attachElementToTree(element, token3.location);
    this.openElements.push(element, token3.tagID);
  }
  _insertFakeElement(tagName, tagID) {
    const element = this.treeAdapter.createElement(tagName, NS.HTML, []);
    this._attachElementToTree(element, null);
    this.openElements.push(element, tagID);
  }
  _insertTemplate(token3) {
    const tmpl = this.treeAdapter.createElement(token3.tagName, NS.HTML, token3.attrs);
    const content = this.treeAdapter.createDocumentFragment();
    this.treeAdapter.setTemplateContent(tmpl, content);
    this._attachElementToTree(tmpl, token3.location);
    this.openElements.push(tmpl, token3.tagID);
    if (this.options.sourceCodeLocationInfo)
      this.treeAdapter.setNodeSourceCodeLocation(content, null);
  }
  _insertFakeRootElement() {
    const element = this.treeAdapter.createElement(TAG_NAMES.HTML, NS.HTML, []);
    if (this.options.sourceCodeLocationInfo)
      this.treeAdapter.setNodeSourceCodeLocation(element, null);
    this.treeAdapter.appendChild(this.openElements.current, element);
    this.openElements.push(element, TAG_ID.HTML);
  }
  _appendCommentNode(token3, parent2) {
    const commentNode = this.treeAdapter.createCommentNode(token3.data);
    this.treeAdapter.appendChild(parent2, commentNode);
    if (this.options.sourceCodeLocationInfo) {
      this.treeAdapter.setNodeSourceCodeLocation(commentNode, token3.location);
    }
  }
  _insertCharacters(token3) {
    let parent2;
    let beforeElement;
    if (this._shouldFosterParentOnInsertion()) {
      ({ parent: parent2, beforeElement } = this._findFosterParentingLocation());
      if (beforeElement) {
        this.treeAdapter.insertTextBefore(parent2, token3.chars, beforeElement);
      } else {
        this.treeAdapter.insertText(parent2, token3.chars);
      }
    } else {
      parent2 = this.openElements.currentTmplContentOrNode;
      this.treeAdapter.insertText(parent2, token3.chars);
    }
    if (!token3.location)
      return;
    const siblings2 = this.treeAdapter.getChildNodes(parent2);
    const textNodeIdx = beforeElement ? siblings2.lastIndexOf(beforeElement) : siblings2.length;
    const textNode = siblings2[textNodeIdx - 1];
    const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);
    if (tnLoc) {
      const { endLine, endCol, endOffset } = token3.location;
      this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });
    } else if (this.options.sourceCodeLocationInfo) {
      this.treeAdapter.setNodeSourceCodeLocation(textNode, token3.location);
    }
  }
  _adoptNodes(donor, recipient) {
    for (let child = this.treeAdapter.getFirstChild(donor);child; child = this.treeAdapter.getFirstChild(donor)) {
      this.treeAdapter.detachNode(child);
      this.treeAdapter.appendChild(recipient, child);
    }
  }
  _setEndLocation(element, closingToken) {
    if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {
      const ctLoc = closingToken.location;
      const tn = this.treeAdapter.getTagName(element);
      const endLoc = closingToken.type === TokenType.END_TAG && tn === closingToken.tagName ? {
        endTag: { ...ctLoc },
        endLine: ctLoc.endLine,
        endCol: ctLoc.endCol,
        endOffset: ctLoc.endOffset
      } : {
        endLine: ctLoc.startLine,
        endCol: ctLoc.startCol,
        endOffset: ctLoc.startOffset
      };
      this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);
    }
  }
  shouldProcessStartTagTokenInForeignContent(token3) {
    if (!this.currentNotInHTML)
      return false;
    let current;
    let currentTagId;
    if (this.openElements.stackTop === 0 && this.fragmentContext) {
      current = this.fragmentContext;
      currentTagId = this.fragmentContextID;
    } else {
      ({ current, currentTagId } = this.openElements);
    }
    if (token3.tagID === TAG_ID.SVG && this.treeAdapter.getTagName(current) === TAG_NAMES.ANNOTATION_XML && this.treeAdapter.getNamespaceURI(current) === NS.MATHML) {
      return false;
    }
    return this.tokenizer.inForeignNode || (token3.tagID === TAG_ID.MGLYPH || token3.tagID === TAG_ID.MALIGNMARK) && !this._isIntegrationPoint(currentTagId, current, NS.HTML);
  }
  _processToken(token3) {
    switch (token3.type) {
      case TokenType.CHARACTER: {
        this.onCharacter(token3);
        break;
      }
      case TokenType.NULL_CHARACTER: {
        this.onNullCharacter(token3);
        break;
      }
      case TokenType.COMMENT: {
        this.onComment(token3);
        break;
      }
      case TokenType.DOCTYPE: {
        this.onDoctype(token3);
        break;
      }
      case TokenType.START_TAG: {
        this._processStartTag(token3);
        break;
      }
      case TokenType.END_TAG: {
        this.onEndTag(token3);
        break;
      }
      case TokenType.EOF: {
        this.onEof(token3);
        break;
      }
      case TokenType.WHITESPACE_CHARACTER: {
        this.onWhitespaceCharacter(token3);
        break;
      }
    }
  }
  _isIntegrationPoint(tid, element, foreignNS) {
    const ns = this.treeAdapter.getNamespaceURI(element);
    const attrs = this.treeAdapter.getAttrList(element);
    return isIntegrationPoint(tid, ns, attrs, foreignNS);
  }
  _reconstructActiveFormattingElements() {
    const listLength = this.activeFormattingElements.entries.length;
    if (listLength) {
      const endIndex = this.activeFormattingElements.entries.findIndex((entry) => entry.type === EntryType.Marker || this.openElements.contains(entry.element));
      const unopenIdx = endIndex < 0 ? listLength - 1 : endIndex - 1;
      for (let i3 = unopenIdx;i3 >= 0; i3--) {
        const entry = this.activeFormattingElements.entries[i3];
        this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
        entry.element = this.openElements.current;
      }
    }
  }
  _closeTableCell() {
    this.openElements.generateImpliedEndTags();
    this.openElements.popUntilTableCellPopped();
    this.activeFormattingElements.clearToLastMarker();
    this.insertionMode = InsertionMode.IN_ROW;
  }
  _closePElement() {
    this.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.P);
    this.openElements.popUntilTagNamePopped(TAG_ID.P);
  }
  _resetInsertionMode() {
    for (let i3 = this.openElements.stackTop;i3 >= 0; i3--) {
      switch (i3 === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i3]) {
        case TAG_ID.TR: {
          this.insertionMode = InsertionMode.IN_ROW;
          return;
        }
        case TAG_ID.TBODY:
        case TAG_ID.THEAD:
        case TAG_ID.TFOOT: {
          this.insertionMode = InsertionMode.IN_TABLE_BODY;
          return;
        }
        case TAG_ID.CAPTION: {
          this.insertionMode = InsertionMode.IN_CAPTION;
          return;
        }
        case TAG_ID.COLGROUP: {
          this.insertionMode = InsertionMode.IN_COLUMN_GROUP;
          return;
        }
        case TAG_ID.TABLE: {
          this.insertionMode = InsertionMode.IN_TABLE;
          return;
        }
        case TAG_ID.BODY: {
          this.insertionMode = InsertionMode.IN_BODY;
          return;
        }
        case TAG_ID.FRAMESET: {
          this.insertionMode = InsertionMode.IN_FRAMESET;
          return;
        }
        case TAG_ID.SELECT: {
          this._resetInsertionModeForSelect(i3);
          return;
        }
        case TAG_ID.TEMPLATE: {
          this.insertionMode = this.tmplInsertionModeStack[0];
          return;
        }
        case TAG_ID.HTML: {
          this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;
          return;
        }
        case TAG_ID.TD:
        case TAG_ID.TH: {
          if (i3 > 0) {
            this.insertionMode = InsertionMode.IN_CELL;
            return;
          }
          break;
        }
        case TAG_ID.HEAD: {
          if (i3 > 0) {
            this.insertionMode = InsertionMode.IN_HEAD;
            return;
          }
          break;
        }
      }
    }
    this.insertionMode = InsertionMode.IN_BODY;
  }
  _resetInsertionModeForSelect(selectIdx) {
    if (selectIdx > 0) {
      for (let i3 = selectIdx - 1;i3 > 0; i3--) {
        const tn = this.openElements.tagIDs[i3];
        if (tn === TAG_ID.TEMPLATE) {
          break;
        } else if (tn === TAG_ID.TABLE) {
          this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;
          return;
        }
      }
    }
    this.insertionMode = InsertionMode.IN_SELECT;
  }
  _isElementCausesFosterParenting(tn) {
    return TABLE_STRUCTURE_TAGS.has(tn);
  }
  _shouldFosterParentOnInsertion() {
    return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);
  }
  _findFosterParentingLocation() {
    for (let i3 = this.openElements.stackTop;i3 >= 0; i3--) {
      const openElement = this.openElements.items[i3];
      switch (this.openElements.tagIDs[i3]) {
        case TAG_ID.TEMPLATE: {
          if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {
            return { parent: this.treeAdapter.getTemplateContent(openElement), beforeElement: null };
          }
          break;
        }
        case TAG_ID.TABLE: {
          const parent2 = this.treeAdapter.getParentNode(openElement);
          if (parent2) {
            return { parent: parent2, beforeElement: openElement };
          }
          return { parent: this.openElements.items[i3 - 1], beforeElement: null };
        }
        default:
      }
    }
    return { parent: this.openElements.items[0], beforeElement: null };
  }
  _fosterParentElement(element) {
    const location = this._findFosterParentingLocation();
    if (location.beforeElement) {
      this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
    } else {
      this.treeAdapter.appendChild(location.parent, element);
    }
  }
  _isSpecialElement(element, id) {
    const ns = this.treeAdapter.getNamespaceURI(element);
    return SPECIAL_ELEMENTS[ns].has(id);
  }
  onCharacter(token3) {
    this.skipNextNewLine = false;
    if (this.tokenizer.inForeignNode) {
      characterInForeignContent(this, token3);
      return;
    }
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        tokenInInitialMode(this, token3);
        break;
      }
      case InsertionMode.BEFORE_HTML: {
        tokenBeforeHtml(this, token3);
        break;
      }
      case InsertionMode.BEFORE_HEAD: {
        tokenBeforeHead(this, token3);
        break;
      }
      case InsertionMode.IN_HEAD: {
        tokenInHead(this, token3);
        break;
      }
      case InsertionMode.IN_HEAD_NO_SCRIPT: {
        tokenInHeadNoScript(this, token3);
        break;
      }
      case InsertionMode.AFTER_HEAD: {
        tokenAfterHead(this, token3);
        break;
      }
      case InsertionMode.IN_BODY:
      case InsertionMode.IN_CAPTION:
      case InsertionMode.IN_CELL:
      case InsertionMode.IN_TEMPLATE: {
        characterInBody(this, token3);
        break;
      }
      case InsertionMode.TEXT:
      case InsertionMode.IN_SELECT:
      case InsertionMode.IN_SELECT_IN_TABLE: {
        this._insertCharacters(token3);
        break;
      }
      case InsertionMode.IN_TABLE:
      case InsertionMode.IN_TABLE_BODY:
      case InsertionMode.IN_ROW: {
        characterInTable(this, token3);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        characterInTableText(this, token3);
        break;
      }
      case InsertionMode.IN_COLUMN_GROUP: {
        tokenInColumnGroup(this, token3);
        break;
      }
      case InsertionMode.AFTER_BODY: {
        tokenAfterBody(this, token3);
        break;
      }
      case InsertionMode.AFTER_AFTER_BODY: {
        tokenAfterAfterBody(this, token3);
        break;
      }
      default:
    }
  }
  onNullCharacter(token3) {
    this.skipNextNewLine = false;
    if (this.tokenizer.inForeignNode) {
      nullCharacterInForeignContent(this, token3);
      return;
    }
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        tokenInInitialMode(this, token3);
        break;
      }
      case InsertionMode.BEFORE_HTML: {
        tokenBeforeHtml(this, token3);
        break;
      }
      case InsertionMode.BEFORE_HEAD: {
        tokenBeforeHead(this, token3);
        break;
      }
      case InsertionMode.IN_HEAD: {
        tokenInHead(this, token3);
        break;
      }
      case InsertionMode.IN_HEAD_NO_SCRIPT: {
        tokenInHeadNoScript(this, token3);
        break;
      }
      case InsertionMode.AFTER_HEAD: {
        tokenAfterHead(this, token3);
        break;
      }
      case InsertionMode.TEXT: {
        this._insertCharacters(token3);
        break;
      }
      case InsertionMode.IN_TABLE:
      case InsertionMode.IN_TABLE_BODY:
      case InsertionMode.IN_ROW: {
        characterInTable(this, token3);
        break;
      }
      case InsertionMode.IN_COLUMN_GROUP: {
        tokenInColumnGroup(this, token3);
        break;
      }
      case InsertionMode.AFTER_BODY: {
        tokenAfterBody(this, token3);
        break;
      }
      case InsertionMode.AFTER_AFTER_BODY: {
        tokenAfterAfterBody(this, token3);
        break;
      }
      default:
    }
  }
  onComment(token3) {
    this.skipNextNewLine = false;
    if (this.currentNotInHTML) {
      appendComment(this, token3);
      return;
    }
    switch (this.insertionMode) {
      case InsertionMode.INITIAL:
      case InsertionMode.BEFORE_HTML:
      case InsertionMode.BEFORE_HEAD:
      case InsertionMode.IN_HEAD:
      case InsertionMode.IN_HEAD_NO_SCRIPT:
      case InsertionMode.AFTER_HEAD:
      case InsertionMode.IN_BODY:
      case InsertionMode.IN_TABLE:
      case InsertionMode.IN_CAPTION:
      case InsertionMode.IN_COLUMN_GROUP:
      case InsertionMode.IN_TABLE_BODY:
      case InsertionMode.IN_ROW:
      case InsertionMode.IN_CELL:
      case InsertionMode.IN_SELECT:
      case InsertionMode.IN_SELECT_IN_TABLE:
      case InsertionMode.IN_TEMPLATE:
      case InsertionMode.IN_FRAMESET:
      case InsertionMode.AFTER_FRAMESET: {
        appendComment(this, token3);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        tokenInTableText(this, token3);
        break;
      }
      case InsertionMode.AFTER_BODY: {
        appendCommentToRootHtmlElement(this, token3);
        break;
      }
      case InsertionMode.AFTER_AFTER_BODY:
      case InsertionMode.AFTER_AFTER_FRAMESET: {
        appendCommentToDocument(this, token3);
        break;
      }
      default:
    }
  }
  onDoctype(token3) {
    this.skipNextNewLine = false;
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        doctypeInInitialMode(this, token3);
        break;
      }
      case InsertionMode.BEFORE_HEAD:
      case InsertionMode.IN_HEAD:
      case InsertionMode.IN_HEAD_NO_SCRIPT:
      case InsertionMode.AFTER_HEAD: {
        this._err(token3, ERR.misplacedDoctype);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        tokenInTableText(this, token3);
        break;
      }
      default:
    }
  }
  onStartTag(token3) {
    this.skipNextNewLine = false;
    this.currentToken = token3;
    this._processStartTag(token3);
    if (token3.selfClosing && !token3.ackSelfClosing) {
      this._err(token3, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
    }
  }
  _processStartTag(token3) {
    if (this.shouldProcessStartTagTokenInForeignContent(token3)) {
      startTagInForeignContent(this, token3);
    } else {
      this._startTagOutsideForeignContent(token3);
    }
  }
  _startTagOutsideForeignContent(token3) {
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        tokenInInitialMode(this, token3);
        break;
      }
      case InsertionMode.BEFORE_HTML: {
        startTagBeforeHtml(this, token3);
        break;
      }
      case InsertionMode.BEFORE_HEAD: {
        startTagBeforeHead(this, token3);
        break;
      }
      case InsertionMode.IN_HEAD: {
        startTagInHead(this, token3);
        break;
      }
      case InsertionMode.IN_HEAD_NO_SCRIPT: {
        startTagInHeadNoScript(this, token3);
        break;
      }
      case InsertionMode.AFTER_HEAD: {
        startTagAfterHead(this, token3);
        break;
      }
      case InsertionMode.IN_BODY: {
        startTagInBody(this, token3);
        break;
      }
      case InsertionMode.IN_TABLE: {
        startTagInTable(this, token3);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        tokenInTableText(this, token3);
        break;
      }
      case InsertionMode.IN_CAPTION: {
        startTagInCaption(this, token3);
        break;
      }
      case InsertionMode.IN_COLUMN_GROUP: {
        startTagInColumnGroup(this, token3);
        break;
      }
      case InsertionMode.IN_TABLE_BODY: {
        startTagInTableBody(this, token3);
        break;
      }
      case InsertionMode.IN_ROW: {
        startTagInRow(this, token3);
        break;
      }
      case InsertionMode.IN_CELL: {
        startTagInCell(this, token3);
        break;
      }
      case InsertionMode.IN_SELECT: {
        startTagInSelect(this, token3);
        break;
      }
      case InsertionMode.IN_SELECT_IN_TABLE: {
        startTagInSelectInTable(this, token3);
        break;
      }
      case InsertionMode.IN_TEMPLATE: {
        startTagInTemplate(this, token3);
        break;
      }
      case InsertionMode.AFTER_BODY: {
        startTagAfterBody(this, token3);
        break;
      }
      case InsertionMode.IN_FRAMESET: {
        startTagInFrameset(this, token3);
        break;
      }
      case InsertionMode.AFTER_FRAMESET: {
        startTagAfterFrameset(this, token3);
        break;
      }
      case InsertionMode.AFTER_AFTER_BODY: {
        startTagAfterAfterBody(this, token3);
        break;
      }
      case InsertionMode.AFTER_AFTER_FRAMESET: {
        startTagAfterAfterFrameset(this, token3);
        break;
      }
      default:
    }
  }
  onEndTag(token3) {
    this.skipNextNewLine = false;
    this.currentToken = token3;
    if (this.currentNotInHTML) {
      endTagInForeignContent(this, token3);
    } else {
      this._endTagOutsideForeignContent(token3);
    }
  }
  _endTagOutsideForeignContent(token3) {
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        tokenInInitialMode(this, token3);
        break;
      }
      case InsertionMode.BEFORE_HTML: {
        endTagBeforeHtml(this, token3);
        break;
      }
      case InsertionMode.BEFORE_HEAD: {
        endTagBeforeHead(this, token3);
        break;
      }
      case InsertionMode.IN_HEAD: {
        endTagInHead(this, token3);
        break;
      }
      case InsertionMode.IN_HEAD_NO_SCRIPT: {
        endTagInHeadNoScript(this, token3);
        break;
      }
      case InsertionMode.AFTER_HEAD: {
        endTagAfterHead(this, token3);
        break;
      }
      case InsertionMode.IN_BODY: {
        endTagInBody(this, token3);
        break;
      }
      case InsertionMode.TEXT: {
        endTagInText(this, token3);
        break;
      }
      case InsertionMode.IN_TABLE: {
        endTagInTable(this, token3);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        tokenInTableText(this, token3);
        break;
      }
      case InsertionMode.IN_CAPTION: {
        endTagInCaption(this, token3);
        break;
      }
      case InsertionMode.IN_COLUMN_GROUP: {
        endTagInColumnGroup(this, token3);
        break;
      }
      case InsertionMode.IN_TABLE_BODY: {
        endTagInTableBody(this, token3);
        break;
      }
      case InsertionMode.IN_ROW: {
        endTagInRow(this, token3);
        break;
      }
      case InsertionMode.IN_CELL: {
        endTagInCell(this, token3);
        break;
      }
      case InsertionMode.IN_SELECT: {
        endTagInSelect(this, token3);
        break;
      }
      case InsertionMode.IN_SELECT_IN_TABLE: {
        endTagInSelectInTable(this, token3);
        break;
      }
      case InsertionMode.IN_TEMPLATE: {
        endTagInTemplate(this, token3);
        break;
      }
      case InsertionMode.AFTER_BODY: {
        endTagAfterBody(this, token3);
        break;
      }
      case InsertionMode.IN_FRAMESET: {
        endTagInFrameset(this, token3);
        break;
      }
      case InsertionMode.AFTER_FRAMESET: {
        endTagAfterFrameset(this, token3);
        break;
      }
      case InsertionMode.AFTER_AFTER_BODY: {
        tokenAfterAfterBody(this, token3);
        break;
      }
      default:
    }
  }
  onEof(token3) {
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        tokenInInitialMode(this, token3);
        break;
      }
      case InsertionMode.BEFORE_HTML: {
        tokenBeforeHtml(this, token3);
        break;
      }
      case InsertionMode.BEFORE_HEAD: {
        tokenBeforeHead(this, token3);
        break;
      }
      case InsertionMode.IN_HEAD: {
        tokenInHead(this, token3);
        break;
      }
      case InsertionMode.IN_HEAD_NO_SCRIPT: {
        tokenInHeadNoScript(this, token3);
        break;
      }
      case InsertionMode.AFTER_HEAD: {
        tokenAfterHead(this, token3);
        break;
      }
      case InsertionMode.IN_BODY:
      case InsertionMode.IN_TABLE:
      case InsertionMode.IN_CAPTION:
      case InsertionMode.IN_COLUMN_GROUP:
      case InsertionMode.IN_TABLE_BODY:
      case InsertionMode.IN_ROW:
      case InsertionMode.IN_CELL:
      case InsertionMode.IN_SELECT:
      case InsertionMode.IN_SELECT_IN_TABLE: {
        eofInBody(this, token3);
        break;
      }
      case InsertionMode.TEXT: {
        eofInText(this, token3);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        tokenInTableText(this, token3);
        break;
      }
      case InsertionMode.IN_TEMPLATE: {
        eofInTemplate(this, token3);
        break;
      }
      case InsertionMode.AFTER_BODY:
      case InsertionMode.IN_FRAMESET:
      case InsertionMode.AFTER_FRAMESET:
      case InsertionMode.AFTER_AFTER_BODY:
      case InsertionMode.AFTER_AFTER_FRAMESET: {
        stopParsing(this, token3);
        break;
      }
      default:
    }
  }
  onWhitespaceCharacter(token3) {
    if (this.skipNextNewLine) {
      this.skipNextNewLine = false;
      if (token3.chars.charCodeAt(0) === CODE_POINTS.LINE_FEED) {
        if (token3.chars.length === 1) {
          return;
        }
        token3.chars = token3.chars.substr(1);
      }
    }
    if (this.tokenizer.inForeignNode) {
      this._insertCharacters(token3);
      return;
    }
    switch (this.insertionMode) {
      case InsertionMode.IN_HEAD:
      case InsertionMode.IN_HEAD_NO_SCRIPT:
      case InsertionMode.AFTER_HEAD:
      case InsertionMode.TEXT:
      case InsertionMode.IN_COLUMN_GROUP:
      case InsertionMode.IN_SELECT:
      case InsertionMode.IN_SELECT_IN_TABLE:
      case InsertionMode.IN_FRAMESET:
      case InsertionMode.AFTER_FRAMESET: {
        this._insertCharacters(token3);
        break;
      }
      case InsertionMode.IN_BODY:
      case InsertionMode.IN_CAPTION:
      case InsertionMode.IN_CELL:
      case InsertionMode.IN_TEMPLATE:
      case InsertionMode.AFTER_BODY:
      case InsertionMode.AFTER_AFTER_BODY:
      case InsertionMode.AFTER_AFTER_FRAMESET: {
        whitespaceCharacterInBody(this, token3);
        break;
      }
      case InsertionMode.IN_TABLE:
      case InsertionMode.IN_TABLE_BODY:
      case InsertionMode.IN_ROW: {
        characterInTable(this, token3);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        whitespaceCharacterInTableText(this, token3);
        break;
      }
      default:
    }
  }
}
var TABLE_VOID_ELEMENTS = new Set([TAG_ID.CAPTION, TAG_ID.COL, TAG_ID.COLGROUP, TAG_ID.TBODY, TAG_ID.TD, TAG_ID.TFOOT, TAG_ID.TH, TAG_ID.THEAD, TAG_ID.TR]);
// node_modules/parse5/dist/serializer/index.js
function isVoidElement(node3, options3) {
  return options3.treeAdapter.isElementNode(node3) && options3.treeAdapter.getNamespaceURI(node3) === NS.HTML && VOID_ELEMENTS.has(options3.treeAdapter.getTagName(node3));
}
function serializeOuter(node3, options3) {
  const opts = { ...defaultOpts3, ...options3 };
  return serializeNode(node3, opts);
}
function serializeChildNodes(parentNode, options3) {
  let html10 = "";
  const container = options3.treeAdapter.isElementNode(parentNode) && options3.treeAdapter.getTagName(parentNode) === TAG_NAMES.TEMPLATE && options3.treeAdapter.getNamespaceURI(parentNode) === NS.HTML ? options3.treeAdapter.getTemplateContent(parentNode) : parentNode;
  const childNodes = options3.treeAdapter.getChildNodes(container);
  if (childNodes) {
    for (const currentNode of childNodes) {
      html10 += serializeNode(currentNode, options3);
    }
  }
  return html10;
}
function serializeNode(node3, options3) {
  if (options3.treeAdapter.isElementNode(node3)) {
    return serializeElement(node3, options3);
  }
  if (options3.treeAdapter.isTextNode(node3)) {
    return serializeTextNode(node3, options3);
  }
  if (options3.treeAdapter.isCommentNode(node3)) {
    return serializeCommentNode(node3, options3);
  }
  if (options3.treeAdapter.isDocumentTypeNode(node3)) {
    return serializeDocumentTypeNode(node3, options3);
  }
  return "";
}
function serializeElement(node3, options3) {
  const tn = options3.treeAdapter.getTagName(node3);
  return `<${tn}${serializeAttributes(node3, options3)}>${isVoidElement(node3, options3) ? "" : `${serializeChildNodes(node3, options3)}</${tn}>`}`;
}
function serializeAttributes(node3, { treeAdapter }) {
  let html10 = "";
  for (const attr2 of treeAdapter.getAttrList(node3)) {
    html10 += " ";
    if (!attr2.namespace) {
      html10 += attr2.name;
    } else
      switch (attr2.namespace) {
        case NS.XML: {
          html10 += `xml:${attr2.name}`;
          break;
        }
        case NS.XMLNS: {
          if (attr2.name !== "xmlns") {
            html10 += "xmlns:";
          }
          html10 += attr2.name;
          break;
        }
        case NS.XLINK: {
          html10 += `xlink:${attr2.name}`;
          break;
        }
        default: {
          html10 += `${attr2.prefix}:${attr2.name}`;
        }
      }
    html10 += `="${escapeAttribute(attr2.value)}"`;
  }
  return html10;
}
function serializeTextNode(node3, options3) {
  const { treeAdapter } = options3;
  const content = treeAdapter.getTextNodeContent(node3);
  const parent2 = treeAdapter.getParentNode(node3);
  const parentTn = parent2 && treeAdapter.isElementNode(parent2) && treeAdapter.getTagName(parent2);
  return parentTn && treeAdapter.getNamespaceURI(parent2) === NS.HTML && hasUnescapedText(parentTn, options3.scriptingEnabled) ? content : escapeText(content);
}
function serializeCommentNode(node3, { treeAdapter }) {
  return `<!--${treeAdapter.getCommentNodeContent(node3)}-->`;
}
function serializeDocumentTypeNode(node3, { treeAdapter }) {
  return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node3)}>`;
}
var VOID_ELEMENTS = new Set([
  TAG_NAMES.AREA,
  TAG_NAMES.BASE,
  TAG_NAMES.BASEFONT,
  TAG_NAMES.BGSOUND,
  TAG_NAMES.BR,
  TAG_NAMES.COL,
  TAG_NAMES.EMBED,
  TAG_NAMES.FRAME,
  TAG_NAMES.HR,
  TAG_NAMES.IMG,
  TAG_NAMES.INPUT,
  TAG_NAMES.KEYGEN,
  TAG_NAMES.LINK,
  TAG_NAMES.META,
  TAG_NAMES.PARAM,
  TAG_NAMES.SOURCE,
  TAG_NAMES.TRACK,
  TAG_NAMES.WBR
]);
var defaultOpts3 = { treeAdapter: defaultTreeAdapter, scriptingEnabled: true };

// node_modules/parse5/dist/index.js
function parse10(html10, options3) {
  return Parser.parse(html10, options3);
}
function parseFragment(fragmentContext, html10, options3) {
  if (typeof fragmentContext === "string") {
    options3 = html10;
    html10 = fragmentContext;
    fragmentContext = null;
  }
  const parser2 = Parser.getFragmentParser(fragmentContext, options3);
  parser2.tokenizer.write(html10, true);
  return parser2.getFragment();
}

// node_modules/parse5-htmlparser2-tree-adapter/dist/index.js
function createTextNode2(value15) {
  return new Text2(value15);
}
function enquoteDoctypeId(id) {
  const quote = id.includes('"') ? "'" : '"';
  return quote + id + quote;
}
function serializeDoctypeContent(name, publicId, systemId) {
  let str = "!DOCTYPE ";
  if (name) {
    str += name;
  }
  if (publicId) {
    str += ` PUBLIC ${enquoteDoctypeId(publicId)}`;
  } else if (systemId) {
    str += " SYSTEM";
  }
  if (systemId) {
    str += ` ${enquoteDoctypeId(systemId)}`;
  }
  return str;
}
var adapter = {
  isCommentNode: isComment,
  isElementNode: isTag2,
  isTextNode: isText,
  createDocument() {
    const node3 = new Document([]);
    node3["x-mode"] = exports_html.DOCUMENT_MODE.NO_QUIRKS;
    return node3;
  },
  createDocumentFragment() {
    return new Document([]);
  },
  createElement(tagName, namespaceURI, attrs) {
    const attribs = Object.create(null);
    const attribsNamespace = Object.create(null);
    const attribsPrefix = Object.create(null);
    for (let i3 = 0;i3 < attrs.length; i3++) {
      const attrName = attrs[i3].name;
      attribs[attrName] = attrs[i3].value;
      attribsNamespace[attrName] = attrs[i3].namespace;
      attribsPrefix[attrName] = attrs[i3].prefix;
    }
    const node3 = new Element(tagName, attribs, []);
    node3.namespace = namespaceURI;
    node3["x-attribsNamespace"] = attribsNamespace;
    node3["x-attribsPrefix"] = attribsPrefix;
    return node3;
  },
  createCommentNode(data2) {
    return new Comment2(data2);
  },
  appendChild(parentNode, newNode) {
    const prev2 = parentNode.children[parentNode.children.length - 1];
    if (prev2) {
      prev2.next = newNode;
      newNode.prev = prev2;
    }
    parentNode.children.push(newNode);
    newNode.parent = parentNode;
  },
  insertBefore(parentNode, newNode, referenceNode) {
    const insertionIdx = parentNode.children.indexOf(referenceNode);
    const { prev: prev2 } = referenceNode;
    if (prev2) {
      prev2.next = newNode;
      newNode.prev = prev2;
    }
    referenceNode.prev = newNode;
    newNode.next = referenceNode;
    parentNode.children.splice(insertionIdx, 0, newNode);
    newNode.parent = parentNode;
  },
  setTemplateContent(templateElement, contentElement) {
    adapter.appendChild(templateElement, contentElement);
  },
  getTemplateContent(templateElement) {
    return templateElement.children[0];
  },
  setDocumentType(document2, name, publicId, systemId) {
    const data2 = serializeDoctypeContent(name, publicId, systemId);
    let doctypeNode = document2.children.find((node3) => isDirective(node3) && node3.name === "!doctype");
    if (doctypeNode) {
      doctypeNode.data = data2 !== null && data2 !== undefined ? data2 : null;
    } else {
      doctypeNode = new ProcessingInstruction("!doctype", data2);
      adapter.appendChild(document2, doctypeNode);
    }
    doctypeNode["x-name"] = name !== null && name !== undefined ? name : undefined;
    doctypeNode["x-publicId"] = publicId !== null && publicId !== undefined ? publicId : undefined;
    doctypeNode["x-systemId"] = systemId !== null && systemId !== undefined ? systemId : undefined;
  },
  setDocumentMode(document2, mode) {
    document2["x-mode"] = mode;
  },
  getDocumentMode(document2) {
    return document2["x-mode"];
  },
  detachNode(node3) {
    if (node3.parent) {
      const idx = node3.parent.children.indexOf(node3);
      const { prev: prev2, next: next2 } = node3;
      node3.prev = null;
      node3.next = null;
      if (prev2) {
        prev2.next = next2;
      }
      if (next2) {
        next2.prev = prev2;
      }
      node3.parent.children.splice(idx, 1);
      node3.parent = null;
    }
  },
  insertText(parentNode, text3) {
    const lastChild = parentNode.children[parentNode.children.length - 1];
    if (lastChild && isText(lastChild)) {
      lastChild.data += text3;
    } else {
      adapter.appendChild(parentNode, createTextNode2(text3));
    }
  },
  insertTextBefore(parentNode, text3, referenceNode) {
    const prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];
    if (prevNode && isText(prevNode)) {
      prevNode.data += text3;
    } else {
      adapter.insertBefore(parentNode, createTextNode2(text3), referenceNode);
    }
  },
  adoptAttributes(recipient, attrs) {
    for (let i3 = 0;i3 < attrs.length; i3++) {
      const attrName = attrs[i3].name;
      if (typeof recipient.attribs[attrName] === "undefined") {
        recipient.attribs[attrName] = attrs[i3].value;
        recipient["x-attribsNamespace"][attrName] = attrs[i3].namespace;
        recipient["x-attribsPrefix"][attrName] = attrs[i3].prefix;
      }
    }
  },
  getFirstChild(node3) {
    return node3.children[0];
  },
  getChildNodes(node3) {
    return node3.children;
  },
  getParentNode(node3) {
    return node3.parent;
  },
  getAttrList(element) {
    return element.attributes;
  },
  getTagName(element) {
    return element.name;
  },
  getNamespaceURI(element) {
    return element.namespace;
  },
  getTextNodeContent(textNode) {
    return textNode.data;
  },
  getCommentNodeContent(commentNode) {
    return commentNode.data;
  },
  getDocumentTypeNodeName(doctypeNode) {
    var _a2;
    return (_a2 = doctypeNode["x-name"]) !== null && _a2 !== undefined ? _a2 : "";
  },
  getDocumentTypeNodePublicId(doctypeNode) {
    var _a2;
    return (_a2 = doctypeNode["x-publicId"]) !== null && _a2 !== undefined ? _a2 : "";
  },
  getDocumentTypeNodeSystemId(doctypeNode) {
    var _a2;
    return (_a2 = doctypeNode["x-systemId"]) !== null && _a2 !== undefined ? _a2 : "";
  },
  isDocumentTypeNode(node3) {
    return isDirective(node3) && node3.name === "!doctype";
  },
  setNodeSourceCodeLocation(node3, location) {
    if (location) {
      node3.startIndex = location.startOffset;
      node3.endIndex = location.endOffset;
    }
    node3.sourceCodeLocation = location;
  },
  getNodeSourceCodeLocation(node3) {
    return node3.sourceCodeLocation;
  },
  updateNodeSourceCodeLocation(node3, endLocation) {
    if (endLocation.endOffset != null)
      node3.endIndex = endLocation.endOffset;
    node3.sourceCodeLocation = {
      ...node3.sourceCodeLocation,
      ...endLocation
    };
  }
};

// node_modules/cheerio/dist/esm/parsers/parse5-adapter.js
function parseWithParse5(content, options3, isDocument2, context) {
  var _a2;
  (_a2 = options3.treeAdapter) !== null && _a2 !== undefined || (options3.treeAdapter = adapter);
  if (options3.scriptingEnabled !== false) {
    options3.scriptingEnabled = true;
  }
  return isDocument2 ? parse10(content, options3) : parseFragment(context, content, options3);
}
function renderWithParse5(dom) {
  const nodes = "length" in dom ? dom : [dom];
  for (let index2 = 0;index2 < nodes.length; index2 += 1) {
    const node3 = nodes[index2];
    if (isDocument(node3)) {
      Array.prototype.splice.call(nodes, index2, 1, ...node3.children);
    }
  }
  let result = "";
  for (let index2 = 0;index2 < nodes.length; index2 += 1) {
    const node3 = nodes[index2];
    result += serializeOuter(node3, renderOpts);
  }
  return result;
}
var renderOpts = { treeAdapter: adapter };

// node_modules/htmlparser2/lib/esm/Tokenizer.js
function isWhitespace3(c3) {
  return c3 === CharCodes2.Space || c3 === CharCodes2.NewLine || c3 === CharCodes2.Tab || c3 === CharCodes2.FormFeed || c3 === CharCodes2.CarriageReturn;
}
function isEndOfTagSection(c3) {
  return c3 === CharCodes2.Slash || c3 === CharCodes2.Gt || isWhitespace3(c3);
}
function isASCIIAlpha(c3) {
  return c3 >= CharCodes2.LowerA && c3 <= CharCodes2.LowerZ || c3 >= CharCodes2.UpperA && c3 <= CharCodes2.UpperZ;
}
var CharCodes2;
(function(CharCodes3) {
  CharCodes3[CharCodes3["Tab"] = 9] = "Tab";
  CharCodes3[CharCodes3["NewLine"] = 10] = "NewLine";
  CharCodes3[CharCodes3["FormFeed"] = 12] = "FormFeed";
  CharCodes3[CharCodes3["CarriageReturn"] = 13] = "CarriageReturn";
  CharCodes3[CharCodes3["Space"] = 32] = "Space";
  CharCodes3[CharCodes3["ExclamationMark"] = 33] = "ExclamationMark";
  CharCodes3[CharCodes3["Number"] = 35] = "Number";
  CharCodes3[CharCodes3["Amp"] = 38] = "Amp";
  CharCodes3[CharCodes3["SingleQuote"] = 39] = "SingleQuote";
  CharCodes3[CharCodes3["DoubleQuote"] = 34] = "DoubleQuote";
  CharCodes3[CharCodes3["Dash"] = 45] = "Dash";
  CharCodes3[CharCodes3["Slash"] = 47] = "Slash";
  CharCodes3[CharCodes3["Zero"] = 48] = "Zero";
  CharCodes3[CharCodes3["Nine"] = 57] = "Nine";
  CharCodes3[CharCodes3["Semi"] = 59] = "Semi";
  CharCodes3[CharCodes3["Lt"] = 60] = "Lt";
  CharCodes3[CharCodes3["Eq"] = 61] = "Eq";
  CharCodes3[CharCodes3["Gt"] = 62] = "Gt";
  CharCodes3[CharCodes3["Questionmark"] = 63] = "Questionmark";
  CharCodes3[CharCodes3["UpperA"] = 65] = "UpperA";
  CharCodes3[CharCodes3["LowerA"] = 97] = "LowerA";
  CharCodes3[CharCodes3["UpperF"] = 70] = "UpperF";
  CharCodes3[CharCodes3["LowerF"] = 102] = "LowerF";
  CharCodes3[CharCodes3["UpperZ"] = 90] = "UpperZ";
  CharCodes3[CharCodes3["LowerZ"] = 122] = "LowerZ";
  CharCodes3[CharCodes3["LowerX"] = 120] = "LowerX";
  CharCodes3[CharCodes3["OpeningSquareBracket"] = 91] = "OpeningSquareBracket";
})(CharCodes2 || (CharCodes2 = {}));
var State2;
(function(State3) {
  State3[State3["Text"] = 1] = "Text";
  State3[State3["BeforeTagName"] = 2] = "BeforeTagName";
  State3[State3["InTagName"] = 3] = "InTagName";
  State3[State3["InSelfClosingTag"] = 4] = "InSelfClosingTag";
  State3[State3["BeforeClosingTagName"] = 5] = "BeforeClosingTagName";
  State3[State3["InClosingTagName"] = 6] = "InClosingTagName";
  State3[State3["AfterClosingTagName"] = 7] = "AfterClosingTagName";
  State3[State3["BeforeAttributeName"] = 8] = "BeforeAttributeName";
  State3[State3["InAttributeName"] = 9] = "InAttributeName";
  State3[State3["AfterAttributeName"] = 10] = "AfterAttributeName";
  State3[State3["BeforeAttributeValue"] = 11] = "BeforeAttributeValue";
  State3[State3["InAttributeValueDq"] = 12] = "InAttributeValueDq";
  State3[State3["InAttributeValueSq"] = 13] = "InAttributeValueSq";
  State3[State3["InAttributeValueNq"] = 14] = "InAttributeValueNq";
  State3[State3["BeforeDeclaration"] = 15] = "BeforeDeclaration";
  State3[State3["InDeclaration"] = 16] = "InDeclaration";
  State3[State3["InProcessingInstruction"] = 17] = "InProcessingInstruction";
  State3[State3["BeforeComment"] = 18] = "BeforeComment";
  State3[State3["CDATASequence"] = 19] = "CDATASequence";
  State3[State3["InSpecialComment"] = 20] = "InSpecialComment";
  State3[State3["InCommentLike"] = 21] = "InCommentLike";
  State3[State3["BeforeSpecialS"] = 22] = "BeforeSpecialS";
  State3[State3["BeforeSpecialT"] = 23] = "BeforeSpecialT";
  State3[State3["SpecialStartSequence"] = 24] = "SpecialStartSequence";
  State3[State3["InSpecialTag"] = 25] = "InSpecialTag";
  State3[State3["InEntity"] = 26] = "InEntity";
})(State2 || (State2 = {}));
var QuoteType;
(function(QuoteType2) {
  QuoteType2[QuoteType2["NoValue"] = 0] = "NoValue";
  QuoteType2[QuoteType2["Unquoted"] = 1] = "Unquoted";
  QuoteType2[QuoteType2["Single"] = 2] = "Single";
  QuoteType2[QuoteType2["Double"] = 3] = "Double";
})(QuoteType || (QuoteType = {}));
var Sequences = {
  Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),
  CdataEnd: new Uint8Array([93, 93, 62]),
  CommentEnd: new Uint8Array([45, 45, 62]),
  ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),
  StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),
  TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101]),
  TextareaEnd: new Uint8Array([
    60,
    47,
    116,
    101,
    120,
    116,
    97,
    114,
    101,
    97
  ])
};

class Tokenizer2 {
  constructor({ xmlMode = false, decodeEntities = true }, cbs) {
    this.cbs = cbs;
    this.state = State2.Text;
    this.buffer = "";
    this.sectionStart = 0;
    this.index = 0;
    this.entityStart = 0;
    this.baseState = State2.Text;
    this.isSpecial = false;
    this.running = true;
    this.offset = 0;
    this.currentSequence = undefined;
    this.sequenceIndex = 0;
    this.xmlMode = xmlMode;
    this.decodeEntities = decodeEntities;
    this.entityDecoder = new EntityDecoder(xmlMode ? decode_data_xml_default : decode_data_html_default, (cp, consumed) => this.emitCodePoint(cp, consumed));
  }
  reset() {
    this.state = State2.Text;
    this.buffer = "";
    this.sectionStart = 0;
    this.index = 0;
    this.baseState = State2.Text;
    this.currentSequence = undefined;
    this.running = true;
    this.offset = 0;
  }
  write(chunk) {
    this.offset += this.buffer.length;
    this.buffer = chunk;
    this.parse();
  }
  end() {
    if (this.running)
      this.finish();
  }
  pause() {
    this.running = false;
  }
  resume() {
    this.running = true;
    if (this.index < this.buffer.length + this.offset) {
      this.parse();
    }
  }
  stateText(c3) {
    if (c3 === CharCodes2.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes2.Lt)) {
      if (this.index > this.sectionStart) {
        this.cbs.ontext(this.sectionStart, this.index);
      }
      this.state = State2.BeforeTagName;
      this.sectionStart = this.index;
    } else if (this.decodeEntities && c3 === CharCodes2.Amp) {
      this.startEntity();
    }
  }
  stateSpecialStartSequence(c3) {
    const isEnd = this.sequenceIndex === this.currentSequence.length;
    const isMatch = isEnd ? isEndOfTagSection(c3) : (c3 | 32) === this.currentSequence[this.sequenceIndex];
    if (!isMatch) {
      this.isSpecial = false;
    } else if (!isEnd) {
      this.sequenceIndex++;
      return;
    }
    this.sequenceIndex = 0;
    this.state = State2.InTagName;
    this.stateInTagName(c3);
  }
  stateInSpecialTag(c3) {
    if (this.sequenceIndex === this.currentSequence.length) {
      if (c3 === CharCodes2.Gt || isWhitespace3(c3)) {
        const endOfText = this.index - this.currentSequence.length;
        if (this.sectionStart < endOfText) {
          const actualIndex = this.index;
          this.index = endOfText;
          this.cbs.ontext(this.sectionStart, endOfText);
          this.index = actualIndex;
        }
        this.isSpecial = false;
        this.sectionStart = endOfText + 2;
        this.stateInClosingTagName(c3);
        return;
      }
      this.sequenceIndex = 0;
    }
    if ((c3 | 32) === this.currentSequence[this.sequenceIndex]) {
      this.sequenceIndex += 1;
    } else if (this.sequenceIndex === 0) {
      if (this.currentSequence === Sequences.TitleEnd) {
        if (this.decodeEntities && c3 === CharCodes2.Amp) {
          this.startEntity();
        }
      } else if (this.fastForwardTo(CharCodes2.Lt)) {
        this.sequenceIndex = 1;
      }
    } else {
      this.sequenceIndex = Number(c3 === CharCodes2.Lt);
    }
  }
  stateCDATASequence(c3) {
    if (c3 === Sequences.Cdata[this.sequenceIndex]) {
      if (++this.sequenceIndex === Sequences.Cdata.length) {
        this.state = State2.InCommentLike;
        this.currentSequence = Sequences.CdataEnd;
        this.sequenceIndex = 0;
        this.sectionStart = this.index + 1;
      }
    } else {
      this.sequenceIndex = 0;
      this.state = State2.InDeclaration;
      this.stateInDeclaration(c3);
    }
  }
  fastForwardTo(c3) {
    while (++this.index < this.buffer.length + this.offset) {
      if (this.buffer.charCodeAt(this.index - this.offset) === c3) {
        return true;
      }
    }
    this.index = this.buffer.length + this.offset - 1;
    return false;
  }
  stateInCommentLike(c3) {
    if (c3 === this.currentSequence[this.sequenceIndex]) {
      if (++this.sequenceIndex === this.currentSequence.length) {
        if (this.currentSequence === Sequences.CdataEnd) {
          this.cbs.oncdata(this.sectionStart, this.index, 2);
        } else {
          this.cbs.oncomment(this.sectionStart, this.index, 2);
        }
        this.sequenceIndex = 0;
        this.sectionStart = this.index + 1;
        this.state = State2.Text;
      }
    } else if (this.sequenceIndex === 0) {
      if (this.fastForwardTo(this.currentSequence[0])) {
        this.sequenceIndex = 1;
      }
    } else if (c3 !== this.currentSequence[this.sequenceIndex - 1]) {
      this.sequenceIndex = 0;
    }
  }
  isTagStartChar(c3) {
    return this.xmlMode ? !isEndOfTagSection(c3) : isASCIIAlpha(c3);
  }
  startSpecial(sequence, offset) {
    this.isSpecial = true;
    this.currentSequence = sequence;
    this.sequenceIndex = offset;
    this.state = State2.SpecialStartSequence;
  }
  stateBeforeTagName(c3) {
    if (c3 === CharCodes2.ExclamationMark) {
      this.state = State2.BeforeDeclaration;
      this.sectionStart = this.index + 1;
    } else if (c3 === CharCodes2.Questionmark) {
      this.state = State2.InProcessingInstruction;
      this.sectionStart = this.index + 1;
    } else if (this.isTagStartChar(c3)) {
      const lower = c3 | 32;
      this.sectionStart = this.index;
      if (this.xmlMode) {
        this.state = State2.InTagName;
      } else if (lower === Sequences.ScriptEnd[2]) {
        this.state = State2.BeforeSpecialS;
      } else if (lower === Sequences.TitleEnd[2]) {
        this.state = State2.BeforeSpecialT;
      } else {
        this.state = State2.InTagName;
      }
    } else if (c3 === CharCodes2.Slash) {
      this.state = State2.BeforeClosingTagName;
    } else {
      this.state = State2.Text;
      this.stateText(c3);
    }
  }
  stateInTagName(c3) {
    if (isEndOfTagSection(c3)) {
      this.cbs.onopentagname(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.state = State2.BeforeAttributeName;
      this.stateBeforeAttributeName(c3);
    }
  }
  stateBeforeClosingTagName(c3) {
    if (isWhitespace3(c3)) {
    } else if (c3 === CharCodes2.Gt) {
      this.state = State2.Text;
    } else {
      this.state = this.isTagStartChar(c3) ? State2.InClosingTagName : State2.InSpecialComment;
      this.sectionStart = this.index;
    }
  }
  stateInClosingTagName(c3) {
    if (c3 === CharCodes2.Gt || isWhitespace3(c3)) {
      this.cbs.onclosetag(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.state = State2.AfterClosingTagName;
      this.stateAfterClosingTagName(c3);
    }
  }
  stateAfterClosingTagName(c3) {
    if (c3 === CharCodes2.Gt || this.fastForwardTo(CharCodes2.Gt)) {
      this.state = State2.Text;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeAttributeName(c3) {
    if (c3 === CharCodes2.Gt) {
      this.cbs.onopentagend(this.index);
      if (this.isSpecial) {
        this.state = State2.InSpecialTag;
        this.sequenceIndex = 0;
      } else {
        this.state = State2.Text;
      }
      this.sectionStart = this.index + 1;
    } else if (c3 === CharCodes2.Slash) {
      this.state = State2.InSelfClosingTag;
    } else if (!isWhitespace3(c3)) {
      this.state = State2.InAttributeName;
      this.sectionStart = this.index;
    }
  }
  stateInSelfClosingTag(c3) {
    if (c3 === CharCodes2.Gt) {
      this.cbs.onselfclosingtag(this.index);
      this.state = State2.Text;
      this.sectionStart = this.index + 1;
      this.isSpecial = false;
    } else if (!isWhitespace3(c3)) {
      this.state = State2.BeforeAttributeName;
      this.stateBeforeAttributeName(c3);
    }
  }
  stateInAttributeName(c3) {
    if (c3 === CharCodes2.Eq || isEndOfTagSection(c3)) {
      this.cbs.onattribname(this.sectionStart, this.index);
      this.sectionStart = this.index;
      this.state = State2.AfterAttributeName;
      this.stateAfterAttributeName(c3);
    }
  }
  stateAfterAttributeName(c3) {
    if (c3 === CharCodes2.Eq) {
      this.state = State2.BeforeAttributeValue;
    } else if (c3 === CharCodes2.Slash || c3 === CharCodes2.Gt) {
      this.cbs.onattribend(QuoteType.NoValue, this.sectionStart);
      this.sectionStart = -1;
      this.state = State2.BeforeAttributeName;
      this.stateBeforeAttributeName(c3);
    } else if (!isWhitespace3(c3)) {
      this.cbs.onattribend(QuoteType.NoValue, this.sectionStart);
      this.state = State2.InAttributeName;
      this.sectionStart = this.index;
    }
  }
  stateBeforeAttributeValue(c3) {
    if (c3 === CharCodes2.DoubleQuote) {
      this.state = State2.InAttributeValueDq;
      this.sectionStart = this.index + 1;
    } else if (c3 === CharCodes2.SingleQuote) {
      this.state = State2.InAttributeValueSq;
      this.sectionStart = this.index + 1;
    } else if (!isWhitespace3(c3)) {
      this.sectionStart = this.index;
      this.state = State2.InAttributeValueNq;
      this.stateInAttributeValueNoQuotes(c3);
    }
  }
  handleInAttributeValue(c3, quote) {
    if (c3 === quote || !this.decodeEntities && this.fastForwardTo(quote)) {
      this.cbs.onattribdata(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.cbs.onattribend(quote === CharCodes2.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index + 1);
      this.state = State2.BeforeAttributeName;
    } else if (this.decodeEntities && c3 === CharCodes2.Amp) {
      this.startEntity();
    }
  }
  stateInAttributeValueDoubleQuotes(c3) {
    this.handleInAttributeValue(c3, CharCodes2.DoubleQuote);
  }
  stateInAttributeValueSingleQuotes(c3) {
    this.handleInAttributeValue(c3, CharCodes2.SingleQuote);
  }
  stateInAttributeValueNoQuotes(c3) {
    if (isWhitespace3(c3) || c3 === CharCodes2.Gt) {
      this.cbs.onattribdata(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.cbs.onattribend(QuoteType.Unquoted, this.index);
      this.state = State2.BeforeAttributeName;
      this.stateBeforeAttributeName(c3);
    } else if (this.decodeEntities && c3 === CharCodes2.Amp) {
      this.startEntity();
    }
  }
  stateBeforeDeclaration(c3) {
    if (c3 === CharCodes2.OpeningSquareBracket) {
      this.state = State2.CDATASequence;
      this.sequenceIndex = 0;
    } else {
      this.state = c3 === CharCodes2.Dash ? State2.BeforeComment : State2.InDeclaration;
    }
  }
  stateInDeclaration(c3) {
    if (c3 === CharCodes2.Gt || this.fastForwardTo(CharCodes2.Gt)) {
      this.cbs.ondeclaration(this.sectionStart, this.index);
      this.state = State2.Text;
      this.sectionStart = this.index + 1;
    }
  }
  stateInProcessingInstruction(c3) {
    if (c3 === CharCodes2.Gt || this.fastForwardTo(CharCodes2.Gt)) {
      this.cbs.onprocessinginstruction(this.sectionStart, this.index);
      this.state = State2.Text;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeComment(c3) {
    if (c3 === CharCodes2.Dash) {
      this.state = State2.InCommentLike;
      this.currentSequence = Sequences.CommentEnd;
      this.sequenceIndex = 2;
      this.sectionStart = this.index + 1;
    } else {
      this.state = State2.InDeclaration;
    }
  }
  stateInSpecialComment(c3) {
    if (c3 === CharCodes2.Gt || this.fastForwardTo(CharCodes2.Gt)) {
      this.cbs.oncomment(this.sectionStart, this.index, 0);
      this.state = State2.Text;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeSpecialS(c3) {
    const lower = c3 | 32;
    if (lower === Sequences.ScriptEnd[3]) {
      this.startSpecial(Sequences.ScriptEnd, 4);
    } else if (lower === Sequences.StyleEnd[3]) {
      this.startSpecial(Sequences.StyleEnd, 4);
    } else {
      this.state = State2.InTagName;
      this.stateInTagName(c3);
    }
  }
  stateBeforeSpecialT(c3) {
    const lower = c3 | 32;
    if (lower === Sequences.TitleEnd[3]) {
      this.startSpecial(Sequences.TitleEnd, 4);
    } else if (lower === Sequences.TextareaEnd[3]) {
      this.startSpecial(Sequences.TextareaEnd, 4);
    } else {
      this.state = State2.InTagName;
      this.stateInTagName(c3);
    }
  }
  startEntity() {
    this.baseState = this.state;
    this.state = State2.InEntity;
    this.entityStart = this.index;
    this.entityDecoder.startEntity(this.xmlMode ? DecodingMode.Strict : this.baseState === State2.Text || this.baseState === State2.InSpecialTag ? DecodingMode.Legacy : DecodingMode.Attribute);
  }
  stateInEntity() {
    const length = this.entityDecoder.write(this.buffer, this.index - this.offset);
    if (length >= 0) {
      this.state = this.baseState;
      if (length === 0) {
        this.index = this.entityStart;
      }
    } else {
      this.index = this.offset + this.buffer.length - 1;
    }
  }
  cleanup() {
    if (this.running && this.sectionStart !== this.index) {
      if (this.state === State2.Text || this.state === State2.InSpecialTag && this.sequenceIndex === 0) {
        this.cbs.ontext(this.sectionStart, this.index);
        this.sectionStart = this.index;
      } else if (this.state === State2.InAttributeValueDq || this.state === State2.InAttributeValueSq || this.state === State2.InAttributeValueNq) {
        this.cbs.onattribdata(this.sectionStart, this.index);
        this.sectionStart = this.index;
      }
    }
  }
  shouldContinue() {
    return this.index < this.buffer.length + this.offset && this.running;
  }
  parse() {
    while (this.shouldContinue()) {
      const c3 = this.buffer.charCodeAt(this.index - this.offset);
      switch (this.state) {
        case State2.Text: {
          this.stateText(c3);
          break;
        }
        case State2.SpecialStartSequence: {
          this.stateSpecialStartSequence(c3);
          break;
        }
        case State2.InSpecialTag: {
          this.stateInSpecialTag(c3);
          break;
        }
        case State2.CDATASequence: {
          this.stateCDATASequence(c3);
          break;
        }
        case State2.InAttributeValueDq: {
          this.stateInAttributeValueDoubleQuotes(c3);
          break;
        }
        case State2.InAttributeName: {
          this.stateInAttributeName(c3);
          break;
        }
        case State2.InCommentLike: {
          this.stateInCommentLike(c3);
          break;
        }
        case State2.InSpecialComment: {
          this.stateInSpecialComment(c3);
          break;
        }
        case State2.BeforeAttributeName: {
          this.stateBeforeAttributeName(c3);
          break;
        }
        case State2.InTagName: {
          this.stateInTagName(c3);
          break;
        }
        case State2.InClosingTagName: {
          this.stateInClosingTagName(c3);
          break;
        }
        case State2.BeforeTagName: {
          this.stateBeforeTagName(c3);
          break;
        }
        case State2.AfterAttributeName: {
          this.stateAfterAttributeName(c3);
          break;
        }
        case State2.InAttributeValueSq: {
          this.stateInAttributeValueSingleQuotes(c3);
          break;
        }
        case State2.BeforeAttributeValue: {
          this.stateBeforeAttributeValue(c3);
          break;
        }
        case State2.BeforeClosingTagName: {
          this.stateBeforeClosingTagName(c3);
          break;
        }
        case State2.AfterClosingTagName: {
          this.stateAfterClosingTagName(c3);
          break;
        }
        case State2.BeforeSpecialS: {
          this.stateBeforeSpecialS(c3);
          break;
        }
        case State2.BeforeSpecialT: {
          this.stateBeforeSpecialT(c3);
          break;
        }
        case State2.InAttributeValueNq: {
          this.stateInAttributeValueNoQuotes(c3);
          break;
        }
        case State2.InSelfClosingTag: {
          this.stateInSelfClosingTag(c3);
          break;
        }
        case State2.InDeclaration: {
          this.stateInDeclaration(c3);
          break;
        }
        case State2.BeforeDeclaration: {
          this.stateBeforeDeclaration(c3);
          break;
        }
        case State2.BeforeComment: {
          this.stateBeforeComment(c3);
          break;
        }
        case State2.InProcessingInstruction: {
          this.stateInProcessingInstruction(c3);
          break;
        }
        case State2.InEntity: {
          this.stateInEntity();
          break;
        }
      }
      this.index++;
    }
    this.cleanup();
  }
  finish() {
    if (this.state === State2.InEntity) {
      this.entityDecoder.end();
      this.state = this.baseState;
    }
    this.handleTrailingData();
    this.cbs.onend();
  }
  handleTrailingData() {
    const endIndex = this.buffer.length + this.offset;
    if (this.sectionStart >= endIndex) {
      return;
    }
    if (this.state === State2.InCommentLike) {
      if (this.currentSequence === Sequences.CdataEnd) {
        this.cbs.oncdata(this.sectionStart, endIndex, 0);
      } else {
        this.cbs.oncomment(this.sectionStart, endIndex, 0);
      }
    } else if (this.state === State2.InTagName || this.state === State2.BeforeAttributeName || this.state === State2.BeforeAttributeValue || this.state === State2.AfterAttributeName || this.state === State2.InAttributeName || this.state === State2.InAttributeValueSq || this.state === State2.InAttributeValueDq || this.state === State2.InAttributeValueNq || this.state === State2.InClosingTagName) {
    } else {
      this.cbs.ontext(this.sectionStart, endIndex);
    }
  }
  emitCodePoint(cp, consumed) {
    if (this.baseState !== State2.Text && this.baseState !== State2.InSpecialTag) {
      if (this.sectionStart < this.entityStart) {
        this.cbs.onattribdata(this.sectionStart, this.entityStart);
      }
      this.sectionStart = this.entityStart + consumed;
      this.index = this.sectionStart - 1;
      this.cbs.onattribentity(cp);
    } else {
      if (this.sectionStart < this.entityStart) {
        this.cbs.ontext(this.sectionStart, this.entityStart);
      }
      this.sectionStart = this.entityStart + consumed;
      this.index = this.sectionStart - 1;
      this.cbs.ontextentity(cp, this.sectionStart);
    }
  }
}

// node_modules/htmlparser2/lib/esm/Parser.js
var formTags = new Set([
  "input",
  "option",
  "optgroup",
  "select",
  "button",
  "datalist",
  "textarea"
]);
var pTag = new Set(["p"]);
var tableSectionTags = new Set(["thead", "tbody"]);
var ddtTags = new Set(["dd", "dt"]);
var rtpTags = new Set(["rt", "rp"]);
var openImpliesClose = new Map([
  ["tr", new Set(["tr", "th", "td"])],
  ["th", new Set(["th"])],
  ["td", new Set(["thead", "th", "td"])],
  ["body", new Set(["head", "link", "script"])],
  ["li", new Set(["li"])],
  ["p", pTag],
  ["h1", pTag],
  ["h2", pTag],
  ["h3", pTag],
  ["h4", pTag],
  ["h5", pTag],
  ["h6", pTag],
  ["select", formTags],
  ["input", formTags],
  ["output", formTags],
  ["button", formTags],
  ["datalist", formTags],
  ["textarea", formTags],
  ["option", new Set(["option"])],
  ["optgroup", new Set(["optgroup", "option"])],
  ["dd", ddtTags],
  ["dt", ddtTags],
  ["address", pTag],
  ["article", pTag],
  ["aside", pTag],
  ["blockquote", pTag],
  ["details", pTag],
  ["div", pTag],
  ["dl", pTag],
  ["fieldset", pTag],
  ["figcaption", pTag],
  ["figure", pTag],
  ["footer", pTag],
  ["form", pTag],
  ["header", pTag],
  ["hr", pTag],
  ["main", pTag],
  ["nav", pTag],
  ["ol", pTag],
  ["pre", pTag],
  ["section", pTag],
  ["table", pTag],
  ["ul", pTag],
  ["rt", rtpTags],
  ["rp", rtpTags],
  ["tbody", tableSectionTags],
  ["tfoot", tableSectionTags]
]);
var voidElements = new Set([
  "area",
  "base",
  "basefont",
  "br",
  "col",
  "command",
  "embed",
  "frame",
  "hr",
  "img",
  "input",
  "isindex",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
]);
var foreignContextElements = new Set(["math", "svg"]);
var htmlIntegrationElements = new Set([
  "mi",
  "mo",
  "mn",
  "ms",
  "mtext",
  "annotation-xml",
  "foreignobject",
  "desc",
  "title"
]);
var reNameEnd = /\s|\//;

class Parser2 {
  constructor(cbs, options3 = {}) {
    var _a2, _b, _c, _d, _e, _f;
    this.options = options3;
    this.startIndex = 0;
    this.endIndex = 0;
    this.openTagStart = 0;
    this.tagname = "";
    this.attribname = "";
    this.attribvalue = "";
    this.attribs = null;
    this.stack = [];
    this.buffers = [];
    this.bufferOffset = 0;
    this.writeIndex = 0;
    this.ended = false;
    this.cbs = cbs !== null && cbs !== undefined ? cbs : {};
    this.htmlMode = !this.options.xmlMode;
    this.lowerCaseTagNames = (_a2 = options3.lowerCaseTags) !== null && _a2 !== undefined ? _a2 : this.htmlMode;
    this.lowerCaseAttributeNames = (_b = options3.lowerCaseAttributeNames) !== null && _b !== undefined ? _b : this.htmlMode;
    this.recognizeSelfClosing = (_c = options3.recognizeSelfClosing) !== null && _c !== undefined ? _c : !this.htmlMode;
    this.tokenizer = new ((_d = options3.Tokenizer) !== null && _d !== undefined ? _d : Tokenizer2)(this.options, this);
    this.foreignContext = [!this.htmlMode];
    (_f = (_e = this.cbs).onparserinit) === null || _f === undefined || _f.call(_e, this);
  }
  ontext(start, endIndex) {
    var _a2, _b;
    const data2 = this.getSlice(start, endIndex);
    this.endIndex = endIndex - 1;
    (_b = (_a2 = this.cbs).ontext) === null || _b === undefined || _b.call(_a2, data2);
    this.startIndex = endIndex;
  }
  ontextentity(cp, endIndex) {
    var _a2, _b;
    this.endIndex = endIndex - 1;
    (_b = (_a2 = this.cbs).ontext) === null || _b === undefined || _b.call(_a2, fromCodePoint(cp));
    this.startIndex = endIndex;
  }
  isVoidElement(name) {
    return this.htmlMode && voidElements.has(name);
  }
  onopentagname(start, endIndex) {
    this.endIndex = endIndex;
    let name = this.getSlice(start, endIndex);
    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }
    this.emitOpenTag(name);
  }
  emitOpenTag(name) {
    var _a2, _b, _c, _d;
    this.openTagStart = this.startIndex;
    this.tagname = name;
    const impliesClose = this.htmlMode && openImpliesClose.get(name);
    if (impliesClose) {
      while (this.stack.length > 0 && impliesClose.has(this.stack[0])) {
        const element = this.stack.shift();
        (_b = (_a2 = this.cbs).onclosetag) === null || _b === undefined || _b.call(_a2, element, true);
      }
    }
    if (!this.isVoidElement(name)) {
      this.stack.unshift(name);
      if (this.htmlMode) {
        if (foreignContextElements.has(name)) {
          this.foreignContext.unshift(true);
        } else if (htmlIntegrationElements.has(name)) {
          this.foreignContext.unshift(false);
        }
      }
    }
    (_d = (_c = this.cbs).onopentagname) === null || _d === undefined || _d.call(_c, name);
    if (this.cbs.onopentag)
      this.attribs = {};
  }
  endOpenTag(isImplied) {
    var _a2, _b;
    this.startIndex = this.openTagStart;
    if (this.attribs) {
      (_b = (_a2 = this.cbs).onopentag) === null || _b === undefined || _b.call(_a2, this.tagname, this.attribs, isImplied);
      this.attribs = null;
    }
    if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {
      this.cbs.onclosetag(this.tagname, true);
    }
    this.tagname = "";
  }
  onopentagend(endIndex) {
    this.endIndex = endIndex;
    this.endOpenTag(false);
    this.startIndex = endIndex + 1;
  }
  onclosetag(start, endIndex) {
    var _a2, _b, _c, _d, _e, _f, _g, _h;
    this.endIndex = endIndex;
    let name = this.getSlice(start, endIndex);
    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }
    if (this.htmlMode && (foreignContextElements.has(name) || htmlIntegrationElements.has(name))) {
      this.foreignContext.shift();
    }
    if (!this.isVoidElement(name)) {
      const pos = this.stack.indexOf(name);
      if (pos !== -1) {
        for (let index2 = 0;index2 <= pos; index2++) {
          const element = this.stack.shift();
          (_b = (_a2 = this.cbs).onclosetag) === null || _b === undefined || _b.call(_a2, element, index2 !== pos);
        }
      } else if (this.htmlMode && name === "p") {
        this.emitOpenTag("p");
        this.closeCurrentTag(true);
      }
    } else if (this.htmlMode && name === "br") {
      (_d = (_c = this.cbs).onopentagname) === null || _d === undefined || _d.call(_c, "br");
      (_f = (_e = this.cbs).onopentag) === null || _f === undefined || _f.call(_e, "br", {}, true);
      (_h = (_g = this.cbs).onclosetag) === null || _h === undefined || _h.call(_g, "br", false);
    }
    this.startIndex = endIndex + 1;
  }
  onselfclosingtag(endIndex) {
    this.endIndex = endIndex;
    if (this.recognizeSelfClosing || this.foreignContext[0]) {
      this.closeCurrentTag(false);
      this.startIndex = endIndex + 1;
    } else {
      this.onopentagend(endIndex);
    }
  }
  closeCurrentTag(isOpenImplied) {
    var _a2, _b;
    const name = this.tagname;
    this.endOpenTag(isOpenImplied);
    if (this.stack[0] === name) {
      (_b = (_a2 = this.cbs).onclosetag) === null || _b === undefined || _b.call(_a2, name, !isOpenImplied);
      this.stack.shift();
    }
  }
  onattribname(start, endIndex) {
    this.startIndex = start;
    const name = this.getSlice(start, endIndex);
    this.attribname = this.lowerCaseAttributeNames ? name.toLowerCase() : name;
  }
  onattribdata(start, endIndex) {
    this.attribvalue += this.getSlice(start, endIndex);
  }
  onattribentity(cp) {
    this.attribvalue += fromCodePoint(cp);
  }
  onattribend(quote, endIndex) {
    var _a2, _b;
    this.endIndex = endIndex;
    (_b = (_a2 = this.cbs).onattribute) === null || _b === undefined || _b.call(_a2, this.attribname, this.attribvalue, quote === QuoteType.Double ? '"' : quote === QuoteType.Single ? "'" : quote === QuoteType.NoValue ? undefined : null);
    if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
      this.attribs[this.attribname] = this.attribvalue;
    }
    this.attribvalue = "";
  }
  getInstructionName(value15) {
    const index2 = value15.search(reNameEnd);
    let name = index2 < 0 ? value15 : value15.substr(0, index2);
    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }
    return name;
  }
  ondeclaration(start, endIndex) {
    this.endIndex = endIndex;
    const value15 = this.getSlice(start, endIndex);
    if (this.cbs.onprocessinginstruction) {
      const name = this.getInstructionName(value15);
      this.cbs.onprocessinginstruction(`!${name}`, `!${value15}`);
    }
    this.startIndex = endIndex + 1;
  }
  onprocessinginstruction(start, endIndex) {
    this.endIndex = endIndex;
    const value15 = this.getSlice(start, endIndex);
    if (this.cbs.onprocessinginstruction) {
      const name = this.getInstructionName(value15);
      this.cbs.onprocessinginstruction(`?${name}`, `?${value15}`);
    }
    this.startIndex = endIndex + 1;
  }
  oncomment(start, endIndex, offset) {
    var _a2, _b, _c, _d;
    this.endIndex = endIndex;
    (_b = (_a2 = this.cbs).oncomment) === null || _b === undefined || _b.call(_a2, this.getSlice(start, endIndex - offset));
    (_d = (_c = this.cbs).oncommentend) === null || _d === undefined || _d.call(_c);
    this.startIndex = endIndex + 1;
  }
  oncdata(start, endIndex, offset) {
    var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    this.endIndex = endIndex;
    const value15 = this.getSlice(start, endIndex - offset);
    if (!this.htmlMode || this.options.recognizeCDATA) {
      (_b = (_a2 = this.cbs).oncdatastart) === null || _b === undefined || _b.call(_a2);
      (_d = (_c = this.cbs).ontext) === null || _d === undefined || _d.call(_c, value15);
      (_f = (_e = this.cbs).oncdataend) === null || _f === undefined || _f.call(_e);
    } else {
      (_h = (_g = this.cbs).oncomment) === null || _h === undefined || _h.call(_g, `[CDATA[${value15}]]`);
      (_k = (_j = this.cbs).oncommentend) === null || _k === undefined || _k.call(_j);
    }
    this.startIndex = endIndex + 1;
  }
  onend() {
    var _a2, _b;
    if (this.cbs.onclosetag) {
      this.endIndex = this.startIndex;
      for (let index2 = 0;index2 < this.stack.length; index2++) {
        this.cbs.onclosetag(this.stack[index2], true);
      }
    }
    (_b = (_a2 = this.cbs).onend) === null || _b === undefined || _b.call(_a2);
  }
  reset() {
    var _a2, _b, _c, _d;
    (_b = (_a2 = this.cbs).onreset) === null || _b === undefined || _b.call(_a2);
    this.tokenizer.reset();
    this.tagname = "";
    this.attribname = "";
    this.attribs = null;
    this.stack.length = 0;
    this.startIndex = 0;
    this.endIndex = 0;
    (_d = (_c = this.cbs).onparserinit) === null || _d === undefined || _d.call(_c, this);
    this.buffers.length = 0;
    this.foreignContext.length = 0;
    this.foreignContext.unshift(!this.htmlMode);
    this.bufferOffset = 0;
    this.writeIndex = 0;
    this.ended = false;
  }
  parseComplete(data2) {
    this.reset();
    this.end(data2);
  }
  getSlice(start, end2) {
    while (start - this.bufferOffset >= this.buffers[0].length) {
      this.shiftBuffer();
    }
    let slice2 = this.buffers[0].slice(start - this.bufferOffset, end2 - this.bufferOffset);
    while (end2 - this.bufferOffset > this.buffers[0].length) {
      this.shiftBuffer();
      slice2 += this.buffers[0].slice(0, end2 - this.bufferOffset);
    }
    return slice2;
  }
  shiftBuffer() {
    this.bufferOffset += this.buffers[0].length;
    this.writeIndex--;
    this.buffers.shift();
  }
  write(chunk) {
    var _a2, _b;
    if (this.ended) {
      (_b = (_a2 = this.cbs).onerror) === null || _b === undefined || _b.call(_a2, new Error(".write() after done!"));
      return;
    }
    this.buffers.push(chunk);
    if (this.tokenizer.running) {
      this.tokenizer.write(chunk);
      this.writeIndex++;
    }
  }
  end(chunk) {
    var _a2, _b;
    if (this.ended) {
      (_b = (_a2 = this.cbs).onerror) === null || _b === undefined || _b.call(_a2, new Error(".end() after done!"));
      return;
    }
    if (chunk)
      this.write(chunk);
    this.ended = true;
    this.tokenizer.end();
  }
  pause() {
    this.tokenizer.pause();
  }
  resume() {
    this.tokenizer.resume();
    while (this.tokenizer.running && this.writeIndex < this.buffers.length) {
      this.tokenizer.write(this.buffers[this.writeIndex++]);
    }
    if (this.ended)
      this.tokenizer.end();
  }
  parseChunk(chunk) {
    this.write(chunk);
  }
  done(chunk) {
    this.end(chunk);
  }
}

// node_modules/htmlparser2/lib/esm/index.js
function parseDocument(data2, options3) {
  const handler = new DomHandler(undefined, options3);
  new Parser2(handler, options3).end(data2);
  return handler.root;
}
// node_modules/cheerio/dist/esm/load-parse.js
var parse12 = getParse((content, options3, isDocument2, context) => options3._useHtmlParser2 ? parseDocument(content, options3) : parseWithParse5(content, options3, isDocument2, context));
var load2 = getLoad(parse12, (dom, options3) => options3._useHtmlParser2 ? esm_default(dom, options3) : renderWithParse5(dom));
// node_modules/encoding-sniffer/dist/esm/index.js
var import_iconv_lite = __toESM(require_lib(), 1);
import {Transform as Transform2} from "stream";

// node_modules/encoding-sniffer/dist/esm/sniffer.js
var import_whatwg_encoding = __toESM(require_whatwg_encoding(), 1);
function toUint8Array(str) {
  var arr = new Uint8Array(str.length);
  for (var i3 = 0;i3 < str.length; i3++) {
    arr[i3] = str.charCodeAt(i3);
  }
  return arr;
}
function isAsciiAlpha(c3) {
  return c3 >= Chars.UpperA && c3 <= Chars.UpperZ || c3 >= Chars.LowerA && c3 <= Chars.LowerZ;
}
function isQuote2(c3) {
  return c3 === Chars.DQUOTE || c3 === Chars.SQUOTE;
}
var State3;
(function(State4) {
  State4[State4["Begin"] = 0] = "Begin";
  State4[State4["BOM16BE"] = 1] = "BOM16BE";
  State4[State4["BOM16LE"] = 2] = "BOM16LE";
  State4[State4["BOM8"] = 3] = "BOM8";
  State4[State4["UTF16LE_XML_PREFIX"] = 4] = "UTF16LE_XML_PREFIX";
  State4[State4["BeginLT"] = 5] = "BeginLT";
  State4[State4["UTF16BE_XML_PREFIX"] = 6] = "UTF16BE_XML_PREFIX";
  State4[State4["BeforeTag"] = 7] = "BeforeTag";
  State4[State4["BeforeTagName"] = 8] = "BeforeTagName";
  State4[State4["BeforeCloseTagName"] = 9] = "BeforeCloseTagName";
  State4[State4["CommentStart"] = 10] = "CommentStart";
  State4[State4["CommentEnd"] = 11] = "CommentEnd";
  State4[State4["TagNameMeta"] = 12] = "TagNameMeta";
  State4[State4["TagNameOther"] = 13] = "TagNameOther";
  State4[State4["XMLDeclaration"] = 14] = "XMLDeclaration";
  State4[State4["XMLDeclarationBeforeEncoding"] = 15] = "XMLDeclarationBeforeEncoding";
  State4[State4["XMLDeclarationAfterEncoding"] = 16] = "XMLDeclarationAfterEncoding";
  State4[State4["XMLDeclarationBeforeValue"] = 17] = "XMLDeclarationBeforeValue";
  State4[State4["XMLDeclarationValue"] = 18] = "XMLDeclarationValue";
  State4[State4["WeirdTag"] = 19] = "WeirdTag";
  State4[State4["BeforeAttribute"] = 20] = "BeforeAttribute";
  State4[State4["MetaAttribHttpEquiv"] = 21] = "MetaAttribHttpEquiv";
  State4[State4["MetaAttribHttpEquivValue"] = 22] = "MetaAttribHttpEquivValue";
  State4[State4["MetaAttribC"] = 23] = "MetaAttribC";
  State4[State4["MetaAttribContent"] = 24] = "MetaAttribContent";
  State4[State4["MetaAttribCharset"] = 25] = "MetaAttribCharset";
  State4[State4["MetaAttribAfterName"] = 26] = "MetaAttribAfterName";
  State4[State4["MetaContentValueQuotedBeforeEncoding"] = 27] = "MetaContentValueQuotedBeforeEncoding";
  State4[State4["MetaContentValueQuotedAfterEncoding"] = 28] = "MetaContentValueQuotedAfterEncoding";
  State4[State4["MetaContentValueQuotedBeforeValue"] = 29] = "MetaContentValueQuotedBeforeValue";
  State4[State4["MetaContentValueQuotedValueQuoted"] = 30] = "MetaContentValueQuotedValueQuoted";
  State4[State4["MetaContentValueQuotedValueUnquoted"] = 31] = "MetaContentValueQuotedValueUnquoted";
  State4[State4["MetaContentValueUnquotedBeforeEncoding"] = 32] = "MetaContentValueUnquotedBeforeEncoding";
  State4[State4["MetaContentValueUnquotedBeforeValue"] = 33] = "MetaContentValueUnquotedBeforeValue";
  State4[State4["MetaContentValueUnquotedValueQuoted"] = 34] = "MetaContentValueUnquotedValueQuoted";
  State4[State4["MetaContentValueUnquotedValueUnquoted"] = 35] = "MetaContentValueUnquotedValueUnquoted";
  State4[State4["AnyAttribName"] = 36] = "AnyAttribName";
  State4[State4["AfterAttributeName"] = 37] = "AfterAttributeName";
  State4[State4["BeforeAttributeValue"] = 38] = "BeforeAttributeValue";
  State4[State4["AttributeValueQuoted"] = 39] = "AttributeValueQuoted";
  State4[State4["AttributeValueUnquoted"] = 40] = "AttributeValueUnquoted";
})(State3 || (State3 = {}));
var ResultType;
(function(ResultType2) {
  ResultType2[ResultType2["BOM"] = 0] = "BOM";
  ResultType2[ResultType2["PASSED"] = 1] = "PASSED";
  ResultType2[ResultType2["XML_PREFIX"] = 2] = "XML_PREFIX";
  ResultType2[ResultType2["META_TAG"] = 3] = "META_TAG";
  ResultType2[ResultType2["XML_ENCODING"] = 4] = "XML_ENCODING";
  ResultType2[ResultType2["DEFAULT"] = 5] = "DEFAULT";
})(ResultType || (ResultType = {}));
var AttribType;
(function(AttribType2) {
  AttribType2[AttribType2["None"] = 0] = "None";
  AttribType2[AttribType2["HttpEquiv"] = 1] = "HttpEquiv";
  AttribType2[AttribType2["Content"] = 2] = "Content";
  AttribType2[AttribType2["Charset"] = 3] = "Charset";
})(AttribType || (AttribType = {}));
var Chars;
(function(Chars2) {
  Chars2[Chars2["NIL"] = 0] = "NIL";
  Chars2[Chars2["TAB"] = 9] = "TAB";
  Chars2[Chars2["LF"] = 10] = "LF";
  Chars2[Chars2["CR"] = 13] = "CR";
  Chars2[Chars2["SPACE"] = 32] = "SPACE";
  Chars2[Chars2["EXCLAMATION"] = 33] = "EXCLAMATION";
  Chars2[Chars2["DQUOTE"] = 34] = "DQUOTE";
  Chars2[Chars2["SQUOTE"] = 39] = "SQUOTE";
  Chars2[Chars2["DASH"] = 45] = "DASH";
  Chars2[Chars2["SLASH"] = 47] = "SLASH";
  Chars2[Chars2["SEMICOLON"] = 59] = "SEMICOLON";
  Chars2[Chars2["LT"] = 60] = "LT";
  Chars2[Chars2["EQUALS"] = 61] = "EQUALS";
  Chars2[Chars2["GT"] = 62] = "GT";
  Chars2[Chars2["QUESTION"] = 63] = "QUESTION";
  Chars2[Chars2["UpperA"] = 65] = "UpperA";
  Chars2[Chars2["UpperZ"] = 90] = "UpperZ";
  Chars2[Chars2["LowerA"] = 97] = "LowerA";
  Chars2[Chars2["LowerZ"] = 122] = "LowerZ";
})(Chars || (Chars = {}));
var SPACE_CHARACTERS = new Set([Chars.SPACE, Chars.LF, Chars.CR, Chars.TAB]);
var END_OF_UNQUOTED_ATTRIBUTE_VALUE = new Set([
  Chars.SPACE,
  Chars.LF,
  Chars.CR,
  Chars.TAB,
  Chars.GT
]);
var STRINGS = {
  UTF8_BOM: new Uint8Array([239, 187, 191]),
  UTF16LE_BOM: new Uint8Array([255, 254]),
  UTF16BE_BOM: new Uint8Array([254, 255]),
  UTF16LE_XML_PREFIX: new Uint8Array([60, 0, 63, 0, 120, 0]),
  UTF16BE_XML_PREFIX: new Uint8Array([0, 60, 0, 63, 0, 120]),
  XML_DECLARATION: toUint8Array("<?xml"),
  ENCODING: toUint8Array("encoding"),
  META: toUint8Array("meta"),
  HTTP_EQUIV: toUint8Array("http-equiv"),
  CONTENT: toUint8Array("content"),
  CONTENT_TYPE: toUint8Array("content-type"),
  CHARSET: toUint8Array("charset"),
  COMMENT_START: toUint8Array("<!--"),
  COMMENT_END: toUint8Array("-->")
};
var Sniffer = function() {
  function Sniffer2(_a2) {
    var _b = _a2 === undefined ? {} : _a2, _c = _b.maxBytes, maxBytes = _c === undefined ? 1024 : _c, userEncoding = _b.userEncoding, transportLayerEncodingLabel = _b.transportLayerEncodingLabel, defaultEncoding = _b.defaultEncoding;
    this.offset = 0;
    this.state = State3.Begin;
    this.sectionIndex = 0;
    this.attribType = AttribType.None;
    this.gotPragma = null;
    this.needsPragma = null;
    this.inMetaTag = false;
    this.encoding = "windows-1252";
    this.resultType = ResultType.DEFAULT;
    this.quoteCharacter = 0;
    this.attributeValue = [];
    this.maxBytes = maxBytes;
    if (userEncoding) {
      this.setResult(userEncoding, ResultType.PASSED);
    }
    if (transportLayerEncodingLabel) {
      this.setResult(transportLayerEncodingLabel, ResultType.PASSED);
    }
    if (defaultEncoding) {
      this.setResult(defaultEncoding, ResultType.DEFAULT);
    }
  }
  Sniffer2.prototype.setResult = function(label, type47) {
    if (this.resultType === ResultType.DEFAULT || this.resultType > type47) {
      var encoding = import_whatwg_encoding.labelToName(label);
      if (encoding) {
        this.encoding = type47 === ResultType.META_TAG && encoding === "x-user-defined" ? "windows-1252" : (type47 === ResultType.META_TAG || type47 === ResultType.XML_ENCODING) && (encoding === "UTF-16LE" || encoding === "UTF-16BE") ? "UTF-8" : encoding;
        this.resultType = type47;
      }
    }
  };
  Sniffer2.prototype.stateBegin = function(c3) {
    switch (c3) {
      case STRINGS.UTF16BE_BOM[0]: {
        this.state = State3.BOM16BE;
        break;
      }
      case STRINGS.UTF16LE_BOM[0]: {
        this.state = State3.BOM16LE;
        break;
      }
      case STRINGS.UTF8_BOM[0]: {
        this.sectionIndex = 1;
        this.state = State3.BOM8;
        break;
      }
      case Chars.NIL: {
        this.state = State3.UTF16BE_XML_PREFIX;
        this.sectionIndex = 1;
        break;
      }
      case Chars.LT: {
        this.state = State3.BeginLT;
        break;
      }
      default: {
        this.state = State3.BeforeTag;
      }
    }
  };
  Sniffer2.prototype.stateBeginLT = function(c3) {
    if (c3 === Chars.NIL) {
      this.state = State3.UTF16LE_XML_PREFIX;
      this.sectionIndex = 2;
    } else if (c3 === Chars.QUESTION) {
      this.state = State3.XMLDeclaration;
      this.sectionIndex = 2;
    } else {
      this.state = State3.BeforeTagName;
      this.stateBeforeTagName(c3);
    }
  };
  Sniffer2.prototype.stateUTF16BE_XML_PREFIX = function(c3) {
    if (this.advanceSection(STRINGS.UTF16BE_XML_PREFIX, c3)) {
      if (this.sectionIndex === STRINGS.UTF16BE_XML_PREFIX.length) {
        this.setResult("utf-16be", ResultType.XML_PREFIX);
      }
    } else {
      this.state = State3.BeforeTag;
      this.stateBeforeTag(c3);
    }
  };
  Sniffer2.prototype.stateUTF16LE_XML_PREFIX = function(c3) {
    if (this.advanceSection(STRINGS.UTF16LE_XML_PREFIX, c3)) {
      if (this.sectionIndex === STRINGS.UTF16LE_XML_PREFIX.length) {
        this.setResult("utf-16le", ResultType.XML_PREFIX);
      }
    } else {
      this.state = State3.BeforeTag;
      this.stateBeforeTag(c3);
    }
  };
  Sniffer2.prototype.stateBOM16LE = function(c3) {
    if (c3 === STRINGS.UTF16LE_BOM[1]) {
      this.setResult("utf-16le", ResultType.BOM);
    } else {
      this.state = State3.BeforeTag;
      this.stateBeforeTag(c3);
    }
  };
  Sniffer2.prototype.stateBOM16BE = function(c3) {
    if (c3 === STRINGS.UTF16BE_BOM[1]) {
      this.setResult("utf-16be", ResultType.BOM);
    } else {
      this.state = State3.BeforeTag;
      this.stateBeforeTag(c3);
    }
  };
  Sniffer2.prototype.stateBOM8 = function(c3) {
    if (this.advanceSection(STRINGS.UTF8_BOM, c3) && this.sectionIndex === STRINGS.UTF8_BOM.length) {
      this.setResult("utf-8", ResultType.BOM);
    }
  };
  Sniffer2.prototype.stateBeforeTag = function(c3) {
    if (c3 === Chars.LT) {
      this.state = State3.BeforeTagName;
      this.inMetaTag = false;
    }
  };
  Sniffer2.prototype.stateBeforeTagName = function(c3) {
    if (isAsciiAlpha(c3)) {
      if ((c3 | 32) === STRINGS.META[0]) {
        this.sectionIndex = 1;
        this.state = State3.TagNameMeta;
      } else {
        this.state = State3.TagNameOther;
      }
    } else
      switch (c3) {
        case Chars.SLASH: {
          this.state = State3.BeforeCloseTagName;
          break;
        }
        case Chars.EXCLAMATION: {
          this.state = State3.CommentStart;
          this.sectionIndex = 2;
          break;
        }
        case Chars.QUESTION: {
          this.state = State3.WeirdTag;
          break;
        }
        default: {
          this.state = State3.BeforeTag;
          this.stateBeforeTag(c3);
        }
      }
  };
  Sniffer2.prototype.stateBeforeCloseTagName = function(c3) {
    this.state = isAsciiAlpha(c3) ? State3.TagNameOther : State3.WeirdTag;
  };
  Sniffer2.prototype.stateCommentStart = function(c3) {
    if (this.advanceSection(STRINGS.COMMENT_START, c3)) {
      if (this.sectionIndex === STRINGS.COMMENT_START.length) {
        this.state = State3.CommentEnd;
        this.sectionIndex = 2;
      }
    } else {
      this.state = State3.WeirdTag;
      this.stateWeirdTag(c3);
    }
  };
  Sniffer2.prototype.stateCommentEnd = function(c3) {
    if (this.advanceSection(STRINGS.COMMENT_END, c3)) {
      if (this.sectionIndex === STRINGS.COMMENT_END.length) {
        this.state = State3.BeforeTag;
      }
    } else if (c3 === Chars.DASH) {
      this.sectionIndex = 2;
    }
  };
  Sniffer2.prototype.stateWeirdTag = function(c3) {
    if (c3 === Chars.GT) {
      this.state = State3.BeforeTag;
    }
  };
  Sniffer2.prototype.advanceSectionIC = function(section, c3) {
    return this.advanceSection(section, c3 | 32);
  };
  Sniffer2.prototype.advanceSection = function(section, c3) {
    if (section[this.sectionIndex] === c3) {
      this.sectionIndex++;
      return true;
    }
    this.sectionIndex = 0;
    return false;
  };
  Sniffer2.prototype.stateTagNameMeta = function(c3) {
    if (this.sectionIndex < STRINGS.META.length) {
      if (this.advanceSectionIC(STRINGS.META, c3)) {
        return;
      }
    } else if (SPACE_CHARACTERS.has(c3)) {
      this.inMetaTag = true;
      this.gotPragma = null;
      this.needsPragma = null;
      this.state = State3.BeforeAttribute;
      return;
    }
    this.state = State3.TagNameOther;
    this.stateTagNameOther(c3);
  };
  Sniffer2.prototype.stateTagNameOther = function(c3) {
    if (SPACE_CHARACTERS.has(c3)) {
      this.state = State3.BeforeAttribute;
    } else if (c3 === Chars.GT) {
      this.state = State3.BeforeTag;
    }
  };
  Sniffer2.prototype.stateBeforeAttribute = function(c3) {
    if (SPACE_CHARACTERS.has(c3))
      return;
    if (this.inMetaTag) {
      var lower = c3 | 32;
      if (lower === STRINGS.HTTP_EQUIV[0]) {
        this.sectionIndex = 1;
        this.state = State3.MetaAttribHttpEquiv;
        return;
      } else if (lower === STRINGS.CHARSET[0]) {
        this.sectionIndex = 1;
        this.state = State3.MetaAttribC;
        return;
      }
    }
    this.state = c3 === Chars.SLASH || c3 === Chars.GT ? State3.BeforeTag : State3.AnyAttribName;
  };
  Sniffer2.prototype.handleMetaAttrib = function(c3, section, type47) {
    if (this.advanceSectionIC(section, c3)) {
      if (this.sectionIndex === section.length) {
        this.attribType = type47;
        this.state = State3.MetaAttribAfterName;
      }
    } else {
      this.state = State3.AnyAttribName;
      this.stateAnyAttribName(c3);
    }
  };
  Sniffer2.prototype.stateMetaAttribHttpEquiv = function(c3) {
    this.handleMetaAttrib(c3, STRINGS.HTTP_EQUIV, AttribType.HttpEquiv);
  };
  Sniffer2.prototype.stateMetaAttribC = function(c3) {
    var lower = c3 | 32;
    if (lower === STRINGS.CHARSET[1]) {
      this.sectionIndex = 2;
      this.state = State3.MetaAttribCharset;
    } else if (lower === STRINGS.CONTENT[1]) {
      this.sectionIndex = 2;
      this.state = State3.MetaAttribContent;
    } else {
      this.state = State3.AnyAttribName;
      this.stateAnyAttribName(c3);
    }
  };
  Sniffer2.prototype.stateMetaAttribCharset = function(c3) {
    this.handleMetaAttrib(c3, STRINGS.CHARSET, AttribType.Charset);
  };
  Sniffer2.prototype.stateMetaAttribContent = function(c3) {
    this.handleMetaAttrib(c3, STRINGS.CONTENT, AttribType.Content);
  };
  Sniffer2.prototype.stateMetaAttribAfterName = function(c3) {
    if (SPACE_CHARACTERS.has(c3) || c3 === Chars.EQUALS) {
      this.state = State3.AfterAttributeName;
      this.stateAfterAttributeName(c3);
    } else {
      this.state = State3.AnyAttribName;
      this.stateAnyAttribName(c3);
    }
  };
  Sniffer2.prototype.stateAnyAttribName = function(c3) {
    if (SPACE_CHARACTERS.has(c3)) {
      this.attribType = AttribType.None;
      this.state = State3.AfterAttributeName;
    } else if (c3 === Chars.SLASH || c3 === Chars.GT) {
      this.state = State3.BeforeTag;
    } else if (c3 === Chars.EQUALS) {
      this.state = State3.BeforeAttributeValue;
    }
  };
  Sniffer2.prototype.stateAfterAttributeName = function(c3) {
    if (SPACE_CHARACTERS.has(c3))
      return;
    if (c3 === Chars.EQUALS) {
      this.state = State3.BeforeAttributeValue;
    } else {
      this.state = State3.BeforeAttribute;
      this.stateBeforeAttribute(c3);
    }
  };
  Sniffer2.prototype.stateBeforeAttributeValue = function(c3) {
    if (SPACE_CHARACTERS.has(c3))
      return;
    this.attributeValue.length = 0;
    this.sectionIndex = 0;
    if (isQuote2(c3)) {
      this.quoteCharacter = c3;
      this.state = this.attribType === AttribType.Content ? State3.MetaContentValueQuotedBeforeEncoding : this.attribType === AttribType.HttpEquiv ? State3.MetaAttribHttpEquivValue : State3.AttributeValueQuoted;
    } else if (this.attribType === AttribType.Content) {
      this.state = State3.MetaContentValueUnquotedBeforeEncoding;
      this.stateMetaContentValueUnquotedBeforeEncoding(c3);
    } else if (this.attribType === AttribType.HttpEquiv) {
      this.quoteCharacter = 0;
      this.sectionIndex = 0;
      this.state = State3.MetaAttribHttpEquivValue;
      this.stateMetaAttribHttpEquivValue(c3);
    } else {
      this.state = State3.AttributeValueUnquoted;
      this.stateAttributeValueUnquoted(c3);
    }
  };
  Sniffer2.prototype.stateMetaAttribHttpEquivValue = function(c3) {
    if (this.sectionIndex === STRINGS.CONTENT_TYPE.length) {
      if (this.quoteCharacter === 0 ? END_OF_UNQUOTED_ATTRIBUTE_VALUE.has(c3) : c3 === this.quoteCharacter) {
        if (this.needsPragma !== null) {
          this.setResult(this.needsPragma, ResultType.META_TAG);
        } else if (this.gotPragma === null) {
          this.gotPragma = true;
        }
        this.state = State3.BeforeAttribute;
        return;
      }
    } else if (this.advanceSectionIC(STRINGS.CONTENT_TYPE, c3)) {
      return;
    }
    this.gotPragma = false;
    if (this.quoteCharacter === 0) {
      this.state = State3.AttributeValueUnquoted;
      this.stateAttributeValueUnquoted(c3);
    } else {
      this.state = State3.AttributeValueQuoted;
      this.stateAttributeValueQuoted(c3);
    }
  };
  Sniffer2.prototype.handleMetaContentValue = function() {
    if (this.attributeValue.length === 0)
      return;
    var encoding = String.fromCharCode.apply(String, this.attributeValue);
    if (this.gotPragma) {
      this.setResult(encoding, ResultType.META_TAG);
    } else if (this.needsPragma === null) {
      this.needsPragma = encoding;
    }
    this.attributeValue.length = 0;
  };
  Sniffer2.prototype.handleAttributeValue = function() {
    if (this.attribType === AttribType.Charset) {
      this.setResult(String.fromCharCode.apply(String, this.attributeValue), ResultType.META_TAG);
    }
  };
  Sniffer2.prototype.stateAttributeValueUnquoted = function(c3) {
    if (SPACE_CHARACTERS.has(c3)) {
      this.handleAttributeValue();
      this.state = State3.BeforeAttribute;
    } else if (c3 === Chars.SLASH || c3 === Chars.GT) {
      this.handleAttributeValue();
      this.state = State3.BeforeTag;
    } else if (this.attribType === AttribType.Charset) {
      this.attributeValue.push(c3 | 32);
    }
  };
  Sniffer2.prototype.findMetaContentEncoding = function(c3) {
    if (this.advanceSectionIC(STRINGS.CHARSET, c3)) {
      if (this.sectionIndex === STRINGS.CHARSET.length) {
        return true;
      }
    } else {
      this.sectionIndex = Number(c3 === STRINGS.CHARSET[0]);
    }
    return false;
  };
  Sniffer2.prototype.stateMetaContentValueUnquotedBeforeEncoding = function(c3) {
    if (END_OF_UNQUOTED_ATTRIBUTE_VALUE.has(c3)) {
      this.stateAttributeValueUnquoted(c3);
    } else if (this.sectionIndex === STRINGS.CHARSET.length) {
      if (c3 === Chars.EQUALS) {
        this.state = State3.MetaContentValueUnquotedBeforeValue;
      }
    } else {
      this.findMetaContentEncoding(c3);
    }
  };
  Sniffer2.prototype.stateMetaContentValueUnquotedBeforeValue = function(c3) {
    if (isQuote2(c3)) {
      this.quoteCharacter = c3;
      this.state = State3.MetaContentValueUnquotedValueQuoted;
    } else if (END_OF_UNQUOTED_ATTRIBUTE_VALUE.has(c3)) {
      this.stateAttributeValueUnquoted(c3);
    } else {
      this.state = State3.MetaContentValueUnquotedValueUnquoted;
      this.stateMetaContentValueUnquotedValueUnquoted(c3);
    }
  };
  Sniffer2.prototype.stateMetaContentValueUnquotedValueQuoted = function(c3) {
    if (END_OF_UNQUOTED_ATTRIBUTE_VALUE.has(c3)) {
      this.stateAttributeValueUnquoted(c3);
    } else if (c3 === this.quoteCharacter) {
      this.handleMetaContentValue();
      this.state = State3.AttributeValueUnquoted;
    } else {
      this.attributeValue.push(c3 | 32);
    }
  };
  Sniffer2.prototype.stateMetaContentValueUnquotedValueUnquoted = function(c3) {
    if (END_OF_UNQUOTED_ATTRIBUTE_VALUE.has(c3) || c3 === Chars.SEMICOLON) {
      this.handleMetaContentValue();
      this.state = State3.AttributeValueUnquoted;
      this.stateAttributeValueUnquoted(c3);
    } else {
      this.attributeValue.push(c3 | 32);
    }
  };
  Sniffer2.prototype.stateMetaContentValueQuotedValueUnquoted = function(c3) {
    if (isQuote2(c3) || SPACE_CHARACTERS.has(c3) || c3 === Chars.SEMICOLON) {
      this.handleMetaContentValue();
      this.state = State3.AttributeValueQuoted;
      this.stateAttributeValueQuoted(c3);
    } else {
      this.attributeValue.push(c3 | 32);
    }
  };
  Sniffer2.prototype.stateMetaContentValueQuotedValueQuoted = function(c3) {
    if (isQuote2(c3)) {
      if (c3 !== this.quoteCharacter) {
        this.handleMetaContentValue();
      }
      this.state = State3.AttributeValueQuoted;
      this.stateAttributeValueQuoted(c3);
    } else {
      this.attributeValue.push(c3 | 32);
    }
  };
  Sniffer2.prototype.stateMetaContentValueQuotedBeforeEncoding = function(c3) {
    if (c3 === this.quoteCharacter) {
      this.stateAttributeValueQuoted(c3);
    } else if (this.findMetaContentEncoding(c3)) {
      this.state = State3.MetaContentValueQuotedAfterEncoding;
    }
  };
  Sniffer2.prototype.stateMetaContentValueQuotedAfterEncoding = function(c3) {
    if (c3 === Chars.EQUALS) {
      this.state = State3.MetaContentValueQuotedBeforeValue;
    } else if (!SPACE_CHARACTERS.has(c3)) {
      this.state = State3.MetaContentValueQuotedBeforeEncoding;
      this.stateMetaContentValueQuotedBeforeEncoding(c3);
    }
  };
  Sniffer2.prototype.stateMetaContentValueQuotedBeforeValue = function(c3) {
    if (c3 === this.quoteCharacter) {
      this.stateAttributeValueQuoted(c3);
    } else if (isQuote2(c3)) {
      this.state = State3.MetaContentValueQuotedValueQuoted;
    } else if (!SPACE_CHARACTERS.has(c3)) {
      this.state = State3.MetaContentValueQuotedValueUnquoted;
      this.stateMetaContentValueQuotedValueUnquoted(c3);
    }
  };
  Sniffer2.prototype.stateAttributeValueQuoted = function(c3) {
    if (c3 === this.quoteCharacter) {
      this.handleAttributeValue();
      this.state = State3.BeforeAttribute;
    } else if (this.attribType === AttribType.Charset) {
      this.attributeValue.push(c3 | 32);
    }
  };
  Sniffer2.prototype.stateXMLDeclaration = function(c3) {
    if (this.advanceSection(STRINGS.XML_DECLARATION, c3)) {
      if (this.sectionIndex === STRINGS.XML_DECLARATION.length) {
        this.sectionIndex = 0;
        this.state = State3.XMLDeclarationBeforeEncoding;
      }
    } else {
      this.state = State3.WeirdTag;
    }
  };
  Sniffer2.prototype.stateXMLDeclarationBeforeEncoding = function(c3) {
    if (this.advanceSection(STRINGS.ENCODING, c3)) {
      if (this.sectionIndex === STRINGS.ENCODING.length) {
        this.state = State3.XMLDeclarationAfterEncoding;
      }
    } else if (c3 === Chars.GT) {
      this.state = State3.BeforeTag;
    } else {
      this.sectionIndex = Number(c3 === STRINGS.ENCODING[0]);
    }
  };
  Sniffer2.prototype.stateXMLDeclarationAfterEncoding = function(c3) {
    if (c3 === Chars.EQUALS) {
      this.state = State3.XMLDeclarationBeforeValue;
    } else if (c3 > Chars.SPACE) {
      this.state = State3.WeirdTag;
      this.stateWeirdTag(c3);
    }
  };
  Sniffer2.prototype.stateXMLDeclarationBeforeValue = function(c3) {
    if (isQuote2(c3)) {
      this.attributeValue.length = 0;
      this.state = State3.XMLDeclarationValue;
    } else if (c3 > Chars.SPACE) {
      this.state = State3.WeirdTag;
      this.stateWeirdTag(c3);
    }
  };
  Sniffer2.prototype.stateXMLDeclarationValue = function(c3) {
    if (isQuote2(c3)) {
      this.setResult(String.fromCharCode.apply(String, this.attributeValue), ResultType.XML_ENCODING);
      this.state = State3.WeirdTag;
    } else if (c3 === Chars.GT) {
      this.state = State3.BeforeTag;
    } else if (c3 <= Chars.SPACE) {
      this.state = State3.WeirdTag;
    } else {
      this.attributeValue.push(c3 | 32);
    }
  };
  Sniffer2.prototype.write = function(buffer) {
    var index2 = 0;
    for (;index2 < buffer.length && this.offset + index2 < this.maxBytes; index2++) {
      var c3 = buffer[index2];
      switch (this.state) {
        case State3.Begin: {
          this.stateBegin(c3);
          break;
        }
        case State3.BOM16BE: {
          this.stateBOM16BE(c3);
          break;
        }
        case State3.BOM16LE: {
          this.stateBOM16LE(c3);
          break;
        }
        case State3.BOM8: {
          this.stateBOM8(c3);
          break;
        }
        case State3.UTF16LE_XML_PREFIX: {
          this.stateUTF16LE_XML_PREFIX(c3);
          break;
        }
        case State3.BeginLT: {
          this.stateBeginLT(c3);
          break;
        }
        case State3.UTF16BE_XML_PREFIX: {
          this.stateUTF16BE_XML_PREFIX(c3);
          break;
        }
        case State3.BeforeTag: {
          var idx = buffer.indexOf(Chars.LT, index2);
          if (idx < 0) {
            index2 = buffer.length;
          } else {
            index2 = idx;
            this.stateBeforeTag(Chars.LT);
          }
          break;
        }
        case State3.BeforeTagName: {
          this.stateBeforeTagName(c3);
          break;
        }
        case State3.BeforeCloseTagName: {
          this.stateBeforeCloseTagName(c3);
          break;
        }
        case State3.CommentStart: {
          this.stateCommentStart(c3);
          break;
        }
        case State3.CommentEnd: {
          this.stateCommentEnd(c3);
          break;
        }
        case State3.TagNameMeta: {
          this.stateTagNameMeta(c3);
          break;
        }
        case State3.TagNameOther: {
          this.stateTagNameOther(c3);
          break;
        }
        case State3.XMLDeclaration: {
          this.stateXMLDeclaration(c3);
          break;
        }
        case State3.XMLDeclarationBeforeEncoding: {
          this.stateXMLDeclarationBeforeEncoding(c3);
          break;
        }
        case State3.XMLDeclarationAfterEncoding: {
          this.stateXMLDeclarationAfterEncoding(c3);
          break;
        }
        case State3.XMLDeclarationBeforeValue: {
          this.stateXMLDeclarationBeforeValue(c3);
          break;
        }
        case State3.XMLDeclarationValue: {
          this.stateXMLDeclarationValue(c3);
          break;
        }
        case State3.WeirdTag: {
          this.stateWeirdTag(c3);
          break;
        }
        case State3.BeforeAttribute: {
          this.stateBeforeAttribute(c3);
          break;
        }
        case State3.MetaAttribHttpEquiv: {
          this.stateMetaAttribHttpEquiv(c3);
          break;
        }
        case State3.MetaAttribHttpEquivValue: {
          this.stateMetaAttribHttpEquivValue(c3);
          break;
        }
        case State3.MetaAttribC: {
          this.stateMetaAttribC(c3);
          break;
        }
        case State3.MetaAttribContent: {
          this.stateMetaAttribContent(c3);
          break;
        }
        case State3.MetaAttribCharset: {
          this.stateMetaAttribCharset(c3);
          break;
        }
        case State3.MetaAttribAfterName: {
          this.stateMetaAttribAfterName(c3);
          break;
        }
        case State3.MetaContentValueQuotedBeforeEncoding: {
          this.stateMetaContentValueQuotedBeforeEncoding(c3);
          break;
        }
        case State3.MetaContentValueQuotedAfterEncoding: {
          this.stateMetaContentValueQuotedAfterEncoding(c3);
          break;
        }
        case State3.MetaContentValueQuotedBeforeValue: {
          this.stateMetaContentValueQuotedBeforeValue(c3);
          break;
        }
        case State3.MetaContentValueQuotedValueQuoted: {
          this.stateMetaContentValueQuotedValueQuoted(c3);
          break;
        }
        case State3.MetaContentValueQuotedValueUnquoted: {
          this.stateMetaContentValueQuotedValueUnquoted(c3);
          break;
        }
        case State3.MetaContentValueUnquotedBeforeEncoding: {
          this.stateMetaContentValueUnquotedBeforeEncoding(c3);
          break;
        }
        case State3.MetaContentValueUnquotedBeforeValue: {
          this.stateMetaContentValueUnquotedBeforeValue(c3);
          break;
        }
        case State3.MetaContentValueUnquotedValueQuoted: {
          this.stateMetaContentValueUnquotedValueQuoted(c3);
          break;
        }
        case State3.MetaContentValueUnquotedValueUnquoted: {
          this.stateMetaContentValueUnquotedValueUnquoted(c3);
          break;
        }
        case State3.AnyAttribName: {
          this.stateAnyAttribName(c3);
          break;
        }
        case State3.AfterAttributeName: {
          this.stateAfterAttributeName(c3);
          break;
        }
        case State3.BeforeAttributeValue: {
          this.stateBeforeAttributeValue(c3);
          break;
        }
        case State3.AttributeValueQuoted: {
          this.stateAttributeValueQuoted(c3);
          break;
        }
        default: {
          this.stateAttributeValueUnquoted(c3);
        }
      }
    }
    this.offset += index2;
  };
  return Sniffer2;
}();

// node_modules/encoding-sniffer/dist/esm/index.js
var __extends = function() {
  var extendStatics = function(d3, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p3 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p3))
          d4[p3] = b3[p3];
    };
    return extendStatics(d3, b);
  };
  return function(d3, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d3, b);
    function __() {
      this.constructor = d3;
    }
    d3.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __);
  };
}();
var DecodeStream = function(_super) {
  __extends(DecodeStream2, _super);
  function DecodeStream2(options3) {
    var _a2;
    var _this = _super.call(this, { decodeStrings: false, encoding: "utf-8" }) || this;
    _this.buffers = [];
    _this.iconv = null;
    _this.readBytes = 0;
    _this.sniffer = new Sniffer(options3);
    _this.maxBytes = (_a2 = options3 === null || options3 === undefined ? undefined : options3.maxBytes) !== null && _a2 !== undefined ? _a2 : 1024;
    return _this;
  }
  DecodeStream2.prototype._transform = function(chunk, _encoding, callback) {
    if (this.readBytes < this.maxBytes) {
      this.sniffer.write(chunk);
      this.readBytes += chunk.length;
      if (this.readBytes < this.maxBytes) {
        this.buffers.push(chunk);
        callback();
        return;
      }
    }
    this.getIconvStream().write(chunk, callback);
  };
  DecodeStream2.prototype.getIconvStream = function() {
    var _this = this;
    if (this.iconv) {
      return this.iconv;
    }
    var stream2 = import_iconv_lite.default.decodeStream(this.sniffer.encoding);
    stream2.on("data", function(chunk) {
      return _this.push(chunk, "utf-8");
    });
    stream2.on("end", function() {
      return _this.push(null);
    });
    this.iconv = stream2;
    for (var _i = 0, _a2 = this.buffers;_i < _a2.length; _i++) {
      var buffer = _a2[_i];
      stream2.write(buffer);
    }
    this.buffers.length = 0;
    return stream2;
  };
  DecodeStream2.prototype._flush = function(callback) {
    this.getIconvStream().end(callback);
  };
  return DecodeStream2;
}(Transform2);

// node_modules/cheerio/dist/esm/index.js
var import_whatwg_mimetype = __toESM(require_mime_type(), 1);

// src/helper.ts
async function contentToPdf(content, path2) {
  const doc = new pdfkit_es_default;
  const stream2 = createWriteStream(path2);
  doc.pipe(stream2);
  doc.text(content, 50, 50);
  doc.end();
  await new Promise((resolve2, reject) => {
    stream2.on("finish", resolve2);
    stream2.on("error", reject);
  });
  return path2;
}
async function scrapeBody(url) {
  try {
    const response = await fetch(url);
    const html10 = await response.text();
    const $4 = load2(html10);
    const bodyContent = $4("body").text().replaceAll("\n", " ").replaceAll("    ", "");
    return bodyContent;
  } catch (error22) {
    console.error("Error fetching the website:", error22);
  }
}
function isURL(string7) {
  try {
    new URL(string7);
    return true;
  } catch {
    return false;
  }
}

// src/schema.ts
var addPDFSchema = V.Object({
  file: V.Optional(V.File()),
  content: V.Optional(V.String())
});
var chatSchema = V.Object({
  messages: V.Array(V.Object({
    role: V.String({
      minLength: 1,
      default: "user"
    }),
    content: V.String({
      minLength: 1,
      default: "what the doc say"
    })
  }))
});

// src/libs/db.ts
var client = __toESM(require_default2(), 1);
var prismaClientSingleton = () => {
  return new client.PrismaClient;
};
var prisma = globalThis.prismaGlobal ?? prismaClientSingleton();
var db_default = prisma;
if (true)
  globalThis.prismaGlobal = prisma;

// node_modules/@bogeychan/elysia-logger/dist/index.js
var import_pino2 = __toESM(require_pino(), 1);

// node_modules/@bogeychan/elysia-logger/dist/config/serializers.js
var import_pino = __toESM(require_pino(), 1);
function serializeRequest(request) {
  return {
    method: request.method,
    url: request.url,
    referrer: request.headers.get("Referer")
  };
}
var serializers = {
  request: serializeRequest,
  err: import_pino.stdSerializers.err
};

// node_modules/@bogeychan/elysia-logger/dist/config/formatters.js
function isContext(object13) {
  const context = object13;
  switch (undefined) {
    case context.request:
    case context.store:
    case context.isError:
      return false;
  }
  return true;
}
function isRequest(object13) {
  const request = object13;
  switch (undefined) {
    case request.url:
    case request.method:
      return false;
  }
  return true;
}
var formatters = {
  log(object13) {
    if (isContext(object13)) {
      const log = {
        request: object13.request
      };
      if (object13.isError) {
        log.code = object13.code;
        log.message = object13.error.message;
      } else {
        if (object13.store.responseTime) {
          log.responseTime = object13.store.responseTime;
        }
      }
      return log;
    } else if (isRequest(object13)) {
      return serializeRequest(object13);
    }
    return object13;
  }
};
// node_modules/@bogeychan/elysia-logger/dist/index.js
function logger(options4 = {}) {
  return plugin(options4);
}
var import_pino3 = __toESM(require_pino(), 1);
function createPinoLoggerInternal(options4) {
  options4.level ??= "info";
  options4.formatters ??= formatters;
  options4.serializers ??= serializers;
  const streamOptions = options4;
  if ("file" in options4) {
    streamOptions.stream = import_pino2.default.destination(options4.file);
    delete options4.file;
  }
  return import_pino2.default(options4, streamOptions.stream);
}
function into(options4 = {}) {
  const autoLogging = options4.autoLogging ?? true;
  delete options4.autoLogging;
  const getLog = (ctx) => {
    return typeof options4.customProps === "function" ? this.child(options4.customProps(ctx)) : this;
  };
  let app = new Q0({
    name: "@bogeychan/elysia-logger",
    seed: options4
  }).derive({ as: "global" }, (ctx) => {
    const loggerCtx = ctx;
    loggerCtx.isError = false;
    return { log: getLog(loggerCtx) };
  });
  if (autoLogging) {
    return app.onRequest((ctx) => {
      ctx.store = { ...ctx.store, startTime: performance.now() };
    }).onAfterResponse({ as: "global" }, (ctx) => {
      const loggerCtx = ctx;
      loggerCtx.isError = false;
      const log = getLog(loggerCtx);
      if (log.level == "silent") {
        return;
      }
      if (typeof autoLogging == "object" && autoLogging.ignore(loggerCtx)) {
        return;
      }
      ctx.store.startTime ??= 0;
      ctx.store.endTime = performance.now();
      ctx.store.responseTime = ctx.store.endTime - ctx.store.startTime;
      log.info(ctx);
    }).onError({ as: "global" }, (ctx) => {
      const loggerCtx = ctx;
      loggerCtx.isError = true;
      const log = getLog(loggerCtx);
      if (log.level == "silent") {
        return;
      }
      if (typeof autoLogging == "object" && autoLogging.ignore(loggerCtx)) {
        return;
      }
      if (ctx.code === "NOT_FOUND") {
        log.info(ctx);
      } else {
        log.error(ctx);
      }
    });
  }
  return app;
}
var plugin = (options4) => into.bind(createPinoLoggerInternal(options4))(options4);

// node_modules/uuid/wrapper.mjs
var dist = __toESM(require_dist(), 1);
var v12 = dist.default.v1;
var v1ToV6 = dist.default.v1ToV6;
var v3 = dist.default.v3;
var v4 = dist.default.v4;
var v5 = dist.default.v5;
var v6 = dist.default.v6;
var v6ToV1 = dist.default.v6ToV1;
var v7 = dist.default.v7;
var NIL = dist.default.NIL;
var MAX = dist.default.MAX;
var version = dist.default.version;
var validate = dist.default.validate;
var stringify4 = dist.default.stringify;
var parse13 = dist.default.parse;

// src/index.ts
async function getPDFFromDB() {
  const source = await db_default.source.findFirst();
  if (!source)
    return null;
  return source;
}
var app = new Q0({}).use(src_default());
app.use(swagger());
app.use(logger({
  level: "info"
}));
app.use(staticPlugin());
app.get("/", async ({ request }) => {
  return { message: "Hello Elysia with Bun" };
});
app.post("/upload-pdf", async ({ body: { file, content }, request }) => {
  const appURL = request.url;
  if (!content && !file)
    return Response.json({ message: "No file provided or content provided" }, { status: 400 });
  const name = v4() + ".pdf";
  const path2 = "./public/" + name;
  if (content) {
    if (isURL(content)) {
      const scrapContent = await scrapeBody(content);
      if (scrapContent)
        content = scrapContent;
    }
    await contentToPdf(content, path2);
  } else {
    if (!file) {
      return Response.json({ message: "No file provided" }, { status: 400 });
    }
    const buffer = new Uint8Array(await file.arrayBuffer());
    Bun.write(path2, buffer);
  }
  const url = new URL(path2, appURL).toString();
  const response = await api({
    method: "POST",
    path: "/sources/add-url",
    body: { url }
  });
  const data2 = await response.json();
  const old = await getPDFFromDB();
  if (old) {
    console.log(old.name);
    await unlink("./public/" + old.name).catch((e) => {
      console.log(e.message);
    });
    const deleteBody = {
      sources: [old.sourceId]
    };
    const removePdf = api({
      method: "POST",
      path: "sources/delete",
      body: deleteBody
    });
    const removeFromDB = db_default.source.deleteMany();
    await Promise.all([removePdf, removeFromDB]);
  }
  await db_default.source.create({
    data: {
      sourceId: data2.sourceId || "no-sourceId",
      url,
      name
    }
  });
  return { name };
}, {
  body: addPDFSchema
});
app.post("/chat", async function* ({ body, query }) {
  const { messages } = body;
  const pdf = await getPDFFromDB();
  if (!pdf)
    return Response.json({ message: "No Source found" }, { status: 404 });
  const data2 = {
    sourceId: pdf.sourceId,
    stream: query.stream || false,
    messages
  };
  try {
    const res = await api({
      method: "POST",
      path: "/chats/message",
      body: data2
    });
    if (res.ok && res.body) {
      if (query.stream) {
        const reader = res.body.getReader();
        let decoder = new TextDecoder;
        while (true) {
          const { done, value: value15 } = await reader.read();
          if (done)
            break;
          const chunk = decoder.decode(value15, { stream: true });
          yield chunk;
        }
      } else {
        const data3 = await res.json();
        return data3;
      }
    }
  } catch (error22) {
    return Response.json({ messages: error22 }, { status: 400 });
  }
}, {
  body: chatSchema,
  query: V.Object({
    stream: V.Optional(V.Boolean())
  })
});
app.listen(3000);
console.log(`\uD83E\uDD8A Elysia is running at ${app.server?.hostname}:${app.server?.port}`);
